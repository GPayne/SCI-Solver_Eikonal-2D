#line 1 "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu"
#line 168 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\crtdefs.h"
#pragma pack ( push, 8 )
#line 32 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\vadefs.h"
#pragma pack ( push, 8 )
#line 52 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\vadefs.h"
extern "C" { typedef unsigned __w64 uintptr_t; }
#line 61 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\vadefs.h"
extern "C" { typedef char *va_list; }
#line 151 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\vadefs.h"
#pragma pack ( pop )
#line 490 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\crtdefs.h"
typedef unsigned size_t; 
#include "crt/host_runtime.h"
#line 497 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\crtdefs.h"
extern "C" { typedef size_t rsize_t; }
#line 506 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\crtdefs.h"
extern "C" { typedef int __w64 intptr_t; }
#line 524 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\crtdefs.h"
extern "C" { typedef int __w64 ptrdiff_t; }
#line 535 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\crtdefs.h"
extern "C" { typedef unsigned short wint_t; }
extern "C" { typedef unsigned short wctype_t; }
#line 560 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\crtdefs.h"
extern "C" { typedef int errcode; }
#line 565 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\crtdefs.h"
extern "C" { typedef int errno_t; }
#line 569 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\crtdefs.h"
extern "C" { typedef long __w64 __time32_t; }
#line 574 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\crtdefs.h"
extern "C" { typedef __int64 __time64_t; }
#line 582 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\crtdefs.h"
extern "C" { typedef __time64_t time_t; }
#line 2037 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\crtdefs.h"
struct threadlocaleinfostruct; 
struct threadmbcinfostruct; 
extern "C" { typedef threadlocaleinfostruct *pthreadlocinfo; }
extern "C" { typedef threadmbcinfostruct *pthreadmbcinfo; }
struct __lc_time_data; 
#line 2047
extern "C" { typedef 
#line 2043
struct localeinfo_struct { 

pthreadlocinfo locinfo; 
pthreadmbcinfo mbcinfo; 
} _locale_tstruct; }extern "C" { typedef localeinfo_struct *_locale_t; }
#line 2054
extern "C" { typedef 
#line 2050
struct tagLC_ID { 
unsigned short wLanguage; 
unsigned short wCountry; 
unsigned short wCodePage; 
} LC_ID; }extern "C" { typedef tagLC_ID *LPLC_ID; }
#line 2083 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\crtdefs.h"
extern "C" { typedef 
#line 2059
struct threadlocaleinfostruct { 
int refcount; 
unsigned lc_codepage; 
unsigned lc_collate_cp; 
unsigned long lc_handle[6]; 
LC_ID lc_id[6]; 
struct { 
char *locale; 
__wchar_t *wlocale; 
int *refcount; 
int *wrefcount; 
} lc_category[6]; 
int lc_clike; 
int mb_cur_max; 
int *lconv_intl_refcount; 
int *lconv_num_refcount; 
int *lconv_mon_refcount; 
struct lconv *lconv; 
int *ctype1_refcount; 
unsigned short *ctype1; 
const unsigned short *pctype; 
const unsigned char *pclmap; 
const unsigned char *pcumap; 
__lc_time_data *lc_time_curr; 
} threadlocinfo; }
#line 2121 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\crtdefs.h"
#pragma pack ( pop )
#line 46 "c:\\cuda\\include\\device_types.h"
#if 0
#line 46
enum cudaRoundMode { 

cudaRoundNearest, 
cudaRoundZero, 
cudaRoundPosInf, 
cudaRoundMinInf
}; 
#endif
#line 41 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stddef.h"
extern "C" { extern int *__cdecl _errno(); } 


extern "C" { extern errno_t __cdecl _set_errno(int); } 
extern "C" { extern errno_t __cdecl _get_errno(int *); } 
#line 68 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stddef.h"
extern "C" { extern unsigned long __cdecl __threadid(); } 

extern "C" { extern uintptr_t __cdecl __threadhandle(); } 
#line 91 "c:\\cuda\\include\\driver_types.h"
#if 0
#line 91
enum cudaError { 

cudaSuccess, 
cudaErrorMissingConfiguration, 
cudaErrorMemoryAllocation, 
cudaErrorInitializationError, 
cudaErrorLaunchFailure, 
cudaErrorPriorLaunchFailure, 
cudaErrorLaunchTimeout, 
cudaErrorLaunchOutOfResources, 
cudaErrorInvalidDeviceFunction, 
cudaErrorInvalidConfiguration, 
cudaErrorInvalidDevice, 
cudaErrorInvalidValue, 
cudaErrorInvalidPitchValue, 
cudaErrorInvalidSymbol, 
cudaErrorMapBufferObjectFailed, 
cudaErrorUnmapBufferObjectFailed, 
cudaErrorInvalidHostPointer, 
cudaErrorInvalidDevicePointer, 
cudaErrorInvalidTexture, 
cudaErrorInvalidTextureBinding, 
cudaErrorInvalidChannelDescriptor, 
cudaErrorInvalidMemcpyDirection, 
cudaErrorAddressOfConstant, 
cudaErrorTextureFetchFailed, 
cudaErrorTextureNotBound, 
cudaErrorSynchronizationError, 
cudaErrorInvalidFilterSetting, 
cudaErrorInvalidNormSetting, 
cudaErrorMixedDeviceExecution, 
cudaErrorCudartUnloading, 
cudaErrorUnknown, 
cudaErrorNotYetImplemented, 
cudaErrorMemoryValueTooLarge, 
cudaErrorInvalidResourceHandle, 
cudaErrorNotReady, 
cudaErrorInsufficientDriver, 
cudaErrorSetOnActiveProcess, 
cudaErrorNoDevice = 38, 
cudaErrorStartupFailure = 127, 
cudaErrorApiFailureBase = 10000
}; 
#endif
#line 139 "c:\\cuda\\include\\driver_types.h"
#if 0
#line 139
enum cudaChannelFormatKind { 

cudaChannelFormatKindSigned, 
cudaChannelFormatKindUnsigned, 
cudaChannelFormatKindFloat, 
cudaChannelFormatKindNone
}; 
#endif
#line 151 "c:\\cuda\\include\\driver_types.h"
#if 0
#line 151
struct cudaChannelFormatDesc { 

int x; 
int y; 
int z; 
int w; 
cudaChannelFormatKind f; 
}; 
#endif
#line 164 "c:\\cuda\\include\\driver_types.h"
#if 0
struct cudaArray; 
#endif
#line 170 "c:\\cuda\\include\\driver_types.h"
#if 0
#line 170
enum cudaMemcpyKind { 

cudaMemcpyHostToHost, 
cudaMemcpyHostToDevice, 
cudaMemcpyDeviceToHost, 
cudaMemcpyDeviceToDevice
}; 
#endif
#line 182 "c:\\cuda\\include\\driver_types.h"
#if 0
#line 182
struct cudaPitchedPtr { 

void *ptr; 
size_t pitch; 
size_t xsize; 
size_t ysize; 
}; 
#endif
#line 194 "c:\\cuda\\include\\driver_types.h"
#if 0
#line 194
struct cudaExtent { 

size_t width; 
size_t height; 
size_t depth; 
}; 
#endif
#line 205 "c:\\cuda\\include\\driver_types.h"
#if 0
#line 205
struct cudaPos { 

size_t x; 
size_t y; 
size_t z; 
}; 
#endif
#line 216 "c:\\cuda\\include\\driver_types.h"
#if 0
#line 216
struct cudaMemcpy3DParms { 

cudaArray *srcArray; 
cudaPos srcPos; 
cudaPitchedPtr srcPtr; 

cudaArray *dstArray; 
cudaPos dstPos; 
cudaPitchedPtr dstPtr; 

cudaExtent extent; 
cudaMemcpyKind kind; 
}; 
#endif
#line 234 "c:\\cuda\\include\\driver_types.h"
#if 0
#line 234
struct cudaFuncAttributes { 

size_t sharedSizeBytes; 
size_t constSizeBytes; 
size_t localSizeBytes; 
int maxThreadsPerBlock; 
int numRegs; 
int __cudaReserved[8]; 
}; 
#endif
#line 248 "c:\\cuda\\include\\driver_types.h"
#if 0
#line 248
enum cudaComputeMode { 

cudaComputeModeDefault, 
cudaComputeModeExclusive, 
cudaComputeModeProhibited
}; 
#endif
#line 260 "c:\\cuda\\include\\driver_types.h"
#if 0
#line 260
struct cudaDeviceProp { 

char name[256]; 
size_t totalGlobalMem; 
size_t sharedMemPerBlock; 
int regsPerBlock; 
int warpSize; 
size_t memPitch; 
int maxThreadsPerBlock; 
int maxThreadsDim[3]; 
int maxGridSize[3]; 
int clockRate; 
size_t totalConstMem; 
int major; 
int minor; 
size_t textureAlignment; 
int deviceOverlap; 
int multiProcessorCount; 
int kernelExecTimeoutEnabled; 
int integrated; 
int canMapHostMemory; 
int computeMode; 
int __cudaReserved[36]; 
}; 
#endif
#line 319 "c:\\cuda\\include\\driver_types.h"
#if 0
typedef cudaError 
#line 319
cudaError_t; 
#endif
#line 325 "c:\\cuda\\include\\driver_types.h"
#if 0
typedef int 
#line 325
cudaStream_t; 
#endif
#line 331 "c:\\cuda\\include\\driver_types.h"
#if 0
typedef int 
#line 331
cudaEvent_t; 
#endif
#line 54 "c:\\cuda\\include\\texture_types.h"
#if 0
#line 54
enum cudaTextureAddressMode { 

cudaAddressModeWrap, 
cudaAddressModeClamp
}; 
#endif
#line 61 "c:\\cuda\\include\\texture_types.h"
#if 0
#line 61
enum cudaTextureFilterMode { 

cudaFilterModePoint, 
cudaFilterModeLinear
}; 
#endif
#line 68 "c:\\cuda\\include\\texture_types.h"
#if 0
#line 68
enum cudaTextureReadMode { 

cudaReadModeElementType, 
cudaReadModeNormalizedFloat
}; 
#endif
#line 75 "c:\\cuda\\include\\texture_types.h"
#if 0
#line 75
struct textureReference { 

int normalized; 
cudaTextureFilterMode filterMode; 
cudaTextureAddressMode addressMode[3]; 
cudaChannelFormatDesc channelDesc; 
int __cudaReserved[16]; 
}; 
#endif
#line 82 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 82
struct char1 { 

signed char x; 

}; 
#endif
#line 89 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 89
struct uchar1 { 

unsigned char x; 

}; 
#endif
#line 96 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 96
struct __declspec(align(2)) char2 { 

signed char x; signed char y; 

}; 
#endif
#line 103 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 103
struct __declspec(align(2)) uchar2 { 

unsigned char x; unsigned char y; 

}; 
#endif
#line 110 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 110
struct char3 { 

signed char x; signed char y; signed char z; 

}; 
#endif
#line 117 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 117
struct uchar3 { 

unsigned char x; unsigned char y; unsigned char z; 

}; 
#endif
#line 124 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 124
struct __declspec(align(4)) char4 { 

signed char x; signed char y; signed char z; signed char w; 

}; 
#endif
#line 131 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 131
struct __declspec(align(4)) uchar4 { 

unsigned char x; unsigned char y; unsigned char z; unsigned char w; 

}; 
#endif
#line 138 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 138
struct short1 { 

short x; 

}; 
#endif
#line 145 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 145
struct ushort1 { 

unsigned short x; 

}; 
#endif
#line 152 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 152
struct __declspec(align(4)) short2 { 

short x; short y; 

}; 
#endif
#line 159 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 159
struct __declspec(align(4)) ushort2 { 

unsigned short x; unsigned short y; 

}; 
#endif
#line 166 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 166
struct short3 { 

short x; short y; short z; 

}; 
#endif
#line 173 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 173
struct ushort3 { 

unsigned short x; unsigned short y; unsigned short z; 

}; 
#endif
#line 180 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 180
struct __declspec(align(8)) short4 { short x; short y; short z; short w; }; 
#endif
#line 183 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 183
struct __declspec(align(8)) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; }; 
#endif
#line 186 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 186
struct int1 { 

int x; 

}; 
#endif
#line 193 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 193
struct uint1 { 

unsigned x; 

}; 
#endif
#line 200 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 200
struct __declspec(align(8)) int2 { int x; int y; }; 
#endif
#line 203 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 203
struct __declspec(align(8)) uint2 { unsigned x; unsigned y; }; 
#endif
#line 206 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 206
struct int3 { 

int x; int y; int z; 

}; 
#endif
#line 213 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 213
struct uint3 { 

unsigned x; unsigned y; unsigned z; 

}; 
#endif
#line 220 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 220
struct __declspec(align(16)) int4 { 

int x; int y; int z; int w; 

}; 
#endif
#line 227 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 227
struct __declspec(align(16)) uint4 { 

unsigned x; unsigned y; unsigned z; unsigned w; 

}; 
#endif
#line 234 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 234
struct long1 { 

long x; 

}; 
#endif
#line 241 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 241
struct ulong1 { 

unsigned long x; 

}; 
#endif
#line 250 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 250
struct __declspec(align(8)) long2 { long x; long y; }; 
#endif
#line 253 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 253
struct __declspec(align(8)) ulong2 { unsigned long x; unsigned long y; }; 
#endif
#line 276 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 276
struct long3 { 

long x; long y; long z; 

}; 
#endif
#line 283 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 283
struct ulong3 { 

unsigned long x; unsigned long y; unsigned long z; 

}; 
#endif
#line 290 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 290
struct __declspec(align(16)) long4 { 

long x; long y; long z; long w; 

}; 
#endif
#line 297 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 297
struct __declspec(align(16)) ulong4 { 

unsigned long x; unsigned long y; unsigned long z; unsigned long w; 

}; 
#endif
#line 306 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 306
struct float1 { 

float x; 

}; 
#endif
#line 313 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 313
struct __declspec(align(8)) float2 { float x; float y; }; 
#endif
#line 316 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 316
struct float3 { 

float x; float y; float z; 

}; 
#endif
#line 323 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 323
struct __declspec(align(16)) float4 { 

float x; float y; float z; float w; 

}; 
#endif
#line 330 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 330
struct longlong1 { 

__int64 x; 

}; 
#endif
#line 337 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 337
struct ulonglong1 { 

unsigned __int64 x; 

}; 
#endif
#line 344 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 344
struct __declspec(align(16)) longlong2 { 

__int64 x; __int64 y; 

}; 
#endif
#line 351 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 351
struct __declspec(align(16)) ulonglong2 { 

unsigned __int64 x; unsigned __int64 y; 

}; 
#endif
#line 358 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 358
struct double1 { 

double x; 

}; 
#endif
#line 365 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 365
struct __declspec(align(16)) double2 { 

double x; double y; 

}; 
#endif
#line 378 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef char1 
#line 378
char1; 
#endif
#line 380 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef uchar1 
#line 380
uchar1; 
#endif
#line 382 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef char2 
#line 382
char2; 
#endif
#line 384 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef uchar2 
#line 384
uchar2; 
#endif
#line 386 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef char3 
#line 386
char3; 
#endif
#line 388 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef uchar3 
#line 388
uchar3; 
#endif
#line 390 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef char4 
#line 390
char4; 
#endif
#line 392 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef uchar4 
#line 392
uchar4; 
#endif
#line 394 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef short1 
#line 394
short1; 
#endif
#line 396 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef ushort1 
#line 396
ushort1; 
#endif
#line 398 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef short2 
#line 398
short2; 
#endif
#line 400 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef ushort2 
#line 400
ushort2; 
#endif
#line 402 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef short3 
#line 402
short3; 
#endif
#line 404 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef ushort3 
#line 404
ushort3; 
#endif
#line 406 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef short4 
#line 406
short4; 
#endif
#line 408 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef ushort4 
#line 408
ushort4; 
#endif
#line 410 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef int1 
#line 410
int1; 
#endif
#line 412 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef uint1 
#line 412
uint1; 
#endif
#line 414 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef int2 
#line 414
int2; 
#endif
#line 416 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef uint2 
#line 416
uint2; 
#endif
#line 418 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef int3 
#line 418
int3; 
#endif
#line 420 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef uint3 
#line 420
uint3; 
#endif
#line 422 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef int4 
#line 422
int4; 
#endif
#line 424 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef uint4 
#line 424
uint4; 
#endif
#line 426 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef long1 
#line 426
long1; 
#endif
#line 428 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef ulong1 
#line 428
ulong1; 
#endif
#line 430 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef long2 
#line 430
long2; 
#endif
#line 432 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef ulong2 
#line 432
ulong2; 
#endif
#line 434 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef long3 
#line 434
long3; 
#endif
#line 436 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef ulong3 
#line 436
ulong3; 
#endif
#line 438 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef long4 
#line 438
long4; 
#endif
#line 440 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef ulong4 
#line 440
ulong4; 
#endif
#line 442 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef float1 
#line 442
float1; 
#endif
#line 444 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef float2 
#line 444
float2; 
#endif
#line 446 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef float3 
#line 446
float3; 
#endif
#line 448 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef float4 
#line 448
float4; 
#endif
#line 450 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef longlong1 
#line 450
longlong1; 
#endif
#line 452 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef ulonglong1 
#line 452
ulonglong1; 
#endif
#line 454 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef longlong2 
#line 454
longlong2; 
#endif
#line 456 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef ulonglong2 
#line 456
ulonglong2; 
#endif
#line 458 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef double1 
#line 458
double1; 
#endif
#line 460 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef double2 
#line 460
double2; 
#endif
#line 469 "c:\\cuda\\include\\vector_types.h"
#if 0
#line 469
struct dim3 { 

unsigned x; unsigned y; unsigned z; 
#line 477 "c:\\cuda\\include\\vector_types.h"
}; 
#endif
#line 480 "c:\\cuda\\include\\vector_types.h"
#if 0
typedef dim3 
#line 480
dim3; 
#endif
#line 89 "c:\\cuda\\include\\cuda_runtime_api.h"
extern "C" { extern cudaError_t __stdcall cudaMalloc3D(cudaPitchedPtr *, cudaExtent); } 
extern "C" { extern cudaError_t __stdcall cudaMalloc3DArray(cudaArray **, const cudaChannelFormatDesc *, cudaExtent); } 
extern "C" { extern cudaError_t __stdcall cudaMemset3D(cudaPitchedPtr, int, cudaExtent); } 
extern "C" { extern cudaError_t __stdcall cudaMemcpy3D(const cudaMemcpy3DParms *); } 
extern "C" { extern cudaError_t __stdcall cudaMemcpy3DAsync(const cudaMemcpy3DParms *, cudaStream_t); } 
#line 102
extern "C" { extern cudaError_t __stdcall cudaMalloc(void **, size_t); } 
extern "C" { extern cudaError_t __stdcall cudaMallocHost(void **, size_t); } 
extern "C" { extern cudaError_t __stdcall cudaMallocPitch(void **, size_t *, size_t, size_t); } 
extern "C" { extern cudaError_t __stdcall cudaMallocArray(cudaArray **, const cudaChannelFormatDesc *, size_t, size_t = (1)); } 
extern "C" { extern cudaError_t __stdcall cudaFree(void *); } 
extern "C" { extern cudaError_t __stdcall cudaFreeHost(void *); } 
extern "C" { extern cudaError_t __stdcall cudaFreeArray(cudaArray *); } 

extern "C" { extern cudaError_t __stdcall cudaHostAlloc(void **, size_t, unsigned); } 
extern "C" { extern cudaError_t __stdcall cudaHostGetDevicePointer(void **, void *, unsigned); } 
extern "C" { extern cudaError_t __stdcall cudaHostGetFlags(unsigned *, void *); } 
#line 121
extern "C" { extern cudaError_t __stdcall cudaMemcpy(void *, const void *, size_t, cudaMemcpyKind); } 
extern "C" { extern cudaError_t __stdcall cudaMemcpyToArray(cudaArray *, size_t, size_t, const void *, size_t, cudaMemcpyKind); } 
extern "C" { extern cudaError_t __stdcall cudaMemcpyFromArray(void *, const cudaArray *, size_t, size_t, size_t, cudaMemcpyKind); } 
extern "C" { extern cudaError_t __stdcall cudaMemcpyArrayToArray(cudaArray *, size_t, size_t, const cudaArray *, size_t, size_t, size_t, cudaMemcpyKind = cudaMemcpyDeviceToDevice); } 
extern "C" { extern cudaError_t __stdcall cudaMemcpy2D(void *, size_t, const void *, size_t, size_t, size_t, cudaMemcpyKind); } 
extern "C" { extern cudaError_t __stdcall cudaMemcpy2DToArray(cudaArray *, size_t, size_t, const void *, size_t, size_t, size_t, cudaMemcpyKind); } 
extern "C" { extern cudaError_t __stdcall cudaMemcpy2DFromArray(void *, size_t, const cudaArray *, size_t, size_t, size_t, size_t, cudaMemcpyKind); } 
extern "C" { extern cudaError_t __stdcall cudaMemcpy2DArrayToArray(cudaArray *, size_t, size_t, const cudaArray *, size_t, size_t, size_t, size_t, cudaMemcpyKind = cudaMemcpyDeviceToDevice); } 
extern "C" { extern cudaError_t __stdcall cudaMemcpyToSymbol(const char *, const void *, size_t, size_t = (0), cudaMemcpyKind = cudaMemcpyHostToDevice); } 
extern "C" { extern cudaError_t __stdcall cudaMemcpyFromSymbol(void *, const char *, size_t, size_t = (0), cudaMemcpyKind = cudaMemcpyDeviceToHost); } 
#line 138
extern "C" { extern cudaError_t __stdcall cudaMemcpyAsync(void *, const void *, size_t, cudaMemcpyKind, cudaStream_t); } 
extern "C" { extern cudaError_t __stdcall cudaMemcpyToArrayAsync(cudaArray *, size_t, size_t, const void *, size_t, cudaMemcpyKind, cudaStream_t); } 
extern "C" { extern cudaError_t __stdcall cudaMemcpyFromArrayAsync(void *, const cudaArray *, size_t, size_t, size_t, cudaMemcpyKind, cudaStream_t); } 
extern "C" { extern cudaError_t __stdcall cudaMemcpy2DAsync(void *, size_t, const void *, size_t, size_t, size_t, cudaMemcpyKind, cudaStream_t); } 
extern "C" { extern cudaError_t __stdcall cudaMemcpy2DToArrayAsync(cudaArray *, size_t, size_t, const void *, size_t, size_t, size_t, cudaMemcpyKind, cudaStream_t); } 
extern "C" { extern cudaError_t __stdcall cudaMemcpy2DFromArrayAsync(void *, size_t, const cudaArray *, size_t, size_t, size_t, size_t, cudaMemcpyKind, cudaStream_t); } 
extern "C" { extern cudaError_t __stdcall cudaMemcpyToSymbolAsync(const char *, const void *, size_t, size_t, cudaMemcpyKind, cudaStream_t); } 
extern "C" { extern cudaError_t __stdcall cudaMemcpyFromSymbolAsync(void *, const char *, size_t, size_t, cudaMemcpyKind, cudaStream_t); } 
#line 153
extern "C" { extern cudaError_t __stdcall cudaMemset(void *, int, size_t); } 
extern "C" { extern cudaError_t __stdcall cudaMemset2D(void *, size_t, int, size_t, size_t); } 
#line 162
extern "C" { extern cudaError_t __stdcall cudaGetSymbolAddress(void **, const char *); } 
extern "C" { extern cudaError_t __stdcall cudaGetSymbolSize(size_t *, const char *); } 
#line 171
extern "C" { extern cudaError_t __stdcall cudaGetDeviceCount(int *); } 
extern "C" { extern cudaError_t __stdcall cudaGetDeviceProperties(cudaDeviceProp *, int); } 
extern "C" { extern cudaError_t __stdcall cudaChooseDevice(int *, const cudaDeviceProp *); } 
extern "C" { extern cudaError_t __stdcall cudaSetDevice(int); } 
extern "C" { extern cudaError_t __stdcall cudaGetDevice(int *); } 
extern "C" { extern cudaError_t __stdcall cudaSetValidDevices(int *, int); } 
extern "C" { extern cudaError_t __stdcall cudaSetDeviceFlags(int); } 
#line 185
extern "C" { extern cudaError_t __stdcall cudaBindTexture(size_t *, const textureReference *, const void *, const cudaChannelFormatDesc *, size_t = (4294967295U)); } 
extern "C" { extern cudaError_t __stdcall cudaBindTexture2D(size_t *, const textureReference *, const void *, const cudaChannelFormatDesc *, size_t, size_t, size_t); } 
extern "C" { extern cudaError_t __stdcall cudaBindTextureToArray(const textureReference *, const cudaArray *, const cudaChannelFormatDesc *); } 
extern "C" { extern cudaError_t __stdcall cudaUnbindTexture(const textureReference *); } 
extern "C" { extern cudaError_t __stdcall cudaGetTextureAlignmentOffset(size_t *, const textureReference *); } 
extern "C" { extern cudaError_t __stdcall cudaGetTextureReference(const textureReference **, const char *); } 
#line 198
extern "C" { extern cudaError_t __stdcall cudaGetChannelDesc(cudaChannelFormatDesc *, const cudaArray *); } 
extern "C" { extern cudaChannelFormatDesc __stdcall cudaCreateChannelDesc(int, int, int, int, cudaChannelFormatKind); } 
#line 207
extern "C" { extern cudaError_t __stdcall cudaGetLastError(); } 
extern "C" { extern const char *__stdcall cudaGetErrorString(cudaError_t); } 
#line 216
extern "C" { extern cudaError_t __stdcall cudaConfigureCall(dim3, dim3, size_t = (0), cudaStream_t = (0)); } 
extern "C" { extern cudaError_t __stdcall cudaSetupArgument(const void *, size_t, size_t); } 
extern "C" { extern cudaError_t __stdcall cudaLaunch(const char *); } 
extern "C" { extern cudaError_t __stdcall cudaFuncGetAttributes(cudaFuncAttributes *, const char *); } 
#line 227
extern "C" { extern cudaError_t __stdcall cudaStreamCreate(cudaStream_t *); } 
extern "C" { extern cudaError_t __stdcall cudaStreamDestroy(cudaStream_t); } 
extern "C" { extern cudaError_t __stdcall cudaStreamSynchronize(cudaStream_t); } 
extern "C" { extern cudaError_t __stdcall cudaStreamQuery(cudaStream_t); } 
#line 238
extern "C" { extern cudaError_t __stdcall cudaEventCreate(cudaEvent_t *); } 
extern "C" { extern cudaError_t __stdcall cudaEventCreateWithFlags(cudaEvent_t *, int); } 
extern "C" { extern cudaError_t __stdcall cudaEventRecord(cudaEvent_t, cudaStream_t); } 
extern "C" { extern cudaError_t __stdcall cudaEventQuery(cudaEvent_t); } 
extern "C" { extern cudaError_t __stdcall cudaEventSynchronize(cudaEvent_t); } 
extern "C" { extern cudaError_t __stdcall cudaEventDestroy(cudaEvent_t); } 
extern "C" { extern cudaError_t __stdcall cudaEventElapsedTime(float *, cudaEvent_t, cudaEvent_t); } 
#line 252
extern "C" { extern cudaError_t __stdcall cudaSetDoubleForDevice(double *); } 
extern "C" { extern cudaError_t __stdcall cudaSetDoubleForHost(double *); } 
#line 261
extern "C" { extern cudaError_t __stdcall cudaThreadExit(); } 
extern "C" { extern cudaError_t __stdcall cudaThreadSynchronize(); } 
#line 270
extern "C" { extern cudaError_t __stdcall cudaDriverGetVersion(int *); } 
extern "C" { extern cudaError_t __stdcall cudaRuntimeGetVersion(int *); } 
#line 93 "c:\\cuda\\include\\channel_descriptor.h"
template<class T> __inline cudaChannelFormatDesc cudaCreateChannelDesc() 
{ 
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone); 
} 

template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char> () 
{ 
auto int e = (((int)sizeof(char)) * 8); 
#line 105 "c:\\cuda\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 107 "c:\\cuda\\include\\channel_descriptor.h"
} 

template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< signed char> () 
{ 
auto int e = (((int)sizeof(signed char)) * 8); 

return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
} 

template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned char> () 
{ 
auto int e = (((int)sizeof(unsigned char)) * 8); 

return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
} 

template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char1> () 
{ 
auto int e = (((int)sizeof(signed char)) * 8); 

return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
} 

template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar1> () 
{ 
auto int e = (((int)sizeof(unsigned char)) * 8); 

return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
} 

template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char2> () 
{ 
auto int e = (((int)sizeof(signed char)) * 8); 

return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
} 

template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar2> () 
{ 
auto int e = (((int)sizeof(unsigned char)) * 8); 

return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
} 

template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char4> () 
{ 
auto int e = (((int)sizeof(signed char)) * 8); 

return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
} 

template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar4> () 
{ 
auto int e = (((int)sizeof(unsigned char)) * 8); 

return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
} 

template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short> () 
{ 
auto int e = (((int)sizeof(short)) * 8); 

return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
} 

template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned short> () 
{ 
auto int e = (((int)sizeof(unsigned short)) * 8); 

return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
} 

template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short1> () 
{ 
auto int e = (((int)sizeof(short)) * 8); 

return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
} 

template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort1> () 
{ 
auto int e = (((int)sizeof(unsigned short)) * 8); 

return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
} 

template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short2> () 
{ 
auto int e = (((int)sizeof(short)) * 8); 

return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
} 

template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort2> () 
{ 
auto int e = (((int)sizeof(unsigned short)) * 8); 

return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
} 

template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short4> () 
{ 
auto int e = (((int)sizeof(short)) * 8); 

return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
} 

template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort4> () 
{ 
auto int e = (((int)sizeof(unsigned short)) * 8); 

return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
} 

template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int> () 
{ 
auto int e = (((int)sizeof(int)) * 8); 

return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
} 

template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned> () 
{ 
auto int e = (((int)sizeof(unsigned)) * 8); 

return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
} 

template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int1> () 
{ 
auto int e = (((int)sizeof(int)) * 8); 

return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
} 

template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uint1> () 
{ 
auto int e = (((int)sizeof(unsigned)) * 8); 

return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
} 

template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int2> () 
{ 
auto int e = (((int)sizeof(int)) * 8); 

return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
} 

template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uint2> () 
{ 
auto int e = (((int)sizeof(unsigned)) * 8); 

return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
} 

template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int4> () 
{ 
auto int e = (((int)sizeof(int)) * 8); 

return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
} 

template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uint4> () 
{ 
auto int e = (((int)sizeof(unsigned)) * 8); 

return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
} 



template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long> () 
{ 
auto int e = (((int)sizeof(long)) * 8); 

return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
} 

template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned long> () 
{ 
auto int e = (((int)sizeof(unsigned long)) * 8); 

return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
} 

template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long1> () 
{ 
auto int e = (((int)sizeof(long)) * 8); 

return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
} 

template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong1> () 
{ 
auto int e = (((int)sizeof(unsigned long)) * 8); 

return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
} 

template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long2> () 
{ 
auto int e = (((int)sizeof(long)) * 8); 

return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
} 

template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong2> () 
{ 
auto int e = (((int)sizeof(unsigned long)) * 8); 

return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
} 

template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long4> () 
{ 
auto int e = (((int)sizeof(long)) * 8); 

return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
} 

template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong4> () 
{ 
auto int e = (((int)sizeof(unsigned long)) * 8); 

return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
} 
#line 337 "c:\\cuda\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float> () 
{ 
auto int e = (((int)sizeof(float)) * 8); 

return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
} 

template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float1> () 
{ 
auto int e = (((int)sizeof(float)) * 8); 

return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
} 

template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float2> () 
{ 
auto int e = (((int)sizeof(float)) * 8); 

return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
} 

template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float4> () 
{ 
auto int e = (((int)sizeof(float)) * 8); 

return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
} 
#line 54 "c:\\cuda\\include\\driver_functions.h"
static __inline cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz) 
{ 
auto cudaPitchedPtr s; 

(s.ptr) = d; 
(s.pitch) = p; 
(s.xsize) = xsz; 
(s.ysize) = ysz; 

return s; 
} 

static __inline cudaPos make_cudaPos(size_t x, size_t y, size_t z) 
{ 
auto cudaPos p; 

(p.x) = x; 
(p.y) = y; 
(p.z) = z; 

return p; 
} 

static __inline cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) 
{ 
auto cudaExtent e; 

(e.width) = w; 
(e.height) = h; 
(e.depth) = d; 

return e; 
} 
#line 54 "c:\\cuda\\include\\vector_functions.h"
static __inline char1 make_char1(signed char x) 
{ 
auto char1 t; (t.x) = x; return t; 
} 

static __inline uchar1 make_uchar1(unsigned char x) 
{ 
auto uchar1 t; (t.x) = x; return t; 
} 

static __inline char2 make_char2(signed char x, signed char y) 
{ 
auto char2 t; (t.x) = x; (t.y) = y; return t; 
} 

static __inline uchar2 make_uchar2(unsigned char x, unsigned char y) 
{ 
auto uchar2 t; (t.x) = x; (t.y) = y; return t; 
} 

static __inline char3 make_char3(signed char x, signed char y, signed char z) 
{ 
auto char3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
} 

static __inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z) 
{ 
auto uchar3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
} 

static __inline char4 make_char4(signed char x, signed char y, signed char z, signed char w) 
{ 
auto char4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
} 

static __inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w) 
{ 
auto uchar4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
} 

static __inline short1 make_short1(short x) 
{ 
auto short1 t; (t.x) = x; return t; 
} 

static __inline ushort1 make_ushort1(unsigned short x) 
{ 
auto ushort1 t; (t.x) = x; return t; 
} 

static __inline short2 make_short2(short x, short y) 
{ 
auto short2 t; (t.x) = x; (t.y) = y; return t; 
} 

static __inline ushort2 make_ushort2(unsigned short x, unsigned short y) 
{ 
auto ushort2 t; (t.x) = x; (t.y) = y; return t; 
} 

static __inline short3 make_short3(short x, short y, short z) 
{ 
auto short3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
} 

static __inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z) 
{ 
auto ushort3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
} 

static __inline short4 make_short4(short x, short y, short z, short w) 
{ 
auto short4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
} 

static __inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w) 
{ 
auto ushort4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
} 

static __inline int1 make_int1(int x) 
{ 
auto int1 t; (t.x) = x; return t; 
} 

static __inline uint1 make_uint1(unsigned x) 
{ 
auto uint1 t; (t.x) = x; return t; 
} 

static __inline int2 make_int2(int x, int y) 
{ 
auto int2 t; (t.x) = x; (t.y) = y; return t; 
} 

static __inline uint2 make_uint2(unsigned x, unsigned y) 
{ 
auto uint2 t; (t.x) = x; (t.y) = y; return t; 
} 

static __inline int3 make_int3(int x, int y, int z) 
{ 
auto int3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
} 

static __inline uint3 make_uint3(unsigned x, unsigned y, unsigned z) 
{ 
auto uint3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
} 

static __inline int4 make_int4(int x, int y, int z, int w) 
{ 
auto int4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
} 

static __inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w) 
{ 
auto uint4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
} 

static __inline long1 make_long1(long x) 
{ 
auto long1 t; (t.x) = x; return t; 
} 

static __inline ulong1 make_ulong1(unsigned long x) 
{ 
auto ulong1 t; (t.x) = x; return t; 
} 

static __inline long2 make_long2(long x, long y) 
{ 
auto long2 t; (t.x) = x; (t.y) = y; return t; 
} 

static __inline ulong2 make_ulong2(unsigned long x, unsigned long y) 
{ 
auto ulong2 t; (t.x) = x; (t.y) = y; return t; 
} 



static __inline long3 make_long3(long x, long y, long z) 
{ 
auto long3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
} 

static __inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z) 
{ 
auto ulong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
} 

static __inline long4 make_long4(long x, long y, long z, long w) 
{ 
auto long4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
} 

static __inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w) 
{ 
auto ulong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
} 
#line 218 "c:\\cuda\\include\\vector_functions.h"
static __inline float1 make_float1(float x) 
{ 
auto float1 t; (t.x) = x; return t; 
} 

static __inline float2 make_float2(float x, float y) 
{ 
auto float2 t; (t.x) = x; (t.y) = y; return t; 
} 

static __inline float3 make_float3(float x, float y, float z) 
{ 
auto float3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
} 

static __inline float4 make_float4(float x, float y, float z, float w) 
{ 
auto float4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
} 

static __inline longlong1 make_longlong1(__int64 x) 
{ 
auto longlong1 t; (t.x) = x; return t; 
} 

static __inline ulonglong1 make_ulonglong1(unsigned __int64 x) 
{ 
auto ulonglong1 t; (t.x) = x; return t; 
} 

static __inline longlong2 make_longlong2(__int64 x, __int64 y) 
{ 
auto longlong2 t; (t.x) = x; (t.y) = y; return t; 
} 

static __inline ulonglong2 make_ulonglong2(unsigned __int64 x, unsigned __int64 y) 
{ 
auto ulonglong2 t; (t.x) = x; (t.y) = y; return t; 
} 

static __inline double1 make_double1(double x) 
{ 
auto double1 t; (t.x) = x; return t; 
} 

static __inline double2 make_double2(double x, double y) 
{ 
auto double2 t; (t.x) = x; (t.y) = y; return t; 
} 
#line 35 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\time.h"
#pragma pack ( push, 8 )
#line 93 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\time.h"
extern "C" { typedef long clock_t; }
#line 117 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\time.h"
extern "C" { struct tm { 
int tm_sec; 
int tm_min; 
int tm_hour; 
int tm_mday; 
int tm_mon; 
int tm_year; 
int tm_wday; 
int tm_yday; 
int tm_isdst; 
}; }
#line 142 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\time.h"
extern "C" { extern int *__cdecl __daylight(); } 



extern "C" { extern long *__cdecl __dstbias(); } 



extern "C" { extern long *__cdecl __timezone(); } 



extern "C" { extern char **__cdecl __tzname(); } 


extern "C" { extern errno_t __cdecl _get_daylight(int *); } 
extern "C" { extern errno_t __cdecl _get_dstbias(long *); } 
extern "C" { extern errno_t __cdecl _get_timezone(long *); } 
extern "C" { extern errno_t __cdecl _get_tzname(size_t *, char *, size_t, int); } 



extern "C" { extern char *__cdecl asctime(const tm *); } 

extern "C" { extern errno_t __cdecl asctime_s(char *, size_t, const tm *); } 
#line 168 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\time.h"
template < size_t _Size > inline errno_t __cdecl asctime_s ( char ( & _Buffer ) [ _Size ], const struct tm * _Time ) { return asctime_s ( _Buffer, _Size, _Time ); }

extern "C" { extern char *__cdecl _ctime32(const __time32_t *); } 
extern "C" { extern errno_t __cdecl _ctime32_s(char *, size_t, const __time32_t *); } 
template < size_t _Size > inline errno_t __cdecl _ctime32_s ( char ( & _Buffer ) [ _Size ], const __time32_t * _Time ) { return _ctime32_s ( _Buffer, _Size, _Time ); }

extern "C" { extern clock_t __cdecl clock(); } 
extern "C" { extern double __cdecl _difftime32(__time32_t, __time32_t); } 

extern "C" { extern tm *__cdecl _gmtime32(const __time32_t *); } 
extern "C" { extern errno_t __cdecl _gmtime32_s(tm *, const __time32_t *); } 

extern "C" { extern tm *__cdecl _localtime32(const __time32_t *); } 
extern "C" { extern errno_t __cdecl _localtime32_s(tm *, const __time32_t *); } 

extern "C" { extern size_t __cdecl strftime(char *, size_t, const char *, const tm *); } 
extern "C" { extern size_t __cdecl _strftime_l(char *, size_t, const char *, const tm *, _locale_t); } 

extern "C" { extern errno_t __cdecl _strdate_s(char *, size_t); } 
template < size_t _Size > inline errno_t __cdecl _strdate_s ( char ( & _Buffer ) [ _Size ] ) { return _strdate_s ( _Buffer, _Size ); }
extern "C" { extern char *__cdecl _strdate(char *); } 

extern "C" { extern errno_t __cdecl _strtime_s(char *, size_t); } 
template < size_t _Size > inline errno_t __cdecl _strtime_s ( char ( & _Buffer ) [ _Size ] ) { return _strtime_s ( _Buffer, _Size ); }
extern "C" { extern char *__cdecl _strtime(char *); } 

extern "C" { extern __time32_t __cdecl _time32(__time32_t *); } 
extern "C" { extern __time32_t __cdecl _mktime32(tm *); } 
extern "C" { extern __time32_t __cdecl _mkgmtime32(tm *); } 




extern "C" { extern void __cdecl _tzset(); } 
#line 204 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\time.h"
extern "C" { extern double __cdecl _difftime64(__time64_t, __time64_t); } 
extern "C" { extern char *__cdecl _ctime64(const __time64_t *); } 
extern "C" { extern errno_t __cdecl _ctime64_s(char *, size_t, const __time64_t *); } 
template < size_t _Size > inline errno_t __cdecl _ctime64_s ( char ( & _Buffer ) [ _Size ], const __time64_t * _Time ) { return _ctime64_s ( _Buffer, _Size, _Time ); }

extern "C" { extern tm *__cdecl _gmtime64(const __time64_t *); } 
extern "C" { extern errno_t __cdecl _gmtime64_s(tm *, const __time64_t *); } 

extern "C" { extern tm *__cdecl _localtime64(const __time64_t *); } 
extern "C" { extern errno_t __cdecl _localtime64_s(tm *, const __time64_t *); } 

extern "C" { extern __time64_t __cdecl _mktime64(tm *); } 
extern "C" { extern __time64_t __cdecl _mkgmtime64(tm *); } 
extern "C" { extern __time64_t __cdecl _time64(__time64_t *); } 


extern "C" { extern __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using GetLocalTime instead. See online help for details.")) unsigned __cdecl _getsystime(tm *); } 
extern "C" { extern __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using SetLocalTime instead. See online help for details.")) unsigned __cdecl _setsystime(tm *, unsigned); } 
#line 233
extern "C" { extern __wchar_t *__cdecl _wasctime(const tm *); } 
extern "C" { extern errno_t __cdecl _wasctime_s(__wchar_t *, size_t, const tm *); } 
template < size_t _Size > inline errno_t __cdecl _wasctime_s ( wchar_t ( & _Buffer ) [ _Size ], const struct tm * _Time ) { return _wasctime_s ( _Buffer, _Size, _Time ); }

extern "C" { extern __wchar_t *__cdecl _wctime32(const __time32_t *); } 
extern "C" { extern errno_t __cdecl _wctime32_s(__wchar_t *, size_t, const __time32_t *); } 
template < size_t _Size > inline errno_t __cdecl _wctime32_s ( wchar_t ( & _Buffer ) [ _Size ], const __time32_t * _Time ) { return _wctime32_s ( _Buffer, _Size, _Time ); }

extern "C" { extern size_t __cdecl wcsftime(__wchar_t *, size_t, const __wchar_t *, const tm *); } 
extern "C" { extern size_t __cdecl _wcsftime_l(__wchar_t *, size_t, const __wchar_t *, const tm *, _locale_t); } 

extern "C" { extern errno_t __cdecl _wstrdate_s(__wchar_t *, size_t); } 
template < size_t _Size > inline errno_t __cdecl _wstrdate_s ( wchar_t ( & _Buffer ) [ _Size ] ) { return _wstrdate_s ( _Buffer, _Size ); }
extern "C" { extern __wchar_t *__cdecl _wstrdate(__wchar_t *); } 

extern "C" { extern errno_t __cdecl _wstrtime_s(__wchar_t *, size_t); } 
template < size_t _Size > inline errno_t __cdecl _wstrtime_s ( wchar_t ( & _Buffer ) [ _Size ] ) { return _wstrtime_s ( _Buffer, _Size ); }
extern "C" { extern __wchar_t *__cdecl _wstrtime(__wchar_t *); } 

extern "C" { extern __wchar_t *__cdecl _wctime64(const __time64_t *); } 
extern "C" { extern errno_t __cdecl _wctime64_s(__wchar_t *, size_t, const __time64_t *); } 
template < size_t _Size > inline errno_t __cdecl _wctime64_s ( wchar_t ( & _Buffer ) [ _Size ], const __time64_t * _Time ) { return _wctime64_s ( _Buffer, _Size, _Time ); }
#line 29 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\wtime.inl"
#pragma warning(push)
#pragma warning(disable:4996)
#line 46
extern "C" { static __inline __wchar_t *__cdecl _wctime(const time_t *_Time) 
{ 
#pragma warning( push )
#pragma warning( disable : 4996 )
return _wctime64(_Time); 
#pragma warning( pop )
} } 

extern "C" { static __inline errno_t __cdecl _wctime_s(__wchar_t *_Buffer, size_t _SizeInWords, const time_t *_Time) 
{ 
return _wctime64_s(_Buffer, _SizeInWords, _Time); 
} } 
#line 60 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\wtime.inl"
#pragma warning(pop)
#line 84 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\time.inl"
extern "C" { static __inline double __cdecl difftime(time_t _Time1, time_t _Time2) 
{ 
return _difftime64(_Time1, _Time2); 
} } 
extern "C" { static __inline char *__cdecl ctime(const time_t *_Time) 
{ 
#pragma warning( push )
#pragma warning( disable : 4996 )
return _ctime64(_Time); 
#pragma warning( pop )
} } 

extern "C" { static __inline errno_t __cdecl ctime_s(char *_Buffer, size_t _SizeInBytes, const time_t *_Time) 
{ 
return _ctime64_s(_Buffer, _SizeInBytes, _Time); 
} } 
#line 101 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\time.inl"
extern "C" { static __inline tm *__cdecl gmtime(const time_t *_Time) 
{ 
#pragma warning( push )
#pragma warning( disable : 4996 )
return _gmtime64(_Time); 
#pragma warning( pop )
} } 

extern "C" { static __inline errno_t __cdecl gmtime_s(tm *_Tm, const time_t *_Time) 
{ 
return _gmtime64_s(_Tm, _Time); 
} } 
#line 114 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\time.inl"
extern "C" { static __inline tm *__cdecl localtime(const time_t *_Time) 
{ 
#pragma warning( push )
#pragma warning( disable : 4996 )
return _localtime64(_Time); 
#pragma warning( pop )
} } 
extern "C" { static __inline errno_t __cdecl localtime_s(tm *_Tm, const time_t *_Time) 
{ 
return _localtime64_s(_Tm, _Time); 
} } 
extern "C" { static __inline time_t __cdecl mktime(tm *_Tm) 
{ 
return _mktime64(_Tm); 
} } 
extern "C" { static __inline time_t __cdecl _mkgmtime(tm *_Tm) 
{ 
return _mkgmtime64(_Tm); 
} } 
extern "C" { static __inline time_t __cdecl time(time_t *_Time) 
{ 
return _time64(_Time); 
} } 
#line 279 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\time.h"
extern "C" int daylight; 
extern "C" long timezone; 
extern "C" char *tzname[2]; 
#line 284 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\time.h"
extern "C" { extern void __cdecl tzset(); } 
#line 294 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\time.h"
#pragma pack ( pop )
#line 48 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\string.h"
extern "C" { extern void *__cdecl _memccpy(void *, const void *, int, size_t); } 
extern "C" { extern const void *__cdecl memchr(const void *, int, size_t); } 
extern "C" { extern int __cdecl _memicmp(const void *, const void *, size_t); } 
extern "C" { extern int __cdecl _memicmp_l(const void *, const void *, size_t, _locale_t); } 
extern "C" { extern int __cdecl memcmp(const void *, const void *, size_t); } 
extern "C" { extern void *__cdecl memcpy(void *, const void *, size_t); } 

extern "C" { extern errno_t __cdecl memcpy_s(void *, rsize_t, const void *, rsize_t); } 
#line 57 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\string.h"
extern "C" { extern void *__cdecl memset(void *, int, size_t); } 



extern "C" { extern void *__cdecl memccpy(void *, const void *, int, size_t); } 
extern "C" { extern int __cdecl memicmp(const void *, const void *, size_t); } 
#line 67 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\string.h"
extern "C" { extern errno_t __cdecl _strset_s(char *, size_t, int); } 
template < size_t _Size > inline errno_t __cdecl _strset_s ( char ( & _Dest ) [ _Size ], int _Value ) { return _strset_s ( _Dest, _Size, _Value ); }
extern "C" { extern char *__cdecl _strset(char *, int); } 

extern "C" errno_t __cdecl strcpy_s(char *, rsize_t, const char *); 
#line 73 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\string.h"
template < size_t _Size > inline errno_t __cdecl strcpy_s ( char ( & _Dest ) [ _Size ], const char * _Source ) { return strcpy_s ( _Dest, _Size, _Source ); }
extern "C" { extern char *__cdecl strcpy(char *, const char *); } 

extern "C" { extern errno_t __cdecl strcat_s(char *, rsize_t, const char *); } 
#line 78 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\string.h"
template < size_t _Size > inline errno_t __cdecl strcat_s ( char ( & _Dest ) [ _Size ], const char * _Source ) { return strcat_s ( _Dest, _Size, _Source ); }
extern "C" { extern char *__cdecl strcat(char *, const char *); } 
extern "C" { extern int __cdecl strcmp(const char *, const char *); } 
extern "C" size_t __cdecl strlen(const char *); 
extern "C" { extern size_t __cdecl strnlen(const char *, size_t); } 

extern "C" { static __inline size_t __cdecl strnlen_s(const char *_Str, size_t _MaxCount) 
{ 
return (_Str == (0)) ? (0) : strnlen(_Str, _MaxCount); 
} } 
#line 90 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\string.h"
extern "C" { extern errno_t __cdecl memmove_s(void *, rsize_t, const void *, rsize_t); } 
#line 96 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\string.h"
extern "C" { extern void *__cdecl memmove(void *, const void *, size_t); } 
#line 104 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\string.h"
extern "C" { extern char *__cdecl _strdup(const char *); } 
#line 110 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\string.h"
extern "C" { extern const char *__cdecl strchr(const char *, int); } 
extern "C" { extern int __cdecl _stricmp(const char *, const char *); } 
extern "C" { extern int __cdecl _strcmpi(const char *, const char *); } 
extern "C" { extern int __cdecl _stricmp_l(const char *, const char *, _locale_t); } 
extern "C" { extern int __cdecl strcoll(const char *, const char *); } 
extern "C" { extern int __cdecl _strcoll_l(const char *, const char *, _locale_t); } 
extern "C" { extern int __cdecl _stricoll(const char *, const char *); } 
extern "C" { extern int __cdecl _stricoll_l(const char *, const char *, _locale_t); } 
extern "C" { extern int __cdecl _strncoll(const char *, const char *, size_t); } 
extern "C" { extern int __cdecl _strncoll_l(const char *, const char *, size_t, _locale_t); } 
extern "C" { extern int __cdecl _strnicoll(const char *, const char *, size_t); } 
extern "C" { extern int __cdecl _strnicoll_l(const char *, const char *, size_t, _locale_t); } 
extern "C" { extern size_t __cdecl strcspn(const char *, const char *); } 
extern "C" { extern char *__cdecl _strerror(const char *); } 
extern "C" { extern errno_t __cdecl _strerror_s(char *, size_t, const char *); } 
template < size_t _Size > inline errno_t __cdecl _strerror_s ( char ( & _Buffer ) [ _Size ], const char * _ErrorMessage ) { return _strerror_s ( _Buffer, _Size, _ErrorMessage ); }
extern "C" { extern char *__cdecl strerror(int); } 

extern "C" { extern errno_t __cdecl strerror_s(char *, size_t, int); } 
#line 130 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\string.h"
template < size_t _Size > inline errno_t __cdecl strerror_s ( char ( & _Buffer ) [ _Size ], int _ErrorMessage ) { return strerror_s ( _Buffer, _Size, _ErrorMessage ); }
extern "C" { extern errno_t __cdecl _strlwr_s(char *, size_t); } 
template < size_t _Size > inline errno_t __cdecl _strlwr_s ( char ( & _String ) [ _Size ] ) { return _strlwr_s ( _String, _Size ); }
extern "C" { extern char *__cdecl _strlwr(char *); } 
extern "C" { extern errno_t __cdecl _strlwr_s_l(char *, size_t, _locale_t); } 
template < size_t _Size > inline errno_t __cdecl _strlwr_s_l ( char ( & _String ) [ _Size ], _locale_t _Locale ) { return _strlwr_s_l ( _String, _Size, _Locale ); }
extern "C" { extern char *__cdecl _strlwr_l(char *, _locale_t); } 

extern "C" { extern errno_t __cdecl strncat_s(char *, rsize_t, const char *, rsize_t); } 
#line 140 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\string.h"
template < size_t _Size > inline errno_t __cdecl strncat_s ( char ( & _Dest ) [ _Size ], const char * _Source, size_t _Count ) { return strncat_s ( _Dest, _Size, _Source, _Count ); }
#pragma warning(push)
#pragma warning(disable:6059)

extern "C" { extern char *__cdecl strncat(char *, const char *, size_t); } 
#pragma warning(pop)
#line 149 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\string.h"
extern "C" { extern int __cdecl strncmp(const char *, const char *, size_t); } 
#line 151 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\string.h"
extern "C" { extern int __cdecl _strnicmp(const char *, const char *, size_t); } 
extern "C" { extern int __cdecl _strnicmp_l(const char *, const char *, size_t, _locale_t); } 

extern "C" { extern errno_t __cdecl strncpy_s(char *, rsize_t, const char *, rsize_t); } 
#line 156 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\string.h"
template < size_t _Size > inline errno_t __cdecl strncpy_s ( char ( & _Dest ) [ _Size ], const char * _Source, size_t _Count ) { return strncpy_s ( _Dest, _Size, _Source, _Count ); }
extern "C" { extern char *__cdecl strncpy(char *, const char *, size_t); } 
extern "C" { extern errno_t __cdecl _strnset_s(char *, size_t, int, size_t); } 
template < size_t _Size > inline errno_t __cdecl _strnset_s ( char ( & _Dest ) [ _Size ], int _Val, size_t _Count ) { return _strnset_s ( _Dest, _Size, _Val, _Count ); }
extern "C" { extern char *__cdecl _strnset(char *, int, size_t); } 
extern "C" { extern const char *__cdecl strpbrk(const char *, const char *); } 
extern "C" { extern const char *__cdecl strrchr(const char *, int); } 
extern "C" { extern char *__cdecl _strrev(char *); } 
extern "C" { extern size_t __cdecl strspn(const char *, const char *); } 
extern "C" { extern const char *__cdecl strstr(const char *, const char *); } 
extern "C" { extern char *__cdecl strtok(char *, const char *); } 

extern "C" { extern char *__cdecl strtok_s(char *, const char *, char **); } 
#line 170 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\string.h"
extern "C" { extern errno_t __cdecl _strupr_s(char *, size_t); } 
template < size_t _Size > inline errno_t __cdecl _strupr_s ( char ( & _String ) [ _Size ] ) { return _strupr_s ( _String, _Size ); }
extern "C" { extern char *__cdecl _strupr(char *); } 
extern "C" { extern errno_t __cdecl _strupr_s_l(char *, size_t, _locale_t); } 
template < size_t _Size > inline errno_t __cdecl _strupr_s_l ( char ( & _String ) [ _Size ], _locale_t _Locale ) { return _strupr_s_l ( _String, _Size, _Locale ); }
extern "C" { extern char *__cdecl _strupr_l(char *, _locale_t); } 
extern "C" { extern size_t __cdecl strxfrm(char *, const char *, size_t); } 
extern "C" { extern size_t __cdecl _strxfrm_l(char *, const char *, size_t, _locale_t); } 
#line 183
inline char *__cdecl strchr(char *_Str, int _Ch) 
{ return (char *)strchr((const char *)_Str, _Ch); } 
inline char *__cdecl strpbrk(char *_Str, const char *_Control) 
{ return (char *)strpbrk((const char *)_Str, _Control); } 
inline char *__cdecl strrchr(char *_Str, int _Ch) 
{ return (char *)strrchr((const char *)_Str, _Ch); } 
inline char *__cdecl strstr(char *_Str, const char *_SubStr) 
{ return (char *)strstr((const char *)_Str, _SubStr); } 
#line 194 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\string.h"
inline void *__cdecl memchr(void *_Pv, int _C, size_t _N) 
{ return (void *)memchr((const void *)_Pv, _C, _N); } 
#line 207 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\string.h"
extern "C" { extern char *__cdecl strdup(const char *); } 
#line 214 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\string.h"
extern "C" { extern int __cdecl strcmpi(const char *, const char *); } 
extern "C" { extern int __cdecl stricmp(const char *, const char *); } 
extern "C" { extern char *__cdecl strlwr(char *); } 
extern "C" { extern int __cdecl strnicmp(const char *, const char *, size_t); } 
extern "C" { extern char *__cdecl strnset(char *, int, size_t); } 
extern "C" { extern char *__cdecl strrev(char *); } 
extern "C" { extern char *__cdecl strset(char *, int); } 
extern "C" { extern char *__cdecl strupr(char *); } 
#line 235 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\string.h"
extern "C" { extern __wchar_t *__cdecl _wcsdup(const __wchar_t *); } 
#line 242 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\string.h"
extern "C" { extern errno_t __cdecl wcscat_s(__wchar_t *, rsize_t, const __wchar_t *); } 
#line 244 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\string.h"
template < size_t _Size > inline errno_t __cdecl wcscat_s ( wchar_t ( & _Dest ) [ _Size ], const wchar_t * _Source ) { return wcscat_s ( _Dest, _Size, _Source ); }
extern "C" { extern __wchar_t *__cdecl wcscat(__wchar_t *, const __wchar_t *); } 
extern "C" { extern const __wchar_t *__cdecl wcschr(const __wchar_t *, __wchar_t); } 
extern "C" { extern int __cdecl wcscmp(const __wchar_t *, const __wchar_t *); } 

extern "C" { extern errno_t __cdecl wcscpy_s(__wchar_t *, rsize_t, const __wchar_t *); } 
#line 251 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\string.h"
template < size_t _Size > inline errno_t __cdecl wcscpy_s ( wchar_t ( & _Dest ) [ _Size ], const wchar_t * _Source ) { return wcscpy_s ( _Dest, _Size, _Source ); }
extern "C" { extern __wchar_t *__cdecl wcscpy(__wchar_t *, const __wchar_t *); } 
extern "C" { extern size_t __cdecl wcscspn(const __wchar_t *, const __wchar_t *); } 
extern "C" { extern size_t __cdecl wcslen(const __wchar_t *); } 
extern "C" { extern size_t __cdecl wcsnlen(const __wchar_t *, size_t); } 

extern "C" { static __inline size_t __cdecl wcsnlen_s(const __wchar_t *_Src, size_t _MaxCount) 
{ 
return (_Src == (0)) ? (0) : wcsnlen(_Src, _MaxCount); 
} } 
#line 263 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\string.h"
extern "C" { extern errno_t __cdecl wcsncat_s(__wchar_t *, rsize_t, const __wchar_t *, rsize_t); } 
#line 265 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\string.h"
template < size_t _Size > inline errno_t __cdecl wcsncat_s ( wchar_t ( & _Dest ) [ _Size ], const wchar_t * _Source, size_t _Count ) { return wcsncat_s ( _Dest, _Size, _Source, _Count ); }
#pragma warning(push)
#pragma warning(disable:6059)
extern "C" { extern __wchar_t *__cdecl wcsncat(__wchar_t *, const __wchar_t *, size_t); } 
#pragma warning(pop)
extern "C" { extern int __cdecl wcsncmp(const __wchar_t *, const __wchar_t *, size_t); } 

extern "C" { extern errno_t __cdecl wcsncpy_s(__wchar_t *, rsize_t, const __wchar_t *, rsize_t); } 
#line 274 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\string.h"
template < size_t _Size > inline errno_t __cdecl wcsncpy_s ( wchar_t ( & _Dest ) [ _Size ], const wchar_t * _Source, size_t _Count ) { return wcsncpy_s ( _Dest, _Size, _Source, _Count ); }
extern "C" { extern __wchar_t *__cdecl wcsncpy(__wchar_t *, const __wchar_t *, size_t); } 
extern "C" { extern const __wchar_t *__cdecl wcspbrk(const __wchar_t *, const __wchar_t *); } 
extern "C" { extern const __wchar_t *__cdecl wcsrchr(const __wchar_t *, __wchar_t); } 
extern "C" { extern size_t __cdecl wcsspn(const __wchar_t *, const __wchar_t *); } 
extern "C" { extern const __wchar_t *__cdecl wcsstr(const __wchar_t *, const __wchar_t *); } 
extern "C" { extern __wchar_t *__cdecl wcstok(__wchar_t *, const __wchar_t *); } 

extern "C" { extern __wchar_t *__cdecl wcstok_s(__wchar_t *, const __wchar_t *, __wchar_t **); } 
#line 284 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\string.h"
extern "C" { extern __wchar_t *__cdecl _wcserror(int); } 
extern "C" { extern errno_t __cdecl _wcserror_s(__wchar_t *, size_t, int); } 
template < size_t _Size > inline errno_t __cdecl _wcserror_s ( wchar_t ( & _Buffer ) [ _Size ], int _Error ) { return _wcserror_s ( _Buffer, _Size, _Error ); }
extern "C" { extern __wchar_t *__cdecl __wcserror(const __wchar_t *); } 
extern "C" { extern errno_t __cdecl __wcserror_s(__wchar_t *, size_t, const __wchar_t *); } 
template < size_t _Size > inline errno_t __cdecl __wcserror_s ( wchar_t ( & _Buffer ) [ _Size ], const wchar_t * _ErrorMessage ) { return __wcserror_s ( _Buffer, _Size, _ErrorMessage ); }

extern "C" { extern int __cdecl _wcsicmp(const __wchar_t *, const __wchar_t *); } 
extern "C" { extern int __cdecl _wcsicmp_l(const __wchar_t *, const __wchar_t *, _locale_t); } 
extern "C" { extern int __cdecl _wcsnicmp(const __wchar_t *, const __wchar_t *, size_t); } 
extern "C" { extern int __cdecl _wcsnicmp_l(const __wchar_t *, const __wchar_t *, size_t, _locale_t); } 
extern "C" { extern errno_t __cdecl _wcsnset_s(__wchar_t *, size_t, __wchar_t, size_t); } 
template < size_t _Size > inline errno_t __cdecl _wcsnset_s ( wchar_t ( & _Dst ) [ _Size ], wchar_t _Val, size_t _MaxCount ) { return _wcsnset_s ( _Dst, _Size, _Val, _MaxCount ); }
extern "C" { extern __wchar_t *__cdecl _wcsnset(__wchar_t *, __wchar_t, size_t); } 
extern "C" { extern __wchar_t *__cdecl _wcsrev(__wchar_t *); } 
extern "C" { extern errno_t __cdecl _wcsset_s(__wchar_t *, size_t, __wchar_t); } 
template < size_t _Size > inline errno_t __cdecl _wcsset_s ( wchar_t ( & _Str ) [ _Size ], wchar_t _Val ) { return _wcsset_s ( _Str, _Size, _Val ); }
extern "C" { extern __wchar_t *__cdecl _wcsset(__wchar_t *, __wchar_t); } 

extern "C" { extern errno_t __cdecl _wcslwr_s(__wchar_t *, size_t); } 
template < size_t _Size > inline errno_t __cdecl _wcslwr_s ( wchar_t ( & _String ) [ _Size ] ) { return _wcslwr_s ( _String, _Size ); }
extern "C" { extern __wchar_t *__cdecl _wcslwr(__wchar_t *); } 
extern "C" { extern errno_t __cdecl _wcslwr_s_l(__wchar_t *, size_t, _locale_t); } 
template < size_t _Size > inline errno_t __cdecl _wcslwr_s_l ( wchar_t ( & _String ) [ _Size ], _locale_t _Locale ) { return _wcslwr_s_l ( _String, _Size, _Locale ); }
extern "C" { extern __wchar_t *__cdecl _wcslwr_l(__wchar_t *, _locale_t); } 
extern "C" { extern errno_t __cdecl _wcsupr_s(__wchar_t *, size_t); } 
template < size_t _Size > inline errno_t __cdecl _wcsupr_s ( wchar_t ( & _String ) [ _Size ] ) { return _wcsupr_s ( _String, _Size ); }
extern "C" { extern __wchar_t *__cdecl _wcsupr(__wchar_t *); } 
extern "C" { extern errno_t __cdecl _wcsupr_s_l(__wchar_t *, size_t, _locale_t); } 
template < size_t _Size > inline errno_t __cdecl _wcsupr_s_l ( wchar_t ( & _String ) [ _Size ], _locale_t _Locale ) { return _wcsupr_s_l ( _String, _Size, _Locale ); }
extern "C" { extern __wchar_t *__cdecl _wcsupr_l(__wchar_t *, _locale_t); } 
extern "C" { extern size_t __cdecl wcsxfrm(__wchar_t *, const __wchar_t *, size_t); } 
extern "C" { extern size_t __cdecl _wcsxfrm_l(__wchar_t *, const __wchar_t *, size_t, _locale_t); } 
extern "C" { extern int __cdecl wcscoll(const __wchar_t *, const __wchar_t *); } 
extern "C" { extern int __cdecl _wcscoll_l(const __wchar_t *, const __wchar_t *, _locale_t); } 
extern "C" { extern int __cdecl _wcsicoll(const __wchar_t *, const __wchar_t *); } 
extern "C" { extern int __cdecl _wcsicoll_l(const __wchar_t *, const __wchar_t *, _locale_t); } 
extern "C" { extern int __cdecl _wcsncoll(const __wchar_t *, const __wchar_t *, size_t); } 
extern "C" { extern int __cdecl _wcsncoll_l(const __wchar_t *, const __wchar_t *, size_t, _locale_t); } 
extern "C" { extern int __cdecl _wcsnicoll(const __wchar_t *, const __wchar_t *, size_t); } 
extern "C" { extern int __cdecl _wcsnicoll_l(const __wchar_t *, const __wchar_t *, size_t, _locale_t); } 
#line 330
inline __wchar_t *__cdecl wcschr(__wchar_t *_Str, __wchar_t _Ch) 
{ return (__wchar_t *)wcschr((const __wchar_t *)_Str, _Ch); } 
inline __wchar_t *__cdecl wcspbrk(__wchar_t *_Str, const __wchar_t *_Control) 
{ return (__wchar_t *)wcspbrk((const __wchar_t *)_Str, _Control); } 
inline __wchar_t *__cdecl wcsrchr(__wchar_t *_Str, __wchar_t _Ch) 
{ return (__wchar_t *)wcsrchr((const __wchar_t *)_Str, _Ch); } 
inline __wchar_t *__cdecl wcsstr(__wchar_t *_Str, const __wchar_t *_SubStr) 
{ return (__wchar_t *)wcsstr((const __wchar_t *)_Str, _SubStr); } 
#line 349 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\string.h"
extern "C" { extern __wchar_t *__cdecl wcsdup(const __wchar_t *); } 
#line 359 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\string.h"
extern "C" { extern int __cdecl wcsicmp(const __wchar_t *, const __wchar_t *); } 
extern "C" { extern int __cdecl wcsnicmp(const __wchar_t *, const __wchar_t *, size_t); } 
extern "C" { extern __wchar_t *__cdecl wcsnset(__wchar_t *, __wchar_t, size_t); } 
extern "C" { extern __wchar_t *__cdecl wcsrev(__wchar_t *); } 
extern "C" { extern __wchar_t *__cdecl wcsset(__wchar_t *, __wchar_t); } 
extern "C" { extern __wchar_t *__cdecl wcslwr(__wchar_t *); } 
extern "C" { extern __wchar_t *__cdecl wcsupr(__wchar_t *); } 
extern "C" { extern int __cdecl wcsicoll(const __wchar_t *, const __wchar_t *); } 
#line 56 "c:\\cuda\\include\\common_functions.h"
extern "C" { extern clock_t clock(); } 


extern "C" { extern void *memset(void *, int, size_t); } 


extern "C" { extern void *memcpy(void *, const void *, size_t); } 
#line 65 "c:\\cuda\\include\\math_functions.h"
extern "C" { extern int abs(int); } 

extern "C" { extern long labs(long); } 

extern "C" { extern __int64 llabs(__int64); } 

extern "C" { extern double fabs(double); } 

extern "C" { inline float fabsf(float); } 


extern "C" { extern int min(int, int); } 

extern "C" { extern unsigned umin(unsigned, unsigned); } 

extern "C" { extern __int64 llmin(__int64, __int64); } 

extern "C" { extern unsigned __int64 ullmin(unsigned __int64, unsigned __int64); } 

extern "C" { extern float fminf(float, float); } 

extern "C" { extern double fmin(double, double); } 


extern "C" { extern int max(int, int); } 

extern "C" { extern unsigned umax(unsigned, unsigned); } 

extern "C" { extern __int64 llmax(__int64, __int64); } 

extern "C" { extern unsigned __int64 ullmax(unsigned __int64, unsigned __int64); } 

extern "C" { extern float fmaxf(float, float); } 

extern "C" { extern double fmax(double, double); } 


extern "C" { extern double sin(double); } 

extern "C" { inline float sinf(float); } 


extern "C" { extern double cos(double); } 

extern "C" { inline float cosf(float); } 


extern "C" { extern void sincos(double, double *, double *); } 

extern "C" { extern void sincosf(float, float *, float *); } 


extern "C" { extern double tan(double); } 

extern "C" { inline float tanf(float); } 


extern "C" { extern double sqrt(double); } 

extern "C" { inline float sqrtf(float); } 


extern "C" { extern double rsqrt(double); } 

extern "C" { extern float rsqrtf(float); } 


extern "C" { extern double exp2(double); } 

extern "C" { extern float exp2f(float); } 


extern "C" { extern double exp10(double); } 

extern "C" { extern float exp10f(float); } 


extern "C" { extern double expm1(double); } 

extern "C" { extern float expm1f(float); } 


extern "C" { extern double log2(double); } 

extern "C" { extern float log2f(float); } 


extern "C" { extern double log10(double); } 

extern "C" { inline float log10f(float); } 


extern "C" { extern double log(double); } 

extern "C" { inline float logf(float); } 


extern "C" { extern double log1p(double); } 

extern "C" { extern float log1pf(float); } 


extern "C" { extern double floor(double); } 

extern "C" { inline float floorf(float); } 


extern "C" { extern double exp(double); } 

extern "C" { inline float expf(float); } 


extern "C" { extern double cosh(double); } 

extern "C" { inline float coshf(float); } 


extern "C" { extern double sinh(double); } 

extern "C" { inline float sinhf(float); } 


extern "C" { extern double tanh(double); } 

extern "C" { inline float tanhf(float); } 


extern "C" { extern double acosh(double); } 

extern "C" { extern float acoshf(float); } 


extern "C" { extern double asinh(double); } 

extern "C" { extern float asinhf(float); } 


extern "C" { extern double atanh(double); } 

extern "C" { extern float atanhf(float); } 


extern "C" { extern double ldexp(double, int); } 

extern "C" { inline float ldexpf(float, int); } 


extern "C" { extern double logb(double); } 

extern "C" { extern float logbf(float); } 


extern "C" { extern int ilogb(double); } 

extern "C" { extern int ilogbf(float); } 


extern "C" { extern double scalbn(double, int); } 

extern "C" { extern float scalbnf(float, int); } 


extern "C" { extern double scalbln(double, long); } 

extern "C" { extern float scalblnf(float, long); } 


extern "C" { extern double frexp(double, int *); } 

extern "C" { inline float frexpf(float, int *); } 


extern "C" { extern double round(double); } 

extern "C" { extern float roundf(float); } 


extern "C" { extern long lround(double); } 

extern "C" { extern long lroundf(float); } 


extern "C" { extern __int64 llround(double); } 

extern "C" { extern __int64 llroundf(float); } 


extern "C" { extern double rint(double); } 

extern "C" { extern float rintf(float); } 


extern "C" { extern long lrint(double); } 

extern "C" { extern long lrintf(float); } 


extern "C" { extern __int64 llrint(double); } 

extern "C" { extern __int64 llrintf(float); } 


extern "C" { extern double nearbyint(double); } 

extern "C" { extern float nearbyintf(float); } 


extern "C" { extern double ceil(double); } 

extern "C" { inline float ceilf(float); } 


extern "C" { extern double trunc(double); } 

extern "C" { extern float truncf(float); } 


extern "C" { extern double fdim(double, double); } 

extern "C" { extern float fdimf(float, float); } 


extern "C" { extern double atan2(double, double); } 

extern "C" { inline float atan2f(float, float); } 


extern "C" { extern double atan(double); } 

extern "C" { inline float atanf(float); } 


extern "C" { extern double asin(double); } 

extern "C" { inline float asinf(float); } 


extern "C" { extern double acos(double); } 

extern "C" { inline float acosf(float); } 


extern "C" { extern double hypot(double, double); } 

extern "C" { extern float hypotf(float, float); } 


extern "C" { extern double cbrt(double); } 

extern "C" { extern float cbrtf(float); } 


extern "C" { extern double pow(double, double); } 

extern "C" { inline float powf(float, float); } 


extern "C" { extern double modf(double, double *); } 

extern "C" { inline float modff(float, float *); } 


extern "C" { extern double fmod(double, double); } 

extern "C" { inline float fmodf(float, float); } 


extern "C" { extern double remainder(double, double); } 

extern "C" { extern float remainderf(float, float); } 


extern "C" { extern double remquo(double, double, int *); } 

extern "C" { extern float remquof(float, float, int *); } 


extern "C" { extern double erf(double); } 

extern "C" { extern float erff(float); } 


extern "C" { extern double erfinv(double); } 

extern "C" { extern float erfinvf(float); } 


extern "C" { extern double erfc(double); } 

extern "C" { extern float erfcf(float); } 


extern "C" { extern double erfcinv(double); } 

extern "C" { extern float erfcinvf(float); } 


extern "C" { extern double lgamma(double); } 

extern "C" { extern float lgammaf(float); } 


extern "C" { extern double tgamma(double); } 

extern "C" { extern float tgammaf(float); } 


extern "C" { extern double copysign(double, double); } 

extern "C" { extern float copysignf(float, float); } 


extern "C" { extern double nextafter(double, double); } 

extern "C" { extern float nextafterf(float, float); } 


extern "C" { extern double nan(const char *); } 

extern "C" { extern float nanf(const char *); } 


extern "C" { extern int __isinf(double); } 

extern "C" { extern int __isinff(float); } 


extern "C" { extern int __isnan(double); } 

extern "C" { extern int __isnanf(float); } 
#line 408
extern "C" { extern int __finite(double); } 

extern "C" { extern int __finitef(float); } 

extern "C" { extern int __signbit(double); } 
#line 417 "c:\\cuda\\include\\math_functions.h"
extern "C" { extern int __signbitf(float); } 


extern "C" { extern double fma(double, double, double); } 

extern "C" { extern float fmaf(float, float, float); } 
#line 25 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\math.h"
#pragma pack ( push, 8 )
#line 39 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\math.h"
extern "C" { struct _exception { 
int type; 
char *name; 
double arg1; 
double arg2; 
double retval; 
}; }
#line 56 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\math.h"
extern "C" { struct _complex { 
double x; double y; 
}; }
#line 90 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\math.h"
extern "C" double _HUGE; 
#line 103 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\math.h"
extern "C" { extern int __cdecl abs(int); } 
extern "C" { extern long __cdecl labs(long); } 
#line 107 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\math.h"
extern "C" { extern double __cdecl acos(double); } 
extern "C" { extern double __cdecl asin(double); } 
extern "C" { extern double __cdecl atan(double); } 
extern "C" { extern double __cdecl atan2(double, double); } 

extern "C" { extern double __cdecl _copysign(double, double); } 
extern "C" { extern double __cdecl _chgsign(double); } 
#line 116 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\math.h"
extern "C" { extern double __cdecl cos(double); } 
extern "C" { extern double __cdecl cosh(double); } 
extern "C" { extern double __cdecl exp(double); } 
extern "C" { extern double __cdecl fabs(double); } 
extern "C" { extern double __cdecl fmod(double, double); } 
extern "C" { extern double __cdecl log(double); } 
extern "C" { extern double __cdecl log10(double); } 
extern "C" { extern double __cdecl pow(double, double); } 
extern "C" { extern double __cdecl sin(double); } 
extern "C" { extern double __cdecl sinh(double); } 
extern "C" { extern double __cdecl tan(double); } 
extern "C" { extern double __cdecl tanh(double); } 
extern "C" { extern double __cdecl sqrt(double); } 


extern "C" { extern double __cdecl atof(const char *); } 
extern "C" { extern double __cdecl _atof_l(const char *, _locale_t); } 
#line 135 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\math.h"
extern "C" { extern double __cdecl _cabs(_complex); } 
extern "C" { extern double __cdecl ceil(double); } 
extern "C" { extern double __cdecl floor(double); } 
extern "C" { extern double __cdecl frexp(double, int *); } 
extern "C" { extern double __cdecl _hypot(double, double); } 
extern "C" { extern double __cdecl _j0(double); } 
extern "C" { extern double __cdecl _j1(double); } 
extern "C" { extern double __cdecl _jn(int, double); } 
extern "C" { extern double __cdecl ldexp(double, int); } 
#line 149 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\math.h"
extern "C" { extern int __cdecl _matherr(_exception *); } 
#line 152 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\math.h"
extern "C" { extern double __cdecl modf(double, double *); } 

extern "C" { extern double __cdecl _y0(double); } 
extern "C" { extern double __cdecl _y1(double); } 
extern "C" { extern double __cdecl _yn(int, double); } 




extern "C" { extern int __cdecl _set_SSE2_enable(int); } 
extern "C" { extern float __cdecl _hypotf(float, float); } 
#line 317 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\math.h"
extern "C" { inline long double acosl(long double _X) 
{ return acos((double)_X); } } 
extern "C" { inline long double asinl(long double _X) 
{ return asin((double)_X); } } 
extern "C" { inline long double atanl(long double _X) 
{ return atan((double)_X); } } 
extern "C" { inline long double atan2l(long double _Y, long double _X) 
{ return atan2((double)_Y, (double)_X); } } 
extern "C" { inline long double ceill(long double _X) 
{ return ceil((double)_X); } } 
extern "C" { inline long double cosl(long double _X) 
{ return cos((double)_X); } } 
extern "C" { inline long double coshl(long double _X) 
{ return cosh((double)_X); } } 
extern "C" { inline long double expl(long double _X) 
{ return exp((double)_X); } } 
extern "C" { inline long double fabsl(long double _X) 
{ return fabs((double)_X); } } 
extern "C" { inline long double floorl(long double _X) 
{ return floor((double)_X); } } 
extern "C" { inline long double fmodl(long double _X, long double _Y) 
{ return fmod((double)_X, (double)_Y); } } 
extern "C" { inline long double frexpl(long double _X, int *_Y) 
{ return frexp((double)_X, _Y); } } 
extern "C" { inline long double ldexpl(long double _X, int _Y) 
{ return ldexp((double)_X, _Y); } } 
extern "C" { inline long double logl(long double _X) 
{ return log((double)_X); } } 
extern "C" { inline long double log10l(long double _X) 
{ return log10((double)_X); } } 
extern "C" { inline long double modfl(long double _X, long double *_Y) 
{ auto double _Di; auto double _Df = modf((double)_X, &_Di); 
(*_Y) = (long double)_Di; 
return _Df; } } 
extern "C" { inline long double powl(long double _X, long double _Y) 
{ return pow((double)_X, (double)_Y); } } 
extern "C" { inline long double sinl(long double _X) 
{ return sin((double)_X); } } 
extern "C" { inline long double sinhl(long double _X) 
{ return sinh((double)_X); } } 
extern "C" { inline long double sqrtl(long double _X) 
{ return sqrt((double)_X); } } 

extern "C" { inline long double tanl(long double _X) 
{ return tan((double)_X); } } 
#line 366 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\math.h"
extern "C" { inline long double tanhl(long double _X) 
{ return tanh((double)_X); } } 

extern "C" { inline long double _chgsignl(long double _Number) 
{ 
return _chgsign(static_cast< double>(_Number)); 
} } 

extern "C" { inline long double _copysignl(long double _Number, long double _Sign) 
{ 
return _copysign(static_cast< double>(_Number), static_cast< double>(_Sign)); 
} } 

extern "C" { inline float frexpf(float _X, int *_Y) 
{ return (float)frexp((double)_X, _Y); } } 


extern "C" { inline float fabsf(float _X) 
{ return (float)fabs((double)_X); } } 
extern "C" { inline float ldexpf(float _X, int _Y) 
{ return (float)ldexp((double)_X, _Y); } } 

extern "C" { inline float acosf(float _X) 
{ return (float)acos((double)_X); } } 
extern "C" { inline float asinf(float _X) 
{ return (float)asin((double)_X); } } 
extern "C" { inline float atanf(float _X) 
{ return (float)atan((double)_X); } } 
extern "C" { inline float atan2f(float _Y, float _X) 
{ return (float)atan2((double)_Y, (double)_X); } } 
extern "C" { inline float ceilf(float _X) 
{ return (float)ceil((double)_X); } } 
extern "C" { inline float cosf(float _X) 
{ return (float)cos((double)_X); } } 
extern "C" { inline float coshf(float _X) 
{ return (float)cosh((double)_X); } } 
extern "C" { inline float expf(float _X) 
{ return (float)exp((double)_X); } } 
extern "C" { inline float floorf(float _X) 
{ return (float)floor((double)_X); } } 
extern "C" { inline float fmodf(float _X, float _Y) 
{ return (float)fmod((double)_X, (double)_Y); } } 
extern "C" { inline float logf(float _X) 
{ return (float)log((double)_X); } } 
extern "C" { inline float log10f(float _X) 
{ return (float)log10((double)_X); } } 
extern "C" { inline float modff(float _X, float *_Y) 
{ auto double _Di; auto double _Df = modf((double)_X, &_Di); 
(*_Y) = (float)_Di; 
return (float)_Df; } } 
extern "C" { inline float powf(float _X, float _Y) 
{ return (float)pow((double)_X, (double)_Y); } } 
extern "C" { inline float sinf(float _X) 
{ return (float)sin((double)_X); } } 
extern "C" { inline float sinhf(float _X) 
{ return (float)sinh((double)_X); } } 
extern "C" { inline float sqrtf(float _X) 
{ return (float)sqrt((double)_X); } } 
extern "C" { inline float tanf(float _X) 
{ return (float)tan((double)_X); } } 
extern "C" { inline float tanhf(float _X) 
{ return (float)tanh((double)_X); } } 
#line 449 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\math.h"
extern "C" double HUGE; 
#line 454 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\math.h"
extern "C" { extern double __cdecl cabs(_complex); } 
extern "C" { extern double __cdecl hypot(double, double); } 
extern "C" { extern double __cdecl j0(double); } 
extern "C" { extern double __cdecl j1(double); } 
extern "C" { extern double __cdecl jn(int, double); } 
extern "C" { extern double __cdecl y0(double); } 
extern "C" { extern double __cdecl y1(double); } 
extern "C" { extern double __cdecl yn(int, double); } 
#line 472 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\math.h"
template < class _Ty > inline
        _Ty _Pow_int ( _Ty _X, int _Y )
        { unsigned int _N;
        if ( _Y >= 0 )
                _N = ( unsigned int ) _Y;
        else
                _N = ( unsigned int ) ( - _Y );
        for ( _Ty _Z = _Ty ( 1 );; _X *= _X )
                { if ( ( _N & 1 ) != 0 )
                        _Z *= _X;
                if ( ( _N >>= 1 ) == 0 )
                        return ( _Y < 0 ? _Ty ( 1 ) / _Z : _Z ); } }

inline long __cdecl abs(long _X) 
{ return labs(_X); } 
inline double __cdecl abs(double _X) 
{ return fabs(_X); } 
inline double __cdecl pow(double _X, int _Y) 
{ return _Pow_int(_X, _Y); } 
inline float __cdecl abs(float _X) 
{ return fabsf(_X); } 
inline float __cdecl acos(float _X) 
{ return acosf(_X); } 
inline float __cdecl asin(float _X) 
{ return asinf(_X); } 
inline float __cdecl atan(float _X) 
{ return atanf(_X); } 
inline float __cdecl atan2(float _Y, float _X) 
{ return atan2f(_Y, _X); } 
inline float __cdecl ceil(float _X) 
{ return ceilf(_X); } 
inline float __cdecl cos(float _X) 
{ return cosf(_X); } 
inline float __cdecl cosh(float _X) 
{ return coshf(_X); } 
inline float __cdecl exp(float _X) 
{ return expf(_X); } 
inline float __cdecl fabs(float _X) 
{ return fabsf(_X); } 
inline float __cdecl floor(float _X) 
{ return floorf(_X); } 
inline float __cdecl fmod(float _X, float _Y) 
{ return fmodf(_X, _Y); } 
inline float __cdecl frexp(float _X, int *_Y) 
{ return frexpf(_X, _Y); } 
inline float __cdecl ldexp(float _X, int _Y) 
{ return ldexpf(_X, _Y); } 
inline float __cdecl log(float _X) 
{ return logf(_X); } 
inline float __cdecl log10(float _X) 
{ return log10f(_X); } 
inline float __cdecl modf(float _X, float *_Y) 
{ return modff(_X, _Y); } 
inline float __cdecl pow(float _X, float _Y) 
{ return powf(_X, _Y); } 
inline float __cdecl pow(float _X, int _Y) 
{ return _Pow_int(_X, _Y); } 
inline float __cdecl sin(float _X) 
{ return sinf(_X); } 
inline float __cdecl sinh(float _X) 
{ return sinhf(_X); } 
inline float __cdecl sqrt(float _X) 
{ return sqrtf(_X); } 
inline float __cdecl tan(float _X) 
{ return tanf(_X); } 
inline float __cdecl tanh(float _X) 
{ return tanhf(_X); } 
inline long double __cdecl abs(long double _X) 
{ return fabsl(_X); } 
inline long double __cdecl acos(long double _X) 
{ return acosl(_X); } 
inline long double __cdecl asin(long double _X) 
{ return asinl(_X); } 
inline long double __cdecl atan(long double _X) 
{ return atanl(_X); } 
inline long double __cdecl atan2(long double _Y, long double _X) 
{ return atan2l(_Y, _X); } 
inline long double __cdecl ceil(long double _X) 
{ return ceill(_X); } 
inline long double __cdecl cos(long double _X) 
{ return cosl(_X); } 
inline long double __cdecl cosh(long double _X) 
{ return coshl(_X); } 
inline long double __cdecl exp(long double _X) 
{ return expl(_X); } 
inline long double __cdecl fabs(long double _X) 
{ return fabsl(_X); } 
inline long double __cdecl floor(long double _X) 
{ return floorl(_X); } 
inline long double __cdecl fmod(long double _X, long double _Y) 
{ return fmodl(_X, _Y); } 
inline long double __cdecl frexp(long double _X, int *_Y) 
{ return frexpl(_X, _Y); } 
inline long double __cdecl ldexp(long double _X, int _Y) 
{ return ldexpl(_X, _Y); } 
inline long double __cdecl log(long double _X) 
{ return logl(_X); } 
inline long double __cdecl log10(long double _X) 
{ return log10l(_X); } 
inline long double __cdecl modf(long double _X, long double *_Y) 
{ return modfl(_X, _Y); } 
inline long double __cdecl pow(long double _X, long double _Y) 
{ return powl(_X, _Y); } 
inline long double __cdecl pow(long double _X, int _Y) 
{ return _Pow_int(_X, _Y); } 
inline long double __cdecl sin(long double _X) 
{ return sinl(_X); } 
inline long double __cdecl sinh(long double _X) 
{ return sinhl(_X); } 
inline long double __cdecl sqrt(long double _X) 
{ return sqrtl(_X); } 
inline long double __cdecl tan(long double _X) 
{ return tanl(_X); } 
inline long double __cdecl tanh(long double _X) 
{ return tanhl(_X); } 
#line 592 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\math.h"
#pragma pack ( pop )
#line 31 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
#pragma pack ( push, 8 )
#line 56 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" { typedef int (__cdecl *_onexit_t)(void); }
#line 82 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" { typedef 
#line 79
struct _div_t { 
int quot; 
int rem; 
} div_t; }




extern "C" { typedef 
#line 84
struct _ldiv_t { 
long quot; 
long rem; 
} ldiv_t; }
#line 101 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
#pragma pack ( 4 )


extern "C" { typedef 
#line 102
struct _LDOUBLE { 
unsigned char ld[10]; 
} _LDOUBLE; }
#pragma pack ( )
#line 123 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" { typedef 
#line 121
struct _CRT_DOUBLE { 
double x; 
} _CRT_DOUBLE; }



extern "C" { typedef 
#line 125
struct _CRT_FLOAT { 
float f; 
} _CRT_FLOAT; }
#line 138
extern "C" { typedef 
#line 133
struct _LONGDOUBLE { 



long double x; 
} _LONGDOUBLE; }



#pragma pack ( 4 )


extern "C" { typedef 
#line 143
struct _LDBL12 { 
unsigned char ld12[12]; 
} _LDBL12; }
#pragma pack ( )
#line 166 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" int __mb_cur_max; 
#line 171 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" { extern int __cdecl ___mb_cur_max_func(); } 
extern "C" { extern int __cdecl ___mb_cur_max_l_func(_locale_t); } 
#line 211 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" { typedef void (__cdecl *_purecall_handler)(void); }


extern "C" { extern _purecall_handler __cdecl _set_purecall_handler(_purecall_handler); } 
extern "C" { extern _purecall_handler __cdecl _get_purecall_handler(); } 
#line 239 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" { typedef void (__cdecl *_invalid_parameter_handler)(const __wchar_t *, const __wchar_t *, const __wchar_t *, unsigned, uintptr_t); }


extern "C" { extern _invalid_parameter_handler __cdecl _set_invalid_parameter_handler(_invalid_parameter_handler); } 
extern "C" { extern _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(); } 
#line 274 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" { extern unsigned long *__cdecl __doserrno(); } 


extern "C" { extern errno_t __cdecl _set_doserrno(unsigned long); } 
extern "C" { extern errno_t __cdecl _get_doserrno(unsigned long *); } 


extern "C" { extern char **__cdecl __sys_errlist(); } 


extern "C" { extern int *__cdecl __sys_nerr(); } 
#line 301 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" int __argc; 
extern "C" char **__argv; 
extern "C" __wchar_t **__wargv; 
#line 317 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" char **_environ; 
extern "C" __wchar_t **_wenviron; 
#line 321 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" char *_pgmptr; 
extern "C" __wchar_t *_wpgmptr; 
#line 339 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" { extern errno_t __cdecl _get_pgmptr(char **); } 
extern "C" { extern errno_t __cdecl _get_wpgmptr(__wchar_t **); } 



extern "C" int _fmode; 
#line 350 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" { extern errno_t __cdecl _set_fmode(int); } 
extern "C" { extern errno_t __cdecl _get_fmode(int *); } 
#line 360 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
template<class _CountofType, size_t _SizeOfArray> extern char (*__countof_helper(_CountofType (&)[_SizeOfArray]))[_SizeOfArray]; 
#line 371 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" { extern __declspec( noreturn ) void __cdecl exit(int); } 
extern "C" { extern __declspec( noreturn ) void __cdecl _exit(int); } 
extern "C" { extern void __cdecl abort(); } 
#line 376 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" { extern unsigned __cdecl _set_abort_behavior(unsigned, unsigned); } 
#line 384
extern "C" { extern __int64 __cdecl _abs64(__int64); } 
#line 412 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" { extern int __cdecl atexit(void (__cdecl *)(void)); } 
#line 419 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" { extern int __cdecl atoi(const char *); } 
extern "C" { extern int __cdecl _atoi_l(const char *, _locale_t); } 
extern "C" { extern long __cdecl atol(const char *); } 
extern "C" { extern long __cdecl _atol_l(const char *, _locale_t); } 



extern "C" { extern void *__cdecl bsearch_s(const void *, const void *, rsize_t, rsize_t, int (__cdecl *)(void *, const void *, const void *), void *); } 
#line 430 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" { extern void *__cdecl bsearch(const void *, const void *, size_t, size_t, int (__cdecl *)(const void *, const void *)); } 




extern "C" { extern void __cdecl qsort_s(void *, rsize_t, rsize_t, int (__cdecl *)(void *, const void *, const void *), void *); } 
#line 439 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" { extern void __cdecl qsort(void *, size_t, size_t, int (__cdecl *)(const void *, const void *)); } 
#line 443 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" { extern unsigned short __cdecl _byteswap_ushort(unsigned short); } 
extern "C" { extern unsigned long __cdecl _byteswap_ulong(unsigned long); } 
extern "C" { extern unsigned __int64 __cdecl _byteswap_uint64(unsigned __int64); } 
extern "C" { extern div_t __cdecl div(int, int); } 
extern "C" { extern char *__cdecl getenv(const char *); } 

extern "C" { extern errno_t __cdecl getenv_s(size_t *, char *, rsize_t, const char *); } 
#line 451 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
template < size_t _Size > inline errno_t __cdecl getenv_s ( size_t * _ReturnSize, char ( & _Dest ) [ _Size ], const char * _VarName ) { return getenv_s ( _ReturnSize, _Dest, _Size, _VarName ); }
#line 457 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" { extern errno_t __cdecl _dupenv_s(char **, size_t *, const char *); } 
#line 463 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" { extern errno_t __cdecl _itoa_s(int, char *, size_t, int); } 
template < size_t _Size > inline errno_t __cdecl _itoa_s ( int _Value, char ( & _Dest ) [ _Size ], int _Radix ) { return _itoa_s ( _Value, _Dest, _Size, _Radix ); }
extern "C" { extern char *__cdecl _itoa(int, char *, int); } 
extern "C" { extern errno_t __cdecl _i64toa_s(__int64, char *, size_t, int); } 
extern "C" { extern char *__cdecl _i64toa(__int64, char *, int); } 
extern "C" { extern errno_t __cdecl _ui64toa_s(unsigned __int64, char *, size_t, int); } 
extern "C" { extern char *__cdecl _ui64toa(unsigned __int64, char *, int); } 
extern "C" { extern __int64 __cdecl _atoi64(const char *); } 
extern "C" { extern __int64 __cdecl _atoi64_l(const char *, _locale_t); } 
extern "C" { extern __int64 __cdecl _strtoi64(const char *, char **, int); } 
extern "C" { extern __int64 __cdecl _strtoi64_l(const char *, char **, int, _locale_t); } 
extern "C" { extern unsigned __int64 __cdecl _strtoui64(const char *, char **, int); } 
extern "C" { extern unsigned __int64 __cdecl _strtoui64_l(const char *, char **, int, _locale_t); } 
extern "C" { extern ldiv_t __cdecl ldiv(long, long); } 



inline ldiv_t div(long _A1, long _A2) 
{ 
return ldiv(_A1, _A2); 
} 
#line 486 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" { extern errno_t __cdecl _ltoa_s(long, char *, size_t, int); } 
template < size_t _Size > inline errno_t __cdecl _ltoa_s ( long _Value, char ( & _Dest ) [ _Size ], int _Radix ) { return _ltoa_s ( _Value, _Dest, _Size, _Radix ); }
extern "C" { extern char *__cdecl _ltoa(long, char *, int); } 
extern "C" { extern int __cdecl mblen(const char *, size_t); } 
extern "C" { extern int __cdecl _mblen_l(const char *, size_t, _locale_t); } 
extern "C" { extern size_t __cdecl _mbstrlen(const char *); } 
extern "C" { extern size_t __cdecl _mbstrlen_l(const char *, _locale_t); } 
extern "C" { extern size_t __cdecl _mbstrnlen(const char *, size_t); } 
extern "C" { extern size_t __cdecl _mbstrnlen_l(const char *, size_t, _locale_t); } 
extern "C" { extern int __cdecl mbtowc(__wchar_t *, const char *, size_t); } 
extern "C" { extern int __cdecl _mbtowc_l(__wchar_t *, const char *, size_t, _locale_t); } 
extern "C" { extern errno_t __cdecl mbstowcs_s(size_t *, __wchar_t *, size_t, const char *, size_t); } 
template < size_t _Size > inline errno_t __cdecl mbstowcs_s ( size_t * _PtNumOfCharConverted, wchar_t ( & _Dest ) [ _Size ], const char * _Source, size_t _MaxCount ) { return mbstowcs_s ( _PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount ); }
extern "C" { extern size_t __cdecl mbstowcs(__wchar_t *, const char *, size_t); } 

extern "C" { extern errno_t __cdecl _mbstowcs_s_l(size_t *, __wchar_t *, size_t, const char *, size_t, _locale_t); } 
template < size_t _Size > inline errno_t __cdecl _mbstowcs_s_l ( size_t * _PtNumOfCharConverted, wchar_t ( & _Dest ) [ _Size ], const char * _Source, size_t _MaxCount, _locale_t _Locale ) { return _mbstowcs_s_l ( _PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale ); }
extern "C" { extern size_t __cdecl _mbstowcs_l(__wchar_t *, const char *, size_t, _locale_t); } 

extern "C" { extern int __cdecl rand(); } 
#line 510 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" { extern int __cdecl _set_error_mode(int); } 

extern "C" { extern void __cdecl srand(unsigned); } 
extern "C" { extern double __cdecl strtod(const char *, char **); } 
extern "C" { extern double __cdecl _strtod_l(const char *, char **, _locale_t); } 
extern "C" { extern long __cdecl strtol(const char *, char **, int); } 
extern "C" { extern long __cdecl _strtol_l(const char *, char **, int, _locale_t); } 
extern "C" { extern unsigned long __cdecl strtoul(const char *, char **, int); } 
extern "C" { extern unsigned long __cdecl _strtoul_l(const char *, char **, int, _locale_t); } 


extern "C" { extern int __cdecl system(const char *); } 
#line 523 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" { extern errno_t __cdecl _ultoa_s(unsigned long, char *, size_t, int); } 
template < size_t _Size > inline errno_t __cdecl _ultoa_s ( unsigned long _Value, char ( & _Dest ) [ _Size ], int _Radix ) { return _ultoa_s ( _Value, _Dest, _Size, _Radix ); }
extern "C" { extern char *__cdecl _ultoa(unsigned long, char *, int); } 
extern "C" { extern int __cdecl wctomb(char *, __wchar_t); } 
extern "C" { extern int __cdecl _wctomb_l(char *, __wchar_t, _locale_t); } 

extern "C" { extern errno_t __cdecl wctomb_s(int *, char *, rsize_t, __wchar_t); } 
#line 531 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" { extern errno_t __cdecl _wctomb_s_l(int *, char *, size_t, __wchar_t, _locale_t); } 
extern "C" { extern errno_t __cdecl wcstombs_s(size_t *, char *, size_t, const __wchar_t *, size_t); } 
template < size_t _Size > inline errno_t __cdecl wcstombs_s ( size_t * _PtNumOfCharConverted, char ( & _Dest ) [ _Size ], const wchar_t * _Source, size_t _MaxCount ) { return wcstombs_s ( _PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount ); }
extern "C" { extern size_t __cdecl wcstombs(char *, const __wchar_t *, size_t); } 
extern "C" { extern errno_t __cdecl _wcstombs_s_l(size_t *, char *, size_t, const __wchar_t *, size_t, _locale_t); } 
template < size_t _Size > inline errno_t __cdecl _wcstombs_s_l ( size_t * _PtNumOfCharConverted, char ( & _Dest ) [ _Size ], const wchar_t * _Source, size_t _MaxCount, _locale_t _Locale ) { return _wcstombs_s_l ( _PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale ); }
extern "C" { extern size_t __cdecl _wcstombs_l(char *, const __wchar_t *, size_t, _locale_t); } 
#line 599 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" { extern void *__cdecl calloc(size_t, size_t); } 
extern "C" { extern void __cdecl free(void *); } 
extern "C" { extern void *__cdecl malloc(size_t); } 
extern "C" { extern void *__cdecl realloc(void *, size_t); } 
extern "C" { extern void *__cdecl _recalloc(void *, size_t, size_t); } 
extern "C" { extern void __cdecl _aligned_free(void *); } 
extern "C" { extern void *__cdecl _aligned_malloc(size_t, size_t); } 
extern "C" { extern void *__cdecl _aligned_offset_malloc(size_t, size_t, size_t); } 
extern "C" { extern void *__cdecl _aligned_realloc(void *, size_t, size_t); } 
extern "C" { extern void *__cdecl _aligned_recalloc(void *, size_t, size_t, size_t); } 
extern "C" { extern void *__cdecl _aligned_offset_realloc(void *, size_t, size_t, size_t); } 
extern "C" { extern void *__cdecl _aligned_offset_recalloc(void *, size_t, size_t, size_t, size_t); } 
extern "C" { extern size_t __cdecl _aligned_msize(void *, size_t, size_t); } 
#line 638 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" { extern errno_t __cdecl _itow_s(int, __wchar_t *, size_t, int); } 
template < size_t _Size > inline errno_t __cdecl _itow_s ( int _Value, wchar_t ( & _Dest ) [ _Size ], int _Radix ) { return _itow_s ( _Value, _Dest, _Size, _Radix ); }
extern "C" { extern __wchar_t *__cdecl _itow(int, __wchar_t *, int); } 
extern "C" { extern errno_t __cdecl _ltow_s(long, __wchar_t *, size_t, int); } 
template < size_t _Size > inline errno_t __cdecl _ltow_s ( long _Value, wchar_t ( & _Dest ) [ _Size ], int _Radix ) { return _ltow_s ( _Value, _Dest, _Size, _Radix ); }
extern "C" { extern __wchar_t *__cdecl _ltow(long, __wchar_t *, int); } 
extern "C" { extern errno_t __cdecl _ultow_s(unsigned long, __wchar_t *, size_t, int); } 
template < size_t _Size > inline errno_t __cdecl _ultow_s ( unsigned long _Value, wchar_t ( & _Dest ) [ _Size ], int _Radix ) { return _ultow_s ( _Value, _Dest, _Size, _Radix ); }
extern "C" { extern __wchar_t *__cdecl _ultow(unsigned long, __wchar_t *, int); } 
extern "C" { extern double __cdecl wcstod(const __wchar_t *, __wchar_t **); } 
extern "C" { extern double __cdecl _wcstod_l(const __wchar_t *, __wchar_t **, _locale_t); } 
extern "C" { extern long __cdecl wcstol(const __wchar_t *, __wchar_t **, int); } 
extern "C" { extern long __cdecl _wcstol_l(const __wchar_t *, __wchar_t **, int, _locale_t); } 
extern "C" { extern unsigned long __cdecl wcstoul(const __wchar_t *, __wchar_t **, int); } 
extern "C" { extern unsigned long __cdecl _wcstoul_l(const __wchar_t *, __wchar_t **, int, _locale_t); } 
extern "C" { extern __wchar_t *__cdecl _wgetenv(const __wchar_t *); } 
extern "C" { extern errno_t __cdecl _wgetenv_s(size_t *, __wchar_t *, size_t, const __wchar_t *); } 
template < size_t _Size > inline errno_t __cdecl _wgetenv_s ( size_t * _ReturnSize, wchar_t ( & _Dest ) [ _Size ], const wchar_t * _VarName ) { return _wgetenv_s ( _ReturnSize, _Dest, _Size, _VarName ); }
#line 662 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" { extern errno_t __cdecl _wdupenv_s(__wchar_t **, size_t *, const __wchar_t *); } 
#line 670 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" { extern int __cdecl _wsystem(const __wchar_t *); } 
#line 672 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" { extern double __cdecl _wtof(const __wchar_t *); } 
extern "C" { extern double __cdecl _wtof_l(const __wchar_t *, _locale_t); } 
extern "C" { extern int __cdecl _wtoi(const __wchar_t *); } 
extern "C" { extern int __cdecl _wtoi_l(const __wchar_t *, _locale_t); } 
extern "C" { extern long __cdecl _wtol(const __wchar_t *); } 
extern "C" { extern long __cdecl _wtol_l(const __wchar_t *, _locale_t); } 

extern "C" { extern errno_t __cdecl _i64tow_s(__int64, __wchar_t *, size_t, int); } 
extern "C" { extern __wchar_t *__cdecl _i64tow(__int64, __wchar_t *, int); } 
extern "C" { extern errno_t __cdecl _ui64tow_s(unsigned __int64, __wchar_t *, size_t, int); } 
extern "C" { extern __wchar_t *__cdecl _ui64tow(unsigned __int64, __wchar_t *, int); } 
extern "C" { extern __int64 __cdecl _wtoi64(const __wchar_t *); } 
extern "C" { extern __int64 __cdecl _wtoi64_l(const __wchar_t *, _locale_t); } 
extern "C" { extern __int64 __cdecl _wcstoi64(const __wchar_t *, __wchar_t **, int); } 
extern "C" { extern __int64 __cdecl _wcstoi64_l(const __wchar_t *, __wchar_t **, int, _locale_t); } 
extern "C" { extern unsigned __int64 __cdecl _wcstoui64(const __wchar_t *, __wchar_t **, int); } 
extern "C" { extern unsigned __int64 __cdecl _wcstoui64_l(const __wchar_t *, __wchar_t **, int, _locale_t); } 
#line 708 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" { extern char *__cdecl _fullpath(char *, const char *, size_t); } 
#line 716 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" { extern errno_t __cdecl _ecvt_s(char *, size_t, double, int, int *, int *); } 
template < size_t _Size > inline errno_t __cdecl _ecvt_s ( char ( & _Dest ) [ _Size ], double _Value, int _NumOfDigits, int * _PtDec, int * _PtSign ) { return _ecvt_s ( _Dest, _Size, _Value, _NumOfDigits, _PtDec, _PtSign ); }
extern "C" { extern char *__cdecl _ecvt(double, int, int *, int *); } 
extern "C" { extern errno_t __cdecl _fcvt_s(char *, size_t, double, int, int *, int *); } 
template < size_t _Size > inline errno_t __cdecl _fcvt_s ( char ( & _Dest ) [ _Size ], double _Value, int _NumOfDigits, int * _PtDec, int * _PtSign ) { return _fcvt_s ( _Dest, _Size, _Value, _NumOfDigits, _PtDec, _PtSign ); }
extern "C" { extern char *__cdecl _fcvt(double, int, int *, int *); } 
extern "C" { extern errno_t __cdecl _gcvt_s(char *, size_t, double, int); } 
template < size_t _Size > inline errno_t __cdecl _gcvt_s ( char ( & _Dest ) [ _Size ], double _Value, int _NumOfDigits ) { return _gcvt_s ( _Dest, _Size, _Value, _NumOfDigits ); }
extern "C" { extern char *__cdecl _gcvt(double, int, char *); } 

extern "C" { extern int __cdecl _atodbl(_CRT_DOUBLE *, char *); } 
extern "C" { extern int __cdecl _atoldbl(_LDOUBLE *, char *); } 
extern "C" { extern int __cdecl _atoflt(_CRT_FLOAT *, char *); } 
extern "C" { extern int __cdecl _atodbl_l(_CRT_DOUBLE *, char *, _locale_t); } 
extern "C" { extern int __cdecl _atoldbl_l(_LDOUBLE *, char *, _locale_t); } 
extern "C" { extern int __cdecl _atoflt_l(_CRT_FLOAT *, char *, _locale_t); } 
extern "C" { extern unsigned long __cdecl _lrotl(unsigned long, int); } 
extern "C" { extern unsigned long __cdecl _lrotr(unsigned long, int); } 
extern "C" { extern errno_t __cdecl _makepath_s(char *, size_t, const char *, const char *, const char *, const char *); } 

template < size_t _Size > inline errno_t __cdecl _makepath_s ( char ( & _Path ) [ _Size ], const char * _Drive, const char * _Dir, const char * _Filename, const char * _Ext ) { return _makepath_s ( _Path, _Size, _Drive, _Dir, _Filename, _Ext ); }
extern "C" { extern void __cdecl _makepath(char *, const char *, const char *, const char *, const char *); } 
#line 764 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" { extern _onexit_t __cdecl _onexit(_onexit_t); } 
#line 769 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" { extern void __cdecl perror(const char *); } 
#line 772 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
#pragma warning (push)
#pragma warning (disable:6540)
extern "C" { extern int __cdecl _putenv(const char *); } 
extern "C" { extern errno_t __cdecl _putenv_s(const char *, const char *); } 
extern "C" { extern unsigned __cdecl _rotl(unsigned, int); } 
extern "C" { extern unsigned __int64 __cdecl _rotl64(unsigned __int64, int); } 
extern "C" { extern unsigned __cdecl _rotr(unsigned, int); } 
extern "C" { extern unsigned __int64 __cdecl _rotr64(unsigned __int64, int); } 
#pragma warning (pop)

extern "C" { extern errno_t __cdecl _searchenv_s(const char *, const char *, char *, size_t); } 
template < size_t _Size > inline errno_t __cdecl _searchenv_s ( const char * _Filename, const char * _EnvVar, char ( & _ResultPath ) [ _Size ] ) { return _searchenv_s ( _Filename, _EnvVar, _ResultPath, _Size ); }
extern "C" { extern void __cdecl _searchenv(const char *, const char *, char *); } 

extern "C" { extern void __cdecl _splitpath(const char *, char *, char *, char *, char *); } 
extern "C" { extern errno_t __cdecl _splitpath_s(const char *, char *, size_t, char *, size_t, char *, size_t, char *, size_t); } 




template < size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize > inline errno_t __cdecl _splitpath_s ( const char * _Dest, char ( & _Drive ) [ _DriveSize ], char ( & _Dir ) [ _DirSize ], char ( & _Name ) [ _NameSize ], char ( & _Ext ) [ _ExtSize ] ) { return _splitpath_s ( _Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize ); }

extern "C" { extern void __cdecl _swab(char *, char *, int); } 
#line 805 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" { extern __wchar_t *__cdecl _wfullpath(__wchar_t *, const __wchar_t *, size_t); } 
#line 811 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" { extern errno_t __cdecl _wmakepath_s(__wchar_t *, size_t, const __wchar_t *, const __wchar_t *, const __wchar_t *, const __wchar_t *); } 

template < size_t _Size > inline errno_t __cdecl _wmakepath_s ( wchar_t ( & _ResultPath ) [ _Size ], const wchar_t * _Drive, const wchar_t * _Dir, const wchar_t * _Filename, const wchar_t * _Ext ) { return _wmakepath_s ( _ResultPath, _Size, _Drive, _Dir, _Filename, _Ext ); }
extern "C" { extern void __cdecl _wmakepath(__wchar_t *, const __wchar_t *, const __wchar_t *, const __wchar_t *, const __wchar_t *); } 


extern "C" { extern void __cdecl _wperror(const __wchar_t *); } 
#line 819 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" { extern int __cdecl _wputenv(const __wchar_t *); } 
extern "C" { extern errno_t __cdecl _wputenv_s(const __wchar_t *, const __wchar_t *); } 
extern "C" { extern errno_t __cdecl _wsearchenv_s(const __wchar_t *, const __wchar_t *, __wchar_t *, size_t); } 
template < size_t _Size > inline errno_t __cdecl _wsearchenv_s ( const wchar_t * _Filename, const wchar_t * _EnvVar, wchar_t ( & _ResultPath ) [ _Size ] ) { return _wsearchenv_s ( _Filename, _EnvVar, _ResultPath, _Size ); }
extern "C" { extern void __cdecl _wsearchenv(const __wchar_t *, const __wchar_t *, __wchar_t *); } 
extern "C" { extern void __cdecl _wsplitpath(const __wchar_t *, __wchar_t *, __wchar_t *, __wchar_t *, __wchar_t *); } 
extern "C" { extern errno_t __cdecl _wsplitpath_s(const __wchar_t *, __wchar_t *, size_t, __wchar_t *, size_t, __wchar_t *, size_t, __wchar_t *, size_t); } 




template < size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize > inline errno_t __cdecl _wsplitpath_s ( const wchar_t * _Path, wchar_t ( & _Drive ) [ _DriveSize ], wchar_t ( & _Dir ) [ _DirSize ], wchar_t ( & _Name ) [ _NameSize ], wchar_t ( & _Ext ) [ _ExtSize ] ) { return _wsplitpath_s ( _Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize ); }
#line 836 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
extern "C" { extern __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using SetErrorMode instead. See online help for details.")) void __cdecl _seterrormode(int); } 
extern "C" { extern __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using Beep instead. See online help for details.")) void __cdecl _beep(unsigned, unsigned); } 
extern "C" { extern __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using Sleep instead. See online help for details.")) void __cdecl _sleep(unsigned long); } 
#line 857 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
#pragma warning(push)
#pragma warning(disable: 4141)
extern "C" { extern char *__cdecl ecvt(double, int, int *, int *); } 
extern "C" { extern char *__cdecl fcvt(double, int, int *, int *); } 
extern "C" { extern char *__cdecl gcvt(double, int, char *); } 
extern "C" { extern char *__cdecl itoa(int, char *, int); } 
extern "C" { extern char *__cdecl ltoa(long, char *, int); } 
extern "C" { extern int __cdecl putenv(const char *); } 
extern "C" { extern void __cdecl swab(char *, char *, int); } 
extern "C" { extern char *__cdecl ultoa(unsigned long, char *, int); } 
#pragma warning(pop)
extern "C" { extern _onexit_t __cdecl onexit(_onexit_t); } 
#line 114 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\use_ansi.h"
#pragma comment(lib,"libcpmt")
#line 880 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdlib.h"
#pragma pack ( pop )
#line 9 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\yvals.h"
#pragma pack ( push, 8 )
#line 528 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\yvals.h"
namespace std { 
typedef bool _Bool; 
}
#line 546 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\yvals.h"
typedef __int64 _Longlong; 
typedef unsigned __int64 _ULonglong; 
#line 569 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\yvals.h"
namespace std { 



#pragma warning(push)
#pragma warning(disable:4412)
class _Lockit { 
#line 595 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\yvals.h"
public: explicit __thiscall _Lockit(); 
explicit __thiscall _Lockit(int); 
__thiscall ~_Lockit(); 
#line 600 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\yvals.h"
static void __cdecl _Lockit_ctor(int); 
static void __cdecl _Lockit_dtor(int); 


private: static void __cdecl _Lockit_ctor(_Lockit *); 
static void __cdecl _Lockit_ctor(_Lockit *, int); 
static void __cdecl _Lockit_dtor(_Lockit *); 

_Lockit(const _Lockit &); 
_Lockit &operator=(const _Lockit &); 

int _Locktype; 
#line 628 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\yvals.h"
}; 
#line 722 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\yvals.h"
class _Mutex { 
#line 746 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\yvals.h"
public: __thiscall _Mutex(); 
__thiscall ~_Mutex(); 
void __thiscall _Lock(); 
void __thiscall _Unlock(); 
#line 753 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\yvals.h"
private: static void __cdecl _Mutex_ctor(_Mutex *); 
static void __cdecl _Mutex_dtor(_Mutex *); 
static void __cdecl _Mutex_Lock(_Mutex *); 
static void __cdecl _Mutex_Unlock(_Mutex *); 

_Mutex(const _Mutex &); 
_Mutex &operator=(const _Mutex &); 
void *_Mtx; 
#line 772 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\yvals.h"
}; 

class _Init_locks { 
#line 790 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\yvals.h"
public: __thiscall _Init_locks(); 
__thiscall ~_Init_locks(); 
#line 795 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\yvals.h"
private: static void __cdecl _Init_locks_ctor(_Init_locks *); 
static void __cdecl _Init_locks_dtor(_Init_locks *); 
#line 808 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\yvals.h"
}; 
#pragma warning(pop)
}
#line 819 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\yvals.h"
extern void __cdecl _Atexit(void (__cdecl *)(void)); 

typedef int _Mbstatet; 
#line 830
#pragma pack ( pop )
#line 20 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\cmath"
namespace std { 
using ::acosf;using ::asinf;
using ::atanf;using ::atan2f;using ::ceilf;
using ::cosf;using ::coshf;using ::expf;
using ::fabsf;using ::floorf;using ::fmodf;
using ::frexpf;using ::ldexpf;using ::logf;
using ::log10f;using ::modff;using ::powf;
using ::sinf;using ::sinhf;using ::sqrtf;
using ::tanf;using ::tanhf;

using ::acosl;using ::asinl;
using ::atanl;using ::atan2l;using ::ceill;
using ::cosl;using ::coshl;using ::expl;
using ::fabsl;using ::floorl;using ::fmodl;
using ::frexpl;using ::ldexpl;using ::logl;
using ::log10l;using ::modfl;using ::powl;
using ::sinl;using ::sinhl;using ::sqrtl;
using ::tanl;using ::tanhl;

using ::abs;

using ::acos;using ::asin;
using ::atan;using ::atan2;using ::ceil;
using ::cos;using ::cosh;using ::exp;
using ::fabs;using ::floor;using ::fmod;
using ::frexp;using ::ldexp;using ::log;
using ::log10;using ::modf;using ::pow;
using ::sin;using ::sinh;using ::sqrt;
using ::tan;using ::tanh;


}
#line 19 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\cstdlib"
namespace std { 

using ::size_t;using ::div_t;using ::ldiv_t;

using ::abort;using ::atexit;
using ::atof;using ::atoi;using ::atol;
using ::bsearch;using ::calloc;using ::div;
using ::exit;using ::free;using ::getenv;
using ::labs;using ::ldiv;using ::malloc;
using ::mblen;using ::mbstowcs;using ::mbtowc;
using ::qsort;using ::rand;using ::realloc;
using ::srand;using ::strtod;using ::strtol;
using ::strtoul;using ::system;
using ::wcstombs;using ::wctomb;


}
#line 518 "c:\\cuda\\include\\math_functions.h"
static __inline __int64 abs(__int64 a) 
{ 
return llabs(a); 
} 

static __inline int signbit(double a) 
{ 
return __signbit(a); 
} 

static __inline int signbit(float a) 
{ 
return __signbitf(a); 
} 

static __inline int isinf(double a) 
{ 
return __isinf(a); 
} 

static __inline int isinf(float a) 
{ 
return __isinff(a); 
} 

static __inline int isnan(double a) 
{ 
return __isnan(a); 
} 

static __inline int isnan(float a) 
{ 
return __isnanf(a); 
} 

static __inline int isfinite(double a) 
{ 
return __finite(a); 
} 

static __inline int isfinite(float a) 
{ 
return __finitef(a); 
} 

template<class T> inline T _Pow_int(T, int); 
#line 571 "c:\\cuda\\include\\math_functions.h"
inline long abs(long); 
inline float abs(float); 
inline double abs(double); 
inline float fabs(float); 
inline float ceil(float); 
inline float floor(float); 
inline float sqrt(float); 
inline float pow(float, float); 
inline float pow(float, int); 
inline double pow(double, int); 
inline float log(float); 
inline float log10(float); 
inline float fmod(float, float); 
inline float modf(float, float *); 
inline float exp(float); 
inline float frexp(float, int *); 
inline float ldexp(float, int); 
inline float asin(float); 
inline float sin(float); 
inline float sinh(float); 
inline float acos(float); 
inline float cos(float); 
inline float cosh(float); 
inline float atan(float); 
inline float atan2(float, float); 
inline float tan(float); 
inline float tanh(float); 
#line 603 "c:\\cuda\\include\\math_functions.h"
static __inline float logb(float a) 
{ 
return logbf(a); 
} 

static __inline int ilogb(float a) 
{ 
return ilogbf(a); 
} 

static __inline float scalbn(float a, int b) 
{ 
return scalbnf(a, b); 
} 

static __inline float scalbln(float a, long b) 
{ 
return scalblnf(a, b); 
} 

static __inline float exp2(float a) 
{ 
return exp2f(a); 
} 

static __inline float exp10(float a) 
{ 
return exp10f(a); 
} 

static __inline float expm1(float a) 
{ 
return expm1f(a); 
} 

static __inline float log2(float a) 
{ 
return log2f(a); 
} 

static __inline float log1p(float a) 
{ 
return log1pf(a); 
} 

static __inline float rsqrt(float a) 
{ 
return rsqrtf(a); 
} 

static __inline float acosh(float a) 
{ 
return acoshf(a); 
} 

static __inline float asinh(float a) 
{ 
return asinhf(a); 
} 

static __inline float atanh(float a) 
{ 
return atanhf(a); 
} 

static __inline float hypot(float a, float b) 
{ 
return hypotf(a, b); 
} 

static __inline float cbrt(float a) 
{ 
return cbrtf(a); 
} 

static __inline void sincos(float a, float *sptr, float *cptr) 
{ 
sincosf(a, sptr, cptr); 
} 

static __inline float erf(float a) 
{ 
return erff(a); 
} 

static __inline float erfinv(float a) 
{ 
return erfinvf(a); 
} 

static __inline float erfc(float a) 
{ 
return erfcf(a); 
} 

static __inline float erfcinv(float a) 
{ 
return erfcinvf(a); 
} 

static __inline float lgamma(float a) 
{ 
return lgammaf(a); 
} 

static __inline float tgamma(float a) 
{ 
return tgammaf(a); 
} 

static __inline float copysign(float a, float b) 
{ 
return copysignf(a, b); 
} 

static __inline double copysign(double a, float b) 
{ 
return copysign(a, (double)b); 
} 

static __inline float copysign(float a, double b) 
{ 
return copysignf(a, (float)b); 
} 

static __inline float nextafter(float a, float b) 
{ 
return nextafterf(a, b); 
} 

static __inline float remainder(float a, float b) 
{ 
return remainderf(a, b); 
} 

static __inline float remquo(float a, float b, int *quo) 
{ 
return remquof(a, b, quo); 
} 

static __inline float round(float a) 
{ 
return roundf(a); 
} 

static __inline long lround(float a) 
{ 
return lroundf(a); 
} 

static __inline __int64 llround(float a) 
{ 
return llroundf(a); 
} 

static __inline float trunc(float a) 
{ 
return truncf(a); 
} 

static __inline float rint(float a) 
{ 
return rintf(a); 
} 

static __inline long lrint(float a) 
{ 
return lrintf(a); 
} 

static __inline __int64 llrint(float a) 
{ 
return llrintf(a); 
} 

static __inline float nearbyint(float a) 
{ 
return nearbyintf(a); 
} 

static __inline float fdim(float a, float b) 
{ 
return fdimf(a, b); 
} 

static __inline float fma(float a, float b, float c) 
{ 
return fmaf(a, b, c); 
} 

static __inline unsigned min(unsigned a, unsigned b) 
{ 
return umin(a, b); 
} 

static __inline unsigned min(int a, unsigned b) 
{ 
return umin((unsigned)a, b); 
} 

static __inline unsigned min(unsigned a, int b) 
{ 
return umin(a, (unsigned)b); 
} 

static __inline __int64 min(__int64 a, __int64 b) 
{ 
return llmin(a, b); 
} 

static __inline unsigned __int64 min(unsigned __int64 a, unsigned __int64 b) 
{ 
return ullmin(a, b); 
} 

static __inline unsigned __int64 min(__int64 a, unsigned __int64 b) 
{ 
return ullmin((unsigned __int64)a, b); 
} 

static __inline unsigned __int64 min(unsigned __int64 a, __int64 b) 
{ 
return ullmin(a, (unsigned __int64)b); 
} 

static __inline float min(float a, float b) 
{ 
return fminf(a, b); 
} 

static __inline double min(double a, double b) 
{ 
return fmin(a, b); 
} 

static __inline double min(float a, double b) 
{ 
return fmin((double)a, b); 
} 

static __inline double min(double a, float b) 
{ 
return fmin(a, (double)b); 
} 

static __inline unsigned max(unsigned a, unsigned b) 
{ 
return umax(a, b); 
} 

static __inline unsigned max(int a, unsigned b) 
{ 
return umax((unsigned)a, b); 
} 

static __inline unsigned max(unsigned a, int b) 
{ 
return umax(a, (unsigned)b); 
} 

static __inline __int64 max(__int64 a, __int64 b) 
{ 
return llmax(a, b); 
} 

static __inline unsigned __int64 max(unsigned __int64 a, unsigned __int64 b) 
{ 
return ullmax(a, b); 
} 

static __inline unsigned __int64 max(__int64 a, unsigned __int64 b) 
{ 
return ullmax((unsigned __int64)a, b); 
} 

static __inline unsigned __int64 max(unsigned __int64 a, __int64 b) 
{ 
return ullmax(a, (unsigned __int64)b); 
} 

static __inline float max(float a, float b) 
{ 
return fmaxf(a, b); 
} 

static __inline double max(double a, double b) 
{ 
return fmax(a, b); 
} 

static __inline double max(float a, double b) 
{ 
return fmax((double)a, b); 
} 

static __inline double max(double a, float b) 
{ 
return fmax(a, (double)b); 
} 
#line 59 "c:\\cuda\\include\\cuda_texture_types.h"
template<class T, int dim = 1, cudaTextureReadMode mode = cudaReadModeElementType> 
struct texture : public textureReference { 

texture(int norm = 0, cudaTextureFilterMode 
fMode = cudaFilterModePoint, cudaTextureAddressMode 
aMode = cudaAddressModeClamp) 
{ 
(this->normalized) = norm; 
(this->filterMode) = fMode; 
((this->addressMode)[0]) = aMode; 
((this->addressMode)[1]) = aMode; 
((this->addressMode)[2]) = aMode; 
(this->channelDesc) = cudaCreateChannelDesc< T> (); 
} 

texture(int norm, cudaTextureFilterMode 
fMode, cudaTextureAddressMode 
aMode, cudaChannelFormatDesc 
desc) 
{ 
(this->normalized) = norm; 
(this->filterMode) = fMode; 
((this->addressMode)[0]) = aMode; 
((this->addressMode)[1]) = aMode; 
((this->addressMode)[2]) = aMode; 
(this->channelDesc) = desc; 
} 
}; 
#if 0
#endif
#if 0
#endif
#if 0
#endif
#if 0
#endif
#if 0
#endif
#if 0
#endif
#line 53 "c:\\cuda\\include\\device_launch_parameters.h"
#if 0
extern "C" const uint3 
#line 53
threadIdx; 
#endif
#line 55 "c:\\cuda\\include\\device_launch_parameters.h"
#if 0
extern "C" const uint3 
#line 55
blockIdx; 
#endif
#line 57 "c:\\cuda\\include\\device_launch_parameters.h"
#if 0
extern "C" const dim3 
#line 57
blockDim; 
#endif
#line 59 "c:\\cuda\\include\\device_launch_parameters.h"
#if 0
extern "C" const dim3 
#line 59
gridDim; 
#endif
#line 61 "c:\\cuda\\include\\device_launch_parameters.h"
#if 0
extern "C" const int 
#line 61
warpSize; 
#endif
#line 101 "C:\\CUDA\\bin64/../include\\cuda_runtime.h"
template<class T> __inline cudaError_t 
cudaSetupArgument(T 
arg, size_t 
offset) 

{ 
return cudaSetupArgument((const void *)(&arg), sizeof(T), offset); 
} 

template<class T> __inline cudaError_t 
cudaHostAlloc(T **
ptr, size_t 
size, unsigned 
flags) 

{ 
return cudaHostAlloc((void **)((void *)ptr), size, flags); 
} 

template<class T> __inline cudaError_t 
cudaHostGetDevicePointer(T **
pDevice, void *
pHost, unsigned 
flags) 

{ 
return cudaHostGetDevicePointer((void **)((void *)pDevice), pHost, flags); 
} 

template<class T> __inline cudaError_t 
cudaMalloc(T **
devPtr, size_t 
size) 

{ 
return cudaMalloc((void **)((void *)devPtr), size); 
} 

template<class T> __inline cudaError_t 
cudaMallocHost(T **
ptr, size_t 
size) 

{ 
return cudaMallocHost((void **)((void *)ptr), size); 
} 

template<class T> __inline cudaError_t 
cudaMallocPitch(T **
devPtr, size_t *
pitch, size_t 
width, size_t 
height) 

{ 
return cudaMallocPitch((void **)((void *)devPtr), pitch, width, height); 
} 
#line 172
static __inline cudaError_t cudaMemcpyToSymbol(char *
symbol, const void *
src, size_t 
count, size_t 
offset = (0), cudaMemcpyKind 
kind = cudaMemcpyHostToDevice) 

{ 
return cudaMemcpyToSymbol((const char *)symbol, src, count, offset, kind); 
} 

template<class T> __inline cudaError_t 
cudaMemcpyToSymbol(const T &
symbol, const void *
src, size_t 
count, size_t 
offset = (0), cudaMemcpyKind 
kind = cudaMemcpyHostToDevice) 

{ 
return cudaMemcpyToSymbol((const char *)(&symbol), src, count, offset, kind); 
} 

static __inline cudaError_t cudaMemcpyToSymbolAsync(char *
symbol, const void *
src, size_t 
count, size_t 
offset, cudaMemcpyKind 
kind, cudaStream_t 
stream) 

{ 
return cudaMemcpyToSymbolAsync((const char *)symbol, src, count, offset, kind, stream); 
} 

template<class T> __inline cudaError_t 
cudaMemcpyToSymbolAsync(const T &
symbol, const void *
src, size_t 
count, size_t 
offset, cudaMemcpyKind 
kind, cudaStream_t 
stream) 

{ 
return cudaMemcpyToSymbolAsync((const char *)(&symbol), src, count, offset, kind, stream); 
} 
#line 226
static __inline cudaError_t cudaMemcpyFromSymbol(void *
dst, char *
symbol, size_t 
count, size_t 
offset = (0), cudaMemcpyKind 
kind = cudaMemcpyDeviceToHost) 

{ 
return cudaMemcpyFromSymbol(dst, (const char *)symbol, count, offset, kind); 
} 

template<class T> __inline cudaError_t 
cudaMemcpyFromSymbol(void *
dst, const T &
symbol, size_t 
count, size_t 
offset = (0), cudaMemcpyKind 
kind = cudaMemcpyDeviceToHost) 

{ 
return cudaMemcpyFromSymbol(dst, (const char *)(&symbol), count, offset, kind); 
} 

static __inline cudaError_t cudaMemcpyFromSymbolAsync(void *
dst, char *
symbol, size_t 
count, size_t 
offset, cudaMemcpyKind 
kind, cudaStream_t 
stream) 

{ 
return cudaMemcpyFromSymbolAsync(dst, (const char *)symbol, count, offset, kind, stream); 
} 

template<class T> __inline cudaError_t 
cudaMemcpyFromSymbolAsync(void *
dst, const T &
symbol, size_t 
count, size_t 
offset, cudaMemcpyKind 
kind, cudaStream_t 
stream) 

{ 
return cudaMemcpyFromSymbolAsync(dst, (const char *)(&symbol), count, offset, kind, stream); 
} 

static __inline cudaError_t cudaGetSymbolAddress(void **
devPtr, char *
symbol) 

{ 
return cudaGetSymbolAddress(devPtr, (const char *)symbol); 
} 
#line 304
template<class T> __inline cudaError_t 
cudaGetSymbolAddress(void **
devPtr, const T &
symbol) 

{ 
return cudaGetSymbolAddress(devPtr, (const char *)(&symbol)); 
} 
#line 319
static __inline cudaError_t cudaGetSymbolSize(size_t *
size, char *
symbol) 

{ 
return cudaGetSymbolSize(size, (const char *)symbol); 
} 
#line 348
template<class T> __inline cudaError_t 
cudaGetSymbolSize(size_t *
size, const T &
symbol) 

{ 
return cudaGetSymbolSize(size, (const char *)(&symbol)); 
} 
#line 404
template<class T, int dim, cudaTextureReadMode readMode> __inline cudaError_t 
cudaBindTexture(size_t *
offset, const texture< T, dim, readMode>  &
tex, const void *
devPtr, const cudaChannelFormatDesc &
desc, size_t 
size = (4294967295U)) 

{ 
return cudaBindTexture(offset, &tex, devPtr, (&desc), size); 
} 
#line 448
template<class T, int dim, cudaTextureReadMode readMode> __inline cudaError_t 
cudaBindTexture(size_t *
offset, const texture< T, dim, readMode>  &
tex, const void *
devPtr, size_t 
size = (4294967295U)) 

{ 
return cudaBindTexture(offset, tex, devPtr, (tex.channelDesc), size); 
} 
#line 503
template<class T, int dim, cudaTextureReadMode readMode> __inline cudaError_t 
cudaBindTexture2D(size_t *
offset, const texture< T, dim, readMode>  &
tex, const void *
devPtr, const cudaChannelFormatDesc &
desc, size_t 
width, size_t 
height, size_t 
pitch) 

{ 
return cudaBindTexture2D(offset, &tex, devPtr, (&desc), width, height, pitch); 
} 
#line 545
template<class T, int dim, cudaTextureReadMode readMode> __inline cudaError_t 
cudaBindTextureToArray(const texture< T, dim, readMode>  &
tex, const cudaArray *
array, const cudaChannelFormatDesc &
desc) 

{ 
return cudaBindTextureToArray(&tex, array, (&desc)); 
} 
#line 582
template<class T, int dim, cudaTextureReadMode readMode> __inline cudaError_t 
cudaBindTextureToArray(const texture< T, dim, readMode>  &
tex, const cudaArray *
array) 

{ 
auto cudaChannelFormatDesc desc; 
auto cudaError_t err = cudaGetChannelDesc(&desc, array); 

return (err == (cudaSuccess)) ? (cudaBindTextureToArray(tex, array, desc)) : err; 
} 
#line 620
template<class T, int dim, cudaTextureReadMode readMode> __inline cudaError_t 
cudaUnbindTexture(const texture< T, dim, readMode>  &
tex) 

{ 
return cudaUnbindTexture(&tex); 
} 
#line 659
template<class T, int dim, cudaTextureReadMode readMode> __inline cudaError_t 
cudaGetTextureAlignmentOffset(size_t *
offset, const texture< T, dim, readMode>  &
tex) 

{ 
return cudaGetTextureAlignmentOffset(offset, &tex); 
} 
#line 708
template<class T> __inline cudaError_t 
cudaLaunch(T *
entry) 

{ 
return cudaLaunch((const char *)entry); 
} 
#line 744
template<class T> __inline cudaError_t 
cudaFuncGetAttributes(cudaFuncAttributes *
attr, T *
entry) 

{ 
return cudaFuncGetAttributes(attr, (const char *)entry); 
} 
#line 7 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\climits"
#pragma warning(disable: 4514)
#line 28 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
#pragma pack ( push, 8 )
#line 59 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { struct _iobuf { 
char *_ptr; 
int _cnt; 
char *_base; 
int _flag; 
int _file; 
int _charbuf; 
int _bufsiz; 
char *_tmpfname; 
}; }
extern "C" { typedef _iobuf FILE; }
#line 132 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { extern FILE *__cdecl __iob_func(); } 
#line 148 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { typedef __int64 fpos_t; }
#line 189 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { extern int __cdecl _filbuf(FILE *); } 
extern "C" { extern int __cdecl _flsbuf(int, FILE *); } 




extern "C" { extern FILE *__cdecl _fsopen(const char *, const char *, int); } 
#line 198 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { extern void __cdecl clearerr(FILE *); } 

extern "C" { extern errno_t __cdecl clearerr_s(FILE *); } 
#line 202 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { extern int __cdecl fclose(FILE *); } 
extern "C" { extern int __cdecl _fcloseall(); } 




extern "C" { extern FILE *__cdecl _fdopen(int, const char *); } 
#line 211 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { extern int __cdecl feof(FILE *); } 
extern "C" { extern int __cdecl ferror(FILE *); } 
extern "C" { extern int __cdecl fflush(FILE *); } 
extern "C" { extern int __cdecl fgetc(FILE *); } 
extern "C" { extern int __cdecl _fgetchar(); } 
extern "C" { extern int __cdecl fgetpos(FILE *, fpos_t *); } 
extern "C" { extern char *__cdecl fgets(char *, int, FILE *); } 




extern "C" { extern int __cdecl _fileno(FILE *); } 
#line 230 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { extern char *__cdecl _tempnam(const char *, const char *); } 
#line 236 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { extern int __cdecl _flushall(); } 
extern "C" { extern FILE *__cdecl fopen(const char *, const char *); } 

extern "C" { extern errno_t __cdecl fopen_s(FILE **, const char *, const char *); } 
#line 241 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { extern int __cdecl fprintf(FILE *, const char *, ...); } 

extern "C" { extern int __cdecl fprintf_s(FILE *, const char *, ...); } 
#line 245 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { extern int __cdecl fputc(int, FILE *); } 
extern "C" { extern int __cdecl _fputchar(int); } 
extern "C" { extern int __cdecl fputs(const char *, FILE *); } 
extern "C" { extern size_t __cdecl fread(void *, size_t, size_t, FILE *); } 

extern "C" { extern size_t __cdecl fread_s(void *, size_t, size_t, size_t, FILE *); } 
#line 252 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { extern FILE *__cdecl freopen(const char *, const char *, FILE *); } 

extern "C" { extern errno_t __cdecl freopen_s(FILE **, const char *, const char *, FILE *); } 
#line 256 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { extern int __cdecl fscanf(FILE *, const char *, ...); } 
extern "C" { extern int __cdecl _fscanf_l(FILE *, const char *, _locale_t, ...); } 
#pragma warning(push)
#pragma warning(disable:6530)

extern "C" { extern int __cdecl fscanf_s(FILE *, const char *, ...); } 
#line 263 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { extern int __cdecl _fscanf_s_l(FILE *, const char *, _locale_t, ...); } 
extern "C" { extern int __cdecl fsetpos(FILE *, const fpos_t *); } 
extern "C" { extern int __cdecl fseek(FILE *, long, int); } 
extern "C" { extern long __cdecl ftell(FILE *); } 

extern "C" { extern int __cdecl _fseeki64(FILE *, __int64, int); } 
extern "C" { extern __int64 __cdecl _ftelli64(FILE *); } 

extern "C" { extern size_t __cdecl fwrite(const void *, size_t, size_t, FILE *); } 
extern "C" { extern int __cdecl getc(FILE *); } 
extern "C" { extern int __cdecl getchar(); } 
extern "C" { extern int __cdecl _getmaxstdio(); } 

extern "C" { extern char *__cdecl gets_s(char *, rsize_t); } 
#line 278 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
template < size_t _Size > inline char * __cdecl gets_s ( char ( & _Buffer ) [ _Size ] ) { return gets_s ( _Buffer, _Size ); }
extern "C" { extern char *__cdecl gets(char *); } 
extern "C" { extern int __cdecl _getw(FILE *); } 




extern "C" { extern int __cdecl _pclose(FILE *); } 
extern "C" { extern FILE *__cdecl _popen(const char *, const char *); } 
extern "C" { extern int __cdecl printf(const char *, ...); } 

extern "C" { extern int __cdecl printf_s(const char *, ...); } 
#line 291 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { extern int __cdecl putc(int, FILE *); } 
extern "C" { extern int __cdecl putchar(int); } 
extern "C" { extern int __cdecl puts(const char *); } 
extern "C" { extern int __cdecl _putw(int, FILE *); } 


extern "C" { extern int __cdecl remove(const char *); } 
extern "C" { extern int __cdecl rename(const char *, const char *); } 
extern "C" { extern int __cdecl _unlink(const char *); } 

extern "C" { extern int __cdecl unlink(const char *); } 
#line 304 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { extern void __cdecl rewind(FILE *); } 
extern "C" { extern int __cdecl _rmtmp(); } 
extern "C" { extern int __cdecl scanf(const char *, ...); } 
extern "C" { extern int __cdecl _scanf_l(const char *, _locale_t, ...); } 

extern "C" { extern int __cdecl scanf_s(const char *, ...); } 
#line 311 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { extern int __cdecl _scanf_s_l(const char *, _locale_t, ...); } 
extern "C" { extern void __cdecl setbuf(FILE *, char *); } 
extern "C" { extern int __cdecl _setmaxstdio(int); } 
extern "C" { extern unsigned __cdecl _set_output_format(unsigned); } 
extern "C" { extern unsigned __cdecl _get_output_format(); } 
extern "C" { extern int __cdecl setvbuf(FILE *, char *, int, size_t); } 
extern "C" { extern int __cdecl _snprintf_s(char *, size_t, size_t, const char *, ...); } 
__pragma( warning(push)) __pragma( warning(disable: 4793)) template < size_t _Size > inline int __cdecl _snprintf_s ( char ( & _Dest ) [ _Size ], size_t _MaxCount, const char * _Format, ... ) { va_list _ArgList; ( _ArgList = ( va_list ) ( & reinterpret_cast < const char & > ( _Format ) ) + ( ( sizeof ( _Format ) + sizeof ( int ) - 1 ) & ~ ( sizeof ( int ) - 1 ) ) ); return _vsnprintf_s ( _Dest, _Size, _MaxCount, _Format, _ArgList ); }__pragma( warning(pop)) 

extern "C" { extern int __cdecl sprintf_s(char *, size_t, const char *, ...); } 
#line 322 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
__pragma( warning(push)) __pragma( warning(disable: 4793)) template < size_t _Size > inline int __cdecl sprintf_s ( char ( & _Dest ) [ _Size ], const char * _Format, ... ) { va_list _ArgList; ( _ArgList = ( va_list ) ( & reinterpret_cast < const char & > ( _Format ) ) + ( ( sizeof ( _Format ) + sizeof ( int ) - 1 ) & ~ ( sizeof ( int ) - 1 ) ) ); return vsprintf_s ( _Dest, _Size, _Format, _ArgList ); }__pragma( warning(pop)) 
extern "C" { extern int __cdecl _scprintf(const char *, ...); } 
extern "C" { extern int __cdecl sscanf(const char *, const char *, ...); } 
extern "C" { extern int __cdecl _sscanf_l(const char *, const char *, _locale_t, ...); } 

extern "C" { extern int __cdecl sscanf_s(const char *, const char *, ...); } 
#line 329 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { extern int __cdecl _sscanf_s_l(const char *, const char *, _locale_t, ...); } 
extern "C" { extern int __cdecl _snscanf(const char *, size_t, const char *, ...); } 
extern "C" { extern int __cdecl _snscanf_l(const char *, size_t, const char *, _locale_t, ...); } 
extern "C" { extern int __cdecl _snscanf_s(const char *, size_t, const char *, ...); } 
extern "C" { extern int __cdecl _snscanf_s_l(const char *, size_t, const char *, _locale_t, ...); } 
extern "C" { extern FILE *__cdecl tmpfile(); } 

extern "C" { extern errno_t __cdecl tmpfile_s(FILE **); } 
extern "C" { extern errno_t __cdecl tmpnam_s(char *, rsize_t); } 
#line 339 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
template < size_t _Size > inline errno_t __cdecl tmpnam_s ( char ( & _Buf ) [ _Size ] ) { return tmpnam_s ( _Buf, _Size ); }
extern "C" { extern char *__cdecl tmpnam(char *); } 
extern "C" { extern int __cdecl ungetc(int, FILE *); } 
extern "C" { extern int __cdecl vfprintf(FILE *, const char *, va_list); } 

extern "C" { extern int __cdecl vfprintf_s(FILE *, const char *, va_list); } 
#line 346 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { extern int __cdecl vprintf(const char *, va_list); } 

extern "C" { extern int __cdecl vprintf_s(const char *, va_list); } 
#line 350 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { extern int __cdecl vsnprintf(char *, size_t, const char *, va_list); } 

extern "C" { extern int __cdecl vsnprintf_s(char *, size_t, size_t, const char *, va_list); } 
#line 354 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { extern int __cdecl _vsnprintf_s(char *, size_t, size_t, const char *, va_list); } 
template < size_t _Size > inline int __cdecl _vsnprintf_s ( char ( & _Dest ) [ _Size ], size_t _MaxCount, const char * _Format, va_list _Args ) { return _vsnprintf_s ( _Dest, _Size, _MaxCount, _Format, _Args ); }
#pragma warning(push)
#pragma warning(disable:4793)
extern "C" { extern int __cdecl _snprintf(char *, size_t, const char *, ...); } extern "C" { extern int __cdecl _vsnprintf(char *, size_t, const char *, va_list); } 
#pragma warning(pop)

extern "C" { extern int __cdecl vsprintf_s(char *, size_t, const char *, va_list); } 
#line 363 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
template < size_t _Size > inline int __cdecl vsprintf_s ( char ( & _Dest ) [ _Size ], const char * _Format, va_list _Args ) { return vsprintf_s ( _Dest, _Size, _Format, _Args ); }
#pragma warning(push)
#pragma warning(disable:4793)
extern "C" { extern int __cdecl sprintf(char *, const char *, ...); } extern "C" { extern int __cdecl vsprintf(char *, const char *, va_list); } 
#pragma warning(pop)
extern "C" { extern int __cdecl _vscprintf(const char *, va_list); } 
extern "C" { extern int __cdecl _snprintf_c(char *, size_t, const char *, ...); } 
extern "C" { extern int __cdecl _vsnprintf_c(char *, size_t, const char *, va_list); } 

extern "C" { extern int __cdecl _fprintf_p(FILE *, const char *, ...); } 
extern "C" { extern int __cdecl _printf_p(const char *, ...); } 
extern "C" { extern int __cdecl _sprintf_p(char *, size_t, const char *, ...); } 
extern "C" { extern int __cdecl _vfprintf_p(FILE *, const char *, va_list); } 
extern "C" { extern int __cdecl _vprintf_p(const char *, va_list); } 
extern "C" { extern int __cdecl _vsprintf_p(char *, size_t, const char *, va_list); } 
extern "C" { extern int __cdecl _scprintf_p(const char *, ...); } 
extern "C" { extern int __cdecl _vscprintf_p(const char *, va_list); } 
extern "C" { extern int __cdecl _set_printf_count_output(int); } 
extern "C" { extern int __cdecl _get_printf_count_output(); } 

extern "C" { extern int __cdecl _printf_l(const char *, _locale_t, ...); } 
extern "C" { extern int __cdecl _printf_p_l(const char *, _locale_t, ...); } 
extern "C" { extern int __cdecl _printf_s_l(const char *, _locale_t, ...); } 
extern "C" { extern int __cdecl _vprintf_l(const char *, _locale_t, va_list); } 
extern "C" { extern int __cdecl _vprintf_p_l(const char *, _locale_t, va_list); } 
extern "C" { extern int __cdecl _vprintf_s_l(const char *, _locale_t, va_list); } 

extern "C" { extern int __cdecl _fprintf_l(FILE *, const char *, _locale_t, ...); } 
extern "C" { extern int __cdecl _fprintf_p_l(FILE *, const char *, _locale_t, ...); } 
extern "C" { extern int __cdecl _fprintf_s_l(FILE *, const char *, _locale_t, ...); } 
extern "C" { extern int __cdecl _vfprintf_l(FILE *, const char *, _locale_t, va_list); } 
extern "C" { extern int __cdecl _vfprintf_p_l(FILE *, const char *, _locale_t, va_list); } 
extern "C" { extern int __cdecl _vfprintf_s_l(FILE *, const char *, _locale_t, va_list); } 

extern "C" { extern int __cdecl _sprintf_l(char *, const char *, _locale_t, ...); } 
extern "C" { extern int __cdecl _sprintf_p_l(char *, size_t, const char *, _locale_t, ...); } 
extern "C" { extern int __cdecl _sprintf_s_l(char *, size_t, const char *, _locale_t, ...); } 
extern "C" { extern int __cdecl _vsprintf_l(char *, const char *, _locale_t, va_list); } 
extern "C" { extern int __cdecl _vsprintf_p_l(char *, size_t, const char *, _locale_t, va_list); } 
extern "C" { extern int __cdecl _vsprintf_s_l(char *, size_t, const char *, _locale_t, va_list); } 

extern "C" { extern int __cdecl _scprintf_l(const char *, _locale_t, ...); } 
extern "C" { extern int __cdecl _scprintf_p_l(const char *, _locale_t, ...); } 
extern "C" { extern int __cdecl _vscprintf_l(const char *, _locale_t, va_list); } 
extern "C" { extern int __cdecl _vscprintf_p_l(const char *, _locale_t, va_list); } 

extern "C" { extern int __cdecl _snprintf_l(char *, size_t, const char *, _locale_t, ...); } 
extern "C" { extern int __cdecl _snprintf_c_l(char *, size_t, const char *, _locale_t, ...); } 
extern "C" { extern int __cdecl _snprintf_s_l(char *, size_t, size_t, const char *, _locale_t, ...); } 
extern "C" { extern int __cdecl _vsnprintf_l(char *, size_t, const char *, _locale_t, va_list); } 
extern "C" { extern int __cdecl _vsnprintf_c_l(char *, size_t, const char *, _locale_t, va_list); } 
extern "C" { extern int __cdecl _vsnprintf_s_l(char *, size_t, size_t, const char *, _locale_t, va_list); } 
#line 427 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { extern FILE *__cdecl _wfsopen(const __wchar_t *, const __wchar_t *, int); } 
#line 430 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { extern wint_t __cdecl fgetwc(FILE *); } 
extern "C" { extern wint_t __cdecl _fgetwchar(); } 
extern "C" { extern wint_t __cdecl fputwc(__wchar_t, FILE *); } 
extern "C" { extern wint_t __cdecl _fputwchar(__wchar_t); } 
extern "C" { extern wint_t __cdecl getwc(FILE *); } 
extern "C" { inline wint_t __cdecl getwchar(); } 
extern "C" { extern wint_t __cdecl putwc(__wchar_t, FILE *); } 
extern "C" { inline wint_t __cdecl putwchar(__wchar_t); } 
extern "C" { extern wint_t __cdecl ungetwc(wint_t, FILE *); } 

extern "C" { extern __wchar_t *__cdecl fgetws(__wchar_t *, int, FILE *); } 
extern "C" { extern int __cdecl fputws(const __wchar_t *, FILE *); } 
extern "C" { extern __wchar_t *__cdecl _getws_s(__wchar_t *, size_t); } 
template < size_t _Size > inline wchar_t * __cdecl _getws_s ( wchar_t ( & _String ) [ _Size ] ) { return _getws_s ( _String, _Size ); }
extern "C" { extern __wchar_t *__cdecl _getws(__wchar_t *); } 
extern "C" { extern int __cdecl _putws(const __wchar_t *); } 

extern "C" { extern int __cdecl fwprintf(FILE *, const __wchar_t *, ...); } 

extern "C" { extern int __cdecl fwprintf_s(FILE *, const __wchar_t *, ...); } 
#line 451 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { extern int __cdecl wprintf(const __wchar_t *, ...); } 

extern "C" { extern int __cdecl wprintf_s(const __wchar_t *, ...); } 
#line 455 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { extern int __cdecl _scwprintf(const __wchar_t *, ...); } 
extern "C" { extern int __cdecl vfwprintf(FILE *, const __wchar_t *, va_list); } 

extern "C" { extern int __cdecl vfwprintf_s(FILE *, const __wchar_t *, va_list); } 
#line 460 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { extern int __cdecl vwprintf(const __wchar_t *, va_list); } 

extern "C" { extern int __cdecl vwprintf_s(const __wchar_t *, va_list); } 
#line 466 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { extern int __cdecl swprintf_s(__wchar_t *, size_t, const __wchar_t *, ...); } 
#line 468 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
__pragma( warning(push)) __pragma( warning(disable: 4793)) template < size_t _Size > inline int __cdecl swprintf_s ( wchar_t ( & _Dest ) [ _Size ], const wchar_t * _Format, ... ) { va_list _ArgList; ( _ArgList = ( va_list ) ( & reinterpret_cast < const char & > ( _Format ) ) + ( ( sizeof ( _Format ) + sizeof ( int ) - 1 ) & ~ ( sizeof ( int ) - 1 ) ) ); return vswprintf_s ( _Dest, _Size, _Format, _ArgList ); }__pragma( warning(pop)) 

extern "C" { extern int __cdecl vswprintf_s(__wchar_t *, size_t, const __wchar_t *, va_list); } 
#line 472 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
template < size_t _Size > inline int __cdecl vswprintf_s ( wchar_t ( & _Dest ) [ _Size ], const wchar_t * _Format, va_list _Args ) { return vswprintf_s ( _Dest, _Size, _Format, _Args ); }

extern "C" { extern int __cdecl _swprintf_c(__wchar_t *, size_t, const __wchar_t *, ...); } 
extern "C" { extern int __cdecl _vswprintf_c(__wchar_t *, size_t, const __wchar_t *, va_list); } 

extern "C" { extern int __cdecl _snwprintf_s(__wchar_t *, size_t, size_t, const __wchar_t *, ...); } 
__pragma( warning(push)) __pragma( warning(disable: 4793)) template < size_t _Size > inline int __cdecl _snwprintf_s ( wchar_t ( & _Dest ) [ _Size ], size_t _Count, const wchar_t * _Format, ... ) { va_list _ArgList; ( _ArgList = ( va_list ) ( & reinterpret_cast < const char & > ( _Format ) ) + ( ( sizeof ( _Format ) + sizeof ( int ) - 1 ) & ~ ( sizeof ( int ) - 1 ) ) ); return _vsnwprintf_s ( _Dest, _Size, _Count, _Format, _ArgList ); }__pragma( warning(pop)) 
extern "C" { extern int __cdecl _vsnwprintf_s(__wchar_t *, size_t, size_t, const __wchar_t *, va_list); } 
template < size_t _Size > inline int __cdecl _vsnwprintf_s ( wchar_t ( & _Dest ) [ _Size ], size_t _Count, const wchar_t * _Format, va_list _Args ) { return _vsnwprintf_s ( _Dest, _Size, _Count, _Format, _Args ); }
#pragma warning(push)
#pragma warning(disable:4793)
extern "C" { extern int __cdecl _snwprintf(__wchar_t *, size_t, const __wchar_t *, ...); } extern "C" { extern int __cdecl _vsnwprintf(__wchar_t *, size_t, const __wchar_t *, va_list); } 
#pragma warning(pop)

extern "C" { extern int __cdecl _fwprintf_p(FILE *, const __wchar_t *, ...); } 
extern "C" { extern int __cdecl _wprintf_p(const __wchar_t *, ...); } 
extern "C" { extern int __cdecl _vfwprintf_p(FILE *, const __wchar_t *, va_list); } 
extern "C" { extern int __cdecl _vwprintf_p(const __wchar_t *, va_list); } 
extern "C" { extern int __cdecl _swprintf_p(__wchar_t *, size_t, const __wchar_t *, ...); } 
extern "C" { extern int __cdecl _vswprintf_p(__wchar_t *, size_t, const __wchar_t *, va_list); } 
extern "C" { extern int __cdecl _scwprintf_p(const __wchar_t *, ...); } 
extern "C" { extern int __cdecl _vscwprintf_p(const __wchar_t *, va_list); } 

extern "C" { extern int __cdecl _wprintf_l(const __wchar_t *, _locale_t, ...); } 
extern "C" { extern int __cdecl _wprintf_p_l(const __wchar_t *, _locale_t, ...); } 
extern "C" { extern int __cdecl _wprintf_s_l(const __wchar_t *, _locale_t, ...); } 
extern "C" { extern int __cdecl _vwprintf_l(const __wchar_t *, _locale_t, va_list); } 
extern "C" { extern int __cdecl _vwprintf_p_l(const __wchar_t *, _locale_t, va_list); } 
extern "C" { extern int __cdecl _vwprintf_s_l(const __wchar_t *, _locale_t, va_list); } 

extern "C" { extern int __cdecl _fwprintf_l(FILE *, const __wchar_t *, _locale_t, ...); } 
extern "C" { extern int __cdecl _fwprintf_p_l(FILE *, const __wchar_t *, _locale_t, ...); } 
extern "C" { extern int __cdecl _fwprintf_s_l(FILE *, const __wchar_t *, _locale_t, ...); } 
extern "C" { extern int __cdecl _vfwprintf_l(FILE *, const __wchar_t *, _locale_t, va_list); } 
extern "C" { extern int __cdecl _vfwprintf_p_l(FILE *, const __wchar_t *, _locale_t, va_list); } 
extern "C" { extern int __cdecl _vfwprintf_s_l(FILE *, const __wchar_t *, _locale_t, va_list); } 

extern "C" { extern int __cdecl _swprintf_c_l(__wchar_t *, size_t, const __wchar_t *, _locale_t, ...); } 
extern "C" { extern int __cdecl _swprintf_p_l(__wchar_t *, size_t, const __wchar_t *, _locale_t, ...); } 
extern "C" { extern int __cdecl _swprintf_s_l(__wchar_t *, size_t, const __wchar_t *, _locale_t, ...); } 
extern "C" { extern int __cdecl _vswprintf_c_l(__wchar_t *, size_t, const __wchar_t *, _locale_t, va_list); } 
extern "C" { extern int __cdecl _vswprintf_p_l(__wchar_t *, size_t, const __wchar_t *, _locale_t, va_list); } 
extern "C" { extern int __cdecl _vswprintf_s_l(__wchar_t *, size_t, const __wchar_t *, _locale_t, va_list); } 

extern "C" { extern int __cdecl _scwprintf_l(const __wchar_t *, _locale_t, ...); } 
extern "C" { extern int __cdecl _scwprintf_p_l(const __wchar_t *, _locale_t, ...); } 
extern "C" { extern int __cdecl _vscwprintf_p_l(const __wchar_t *, _locale_t, va_list); } 

extern "C" { extern int __cdecl _snwprintf_l(__wchar_t *, size_t, const __wchar_t *, _locale_t, ...); } 
extern "C" { extern int __cdecl _snwprintf_s_l(__wchar_t *, size_t, size_t, const __wchar_t *, _locale_t, ...); } 
extern "C" { extern int __cdecl _vsnwprintf_l(__wchar_t *, size_t, const __wchar_t *, _locale_t, va_list); } 
extern "C" { extern int __cdecl _vsnwprintf_s_l(__wchar_t *, size_t, size_t, const __wchar_t *, _locale_t, va_list); } 
#line 537 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
#pragma warning(push)
#pragma warning(disable:4141 4996 4793)
extern "C" { extern __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) int __cdecl _swprintf(__wchar_t *, const __wchar_t *, ...); } extern "C" { extern __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) int __cdecl _vswprintf(__wchar_t *, const __wchar_t *, va_list); } 
extern "C" { extern __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) int __cdecl __swprintf_l(__wchar_t *, const __wchar_t *, _locale_t, ...); } extern "C" { extern __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) int __cdecl __vswprintf_l(__wchar_t *, const __wchar_t *, _locale_t, va_list); } 
#pragma warning(pop)
#line 34 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\swprintf.inl"
#pragma warning( push )
#pragma warning( disable : 4793 4412 )
extern "C" { static __inline int swprintf(__wchar_t *_String, size_t _Count, const __wchar_t *_Format, ...) 
{ 
auto va_list _Arglist; 
auto int _Ret; 
_Arglist = (va_list)(&(reinterpret_cast< const char &>(_Format))) + (((sizeof(_Format) + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))); 
_Ret = _vswprintf_c_l(_String, _Count, _Format, 0, _Arglist); 
_Arglist = ((va_list)0); 
return _Ret; 
} } 
#pragma warning( pop )

#pragma warning( push )
#pragma warning( disable : 4412 )
extern "C" { static __inline int __cdecl vswprintf(__wchar_t *_String, size_t _Count, const __wchar_t *_Format, va_list _Ap) 
{ 
return _vswprintf_c_l(_String, _Count, _Format, 0, _Ap); 
} } 
#pragma warning( pop )
#line 58 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\swprintf.inl"
#pragma warning( push )
#pragma warning( disable : 4793 4412 )
extern "C" { static __inline int _swprintf_l(__wchar_t *_String, size_t _Count, const __wchar_t *_Format, _locale_t _Plocinfo, ...) 
{ 
auto va_list _Arglist; 
auto int _Ret; 
_Arglist = (va_list)(&(reinterpret_cast< const char &>(_Plocinfo))) + (((sizeof(_Plocinfo) + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))); 
_Ret = _vswprintf_c_l(_String, _Count, _Format, _Plocinfo, _Arglist); 
_Arglist = ((va_list)0); 
return _Ret; 
} } 
#pragma warning( pop )

#pragma warning( push )
#pragma warning( disable : 4412 )
extern "C" { static __inline int __cdecl _vswprintf_l(__wchar_t *_String, size_t _Count, const __wchar_t *_Format, _locale_t _Plocinfo, va_list _Ap) 
{ 
return _vswprintf_c_l(_String, _Count, _Format, _Plocinfo, _Ap); 
} } 
#pragma warning( pop )


#pragma warning( push )
#pragma warning( disable : 4996 )

#pragma warning( push )
#pragma warning( disable : 4793 4141 )
__inline __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) int swprintf(__wchar_t *_String, const __wchar_t *_Format, ...) 
{ 
auto va_list _Arglist; 
_Arglist = (va_list)(&(reinterpret_cast< const char &>(_Format))) + (((sizeof(_Format) + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))); 
auto int _Ret = _vswprintf(_String, _Format, _Arglist); 
_Arglist = ((va_list)0); 
return _Ret; 
} 
#pragma warning( pop )

#pragma warning( push )
#pragma warning( disable : 4141 )
__inline __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) int __cdecl vswprintf(__wchar_t *_String, const __wchar_t *_Format, va_list _Ap) 
{ 
return _vswprintf(_String, _Format, _Ap); 
} 
#pragma warning( pop )

#pragma warning( push )
#pragma warning( disable : 4793 4141 )
__inline __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) int _swprintf_l(__wchar_t *_String, const __wchar_t *_Format, _locale_t _Plocinfo, ...) 
{ 
auto va_list _Arglist; 
_Arglist = (va_list)(&(reinterpret_cast< const char &>(_Plocinfo))) + (((sizeof(_Plocinfo) + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))); 
auto int _Ret = __vswprintf_l(_String, _Format, _Plocinfo, _Arglist); 
_Arglist = ((va_list)0); 
return _Ret; 
} 
#pragma warning( pop )

#pragma warning( push )
#pragma warning( disable : 4141 )
__inline __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) int __cdecl _vswprintf_l(__wchar_t *_String, const __wchar_t *_Format, _locale_t _Plocinfo, va_list _Ap) 
{ 
return __vswprintf_l(_String, _Format, _Plocinfo, _Ap); 
} 
#pragma warning( pop )

#pragma warning( pop )
#line 561 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { extern __wchar_t *__cdecl _wtempnam(const __wchar_t *, const __wchar_t *); } 
#line 567 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { extern int __cdecl _vscwprintf(const __wchar_t *, va_list); } 
extern "C" { extern int __cdecl _vscwprintf_l(const __wchar_t *, _locale_t, va_list); } 
extern "C" { extern int __cdecl fwscanf(FILE *, const __wchar_t *, ...); } 
extern "C" { extern int __cdecl _fwscanf_l(FILE *, const __wchar_t *, _locale_t, ...); } 

extern "C" { extern int __cdecl fwscanf_s(FILE *, const __wchar_t *, ...); } 
#line 574 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { extern int __cdecl _fwscanf_s_l(FILE *, const __wchar_t *, _locale_t, ...); } 
extern "C" { extern int __cdecl swscanf(const __wchar_t *, const __wchar_t *, ...); } 
extern "C" { extern int __cdecl _swscanf_l(const __wchar_t *, const __wchar_t *, _locale_t, ...); } 

extern "C" { extern int __cdecl swscanf_s(const __wchar_t *, const __wchar_t *, ...); } 
#line 580 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { extern int __cdecl _swscanf_s_l(const __wchar_t *, const __wchar_t *, _locale_t, ...); } 
extern "C" { extern int __cdecl _snwscanf(const __wchar_t *, size_t, const __wchar_t *, ...); } 
extern "C" { extern int __cdecl _snwscanf_l(const __wchar_t *, size_t, const __wchar_t *, _locale_t, ...); } 
extern "C" { extern int __cdecl _snwscanf_s(const __wchar_t *, size_t, const __wchar_t *, ...); } 
extern "C" { extern int __cdecl _snwscanf_s_l(const __wchar_t *, size_t, const __wchar_t *, _locale_t, ...); } 
extern "C" { extern int __cdecl wscanf(const __wchar_t *, ...); } 
extern "C" { extern int __cdecl _wscanf_l(const __wchar_t *, _locale_t, ...); } 

extern "C" { extern int __cdecl wscanf_s(const __wchar_t *, ...); } 
#line 590 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { extern int __cdecl _wscanf_s_l(const __wchar_t *, _locale_t, ...); } 
#pragma warning(pop)

extern "C" { extern FILE *__cdecl _wfdopen(int, const __wchar_t *); } 
extern "C" { extern FILE *__cdecl _wfopen(const __wchar_t *, const __wchar_t *); } 
extern "C" { extern errno_t __cdecl _wfopen_s(FILE **, const __wchar_t *, const __wchar_t *); } 
extern "C" { extern FILE *__cdecl _wfreopen(const __wchar_t *, const __wchar_t *, FILE *); } 
extern "C" { extern errno_t __cdecl _wfreopen_s(FILE **, const __wchar_t *, const __wchar_t *, FILE *); } 
#line 603
extern "C" { extern FILE *__cdecl _wpopen(const __wchar_t *, const __wchar_t *); } 
extern "C" { extern int __cdecl _wremove(const __wchar_t *); } 
extern "C" { extern errno_t __cdecl _wtmpnam_s(__wchar_t *, size_t); } 
template < size_t _Size > inline errno_t __cdecl _wtmpnam_s ( wchar_t ( & _Buffer ) [ _Size ] ) { return _wtmpnam_s ( _Buffer, _Size ); }
extern "C" { extern __wchar_t *__cdecl _wtmpnam(__wchar_t *); } 

extern "C" { extern wint_t __cdecl _fgetwc_nolock(FILE *); } 
extern "C" { extern wint_t __cdecl _fputwc_nolock(__wchar_t, FILE *); } 
extern "C" { extern wint_t __cdecl _ungetwc_nolock(wint_t, FILE *); } 
#line 619 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { inline wint_t __cdecl getwchar() 
{ return fgetwc(__iob_func() + 0); } } 
extern "C" { inline wint_t __cdecl putwchar(__wchar_t _C) 
{ return fputwc(_C, __iob_func() + 1); } } 
#line 669 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { extern void __cdecl _lock_file(FILE *); } 
extern "C" { extern void __cdecl _unlock_file(FILE *); } 
#line 677 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { extern int __cdecl _fclose_nolock(FILE *); } 
extern "C" { extern int __cdecl _fflush_nolock(FILE *); } 
extern "C" { extern size_t __cdecl _fread_nolock(void *, size_t, size_t, FILE *); } 
extern "C" { extern size_t __cdecl _fread_nolock_s(void *, size_t, size_t, size_t, FILE *); } 
extern "C" { extern int __cdecl _fseek_nolock(FILE *, long, int); } 
extern "C" { extern long __cdecl _ftell_nolock(FILE *); } 
extern "C" { extern int __cdecl _fseeki64_nolock(FILE *, __int64, int); } 
extern "C" { extern __int64 __cdecl _ftelli64_nolock(FILE *); } 
extern "C" { extern size_t __cdecl _fwrite_nolock(const void *, size_t, size_t, FILE *); } 
extern "C" { extern int __cdecl _ungetc_nolock(int, FILE *); } 
#line 713 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { extern char *__cdecl tempnam(const char *, const char *); } 
#line 719 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
extern "C" { extern int __cdecl fcloseall(); } 
extern "C" { extern FILE *__cdecl fdopen(int, const char *); } 
extern "C" { extern int __cdecl fgetchar(); } 
extern "C" { extern int __cdecl fileno(FILE *); } 
extern "C" { extern int __cdecl flushall(); } 
extern "C" { extern int __cdecl fputchar(int); } 
extern "C" { extern int __cdecl getw(FILE *); } 
extern "C" { extern int __cdecl putw(int, FILE *); } 
extern "C" { extern int __cdecl rmtmp(); } 
#line 736 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdio.h"
#pragma pack ( pop )
#line 34 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\cstdio"
typedef FILE _iobuf; 



namespace std { 
using ::_iobuf;

using ::fpos_t;using ::FILE;
using ::clearerr;using ::fclose;using ::feof;
using ::ferror;using ::fflush;using ::fgetc;
using ::fgetpos;using ::fgets;using ::fopen;
using ::fprintf;using ::fputc;using ::fputs;
using ::fread;using ::freopen;using ::fscanf;
using ::fseek;using ::fsetpos;using ::ftell;
using ::fwrite;using ::getc;using ::getchar;
using ::gets;using ::perror;
using ::putc;using ::putchar;
using ::printf;using ::puts;using ::remove;
using ::rename;using ::rewind;using ::scanf;
using ::setbuf;using ::setvbuf;using ::sprintf;
using ::sscanf;using ::tmpfile;using ::tmpnam;
using ::ungetc;using ::vfprintf;using ::vprintf;
using ::vsprintf;


}
#line 18 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\cstring"
namespace std { 
using ::memchr;using ::memcmp;

using ::memcpy;using ::memmove;using ::memset;
using ::strcat;using ::strchr;using ::strcmp;
using ::strcoll;using ::strcpy;using ::strcspn;
using ::strerror;using ::strlen;using ::strncat;
using ::strncmp;using ::strncpy;using ::strpbrk;
using ::strrchr;using ::strspn;using ::strstr;
using ::strtok;using ::strxfrm;

}
#line 17 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\cstddef"
namespace std { 
using ::ptrdiff_t;
}
#line 14 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xstddef"
#pragma warning(push,3)
#line 13
#pragma pack ( push, 8 )
#line 17 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xstddef"
namespace std { 
#line 92 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xstddef"
enum _Uninitialized { 

_Noinit}; 




struct _Bool_struct { 

int _Member; 
}; 

typedef int _Bool_struct::*_Bool_type; 
#line 106 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xstddef"
}

#pragma warning(pop)
#line 11 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\exception"
#pragma warning(push,3)
#line 109 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xstddef"
#pragma pack ( pop )
#line 10 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\exception"
#pragma pack ( push, 8 )
#line 23 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\exception"
namespace std { 
#line 36
}
#line 26 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\eh.h"
#pragma pack ( push, 8 )
#line 35 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\eh.h"
typedef void (__cdecl *terminate_function)(void); 
typedef void (__cdecl *terminate_handler)(void); 
typedef void (__cdecl *unexpected_function)(void); 
typedef void (__cdecl *unexpected_handler)(void); 
#line 53 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\eh.h"
struct _EXCEPTION_POINTERS; 

typedef void (__cdecl *_se_translator_function)(unsigned, _EXCEPTION_POINTERS *); 
#line 58 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\eh.h"
extern __declspec( noreturn ) void __cdecl terminate(); 
extern void __cdecl unexpected(); 

extern int __cdecl _is_exception_typeof(const class type_info &, _EXCEPTION_POINTERS *); 



extern terminate_function __cdecl set_terminate(terminate_function); 
extern "C" terminate_function __cdecl _get_terminate(); 
extern unexpected_function __cdecl set_unexpected(unexpected_function); 
extern "C" unexpected_function __cdecl _get_unexpected(); 
#line 73 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\eh.h"
extern _se_translator_function __cdecl _set_se_translator(_se_translator_function); 
#line 75 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\eh.h"
extern bool __cdecl __uncaught_exception(); 
#line 91
#pragma pack ( pop )
#line 29 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\malloc.h"
#pragma pack ( push, 8 )
#line 66 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\malloc.h"
extern "C" { typedef 
#line 62
struct _heapinfo { 
int *_pentry; 
size_t _size; 
int _useflag; 
} _HEAPINFO; }
#line 73 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\malloc.h"
extern "C" unsigned _amblksiz; 
#line 149 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\malloc.h"
extern "C" { extern int __cdecl _resetstkoflw(); } 



extern "C" { extern unsigned long __cdecl _set_malloc_crt_max_wait(unsigned long); } 
#line 164 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\malloc.h"
extern "C" { extern void *__cdecl _expand(void *, size_t); } 
extern "C" { extern size_t __cdecl _msize(void *); } 
#line 172 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\malloc.h"
extern "C" { extern void *__cdecl _alloca(size_t); } 
extern "C" { extern size_t __cdecl _get_sbh_threshold(); } 
extern "C" { extern int __cdecl _set_sbh_threshold(size_t); } 
extern "C" { extern errno_t __cdecl _set_amblksiz(size_t); } 
extern "C" { extern errno_t __cdecl _get_amblksiz(size_t *); } 
extern "C" { extern int __cdecl _heapadd(void *, size_t); } 
extern "C" { extern int __cdecl _heapchk(); } 
extern "C" { extern int __cdecl _heapmin(); } 
extern "C" { extern int __cdecl _heapset(unsigned); } 
extern "C" { extern int __cdecl _heapwalk(_HEAPINFO *); } 
extern "C" { extern size_t __cdecl _heapused(size_t *, size_t *); } 

extern "C" { extern intptr_t __cdecl _get_heap_handle(); } 
#line 198 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\malloc.h"
extern "C" { typedef char __static_assert_t[(sizeof(unsigned) <= (8))]; }


#pragma warning(push)
#pragma warning(disable:6540)
extern "C" { __inline void *_MarkAllocaS(void *_Ptr, unsigned _Marker) 
{ 
if (_Ptr) 
{ 
(*((unsigned *)_Ptr)) = _Marker; 
_Ptr = (char *)_Ptr + 8; 
}  
return _Ptr; 
} } 
#pragma warning(pop)
#line 238 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\malloc.h"
extern "C" { __inline void __cdecl _freea(void *_Memory) 
{ 
auto unsigned _Marker; 
if (_Memory) 
{ 
_Memory = (char *)_Memory - 8; 
_Marker = *((unsigned *)_Memory); 
if (_Marker == (56797)) 
{ 
free(_Memory); 
}  
#line 255 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\malloc.h"
}  
} } 
#line 292 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\malloc.h"
#pragma pack ( pop )
#line 82 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\exception"
typedef const char *__exString; 
extern "C" size_t __cdecl strlen(const char *); 

extern "C" errno_t __cdecl strcpy_s(char *, size_t, const char *); 
#line 92 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\exception"
namespace std { 

class exception { 
#line 195
public: exception(); 
exception(const char *const &); 
exception(const char *const &, int); 
exception(const exception &); 
exception &operator=(const exception &); 
virtual ~exception(); 
virtual const char *what() const; 
#line 204 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\exception"
private: const char *_m_what; 
int _m_doFree; 
}; 

using ::set_terminate;using ::terminate_handler;using ::terminate;using ::set_unexpected;using ::unexpected_handler;using ::unexpected;

typedef void (__cdecl *_Prhand)(const exception &); 
#line 216 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\exception"
extern bool __cdecl uncaught_exception(); 
#line 219 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\exception"
}
#line 333 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\exception"
namespace std { 
#line 339 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\exception"
class bad_exception : public exception { 


public: bad_exception(const char *_Message = ("bad exception")) throw() : exception(_Message) 


{ 
} 

virtual ~bad_exception() throw() 
{ 
} 
#line 360 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\exception"
}; 


static const char *_bad_alloc_Message = ("bad allocation"); 


class bad_alloc : public exception { 


public: bad_alloc(const char *_Message) throw() : exception(_Message) 

{ 
} 

bad_alloc() throw() : exception(_bad_alloc_Message, 1) 

{ 
} 

virtual ~bad_alloc() throw() 
{ 
} 
#line 391 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\exception"
}; 


}
#line 413 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\exception"
#pragma warning(pop)
#line 10 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\new"
#pragma warning(push,3)
#line 414 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\exception"
#pragma pack ( pop )
#line 9 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\new"
#pragma pack ( push, 8 )
#line 25 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\new"
namespace std { 
#line 33
typedef void (__cdecl *new_handler)(void); 
#line 38 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\new"
struct nothrow_t { 

}; 

extern const nothrow_t nothrow; 
#line 46 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\new"
extern new_handler __cdecl set_new_handler(new_handler) throw(); 

}


extern void __cdecl operator delete(void *) throw(); 
#pragma warning (suppress: 4985)
extern void *__cdecl operator new(size_t); 



inline void *__cdecl operator new(size_t, void *_Where) throw() 
{ 
return _Where; 
} 

inline void __cdecl operator delete(void *, void *) throw() 
{ 
} 
#line 69 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\new"
inline void *__cdecl operator new[](size_t, void *_Where) throw() 
{ 
return _Where; 
} 

inline void __cdecl operator delete[](void *, void *) throw() 
{ 
} 
#line 79 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\new"
extern void __cdecl operator delete[](void *) throw(); 

extern void *__cdecl operator new[](size_t); 




extern void *__cdecl operator new(size_t, const std::nothrow_t &) throw(); 


extern void *__cdecl operator new[](size_t, const std::nothrow_t &) throw(); 


extern void __cdecl operator delete(void *, const std::nothrow_t &) throw(); 


extern void __cdecl operator delete[](void *, const std::nothrow_t &) throw(); 
#line 101 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\new"
using std::new_handler;
#line 106 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\new"
#pragma warning(pop)
#pragma pack ( pop )
#line 29 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\wchar.h"
#pragma pack ( push, 8 )
#line 88 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\wchar.h"
extern "C" { typedef unsigned long _fsize_t; }
#line 94 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\wchar.h"
extern "C" { struct _wfinddata32_t { 
unsigned attrib; 
__time32_t time_create; 
__time32_t time_access; 
__time32_t time_write; 
_fsize_t size; 
__wchar_t name[260]; 
}; }

extern "C" { struct _wfinddata32i64_t { 
unsigned attrib; 
__time32_t time_create; 
__time32_t time_access; 
__time32_t time_write; 
__int64 size; 
__wchar_t name[260]; 
}; }

extern "C" { struct _wfinddata64i32_t { 
unsigned attrib; 
__time64_t time_create; 
__time64_t time_access; 
__time64_t time_write; 
_fsize_t size; 
__wchar_t name[260]; 
}; }

extern "C" { struct _wfinddata64_t { 
unsigned attrib; 
__time64_t time_create; 
__time64_t time_access; 
__time64_t time_write; 
__int64 size; 
__wchar_t name[260]; 
}; }
#line 187 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\wchar.h"
extern "C" { extern const unsigned short *__cdecl __pctype_func(); } 

extern "C" const unsigned short *_pctype; 
#line 200 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\wchar.h"
extern "C" const unsigned short _wctype[]; 
#line 203 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\wchar.h"
extern "C" { extern const wctype_t *__cdecl __pwctype_func(); } 

extern "C" const wctype_t *_pwctype; 
#line 235 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\wchar.h"
extern "C" { extern int __cdecl iswalpha(wint_t); } 
extern "C" { extern int __cdecl _iswalpha_l(wint_t, _locale_t); } 
extern "C" { extern int __cdecl iswupper(wint_t); } 
extern "C" { extern int __cdecl _iswupper_l(wint_t, _locale_t); } 
extern "C" { extern int __cdecl iswlower(wint_t); } 
extern "C" { extern int __cdecl _iswlower_l(wint_t, _locale_t); } 
extern "C" { extern int __cdecl iswdigit(wint_t); } 
extern "C" { extern int __cdecl _iswdigit_l(wint_t, _locale_t); } 
extern "C" { extern int __cdecl iswxdigit(wint_t); } 
extern "C" { extern int __cdecl _iswxdigit_l(wint_t, _locale_t); } 
extern "C" { extern int __cdecl iswspace(wint_t); } 
extern "C" { extern int __cdecl _iswspace_l(wint_t, _locale_t); } 
extern "C" { extern int __cdecl iswpunct(wint_t); } 
extern "C" { extern int __cdecl _iswpunct_l(wint_t, _locale_t); } 
extern "C" { extern int __cdecl iswalnum(wint_t); } 
extern "C" { extern int __cdecl _iswalnum_l(wint_t, _locale_t); } 
extern "C" { extern int __cdecl iswprint(wint_t); } 
extern "C" { extern int __cdecl _iswprint_l(wint_t, _locale_t); } 
extern "C" { extern int __cdecl iswgraph(wint_t); } 
extern "C" { extern int __cdecl _iswgraph_l(wint_t, _locale_t); } 
extern "C" { extern int __cdecl iswcntrl(wint_t); } 
extern "C" { extern int __cdecl _iswcntrl_l(wint_t, _locale_t); } 
extern "C" { extern int __cdecl iswascii(wint_t); } 
extern "C" { extern int __cdecl isleadbyte(int); } 
extern "C" { extern int __cdecl _isleadbyte_l(int, _locale_t); } 

extern "C" { extern wint_t __cdecl towupper(wint_t); } 
extern "C" { extern wint_t __cdecl _towupper_l(wint_t, _locale_t); } 
extern "C" { extern wint_t __cdecl towlower(wint_t); } 
extern "C" { extern wint_t __cdecl _towlower_l(wint_t, _locale_t); } 
extern "C" { extern int __cdecl iswctype(wint_t, wctype_t); } 
extern "C" { extern int __cdecl _iswctype_l(wint_t, wctype_t, _locale_t); } 

extern "C" { extern int __cdecl __iswcsymf(wint_t); } 
extern "C" { extern int __cdecl _iswcsymf_l(wint_t, _locale_t); } 
extern "C" { extern int __cdecl __iswcsym(wint_t); } 
extern "C" { extern int __cdecl _iswcsym_l(wint_t, _locale_t); } 

extern "C" { extern __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using iswctype instead. See online help for details.")) int __cdecl is_wctype(wint_t, wctype_t); } 
#line 291 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\wchar.h"
extern "C" { extern __wchar_t *__cdecl _wgetcwd(__wchar_t *, int); } 
extern "C" { extern __wchar_t *__cdecl _wgetdcwd(int, __wchar_t *, int); } 
extern "C" { extern __wchar_t *__cdecl _wgetdcwd_nolock(int, __wchar_t *, int); } 
#line 301 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\wchar.h"
extern "C" { extern int __cdecl _wchdir(const __wchar_t *); } 
extern "C" { extern int __cdecl _wmkdir(const __wchar_t *); } 
extern "C" { extern int __cdecl _wrmdir(const __wchar_t *); } 
#line 310 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\wchar.h"
extern "C" { extern int __cdecl _waccess(const __wchar_t *, int); } 
extern "C" { extern errno_t __cdecl _waccess_s(const __wchar_t *, int); } 
extern "C" { extern int __cdecl _wchmod(const __wchar_t *, int); } 
extern "C" { extern int __cdecl _wcreat(const __wchar_t *, int); } 
extern "C" { extern intptr_t __cdecl _wfindfirst32(const __wchar_t *, _wfinddata32_t *); } 
extern "C" { extern int __cdecl _wfindnext32(intptr_t, _wfinddata32_t *); } 
extern "C" { extern int __cdecl _wunlink(const __wchar_t *); } 
extern "C" { extern int __cdecl _wrename(const __wchar_t *, const __wchar_t *); } 
extern "C" { extern errno_t __cdecl _wmktemp_s(__wchar_t *, size_t); } 
template < size_t _Size > inline errno_t __cdecl _wmktemp_s ( wchar_t ( & _TemplateName ) [ _Size ] ) { return _wmktemp_s ( _TemplateName, _Size ); }
extern "C" { extern __wchar_t *__cdecl _wmktemp(__wchar_t *); } 

extern "C" { extern intptr_t __cdecl _wfindfirst32i64(const __wchar_t *, _wfinddata32i64_t *); } 
extern "C" { extern intptr_t __cdecl _wfindfirst64i32(const __wchar_t *, _wfinddata64i32_t *); } 
extern "C" { extern intptr_t __cdecl _wfindfirst64(const __wchar_t *, _wfinddata64_t *); } 
extern "C" { extern int __cdecl _wfindnext32i64(intptr_t, _wfinddata32i64_t *); } 
extern "C" { extern int __cdecl _wfindnext64i32(intptr_t, _wfinddata64i32_t *); } 
extern "C" { extern int __cdecl _wfindnext64(intptr_t, _wfinddata64_t *); } 

extern "C" { extern errno_t __cdecl _wsopen_s(int *, const __wchar_t *, int, int, int); } 
#line 339 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\wchar.h"
extern int __cdecl _wopen(const __wchar_t *, int, int = 0); 
extern int __cdecl _wsopen(const __wchar_t *, int, int, int = 0); 
#line 351 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\wchar.h"
extern "C" { extern __wchar_t *__cdecl _wsetlocale(int, const __wchar_t *); } 
#line 360 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\wchar.h"
extern "C" { extern intptr_t __cdecl _wexecl(const __wchar_t *, const __wchar_t *, ...); } 
extern "C" { extern intptr_t __cdecl _wexecle(const __wchar_t *, const __wchar_t *, ...); } 
extern "C" { extern intptr_t __cdecl _wexeclp(const __wchar_t *, const __wchar_t *, ...); } 
extern "C" { extern intptr_t __cdecl _wexeclpe(const __wchar_t *, const __wchar_t *, ...); } 
extern "C" { extern intptr_t __cdecl _wexecv(const __wchar_t *, const __wchar_t *const *); } 
extern "C" { extern intptr_t __cdecl _wexecve(const __wchar_t *, const __wchar_t *const *, const __wchar_t *const *); } 

extern "C" { extern intptr_t __cdecl _wexecvp(const __wchar_t *, const __wchar_t *const *); } 
extern "C" { extern intptr_t __cdecl _wexecvpe(const __wchar_t *, const __wchar_t *const *, const __wchar_t *const *); } 

extern "C" { extern intptr_t __cdecl _wspawnl(int, const __wchar_t *, const __wchar_t *, ...); } 
extern "C" { extern intptr_t __cdecl _wspawnle(int, const __wchar_t *, const __wchar_t *, ...); } 
extern "C" { extern intptr_t __cdecl _wspawnlp(int, const __wchar_t *, const __wchar_t *, ...); } 
extern "C" { extern intptr_t __cdecl _wspawnlpe(int, const __wchar_t *, const __wchar_t *, ...); } 
extern "C" { extern intptr_t __cdecl _wspawnv(int, const __wchar_t *, const __wchar_t *const *); } 
extern "C" { extern intptr_t __cdecl _wspawnve(int, const __wchar_t *, const __wchar_t *const *, const __wchar_t *const *); } 

extern "C" { extern intptr_t __cdecl _wspawnvp(int, const __wchar_t *, const __wchar_t *const *); } 
extern "C" { extern intptr_t __cdecl _wspawnvpe(int, const __wchar_t *, const __wchar_t *const *, const __wchar_t *const *); } 
#line 458 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\wchar.h"
extern "C" { typedef unsigned short _ino_t; }


extern "C" { typedef unsigned short ino_t; }
#line 467 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\wchar.h"
extern "C" { typedef unsigned _dev_t; }


extern "C" { typedef unsigned dev_t; }
#line 476 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\wchar.h"
extern "C" { typedef long _off_t; }


extern "C" { typedef long off_t; }
#line 486 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\wchar.h"
extern "C" { struct _stat32 { 
_dev_t st_dev; 
_ino_t st_ino; 
unsigned short st_mode; 
short st_nlink; 
short st_uid; 
short st_gid; 
_dev_t st_rdev; 
_off_t st_size; 
__time32_t st_atime; 
__time32_t st_mtime; 
__time32_t st_ctime; 
}; }



extern "C" { struct stat { 
_dev_t st_dev; 
_ino_t st_ino; 
unsigned short st_mode; 
short st_nlink; 
short st_uid; 
short st_gid; 
_dev_t st_rdev; 
_off_t st_size; 
time_t st_atime; 
time_t st_mtime; 
time_t st_ctime; 
}; }
#line 518 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\wchar.h"
extern "C" { struct _stat32i64 { 
_dev_t st_dev; 
_ino_t st_ino; 
unsigned short st_mode; 
short st_nlink; 
short st_uid; 
short st_gid; 
_dev_t st_rdev; 
__int64 st_size; 
__time32_t st_atime; 
__time32_t st_mtime; 
__time32_t st_ctime; 
}; }

extern "C" { struct _stat64i32 { 
_dev_t st_dev; 
_ino_t st_ino; 
unsigned short st_mode; 
short st_nlink; 
short st_uid; 
short st_gid; 
_dev_t st_rdev; 
_off_t st_size; 
__time64_t st_atime; 
__time64_t st_mtime; 
__time64_t st_ctime; 
}; }

extern "C" { struct _stat64 { 
_dev_t st_dev; 
_ino_t st_ino; 
unsigned short st_mode; 
short st_nlink; 
short st_uid; 
short st_gid; 
_dev_t st_rdev; 
__int64 st_size; 
__time64_t st_atime; 
__time64_t st_mtime; 
__time64_t st_ctime; 
}; }
#line 592 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\wchar.h"
extern "C" { extern int __cdecl _wstat32(const __wchar_t *, _stat32 *); } 

extern "C" { extern int __cdecl _wstat32i64(const __wchar_t *, _stat32i64 *); } 
extern "C" { extern int __cdecl _wstat64i32(const __wchar_t *, _stat64i32 *); } 
extern "C" { extern int __cdecl _wstat64(const __wchar_t *, _stat64 *); } 
#line 612 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\wchar.h"
extern "C" { extern errno_t __cdecl _cgetws_s(__wchar_t *, size_t, size_t *); } 
template < size_t _Size > inline errno_t __cdecl _cgetws_s ( wchar_t ( & _Buffer ) [ _Size ], size_t * _Size ) { return _cgetws_s ( _Buffer, _Size, _Size ); }
extern "C" { extern __wchar_t *__cdecl _cgetws(__wchar_t *); } 
extern "C" { extern wint_t __cdecl _getwch(); } 
extern "C" { extern wint_t __cdecl _getwche(); } 
extern "C" { extern wint_t __cdecl _putwch(__wchar_t); } 
extern "C" { extern wint_t __cdecl _ungetwch(wint_t); } 
extern "C" { extern int __cdecl _cputws(const __wchar_t *); } 
extern "C" { extern int __cdecl _cwprintf(const __wchar_t *, ...); } 
extern "C" { extern int __cdecl _cwprintf_s(const __wchar_t *, ...); } 
extern "C" { extern int __cdecl _cwscanf(const __wchar_t *, ...); } 
extern "C" { extern int __cdecl _cwscanf_l(const __wchar_t *, _locale_t, ...); } 
extern "C" { extern int __cdecl _cwscanf_s(const __wchar_t *, ...); } 
extern "C" { extern int __cdecl _cwscanf_s_l(const __wchar_t *, _locale_t, ...); } 
extern "C" { extern int __cdecl _vcwprintf(const __wchar_t *, va_list); } 
extern "C" { extern int __cdecl _vcwprintf_s(const __wchar_t *, va_list); } 

extern "C" { extern int __cdecl _cwprintf_p(const __wchar_t *, ...); } 
extern "C" { extern int __cdecl _vcwprintf_p(const __wchar_t *, va_list); } 

extern "C" { extern int __cdecl _cwprintf_l(const __wchar_t *, _locale_t, ...); } 
extern "C" { extern int __cdecl _cwprintf_s_l(const __wchar_t *, _locale_t, ...); } 
extern "C" { extern int __cdecl _vcwprintf_l(const __wchar_t *, _locale_t, va_list); } 
extern "C" { extern int __cdecl _vcwprintf_s_l(const __wchar_t *, _locale_t, va_list); } 
extern "C" { extern int __cdecl _cwprintf_p_l(const __wchar_t *, _locale_t, ...); } 
extern "C" { extern int __cdecl _vcwprintf_p_l(const __wchar_t *, _locale_t, va_list); } 

extern "C" { extern wint_t __cdecl _putwch_nolock(__wchar_t); } 
extern "C" { extern wint_t __cdecl _getwch_nolock(); } 
extern "C" { extern wint_t __cdecl _getwche_nolock(); } 
extern "C" { extern wint_t __cdecl _ungetwch_nolock(wint_t); } 
#line 1171 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\wchar.h"
extern "C" { typedef int mbstate_t; }
extern "C" { typedef __wchar_t _Wint_t; }

extern "C" { extern wint_t __cdecl btowc(int); } 
extern "C" { extern size_t __cdecl mbrlen(const char *, size_t, mbstate_t *); } 

extern "C" { extern size_t __cdecl mbrtowc(__wchar_t *, const char *, size_t, mbstate_t *); } 

extern "C" { extern errno_t __cdecl mbsrtowcs_s(size_t *, __wchar_t *, size_t, const char **, size_t, mbstate_t *); } 
template < size_t _Size > inline errno_t __cdecl mbsrtowcs_s ( size_t * _Retval, wchar_t ( & _Dest ) [ _Size ], const char * * _PSource, size_t _Count, mbstate_t * _State ) { return mbsrtowcs_s ( _Retval, _Dest, _Size, _PSource, _Count, _State ); }
extern "C" { extern size_t __cdecl mbsrtowcs(__wchar_t *, const char **, size_t, mbstate_t *); } 

extern "C" { extern errno_t __cdecl wcrtomb_s(size_t *, char *, size_t, __wchar_t, mbstate_t *); } 

template < size_t _Size > inline errno_t __cdecl wcrtomb_s ( size_t * _Retval, char ( & _Dest ) [ _Size ], wchar_t _Source, mbstate_t * _State ) { return wcrtomb_s ( _Retval, _Dest, _Size, _Source, _State ); }
extern "C" { extern size_t __cdecl wcrtomb(char *, __wchar_t, mbstate_t *); } 
extern "C" { extern errno_t __cdecl wcsrtombs_s(size_t *, char *, size_t, const __wchar_t **, size_t, mbstate_t *); } 

template < size_t _Size > inline errno_t __cdecl wcsrtombs_s ( size_t * _Retval, char ( & _Dest ) [ _Size ], const wchar_t * * _PSrc, size_t _Count, mbstate_t * _State ) { return wcsrtombs_s ( _Retval, _Dest, _Size, _PSrc, _Count, _State ); }
extern "C" { extern size_t __cdecl wcsrtombs(char *, const __wchar_t **, size_t, mbstate_t *); } 
extern "C" { extern int __cdecl wctob(wint_t); } 
#line 1199 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\wchar.h"
extern "C" { extern void *__cdecl memmove(void *, const void *, size_t); } 
#line 1201 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\wchar.h"
extern "C" { extern void *__cdecl memcpy(void *, const void *, size_t); } 

extern "C" { extern errno_t __cdecl memcpy_s(void *, rsize_t, const void *, rsize_t); } 
extern "C" { extern errno_t __cdecl memmove_s(void *, rsize_t, const void *, rsize_t); } 
#line 1206 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\wchar.h"
extern "C" { __inline int __cdecl fwide(FILE *_F, int _M) 
{ (void)_F; return _M; } } 
extern "C" { __inline int __cdecl mbsinit(const mbstate_t *_P) 
{ return (_P == (0)) || ((*_P) == 0); } } 
extern "C" { __inline const __wchar_t *__cdecl wmemchr(const __wchar_t *_S, __wchar_t _C, size_t _N) 
{ for (; (0) < _N; (++_S), (--_N)) { 
if ((*_S) == _C) { 
return _S; }  }  
return 0; } } 
extern "C" { __inline int __cdecl wmemcmp(const __wchar_t *_S1, const __wchar_t *_S2, size_t _N) 
{ for (; (0) < _N; ((++_S1), (++_S2)), (--_N)) { 
if ((*_S1) != (*_S2)) { 
return ((*_S1) < (*_S2)) ? (-1) : (+1); }  }  
return 0; } } 

extern "C" { __inline __wchar_t *__cdecl wmemcpy(__wchar_t *_S1, const __wchar_t *_S2, size_t _N) 
{ 
#pragma warning( push )
#pragma warning( disable : 4996 6386 )
return (__wchar_t *)memcpy(_S1, _S2, _N * sizeof(__wchar_t)); 
#pragma warning( pop )
} } 


extern "C" { __inline errno_t __cdecl wmemcpy_s(__wchar_t *_S1, rsize_t _N1, const __wchar_t *_S2, rsize_t _N) 
{ 
#pragma warning( push )
#pragma warning( disable : 6386 )
return memcpy_s(_S1, _N1 * sizeof(__wchar_t), _S2, _N * sizeof(__wchar_t)); 
} } 
#pragma warning( pop )
#line 1239 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\wchar.h"
extern "C" { __inline __wchar_t *__cdecl wmemmove(__wchar_t *_S1, const __wchar_t *_S2, size_t _N) 
{ 
#pragma warning( push )
#pragma warning( disable : 4996 6386 )
#pragma warning( disable : 6387)

return (__wchar_t *)memmove(_S1, _S2, _N * sizeof(__wchar_t)); 
#pragma warning( pop )
} } 


extern "C" { __inline errno_t __cdecl wmemmove_s(__wchar_t *_S1, rsize_t _N1, const __wchar_t *_S2, rsize_t _N) 
{ 
#pragma warning( push )
#pragma warning( disable : 6386 )
return memmove_s(_S1, _N1 * sizeof(__wchar_t), _S2, _N * sizeof(__wchar_t)); 
#pragma warning( pop )
} } 
#line 1259 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\wchar.h"
extern "C" { __inline __wchar_t *__cdecl wmemset(__wchar_t *_S, __wchar_t _C, size_t _N) 
{ 
auto __wchar_t *_Su = _S; 
for (; (0) < _N; (++_Su), (--_N)) 
{ 
(*_Su) = _C; 
}  
return _S; 
} } 



inline __wchar_t *__cdecl wmemchr(__wchar_t *_S, __wchar_t _C, size_t _N) 
{ return (__wchar_t *)wmemchr((const __wchar_t *)_S, _C, _N); } 
#line 1282 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\wchar.h"
#pragma pack ( pop )
#line 16 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\cwchar"
typedef mbstate_t _Mbstatet; 




typedef mbstate_t _Mbstatet; 


namespace std { 
using ::_Mbstatet;

using ::mbstate_t;
using ::tm;using ::wint_t;


using ::btowc;using ::fgetwc;using ::fgetws;using ::fputwc;
using ::fputws;using ::fwide;using ::fwprintf;
using ::fwscanf;using ::getwc;using ::getwchar;
using ::mbrlen;using ::mbrtowc;using ::mbsrtowcs;
using ::mbsinit;using ::putwc;using ::putwchar;
using ::swprintf;using ::swscanf;using ::ungetwc;
using ::vfwprintf;using ::vswprintf;using ::vwprintf;
using ::wcrtomb;using ::wprintf;using ::wscanf;
using ::wcsrtombs;using ::wcstol;using ::wcscat;
using ::wcschr;using ::wcscmp;using ::wcscoll;
using ::wcscpy;using ::wcscspn;using ::wcslen;
using ::wcsncat;using ::wcsncmp;using ::wcsncpy;
using ::wcspbrk;using ::wcsrchr;using ::wcsspn;

using ::wcstod;using ::wcstoul;using ::wcsstr;

using ::wcstok;using ::wcsxfrm;using ::wctob;
using ::wmemchr;using ::wmemcmp;using ::wmemcpy;
using ::wmemmove;using ::wmemset;using ::wcsftime;


}
#line 23 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\crtdbg.h"
#pragma pack ( push, 8 )
#line 46 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\crtdbg.h"
extern "C" { typedef void *_HFILE; }
#line 65
extern "C" { typedef int (__cdecl *_CRT_REPORT_HOOK)(int, char *, int *); }
extern "C" { typedef int (__cdecl *_CRT_REPORT_HOOKW)(int, __wchar_t *, int *); }
#line 97 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\crtdbg.h"
extern "C" { typedef int (__cdecl *_CRT_ALLOC_HOOK)(int, void *, size_t, int, long, const unsigned char *, int); }
#line 158 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\crtdbg.h"
extern "C" { typedef void (__cdecl *_CRT_DUMP_CLIENT)(void *, size_t); }
#line 166 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\crtdbg.h"
struct _CrtMemBlockHeader; 
#line 174
extern "C" { typedef 
#line 167
struct _CrtMemState { 

_CrtMemBlockHeader *pBlockHeader; 
size_t lCounts[5]; 
size_t lSizes[5]; 
size_t lHighWaterCount; 
size_t lTotalCount; 
} _CrtMemState; }
#line 1122 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\crtdbg.h"
#pragma warning(suppress: 4985)
extern void *__cdecl operator new[](size_t); 


extern void *__cdecl operator new(size_t, int, const char *, int); 
#line 1133
#pragma warning(suppress: 4985)
extern void *__cdecl operator new[](size_t, int, const char *, int); 
#line 1144
extern void __cdecl operator delete[](void *); 

inline void __cdecl operator delete(void *_P, int, const char *, int) 
{ ::operator delete(_P); } 
inline void __cdecl operator delete[](void *_P, int, const char *, int) 
{ ::operator delete[](_P); } 
#line 14 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\iosfwd"
#pragma warning(push,3)
#line 1219 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\crtdbg.h"
#pragma pack ( pop )
#line 13 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\iosfwd"
#pragma pack ( push, 8 )
#line 16 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\iosfwd"
namespace std { 
#line 24
typedef long streamoff; 
typedef int streamsize; 
#line 41 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\iosfwd"
extern fpos_t _Fpz; 
extern const streamoff _BADOFF; 
#line 46 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\iosfwd"
template < class _Statetype >
 class fpos
 {
 typedef fpos < _Statetype > _Myt;

public :
  fpos ( streamoff _Off = 0 )
  : _Myoff ( _Off ), _Fpos ( 0 ), _Mystate ( _Stz )
  {
  }

  fpos ( _Statetype _State, fpos_t _Fileposition )
  : _Myoff ( 0 ), _Fpos ( _Fileposition ), _Mystate ( _State )
  {
  }

 _Statetype state ( ) const
  {
  return ( _Mystate );
  }

 void state ( _Statetype _State )
  {
  _Mystate = _State;
  }

 fpos_t seekpos ( ) const
  {
  return ( _Fpos );
  }

  operator streamoff ( ) const
  {
  return ( ( streamoff ) ( _Myoff + ( ( long ) ( _Fpos ) ) ) );
  }

 streamoff operator - ( const _Myt & _Right ) const
  {
  return ( ( streamoff ) * this - ( streamoff ) _Right );
  }

 _Myt & operator += ( streamoff _Off )
  {
  _Myoff += _Off;
  return ( * this );
  }

 _Myt & operator -= ( streamoff _Off )
  {
  _Myoff -= _Off;
  return ( * this );
  }

 _Myt operator + ( streamoff _Off ) const
  {
  _Myt _Tmp = * this;
  return ( _Tmp += _Off );
  }

 _Myt operator - ( streamoff _Off ) const
  {
  _Myt _Tmp = * this;
  return ( _Tmp -= _Off );
  }

 bool operator == ( const _Myt & _Right ) const
  {
  return ( ( streamoff ) * this == ( streamoff ) _Right );
  }

 bool operator != ( const _Myt & _Right ) const
  {
  return ( ! ( * this == _Right ) );
  }

private :
  static const _Statetype _Stz;
 streamoff _Myoff;
 fpos_t _Fpos;
 _Statetype _Mystate;
 };


template<class _Statetype> const _Statetype 
fpos< _Statetype> ::_Stz = (_Statetype()); 
#line 137
typedef fpos< int>  streampos; 
typedef streampos wstreampos; 


struct _Unsecure_char_traits_tag { 

}; 
struct _Secure_char_traits_tag { 

}; 
#line 153
struct _Char_traits_base { 

typedef _Unsecure_char_traits_tag _Secure_char_traits; 
}; 




template < class _Elem >
 struct char_traits :
  public _Char_traits_base
 {
 typedef _Elem char_type;
 typedef long int_type;
 typedef streampos pos_type;
 typedef streamoff off_type;
 typedef _Mbstatet state_type;

 static void __cdecl assign ( _Elem & _Left, const _Elem & _Right )
  {
  _Left = _Right;
  }

 static bool __cdecl eq ( const _Elem & _Left, const _Elem & _Right )
  {
  return ( _Left == _Right );
  }

 static bool __cdecl lt ( const _Elem & _Left, const _Elem & _Right )
  {
  return ( _Left < _Right );
  }

 static int __cdecl compare ( const _Elem * _First1,
     const _Elem * _First2, size_t _Count )
  {


  for (; 0 < _Count; -- _Count, ++ _First1, ++ _First2 )
   if ( ! eq ( * _First1, * _First2 ) )
    return ( lt ( * _First1, * _First2 ) ? - 1 : + 1 );
  return ( 0 );
  }

 static size_t __cdecl length ( const _Elem * _First )
  {

  size_t _Count;
  for ( _Count = 0; ! eq ( * _First, _Elem ( ) ); ++ _First )
   ++ _Count;
  return ( _Count );
  }

 __declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
 static _Elem * __cdecl copy ( _Elem * _First1,
     const _Elem * _First2, size_t _Count )
  {

  return _Copy_s ( _First1, _Count, _First2, _Count );
  }

 static _Elem * __cdecl _Copy_s ( _Elem * _First1, size_t _Dest_size,
     const _Elem * _First2, size_t _Count )
  {


  { if ( ! ( _Dest_size >= _Count ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); return ( 0 ); } };
  _Elem * _Next = _First1;
  for (; 0 < _Count; -- _Count, ++ _Next, ++ _First2 )
   assign ( * _Next, * _First2 );
  return ( _First1 );
  }

 static const _Elem * __cdecl find ( const _Elem * _First,
  size_t _Count, const _Elem & _Ch )
  {

  for (; 0 < _Count; -- _Count, ++ _First )
   if ( eq ( * _First, _Ch ) )
    return ( _First );
  return ( 0 );
  }

 __declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
 static _Elem * __cdecl move ( _Elem * _First1,
     const _Elem * _First2, size_t _Count )
  {

  return _Move_s ( _First1, _Count, _First2, _Count );
  }

 static _Elem * __cdecl _Move_s ( _Elem * _First1, size_t _Dest_size,
     const _Elem * _First2, size_t _Count )
  {


  { if ( ! ( _Dest_size >= _Count ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); return ( 0 ); } };
  _Elem * _Next = _First1;
  if ( _First2 < _Next && _Next < _First2 + _Count )
   for ( _Next += _Count, _First2 += _Count; 0 < _Count; -- _Count )
    assign ( * -- _Next, * -- _First2 );
  else
   for (; 0 < _Count; -- _Count, ++ _Next, ++ _First2 )
    assign ( * _Next, * _First2 );
  return ( _First1 );
  }

 static _Elem * __cdecl assign ( _Elem * _First,
  size_t _Count, _Elem _Ch )
  {

  _Elem * _Next = _First;
  for (; 0 < _Count; -- _Count, ++ _Next )
   assign ( * _Next, _Ch );
  return ( _First );
  }

 static _Elem __cdecl to_char_type ( const int_type & _Meta )
  {
  return ( ( _Elem ) _Meta );
  }

 static int_type __cdecl to_int_type ( const _Elem & _Ch )
  {
  return ( ( int_type ) _Ch );
  }

 static bool __cdecl eq_int_type ( const int_type & _Left,
  const int_type & _Right )
  {
  return ( _Left == _Right );
  }

 static int_type __cdecl eof ( )
  {
  return ( ( int_type ) ( - 1 ) );
  }

 static int_type __cdecl not_eof ( const int_type & _Meta )
  {
  return ( _Meta != eof ( ) ? ( int_type ) _Meta : ( int_type ) ! eof ( ) );
  }
 };


template<> struct char_traits< __wchar_t>  : public _Char_traits_base { 


typedef __wchar_t _Elem; 
typedef _Elem char_type; 
typedef wint_t int_type; 
typedef streampos pos_type; 
typedef streamoff off_type; 
typedef _Mbstatet state_type; 

static void __cdecl assign(_Elem &_Left, const _Elem &_Right) 
{ 
_Left = _Right; 
} 

static bool __cdecl eq(const _Elem &_Left, const _Elem &_Right) 
{ 
return (_Left) == (_Right); 
} 

static bool __cdecl lt(const _Elem &_Left, const _Elem &_Right) 
{ 
return (_Left) < (_Right); 
} 

static int __cdecl compare(const _Elem *_First1, const _Elem *_First2, size_t 
_Count) 
{ 


return ::wmemcmp(_First1, _First2, _Count); 
} 

static size_t __cdecl length(const _Elem *_First) 
{ 

return ::wcslen(_First); 
} 


static __declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'")) _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2, size_t 
_Count) 
{ 

return _Copy_s(_First1, _Count, _First2, _Count); 
} 

static _Elem *__cdecl _Copy_s(_Elem *_First1, size_t _Size_in_words, const _Elem *_First2, size_t 
_Count) 
{ 


::wmemcpy_s(_First1, _Size_in_words, _First2, _Count); 
return _First1; 
} 

static const _Elem *__cdecl find(const _Elem *_First, size_t _Count, const _Elem &
_Ch) 
{ 

return (const _Elem *)::wmemchr(_First, _Ch, _Count); 
} 


static __declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'")) _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2, size_t 
_Count) 
{ 

return _Move_s(_First1, _Count, _First2, _Count); 
} 

static _Elem *__cdecl _Move_s(_Elem *_First1, size_t _Size_in_words, const _Elem *_First2, size_t 
_Count) 
{ 


::wmemmove_s(_First1, _Size_in_words, _First2, _Count); 
return _First1; 
} 

static _Elem *__cdecl assign(_Elem *_First, size_t _Count, _Elem _Ch) 
{ 

return (_Elem *)::wmemset(_First, _Ch, _Count); 
} 

static _Elem __cdecl to_char_type(const int_type &_Meta) 
{ 
return _Meta; 
} 

static int_type __cdecl to_int_type(const _Elem &_Ch) 
{ 
return _Ch; 
} 

static bool __cdecl eq_int_type(const int_type &_Left, const int_type &
_Right) 
{ 
return (_Left) == (_Right); 
} 

static int_type __cdecl eof() 
{ 
return (wint_t)65535; 
} 

static int_type __cdecl not_eof(const int_type &_Meta) 
{ 
return ((_Meta) != (eof())) ? (_Meta) : (!(eof())); 
} 
}; 



template<> struct char_traits< char>  : public _Char_traits_base { 


typedef char _Elem; 
typedef _Elem char_type; 
typedef int int_type; 
typedef streampos pos_type; 
typedef streamoff off_type; 
typedef _Mbstatet state_type; 

static void __cdecl assign(_Elem &_Left, const _Elem &_Right) 
{ 
_Left = _Right; 
} 

static bool __cdecl eq(const _Elem &_Left, const _Elem &_Right) 
{ 
return (_Left) == (_Right); 
} 

static bool __cdecl lt(const _Elem &_Left, const _Elem &_Right) 
{ 
return (_Left) < (_Right); 
} 

static int __cdecl compare(const _Elem *_First1, const _Elem *_First2, size_t 
_Count) 
{ 


return ::memcmp(_First1, _First2, _Count); 
} 

static size_t __cdecl length(const _Elem *_First) 
{ 

return ::strlen(_First); 
} 


static __declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'")) _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2, size_t 
_Count) 
{ 

return _Copy_s(_First1, _Count, _First2, _Count); 
} 

static _Elem *__cdecl _Copy_s(_Elem *_First1, size_t _Size_in_bytes, const _Elem *_First2, size_t 
_Count) 
{ 


::memcpy_s(_First1, _Size_in_bytes, _First2, _Count); 
return _First1; 
} 

static const _Elem *__cdecl find(const _Elem *_First, size_t _Count, const _Elem &
_Ch) 
{ 

return (const _Elem *)::memchr(_First, _Ch, _Count); 
} 


static __declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'")) _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2, size_t 
_Count) 
{ 

return _Move_s(_First1, _Count, _First2, _Count); 
} 

static _Elem *__cdecl _Move_s(_Elem *_First1, size_t _Size_in_bytes, const _Elem *_First2, size_t 
_Count) 
{ 


::memmove_s(_First1, _Size_in_bytes, _First2, _Count); 
return _First1; 
} 

static _Elem *__cdecl assign(_Elem *_First, size_t _Count, _Elem _Ch) 
{ 

return (_Elem *)::memset(_First, _Ch, _Count); 
} 

static _Elem __cdecl to_char_type(const int_type &_Meta) 
{ 
return (_Elem)(_Meta); 
} 

static int_type __cdecl to_int_type(const _Elem &_Ch) 
{ 
return (unsigned char)(_Ch); 
} 

static bool __cdecl eq_int_type(const int_type &_Left, const int_type &
_Right) 
{ 
return (_Left) == (_Right); 
} 

static int_type __cdecl eof() 
{ 
return -1; 
} 

static int_type __cdecl not_eof(const int_type &_Meta) 
{ 
return ((_Meta) != eof()) ? (_Meta) : (!(eof())); 
} 
}; 


template<class _Traits> 
class _Inherits_from_char_traits_base { 

typedef char _True; 
class _False { char _Dummy[2]; }; 
static _True _Inherits(_Char_traits_base); 
static _False _Inherits(...); 
static _Traits _Make_traits(); 


public: enum __cuda__Exists { _Exists = (sizeof((_Inherits(_Make_traits()))) == sizeof(_True))}; 
}; 

template<class _Traits, bool _Inherits_from_char_traits_base> 
class _Char_traits_category_helper { 


public: typedef _Unsecure_char_traits_tag _Secure_char_traits; 
}; 



template<class _Elem> 
class _Char_traits_category_helper< char_traits< _Elem> , true>  { 


public: typedef _Secure_char_traits_tag _Secure_char_traits; 
}; 

template<class _Traits> 
class _Char_traits_category_helper< _Traits, true>  { 


public: typedef typename _Traits::_Secure_char_traits _Secure_char_traits; 
}; 

template<class _Traits> 
class _Char_traits_category { 


public: typedef typename _Char_traits_category_helper< _Traits, _Inherits_from_char_traits_base< _Traits> ::_Exists> ::_Secure_char_traits _Secure_char_traits; 
}; 



template < class _Traits >
 inline
 typename _Char_traits_category < _Traits > :: _Secure_char_traits _Char_traits_cat ( )
 {
  typename _Char_traits_category < _Traits > :: _Secure_char_traits _Secure;
  return ( _Secure );
 }

namespace _Traits_helper { 



template < class _Traits >
 inline
 typename _Traits :: char_type * copy_s ( typename _Traits :: char_type * _First1, size_t _Size,
     const typename _Traits :: char_type * _First2, size_t _Count )
 {
  return copy_s < _Traits > ( _First1, _Size, _First2, _Count, _Char_traits_cat < _Traits > ( ) );
 }

template < class _Traits >
 inline
 typename _Traits :: char_type * copy_s ( typename _Traits :: char_type * _First1, size_t _Size,
     const typename _Traits :: char_type * _First2, size_t _Count, _Secure_char_traits_tag )
 {
  return _Traits :: _Copy_s ( _First1, _Size, _First2, _Count );
 }


template < class _Traits >
 inline
 __declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
 typename _Traits :: char_type * copy_s ( typename _Traits :: char_type * _First1, size_t _Size,
     const typename _Traits :: char_type * _First2, size_t _Count, _Unsecure_char_traits_tag )
 {
  return _Traits :: copy ( _First1, _First2, _Count );
 }


template < class _Traits >
 inline
 typename _Traits :: char_type * move_s ( typename _Traits :: char_type * _First1, size_t _Size,
     const typename _Traits :: char_type * _First2, size_t _Count )
 {
  return move_s < _Traits > ( _First1, _Size, _First2, _Count, _Char_traits_cat < _Traits > ( ) );
 }

template < class _Traits >
 inline
 typename _Traits :: char_type * move_s ( typename _Traits :: char_type * _First1, size_t _Size,
     const typename _Traits :: char_type * _First2, size_t _Count, _Secure_char_traits_tag )
 {
  return _Traits :: _Move_s ( _First1, _Size, _First2, _Count );
 }


template < class _Traits >
 inline
 __declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
 typename _Traits :: char_type * move_s ( typename _Traits :: char_type * _First1, size_t _Size,
     const typename _Traits :: char_type * _First2, size_t _Count, _Unsecure_char_traits_tag )
 {
  return _Traits :: move ( _First1, _First2, _Count );
 }

}


template < class _Ty >
 class allocator;
class ios_base; 
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_ios;
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class istreambuf_iterator;
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class ostreambuf_iterator;
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_streambuf;
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_istream;
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_ostream;
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_iostream;
template<class _Elem, class 
_Traits, class 
_Alloc> class basic_stringbuf; 

template<class _Elem, class 
_Traits, class 
_Alloc> class basic_istringstream; 

template<class _Elem, class 
_Traits, class 
_Alloc> class basic_ostringstream; 

template<class _Elem, class 
_Traits, class 
_Alloc> class basic_stringstream; 

template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_filebuf;
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_ifstream;
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_ofstream;
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_fstream;
#line 705 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\iosfwd"
typedef basic_ios< char, char_traits< char> >  ios; 
typedef basic_streambuf< char, char_traits< char> >  streambuf; 
typedef basic_istream< char, char_traits< char> >  istream; 
typedef basic_ostream< char, char_traits< char> >  ostream; 
typedef basic_iostream< char, char_traits< char> >  iostream; 

typedef basic_stringbuf< char, char_traits< char> , allocator< char> >  stringbuf; 

typedef basic_istringstream< char, char_traits< char> , allocator< char> >  istringstream; 

typedef basic_ostringstream< char, char_traits< char> , allocator< char> >  ostringstream; 

typedef basic_stringstream< char, char_traits< char> , allocator< char> >  stringstream; 
typedef basic_filebuf< char, char_traits< char> >  filebuf; 
typedef basic_ifstream< char, char_traits< char> >  ifstream; 
typedef basic_ofstream< char, char_traits< char> >  ofstream; 
typedef basic_fstream< char, char_traits< char> >  fstream; 


typedef basic_ios< __wchar_t, char_traits< __wchar_t> >  wios; 

typedef basic_streambuf< __wchar_t, char_traits< __wchar_t> >  wstreambuf; 
typedef basic_istream< __wchar_t, char_traits< __wchar_t> >  wistream; 
typedef basic_ostream< __wchar_t, char_traits< __wchar_t> >  wostream; 
typedef basic_iostream< __wchar_t, char_traits< __wchar_t> >  wiostream; 

typedef basic_stringbuf< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> >  wstringbuf; 

typedef basic_istringstream< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> >  wistringstream; 

typedef basic_ostringstream< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> >  wostringstream; 

typedef basic_stringstream< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> >  wstringstream; 
typedef basic_filebuf< __wchar_t, char_traits< __wchar_t> >  wfilebuf; 
typedef basic_ifstream< __wchar_t, char_traits< __wchar_t> >  wifstream; 
typedef basic_ofstream< __wchar_t, char_traits< __wchar_t> >  wofstream; 
typedef basic_fstream< __wchar_t, char_traits< __wchar_t> >  wfstream; 
#line 758 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\iosfwd"
}


#pragma warning(pop)
#line 10 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\utility"
#pragma warning(push,3)
#line 762 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\iosfwd"
#pragma pack ( pop )
#line 9 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\utility"
#pragma pack ( push, 8 )
#line 13 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\utility"
namespace std { 

template < class _Ty > inline
 void swap ( _Ty & _Left, _Ty & _Right )
 {
 if ( & _Left != & _Right )
  {
  _Ty _Tmp = _Left;

  _Left = _Right;
  _Right = _Tmp;
  }
 }


template < class _Ty > inline
 void _Swap_adl ( _Ty & _Left, _Ty & _Right )
 {
 swap ( _Left, _Right );
 }


template < class _Ty1,
 class _Ty2 >
 struct pair
 {
 typedef pair < _Ty1, _Ty2 > _Myt;
 typedef _Ty1 first_type;
 typedef _Ty2 second_type;

 pair ( )
  : first ( _Ty1 ( ) ), second ( _Ty2 ( ) )
  {
  }

 pair ( const _Ty1 & _Val1, const _Ty2 & _Val2 )
  : first ( _Val1 ), second ( _Val2 )
  {
  }

 template < class _Other1,
  class _Other2 >
  pair ( const pair < _Other1, _Other2 > & _Right )
  : first ( _Right . first ), second ( _Right . second )
  {
  }

 void swap ( _Myt & _Right )
  {
  if ( this != & _Right )
   {
   :: std :: _Swap_adl ( first, _Right . first );
   :: std :: _Swap_adl ( second, _Right . second );
   }
  }

 _Ty1 first;
 _Ty2 second;
 };


template < class _Ty1,
 class _Ty2 > inline
 void swap ( pair < _Ty1, _Ty2 > & _Left, pair < _Ty1, _Ty2 > & _Right )
 {
 _Left . swap ( _Right );
 }

template < class _Ty1,
 class _Ty2 > inline
 bool operator == ( const pair < _Ty1, _Ty2 > & _Left,
  const pair < _Ty1, _Ty2 > & _Right )
 {
 return ( _Left . first == _Right . first && _Left . second == _Right . second );
 }

template < class _Ty1,
 class _Ty2 > inline
 bool operator != ( const pair < _Ty1, _Ty2 > & _Left,
  const pair < _Ty1, _Ty2 > & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }

template < class _Ty1,
 class _Ty2 > inline
 bool operator < ( const pair < _Ty1, _Ty2 > & _Left,
  const pair < _Ty1, _Ty2 > & _Right )
 {
 return ( _Left . first < _Right . first ||
  ! ( _Right . first < _Left . first ) && _Left . second < _Right . second );
 }

template < class _Ty1,
 class _Ty2 > inline
 bool operator > ( const pair < _Ty1, _Ty2 > & _Left,
  const pair < _Ty1, _Ty2 > & _Right )
 {
 return ( _Right < _Left );
 }

template < class _Ty1,
 class _Ty2 > inline
 bool operator <= ( const pair < _Ty1, _Ty2 > & _Left,
  const pair < _Ty1, _Ty2 > & _Right )
 {
 return ( ! ( _Right < _Left ) );
 }

template < class _Ty1,
 class _Ty2 > inline
 bool operator >= ( const pair < _Ty1, _Ty2 > & _Left,
  const pair < _Ty1, _Ty2 > & _Right )
 {
 return ( ! ( _Left < _Right ) );
 }

template < class _Ty1,
 class _Ty2 > inline
 pair < _Ty1, _Ty2 > make_pair ( _Ty1 _Val1, _Ty2 _Val2 )
 {
 return ( pair < _Ty1, _Ty2 > ( _Val1, _Val2 ) );
 }


namespace rel_ops { 

template < class _Ty > inline
 bool operator != ( const _Ty & _Left, const _Ty & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }

template < class _Ty > inline
 bool operator > ( const _Ty & _Left, const _Ty & _Right )
 {
 return ( _Right < _Left );
 }

template < class _Ty > inline
 bool operator <= ( const _Ty & _Left, const _Ty & _Right )
 {
 return ( ! ( _Right < _Left ) );
 }

template < class _Ty > inline
 bool operator >= ( const _Ty & _Left, const _Ty & _Right )
 {
 return ( ! ( _Left < _Right ) );
 }
}
}


namespace std { 
namespace tr1 { 


template<class _Tuple> struct tuple_size; 

template<int _Idx, class 
_Tuple> struct tuple_element; 

template<class _Ty1, class 
_Ty2> 
struct tuple_size< pair< _Ty1, _Ty2> >  { 

static const int value = 2; 
}; 

template<int _Idx, class 
_Ty> struct _Pair_data; 

template < class _Ty1,
 class _Ty2 >
 struct _Pair_data < 0, std :: pair < _Ty1, _Ty2 > >
 {
 typedef _Ty1 & _Type;
 typedef const _Ty1 & _CType;

 static _Type _Val ( std :: pair < _Ty1, _Ty2 > & _Pr )
  {
  return ( _Pr . first );
  }

 static _CType _Val ( const std :: pair < _Ty1, _Ty2 > & _Pr )
  {
  return ( _Pr . first );
  }
 };

template < class _Ty1,
 class _Ty2 >
 struct _Pair_data < 1, std :: pair < _Ty1, _Ty2 > >
 {
 typedef _Ty2 & _Type;
 typedef const _Ty2 & _CType;

 static _Type _Val ( std :: pair < _Ty1, _Ty2 > & _Pr )
  {
  return ( _Pr . second );
  }

 static _CType _Val ( const std :: pair < _Ty1, _Ty2 > & _Pr )
  {
  return ( _Pr . second );
  }
 };

template<class _Ty1, class 
_Ty2> 
struct tuple_element< 0, pair< _Ty1, _Ty2> >  { 

typedef _Ty1 type; 
}; 

template<class _Ty1, class 
_Ty2> 
struct tuple_element< 1, pair< _Ty1, _Ty2> >  { 

typedef _Ty2 type; 
}; 

template < int _Idx,
 class _Ty1,
 class _Ty2 >
 typename _Pair_data < _Idx, std :: pair < _Ty1, _Ty2 > > :: _Type
  get ( std :: pair < _Ty1, _Ty2 > & _Pr )
 {
 return ( _Pair_data < _Idx, std :: pair < _Ty1, _Ty2 > > :: _Val ( _Pr ) );
 }

template < int _Idx,
 class _Ty1,
 class _Ty2 >
 typename _Pair_data < _Idx, std :: pair < _Ty1, _Ty2 > > :: _CType
  get ( const std :: pair < _Ty1, _Ty2 > & _Pr )
 {
 return ( _Pair_data < _Idx, std :: pair < _Ty1, _Ty2 > > :: _Val ( _Pr ) );
 }

}
}
#line 259 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\utility"
#pragma warning(pop)
#line 12 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
#pragma warning(push,3)
#line 260 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\utility"
#pragma pack ( pop )
#line 11 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
#pragma pack ( push, 8 )
#line 15 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
namespace std { 


struct _Unchecked_iterator_tag { 

}; 
struct _Range_checked_iterator_tag { 

}; 


struct _Unchanged_checked_iterator_base_type_tag { 

}; 

struct _Different_checked_iterator_base_type_tag { 

}; 


struct _Undefined_inner_type_tag { 

}; 


struct _Undefined_move_tag { 

}; 

struct _Swap_move_tag { 

}; 


class _Iterator_base_universal { 


public: typedef _Unchecked_iterator_tag _Checked_iterator_category; 
typedef _Unchanged_checked_iterator_base_type_tag _Checked_iterator_base_type; 
typedef _Undefined_inner_type_tag _Inner_type; 
}; 
#line 359 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
class _Container_base_aux; 

class _Aux_cont { 


public: explicit _Aux_cont(const _Container_base_aux *const _Pcont) : _Mycontainer(_Pcont) 
{ } 

const _Container_base_aux *_Getcont() const 
{ 
return this->_Mycontainer; 
} 


private: const _Container_base_aux *_Mycontainer; 
}; 

class _Container_base_aux { 


public: _Container_base_aux() 
{ 

} 

_Container_base_aux(const _Container_base_aux &) 
{ 

} 

_Container_base_aux &operator=(const _Container_base_aux &) 
{ 

return *this; 
} 

void _Swap_aux(_Container_base_aux &_Right) 
{ 
::std::swap(this->_Myownedaux, _Right._Myownedaux); 
::std::swap(*(this->_Myownedaux), *(_Right._Myownedaux)); 
} 

~_Container_base_aux() 
{ 

} 


friend class _Iterator_base_aux; 

protected: _Aux_cont *_Myownedaux; 
}; 

template < class _Alloc >
 class _Container_base_aux_alloc_real
  : public _Container_base_aux
 {
 protected :
 explicit _Container_base_aux_alloc_real ( _Alloc _Al )
  : _Alaux ( _Al )
  {
  _Myownedaux = new ( _Alaux . allocate ( 1 ) ) _Aux_cont ( this );
  }

 _Container_base_aux_alloc_real ( const _Container_base_aux_alloc_real & _Right )
  : _Alaux ( _Right . _Alaux )
  {
  _Myownedaux = new ( _Alaux . allocate ( 1 ) ) _Aux_cont ( this );
  }

 _Container_base_aux_alloc_real & operator = ( const _Container_base_aux_alloc_real & )
  {

  return * this;
  }

 ~ _Container_base_aux_alloc_real ( )
  {
  _Myownedaux -> ~ _Aux_cont ( );

  _Alaux . deallocate ( _Myownedaux, 1 );
  }

 typename _Alloc :: template rebind < _Aux_cont > :: other _Alaux;
 };

class _Iterator_base_aux : public _Iterator_base_universal { 


public: _Iterator_base_aux() : _Myaux((0)) 
{ } 

void _Set_container(const _Container_base_aux *const _Pcont) 
{ 
(this->_Myaux) = _Pcont->_Myownedaux; 
} 

const _Container_base_aux *_Getmycont() const 
{ 
return (this->_Myaux) ? (*(this->_Myaux))._Getcont() : (0); 
} 

bool _Same_container(const _Iterator_base_aux &_Other) const 
{ 
return (this->_Myaux) == (_Other._Myaux); 
} 

bool _Has_container() const 
{ 
return (this->_Myaux) != (0); 
} 


private: const _Aux_cont *_Myaux; 
}; 
#line 547
class _Container_base_secure { 

}; 
#line 561
class _Iterator_base_secure : public _Iterator_base_universal { 



public: _Iterator_base_secure() : _Mycont((0)) 

{ 
} 

const _Container_base_secure *_Getmycont() const 
{ 
return this->_Mycont; 
} 

bool _Same_container(const _Iterator_base_secure &_Other) const 
{ 
return (this->_Mycont) == (_Other._Mycont); 
} 

bool _Has_container() const 
{ 
return (this->_Mycont) != (0); 
} 

const _Container_base_secure *_Mycont; 
}; 




typedef _Container_base_aux _Container_base; 
typedef _Iterator_base_aux _Iterator_base; 
#line 613 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template < class _Alloc >
 class _Container_base_aux_alloc_empty
  : public _Container_base
 {
 protected :
 explicit _Container_base_aux_alloc_empty ( _Alloc ) { }

 _Container_base_aux_alloc_empty ( const _Container_base_aux_alloc_empty & ) { }

 _Container_base_aux_alloc_empty & operator = ( const _Container_base_aux_alloc_empty & )
  {
  return * this;
  }

 ~ _Container_base_aux_alloc_empty ( ) { }
 };
#line 642 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
struct input_iterator_tag { 

}; 

struct output_iterator_tag { 

}; 

struct forward_iterator_tag : public input_iterator_tag { 


}; 

struct bidirectional_iterator_tag : public forward_iterator_tag { 


}; 

struct random_access_iterator_tag : public bidirectional_iterator_tag { 


}; 

struct _Int_iterator_tag { 

}; 

struct _Float_iterator_tag { 

}; 


struct _Nonscalar_ptr_iterator_tag { 

}; 
struct _Scalar_ptr_iterator_tag { 

}; 


template<class _Category, class 
_Ty, class 
_Diff, class 
_Pointer, class 
_Reference> 
struct iterator : public _Iterator_base_universal { 



typedef _Category iterator_category; 
typedef _Ty value_type; 
typedef _Diff difference_type; 
typedef _Diff distance_type; 
typedef _Pointer pointer; 
typedef _Reference reference; 
}; 

template<class _Category, class 
_Ty, class 
_Diff, class 
_Pointer, class 
_Reference, class 
_Base_class> 
struct _Iterator_with_base : public _Base_class { 



typedef _Category iterator_category; 
typedef _Ty value_type; 
typedef _Diff difference_type; 
typedef _Diff distance_type; 
typedef _Pointer pointer; 
typedef _Reference reference; 
}; 

template<class _Ty, class 
_Diff, class 
_Pointer, class 
_Reference> 
struct _Bidit : public _Iterator_with_base< bidirectional_iterator_tag, _Ty, _Diff, _Pointer, _Reference, _Iterator_base_aux>  { 



}; 

template<class _Ty, class 
_Diff, class 
_Pointer, class 
_Reference> 
struct _Ranit : public _Iterator_with_base< random_access_iterator_tag, _Ty, _Diff, _Pointer, _Reference, _Iterator_base_aux>  { 



}; 

template<class _Ty, class 
_Diff, class 
_Pointer, class 
_Reference, class 
_Base_class> 
struct _Ranit_base : public _Base_class { 



typedef random_access_iterator_tag iterator_category; 
typedef _Ty value_type; 
typedef _Diff difference_type; 
typedef _Diff distance_type; 
typedef _Pointer pointer; 
typedef _Reference reference; 
}; 

struct _Outit : public iterator< output_iterator_tag, void, void, void, void>  { 



}; 


template<class _Iter> 
struct iterator_traits { 

typedef typename _Iter::iterator_category iterator_category; 
typedef typename _Iter::value_type value_type; 
typedef typename _Iter::difference_type difference_type; 
typedef difference_type distance_type; 
typedef typename _Iter::pointer pointer; 
typedef typename _Iter::reference reference; 
}; 

template<class _Ty> 
struct iterator_traits< _Ty *>  { 

typedef random_access_iterator_tag iterator_category; 
typedef _Ty value_type; 
typedef ptrdiff_t difference_type; 
typedef ptrdiff_t distance_type; 
typedef _Ty *pointer; 
typedef _Ty &reference; 
}; 

template<class _Ty> 
struct iterator_traits< const _Ty *>  { 

typedef random_access_iterator_tag iterator_category; 
typedef _Ty value_type; 
typedef ptrdiff_t difference_type; 
typedef ptrdiff_t distance_type; 
typedef const _Ty *pointer; 
typedef const _Ty &reference; 
}; 

template<> struct iterator_traits< bool>  { 

typedef _Int_iterator_tag iterator_category; 
typedef _Bool value_type; 
typedef _Bool difference_type; 
typedef _Bool distance_type; 
typedef _Bool *pointer; 
typedef _Bool &reference; 
}; 

template<> struct iterator_traits< char>  { 

typedef _Int_iterator_tag iterator_category; 
typedef char value_type; 
typedef char difference_type; 
typedef char distance_type; 
typedef char *pointer; 
typedef char &reference; 
}; 

template<> struct iterator_traits< signed char>  { 

typedef _Int_iterator_tag iterator_category; 
typedef signed char value_type; 
typedef signed char difference_type; 
typedef signed char distance_type; 
typedef signed char *pointer; 
typedef signed char &reference; 
}; 

template<> struct iterator_traits< unsigned char>  { 

typedef _Int_iterator_tag iterator_category; 
typedef unsigned char value_type; 
typedef unsigned char difference_type; 
typedef unsigned char distance_type; 
typedef unsigned char *pointer; 
typedef unsigned char &reference; 
}; 


template<> struct iterator_traits< __wchar_t>  { 

typedef _Int_iterator_tag iterator_category; 
typedef __wchar_t value_type; 
typedef __wchar_t difference_type; 
typedef __wchar_t distance_type; 
typedef __wchar_t *pointer; 
typedef __wchar_t &reference; 
}; 
#line 846 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template<> struct iterator_traits< short>  { 

typedef _Int_iterator_tag iterator_category; 
typedef short value_type; 
typedef short difference_type; 
typedef short distance_type; 
typedef short *pointer; 
typedef short &reference; 
}; 

template<> struct iterator_traits< unsigned short>  { 

typedef _Int_iterator_tag iterator_category; 
typedef unsigned short value_type; 
typedef unsigned short difference_type; 
typedef unsigned short distance_type; 
typedef unsigned short *pointer; 
typedef unsigned short &reference; 
}; 

template<> struct iterator_traits< int>  { 

typedef _Int_iterator_tag iterator_category; 
typedef int value_type; 
typedef int difference_type; 
typedef int distance_type; 
typedef int *pointer; 
typedef int &reference; 
}; 

template<> struct iterator_traits< unsigned>  { 

typedef _Int_iterator_tag iterator_category; 
typedef unsigned value_type; 
typedef unsigned difference_type; 
typedef unsigned distance_type; 
typedef unsigned *pointer; 
typedef unsigned &reference; 
}; 

template<> struct iterator_traits< long>  { 

typedef _Int_iterator_tag iterator_category; 
typedef long value_type; 
typedef long difference_type; 
typedef long distance_type; 
typedef long *pointer; 
typedef long &reference; 
}; 

template<> struct iterator_traits< unsigned long>  { 

typedef _Int_iterator_tag iterator_category; 
typedef unsigned long value_type; 
typedef unsigned long difference_type; 
typedef unsigned long distance_type; 
typedef unsigned long *pointer; 
typedef unsigned long &reference; 
}; 

template<> struct iterator_traits< double>  { 

typedef _Float_iterator_tag iterator_category; 
typedef double value_type; 
typedef double difference_type; 
typedef double distance_type; 
typedef double *pointer; 
typedef double &reference; 
}; 

template<> struct iterator_traits< float>  { 

typedef _Float_iterator_tag iterator_category; 
typedef float value_type; 
typedef float difference_type; 
typedef float distance_type; 
typedef float *pointer; 
typedef float &reference; 
}; 


template<> struct iterator_traits< __int64>  { 

typedef _Int_iterator_tag iterator_category; 
typedef __int64 value_type; 
typedef __int64 difference_type; 
typedef __int64 distance_type; 
typedef __int64 *pointer; 
typedef __int64 &reference; 
}; 

template<> struct iterator_traits< unsigned __int64>  { 

typedef _Int_iterator_tag iterator_category; 
typedef unsigned __int64 value_type; 
typedef unsigned __int64 difference_type; 
typedef unsigned __int64 distance_type; 
typedef unsigned __int64 *pointer; 
typedef unsigned __int64 &reference; 
}; 
#line 949 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template < class _Iter > inline
 typename iterator_traits < _Iter > :: iterator_category
  __cdecl _Iter_cat ( const _Iter & )
 {
 typename iterator_traits < _Iter > :: iterator_category _Cat;
 return ( _Cat );
 }




template<class _Cat1, class _Cat2> 
class _Iter_random_helper { 


public: typedef forward_iterator_tag _Iter_random_cat; 
}; 


template<> class _Iter_random_helper< random_access_iterator_tag, random_access_iterator_tag>  { 


public: typedef random_access_iterator_tag _Iter_random_cat; 
}; 

template<class _Cat1, class _Cat2, class _Cat3> 
class _Iter_random_helper3 { 


public: typedef forward_iterator_tag _Iter_random_cat; 
}; 


template<> class _Iter_random_helper3< random_access_iterator_tag, random_access_iterator_tag, random_access_iterator_tag>  { 


public: typedef random_access_iterator_tag _Iter_random_cat; 
}; 

template < class _Iter1, class _Iter2 > inline
 typename _Iter_random_helper <
  typename iterator_traits < _Iter1 > :: iterator_category,
  typename iterator_traits < _Iter2 > :: iterator_category > :: _Iter_random_cat
  __cdecl _Iter_random ( const _Iter1 &, const _Iter2 & )
 {
 typename _Iter_random_helper <
  iterator_traits < _Iter1 > :: iterator_category,
  iterator_traits < _Iter2 > :: iterator_category > :: _Iter_random_cat _Cat;
 return ( _Cat );
 }

template < class _Iter1, class _Iter2, class _Iter3 > inline
 typename _Iter_random_helper3 <
  typename iterator_traits < _Iter1 > :: iterator_category,
  typename iterator_traits < _Iter2 > :: iterator_category,
  typename iterator_traits < _Iter3 > :: iterator_category > :: _Iter_random_cat
  __cdecl _Iter_random ( const _Iter1 &, const _Iter2 &, const _Iter3 & )
 {
 typename _Iter_random_helper3 <
  iterator_traits < _Iter1 > :: iterator_category,
  iterator_traits < _Iter2 > :: iterator_category,
  iterator_traits < _Iter3 > :: iterator_category > :: _Iter_random_cat _Cat;
 return ( _Cat );
 }



template<bool _Cond, class _Ty1, class _Ty2> 
class _If { 


public: typedef _Ty2 _Result; 
}; 

template<class _Ty1, class _Ty2> 
class _If< true, _Ty1, _Ty2>  { 


public: typedef _Ty1 _Result; 
}; 


template<bool _Secure_validation> 
class _Secure_validation_helper { 


public: typedef _Unchecked_iterator_tag _Checked_iterator_category; 
}; 


template<> class _Secure_validation_helper< true>  { 


public: typedef _Range_checked_iterator_tag _Checked_iterator_category; 
}; 



template<class _Iter, bool _Inherits_from_iterator_base> 
class _Checked_iterator_category_helper { 


public: typedef _Unchecked_iterator_tag _Checked_cat; 
}; 

template<class _Iter> 
class _Checked_iterator_category_helper< _Iter, true>  { 


public: typedef typename _Iter::_Checked_iterator_category _Checked_cat; 
}; 

template<class _Iter> 
class _Checked_iterator_category { 


public: typedef typename _Checked_iterator_category_helper< _Iter, __is_base_of(_Iterator_base_universal, _Iter)> ::_Checked_cat _Checked_cat; 
}; 

template < class _Iter >
 inline
 typename _Checked_iterator_category < _Iter > :: _Checked_cat _Checked_cat ( const _Iter & )
 {
  typename _Checked_iterator_category < _Iter > :: _Checked_cat _Cat;
  return ( _Cat );
 }


template<class _Iter, bool _Inherits_from_iterator_base> 
class _Checked_iterator_base_helper2 { 


public: typedef _Unchanged_checked_iterator_base_type_tag _Checked_iterator_base_type; 
}; 

template<class _Iter> 
class _Checked_iterator_base_helper2< _Iter, true>  { 


public: typedef typename _Iter::_Checked_iterator_base_type _Checked_iterator_base_type; 
}; 

template<class _Iter, class _Base_type> 
class _Checked_iterator_base_helper1 { 


public: typedef _Different_checked_iterator_base_type_tag _Base_type_tag; 
typedef _Base_type _Checked_iterator_base_type; 
}; 

template<class _Iter> 
class _Checked_iterator_base_helper1< _Iter, _Unchanged_checked_iterator_base_type_tag>  { 


public: typedef _Unchanged_checked_iterator_base_type_tag _Base_type_tag; 
typedef _Iter _Checked_iterator_base_type; 
}; 

template<class _Iter> 
class _Checked_iterator_base_helper { 


public: typedef _Checked_iterator_base_helper2< _Iter, __is_base_of(_Iterator_base_universal, _Iter)>  _Base_helper2; 
typedef _Checked_iterator_base_helper1< _Iter, typename _Checked_iterator_base_helper2< _Iter, __is_base_of(_Iterator_base_universal, _Iter)> ::_Checked_iterator_base_type>  _Base_helper1; 

typedef typename _Checked_iterator_base_helper1< _Iter, typename _Checked_iterator_base_helper2< _Iter, __is_base_of(_Iterator_base_universal, _Iter)> ::_Checked_iterator_base_type> ::_Base_type_tag _Checked_iterator_base_type_tag; 
typedef typename _Checked_iterator_base_helper1< _Iter, typename _Checked_iterator_base_helper2< _Iter, __is_base_of(_Iterator_base_universal, _Iter)> ::_Checked_iterator_base_type> ::_Checked_iterator_base_type _Checked_iterator_base_type; 
}; 

template < class _Iter, class _Base_tag >
 inline
 typename _Checked_iterator_base_helper < _Iter > :: _Checked_iterator_base_type
  __cdecl _Checked_base ( const _Iter & _It, _Base_tag )
 {
  return _It . _Checked_iterator_base ( );
 }

template < class _Iter >
 inline
 typename _Checked_iterator_base_helper < _Iter > :: _Checked_iterator_base_type
  __cdecl _Checked_base ( const _Iter & _It, _Unchanged_checked_iterator_base_type_tag )
 {
  return _It;
 }

template < class _Iter, class _Base_tag >
 inline
 typename _Checked_iterator_base_helper < _Iter > :: _Checked_iterator_base_type
  __cdecl _Checked_base ( _Iter & _It, _Base_tag )
 {
  return _It . _Checked_iterator_base ( );
 }

template < class _Iter >
 inline
 typename _Checked_iterator_base_helper < _Iter > :: _Checked_iterator_base_type
  __cdecl _Checked_base ( _Iter & _It, _Unchanged_checked_iterator_base_type_tag )
 {
  return _It;
 }

template < class _Iter >
 inline
 typename _Checked_iterator_base_helper < _Iter > :: _Checked_iterator_base_type
  __cdecl _Checked_base ( const _Iter & _It )
 {
  typename _Checked_iterator_base_helper < _Iter > :: _Checked_iterator_base_type_tag _Base_tag;
  return _Checked_base ( _It, _Base_tag );
 }

template < class _Iter >
 inline
 typename _Checked_iterator_base_helper < _Iter > :: _Checked_iterator_base_type
  __cdecl _Checked_base ( _Iter & _It )
 {
  typename _Checked_iterator_base_helper < _Iter > :: _Checked_iterator_base_type_tag _Base_tag;
  return _Checked_base ( _It, _Base_tag );
 }



template < class _DstIter, class _BaseIter >
 inline
 void __cdecl _Checked_assign_from_base ( _DstIter & _Dest, const _BaseIter & _Src )
 {
  _Dest . _Checked_iterator_assign_from_base ( _Src );
 }

template < class _Iter >
 inline
 void __cdecl _Checked_assign_from_base ( _Iter & _Dest, const _Iter & _Src )
 {
  _Dest = _Src;
 }
#line 1190 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template<class _Value> 
class _Move_operation_category { 


public: typedef _Undefined_move_tag _Move_cat; 
}; 

template < class _Iter >
 inline
  typename _Move_operation_category < typename iterator_traits < _Iter > :: value_type > :: _Move_cat _Move_cat ( const _Iter & )
 {
  typename _Move_operation_category < typename iterator_traits < _Iter > :: value_type > :: _Move_cat _Cat;
  return ( _Cat );
 }

template<class _Ty> 
struct _Is_swap_move { 

static const bool _Value = false; 
}; 


template<> struct _Is_swap_move< _Swap_move_tag>  { 

static const bool _Value = true; 
}; 

template<class _Ty1, class 
_Ty2> 
class _Move_operation_category< pair< _Ty1, _Ty2> >  { 
#line 1228
public: typedef typename _If< (_Is_swap_move< typename std::_Move_operation_category< _Ty1> ::_Move_cat> ::_Value && _Is_swap_move< typename std::_Move_operation_category< _Ty2> ::_Move_cat> ::_Value), _Swap_move_tag, _Undefined_move_tag> ::_Result _Move_cat; 
}; 


template<class _T1, class _T2, class _Checked_Cat1, class _Checked_Cat2> 
struct _Ptr_cat_with_checked_cat_helper { 

typedef _Nonscalar_ptr_iterator_tag _Ptr_cat; 
}; 

template<class _T1, class _T2> 
struct _Ptr_cat_helper { 



typedef typename _Ptr_cat_with_checked_cat_helper< _T1, _T2, typename _Checked_iterator_category< _T1> ::_Checked_cat, typename _Checked_iterator_category< _T2> ::_Checked_cat> ::_Ptr_cat _Ptr_cat; 
}; 

template<class _T1, class _T2, class _Checked_Cat1> 
struct _Ptr_cat_with_checked_cat_helper< _T1, _T2, _Checked_Cat1, _Range_checked_iterator_tag>  { 

typedef typename _Ptr_cat_helper< _T1, typename _T2::_Inner_type> ::_Ptr_cat _Ptr_cat; 
}; 

template<class _T1, class _T2, class _Checked_Cat2> 
struct _Ptr_cat_with_checked_cat_helper< _T1, _T2, _Range_checked_iterator_tag, _Checked_Cat2>  { 

typedef typename _Ptr_cat_helper< typename _T1::_Inner_type, _T2> ::_Ptr_cat _Ptr_cat; 
}; 

template<class _T1, class _T2> 
struct _Ptr_cat_with_checked_cat_helper< _T1, _T2, _Range_checked_iterator_tag, _Range_checked_iterator_tag>  { 

typedef typename _Ptr_cat_helper< typename _T1::_Inner_type, typename _T2::_Inner_type> ::_Ptr_cat _Ptr_cat; 
}; 

template<class _T1> 
struct _Ptr_cat_helper< _T1, _Undefined_inner_type_tag>  { 

typedef _Nonscalar_ptr_iterator_tag _Ptr_cat; 
}; 

template<class _T2> 
struct _Ptr_cat_helper< _Undefined_inner_type_tag, _T2>  { 

typedef _Nonscalar_ptr_iterator_tag _Ptr_cat; 
}; 


template<> struct _Ptr_cat_helper< _Undefined_inner_type_tag, _Undefined_inner_type_tag>  { 

typedef _Nonscalar_ptr_iterator_tag _Ptr_cat; 
}; 



template<> struct _Ptr_cat_helper< bool *, bool *>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 


template<> struct _Ptr_cat_helper< const bool *, bool *>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 


template<> struct _Ptr_cat_helper< char *, char *>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 


template<> struct _Ptr_cat_helper< const char *, char *>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 


template<> struct _Ptr_cat_helper< signed char *, signed char *>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 


template<> struct _Ptr_cat_helper< const signed char *, signed char *>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 


template<> struct _Ptr_cat_helper< unsigned char *, unsigned char *>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 


template<> struct _Ptr_cat_helper< const unsigned char *, unsigned char *>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 




template<> struct _Ptr_cat_helper< __wchar_t *, __wchar_t *>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 


template<> struct _Ptr_cat_helper< const __wchar_t *, __wchar_t *>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 
#line 1347 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template<> struct _Ptr_cat_helper< short *, short *>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 


template<> struct _Ptr_cat_helper< const short *, short *>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 


template<> struct _Ptr_cat_helper< unsigned short *, unsigned short *>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 


template<> struct _Ptr_cat_helper< const unsigned short *, unsigned short *>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 


template<> struct _Ptr_cat_helper< int *, int *>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 


template<> struct _Ptr_cat_helper< const int *, int *>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 


template<> struct _Ptr_cat_helper< unsigned *, unsigned *>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 


template<> struct _Ptr_cat_helper< const unsigned *, unsigned *>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 


template<> struct _Ptr_cat_helper< long *, long *>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 


template<> struct _Ptr_cat_helper< const long *, long *>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 


template<> struct _Ptr_cat_helper< unsigned long *, unsigned long *>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 


template<> struct _Ptr_cat_helper< const unsigned long *, unsigned long *>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 


template<> struct _Ptr_cat_helper< float *, float *>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 


template<> struct _Ptr_cat_helper< const float *, float *>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 


template<> struct _Ptr_cat_helper< double *, double *>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 


template<> struct _Ptr_cat_helper< const double *, double *>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 


template<> struct _Ptr_cat_helper< long double *, long double *>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 


template<> struct _Ptr_cat_helper< const long double *, long double *>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 




template<> struct _Ptr_cat_helper< __int64 *, __int64 *>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 


template<> struct _Ptr_cat_helper< const __int64 *, __int64 *>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 


template<> struct _Ptr_cat_helper< unsigned __int64 *, unsigned __int64 *>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 


template<> struct _Ptr_cat_helper< const unsigned __int64 *, unsigned __int64 *>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 
#line 1482 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template<class _Ty> 
struct _Ptr_cat_helper< _Ty **, _Ty **>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 

template<class _Ty> 
struct _Ptr_cat_helper< _Ty **, const _Ty **>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 

template<class _Ty> 
struct _Ptr_cat_helper< _Ty *const *, _Ty **>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 

template<class _Ty> 
struct _Ptr_cat_helper< _Ty *const *, const _Ty **>  { 

typedef _Scalar_ptr_iterator_tag _Ptr_cat; 
}; 


template < class _T1, class _T2 > inline
typename _Ptr_cat_helper < _T1, _T2 > :: _Ptr_cat __cdecl _Ptr_cat ( _T1 &, _T2 & )
 {
 typename _Ptr_cat_helper < _T1, _T2 > :: _Ptr_cat _Cat;
 return ( _Cat );
 }
#line 1763 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template < class _Iter > inline
 typename iterator_traits < _Iter > :: value_type * __cdecl _Val_type ( _Iter )
 {
 return ( 0 );
 }


template < class _InIt,
 class _Diff > inline
 void __cdecl advance ( _InIt & _Where, _Diff _Off )
 {
 _Advance ( _Where, _Off, _Iter_cat ( _Where ) );
 }

template < class _InIt,
 class _Diff > inline
 void __cdecl _Advance ( _InIt & _Where, _Diff _Off, input_iterator_tag )
 {






 for (; 0 < _Off; -- _Off )
  ++ _Where;
 }
#line 1791 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template < class _FI,
 class _Diff > inline
 void __cdecl _Advance ( _FI & _Where, _Diff _Off, forward_iterator_tag )
 {






 for (; 0 < _Off; -- _Off )
  ++ _Where;
 }
#line 1805 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
#pragma warning(push)
#pragma warning(disable: 6295)
template < class _BI,
 class _Diff > inline
 void __cdecl _Advance ( _BI & _Where, _Diff _Off, bidirectional_iterator_tag )
 {
 for (; 0 < _Off; -- _Off )
  ++ _Where;
 for (; _Off < 0; ++ _Off )
  -- _Where;
 }
#pragma warning(pop)

template < class _RI,
 class _Diff > inline
 void __cdecl _Advance ( _RI & _Where, _Diff _Off, random_access_iterator_tag )
 {
 _Where += _Off;
 }



template < class _Iter > inline
 typename iterator_traits < _Iter > :: difference_type
  * __cdecl _Dist_type ( _Iter )
 {
 return ( 0 );
 }


template < class _InIt,
 class _Diff > inline
  void __cdecl _Distance2 ( _InIt _First, _InIt _Last, _Diff & _Off,
   input_iterator_tag )
 {
 for (; _First != _Last; ++ _First )
  ++ _Off;
 }

template < class _FwdIt,
 class _Diff > inline
  void __cdecl _Distance2 ( _FwdIt _First, _FwdIt _Last, _Diff & _Off,
   forward_iterator_tag )
 {
 for (; _First != _Last; ++ _First )
  ++ _Off;
 }

template < class _BidIt,
 class _Diff > inline
  void __cdecl _Distance2 ( _BidIt _First, _BidIt _Last, _Diff & _Off,
   bidirectional_iterator_tag )
 {
 for (; _First != _Last; ++ _First )
  ++ _Off;
 }

template < class _RanIt,
 class _Diff > inline
  void __cdecl _Distance2 ( _RanIt _First, _RanIt _Last, _Diff & _Off,
   random_access_iterator_tag )
 {









 _Off += _Last - _First;
 }
#line 1879 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template < class _InIt > inline
 typename iterator_traits < _InIt > :: difference_type
  __cdecl distance ( _InIt _First, _InIt _Last )
 {
 typename iterator_traits < _InIt > :: difference_type _Off = 0;
 _Distance2 ( _First, _Last, _Off, _Iter_cat ( _First ) );
 return ( _Off );
 }


template < class _InIt,
 class _Diff > inline
  void __cdecl _Distance ( _InIt _First, _InIt _Last, _Diff & _Off )
 {
 _Distance2 ( _First, _Last, _Off, _Iter_cat ( _First ) );
 }


template < class _RanIt,
 class _Base >
 class _Revranit
  : public _Base
 {
public :
 typedef _Revranit < _RanIt, _Base > _Myt;
 typedef typename iterator_traits < _RanIt > :: iterator_category iterator_category;
 typedef typename iterator_traits < _RanIt > :: value_type value_type;
 typedef typename iterator_traits < _RanIt > :: difference_type difference_type;
 typedef typename iterator_traits < _RanIt > :: difference_type distance_type;
 typedef typename iterator_traits < _RanIt > :: pointer pointer;
 typedef typename iterator_traits < _RanIt > :: reference reference;
 typedef _RanIt iterator_type;

  _Revranit ( )
  {
  }

 explicit _Revranit ( _RanIt _Right )
  : current ( _Right )
  {
  }

 template < class _RanIt2,
  class _Base2 >
  _Revranit ( const _Revranit < _RanIt2, _Base2 > & _Right )
  : current ( _Right . base ( ) )
  {
  }

 _RanIt base ( ) const
  {
  return ( current );
  }

 reference operator * ( ) const
  {
  _RanIt _Tmp = current;
  return ( * -- _Tmp );
  }

 pointer operator -> ( ) const
  {
  return ( & * * this );
  }

 _Myt & operator ++ ( )
  {
  -- current;
  return ( * this );
  }

 _Myt operator ++ ( int )
  {
  _Myt _Tmp = * this;
  -- current;
  return ( _Tmp );
  }

 _Myt & operator -- ( )
  {
  ++ current;
  return ( * this );
  }

 _Myt operator -- ( int )
  {
  _Myt _Tmp = * this;
  ++ current;
  return ( _Tmp );
  }

 template < class _RanIt2,
  class _Base2 >
  bool _Equal ( const _Revranit < _RanIt2, _Base2 > & _Right ) const
  {
  return ( current == _Right . base ( ) );
  }



 _Myt & operator += ( difference_type _Off )
  {
  current -= _Off;
  return ( * this );
  }

 _Myt operator + ( difference_type _Off ) const
  {
  return ( _Myt ( current - _Off ) );
  }

 _Myt & operator -= ( difference_type _Off )
  {
  current += _Off;
  return ( * this );
  }

 _Myt operator - ( difference_type _Off ) const
  {
  return ( _Myt ( current + _Off ) );
  }

 reference operator [ ] ( difference_type _Off ) const
  {
  return ( * ( * this + _Off ) );
  }

 template < class _RanIt2,
  class _Base2 >
  bool _Less ( const _Revranit < _RanIt2, _Base2 > & _Right ) const
  {
  return ( _Right . base ( ) < current );
  }

 template < class _RanIt2,
  class _Base2 >
  difference_type _Minus ( const _Revranit < _RanIt2, _Base2 > & _Right ) const
  {
  return ( _Right . base ( ) - current );
  }

protected :
 _RanIt current;
 };


template < class _RanIt,
 class _Base,
 class _Diff > inline
 _Revranit < _RanIt, _Base >
  operator + ( _Diff _Off,
  const _Revranit < _RanIt, _Base > & _Right )
 {
 return ( _Right + _Off );
 }

template < class _RanIt1,
 class _Base1,
 class _RanIt2,
 class _Base2 > inline
 typename _Base1 :: difference_type operator - (
  const _Revranit < _RanIt1, _Base1 > & _Left,
  const _Revranit < _RanIt2, _Base2 > & _Right )
 {
 return ( _Left . _Minus ( _Right ) );
 }

template < class _RanIt1,
 class _Base1,
 class _RanIt2,
 class _Base2 > inline
 bool operator == (
  const _Revranit < _RanIt1, _Base1 > & _Left,
  const _Revranit < _RanIt2, _Base2 > & _Right )
 {
 return ( _Left . _Equal ( _Right ) );
 }

template < class _RanIt1,
 class _Base1,
 class _RanIt2,
 class _Base2 > inline
 bool operator != (
  const _Revranit < _RanIt1, _Base1 > & _Left,
  const _Revranit < _RanIt2, _Base2 > & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }

template < class _RanIt1,
 class _Base1,
 class _RanIt2,
 class _Base2 > inline
 bool operator < (
  const _Revranit < _RanIt1, _Base1 > & _Left,
  const _Revranit < _RanIt2, _Base2 > & _Right )
 {
 return ( _Left . _Less ( _Right ) );
 }

template < class _RanIt1,
 class _Base1,
 class _RanIt2,
 class _Base2 > inline
 bool operator > (
  const _Revranit < _RanIt1, _Base1 > & _Left,
  const _Revranit < _RanIt2, _Base2 > & _Right )
 {
 return ( _Right < _Left );
 }

template < class _RanIt1,
 class _Base1,
 class _RanIt2,
 class _Base2 > inline
 bool operator <= (
  const _Revranit < _RanIt1, _Base1 > & _Left,
  const _Revranit < _RanIt2, _Base2 > & _Right )
 {
 return ( ! ( _Right < _Left ) );
 }

template < class _RanIt1,
 class _Base1,
 class _RanIt2,
 class _Base2 > inline
 bool operator >= (
  const _Revranit < _RanIt1, _Base1 > & _Left,
  const _Revranit < _RanIt2, _Base2 > & _Right )
 {
 return ( ! ( _Left < _Right ) );
 }


template < class _RanIt >
 class reverse_iterator
  : public _Revranit < _RanIt, iterator <
   typename iterator_traits < _RanIt > :: iterator_category,
   typename iterator_traits < _RanIt > :: value_type,
   typename iterator_traits < _RanIt > :: difference_type,
   typename iterator_traits < _RanIt > :: pointer,
   typename iterator_traits < _RanIt > :: reference > >
 {
 typedef reverse_iterator < _RanIt > _Myt;
 typedef _Revranit < _RanIt, iterator <
   typename iterator_traits < _RanIt > :: iterator_category,
   typename iterator_traits < _RanIt > :: value_type,
   typename iterator_traits < _RanIt > :: difference_type,
   typename iterator_traits < _RanIt > :: pointer,
   typename iterator_traits < _RanIt > :: reference > > _Mybase;

public :
 typedef typename iterator_traits < _RanIt > :: iterator_category iterator_category;
 typedef typename iterator_traits < _RanIt > :: value_type value_type;
 typedef typename iterator_traits < _RanIt > :: difference_type difference_type;
 typedef typename iterator_traits < _RanIt > :: difference_type distance_type;
 typedef typename iterator_traits < _RanIt > :: pointer pointer;
 typedef typename iterator_traits < _RanIt > :: reference reference;
 typedef _RanIt iterator_type;

  reverse_iterator ( )
  {
  }

 explicit reverse_iterator ( _RanIt _Right )
  : _Mybase ( _Right )
  {
  }

 template < class _Other >
   reverse_iterator ( const reverse_iterator < _Other > & _Right )
  : _Mybase ( _Right . base ( ) )
  {
  }

  reverse_iterator ( _Mybase _Right )
  : _Mybase ( _Right )
  {
  }


 typedef typename :: std :: _Checked_iterator_category < _RanIt > :: _Checked_cat _Checked_iterator_category;
 typedef reverse_iterator < typename _Checked_iterator_base_helper < _RanIt > :: _Checked_iterator_base_type > _Checked_iterator_base_type;

 _Checked_iterator_base_type _Checked_iterator_base ( ) const
 {
  typename _Checked_iterator_base_type _Base ( :: std :: _Checked_base ( this -> current ) );
  return _Base;
 }

 void _Checked_iterator_assign_from_base ( _Checked_iterator_base_type _Base )
 {
  :: std :: _Checked_assign_from_base ( this -> current, _Base . base ( ) );
 }


 _Myt & operator ++ ( )
  {
  ++ * ( ( _Mybase * ) this );
  return ( * this );
  }

 _Myt operator ++ ( int )
  {
  _Myt _Tmp = * this;
  ++ * this;
  return ( _Tmp );
  }

 _Myt & operator -- ( )
  {
  -- * ( ( _Mybase * ) this );
  return ( * this );
  }

 _Myt operator -- ( int )
  {
  _Myt _Tmp = * this;
  -- * this;
  return ( _Tmp );
  }

 _Myt & operator += ( difference_type _Off )
  {
  * ( ( _Mybase * ) this ) += _Off;
  return ( * this );
  }

 _Myt operator + ( difference_type _Off ) const
  {
  _Myt _Tmp = * this;
  return ( _Tmp += _Off );
  }

 _Myt & operator -= ( difference_type _Off )
  {
  * ( ( _Mybase * ) this ) -= _Off;
  return ( * this );
  }

 _Myt operator - ( difference_type _Off ) const
  {
  _Myt _Tmp = * this;
  return ( _Tmp -= _Off );
  }
 };
#line 2227 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template < class _RanIt,
 class _Diff > inline
 reverse_iterator < _RanIt > __cdecl operator + ( _Diff _Off,
  const reverse_iterator < _RanIt > & _Right )
 {
 return ( _Right + _Off );
 }

template < class _RanIt1,
 class _RanIt2 > inline
 typename reverse_iterator < _RanIt1 > :: difference_type
  __cdecl operator - ( const reverse_iterator < _RanIt1 > & _Left,
  const reverse_iterator < _RanIt2 > & _Right )
 {
 return ( _Left . _Minus ( _Right ) );
 }

template < class _RanIt1,
 class _RanIt2 > inline
 bool __cdecl operator == ( const reverse_iterator < _RanIt1 > & _Left,
  const reverse_iterator < _RanIt2 > & _Right )
 {
 return ( _Left . _Equal ( _Right ) );
 }

template < class _RanIt1,
 class _RanIt2 > inline
 bool __cdecl operator != ( const reverse_iterator < _RanIt1 > & _Left,
  const reverse_iterator < _RanIt2 > & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }

template < class _RanIt1,
 class _RanIt2 > inline
 bool __cdecl operator < ( const reverse_iterator < _RanIt1 > & _Left,
  const reverse_iterator < _RanIt2 > & _Right )
 {
 return ( _Left . _Less ( _Right ) );
 }

template < class _RanIt1,
 class _RanIt2 > inline
 bool __cdecl operator > ( const reverse_iterator < _RanIt1 > & _Left,
  const reverse_iterator < _RanIt2 > & _Right )
 {
 return ( _Right < _Left );
 }

template < class _RanIt1,
 class _RanIt2 > inline
 bool __cdecl operator <= ( const reverse_iterator < _RanIt1 > & _Left,
  const reverse_iterator < _RanIt2 > & _Right )
 {
 return ( ! ( _Right < _Left ) );
 }

template < class _RanIt1,
 class _RanIt2 > inline
 bool __cdecl operator >= ( const reverse_iterator < _RanIt1 > & _Left,
  const reverse_iterator < _RanIt2 > & _Right )
 {
 return ( ! ( _Left < _Right ) );
 }


template < class _BidIt,
 class _Ty,
 class _Reference = _Ty &,
 class _Pointer = _Ty *,
 class _Diff = ptrdiff_t >
 class reverse_bidirectional_iterator
  : public iterator < bidirectional_iterator_tag, _Ty, _Diff,
   _Pointer, _Reference >
 {
public :
 typedef reverse_bidirectional_iterator < _BidIt, _Ty, _Reference,
  _Pointer, _Diff > _Myt;
 typedef _BidIt iterator_type;

  reverse_bidirectional_iterator ( )
  {
  }

 explicit reverse_bidirectional_iterator ( _BidIt _Right )
  : current ( _Right )
  {
  }

 _BidIt base ( ) const
  {
  return ( current );
  }

 _Reference operator * ( ) const
  {
  _BidIt _Tmp = current;
  return ( * -- _Tmp );
  }

 _Pointer operator -> ( ) const
  {
  _Reference _Tmp = * * this;
  return ( & _Tmp );
  }

 _Myt & operator ++ ( )
  {
  -- current;
  return ( * this );
  }

 _Myt operator ++ ( int )
  {
  _Myt _Tmp = * this;
  -- current;
  return ( _Tmp );
  }

 _Myt & operator -- ( )
  {
  ++ current;
  return ( * this );
  }

 _Myt operator -- ( int )
  {
  _Myt _Tmp = * this;
  ++ current;
  return ( _Tmp );
  }

 bool operator == ( const _Myt & _Right ) const
  {
  return ( current == _Right . current );
  }

 bool operator != ( const _Myt & _Right ) const
  {
  return ( ! ( * this == _Right ) );
  }

protected :
 _BidIt current;
 };


template < class _BidIt,
 class _BidIt2 = _BidIt >
 class _Revbidit
  : public iterator <
   typename iterator_traits < _BidIt > :: iterator_category,
   typename iterator_traits < _BidIt > :: value_type,
   typename iterator_traits < _BidIt > :: difference_type,
   typename iterator_traits < _BidIt > :: pointer,
   typename iterator_traits < _BidIt > :: reference >
 {
public :
 typedef _Revbidit < _BidIt, _BidIt2 > _Myt;
 typedef typename iterator_traits < _BidIt > :: difference_type _Diff;
 typedef typename iterator_traits < _BidIt > :: pointer _Pointer;
 typedef typename iterator_traits < _BidIt > :: reference _Reference;
 typedef _BidIt iterator_type;

  _Revbidit ( )
  {
  }

 explicit _Revbidit ( _BidIt _Right )
  : current ( _Right )
  {
  }

  _Revbidit ( const _Revbidit < _BidIt2 > & _Other )
  : current ( _Other . base ( ) )
  {
  }

 _BidIt base ( ) const
  {
  return ( current );
  }

 _Reference operator * ( ) const
  {
  _BidIt _Tmp = current;
  return ( * -- _Tmp );
  }

 _Pointer operator -> ( ) const
  {
  _Reference _Tmp = * * this;
  return ( & _Tmp );
  }

 _Myt & operator ++ ( )
  {
  -- current;
  return ( * this );
  }

 _Myt operator ++ ( int )
  {
  _Myt _Tmp = * this;
  -- current;
  return ( _Tmp );
  }

 _Myt & operator -- ( )
  {
  ++ current;
  return ( * this );
  }

 _Myt operator -- ( int )
  {
  _Myt _Tmp = * this;
  ++ current;
  return ( _Tmp );
  }

 bool operator == ( const _Myt & _Right ) const
  {
  return ( current == _Right . current );
  }

 bool operator != ( const _Myt & _Right ) const
  {
  return ( ! ( * this == _Right ) );
  }

protected :
 _BidIt current;
 };




template < class _InIt, class _OutIt, class _InOutItCat >
inline
 _OutIt __cdecl _Copy_opt ( _InIt _First, _InIt _Last, _OutIt _Dest,
  _InOutItCat, _Nonscalar_ptr_iterator_tag, _Range_checked_iterator_tag )
 {
 ;
 for (; _First != _Last; ++ _Dest, ++ _First )
  * _Dest = * _First;
 return ( _Dest );
 }


template < class _InIt, class _OutIt >
inline
 _OutIt __cdecl _Copy_opt ( _InIt _First, _InIt _Last, _OutIt _Dest,
  random_access_iterator_tag, _Nonscalar_ptr_iterator_tag, _Range_checked_iterator_tag )
 {

 _OutIt _Result = _Dest + ( _Last - _First );
 _Copy_opt ( _First, _Last, :: std :: _Checked_base ( _Dest ),
  forward_iterator_tag ( ), _Nonscalar_ptr_iterator_tag ( ), _Range_checked_iterator_tag ( ) );
 return _Result;
 }
#line 2490 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template < class _InIt, class _OutIt, class _InOutItCat >
inline
 _OutIt __cdecl _Copy_opt ( _InIt _First, _InIt _Last, _OutIt _Dest,
  _InOutItCat, _Scalar_ptr_iterator_tag, _Range_checked_iterator_tag )
 {







 ptrdiff_t _Off = _Last - _First;

 _OutIt _Result = _Dest + _Off;
 if ( _Off > 0 )
  :: memmove_s ( ( & * _Dest ), ( _Off * sizeof ( * _First ) ), ( & * _First ), ( _Off * sizeof ( * _First ) ) );
 return _Result;
 }
#line 2510 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template<bool _Cond, class _Result_type> struct _Enable_if; 


template<class _Result_type> 
struct _Enable_if< true, _Result_type>  { 

typedef _Result_type _Result; 
}; 

template<class _Checked_iter_cat> 
struct _Is_checked_iterator_helper { 

enum __cuda__Result { _Result}; 
}; 


template<> struct _Is_checked_iterator_helper< _Range_checked_iterator_tag>  { 

enum __cuda__Result { _Result = 1}; 
}; 

template<class _Iter> 
struct _Is_checked_iterator { 

enum __cuda__Result { _Result = _Is_checked_iterator_helper< typename _Checked_iterator_category< _Iter> ::_Checked_cat> ::_Result
}; 
}; 
#line 2558
template < class _InIt, class _OutIt >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result __cdecl copy ( _InIt _First, _InIt _Last, _OutIt _Dest )
 {
 return ( _Copy_opt ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest,
  _Iter_random ( _First, _Dest ), _Ptr_cat ( _First, _Dest ), _Range_checked_iterator_tag ( ) ) );
 }

template < class _InIt, class _OutElem, size_t _Size >
inline
_OutElem * __cdecl copy ( _InIt _First, _InIt _Last, _OutElem ( & _Dest ) [ _Size ] )
 {
 return copy ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), :: stdext :: make_checked_array_iterator ( _Dest, _Size ) ) . base ( );
 }

template < class _InIt, class _OutIt >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result __cdecl copy ( _InIt _First, _InIt _Last, _OutIt _Dest )
 {
 return ( _Copy_opt ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest,
  _Iter_random ( _First, _Dest ), _Ptr_cat ( _First, _Dest ), _Range_checked_iterator_tag ( ) ) );
 }
#line 2595 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template < class _InIt, class _OutIt, class _InOutItCat, class _MoveCatTy >
inline
 _OutIt __cdecl _Move_opt ( _InIt _First, _InIt _Last, _OutIt _Dest,
  _InOutItCat _First_dest_cat, _MoveCatTy, _Range_checked_iterator_tag )
 {
 return _Copy_opt ( _First, _Last, _Dest,
  _First_dest_cat, _Ptr_cat ( _First, _Dest ), _Range_checked_iterator_tag ( ) );
 }

template < class _InIt, class _OutIt, class _InOutItCat >
inline
 _OutIt __cdecl _Move_opt ( _InIt _First, _InIt _Last, _OutIt _Dest,
  _InOutItCat, _Swap_move_tag, _Range_checked_iterator_tag )
 {
 ;
 for (; _First != _Last; ++ _Dest, ++ _First )
  :: std :: _Swap_adl ( * _Dest, * _First );
 return ( _Dest );
 }


template < class _InIt, class _OutIt, class _InOutItCat >
inline
 _OutIt __cdecl _Move_opt ( _InIt _First, _InIt _Last, _OutIt _Dest,
  random_access_iterator_tag, _Swap_move_tag _Move_cat, _Range_checked_iterator_tag )
 {

 _OutIt _Result = _Dest + ( _Last - _First );
 _Move_opt ( _First, _Last, :: std :: _Checked_base ( _Dest ),
  forward_iterator_tag ( ), _Move_cat, _Range_checked_iterator_tag ( ) );
 return _Result;
 }
#line 2631 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template < class _InIt, class _OutIt >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result __cdecl _Move ( _InIt _First, _InIt _Last, _OutIt _Dest )
 {
 return _Move_opt ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest,
  _Iter_random ( _First, _Dest ), _Move_cat ( _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt, class _OutElem, size_t _Size >
inline
_OutElem * __cdecl _Move ( _InIt _First, _InIt _Last, _OutElem ( & _Dest ) [ _Size ] )
 {
 return _Move ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ),
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ) ) . base ( );
 }

template < class _InIt, class _OutIt >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result __cdecl _Move ( _InIt _First, _InIt _Last, _OutIt _Dest )
 {
 return _Move_opt ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest,
  _Iter_random ( _First, _Dest ), _Move_cat ( _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }
#line 2669 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template < class _BidIt1, class _BidIt2, class _InOutItCat >
inline
 _BidIt2 __cdecl _Copy_backward_opt ( _BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest,
  _InOutItCat, _Nonscalar_ptr_iterator_tag, _Range_checked_iterator_tag )
 {
 ;
 while ( _First != _Last )
  * -- _Dest = * -- _Last;
 return ( _Dest );
 }


template < class _InIt, class _OutIt >
inline
 _OutIt __cdecl _Copy_backward_opt ( _InIt _First, _InIt _Last, _OutIt _Dest,
  random_access_iterator_tag, _Nonscalar_ptr_iterator_tag, _Range_checked_iterator_tag )
 {

 _OutIt _Result = _Dest - ( _Last - _First );
 _Copy_backward_opt ( _First, _Last, :: std :: _Checked_base ( _Dest ),
  forward_iterator_tag ( ), _Nonscalar_ptr_iterator_tag ( ), _Range_checked_iterator_tag ( ) );
 return _Result;
 }
#line 2694 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template < class _InIt, class _OutIt, class _InOutItCat >
inline
 _OutIt __cdecl _Copy_backward_opt ( _InIt _First, _InIt _Last, _OutIt _Dest,
  _InOutItCat, _Scalar_ptr_iterator_tag, _Range_checked_iterator_tag )
 {







 ptrdiff_t _Off = _Last - _First;



 _OutIt _Result = _Dest - _Off;
 if ( _Off > 0 )
  :: memmove_s ( ( & * _Result ), ( _Off * sizeof ( * _First ) ), ( & * _First ), ( _Off * sizeof ( * _First ) ) );
 return _Result;
 }
#line 2718 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _BidIt2 > :: _Result, _BidIt2 > :: _Result __cdecl copy_backward ( _BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest )
 {
 return _Copy_backward_opt ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest,
  _Iter_random ( _First, _Dest ), _Ptr_cat ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _BidIt1,
 class _BidIt2 > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _BidIt2 > :: _Result, _BidIt2 > :: _Result __cdecl copy_backward ( _BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest )
 {
 return _Copy_backward_opt ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest,
  _Iter_random ( _First, _Dest ), _Ptr_cat ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }
#line 2748 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template < class _BidIt1, class _BidIt2, class _InOutItCat, class _MoveCatTy >
inline
 _BidIt2 __cdecl _Move_backward_opt ( _BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest,
  _InOutItCat _First_dest_cat, _MoveCatTy, _Range_checked_iterator_tag )
 {
 return _Copy_backward_opt ( _First, _Last, _Dest,
  _First_dest_cat, _Ptr_cat ( _First, _Dest ), _Range_checked_iterator_tag ( ) );
 }

template < class _BidIt1, class _BidIt2, class _InOutItCat >
inline
 _BidIt2 __cdecl _Move_backward_opt ( _BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest,
  _InOutItCat, _Swap_move_tag, _Range_checked_iterator_tag )
 {
 ;
 while ( _First != _Last )
  :: std :: _Swap_adl ( * -- _Dest, * -- _Last );
 return ( _Dest );
 }


template < class _BidIt1, class _BidIt2 >
inline
 _BidIt2 __cdecl _Move_backward_opt ( _BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest,
  random_access_iterator_tag, _Swap_move_tag _Move_cat, _Range_checked_iterator_tag )
 {

 _BidIt2 _Result = _Dest - ( _Last - _First );
 _Move_backward_opt ( _First, _Last, :: std :: _Checked_base ( _Dest ),
  forward_iterator_tag ( ), _Move_cat, _Range_checked_iterator_tag ( ) );
 return _Result;
 }
#line 2784 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template < class _BidIt1, class _BidIt2 >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _BidIt2 > :: _Result, _BidIt2 > :: _Result __cdecl _Move_backward ( _BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest )
 {
 return _Move_backward_opt ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest,
  _Iter_random ( _First, _Dest ), _Move_cat ( _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _BidIt1, class _BidIt2 >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _BidIt2 > :: _Result, _BidIt2 > :: _Result __cdecl _Move_backward ( _BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest )
 {
 return _Move_backward_opt ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest,
  _Iter_random ( _First, _Dest ), _Move_cat ( _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }
#line 2814 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template < class _InIt1, class _InIt2, class _InItCats >
inline
 pair < _InIt1, _InIt2 >
  __cdecl _Mismatch ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2,
   _InItCats, _Range_checked_iterator_tag )
 {







 for (; _First1 != _Last1 && * _First1 == * _First2; )
  ++ _First1, ++ _First2;
 return ( pair < _InIt1, _InIt2 > ( _First1, _First2 ) );
 }
#line 2833 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template < class _InIt1, class _InIt2 >
inline
 pair < _InIt1, _InIt2 >
  __cdecl _Mismatch ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2,
   random_access_iterator_tag, _Range_checked_iterator_tag )
 {

 _InIt2 _Last2 = _First2 + ( _Last1 - _First1 ); ( _Last2 );
 pair < _InIt1, typename :: std :: _Checked_iterator_base_helper < _InIt2 > :: _Checked_iterator_base_type > _Result =
  _Mismatch ( _First1, _Last1, :: std :: _Checked_base ( _First2 ),
   forward_iterator_tag ( ), _Range_checked_iterator_tag ( ) );
 :: std :: _Checked_assign_from_base ( _First2, _Result . second );
 return ( pair < _InIt1, _InIt2 > ( _Result . first, _First2 ) );
 }
#line 2851 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template < class _InIt1, class _InIt2 >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _InIt2 > :: _Result, :: std :: pair < _InIt1, _InIt2 > > :: _Result
  __cdecl mismatch ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2 )
 {
 pair < typename :: std :: _Checked_iterator_base_helper < _InIt1 > :: _Checked_iterator_base_type, _InIt2 > _Result =
  _Mismatch ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _First2,
   _Iter_random ( _First1, _First2 ), :: std :: _Range_checked_iterator_tag ( ) );
 :: std :: _Checked_assign_from_base ( _First1, _Result . first );
 return ( pair < _InIt1, _InIt2 > ( _First1, _Result . second ) );
 }

template < class _InIt1, class _InElem2, size_t _Size >
inline
pair < _InIt1, _InElem2 * >
  __cdecl mismatch ( _InIt1 _First1, _InIt1 _Last1, _InElem2 ( & _First2 ) [ _Size ] )
 {
 pair < _InIt1, :: stdext :: checked_array_iterator < _InElem2 * > > _Result =
  mismatch ( _First1, _Last1, :: stdext :: make_checked_array_iterator ( _First2, _Size ) );
 return ( pair < _InIt1, _InElem2 * > ( _Result . first, _Result . second . base ( ) ) );
 }

template < class _InIt1, class _InIt2 >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _InIt2 > :: _Result, :: std :: pair < _InIt1, _InIt2 > > :: _Result
  __cdecl mismatch ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2 )
 {
 pair < typename :: std :: _Checked_iterator_base_helper < _InIt1 > :: _Checked_iterator_base_type, _InIt2 > _Result =
  _Mismatch ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _First2,
   _Iter_random ( _First1, _First2 ), :: std :: _Range_checked_iterator_tag ( ) );
 :: std :: _Checked_assign_from_base ( _First1, _Result . first );
 return ( pair < _InIt1, _InIt2 > ( _First1, _Result . second ) );
 }
#line 2900 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template < class _InIt1, class _InIt2, class _Pr, class _InItCats >
inline
 pair < _InIt1, _InIt2 >
  __cdecl _Mismatch ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _Pr _Pred,
   _InItCats, _Range_checked_iterator_tag )
 {








 for (; _First1 != _Last1 && _Pred ( * _First1, * _First2 ); )
  ++ _First1, ++ _First2;
 return ( pair < _InIt1, _InIt2 > ( _First1, _First2 ) );
 }
#line 2920 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template < class _InIt1, class _InIt2, class _Pr >
inline
 pair < _InIt1, _InIt2 >
  __cdecl _Mismatch ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _Pr _Pred,
   random_access_iterator_tag, _Range_checked_iterator_tag )
 {

 _InIt2 _Last2 = _First2 + ( _Last1 - _First1 ); ( _Last2 );
 pair < _InIt1, typename :: std :: _Checked_iterator_base_helper < _InIt2 > :: _Checked_iterator_base_type > _Result =
  _Mismatch ( _First1, _Last1, :: std :: _Checked_base ( _First2 ), _Pred,
   forward_iterator_tag ( ), _Range_checked_iterator_tag ( ) );
 :: std :: _Checked_assign_from_base ( _First2, _Result . second );
 return ( pair < _InIt1, _InIt2 > ( _Result . first, _First2 ) );
 }
#line 2938 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template < class _InIt1, class _InIt2, class _Pr >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _InIt2 > :: _Result, :: std :: pair < _InIt1, _InIt2 > > :: _Result
  __cdecl mismatch ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _Pr _Pred )
 {
 pair < typename :: std :: _Checked_iterator_base_helper < _InIt1 > :: _Checked_iterator_base_type, _InIt2 > _Result =
  _Mismatch ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _First2, _Pred,
   _Iter_random ( _First1, _First2 ), :: std :: _Range_checked_iterator_tag ( ) );
 :: std :: _Checked_assign_from_base ( _First1, _Result . first );
 return ( pair < _InIt1, _InIt2 > ( _First1, _Result . second ) );
 }

template < class _InIt1, class _InElem2, class _Pr, size_t _Size >
inline
pair < _InIt1, _InElem2 * >
  __cdecl mismatch ( _InIt1 _First1, _InIt1 _Last1, _InElem2 ( & _First2 ) [ _Size ], _Pr _Pred )
 {
 pair < _InIt1, :: stdext :: checked_array_iterator < _InElem2 * > > _Result =
  mismatch ( _First1, _Last1, :: stdext :: make_checked_array_iterator ( _First2, _Size ), _Pred );
 return ( pair < _InIt1, _InElem2 * > ( _Result . first, _Result . second . base ( ) ) );
 }

template < class _InIt1, class _InIt2, class _Pr >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _InIt2 > :: _Result, :: std :: pair < _InIt1, _InIt2 > > :: _Result
  __cdecl mismatch ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _Pr _Pred )
 {
 pair < typename :: std :: _Checked_iterator_base_helper < _InIt1 > :: _Checked_iterator_base_type, _InIt2 > _Result =
  _Mismatch ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _First2, _Pred,
   _Iter_random ( _First1, _First2 ), :: std :: _Range_checked_iterator_tag ( ) );
 :: std :: _Checked_assign_from_base ( _First1, _Result . first );
 return ( pair < _InIt1, _InIt2 > ( _First1, _Result . second ) );
 }
#line 2987 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template < class _InIt1, class _InIt2, class _InItCats >
inline
 bool __cdecl _Equal ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2,
  _InItCats, _Range_checked_iterator_tag )
 {
 for (; _First1 != _Last1; ++ _First1, ++ _First2 )
  if ( ! ( * _First1 == * _First2 ) )
   return ( false );
 return ( true );
 }

inline bool __cdecl _Equal(const char *_First1, const char *
_Last1, const char *_First2, random_access_iterator_tag, _Range_checked_iterator_tag) 

{ 
#line 3008 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
return ::memcmp(_First1, _First2, _Last1 - _First1) == 0; 
} 

inline bool __cdecl _Equal(const signed char *_First1, const signed char *
_Last1, const signed char *_First2, random_access_iterator_tag, _Range_checked_iterator_tag) 

{ 
#line 3021 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
return ::memcmp(_First1, _First2, _Last1 - _First1) == 0; 
} 

inline bool __cdecl _Equal(const unsigned char *_First1, const unsigned char *
_Last1, const unsigned char *_First2, random_access_iterator_tag, _Range_checked_iterator_tag) 

{ 
#line 3034 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
return ::memcmp(_First1, _First2, _Last1 - _First1) == 0; 
} 


template < class _InIt1, class _InIt2 >
inline
 bool __cdecl _Equal ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2,
  random_access_iterator_tag, _Range_checked_iterator_tag )
 {

 _InIt2 _Last2 = _First2 + ( _Last1 - _First1 ); ( _Last2 );
 return _Equal ( _First1, _Last1, :: std :: _Checked_base ( _First2 ),
  forward_iterator_tag ( ), _Range_checked_iterator_tag ( ) );
 }
#line 3052 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template < class _InIt1, class _InIt2 >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _InIt2 > :: _Result, bool > :: _Result __cdecl equal ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2 )
 {
 return _Equal ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _First2,
  _Iter_random ( _First1, _First2 ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1, class _InElem2, size_t _Size >
inline
bool __cdecl equal ( _InIt1 _First1, _InIt1 _Last1, _InElem2 ( & _First2 ) [ _Size ] )
 {
 return equal ( _First1, _Last1,
  :: stdext :: make_checked_array_iterator ( _First2, _Size ) );
 }

template < class _InIt1, class _InIt2 >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _InIt2 > :: _Result, bool > :: _Result __cdecl equal ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2 )
 {
 return _Equal ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _First2,
  _Iter_random ( _First1, _First2 ), :: std :: _Range_checked_iterator_tag ( ) );
 }
#line 3090 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template < class _InIt1, class _InIt2, class _Pr, class _InItCats >
inline
 bool __cdecl _Equal ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _Pr _Pred,
  _InItCats, _Range_checked_iterator_tag )
 {
 for (; _First1 != _Last1; ++ _First1, ++ _First2 )
  if ( ! _Pred ( * _First1, * _First2 ) )
   return ( false );
 return ( true );
 }


template < class _InIt1, class _InIt2, class _Pr >
inline
 bool __cdecl _Equal ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _Pr _Pred,
  random_access_iterator_tag, _Range_checked_iterator_tag )
 {

 _InIt2 _Last2 = _First2 + ( _Last1 - _First1 ); ( _Last2 );
 return _Equal ( _First1, _Last1, :: std :: _Checked_base ( _First2 ), _Pred,
  forward_iterator_tag ( ), _Range_checked_iterator_tag ( ) );
 }
#line 3116 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template < class _InIt1, class _InIt2, class _Pr >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _InIt2 > :: _Result, bool > :: _Result __cdecl equal ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _Pr _Pred )
 {
 return _Equal ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _First2, _Pred,
  _Iter_random ( _First1, _First2 ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1, class _InElem2, class _Pr, size_t _Size >
inline
bool __cdecl equal ( _InIt1 _First1, _InIt1 _Last1, _InElem2 ( & _First2 ) [ _Size ], _Pr _Pred )
 {
 return equal ( _First1, _Last1,
  :: stdext :: make_checked_array_iterator ( _First2, _Size ), _Pred );
 }

template < class _InIt1, class _InIt2, class _Pr >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _InIt2 > :: _Result, bool > :: _Result __cdecl equal ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _Pr _Pred )
 {
 return _Equal ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _First2, _Pred,
  _Iter_random ( _First1, _First2 ), :: std :: _Range_checked_iterator_tag ( ) );
 }
#line 3154 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template < class _FwdIt, class _Ty > inline
 void __cdecl _Fill ( _FwdIt _First, _FwdIt _Last, const _Ty & _Val )
 {
 ;
 for (; _First != _Last; ++ _First )
  * _First = _Val;
 }

inline void __cdecl _Fill(char *_First, char *
_Last, int _Val) 
{ 
; 
::memset(_First, _Val, _Last - _First); 
} 

inline void __cdecl _Fill(signed char *_First, signed char *
_Last, int _Val) 
{ 
; 
::memset(_First, _Val, _Last - _First); 
} 

inline void __cdecl _Fill(unsigned char *
_First, unsigned char *
_Last, int _Val) 
{ 
; 
::memset(_First, _Val, _Last - _First); 
} 

template < class _FwdIt, class _Ty > inline
 void __cdecl fill ( _FwdIt _First, _FwdIt _Last, const _Ty & _Val )
 {
 _Fill ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Val );
 }


template < class _OutIt,
 class _Diff,
 class _Ty > inline
 void __cdecl _Fill_n ( _OutIt _First, _Diff _Count, const _Ty & _Val,
  _Range_checked_iterator_tag )
 {
 for (; 0 < _Count; -- _Count, ++ _First )
  * _First = _Val;
 }

inline void __cdecl _Fill_n(char *_First, size_t 
_Count, int _Val, _Range_checked_iterator_tag) 
{ 
#line 3210 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
::memset(_First, _Val, _Count); 
} 

inline void __cdecl _Fill_n(signed char *_First, size_t 
_Count, int _Val, _Range_checked_iterator_tag) 
{ 
#line 3222 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
::memset(_First, _Val, _Count); 
} 

inline void __cdecl _Fill_n(unsigned char *_First, size_t 
_Count, int _Val, _Range_checked_iterator_tag) 
{ 
#line 3234 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
::memset(_First, _Val, _Count); 
} 

template < class _OutIt, class _Diff, class _Ty, class _OutCat >
inline
 void __cdecl _Fill_n ( _OutIt _First, _Diff _Count, const _Ty & _Val,
  _OutCat, _Range_checked_iterator_tag )
 {
  _Fill_n ( _First, _Count, _Val, _Range_checked_iterator_tag ( ) );
 }


template < class _OutIt, class _Diff, class _Ty >
inline
 void __cdecl _Fill_n ( _OutIt _First, _Diff _Count, const _Ty & _Val,
  random_access_iterator_tag, _Range_checked_iterator_tag )
 {

  _OutIt _Last = _First + _Count; ( _Last );
  _Fill_n ( :: std :: _Checked_base ( _First ), _Count, _Val,
   _Range_checked_iterator_tag ( ) );
 }
#line 3260 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template < class _OutIt,
 class _Diff,
 class _Ty >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, void > :: _Result __cdecl fill_n ( _OutIt _First, _Diff _Count, const _Ty & _Val )
 {
  _Fill_n ( _First, _Count, _Val, _Iter_cat ( _First ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _OutElem,
 class _Diff,
 class _Ty, size_t _Size >
inline
void __cdecl fill_n ( _OutElem ( & _First ) [ _Size ], _Diff _Count, const _Ty & _Val )
 {
  fill_n ( :: stdext :: make_checked_array_iterator ( _First, _Size ), _Count, _Val );
 }

template < class _OutIt,
 class _Diff,
 class _Ty >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, void > :: _Result __cdecl fill_n ( _OutIt _First, _Diff _Count, const _Ty & _Val )
 {
  _Fill_n ( _First, _Count, _Val, _Iter_cat ( _First ), :: std :: _Range_checked_iterator_tag ( ) );
 }
#line 3301 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template < class _InIt1, class _InIt2 > inline
 bool __cdecl _Lexicographical_compare ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2 )
 {
 ;
 ;
 for (; _First1 != _Last1 && _First2 != _Last2; ++ _First1, ++ _First2 )
  if ( ( ( * _First1 ) < ( * _First2 ) ) )
   return ( true );
  else if ( * _First2 < * _First1 )
   return ( false );
 return ( _First1 == _Last1 && _First2 != _Last2 );
 }

template < class _InIt1, class _InIt2 > inline
 bool __cdecl lexicographical_compare ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2 )
 {
 return _Lexicographical_compare ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ) );
 }

inline bool __cdecl lexicographical_compare(const unsigned char *
_First1, const unsigned char *_Last1, const unsigned char *
_First2, const unsigned char *_Last2) 
{ 
; 
; 
auto ptrdiff_t _Num1 = (_Last1 - _First1); 
auto ptrdiff_t _Num2 = (_Last2 - _First2); 
auto int _Ans = ::memcmp(_First1, _First2, (_Num1 < _Num2) ? _Num1 : _Num2); 
return (_Ans < 0) || ((_Ans == 0) && (_Num1 < _Num2)); 
} 
#line 3350 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool __cdecl _Lexicographical_compare ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred )
 {
 ;
 ;
 ;
 for (; _First1 != _Last1 && _First2 != _Last2; ++ _First1, ++ _First2 )
  if ( _Pred ( * _First1, * _First2 ) )
   return ( true );
  else if ( _Pred ( * _First2, * _First1 ) )
   return ( false );
 return ( _First1 == _Last1 && _First2 != _Last2 );
 }

template < class _InIt1, class _InIt2, class _Pr > inline
 bool __cdecl lexicographical_compare ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred )
 {
 return _Lexicographical_compare ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ), _Pred );
 }
#line 3381 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template < class _Ty > inline
 const _Ty & ( __cdecl max ) ( const _Ty & _Left, const _Ty & _Right )
 {
 return ( ( ( _Left ) < ( _Right ) ) ? _Right : _Left );
 }


template < class _Ty,
 class _Pr > inline
 const _Ty & ( __cdecl max ) ( const _Ty & _Left, const _Ty & _Right, _Pr _Pred )
 {
 return ( _Pred ( _Left, _Right ) ? _Right : _Left );
 }


template < class _Ty > inline
 const _Ty & ( __cdecl min ) ( const _Ty & _Left, const _Ty & _Right )
 {
 return ( ( ( _Right ) < ( _Left ) ) ? _Right : _Left );
 }


template < class _Ty,
 class _Pr > inline
 const _Ty & ( __cdecl min ) ( const _Ty & _Left, const _Ty & _Right, _Pr _Pred )
 {
 return ( _Pred ( _Right, _Left ) ? _Right : _Left );
 }

}

namespace stdext { 


template < class _Iterator >
 class checked_array_iterator
  : public :: std :: iterator <
   typename :: std :: iterator_traits < _Iterator > :: iterator_category,
   typename :: std :: iterator_traits < _Iterator > :: value_type,
   typename :: std :: iterator_traits < _Iterator > :: difference_type,
   typename :: std :: iterator_traits < _Iterator > :: pointer,
   typename :: std :: iterator_traits < _Iterator > :: reference >
 {
public :
 typedef checked_array_iterator < _Iterator > _Myt;
 typedef typename :: std :: iterator_traits < _Iterator > :: difference_type difference_type;
 typedef typename :: std :: iterator_traits < _Iterator > :: pointer pointer;
 typedef typename :: std :: iterator_traits < _Iterator > :: reference reference;

 typedef :: std :: _Range_checked_iterator_tag _Checked_iterator_category;
 typedef _Iterator _Inner_type;

 typedef _Iterator _Checked_iterator_base_type;

 _Checked_iterator_base_type _Checked_iterator_base ( ) const
 {
  return _Mycont + _Current;
 }

 void _Checked_iterator_assign_from_base ( _Checked_iterator_base_type _Base )
 {
  _Current = _Base - _Mycont;
 }



 checked_array_iterator ( ) :
  _Size ( 0 ), _Current ( 0 )
 {
 }

 checked_array_iterator ( _Iterator _Cont, size_t _S, size_t _Index = 0 )
 {
  { if ( ! ( _Index <= _S ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  _Mycont = _Cont;
  _Size = _S;
  _Current = _Index;
 }

 _Iterator base ( ) const
 {
  return _Mycont + _Current;
 }

 size_t __Size ( ) const
 {
  return _Size;
 }

 bool operator == ( const _Myt & _Right ) const
 {
  { if ( ! ( _Mycont == _Right . _Mycont ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  return _Current == _Right . _Current;
 }

 bool operator != ( const _Myt & _Right ) const
 {
  return ! ( * this == _Right );
 }

 bool operator < ( const _Myt & _Right ) const
 {
  { if ( ! ( _Mycont == _Right . _Mycont ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  return _Current < _Right . _Current;
 }

 bool operator > ( const _Myt & _Right ) const
 {
  return _Right < * this;
 }

 bool operator <= ( const _Myt & _Right ) const
 {
  return ! ( _Right < * this );
 }

 bool operator >= ( const _Myt & _Right ) const
 {
  return ! ( * this < _Right );
 }

 reference operator * ( ) const
 {
  { if ( ! ( _Current < _Size ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  return * ( _Mycont + _Current );
 }

 pointer operator -> ( ) const
 {
  return ( & * * this );
 }

 checked_array_iterator & operator ++ ( )
 {
  { if ( ! ( _Current < _Size ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  ++ _Current;
  return * this;
 }

 _Myt operator ++ ( int )
 {
  checked_array_iterator _Tmp = * this;
  ++ * this;
  return _Tmp;
 }

 _Myt & operator -- ( )
 {
  { if ( ! ( _Current > 0 ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  -- _Current;
  return * this;
 }

 _Myt operator -- ( int )
 {
  checked_array_iterator _Tmp = * this;
  -- * this;
  return _Tmp;
 }



 _Myt & operator += ( difference_type _Off )
 {
  { if ( ! ( _Current + _Off <= _Size && _Current + _Off >= 0 ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  _Current += _Off;
  return * this;
 }

 _Myt operator + ( difference_type _Off ) const
 {
  checked_array_iterator _Tmp = * this;
  return ( _Tmp += _Off );
 }

 _Myt & operator -= ( difference_type _Off )
 {
  return ( * this += - _Off );
 }

 _Myt operator - ( difference_type _Off ) const
 {
  checked_array_iterator _Tmp = * this;
  return ( _Tmp -= _Off );
 }

 difference_type operator - ( const checked_array_iterator & _Right ) const
 {
  { if ( ! ( _Mycont == _Right . _Mycont ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  return _Current - _Right . _Current;
 }

 reference operator [ ] ( difference_type _Off ) const
 {
  { if ( ! ( _Current + _Off < _Size && _Current + _Off >= 0 ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  return * ( _Mycont + _Current + _Off );
 }

protected :
 void _Xran ( ) const
 {
  throw :: std :: out_of_range ( "invalid checked_array_iterator<T> subscript" );
 }

 void _Xinvarg ( ) const
 {
  throw :: std :: invalid_argument ( "invalid checked_array_iterator<T> argument" );
 }

 _Iterator _Mycont;
 size_t _Current;
 size_t _Size;
 };

template < class _Iter >
checked_array_iterator < _Iter > make_checked_array_iterator ( _Iter _Ptr, size_t _Size )
{
 return checked_array_iterator < _Iter > ( _Ptr, _Size );
}

template < class _InIt,
 class _OutIt > inline
 _OutIt __cdecl unchecked_copy ( _InIt _First, _InIt _Last, _OutIt _Dest )
 {
  return ( :: std :: _Copy_opt ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest,
   :: std :: _Iter_random ( _First, _Dest ), :: std :: _Ptr_cat ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) ) );
 }

template < class _InIt, class _OutIt >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result __cdecl checked_copy ( _InIt _First, _InIt _Last, _OutIt _Dest )
 {
 return ( :: std :: _Copy_opt ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest,
  :: std :: _Iter_random ( _First, _Dest ), :: std :: _Ptr_cat ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) ) );
 }

template < class _InIt, class _OutElem, size_t _Size >
inline
_OutElem * __cdecl checked_copy ( _InIt _First, _InIt _Last, _OutElem ( & _Dest ) [ _Size ] )
 {
 return checked_copy ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), :: stdext :: make_checked_array_iterator ( _Dest, _Size ) ) . base ( );
 }

template < class _InIt, class _OutIt >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result __cdecl checked_copy ( _InIt _First, _InIt _Last, _OutIt _Dest )
 {
 return ( :: std :: _Copy_opt ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest,
  :: std :: _Iter_random ( _First, _Dest ), :: std :: _Ptr_cat ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) ) );
 }

template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 __cdecl unchecked_copy_backward ( _BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest )
 {
  return ( :: std :: _Copy_backward_opt ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest,
   :: std :: _Iter_random ( _First, _Dest ), :: std :: _Ptr_cat ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) ) );
 }

template < class _BidIt1,
 class _BidIt2 > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _BidIt2 > :: _Result, _BidIt2 > :: _Result __cdecl checked_copy_backward ( _BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest )
 {
 return :: std :: _Copy_backward_opt ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest,
  :: std :: _Iter_random ( _First, _Dest ), :: std :: _Ptr_cat ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _BidIt1,
 class _BidIt2 > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _BidIt2 > :: _Result, _BidIt2 > :: _Result __cdecl checked_copy_backward ( _BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest )
 {
 return :: std :: _Copy_backward_opt ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest,
  :: std :: _Iter_random ( _First, _Dest ), :: std :: _Ptr_cat ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt,
 class _OutIt > inline
 _OutIt __cdecl _Unchecked_move ( _InIt _First, _InIt _Last, _OutIt _Dest )
 {
  return ( :: std :: _Move_opt ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest,
   :: std :: _Iter_random ( _First, _Dest ), :: std :: _Move_cat ( _Dest ), :: std :: _Range_checked_iterator_tag ( ) ) );
 }

template < class _InIt, class _OutIt >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result __cdecl _Checked_move ( _InIt _First, _InIt _Last, _OutIt _Dest )
 {
 return :: std :: _Move_opt ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest,
  :: std :: _Iter_random ( _First, _Dest ), :: std :: _Move_cat ( _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt, class _OutElem, size_t _Size >
inline
_OutElem * __cdecl _Checked_move ( _InIt _First, _InIt _Last, _OutElem ( & _Dest ) [ _Size ] )
 {
 return _Checked_move ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ),
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ) ) . base ( );
 }

template < class _InIt, class _OutIt >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result __cdecl _Checked_move ( _InIt _First, _InIt _Last, _OutIt _Dest )
 {
 return :: std :: _Move_opt ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest,
  :: std :: _Iter_random ( _First, _Dest ), :: std :: _Move_cat ( _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 __cdecl _Unchecked_move_backward ( _BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest )
 {
  return ( :: std :: _Move_backward_opt ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest,
   :: std :: _Iter_random ( _First, _Dest ), :: std :: _Move_cat ( _Dest ), :: std :: _Range_checked_iterator_tag ( ) ) );
 }

template < class _BidIt1, class _BidIt2 >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _BidIt2 > :: _Result, _BidIt2 > :: _Result __cdecl _Checked_move_backward ( _BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest )
 {
 return :: std :: _Move_backward_opt ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest,
  :: std :: _Iter_random ( _First, _Dest ), :: std :: _Move_cat ( _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _BidIt1, class _BidIt2 >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _BidIt2 > :: _Result, _BidIt2 > :: _Result __cdecl _Checked_move_backward ( _BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest )
 {
 return :: std :: _Move_backward_opt ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest,
  :: std :: _Iter_random ( _First, _Dest ), :: std :: _Move_cat ( _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _OutIt,
 class _Diff,
 class _Ty > inline
 void __cdecl unchecked_fill_n ( _OutIt _First, _Diff _Count, const _Ty & _Val )
 {
  :: std :: _Fill_n ( _First, _Count, _Val, :: std :: _Iter_cat ( _First ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _OutIt,
 class _Diff,
 class _Ty >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, void > :: _Result __cdecl checked_fill_n ( _OutIt _First, _Diff _Count, const _Ty & _Val )
 {
  _Fill_n ( _First, _Count, _Val, :: std :: _Iter_cat ( _First ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _OutElem,
 class _Diff,
 class _Ty, size_t _Size >
inline
void __cdecl checked_fill_n ( _OutElem ( & _First ) [ _Size ], _Diff _Count, const _Ty & _Val )
 {
  checked_fill_n ( :: stdext :: make_checked_array_iterator ( _First, _Size ), _Count, _Val );
 }

template < class _OutIt,
 class _Diff,
 class _Ty >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, void > :: _Result __cdecl checked_fill_n ( _OutIt _First, _Diff _Count, const _Ty & _Val )
 {
  _Fill_n ( _First, _Count, _Val, :: std :: _Iter_cat ( _First ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1, class _InIt2 >
inline
 :: std :: pair < _InIt1, _InIt2 >
  __cdecl unchecked_mismatch ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2 )
 {

 :: std :: pair < typename :: std :: _Checked_iterator_base_helper < _InIt1 > :: _Checked_iterator_base_type, _InIt2 > _Result =
  :: std :: _Mismatch ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _First2,
   :: std :: _Iter_random ( _First1, _First2 ), :: std :: _Range_checked_iterator_tag ( ) );
 :: std :: _Checked_assign_from_base ( _First1, _Result . first );
 return ( :: std :: pair < _InIt1, _InIt2 > ( _First1, _Result . second ) );




 }
#line 3769 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template < class _InIt1, class _InIt2 >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _InIt2 > :: _Result, :: std :: pair < _InIt1, _InIt2 > > :: _Result
  __cdecl checked_mismatch ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2 )
 {
 :: std :: pair < typename :: std :: _Checked_iterator_base_helper < _InIt1 > :: _Checked_iterator_base_type, _InIt2 > _Result =
  :: std :: _Mismatch ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _First2,
   :: std :: _Iter_random ( _First1, _First2 ), :: std :: _Range_checked_iterator_tag ( ) );
 :: std :: _Checked_assign_from_base ( _First1, _Result . first );
 return ( :: std :: pair < _InIt1, _InIt2 > ( _First1, _Result . second ) );
 }

template < class _InIt1, class _InElem2, size_t _Size >
inline
:: std :: pair < _InIt1, _InElem2 * >
  __cdecl checked_mismatch ( _InIt1 _First1, _InIt1 _Last1, _InElem2 ( & _First2 ) [ _Size ] )
 {
 :: std :: pair < _InIt1, :: stdext :: checked_array_iterator < _InElem2 * > > _Result =
  checked_mismatch ( _First1, _Last1, :: stdext :: make_checked_array_iterator ( _First2, _Size ) );
 return ( :: std :: pair < _InIt1, _InElem2 * > ( _Result . first, _Result . second . base ( ) ) );
 }

template < class _InIt1, class _InIt2 >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _InIt2 > :: _Result, :: std :: pair < _InIt1, _InIt2 > > :: _Result
  __cdecl checked_mismatch ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2 )
 {
 :: std :: pair < typename :: std :: _Checked_iterator_base_helper < _InIt1 > :: _Checked_iterator_base_type, _InIt2 > _Result =
  :: std :: _Mismatch ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _First2,
   :: std :: _Iter_random ( _First1, _First2 ), :: std :: _Range_checked_iterator_tag ( ) );
 :: std :: _Checked_assign_from_base ( _First1, _Result . first );
 return ( :: std :: pair < _InIt1, _InIt2 > ( _First1, _Result . second ) );
 }

template < class _InIt1, class _InIt2, class _Pr >
inline
 :: std :: pair < _InIt1, _InIt2 >
  __cdecl unchecked_mismatch ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _Pr _Pred )
 {

 :: std :: pair < typename :: std :: _Checked_iterator_base_helper < _InIt1 > :: _Checked_iterator_base_type, _InIt2 > _Result =
  :: std :: _Mismatch ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _First2, _Pred,
   :: std :: _Iter_random ( _First1, _First2 ), :: std :: _Range_checked_iterator_tag ( ) );
 :: std :: _Checked_assign_from_base ( _First1, _Result . first );
 return ( :: std :: pair < _InIt1, _InIt2 > ( _First1, _Result . second ) );




 }
#line 3821 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
template < class _InIt1, class _InIt2, class _Pr >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _InIt2 > :: _Result, :: std :: pair < _InIt1, _InIt2 > > :: _Result
  __cdecl checked_mismatch ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _Pr _Pred )
 {
 :: std :: pair < typename :: std :: _Checked_iterator_base_helper < _InIt1 > :: _Checked_iterator_base_type, _InIt2 > _Result =
  :: std :: _Mismatch ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _First2, _Pred,
   :: std :: _Iter_random ( _First1, _First2 ), :: std :: _Range_checked_iterator_tag ( ) );
 :: std :: _Checked_assign_from_base ( _First1, _Result . first );
 return ( :: std :: pair < _InIt1, _InIt2 > ( _First1, _Result . second ) );
 }

template < class _InIt1, class _InElem2, class _Pr, size_t _Size >
inline
:: std :: pair < _InIt1, _InElem2 * >
  __cdecl checked_mismatch ( _InIt1 _First1, _InIt1 _Last1, _InElem2 ( & _First2 ) [ _Size ], _Pr _Pred )
 {
 :: std :: pair < _InIt1, :: stdext :: checked_array_iterator < _InElem2 * > > _Result =
  checked_mismatch ( _First1, _Last1, :: stdext :: make_checked_array_iterator ( _First2, _Size ), _Pred );
 return ( :: std :: pair < _InIt1, _InElem2 * > ( _Result . first, _Result . second . base ( ) ) );
 }

template < class _InIt1, class _InIt2, class _Pr >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _InIt2 > :: _Result, :: std :: pair < _InIt1, _InIt2 > > :: _Result
  __cdecl checked_mismatch ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _Pr _Pred )
 {
 :: std :: pair < typename :: std :: _Checked_iterator_base_helper < _InIt1 > :: _Checked_iterator_base_type, _InIt2 > _Result =
  :: std :: _Mismatch ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _First2, _Pred,
   :: std :: _Iter_random ( _First1, _First2 ), :: std :: _Range_checked_iterator_tag ( ) );
 :: std :: _Checked_assign_from_base ( _First1, _Result . first );
 return ( :: std :: pair < _InIt1, _InIt2 > ( _First1, _Result . second ) );
 }

template < class _InIt1, class _InIt2 >
inline
 bool __cdecl unchecked_equal ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2 )
 {
 return :: std :: _Equal ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _First2,
  :: std :: _Iter_random ( _First1, _First2 ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1, class _InIt2 >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _InIt2 > :: _Result, bool > :: _Result __cdecl checked_equal ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2 )
 {
 return :: std :: _Equal ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _First2,
  :: std :: _Iter_random ( _First1, _First2 ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1, class _InElem2, size_t _Size >
inline
bool __cdecl checked_equal ( _InIt1 _First1, _InIt1 _Last1, _InElem2 ( & _First2 ) [ _Size ] )
 {
 return checked_equal ( _First1, _Last1,
  :: stdext :: make_checked_array_iterator ( _First2, _Size ) );
 }

template < class _InIt1, class _InIt2 >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _InIt2 > :: _Result, bool > :: _Result __cdecl checked_equal ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2 )
 {
 return :: std :: _Equal ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _First2,
  :: std :: _Iter_random ( _First1, _First2 ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1, class _InIt2, class _Pr >
inline
 bool __cdecl unchecked_equal ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _Pr _Pred )
 {
 return :: std :: _Equal ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _First2, _Pred,
  :: std :: _Iter_random ( _First1, _First2 ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1, class _InIt2, class _Pr >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _InIt2 > :: _Result, bool > :: _Result __cdecl checked_equal ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _Pr _Pred )
 {
 return :: std :: _Equal ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _First2, _Pred,
  :: std :: _Iter_random ( _First1, _First2 ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1, class _InElem2, class _Pr, size_t _Size >
inline
bool __cdecl checked_equal ( _InIt1 _First1, _InIt1 _Last1, _InElem2 ( & _First2 ) [ _Size ], _Pr _Pred )
 {
 return checked_equal ( _First1, _Last1,
  :: stdext :: make_checked_array_iterator ( _First2, _Size ), _Pred );
 }

template < class _InIt1, class _InIt2, class _Pr >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _InIt2 > :: _Result, bool > :: _Result __cdecl checked_equal ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _Pr _Pred )
 {
 return :: std :: _Equal ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _First2, _Pred,
  :: std :: _Iter_random ( _First1, _First2 ), :: std :: _Range_checked_iterator_tag ( ) );
 }

}
#line 3977 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
extern "C" void __cdecl _invalid_parameter_noinfo(); 
#line 3983 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
#pragma warning(pop)
#line 13 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xmemory"
#pragma warning(push,3)
#pragma warning(disable: 4100)
#line 3984 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xutility"
#pragma pack ( pop )
#line 12 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xmemory"
#pragma pack ( push, 8 )
#line 32 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xmemory"
namespace std { 

template < class _Ty > inline
 _Ty * _Allocate ( size_t _Count, _Ty * )
 {
 if ( _Count <= 0 )
  _Count = 0;
 else if ( ( ( size_t ) ( - 1 ) / _Count ) < sizeof ( _Ty ) )
  throw std :: bad_alloc ( 0 );


 return ( ( _Ty * ) :: operator new ( _Count * sizeof ( _Ty ) ) );
 }


template < class _T1,
 class _T2 > inline
 void _Construct ( _T1 * _Ptr, const _T2 & _Val )
 {
 void * _Vptr = _Ptr;
 :: new ( _Vptr ) _T1 ( _Val );
 }


template < class _Ty > inline
 void _Destroy ( _Ty * _Ptr )
 {
 ( _Ptr ) -> ~ _Ty ( );
 }


template<> inline void _Destroy(char *) 
{ 
} 


template<> inline void _Destroy(__wchar_t *) 
{ 
} 



template<class _Ty> 
struct _Allocator_base { 

typedef _Ty value_type; 
}; 


template<class _Ty> 
struct _Allocator_base< const _Ty>  { 

typedef _Ty value_type; 
}; 


template < class _Ty >
 class allocator
  : public _Allocator_base < _Ty >
 {
public :
 typedef _Allocator_base < _Ty > _Mybase;
 typedef typename _Mybase :: value_type value_type;
 typedef value_type * pointer;
 typedef value_type & reference;
 typedef const value_type * const_pointer;
 typedef const value_type & const_reference;

 typedef size_t size_type;
 typedef ptrdiff_t difference_type;

 template < class _Other >
  struct rebind
  {
  typedef allocator < _Other > other;
  };

 pointer address ( reference _Val ) const
  {
  return ( & _Val );
  }

 const_pointer address ( const_reference _Val ) const
  {
  return ( & _Val );
  }

 allocator ( ) throw ( )
  {
  }

 allocator ( const allocator < _Ty > & ) throw ( )
  {
  }

 template < class _Other >
  allocator ( const allocator < _Other > & ) throw ( )
  {
  }

 template < class _Other >
  allocator < _Ty > & operator = ( const allocator < _Other > & )
  {
  return ( * this );
  }

 void deallocate ( pointer _Ptr, size_type )
  {
  :: operator delete ( _Ptr );
  }

 pointer allocate ( size_type _Count )
  {
  return ( _Allocate ( _Count, ( pointer ) 0 ) );
  }

 pointer allocate ( size_type _Count, const void * )
  {
  return ( allocate ( _Count ) );
  }

 void construct ( pointer _Ptr, const _Ty & _Val )
  {
  _Construct ( _Ptr, _Val );
  }

 void destroy ( pointer _Ptr )
  {
  _Destroy ( _Ptr );
  }

 size_t max_size ( ) const throw ( )
  {
  size_t _Count = ( size_t ) ( - 1 ) / sizeof ( _Ty );
  return ( 0 < _Count ? _Count : 1 );
  }
 };


template < class _Ty,
 class _Other > inline
 bool operator == ( const allocator < _Ty > &, const allocator < _Other > & ) throw ( )
 {
 return ( true );
 }

template < class _Ty,
 class _Other > inline
 bool operator != ( const allocator < _Ty > &, const allocator < _Other > & ) throw ( )
 {
 return ( false );
 }


template<> class allocator< void>  { 


public: typedef void _Ty; 
typedef _Ty *pointer; 
typedef const _Ty *const_pointer; 
typedef _Ty value_type; 

template<class _Other> 
struct rebind { 

typedef std::allocator< _Other>  other; 
}; 

allocator() throw() 
{ 
} 

allocator(const std::allocator< void>  &) throw() 
{ 
} 

template < class _Other >
  allocator ( const allocator < _Other > & ) throw ( )
  {
  }

template < class _Other >
  allocator < _Ty > & operator = ( const allocator < _Other > & )
  {
  return ( * this );
  }
}; 


template < class _Alloc > inline
 void _Destroy_range ( typename _Alloc :: pointer _First,
  typename _Alloc :: pointer _Last, _Alloc & _Al )
 {
 _Destroy_range ( _First, _Last, _Al, _Ptr_cat ( _First, _Last ) );
 }

template < class _Alloc > inline
 void _Destroy_range ( typename _Alloc :: pointer _First,
  typename _Alloc :: pointer _Last, _Alloc & _Al,
  _Nonscalar_ptr_iterator_tag )
 {
 for (; _First != _Last; ++ _First )
  _Al . destroy ( _First );
 }

template < class _Alloc > inline
 void _Destroy_range ( typename _Alloc :: pointer _First,
  typename _Alloc :: pointer _Last, _Alloc & _Al,
  _Scalar_ptr_iterator_tag )
 {
 }
}


#pragma warning(default: 4100)
#pragma warning(pop)
#line 10 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xstring"
#pragma warning(push,3)
#pragma warning(disable:4412)
#line 248 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xmemory"
#pragma pack ( pop )
#line 9 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xstring"
#pragma pack ( push, 8 )
#line 17 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xstring"
namespace std { 

#pragma warning(disable:4251)

template < class _Elem,
 class _Traits = char_traits < _Elem >,
 class _Ax = allocator < _Elem > >
 class basic_string;


template < class _Elem,
 class _Traits,
 class _Alloc >
 class _String_const_iterator
  : public _Ranit_base < _Elem, typename _Alloc :: difference_type,
   typename _Alloc :: const_pointer, typename _Alloc :: const_reference, _Iterator_base_secure >
 {
public :
 typedef _String_const_iterator < _Elem, _Traits, _Alloc > _Myt;
 typedef basic_string < _Elem, _Traits, _Alloc > _Mystring;

 typedef random_access_iterator_tag iterator_category;
 typedef _Elem value_type;
 typedef typename _Alloc :: difference_type difference_type;
 typedef typename _Alloc :: const_pointer pointer;
 typedef typename _Alloc :: const_reference reference;
 typedef _Elem * _Inner_type;


 typedef _Range_checked_iterator_tag _Checked_iterator_category;



 typedef pointer _Checked_iterator_base_type;

 _Checked_iterator_base_type _Checked_iterator_base ( ) const
 {
  return _Myptr;
 }

 void _Checked_iterator_assign_from_base ( _Checked_iterator_base_type _Base )
 {
  this -> _Myptr = _Base;
 }


  _String_const_iterator ( )
  {
  _Myptr = 0;
  }
















   _String_const_iterator ( pointer _Ptr, const _Container_base_secure * _Pstring )
   {
   { if ( ! ( _Pstring != 0 && _Ptr != 0 && ( ( _Mystring * ) _Pstring ) -> _Myptr ( ) <= _Ptr && _Ptr <= ( ( ( _Mystring * ) _Pstring ) -> _Myptr ( ) + ( ( _Mystring * ) _Pstring ) -> _Mysize ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };

   this -> _Mycont = _Pstring;
   _Myptr = _Ptr;
   }











 reference operator * ( ) const
  {












  if ( this -> _Mycont != ( ( const _Container_base_secure * ) - 4 ) )
  {
   { if ( ! ( this -> _Has_container ( ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
   { if ( ! ( _Myptr < ( ( ( _Mystring * ) this -> _Mycont ) -> _Myptr ( ) + ( ( _Mystring * ) ( this -> _Mycont ) ) -> _Mysize ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  }


  return ( * _Myptr );
  }

 pointer operator -> ( ) const
  {
  return ( & * * this );
  }

 _Myt & operator ++ ( )
  {
  if ( this -> _Mycont != ( ( const _Container_base_secure * ) - 4 ) )
  {
   { if ( ! ( this -> _Has_container ( ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
   { if ( ! ( _Myptr < ( ( ( _Mystring * ) this -> _Mycont ) -> _Myptr ( ) + ( ( _Mystring * ) this -> _Mycont ) -> _Mysize ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  }
  ++ _Myptr;
  return ( * this );
  }

 _Myt operator ++ ( int )
  {
  _Myt _Tmp = * this;
  ++ * this;
  return ( _Tmp );
  }

 _Myt & operator -- ( )
  {
  if ( this -> _Mycont != ( ( const _Container_base_secure * ) - 4 ) )
  {
   { if ( ! ( this -> _Has_container ( ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
   { if ( ! ( _Myptr > ( ( _Mystring * ) this -> _Mycont ) -> _Myptr ( ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  }
  -- _Myptr;
  return ( * this );
  }

 _Myt operator -- ( int )
  {
  _Myt _Tmp = * this;
  -- * this;
  return ( _Tmp );
  }

 _Myt & operator += ( difference_type _Off )
  {
  if ( this -> _Mycont != ( ( const _Container_base_secure * ) - 4 ) )
  {
   { if ( ! ( this -> _Has_container ( ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
   { if ( ! ( _Myptr + _Off <= ( ( ( _Mystring * ) this -> _Mycont ) -> _Myptr ( ) + ( ( _Mystring * ) this -> _Mycont ) -> _Mysize ) && _Myptr + _Off >= ( ( _Mystring * ) this -> _Mycont ) -> _Myptr ( ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };

  }
  _Myptr += _Off;
  return ( * this );
  }

 _Myt operator + ( difference_type _Off ) const
  {
  _Myt _Tmp = * this;
  return ( _Tmp += _Off );
  }

 _Myt & operator -= ( difference_type _Off )
  {
  return ( * this += - _Off );
  }

 _Myt operator - ( difference_type _Off ) const
  {
  _Myt _Tmp = * this;
  return ( _Tmp -= _Off );
  }

 difference_type operator - ( const _Myt & _Right ) const
  {




  if ( this -> _Mycont != ( ( const _Container_base_secure * ) - 4 ) )
  {
   { if ( ! ( this -> _Has_container ( ) && this -> _Same_container ( _Right ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  }


  return ( _Myptr - _Right . _Myptr );
  }

 reference operator [ ] ( difference_type _Off ) const
  {
  return ( * ( * this + _Off ) );
  }

 bool operator == ( const _Myt & _Right ) const
  {




  if ( this -> _Mycont != ( ( const _Container_base_secure * ) - 4 ) )
  {
   { if ( ! ( this -> _Has_container ( ) && this -> _Same_container ( _Right ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  }


  return ( _Myptr == _Right . _Myptr );
  }

 bool operator != ( const _Myt & _Right ) const
  {
  return ( ! ( * this == _Right ) );
  }

 bool operator < ( const _Myt & _Right ) const
  {




  if ( this -> _Mycont != ( ( const _Container_base_secure * ) - 4 ) )
  {
   { if ( ! ( this -> _Has_container ( ) && this -> _Same_container ( _Right ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  }


  return ( _Myptr < _Right . _Myptr );
  }

 bool operator > ( const _Myt & _Right ) const
  {
  return ( _Right < * this );
  }

 bool operator <= ( const _Myt & _Right ) const
  {
  return ( ! ( _Right < * this ) );
  }

 bool operator >= ( const _Myt & _Right ) const
  {
  return ( ! ( * this < _Right ) );
  }












 static void __cdecl _Xlen ( )
  {
  _Mystring :: _Xlen ( );
  }

 static void __cdecl _Xran ( )
  {
  _Mystring :: _Xran ( );
  }

 static void __cdecl _Xinvarg ( )
  {
  _Mystring :: _Xinvarg ( );
  }

 pointer _Myptr;
 };
#line 297 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 _String_const_iterator < _Elem, _Traits, _Alloc > __cdecl operator + (
  typename _String_const_iterator < _Elem, _Traits, _Alloc >
   :: difference_type _Off,
  _String_const_iterator < _Elem, _Traits, _Alloc > _Next )
 {
 return ( _Next += _Off );
 }


template < class _Elem,
 class _Traits,
 class _Alloc >
 class _String_iterator
  : public _String_const_iterator < _Elem, _Traits, _Alloc >
 {
public :
 typedef _String_iterator < _Elem, _Traits, _Alloc > _Myt;
 typedef _String_const_iterator < _Elem, _Traits, _Alloc > _Mybase;

 typedef random_access_iterator_tag iterator_category;
 typedef _Elem value_type;
 typedef typename _Alloc :: difference_type difference_type;
 typedef typename _Alloc :: pointer pointer;
 typedef typename _Alloc :: reference reference;

  _String_iterator ( )
  {
  }











   _String_iterator ( pointer _Ptr, const _Container_base_secure * _Pstring )
   : _Mybase ( _Ptr, _Pstring )
   {
   }











 typedef pointer _Checked_iterator_base_type;

 _Checked_iterator_base_type _Checked_iterator_base ( ) const
 {
  return const_cast < pointer > ( this -> _Myptr );
 }

 void _Checked_iterator_assign_from_base ( _Checked_iterator_base_type _Base )
 {
  this -> _Myptr = _Base;
 }


 reference operator * ( ) const
  {
  return ( ( reference ) * * ( _Mybase * ) this );
  }

 pointer operator -> ( ) const
  {
  return ( & * * this );
  }

 _Myt & operator ++ ( )
  {
  ++ ( * ( _Mybase * ) this );
  return ( * this );
  }

 _Myt operator ++ ( int )
  {
  _Myt _Tmp = * this;
  ++ * this;
  return ( _Tmp );
  }

 _Myt & operator -- ( )
  {
  -- ( * ( _Mybase * ) this );
  return ( * this );
  }

 _Myt operator -- ( int )
  {
  _Myt _Tmp = * this;
  -- * this;
  return ( _Tmp );
  }

 _Myt & operator += ( difference_type _Off )
  {
  ( * ( _Mybase * ) this ) += _Off;
  return ( * this );
  }

 _Myt operator + ( difference_type _Off ) const
  {
  _Myt _Tmp = * this;
  return ( _Tmp += _Off );
  }

 _Myt & operator -= ( difference_type _Off )
  {
  return ( * this += - _Off );
  }

 _Myt operator - ( difference_type _Off ) const
  {
  _Myt _Tmp = * this;
  return ( _Tmp -= _Off );
  }

 difference_type operator - ( const _Mybase & _Right ) const
  {
  return ( ( _Mybase ) * this - _Right );
  }

 reference operator [ ] ( difference_type _Off ) const
  {
  return ( * ( * this + _Off ) );
  }
 };
#line 437 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 _String_iterator < _Elem, _Traits, _Alloc > operator + (
  typename _String_iterator < _Elem, _Traits, _Alloc >
   :: difference_type _Off,
  _String_iterator < _Elem, _Traits, _Alloc > _Next )
 {
 return ( _Next += _Off );
 }


class _String_base : public _Container_base_secure { 



public: static void __cdecl _Xlen(); 

static void __cdecl _Xran(); 

static void __cdecl _Xinvarg(); 
}; 


template < class _Ty,
 class _Alloc >
 class _String_val
  : public _String_base
 {
protected :
 typedef typename _Alloc :: template
  rebind < _Ty > :: other _Alty;

  _String_val ( _Alty _Al = _Alty ( ) )
  : _Alval ( _Al )
  {
  }

public :
  _String_val ( const _String_val & _Right )
  : _Alval ( _Right . _Alval )
  {






  }

protected :
 _Alty _Alval;
 };
#line 492 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xstring"
template < class _Elem,
 class _Traits,
 class _Ax >
 class basic_string
  : public _String_val < _Elem, _Ax >
 {
public :
 typedef basic_string < _Elem, _Traits, _Ax > _Myt;
 typedef _String_val < _Elem, _Ax > _Mybase;
 typedef typename _Mybase :: _Alty _Alloc;
 typedef typename _Alloc :: size_type size_type;
 typedef typename _Alloc :: difference_type _Dift;
 typedef _Dift difference_type;
 typedef typename _Alloc :: pointer _Tptr;
 typedef typename _Alloc :: const_pointer _Ctptr;
 typedef _Tptr pointer;
 typedef _Ctptr const_pointer;
 typedef typename _Alloc :: reference _Reft;
 typedef _Reft reference;
 typedef typename _Alloc :: const_reference const_reference;
 typedef typename _Alloc :: value_type value_type;



 typedef _String_iterator < _Elem, _Traits, _Alloc > iterator;
 typedef _String_const_iterator < _Elem, _Traits, _Alloc > const_iterator;


 friend class _String_const_iterator < _Elem, _Traits, _Alloc >;

 typedef std :: reverse_iterator < iterator > reverse_iterator;
 typedef std :: reverse_iterator < const_iterator > const_reverse_iterator;







































  basic_string ( )
  : _Mybase ( )
  {
  _Tidy ( );
  }

































 explicit basic_string ( const _Alloc & _Al )
  : _Mybase ( _Al )
  {
  _Tidy ( );
  }

  basic_string ( const _Myt & _Right, size_type _Roff,
  size_type _Count = npos )
  : _Mybase ( )
  {






  _Tidy ( );
  assign ( _Right, _Roff, _Count );
  }

  basic_string ( const _Myt & _Right, size_type _Roff, size_type _Count,
  const _Alloc & _Al )
  : _Mybase ( _Al )
  {






  _Tidy ( );
  assign ( _Right, _Roff, _Count );
  }

  basic_string ( const _Elem * _Ptr, size_type _Count )
  : _Mybase ( )
  {
  _Tidy ( );
  assign ( _Ptr, _Count );
  }

  basic_string ( const _Elem * _Ptr, size_type _Count, const _Alloc & _Al )
  : _Mybase ( _Al )
  {
  _Tidy ( );
  assign ( _Ptr, _Count );
  }

  basic_string ( const _Elem * _Ptr )
  : _Mybase ( )
  {
  _Tidy ( );
  assign ( _Ptr );
  }

  basic_string ( const _Elem * _Ptr, const _Alloc & _Al )
  : _Mybase ( _Al )
  {
  _Tidy ( );
  assign ( _Ptr );
  }

  basic_string ( size_type _Count, _Elem _Ch )
  : _Mybase ( )
  {
  _Tidy ( );
  assign ( _Count, _Ch );
  }

  basic_string ( size_type _Count, _Elem _Ch, const _Alloc & _Al )
  : _Mybase ( _Al )
  {
  _Tidy ( );
  assign ( _Count, _Ch );
  }

 template < class _It >
   basic_string ( _It _First, _It _Last )
  : _Mybase ( )
  {
  _Tidy ( );
  _Construct ( _First, _Last, _Iter_cat ( _First ) );
  }

 template < class _It >
   basic_string ( _It _First, _It _Last, const _Alloc & _Al )
  : _Mybase ( _Al )
  {
  _Tidy ( );
  _Construct ( _First, _Last, _Iter_cat ( _First ) );
  }

  basic_string ( const_pointer _First, const_pointer _Last )
  : _Mybase ( )
  {



  _Tidy ( );
  if ( _First != _Last )
   assign ( & * _First, _Last - _First );
  }

  basic_string ( const_iterator _First, const_iterator _Last )
  : _Mybase ( )
  {



  _Tidy ( );
  if ( _First != _Last )
   assign ( & * _First, _Last - _First );
  }





  basic_string ( const _Myt & _Right )
  : _Mybase ( _Right )
  {
  _Tidy ( );
  assign ( _Right, 0, npos );
  }







































































































































 template < class _It >
  void _Construct ( _It _Count,
   _It _Ch, _Int_iterator_tag )
  {
  assign ( ( size_type ) _Count, ( _Elem ) _Ch );
  }

 template < class _It >
  void _Construct ( _It _First,
   _It _Last, input_iterator_tag )
  {
  try {
  for (; _First != _Last; ++ _First )
   append ( ( size_type ) 1, ( _Elem ) * _First );
  } catch ( ... ) {
  _Tidy ( true );
  throw;
  }
  }

 template < class _It >
  void _Construct ( _It _First,
   _It _Last, forward_iterator_tag )
  {







  size_type _Count = 0;
  _Distance ( _First, _Last, _Count );
  reserve ( _Count );

  try {
  for (; _First != _Last; ++ _First )
   append ( ( size_type ) 1, ( _Elem ) * _First );
  } catch ( ... ) {
  _Tidy ( true );
  throw;
  }
  }

  ~ basic_string ( )
  {
  _Tidy ( true );
  }

 typedef _Traits traits_type;
 typedef _Alloc allocator_type;

  static const size_type npos;

 _Myt & operator = ( const _Myt & _Right )
  {
  return ( assign ( _Right ) );
  }

 _Myt & operator = ( const _Elem * _Ptr )
  {
  return ( assign ( _Ptr ) );
  }

 _Myt & operator = ( _Elem _Ch )
  {
  return ( assign ( 1, _Ch ) );
  }

 _Myt & operator += ( const _Myt & _Right )
  {
  return ( append ( _Right ) );
  }

 _Myt & operator += ( const _Elem * _Ptr )
  {
  return ( append ( _Ptr ) );
  }

 _Myt & operator += ( _Elem _Ch )
  {
  return ( append ( ( size_type ) 1, _Ch ) );
  }

 _Myt & append ( const _Myt & _Right )
  {
  return ( append ( _Right, 0, npos ) );
  }

 _Myt & append ( const _Myt & _Right,
  size_type _Roff, size_type _Count )
  {
  if ( _Right . size ( ) < _Roff )
   _String_base :: _Xran ( );
  size_type _Num = _Right . size ( ) - _Roff;
  if ( _Num < _Count )
   _Count = _Num;
  if ( npos - _Mysize <= _Count || _Mysize + _Count < _Mysize )
   _String_base :: _Xlen ( );

  if ( 0 < _Count && _Grow ( _Num = _Mysize + _Count ) )
   {
   _Traits_helper :: copy_s < _Traits > ( _Myptr ( ) + _Mysize, _Myres - _Mysize,
    _Right . _Myptr ( ) + _Roff, _Count );
   _Eos ( _Num );
   }
  return ( * this );
  }

 _Myt & append ( const _Elem * _Ptr, size_type _Count )
  {






  if ( _Inside ( _Ptr ) )
   return ( append ( * this, _Ptr - _Myptr ( ), _Count ) );
  if ( npos - _Mysize <= _Count || _Mysize + _Count < _Mysize )
   _String_base :: _Xlen ( );

  size_type _Num;
  if ( 0 < _Count && _Grow ( _Num = _Mysize + _Count ) )
   {
   _Traits_helper :: copy_s < _Traits > ( _Myptr ( ) + _Mysize, _Myres - _Mysize, _Ptr, _Count );
   _Eos ( _Num );
   }
  return ( * this );
  }

 _Myt & append ( const _Elem * _Ptr )
  {
  ;
  return ( append ( _Ptr, _Traits :: length ( _Ptr ) ) );
  }

 _Myt & append ( size_type _Count, _Elem _Ch )
  {
   if ( npos - _Mysize <= _Count )
   _String_base :: _Xlen ( );

  size_type _Num;
  if ( 0 < _Count && _Grow ( _Num = _Mysize + _Count ) )
   {
   _Chassign ( _Mysize, _Count, _Ch );
   _Eos ( _Num );
   }
  return ( * this );
  }

 template < class _It >
  _Myt & append ( _It _First, _It _Last )
  {
  return ( _Append ( _First, _Last, _Iter_cat ( _First ) ) );
  }

 template < class _It >
  _Myt & _Append ( _It _Count, _It _Ch, _Int_iterator_tag )
  {
  return ( append ( ( size_type ) _Count, ( _Elem ) _Ch ) );
  }

 template < class _It >
  _Myt & _Append ( _It _First, _It _Last, input_iterator_tag )
  {
  return ( replace ( end ( ), end ( ), _First, _Last ) );
  }

 _Myt & append ( const_pointer _First, const_pointer _Last )
  {
  return ( replace ( end ( ), end ( ), _First, _Last ) );
  }

 _Myt & append ( const_iterator _First, const_iterator _Last )
  {
  return ( replace ( end ( ), end ( ), _First, _Last ) );
  }

 _Myt & assign ( const _Myt & _Right )
  {
  return ( assign ( _Right, 0, npos ) );
  }

 _Myt & assign ( const _Myt & _Right,
  size_type _Roff, size_type _Count )
  {
  if ( _Right . size ( ) < _Roff )
   _String_base :: _Xran ( );
  size_type _Num = _Right . size ( ) - _Roff;
  if ( _Count < _Num )
   _Num = _Count;

  if ( this == & _Right )
   erase ( ( size_type ) ( _Roff + _Num ) ), erase ( 0, _Roff );
  else if ( _Grow ( _Num ) )
   {
   _Traits_helper :: copy_s < _Traits > ( _Myptr ( ), _Myres, _Right . _Myptr ( ) + _Roff, _Num );
   _Eos ( _Num );
   }
  return ( * this );
  }

 _Myt & assign ( const _Elem * _Ptr, size_type _Count )
  {






  if ( _Inside ( _Ptr ) )
   return ( assign ( * this, _Ptr - _Myptr ( ), _Count ) );

  if ( _Grow ( _Count ) )
   {
   _Traits_helper :: copy_s < _Traits > ( _Myptr ( ), _Myres, _Ptr, _Count );
   _Eos ( _Count );
   }
  return ( * this );
  }

 _Myt & assign ( const _Elem * _Ptr )
  {
  ;
  return ( assign ( _Ptr, _Traits :: length ( _Ptr ) ) );
  }

 _Myt & assign ( size_type _Count, _Elem _Ch )
  {
  if ( _Count == npos )
   _String_base :: _Xlen ( );

  if ( _Grow ( _Count ) )
   {
   _Chassign ( 0, _Count, _Ch );
   _Eos ( _Count );
   }
  return ( * this );
  }

 template < class _It >
  _Myt & assign ( _It _First, _It _Last )
  {
  return ( _Assign ( _First, _Last, _Iter_cat ( _First ) ) );
  }

 template < class _It >
  _Myt & _Assign ( _It _Count, _It _Ch, _Int_iterator_tag )
  {
  return ( assign ( ( size_type ) _Count, ( _Elem ) _Ch ) );
  }

 template < class _It >
  _Myt & _Assign ( _It _First, _It _Last, input_iterator_tag )
  {
  return ( replace ( begin ( ), end ( ), _First, _Last ) );
  }

 _Myt & assign ( const_pointer _First, const_pointer _Last )
  {
  return ( replace ( begin ( ), end ( ), _First, _Last ) );
  }

 _Myt & assign ( const_iterator _First, const_iterator _Last )
  {
  return ( replace ( begin ( ), end ( ), _First, _Last ) );
  }

 _Myt & insert ( size_type _Off, const _Myt & _Right )
  {
  return ( insert ( _Off, _Right, 0, npos ) );
  }

 _Myt & insert ( size_type _Off,
  const _Myt & _Right, size_type _Roff, size_type _Count )
  {
  if ( _Mysize < _Off || _Right . size ( ) < _Roff )
   _String_base :: _Xran ( );
  size_type _Num = _Right . size ( ) - _Roff;
  if ( _Num < _Count )
   _Count = _Num;
  if ( npos - _Mysize <= _Count )
   _String_base :: _Xlen ( );

  if ( 0 < _Count && _Grow ( _Num = _Mysize + _Count ) )
   {
   _Traits_helper :: move_s < _Traits > ( _Myptr ( ) + _Off + _Count, _Myres - _Off - _Count,
    _Myptr ( ) + _Off, _Mysize - _Off );
   if ( this == & _Right )
    _Traits_helper :: move_s < _Traits > ( _Myptr ( ) + _Off, _Myres - _Off,
     _Myptr ( ) + ( _Off < _Roff ? _Roff + _Count : _Roff ),
      _Count );
   else
    _Traits_helper :: copy_s < _Traits > ( _Myptr ( ) + _Off, _Myres - _Off,
     _Right . _Myptr ( ) + _Roff, _Count );
   _Eos ( _Num );
   }
  return ( * this );
  }

 _Myt & insert ( size_type _Off,
  const _Elem * _Ptr, size_type _Count )
  {






  if ( _Inside ( _Ptr ) )
   return ( insert ( _Off, * this,
    _Ptr - _Myptr ( ), _Count ) );
  if ( _Mysize < _Off )
   _String_base :: _Xran ( );
  if ( npos - _Mysize <= _Count )
   _String_base :: _Xlen ( );
  size_type _Num;
  if ( 0 < _Count && _Grow ( _Num = _Mysize + _Count ) )
   {
   _Traits_helper :: move_s < _Traits > ( _Myptr ( ) + _Off + _Count, _Myres - _Off - _Count,
    _Myptr ( ) + _Off, _Mysize - _Off );
   _Traits_helper :: copy_s < _Traits > ( _Myptr ( ) + _Off, _Myres - _Off, _Ptr, _Count );
   _Eos ( _Num );
   }
  return ( * this );
  }

 _Myt & insert ( size_type _Off, const _Elem * _Ptr )
  {
  ;
  return ( insert ( _Off, _Ptr, _Traits :: length ( _Ptr ) ) );
  }

 _Myt & insert ( size_type _Off,
  size_type _Count, _Elem _Ch )
  {
  if ( _Mysize < _Off )
   _String_base :: _Xran ( );
  if ( npos - _Mysize <= _Count )
   _String_base :: _Xlen ( );
  size_type _Num;
  if ( 0 < _Count && _Grow ( _Num = _Mysize + _Count ) )
   {
   _Traits_helper :: move_s < _Traits > ( _Myptr ( ) + _Off + _Count, _Myres - _Off - _Count,
    _Myptr ( ) + _Off, _Mysize - _Off );
   _Chassign ( _Off, _Count, _Ch );
   _Eos ( _Num );
   }
  return ( * this );
  }

 iterator insert ( const_iterator _Where )
  {
  return ( insert ( _Where, _Elem ( ) ) );
  }

 iterator insert ( const_iterator _Where, _Elem _Ch )
  {
  size_type _Off = _Pdif ( _Where, begin ( ) );
  insert ( _Off, 1, _Ch );
  return ( begin ( ) + _Off );
  }

 void insert ( const_iterator _Where, size_type _Count, _Elem _Ch )
  {
  size_type _Off = _Pdif ( _Where, begin ( ) );
  insert ( _Off, _Count, _Ch );
  }

 template < class _It >
  void insert ( const_iterator _Where, _It _First, _It _Last )
  {
  _Insert ( _Where, _First, _Last, _Iter_cat ( _First ) );
  }

 template < class _It >
  void _Insert ( const_iterator _Where, _It _Count, _It _Ch,
   _Int_iterator_tag )
  {
  insert ( _Where, ( size_type ) _Count, ( _Elem ) _Ch );
  }

 template < class _It >
  void _Insert ( const_iterator _Where, _It _First, _It _Last,
   input_iterator_tag )
  {
  replace ( _Where, _Where, _First, _Last );
  }

 void insert ( const_iterator _Where, const_pointer _First, const_pointer _Last )
  {
  replace ( _Where, _Where, _First, _Last );
  }

 void insert ( const_iterator _Where, const_iterator _First, const_iterator _Last )
  {
  replace ( _Where, _Where, _First, _Last );
  }

 _Myt & erase ( size_type _Off = 0,
  size_type _Count = npos )
  {
  if ( _Mysize < _Off )
   _String_base :: _Xran ( );
  if ( _Mysize - _Off < _Count )
   _Count = _Mysize - _Off;
  if ( 0 < _Count )
   {
   _Traits_helper :: move_s < _Traits > ( _Myptr ( ) + _Off, _Myres - _Off, _Myptr ( ) + _Off + _Count,
    _Mysize - _Off - _Count );
   size_type _Newsize = _Mysize - _Count;
   _Eos ( _Newsize );
   }
  return ( * this );
  }

 iterator erase ( const_iterator _Where )
  {
  size_type _Count = _Pdif ( _Where, begin ( ) );
  erase ( _Count, 1 );
  return ( iterator ( _Myptr ( ) + _Count, this ) );
  }

 iterator erase ( const_iterator _First, const_iterator _Last )
  {
  size_type _Count = _Pdif ( _First, begin ( ) );
  erase ( _Count, _Pdif ( _Last, _First ) );
  return ( iterator ( _Myptr ( ) + _Count, this ) );
  }

 void clear ( )
  {
  erase ( begin ( ), end ( ) );
  }

 _Myt & replace ( size_type _Off, size_type _N0, const _Myt & _Right )
  {
  return ( replace ( _Off, _N0, _Right, 0, npos ) );
  }

 _Myt & replace ( size_type _Off,
  size_type _N0, const _Myt & _Right, size_type _Roff, size_type _Count )
  {
  if ( _Mysize < _Off || _Right . size ( ) < _Roff )
   _String_base :: _Xran ( );
  if ( _Mysize - _Off < _N0 )
   _N0 = _Mysize - _Off;
  size_type _Num = _Right . size ( ) - _Roff;
  if ( _Num < _Count )
   _Count = _Num;
  if ( npos - _Count <= _Mysize - _N0 )
   _String_base :: _Xlen ( );

  size_type _Nm = _Mysize - _N0 - _Off;
  size_type _Newsize = _Mysize + _Count - _N0;
  if ( _Mysize < _Newsize )
   _Grow ( _Newsize );

  if ( this != & _Right )
   {
   _Traits_helper :: move_s < _Traits > ( _Myptr ( ) + _Off + _Count, _Myres - _Off - _Count,
    _Myptr ( ) + _Off + _N0, _Nm );
   _Traits_helper :: copy_s < _Traits > ( _Myptr ( ) + _Off, _Myres - _Off,
    _Right . _Myptr ( ) + _Roff, _Count );
   }
  else if ( _Count <= _N0 )
   {
   _Traits_helper :: move_s < _Traits > ( _Myptr ( ) + _Off, _Myres - _Off,
    _Myptr ( ) + _Roff, _Count );
   _Traits_helper :: move_s < _Traits > ( _Myptr ( ) + _Off + _Count, _Myres - _Off - _Count,
    _Myptr ( ) + _Off + _N0, _Nm );
   }
  else if ( _Roff <= _Off )
   {
   _Traits_helper :: move_s < _Traits > ( _Myptr ( ) + _Off + _Count, _Myres - _Off - _Count,
    _Myptr ( ) + _Off + _N0, _Nm );
   _Traits_helper :: move_s < _Traits > ( _Myptr ( ) + _Off, _Myres - _Off,
    _Myptr ( ) + _Roff, _Count );
   }
  else if ( _Off + _N0 <= _Roff )
   {
   _Traits_helper :: move_s < _Traits > ( _Myptr ( ) + _Off + _Count, _Myres - _Off - _Count,
    _Myptr ( ) + _Off + _N0, _Nm );
   _Traits_helper :: move_s < _Traits > ( _Myptr ( ) + _Off, _Myres - _Off,
    _Myptr ( ) + ( _Roff + _Count - _N0 ), _Count );
   }
  else
   {
   _Traits_helper :: move_s < _Traits > ( _Myptr ( ) + _Off, _Myres - _Off,
    _Myptr ( ) + _Roff, _N0 );
   _Traits_helper :: move_s < _Traits > ( _Myptr ( ) + _Off + _Count, _Myres - _Off - _Count,
    _Myptr ( ) + _Off + _N0, _Nm );
   _Traits_helper :: move_s < _Traits > ( _Myptr ( ) + _Off + _N0, _Myres - _Off - _N0, _Myptr ( ) + _Roff + _Count,
    _Count - _N0 );
   }

  _Eos ( _Newsize );
  return ( * this );
  }

 _Myt & replace ( size_type _Off,
  size_type _N0, const _Elem * _Ptr, size_type _Count )
  {






  if ( _Inside ( _Ptr ) )
   return ( replace ( _Off, _N0, * this,
    _Ptr - _Myptr ( ), _Count ) );
  if ( _Mysize < _Off )
   _String_base :: _Xran ( );
  if ( _Mysize - _Off < _N0 )
   _N0 = _Mysize - _Off;
  if ( npos - _Count <= _Mysize - _N0 )
   _String_base :: _Xlen ( );
  size_type _Nm = _Mysize - _N0 - _Off;

  if ( _Count < _N0 )
   _Traits_helper :: move_s < _Traits > ( _Myptr ( ) + _Off + _Count, _Myres - _Off - _Count,
    _Myptr ( ) + _Off + _N0, _Nm );
  size_type _Num;
  if ( ( 0 < _Count || 0 < _N0 ) && _Grow ( _Num = _Mysize + _Count - _N0 ) )
   {
   if ( _N0 < _Count )
    _Traits_helper :: move_s < _Traits > ( _Myptr ( ) + _Off + _Count, _Myres - _Off - _Count,
     _Myptr ( ) + _Off + _N0, _Nm );
   _Traits_helper :: copy_s < _Traits > ( _Myptr ( ) + _Off, _Myres - _Off, _Ptr, _Count );
   _Eos ( _Num );
   }
  return ( * this );
  }

 _Myt & replace ( size_type _Off, size_type _N0, const _Elem * _Ptr )
  {
  ;
  return ( replace ( _Off, _N0, _Ptr, _Traits :: length ( _Ptr ) ) );
  }

 _Myt & replace ( size_type _Off,
  size_type _N0, size_type _Count, _Elem _Ch )
  {
  if ( _Mysize < _Off )
   _String_base :: _Xran ( );
  if ( _Mysize - _Off < _N0 )
   _N0 = _Mysize - _Off;
  if ( npos - _Count <= _Mysize - _N0 )
   _String_base :: _Xlen ( );
  size_type _Nm = _Mysize - _N0 - _Off;

  if ( _Count < _N0 )
   _Traits_helper :: move_s < _Traits > ( _Myptr ( ) + _Off + _Count, _Myres - _Off - _Count,
    _Myptr ( ) + _Off + _N0, _Nm );
  size_type _Num;
  if ( ( 0 < _Count || 0 < _N0 ) && _Grow ( _Num = _Mysize + _Count - _N0 ) )
   {
   if ( _N0 < _Count )
    _Traits_helper :: move_s < _Traits > ( _Myptr ( ) + _Off + _Count, _Myres - _Off - _Count,
     _Myptr ( ) + _Off + _N0, _Nm );
   _Chassign ( _Off, _Count, _Ch );
   _Eos ( _Num );
   }
  return ( * this );
  }

 _Myt & replace ( const_iterator _First, const_iterator _Last, const _Myt & _Right )
  {
  return ( replace (
   _Pdif ( _First, begin ( ) ), _Pdif ( _Last, _First ), _Right ) );
  }

 _Myt & replace ( const_iterator _First, const_iterator _Last, const _Elem * _Ptr,
  size_type _Count )
  {
  return ( replace (
   _Pdif ( _First, begin ( ) ), _Pdif ( _Last, _First ), _Ptr, _Count ) );
  }

 _Myt & replace ( const_iterator _First, const_iterator _Last, const _Elem * _Ptr )
  {
  return ( replace (
   _Pdif ( _First, begin ( ) ), _Pdif ( _Last, _First ), _Ptr ) );
  }

 _Myt & replace ( const_iterator _First, const_iterator _Last,
  size_type _Count, _Elem _Ch )
  {
  return ( replace (
   _Pdif ( _First, begin ( ) ), _Pdif ( _Last, _First ), _Count, _Ch ) );
  }

 template < class _It >
  _Myt & replace ( const_iterator _First, const_iterator _Last,
   _It _First2, _It _Last2 )
  {
  return ( _Replace ( _First, _Last,
   _First2, _Last2, _Iter_cat ( _First2 ) ) );
  }

 template < class _It >
  _Myt & _Replace ( const_iterator _First, const_iterator _Last,
   _It _Count, _It _Ch, _Int_iterator_tag )
  {
  return ( replace ( _First, _Last, ( size_type ) _Count, ( _Elem ) _Ch ) );
  }

 template < class _It >
  _Myt & _Replace ( const_iterator _First, const_iterator _Last,
   _It _First2, _It _Last2, input_iterator_tag )
  {
  _Myt _Right ( _First2, _Last2 );
  replace ( _First, _Last, _Right );
  return ( * this );
  }

 _Myt & replace ( const_iterator _First, const_iterator _Last,
  const_pointer _First2, const_pointer _Last2 )
  {
  if ( _First2 == _Last2 )
   erase ( _Pdif ( _First, begin ( ) ), _Pdif ( _Last, _First ) );
  else
   replace ( _Pdif ( _First, begin ( ) ), _Pdif ( _Last, _First ),
    & * _First2, _Last2 - _First2 );
  return ( * this );
  }

 _Myt & replace ( const_iterator _First, const_iterator _Last,
  const_iterator _First2, const_iterator _Last2 )
  {
  if ( _First2 == _Last2 )
   erase ( _Pdif ( _First, begin ( ) ), _Pdif ( _Last, _First ) );
  else
   replace ( _Pdif ( _First, begin ( ) ), _Pdif ( _Last, _First ),
    & * _First2, _Last2 - _First2 );
  return ( * this );
  }

 iterator begin ( )
  {
  return ( iterator ( _Myptr ( ), this ) );
  }

 const_iterator begin ( ) const
  {
  return ( const_iterator ( _Myptr ( ), this ) );
  }

 iterator end ( )
  {
  return ( iterator ( _Myptr ( ) + _Mysize, this ) );
  }

 const_iterator end ( ) const
  {
  return ( const_iterator ( _Myptr ( ) + _Mysize, this ) );
  }

 reverse_iterator rbegin ( )
  {
  return ( reverse_iterator ( end ( ) ) );
  }

 const_reverse_iterator rbegin ( ) const
  {
  return ( const_reverse_iterator ( end ( ) ) );
  }

 reverse_iterator rend ( )
  {
  return ( reverse_iterator ( begin ( ) ) );
  }

 const_reverse_iterator rend ( ) const
  {
  return ( const_reverse_iterator ( begin ( ) ) );
  }

 reference at ( size_type _Off )
  {
  if ( _Mysize <= _Off )
   _String_base :: _Xran ( );
  return ( _Myptr ( ) [ _Off ] );
  }

 const_reference at ( size_type _Off ) const
  {
  if ( _Mysize <= _Off )
   _String_base :: _Xran ( );
  return ( _Myptr ( ) [ _Off ] );
  }



 reference operator [ ] ( size_type _Off )
  {












  { if ( ! ( _Off <= _Mysize ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };


  return ( _Myptr ( ) [ _Off ] );
  }

 const_reference operator [ ] ( size_type _Off ) const
  {












  { if ( ! ( _Off <= _Mysize ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };


  return ( _Myptr ( ) [ _Off ] );
  }

















































 void push_back ( _Elem _Ch )
  {
  insert ( end ( ), _Ch );
  }

 const _Elem * c_str ( ) const
  {
  return ( _Myptr ( ) );
  }

 const _Elem * data ( ) const
  {
  return ( c_str ( ) );
  }

 size_type length ( ) const
  {
  return ( _Mysize );
  }

 size_type size ( ) const
  {
  return ( _Mysize );
  }

 size_type max_size ( ) const
  {
  size_type _Num = _Mybase :: _Alval . max_size ( );
  return ( _Num <= 1 ? 1 : _Num - 1 );
  }

 void resize ( size_type _Newsize )
  {
  resize ( _Newsize, _Elem ( ) );
  }

 void resize ( size_type _Newsize, _Elem _Ch )
  {
  if ( _Newsize <= _Mysize )
   erase ( _Newsize );
  else
   append ( _Newsize - _Mysize, _Ch );
  }

 size_type capacity ( ) const
  {
  return ( _Myres );
  }

 void reserve ( size_type _Newcap = 0 )
  {
  if ( _Mysize <= _Newcap && _Myres != _Newcap )
   {
   size_type _Size = _Mysize;
   if ( _Grow ( _Newcap, true ) )
    _Eos ( _Size );
   }
  }

 bool empty ( ) const
  {
  return ( _Mysize == 0 );
  }

 __declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
 size_type copy ( _Elem * _Dest,
  size_type _Count, size_type _Off = 0 ) const
  {







  return _Copy_s ( _Dest, _Count, _Count, _Off );
  }

 size_type _Copy_s ( _Elem * _Dest, size_type _Dest_size,
  size_type _Count, size_type _Off = 0 ) const
  {
  ;
  if ( _Mysize < _Off )
   _String_base :: _Xran ( );
  if ( _Mysize - _Off < _Count )
   _Count = _Mysize - _Off;
  _Traits_helper :: copy_s < _Traits > ( _Dest, _Dest_size, _Myptr ( ) + _Off, _Count );
  return ( _Count );
  }

 void swap ( _Myt & _Right )
  {
  if ( this == & _Right )
   ;
  else if ( _Mybase :: _Alval == _Right . _Alval )
   {





   _Bxty _Tbx = _Bx;
   _Bx = _Right . _Bx, _Right . _Bx = _Tbx;

   size_type _Tlen = _Mysize;
   _Mysize = _Right . _Mysize, _Right . _Mysize = _Tlen;

   size_type _Tres = _Myres;
   _Myres = _Right . _Myres, _Right . _Myres = _Tres;
   }
  else
   {
   _Myt _Tmp = * this;

   * this = _Right;
   _Right = _Tmp;
   }
  }

 size_type find ( const _Myt & _Right, size_type _Off = 0 ) const
  {
  return ( find ( _Right . _Myptr ( ), _Off, _Right . size ( ) ) );
  }

 size_type find ( const _Elem * _Ptr,
  size_type _Off, size_type _Count ) const
  {






  if ( _Count == 0 && _Off <= _Mysize )
   return ( _Off );

  size_type _Nm;
  if ( _Off < _Mysize && _Count <= ( _Nm = _Mysize - _Off ) )
   {
   const _Elem * _Uptr, * _Vptr;
   for ( _Nm -= _Count - 1, _Vptr = _Myptr ( ) + _Off;
    ( _Uptr = _Traits :: find ( _Vptr, _Nm, * _Ptr ) ) != 0;
    _Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1 )
    if ( _Traits :: compare ( _Uptr, _Ptr, _Count ) == 0 )
     return ( _Uptr - _Myptr ( ) );
   }

  return ( npos );
  }

 size_type find ( const _Elem * _Ptr, size_type _Off = 0 ) const
  {
  ;
  return ( find ( _Ptr, _Off, _Traits :: length ( _Ptr ) ) );
  }

 size_type find ( _Elem _Ch, size_type _Off = 0 ) const
  {
  return ( find ( ( const _Elem * ) & _Ch, _Off, 1 ) );
  }

 size_type rfind ( const _Myt & _Right, size_type _Off = npos ) const
  {
  return ( rfind ( _Right . _Myptr ( ), _Off, _Right . size ( ) ) );
  }

 size_type rfind ( const _Elem * _Ptr,
  size_type _Off, size_type _Count ) const
  {






  if ( _Count == 0 )
   return ( _Off < _Mysize ? _Off : _Mysize );
  if ( _Count <= _Mysize )
   {
   const _Elem * _Uptr = _Myptr ( ) +
    ( _Off < _Mysize - _Count ? _Off : _Mysize - _Count );
   for (;; -- _Uptr )
    if ( _Traits :: eq ( * _Uptr, * _Ptr )
     && _Traits :: compare ( _Uptr, _Ptr, _Count ) == 0 )
     return ( _Uptr - _Myptr ( ) );
    else if ( _Uptr == _Myptr ( ) )
     break;
   }

  return ( npos );
  }

 size_type rfind ( const _Elem * _Ptr, size_type _Off = npos ) const
  {
  ;
  return ( rfind ( _Ptr, _Off, _Traits :: length ( _Ptr ) ) );
  }

 size_type rfind ( _Elem _Ch, size_type _Off = npos ) const
  {
  return ( rfind ( ( const _Elem * ) & _Ch, _Off, 1 ) );
  }

 size_type find_first_of ( const _Myt & _Right,
  size_type _Off = 0 ) const
  {
  return ( find_first_of ( _Right . _Myptr ( ), _Off, _Right . size ( ) ) );
  }

 size_type find_first_of ( const _Elem * _Ptr,
  size_type _Off, size_type _Count ) const
  {






  if ( 0 < _Count && _Off < _Mysize )
   {
   const _Elem * const _Vptr = _Myptr ( ) + _Mysize;
   for ( const _Elem * _Uptr = _Myptr ( ) + _Off; _Uptr < _Vptr; ++ _Uptr )
    if ( _Traits :: find ( _Ptr, _Count, * _Uptr ) != 0 )
     return ( _Uptr - _Myptr ( ) );
   }

  return ( npos );
  }

 size_type find_first_of ( const _Elem * _Ptr, size_type _Off = 0 ) const
  {
  ;
  return ( find_first_of ( _Ptr, _Off, _Traits :: length ( _Ptr ) ) );
  }

 size_type find_first_of ( _Elem _Ch, size_type _Off = 0 ) const
  {
  return ( find ( ( const _Elem * ) & _Ch, _Off, 1 ) );
  }

 size_type find_last_of ( const _Myt & _Right,
  size_type _Off = npos ) const
  {
  return ( find_last_of ( _Right . _Myptr ( ), _Off, _Right . size ( ) ) );
  }

 size_type find_last_of ( const _Elem * _Ptr,
  size_type _Off, size_type _Count ) const
  {






  if ( 0 < _Count && 0 < _Mysize )
   for ( const _Elem * _Uptr = _Myptr ( )
    + ( _Off < _Mysize ? _Off : _Mysize - 1 );; -- _Uptr )
    if ( _Traits :: find ( _Ptr, _Count, * _Uptr ) != 0 )
     return ( _Uptr - _Myptr ( ) );
    else if ( _Uptr == _Myptr ( ) )
     break;

  return ( npos );
  }

 size_type find_last_of ( const _Elem * _Ptr,
  size_type _Off = npos ) const
  {
  ;
  return ( find_last_of ( _Ptr, _Off, _Traits :: length ( _Ptr ) ) );
  }

 size_type find_last_of ( _Elem _Ch, size_type _Off = npos ) const
  {
  return ( rfind ( ( const _Elem * ) & _Ch, _Off, 1 ) );
  }

 size_type find_first_not_of ( const _Myt & _Right,
  size_type _Off = 0 ) const
  {
  return ( find_first_not_of ( _Right . _Myptr ( ), _Off,
   _Right . size ( ) ) );
  }

 size_type find_first_not_of ( const _Elem * _Ptr,
  size_type _Off, size_type _Count ) const
  {






  if ( _Off < _Mysize )
   {
   const _Elem * const _Vptr = _Myptr ( ) + _Mysize;
   for ( const _Elem * _Uptr = _Myptr ( ) + _Off; _Uptr < _Vptr; ++ _Uptr )
    if ( _Traits :: find ( _Ptr, _Count, * _Uptr ) == 0 )
     return ( _Uptr - _Myptr ( ) );
   }
  return ( npos );
  }

 size_type find_first_not_of ( const _Elem * _Ptr,
  size_type _Off = 0 ) const
  {
  ;
  return ( find_first_not_of ( _Ptr, _Off, _Traits :: length ( _Ptr ) ) );
  }

 size_type find_first_not_of ( _Elem _Ch, size_type _Off = 0 ) const
  {
  return ( find_first_not_of ( ( const _Elem * ) & _Ch, _Off, 1 ) );
  }

 size_type find_last_not_of ( const _Myt & _Right,
  size_type _Off = npos ) const
  {
  return ( find_last_not_of ( _Right . _Myptr ( ), _Off, _Right . size ( ) ) );
  }

 size_type find_last_not_of ( const _Elem * _Ptr,
  size_type _Off, size_type _Count ) const
  {






  if ( 0 < _Mysize )
   for ( const _Elem * _Uptr = _Myptr ( )
    + ( _Off < _Mysize ? _Off : _Mysize - 1 );; -- _Uptr )
    if ( _Traits :: find ( _Ptr, _Count, * _Uptr ) == 0 )
     return ( _Uptr - _Myptr ( ) );
    else if ( _Uptr == _Myptr ( ) )
     break;
  return ( npos );
  }

 size_type find_last_not_of ( const _Elem * _Ptr,
  size_type _Off = npos ) const
  {
  ;
  return ( find_last_not_of ( _Ptr, _Off, _Traits :: length ( _Ptr ) ) );
  }

 size_type find_last_not_of ( _Elem _Ch, size_type _Off = npos ) const
  {
  return ( find_last_not_of ( ( const _Elem * ) & _Ch, _Off, 1 ) );
  }

 _Myt substr ( size_type _Off = 0, size_type _Count = npos ) const
  {
  return ( _Myt ( * this, _Off, _Count, get_allocator ( ) ) );
  }

 int compare ( const _Myt & _Right ) const
  {
  return ( compare ( 0, _Mysize, _Right . _Myptr ( ), _Right . size ( ) ) );
  }

 int compare ( size_type _Off, size_type _N0,
  const _Myt & _Right ) const
  {
  return ( compare ( _Off, _N0, _Right, 0, npos ) );
  }

 int compare ( size_type _Off,
  size_type _N0, const _Myt & _Right,
  size_type _Roff, size_type _Count ) const
  {
  if ( _Right . size ( ) < _Roff )
   _String_base :: _Xran ( );
  if ( _Right . _Mysize - _Roff < _Count )
   _Count = _Right . _Mysize - _Roff;
  return ( compare ( _Off, _N0, _Right . _Myptr ( ) + _Roff, _Count ) );
  }

 int compare ( const _Elem * _Ptr ) const
  {
  ;
  return ( compare ( 0, _Mysize, _Ptr, _Traits :: length ( _Ptr ) ) );
  }

 int compare ( size_type _Off, size_type _N0, const _Elem * _Ptr ) const
  {
  ;
  return ( compare ( _Off, _N0, _Ptr, _Traits :: length ( _Ptr ) ) );
  }

 int compare ( size_type _Off,
  size_type _N0, const _Elem * _Ptr, size_type _Count ) const
  {






  if ( _Mysize < _Off )
   _String_base :: _Xran ( );
  if ( _Mysize - _Off < _N0 )
   _N0 = _Mysize - _Off;

  size_type _Ans = _Traits :: compare ( _Myptr ( ) + _Off, _Ptr,
   _N0 < _Count ? _N0 : _Count );
  return ( _Ans != 0 ? ( int ) _Ans : _N0 < _Count ? - 1
   : _N0 == _Count ? 0 : + 1 );
  }

 allocator_type get_allocator ( ) const
  {
  return ( _Mybase :: _Alval );
  }

 enum
  {
  _BUF_SIZE = 16 / sizeof ( _Elem ) < 1 ? 1
   : 16 / sizeof ( _Elem ) };

protected :
 enum
  {
  _ALLOC_MASK = sizeof ( _Elem ) <= 1 ? 15
   : sizeof ( _Elem ) <= 2 ? 7
   : sizeof ( _Elem ) <= 4 ? 3
   : sizeof ( _Elem ) <= 8 ? 1 : 0 };

 void _Chassign ( size_type _Off, size_type _Count, _Elem _Ch )
  {
  if ( _Count == 1 )
   _Traits :: assign ( * ( _Myptr ( ) + _Off ), _Ch );
  else
   _Traits :: assign ( _Myptr ( ) + _Off, _Count, _Ch );
  }

 void _Copy ( size_type _Newsize, size_type _Oldlen )
  {
  size_type _Newres = _Newsize | _ALLOC_MASK;
  if ( max_size ( ) < _Newres )
   _Newres = _Newsize;
  else if ( _Newres / 3 < _Myres / 2
   && _Myres <= max_size ( ) - _Myres / 2 )
   _Newres = _Myres + _Myres / 2;
  _Elem * _Ptr = 0;

  try {
   _Ptr = _Mybase :: _Alval . allocate ( _Newres + 1 );
  } catch ( ... ) {
   _Newres = _Newsize;
   try {
    _Ptr = _Mybase :: _Alval . allocate ( _Newres + 1 );
   } catch ( ... ) {
   _Tidy ( true );
   throw;
   }
  }

  if ( 0 < _Oldlen )
   _Traits_helper :: copy_s < _Traits > ( _Ptr, _Newres + 1, _Myptr ( ), _Oldlen );
  _Tidy ( true );
  _Bx . _Ptr = _Ptr;
  _Myres = _Newres;
  _Eos ( _Oldlen );
  }

 void _Eos ( size_type _Newsize )
  {
  _Traits :: assign ( _Myptr ( ) [ _Mysize = _Newsize ], _Elem ( ) );
  }

 bool _Grow ( size_type _Newsize,
  bool _Trim = false )
  {
   if ( max_size ( ) < _Newsize )
   _String_base :: _Xlen ( );
  if ( _Myres < _Newsize )
   _Copy ( _Newsize, _Mysize );
  else if ( _Trim && _Newsize < _BUF_SIZE )
   _Tidy ( true,
    _Newsize < _Mysize ? _Newsize : _Mysize );
  else if ( _Newsize == 0 )
   _Eos ( 0 );
  return ( 0 < _Newsize );
  }

 bool _Inside ( const _Elem * _Ptr )
  {
  if ( _Ptr == 0 || _Ptr < _Myptr ( ) || _Myptr ( ) + _Mysize <= _Ptr )
   return ( false );
  else
   return ( true );
  }

 static size_type __cdecl _Pdif ( const_iterator _P2,
  const_iterator _P1 )
  {
  return ( ( _P2 ) . _Myptr == 0 ? 0 : _P2 - _P1 );
  }

 void _Tidy ( bool _Built = false,
  size_type _Newsize = 0 )
  {
  if ( ! _Built )
   ;
  else if ( _BUF_SIZE <= _Myres )
   {
   _Elem * _Ptr = _Bx . _Ptr;
   if ( 0 < _Newsize )
    _Traits_helper :: copy_s < _Traits > ( _Bx . _Buf, _BUF_SIZE, _Ptr, _Newsize );
   _Mybase :: _Alval . deallocate ( _Ptr, _Myres + 1 );
   }
  _Myres = _BUF_SIZE - 1;
  _Eos ( _Newsize );
  }

 union _Bxty
  {
  _Elem _Buf [ _BUF_SIZE ];
  _Elem * _Ptr;
  } _Bx;

 _Elem * _Myptr ( )
  {
  return ( _BUF_SIZE <= _Myres ? _Bx . _Ptr : _Bx . _Buf );
  }

 const _Elem * _Myptr ( ) const
  {
  return ( _BUF_SIZE <= _Myres ? _Bx . _Ptr : _Bx . _Buf );
  }

 size_type _Mysize;
 size_type _Myres;
 };
#line 2183 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xstring"
template<class _Elem, class _Traits, class _Ax> 
#pragma pack(8)
#line 2184
class _Move_operation_category< basic_string< _Elem, _Traits, _Ax> >  { 


public: typedef _Swap_move_tag _Move_cat; 
}; 
#pragma pack()

template<class _Elem, class 
_Traits, class 
_Alloc> const typename basic_string< _Elem, _Traits, _Alloc> ::size_type 

basic_string< _Elem, _Traits, _Alloc> ::npos = (typename std::basic_string< _Elem, _Traits, typename _String_val< _Elem, _Alloc> ::_Alty> ::size_type)(-1); 




template < class _Elem,
 class _Traits,
 class _Alloc > inline
 void __cdecl swap ( basic_string < _Elem, _Traits, _Alloc > & _Left,
  basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 _Left . swap ( _Right );
 }


typedef basic_string< char, char_traits< char> , allocator< char> >  string; 

typedef basic_string< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> >  wstring; 
#line 2229 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xstring"
}

#pragma warning(default: 4251)
#pragma warning(pop)
#line 11 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdexcept"
#pragma warning(push,3)
#line 2233 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xstring"
#pragma pack ( pop )
#line 10 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdexcept"
#pragma pack ( push, 8 )
#line 13 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdexcept"
namespace std { 
#line 20
class logic_error : public exception { 



public: explicit logic_error(const string &_Message) : _Str(_Message) 

{ 
} 

virtual ~logic_error() throw() 
{ 
} 

virtual const char *what() const throw() 
{ 
return (this->_Str).c_str(); 
} 
#line 47 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdexcept"
private: string _Str; 
}; 


class domain_error : public logic_error { 



public: explicit domain_error(const string &_Message) : logic_error(_Message) 

{ 
} 

virtual ~domain_error() throw() 
{ 
} 
#line 72 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdexcept"
}; 


class invalid_argument : public logic_error { 



public: explicit invalid_argument(const string &_Message) : logic_error(_Message) 

{ 
} 

virtual ~invalid_argument() throw() 
{ 
} 
#line 96 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdexcept"
}; 


class length_error : public logic_error { 



public: explicit length_error(const string &_Message) : logic_error(_Message) 

{ 
} 

virtual ~length_error() throw() 
{ 
} 
#line 120 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdexcept"
}; 


class out_of_range : public logic_error { 



public: explicit out_of_range(const string &_Message) : logic_error(_Message) 

{ 
} 

virtual ~out_of_range() throw() 
{ 
} 
#line 144 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdexcept"
}; 


class runtime_error : public exception { 



public: explicit runtime_error(const string &_Message) : _Str(_Message) 

{ 
} 

virtual ~runtime_error() throw() 
{ 
} 

virtual const char *what() const throw() 
{ 
return (this->_Str).c_str(); 
} 
#line 174 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdexcept"
private: string _Str; 
}; 


class overflow_error : public runtime_error { 



public: explicit overflow_error(const string &_Message) : runtime_error(_Message) 

{ 
} 

virtual ~overflow_error() throw() 
{ 
} 
#line 199 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdexcept"
}; 


class underflow_error : public runtime_error { 



public: explicit underflow_error(const string &_Message) : runtime_error(_Message) 

{ 
} 

virtual ~underflow_error() throw() 
{ 
} 
#line 223 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdexcept"
}; 


class range_error : public runtime_error { 



public: explicit range_error(const string &_Message) : runtime_error(_Message) 

{ 
} 

virtual ~range_error() throw() 
{ 
} 
#line 247 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\stdexcept"
}; 
#line 271
}

#pragma warning(pop)
#pragma pack ( pop )
#line 25 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\typeinfo"
#pragma pack ( push, 8 )
#line 36 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\typeinfo"
struct __type_info_node { 
void *memPtr; 
__type_info_node *next; 
}; 

extern __type_info_node __type_info_root_node; 

class type_info { 

public: virtual ~type_info(); 
bool operator==(const type_info &) const; 
bool operator!=(const type_info &) const; 
int before(const type_info &) const; 
const char *name(__type_info_node * = (&__type_info_root_node)) const; 
const char *raw_name() const; 

private: void *_m_data; 
char _m_d_name[1]; 
type_info(const type_info &); 
type_info &operator=(const type_info &); 
static const char *__cdecl _Name_base(const type_info *, __type_info_node *); 
static void __cdecl _Type_info_dtor(type_info *); 
}; 



namespace std { 

using ::type_info;

}
#line 72
namespace std { 

class bad_cast : public exception { 
#line 86
public: bad_cast(const char * = ("bad cast")); 
bad_cast(const bad_cast &); 
virtual ~bad_cast(); 
#line 90 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\typeinfo"
}; 

class bad_typeid : public exception { 
#line 104
public: bad_typeid(const char * = ("bad typeid")); 
bad_typeid(const bad_typeid &); 
virtual ~bad_typeid(); 
#line 109 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\typeinfo"
}; 

class __non_rtti_object : public bad_typeid { 
#line 123
public: __non_rtti_object(const char *); 
__non_rtti_object(const __non_rtti_object &); 
virtual ~__non_rtti_object(); 
#line 127 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\typeinfo"
}; 

}
#line 10 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xdebug"
#pragma warning(push,3)
#line 194 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\typeinfo"
#pragma pack ( pop )
#line 9 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xdebug"
#pragma pack ( push, 8 )
#line 13 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xdebug"
namespace std { 
struct _DebugHeapTag_t { 

int _Type; 
}; 
}
#line 154 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xdebug"
#pragma warning(pop)
#pragma pack ( pop )
#line 94 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\ctype.h"
extern "C" { extern int __cdecl _isctype(int, int); } 
extern "C" { extern int __cdecl _isctype_l(int, int, _locale_t); } 
extern "C" { extern int __cdecl isalpha(int); } 
extern "C" { extern int __cdecl _isalpha_l(int, _locale_t); } 
extern "C" { extern int __cdecl isupper(int); } 
extern "C" { extern int __cdecl _isupper_l(int, _locale_t); } 
extern "C" { extern int __cdecl islower(int); } 
extern "C" { extern int __cdecl _islower_l(int, _locale_t); } 
extern "C" { extern int __cdecl isdigit(int); } 
extern "C" { extern int __cdecl _isdigit_l(int, _locale_t); } 
extern "C" { extern int __cdecl isxdigit(int); } 
extern "C" { extern int __cdecl _isxdigit_l(int, _locale_t); } 
extern "C" { extern int __cdecl isspace(int); } 
extern "C" { extern int __cdecl _isspace_l(int, _locale_t); } 
extern "C" { extern int __cdecl ispunct(int); } 
extern "C" { extern int __cdecl _ispunct_l(int, _locale_t); } 
extern "C" { extern int __cdecl isalnum(int); } 
extern "C" { extern int __cdecl _isalnum_l(int, _locale_t); } 
extern "C" { extern int __cdecl isprint(int); } 
extern "C" { extern int __cdecl _isprint_l(int, _locale_t); } 
extern "C" { extern int __cdecl isgraph(int); } 
extern "C" { extern int __cdecl _isgraph_l(int, _locale_t); } 
extern "C" { extern int __cdecl iscntrl(int); } 
extern "C" { extern int __cdecl _iscntrl_l(int, _locale_t); } 
extern "C" { extern int __cdecl toupper(int); } 
extern "C" { extern int __cdecl tolower(int); } 
extern "C" { extern int __cdecl _tolower(int); } 
extern "C" { extern int __cdecl _tolower_l(int, _locale_t); } 
extern "C" { extern int __cdecl _toupper(int); } 
extern "C" { extern int __cdecl _toupper_l(int, _locale_t); } 
extern "C" { extern int __cdecl __isascii(int); } 
extern "C" { extern int __cdecl __toascii(int); } 
extern "C" { extern int __cdecl __iscsymf(int); } 
extern "C" { extern int __cdecl __iscsym(int); } 
#line 28 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\locale.h"
#pragma pack ( push, 8 )
#line 59 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\locale.h"
extern "C" { struct lconv { 
char *decimal_point; 
char *thousands_sep; 
char *grouping; 
char *int_curr_symbol; 
char *currency_symbol; 
char *mon_decimal_point; 
char *mon_thousands_sep; 
char *mon_grouping; 
char *positive_sign; 
char *negative_sign; 
char int_frac_digits; 
char frac_digits; 
char p_cs_precedes; 
char p_sep_by_space; 
char n_cs_precedes; 
char n_sep_by_space; 
char p_sign_posn; 
char n_sign_posn; 
}; }
#line 103 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\locale.h"
extern "C" { extern int __cdecl _configthreadlocale(int); } 
extern "C" { extern char *__cdecl setlocale(int, const char *); } 
extern "C" { extern lconv *__cdecl localeconv(); } 
extern "C" { extern _locale_t __cdecl _get_current_locale(); } 
extern "C" { extern _locale_t __cdecl _create_locale(int, const char *); } 
extern "C" { extern void __cdecl _free_locale(_locale_t); } 


extern "C" { extern __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using _get_current_locale instead. See online help for details.")) _locale_t __cdecl __get_current_locale(); } 
extern "C" { extern __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using _create_locale instead. See online help for details.")) _locale_t __cdecl __create_locale(int, const char *); } 
extern "C" { extern __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using _free_locale instead. See online help for details.")) void __cdecl __free_locale(_locale_t); } 
#line 129 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\locale.h"
#pragma pack ( pop )
#line 13 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocinfo.h"
#pragma pack ( push, 8 )
#line 57 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocinfo.h"
extern "C" { typedef 
#line 53
struct _Collvec { 

unsigned long _Hand; 
unsigned _Page; 
} _Collvec; }
#line 65
extern "C" { typedef 
#line 59
struct _Ctypevec { 

unsigned long _Hand; 
unsigned _Page; 
const short *_Table; 
int _Delfl; 
} _Ctypevec; }
#line 71
extern "C" { typedef 
#line 67
struct _Cvtvec { 

unsigned long _Hand; 
unsigned _Page; 
} _Cvtvec; }


extern "C" { extern _Collvec __cdecl _Getcoll(); } 
extern "C" { extern _Ctypevec __cdecl _Getctype(); } 
extern "C" { extern _Cvtvec __cdecl _Getcvt(); } 

extern "C" { extern int __cdecl _Getdateorder(); } 

extern "C" { extern int __cdecl _Mbrtowc(__wchar_t *, const char *, size_t, mbstate_t *, const _Cvtvec *); } 

extern "C" { extern float __cdecl _Stof(const char *, char **, long); } 
extern "C" { extern double __cdecl _Stod(const char *, char **, long); } 
extern "C" { extern long double __cdecl _Stold(const char *, char **, long); } 

extern "C" { extern int __cdecl _Strcoll(const char *, const char *, const char *, const char *, const _Collvec *); } 

extern "C" { extern size_t __cdecl _Strxfrm(char *, char *, const char *, const char *, const _Collvec *); } 


extern "C" { extern int __cdecl _Tolower(int, const _Ctypevec *); } 
extern "C" { extern int __cdecl _Toupper(int, const _Ctypevec *); } 
extern "C" { extern int __cdecl _Wcrtomb(char *, __wchar_t, mbstate_t *, const _Cvtvec *); } 

extern "C" { extern int __cdecl _Wcscoll(const __wchar_t *, const __wchar_t *, const __wchar_t *, const __wchar_t *, const _Collvec *); } 

extern "C" { extern size_t __cdecl _Wcsxfrm(__wchar_t *, __wchar_t *, const __wchar_t *, const __wchar_t *, const _Collvec *); } 



extern "C" { extern short __cdecl _Getwctype(__wchar_t, const _Ctypevec *); } 
extern "C" { extern const __wchar_t *__cdecl _Getwctypes(const __wchar_t *, const __wchar_t *, short *, const _Ctypevec *); } 

extern "C" { extern __wchar_t __cdecl _Towlower(__wchar_t, const _Ctypevec *); } 
extern "C" { extern __wchar_t __cdecl _Towupper(__wchar_t, const _Ctypevec *); } 
#line 112 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocinfo.h"
extern "C" { extern void *__cdecl _Gettnames(); } 
extern "C" { extern char *__cdecl _Getdays(); } 
extern "C" { extern char *__cdecl _Getmonths(); } 
extern "C" { extern size_t __cdecl _Strftime(char *, size_t, const char *, const tm *, void *); } 
#line 121
extern "C" { extern _locale_t __cdecl _GetLocaleForCP(unsigned); } 
#line 12 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocinfo"
#pragma warning(push,3)
#pragma warning(disable:4412)
#line 125 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocinfo.h"
#pragma pack ( pop )
#line 11 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocinfo"
#pragma pack ( push, 8 )
#line 16 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocinfo"
namespace std { 


class _Timevec { 


public: _Timevec(void *_Ptr = 0) : _Timeptr(_Ptr) 

{ 
} 

_Timevec(const _Timevec &_Right) 
{ 
((*this) = _Right); 
} 

~_Timevec() 
{ 
free(this->_Timeptr); 
} 

_Timevec &operator=(const _Timevec &_Right) 
{ 
(this->_Timeptr) = _Right._Timeptr; 
(((_Timevec &)_Right)._Timeptr) = (0); 
return *this; 
} 

void *_Getptr() const 
{ 
return this->_Timeptr; 
} 


private: void *_Timeptr; 
}; 




#pragma warning(push)
#pragma warning(disable:4412)
class _Locinfo { 


public: typedef ::_Collvec _Collvec; 
typedef ::_Ctypevec _Ctypevec; 
typedef ::_Cvtvec _Cvtvec; 
typedef std::_Timevec _Timevec; 

static void __cdecl _Locinfo_ctor(_Locinfo *, const char *); 
static void __cdecl _Locinfo_ctor(_Locinfo *, const string &); 
static void __cdecl _Locinfo_ctor(_Locinfo *, int, const char *); 
static void __cdecl _Locinfo_dtor(_Locinfo *); 
static _Locinfo &__cdecl _Locinfo_Addcats(_Locinfo *, int, const char *); 

_Locinfo(const char *_Pch = ("C")) : _Lock(0) 
#line 76 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocinfo"
{ 
if (_Pch == (0)) { 
throw ((runtime_error)("bad locale name")); }  
_Locinfo_ctor(this, _Pch); 
} 

_Locinfo(int _I, const char *_Pch) : _Lock(0) 
#line 86 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocinfo"
{ 
if (_Pch == (0)) { 
throw ((runtime_error)("bad locale name")); }  
_Locinfo_ctor(this, _I, _Pch); 
} 

_Locinfo(const string &locstr) : _Lock(0) 
#line 96 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocinfo"
{ 
_Locinfo_ctor(this, locstr); 
} 

~_Locinfo() 
{ 
_Locinfo_dtor(this); 
} 

_Locinfo &_Addcats(int _I, const char *_Pch) 
{ 
if (_Pch == (0)) { 
throw ((runtime_error)("bad locale name")); }  
return _Locinfo_Addcats(this, _I, _Pch); 
} 

string _Getname() const 
{ 
return this->_Newlocname; 
} 

_Collvec _Getcoll() const 
{ 
return ::_Getcoll(); 
} 

_Ctypevec _Getctype() const 
{ 
return ::_Getctype(); 
} 

_Cvtvec _Getcvt() const 
{ 
return ::_Getcvt(); 
} 

const lconv *_Getlconv() const 
{ 
return localeconv(); 
} 

_Timevec _Gettnames() const 
{ 
return ((_Timevec)(::_Gettnames())); 
} 

const char *_Getdays() const 
{ 
auto const char *_Ptr = (::_Getdays()); 
if (_Ptr != (0)) 
{ 
((((_Locinfo &)(*this))._Days) = _Ptr); 
free((void *)_Ptr); 
}  
return ((this->_Days).size() != (0)) ? (this->_Days).c_str() : (":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday:Thu:Thursday:Fri:Friday:Sat:Saturday"); 


} 

const char *_Getmonths() const 
{ 
auto const char *_Ptr = (::_Getmonths()); 
if (_Ptr != (0)) 
{ 
((((_Locinfo &)(*this))._Months) = _Ptr); 
free((void *)_Ptr); 
}  
return ((this->_Months).size() != (0)) ? (this->_Months).c_str() : (":Jan:January:Feb:February:Mar:March:Apr:April:May:May:Jun:June:Jul:July:Aug:August:Sep:September:Oct:October:Nov:November:Dec:De" "cember"); 




} 

const char *_Getfalse() const 
{ 
return "false"; 
} 

const char *_Gettrue() const 
{ 
return "true"; 
} 

int _Getdateorder() const 
{ 
return ::_Getdateorder(); 
} 
#line 191
private: _Lockit _Lock; 
#line 193 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocinfo"
string _Days; 
string _Months; 
string _Oldlocname; 
string _Newlocname; 
}; 
#pragma warning(pop)


template < class _Elem > inline
 int __cdecl _LStrcoll ( const _Elem * _First1, const _Elem * _Last1,
  const _Elem * _First2, const _Elem * _Last2,
   const _Locinfo :: _Collvec * )
 {
 for (; _First1 != _Last1 && _First2 != _Last2; ++ _First1, ++ _First2 )
  if ( * _First1 < * _First2 )
   return ( - 1 );
  else if ( * _First2 < * _First1 )
   return ( + 1 );
 return ( _First2 != _Last2 ? - 1 : _First1 != _Last1 ? + 1 : 0 );
 }


template<> inline int __cdecl _LStrcoll(const char *_First1, const char *_Last1, const char *
_First2, const char *_Last2, const _Locinfo::_Collvec *
_Vector) 
{ 
return _Strcoll(_First1, _Last1, _First2, _Last2, _Vector); 
} 


template<> inline int __cdecl _LStrcoll(const __wchar_t *_First1, const __wchar_t *_Last1, const __wchar_t *
_First2, const __wchar_t *_Last2, const _Locinfo::_Collvec *
_Vector) 
{ 
return _Wcscoll(_First1, _Last1, _First2, _Last2, _Vector); 
} 


template < class _Elem > inline
 size_t __cdecl _LStrxfrm ( _Elem * _First1, _Elem * _Last1,
  const _Elem * _First2, const _Elem * _Last2,
   const _Locinfo :: _Collvec * )
 {
 size_t _Count = _Last2 - _First2;
 if ( _Count <= ( size_t ) ( _Last1 - _First1 ) )
  :: memcpy_s ( ( _First1 ), ( ( _Last1 - _First1 ) * sizeof ( _Elem ) ), ( _First2 ), ( _Count * sizeof ( _Elem ) ) );
 return ( _Count );
 }


template<> inline size_t __cdecl _LStrxfrm(char *
_First1, char *
_Last1, const char *
_First2, const char *_Last2, const _Locinfo::_Collvec *
_Vector) 
{ 
return _Strxfrm(_First1, _Last1, _First2, _Last2, _Vector); 
} 


template<> inline size_t __cdecl _LStrxfrm(__wchar_t *
_First1, __wchar_t *
_Last1, const __wchar_t *
_First2, const __wchar_t *_Last2, const _Locinfo::_Collvec *
_Vector) 
{ 
return _Wcsxfrm(_First1, _Last1, _First2, _Last2, _Vector); 
} 
}

#pragma warning(pop)
#line 15 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocale"
#pragma warning(push,3)
#pragma warning(disable:4412)
#line 264 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocinfo"
#pragma pack ( pop )
#line 14 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocale"
#pragma pack ( push, 8 )
#line 19 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocale"
namespace std { 


template<class _Dummy> 
class _Locbase { 


public: static const int collate = ((1 << 1) >> 1); 
static const int ctype = ((1 << 2) >> 1); 
static const int monetary = ((1 << 3) >> 1); 
static const int numeric = ((1 << 4) >> 1); 
static const int time = ((1 << 5) >> 1); 
static const int messages = ((1 << 6) >> 1); 
static const int all = (((1 << 7) >> 1) - 1); 
static const int none = 0; 
}; 

template<class _Dummy> const int 
_Locbase< _Dummy> ::collate; 
template<class _Dummy> const int 
_Locbase< _Dummy> ::ctype; 
template<class _Dummy> const int 
_Locbase< _Dummy> ::monetary; 
template<class _Dummy> const int 
_Locbase< _Dummy> ::numeric; 
template<class _Dummy> const int 
_Locbase< _Dummy> ::time; 
template<class _Dummy> const int 
_Locbase< _Dummy> ::messages; 
template<class _Dummy> const int 
_Locbase< _Dummy> ::all; 
template<class _Dummy> const int 
_Locbase< _Dummy> ::none; 


class locale; 
template < class _Facet >
 const _Facet & __cdecl use_facet ( const locale & );


#pragma warning(push)
#pragma warning(disable:4412)
class locale : public _Locbase< int>  { 



public: typedef int category; 


class id { 


public: id(size_t _Val = (0)) : _Id(_Val) 

{ 
} 

operator size_t() 
{ 
if ((this->_Id) == (0)) 
{ 
{ auto _Lockit _Lock(0); 
if ((this->_Id) == (0)) { 
(this->_Id) = ++_Id_cnt; }  
} 
}  
return this->_Id; 
} 


private: id(const id &); 
id &operator=(const id &); 

size_t _Id; 
static int &__cdecl _Id_cnt_func(); 



static int _Id_cnt; 
#line 99 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocale"
}; 

class _Locimp; 


class facet { 

friend class locale; 
friend class _Locimp; 


public: static size_t __cdecl _Getcat(const facet ** = 0, const locale * = 0) 

{ 
return (size_t)(-1); 
} 

void _Incref() 
{ 
{ auto _Lockit _Lock(0); 
if ((this->_Refs) < ((size_t)(-1))) { 
++(this->_Refs); }  
} 
} 

facet *_Decref() 
{ 
{ auto _Lockit _Lock(0); 
if (((0) < (this->_Refs)) && ((this->_Refs) < ((size_t)(-1)))) { 
--(this->_Refs); }  
return ((this->_Refs) == (0)) ? this : (0); 
} 
} 

void _Register() 
{ 
#line 138 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocale"
facet_Register(this); 
#line 140 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocale"
} 
#line 169 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocale"
virtual ~facet() 
{ 
} 


protected: explicit facet(size_t _Initrefs = (0)) : _Refs(_Initrefs) 

{ 
} 
#line 183 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocale"
private: static void __cdecl facet_Register(facet *); 
#line 186 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocale"
facet(const facet &); 
facet &operator=(const facet &); 

size_t _Refs; 
}; 

#pragma warning(push)
#pragma warning(disable:4275)

class _Locimp : public facet { 



protected: virtual ~_Locimp() 
{ 
_Locimp_dtor(this); 
} 


private: static void __cdecl _Locimp_dtor(_Locimp *); 
static void _Locimp_ctor(_Locimp *, const _Locimp &); 
static void __cdecl _Locimp_Addfac(_Locimp *, facet *, size_t); 
friend class locale; 

_Locimp(bool _Transparent = false) : facet(1), _Facetvec((0)), _Facetcount((0)), _Catmask((none)), _Xparent(_Transparent), _Name("*") 


{ } 

_Locimp(const _Locimp &_Right) : facet(1), _Facetvec((0)), _Facetcount((_Right._Facetcount)), _Catmask((_Right._Catmask)), _Xparent((_Right._Xparent)), _Name(_Right._Name) 


{ 
_Locimp_ctor(this, _Right); 
} 

void _Addfac(facet *_Pfacet, size_t _Id) 
{ 
_Locimp_Addfac(this, _Pfacet, _Id); 
} 

static _Locimp *_Makeloc(const _Locinfo &, category, _Locimp *, const locale *); 


static void _Makewloc(const _Locinfo &, category, _Locimp *, const locale *); 



static void _Makeushloc(const _Locinfo &, category, _Locimp *, const locale *); 
#line 238 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocale"
static void _Makexloc(const _Locinfo &, category, _Locimp *, const locale *); 


facet **_Facetvec; 
size_t _Facetcount; 
category _Catmask; 
bool _Xparent; 
string _Name; 

static _Locimp *&__cdecl _Clocptr_func(); 



static _Locimp *_Clocptr; 
#line 254 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocale"
_Locimp &operator=(const _Locimp &); 

}; 
#pragma warning(pop)

__declspec(deprecated("This is an obsolete part of the Standard C++ Library Implementation. Do not use it.")) locale &_Addfac(facet *_Fac, size_t _Id, size_t 
_Catmask) 
{ 
if ((1) < ((*(this->_Ptr))._Refs)) 
{ 
(*(this->_Ptr))._Decref(); 
(this->_Ptr) = (new _Locimp(*(this->_Ptr))); 
}  
(*(this->_Ptr))._Addfac(_Fac, _Id); 

if (_Catmask != (0)) { 
(((*(this->_Ptr))._Name) = ("*")); }  
return *this; 
} 


template < class _Elem,
  class _Traits,
  class _Alloc >
  bool operator ( ) ( const basic_string < _Elem, _Traits, _Alloc > & _Left,
   const basic_string < _Elem, _Traits, _Alloc > & _Right ) const
  {
  const std :: collate < _Elem > & _Coll_fac =
   std :: use_facet < std :: collate < _Elem > > ( * this );

  return ( _Coll_fac . compare ( _Left . c_str ( ), _Left . c_str ( ) + _Left . size ( ),
   _Right . c_str ( ), _Right . c_str ( ) + _Right . size ( ) ) < 0 );
  }

template < class _Facet >
  locale combine ( const locale & _Loc ) const
  {
  _Facet * _Facptr;

  try {
   _Facptr = ( _Facet * ) & std :: use_facet < _Facet > ( _Loc );
  } catch ( ... ) {
   throw runtime_error ( "locale::combine facet missing" );
  }

  _Locimp * _Newimp = new _Locimp ( * _Ptr );
  _Newimp -> _Addfac ( _Facptr, _Facet :: id );
  _Newimp -> _Catmask = 0;
  _Newimp -> _Name = "*";
  return ( locale ( _Newimp ) );
  }

template < class _Facet >
   locale ( const locale & _Loc, const _Facet * _Facptr )
   : _Ptr ( new _Locimp ( * _Loc . _Ptr ) )
  {
  if ( _Facptr != 0 )
   {
   _Ptr -> _Addfac ( ( _Facet * ) _Facptr, _Facet :: id );
   if ( _Facet :: _Getcat ( ) != ( size_t ) ( - 1 ) )
    {
    _Ptr -> _Catmask = 0;
    _Ptr -> _Name = "*";
    }
   }
  }


locale() throw() : _Ptr(_Init()) 

{ 
(*_Getgloballocale())._Incref(); 
} 

locale(_Uninitialized) 
{ 
} 

locale(const locale &_Right) throw() : _Ptr((_Right._Ptr)) 

{ 
(*(this->_Ptr))._Incref(); 
} 

locale(const locale &_Loc, const locale &_Other, category 
_Cat) : _Ptr((new _Locimp(*(_Loc._Ptr)))) 

{ 
try { 
{ auto _Locinfo _Lobj((*(_Loc._Ptr))._Catmask, ((*(_Loc._Ptr))._Name).c_str()); 
_Locimp::_Makeloc(_Lobj._Addcats(_Cat & ((*(_Other._Ptr))._Catmask), ((*(_Other._Ptr))._Name).c_str()), _Cat, this->_Ptr, (&_Other)); 

} 
} catch (...) { 
delete (*(this->_Ptr))._Decref(); 
throw; 
}  
} 

explicit locale(const char *_Locname, category 
_Cat = (all)) : _Ptr((new _Locimp)) 

{ 
try { 
_Init(); 
{ auto _Locinfo _Lobj(_Cat, _Locname); 
if (_Lobj._Getname().compare("*") == 0) { 
throw ((runtime_error)("bad locale name")); }  
_Locimp::_Makeloc(_Lobj, _Cat, this->_Ptr, 0); 
} 
} catch (...) { 
delete (*(this->_Ptr))._Decref(); 
throw; 
}  
} 

locale(const locale &_Loc, const char *_Locname, category 
_Cat) : _Ptr((new _Locimp(*(_Loc._Ptr)))) 

{ 
try { 
{ auto _Locinfo _Lobj((*(_Loc._Ptr))._Catmask, ((*(_Loc._Ptr))._Name).c_str()); 
auto bool _Hadname = (_Lobj._Getname().compare("*") != 0); 
_Lobj._Addcats(_Cat, _Locname); 

if (_Hadname && (_Lobj._Getname().compare("*") == 0)) { 
throw ((runtime_error)("bad locale name")); }  
_Locimp::_Makeloc(_Lobj, _Cat, this->_Ptr, 0); 
} 
} catch (...) { 
delete (*(this->_Ptr))._Decref(); 
throw; 
}  
} 

~locale() throw() 
{ 
if ((this->_Ptr) != (0)) { 
delete (*(this->_Ptr))._Decref(); }  
} 

locale &operator=(const locale &_Right) throw() 
{ 
if ((this->_Ptr) != (_Right._Ptr)) 
{ 
delete (*(this->_Ptr))._Decref(); 
(this->_Ptr) = _Right._Ptr; 
(*(this->_Ptr))._Incref(); 
}  
return *this; 
} 

string name() const 
{ 
return (*(this->_Ptr))._Name; 
} 

const facet *_Getfacet(size_t _Id) const 
{ 
auto const facet *_Facptr = ((_Id < ((*(this->_Ptr))._Facetcount)) ? (((*(this->_Ptr))._Facetvec)[_Id]) : (0)); 

if ((_Facptr != (0)) || (!((*(this->_Ptr))._Xparent))) { 
return _Facptr; } else 

{ 
auto _Locimp *_Ptr = _Getgloballocale(); 
return (_Id < (_Ptr->_Facetcount)) ? ((_Ptr->_Facetvec)[_Id]) : (0); 


}  
} 


bool operator==(const locale &_Loc) const 
{ 
return ((this->_Ptr) == (_Loc._Ptr)) || ((this->name().compare("*") != 0) && (this->name().compare(_Loc.name()) == 0)); 

} 

bool operator!=(const locale &_Right) const 
{ 
return !((*this) == _Right); 
} 

static const locale &__cdecl classic(); 

static locale __cdecl global(const locale &); 

static locale __cdecl empty(); 


private: locale(_Locimp *_Ptrimp) : _Ptr(_Ptrimp) 

{ 
} 

static _Locimp *__cdecl _Getgloballocale(); 
static _Locimp *__cdecl _Init(); 
static void __cdecl _Setgloballocale(void *); 

_Locimp *_Ptr; 
}; 
#pragma warning(pop)


template<class _Facet> 
struct _Facetptr { 

static const locale::facet *_Psave; 
}; 

template<class _Facet> const locale::facet *
_Facetptr< _Facet> ::_Psave = (0); 

template < class _Facet > inline __declspec ( deprecated ( "This is an obsolete part of the Standard C++ Library Implementation. Do not use it." ) )
 locale _Addfac ( locale _Loc, const _Facet * _Facptr )
  {
  size_t _Cat = _Facet :: _Getcat ( 0, 0 );
  locale _Newloc = _Loc . _Addfac ( ( _Facet * ) _Facptr, _Facet :: id, _Cat );

  return ( _Newloc );
  }
#line 482
template < class _Facet > inline
 const _Facet & __cdecl use_facet ( const locale & _Loc )


{
 { :: std :: _Lockit _Lock ( 0 );
  const locale :: facet * _Psave =
   _Facetptr < _Facet > :: _Psave;

  size_t _Id = _Facet :: id;
  const locale :: facet * _Pf = _Loc . _Getfacet ( _Id );

  if ( _Pf != 0 )
   ;
  else if ( _Psave != 0 )
   _Pf = _Psave;
  else if ( _Facet :: _Getcat ( & _Psave, & _Loc ) == ( size_t ) ( - 1 ) )


  throw bad_cast ( );





  else
   {
   _Pf = _Psave;
   _Facetptr < _Facet > :: _Psave = _Psave;

   locale :: facet * _Pfmod = ( _Facet * ) _Psave;
   _Pfmod -> _Incref ( );
   _Pfmod -> _Register ( );
   }

  return ( ( const _Facet & ) ( * _Pf ) );
 }
 }
#line 521 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocale"
template < class _Facet > inline __declspec ( deprecated ( "This is an obsolete part of the Standard C++ Library Implementation. Do not use it." ) )
 const _Facet & __cdecl use_facet ( const locale & _Loc, const _Facet *,
  bool = false )
 {
 return use_facet < _Facet > ( _Loc );
 }


template < class _Elem,
 class _InIt > inline
 int __cdecl _Getloctxt ( _InIt & _First, _InIt & _Last, size_t _Numfields,
  const _Elem * _Ptr )
 {
 for ( size_t _Off = 0; _Ptr [ _Off ] != ( _Elem ) 0; ++ _Off )
  if ( _Ptr [ _Off ] == _Ptr [ 0 ] )
   ++ _Numfields;
 string _Str ( _Numfields, '\000' );

 int _Ans = - 2;
 for ( size_t _Column = 1;; ++ _Column, ++ _First, _Ans = - 1 )
  {
  bool _Prefix = false;
  size_t _Off = 0;
  size_t _Field = 0;

  for (; _Field < _Numfields; ++ _Field )
   {
   for (; _Ptr [ _Off ] != ( _Elem ) 0 && _Ptr [ _Off ] != _Ptr [ 0 ]; ++ _Off )
    ;

   if ( _Str [ _Field ] != '\000' )
    _Off += _Str [ _Field ];
   else if ( _Ptr [ _Off += _Column ] == _Ptr [ 0 ]
    || _Ptr [ _Off ] == ( _Elem ) 0 )
    {
    _Str [ _Field ] = ( char ) ( _Column < 127
     ? _Column : 127 );
    _Ans = ( int ) _Field;
    }
   else if ( _First == _Last || _Ptr [ _Off ] != * _First )
    _Str [ _Field ] = ( char ) ( _Column < 127
     ? _Column : 127 );
   else
    _Prefix = true;
   }

  if ( ! _Prefix || _First == _Last )
   break;
  }
 return ( _Ans );
 }
#line 577
template < class _Elem > inline
 char __cdecl _Maklocbyte ( _Elem _Char,
  const _Locinfo :: _Cvtvec & )
 {
 return ( ( char ) ( unsigned char ) _Char );
 }


template<> inline char __cdecl _Maklocbyte(__wchar_t _Char, const _Locinfo::_Cvtvec &
_Cvt) 
{ 
auto char _Byte = '\000'; 
auto mbstate_t _Mbst1 = (0); 
_Wcrtomb(&_Byte, _Char, &_Mbst1, (&_Cvt)); 
return _Byte; 
} 
#line 599
template < class _Elem > inline
 _Elem __cdecl _Maklocchr ( char _Byte, _Elem *,
  const _Locinfo :: _Cvtvec & )
 {
 return ( ( _Elem ) ( unsigned char ) _Byte );
 }


template<> inline __wchar_t __cdecl _Maklocchr(char _Byte, __wchar_t *, const _Locinfo::_Cvtvec &
_Cvt) 
{ 
auto __wchar_t _Wc = L'\x0'; 
auto mbstate_t _Mbst1 = (0); 
_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, (&_Cvt)); 
return _Wc; 
} 
#line 621
template < class _Elem > inline
 _Elem * __cdecl _Maklocstr ( const char * _Ptr, _Elem *,
  const _Locinfo :: _Cvtvec & )
 {
 size_t _Count = :: strlen ( _Ptr ) + 1;
 _Elem * _Ptrdest = new _Elem [ _Count ];

#pragma warning(push)
#pragma warning(disable: 6011)

 for ( _Elem * _Ptrnext = _Ptrdest; 0 < _Count; -- _Count, ++ _Ptrnext, ++ _Ptr )
  * _Ptrnext = ( _Elem ) ( unsigned char ) * _Ptr;
 return ( _Ptrdest );
#pragma warning(pop)
 }


template<> inline __wchar_t *__cdecl _Maklocstr(const char *_Ptr, __wchar_t *, const _Locinfo::_Cvtvec &
_Cvt) 
{ 
auto size_t _Count; auto size_t _Count1; 
auto size_t _Wchars; 
auto const char *_Ptr1; 
auto int _Bytes; 
auto __wchar_t _Wc; 
auto mbstate_t _Mbst1 = (0); 

_Count1 = ::strlen(_Ptr) + (1); 
for (((_Count = _Count1), (_Wchars = (0))), (_Ptr1 = _Ptr); (0) < _Count; ((_Count -= _Bytes), (_Ptr1 += _Bytes)), (++_Wchars)) { 

if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, (&_Cvt))) <= 0) { 
break; }  }  
++_Wchars; 

auto __wchar_t *_Ptrdest = (new __wchar_t [_Wchars]); 
auto __wchar_t *_Ptrnext = _Ptrdest; 
auto mbstate_t _Mbst2 = (0); 
#pragma warning(push)
#pragma warning(disable: 6011)

for (; (0) < _Wchars; (((_Count -= _Bytes), (_Ptr += _Bytes)), (--_Wchars)), (++_Ptrnext)) { 

if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, (&_Cvt))) <= 0) { 
break; }  }  
(*_Ptrnext) = L'\x0'; 
#pragma warning(pop)
return _Ptrdest; 
} 


#pragma warning(push)
#pragma warning(disable:4275)

class codecvt_base : public locale::facet { 




public: enum __cuda_ok { 
ok, partial, error, noconv}; 
typedef int result; 

codecvt_base(size_t _Refs = (0)) : locale::facet(_Refs) 

{ 
} 

bool always_noconv() const throw() 
{ 
return this->do_always_noconv(); 
} 

int max_length() const throw() 
{ 
return this->do_max_length(); 
} 

int encoding() const throw() 
{ 
return this->do_encoding(); 
} 

virtual ~codecvt_base() 
{ 
} 


protected: virtual bool do_always_noconv() const throw() 
{ 
return true; 
} 

virtual int do_max_length() const throw() 
{ 
return 1; 
} 

virtual int do_encoding() const throw() 
{ 
return 1; 
} 
}; 
#pragma warning(pop)


template < class _Elem,
 class _Byte,
 class _Statype >
 class codecvt
  : public codecvt_base
 {
public :
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in ( _Statype & _State,
  const _Byte * _First1, const _Byte * _Last1, const _Byte * & _Mid1,
  _Elem * _First2, _Elem * _Last2, _Elem * & _Mid2 ) const
  {
  return ( do_in ( _State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2 ) );
  }

 result out ( _Statype & _State,
  const _Elem * _First1, const _Elem * _Last1, const _Elem * & _Mid1,
  _Byte * _First2, _Byte * _Last2, _Byte * & _Mid2 ) const
  {
  return ( do_out ( _State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2 ) );
  }

 result unshift ( _Statype & _State,
  _Byte * _First2, _Byte * _Last2, _Byte * & _Mid2 ) const
  {
  return ( do_unshift ( _State, _First2, _Last2, _Mid2 ) );
  }

 int length ( const _Statype & _State, const _Byte * _First1,
  const _Byte * _Last1, size_t _Count ) const
  {
  return ( do_length ( _State, _First1, _Last1, _Count ) );
  }

  static locale :: id id;

 explicit codecvt ( size_t _Refs = 0 )
  : codecvt_base ( _Refs )
  {
  { _Locinfo _Lobj;
   _Init ( _Lobj );
  }
  }

  codecvt ( const _Locinfo & _Lobj, size_t _Refs = 0 )
  : codecvt_base ( _Refs )
  {
  _Init ( _Lobj );
  }

 static size_t __cdecl _Getcat ( const locale :: facet * * _Ppf = 0,
  const locale * _Ploc = 0 )
  {
  if ( _Ppf != 0 && * _Ppf == 0 )
   * _Ppf = new codecvt < _Elem, _Byte, _Statype > (
    _Locinfo ( _Ploc -> name ( ) ) );
  return ( 2 );
  }

protected :
 virtual ~ codecvt ( )
  {
  }

protected :
 void _Init ( const _Locinfo & )
  {
  }

 virtual result do_in ( _Statype &,
  const _Byte * _First1, const _Byte *, const _Byte * & _Mid1,
  _Elem * _First2, _Elem *, _Elem * & _Mid2 ) const
  {
  _Mid1 = _First1, _Mid2 = _First2;
  return ( noconv );
  }

 virtual result do_out ( _Statype &,
  const _Elem * _First1, const _Elem *, const _Elem * & _Mid1,
  _Byte * _First2, _Byte *, _Byte * & _Mid2 ) const
  {
  _Mid1 = _First1, _Mid2 = _First2;
  return ( noconv );
  }

 virtual result do_unshift ( _Statype &,
  _Byte * _First2, _Byte *, _Byte * & _Mid2 ) const
  {
  _Mid2 = _First2;
  return ( noconv );
  }

 virtual int do_length ( const _Statype &, const _Byte * _First1,
  const _Byte * _Last1, size_t _Count ) const
  {
  return ( ( int ) ( _Count < ( size_t ) ( _Last1 - _First1 )
   ? _Count : _Last1 - _First1 ) );
  }
 };


template<class _Elem, class 
_Byte, class 
_Statype> locale::id 
codecvt< _Elem, _Byte, _Statype> ::id; 


template<> class codecvt< __wchar_t, char, int>  : public codecvt_base { 



public: typedef __wchar_t _Elem; 
typedef char _Byte; 
typedef _Mbstatet _Statype; 
typedef _Elem intern_type; 
typedef _Byte extern_type; 
typedef _Statype state_type; 

result in(_Statype &_State, const _Byte *
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
{ 
return this->do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 

} 

result out(_Statype &_State, const _Elem *
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
{ 
return this->do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 

} 

result unshift(_Statype &_State, _Byte *
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
{ 
return this->do_unshift(_State, _First2, _Last2, _Mid2); 

} 

int length(const _Statype &_State, const _Byte *_First1, const _Byte *
_Last1, size_t _Count) const 
{ 
return this->do_length(_State, _First1, _Last1, _Count); 
} 

static locale::id &__cdecl _Id_func(); 



static locale::id id; 
#line 885 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocale"
explicit codecvt(size_t _Refs = (0)) : codecvt_base(_Refs) 

{ 
{ auto _Locinfo _Lobj; 
this->_Init(_Lobj); 
} 
} 

codecvt(const _Locinfo &_Lobj, size_t _Refs = (0)) : codecvt_base(_Refs) 

{ 
this->_Init(_Lobj); 
} 

static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *
_Ploc = 0) 
{ 
if ((_Ppf != (0)) && ((*_Ppf) == (0))) { 
(*_Ppf) = new std::codecvt< __wchar_t, char, int> (((_Locinfo)(_Ploc->name()))); }  

return 2; 
} 


protected: virtual ~codecvt() 
{ 
} 


void _Init(const _Locinfo &_Lobj) 
{ 
(this->_Cvt) = _Lobj._Getcvt(); 
} 

virtual result do_in(_Statype &_State, const _Byte *
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
{ 
; 
; 
(_Mid1 = _First1), (_Mid2 = _First2); 
auto result _Ans = (((_Mid1) == _Last1) ? ok : partial); 
auto int _Bytes; 

while (((_Mid1) != _Last1) && ((_Mid2) != _Last2)) { 
switch (_Bytes = _Mbrtowc(_Mid2, _Mid1, _Last1 - _Mid1, (&_State), &(this->_Cvt))) 

{ 
case (-2): 
_Mid1 = _Last1; 
return _Ans; 

case (-1): 
return error; 

case 0: 
if ((*(_Mid2)) == ((_Elem)0)) { 
_Bytes = (int)::strlen(_Mid1) + 1; }  


default: 
if (_Bytes == (-3)) { 
_Bytes = 0; }  
_Mid1 += _Bytes; 
++_Mid2; 
_Ans = (ok); break;
}  }  
return _Ans; 
} 

virtual result do_out(_Statype &_State, const _Elem *
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
{ 
; 
; 
(_Mid1 = _First1), (_Mid2 = _First2); 
auto result _Ans = (((_Mid1) == _Last1) ? ok : partial); 
auto int _Bytes; 

while (((_Mid1) != _Last1) && ((_Mid2) != _Last2)) { 
if (((int)___mb_cur_max_func()) <= (_Last2 - _Mid2)) { 
if ((_Bytes = _Wcrtomb(_Mid2, *(_Mid1), (&_State), &(this->_Cvt))) < 0) { 

return error; } else { 

((++_Mid1), (_Mid2 += _Bytes)), (_Ans = (ok)); }  } else 

{ 
auto _Byte _Buf[5]; 
auto _Statype _Stsave = (_State); 

if ((_Bytes = _Wcrtomb(_Buf, *(_Mid1), (&_State), &(this->_Cvt))) < 0) { 

return error; } else { 
if ((_Last2 - _Mid2) < _Bytes) 
{ 
_State = _Stsave; 
return _Ans; 
} else 

{ 
::memcpy_s(_Mid2, _Last2 - _Mid2, _Buf, _Bytes); 
((++_Mid1), (_Mid2 += _Bytes)), (_Ans = (ok)); 
}  }  
}  }  
return _Ans; 
} 

virtual result do_unshift(_Statype &_State, _Byte *
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
{ 
; 
_Mid2 = _First2; 
auto result _Ans = (ok); 
auto int _Bytes; 
auto _Byte _Buf[5]; 
auto _Statype _Stsave = (_State); 

if ((_Bytes = _Wcrtomb(_Buf, L'\x0', (&_State), &(this->_Cvt))) <= 0) { 
_Ans = (error); } else { 
if ((_Last2 - _Mid2) < (--_Bytes)) 
{ 
_State = _Stsave; 
_Ans = (partial); 
} else { 
if (0 < _Bytes) 
{ 
::memcpy_s(_Mid2, _Last2 - _Mid2, _Buf, _Bytes); 
_Mid2 += _Bytes; 
}  }  }  
return _Ans; 
} 

virtual int do_length(const _Statype &_State, const _Byte *_First1, const _Byte *
_Last1, size_t _Count) const 
{ 
#line 1028 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocale"
; 
auto int _Wchars; 
auto const _Byte *_Mid1; 
auto _Statype _Mystate = (_State); 

for ((_Wchars = 0), (_Mid1 = _First1); (((unsigned)_Wchars) < _Count) && (_Mid1 != _Last1);) 

{ 
auto int _Bytes; 
auto _Elem _Ch; 

switch (_Bytes = _Mbrtowc(&_Ch, _Mid1, _Last1 - _Mid1, &_Mystate, &(this->_Cvt))) 

{ 
case (-2): 
return _Wchars; 

case (-1): 
return _Wchars; 

case 0: 
if (_Ch == ((_Elem)0)) { 
_Bytes = (int)::strlen(_Mid1) + 1; }  


default: 
if (_Bytes == (-3)) { 
_Bytes = 0; }  
_Mid1 += _Bytes; 
++_Wchars; break;
}  
}  
return _Wchars; 
#line 1062 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocale"
} 

virtual bool do_always_noconv() const throw() 
{ 
return false; 
} 

virtual int do_max_length() const throw() 
{ 
return 5; 
} 


private: _Locinfo::_Cvtvec _Cvt; 
}; 



template<> class codecvt< unsigned short, char, int>  : public codecvt_base { 



public: typedef unsigned short _Elem; 
typedef char _Byte; 
typedef _Mbstatet _Statype; 
typedef _Elem intern_type; 
typedef _Byte extern_type; 
typedef _Statype state_type; 

result in(_Statype &_State, const _Byte *
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
{ 
return this->do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 

} 

result out(_Statype &_State, const _Elem *
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
{ 
return this->do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 

} 

result unshift(_Statype &_State, _Byte *
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
{ 
return this->do_unshift(_State, _First2, _Last2, _Mid2); 

} 

int length(const _Statype &_State, const _Byte *_First1, const _Byte *
_Last1, size_t _Count) const 
{ 
return this->do_length(_State, _First1, _Last1, _Count); 
} 

static locale::id &__cdecl _Id_func(); 



static locale::id id; 
#line 1127 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocale"
explicit codecvt(size_t _Refs = (0)) : codecvt_base(_Refs) 

{ 
{ auto _Locinfo _Lobj; 
this->_Init(_Lobj); 
} 
} 

codecvt(const _Locinfo &_Lobj, size_t _Refs = (0)) : codecvt_base(_Refs) 

{ 
this->_Init(_Lobj); 
} 

static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *
_Ploc = 0) 
{ 
if ((_Ppf != (0)) && ((*_Ppf) == (0))) { 
(*_Ppf) = new std::codecvt< unsigned short, char, int> (((_Locinfo)(_Ploc->name()))); }  

return 2; 
} 


protected: virtual ~codecvt() 
{ 
} 


codecvt(const char *_Locname, size_t _Refs = (0)) : codecvt_base(_Refs) 

{ 
{ auto _Locinfo _Lobj(_Locname); 
this->_Init(_Lobj); 
} 
} 

void _Init(const _Locinfo &_Lobj) 
{ 
(this->_Cvt) = _Lobj._Getcvt(); 
} 

virtual result do_in(_Statype &_State, const _Byte *
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
{ 
; 
; 
(_Mid1 = _First1), (_Mid2 = _First2); 
auto result _Ans = (((_Mid1) == _Last1) ? ok : partial); 
auto int _Bytes; 

while (((_Mid1) != _Last1) && ((_Mid2) != _Last2)) { 
switch (_Bytes = _Mbrtowc((__wchar_t *)(_Mid2), _Mid1, _Last1 - _Mid1, (&_State), &(this->_Cvt))) 

{ 
case (-2): 
_Mid1 = _Last1; 
return _Ans; 

case (-1): 
return error; 

case 0: 
if ((*(_Mid2)) == ((_Elem)0)) { 
_Bytes = (int)::strlen(_Mid1) + 1; }  


default: 
if (_Bytes == (-3)) { 
_Bytes = 0; }  
_Mid1 += _Bytes; 
++_Mid2; 
_Ans = (ok); break;
}  }  
return _Ans; 
} 

virtual result do_out(_Statype &_State, const _Elem *
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
{ 
; 
; 
(_Mid1 = _First1), (_Mid2 = _First2); 
auto result _Ans = (((_Mid1) == _Last1) ? ok : partial); 
auto int _Bytes; 

while (((_Mid1) != _Last1) && ((_Mid2) != _Last2)) { 
if (5 <= (_Last2 - _Mid2)) { 
if ((_Bytes = _Wcrtomb(_Mid2, *(_Mid1), (&_State), &(this->_Cvt))) < 0) { 

return error; } else { 

((++_Mid1), (_Mid2 += _Bytes)), (_Ans = (ok)); }  } else 

{ 
auto _Byte _Buf[5]; 
auto _Statype _Stsave = (_State); 

if ((_Bytes = _Wcrtomb(_Buf, *(_Mid1), (&_State), &(this->_Cvt))) < 0) { 

return error; } else { 
if ((_Last2 - _Mid2) < _Bytes) 
{ 
_State = _Stsave; 
return _Ans; 
} else 

{ 
::memcpy_s(_Mid2, _Last2 - _Mid2, _Buf, _Bytes); 
((++_Mid1), (_Mid2 += _Bytes)), (_Ans = (ok)); 
}  }  
}  }  
return _Ans; 
} 

virtual result do_unshift(_Statype &_State, _Byte *
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
{ 
; 
_Mid2 = _First2; 
auto result _Ans = (ok); 
auto int _Bytes; 
auto _Byte _Buf[5]; 
auto _Statype _Stsave = (_State); 

if ((_Bytes = _Wcrtomb(_Buf, L'\x0', (&_State), &(this->_Cvt))) <= 0) { 
_Ans = (error); } else { 
if ((_Last2 - _Mid2) < (--_Bytes)) 
{ 
_State = _Stsave; 
_Ans = (partial); 
} else { 
if (0 < _Bytes) 
{ 
::memcpy_s(_Mid2, _Last2 - _Mid2, _Buf, _Bytes); 
_Mid2 += _Bytes; 
}  }  }  
return _Ans; 
} 

virtual int do_length(const _Statype &_State, const _Byte *_First1, const _Byte *
_Last1, size_t _Count) const 
{ 
; 
auto int _Wchars; 
auto const _Byte *_Mid1; 
auto _Statype _Mystate = (_State); 

for ((_Wchars = 0), (_Mid1 = _First1); (((unsigned)_Wchars) < _Count) && (_Mid1 != _Last1);) 

{ 
auto int _Bytes; 
auto _Elem _Ch; 

switch (_Bytes = _Mbrtowc((__wchar_t *)(&_Ch), _Mid1, _Last1 - _Mid1, &_Mystate, &(this->_Cvt))) 

{ 
case (-2): 
return _Wchars; 

case (-1): 
return _Wchars; 

case 0: 
if (_Ch == ((_Elem)0)) { 
_Bytes = (int)::strlen(_Mid1) + 1; }  


default: 
if (_Bytes == (-3)) { 
_Bytes = 0; }  
_Mid1 += _Bytes; 
++_Wchars; break;
}  
}  
return _Wchars; 
} 

virtual bool do_always_noconv() const throw() 
{ 
return false; 
} 

virtual int do_max_length() const throw() 
{ 
return 5; 
} 


private: _Locinfo::_Cvtvec _Cvt; 
}; 
#line 1323 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocale"
template < class _Elem,
 class _Byte,
 class _Statype >
 class codecvt_byname
  : public codecvt < _Elem, _Byte, _Statype >
 {
public :
 explicit codecvt_byname ( const char * _Locname, size_t _Refs = 0 )
  : codecvt < _Elem, _Byte, _Statype > ( _Locname, _Refs )
  {
  }

protected :
 virtual ~ codecvt_byname ( )
  {
  }
 };

#pragma warning(push)
#pragma warning(disable:4275)

struct ctype_base : public locale::facet { 



enum __cuda_alnum { 
alnum = 263, alpha = 259, 
cntrl = 32, digit = 4, graph = 279, 
lower = 2, print = 471, 
punct = 16, space = 72, upper = 1, 
xdigit = 128}; 
typedef short mask; 

ctype_base(size_t _Refs = (0)) : locale::facet(_Refs) 

{ 
} 

virtual ~ctype_base() 
{ 
} 


protected: static void __cdecl _Xran() 
{ 
throw ((out_of_range)("out_of_range in ctype<T>")); 
} 
}; 
#pragma warning(pop)


template < class _Elem >
 class ctype
  : public ctype_base
 {
public :
 typedef _Elem char_type;

 bool is ( mask _Maskval, _Elem _Ch ) const
  {
  return ( do_is ( _Maskval, _Ch ) );
  }

 const _Elem * is ( const _Elem * _First, const _Elem * _Last,
  mask * _Dest ) const
  {
  return ( do_is ( _First, _Last, _Dest ) );
  }

 const _Elem * scan_is ( mask _Maskval, const _Elem * _First,
  const _Elem * _Last ) const
  {
  return ( do_scan_is ( _Maskval, _First, _Last ) );
  }

 const _Elem * scan_not ( mask _Maskval, const _Elem * _First,
  const _Elem * _Last ) const
  {
  return ( do_scan_not ( _Maskval, _First, _Last ) );
  }

 _Elem tolower ( _Elem _Ch ) const
  {
  return ( do_tolower ( _Ch ) );
  }

 const _Elem * tolower ( _Elem * _First, const _Elem * _Last ) const
  {
  return ( do_tolower ( _First, _Last ) );
  }

 _Elem toupper ( _Elem _Ch ) const
  {
  return ( do_toupper ( _Ch ) );
  }

 const _Elem * toupper ( _Elem * _First, const _Elem * _Last ) const
  {
  return ( do_toupper ( _First, _Last ) );
  }

 _Elem widen ( char _Byte ) const
  {
  return ( do_widen ( _Byte ) );
  }

 __declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
 const char * widen ( const char * _First, const char * _Last,
  _Elem * _Dest ) const
  {
#pragma warning(push)
#pragma warning(disable:4996)
  return ( do_widen ( _First, _Last, _Dest ) );
#pragma warning(pop)
  }

 const char * _Widen_s ( const char * _First, const char * _Last,
  _Elem * _Dest, size_t _Dest_size ) const
  {
  return ( _Do_widen_s ( _First, _Last, _Dest, _Dest_size ) );
  }

 char narrow ( _Elem _Ch, char _Dflt = '\000' ) const
  {
  return ( do_narrow ( _Ch, _Dflt ) );
  }

 __declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
 const _Elem * narrow ( const _Elem * _First, const _Elem * _Last,
  char _Dflt, char * _Dest ) const
  {

#pragma warning(push)
#pragma warning(disable:4996)
  return ( do_narrow ( _First, _Last, _Dflt, _Dest ) );
#pragma warning(pop)
  }

 const _Elem * _Narrow_s ( const _Elem * _First, const _Elem * _Last,
  char _Dflt, char * _Dest, size_t _Dest_size ) const
  {
  return ( _Do_narrow_s ( _First, _Last, _Dflt, _Dest, _Dest_size ) );
  }

  static locale :: id id;

 explicit ctype ( size_t _Refs = 0 )
  : ctype_base ( _Refs )
  {
  { _Locinfo _Lobj;
   _Init ( _Lobj );
  }
  }

  ctype ( const _Locinfo & _Lobj, size_t _Refs = 0 )
  : ctype_base ( _Refs )
  {
  _Init ( _Lobj );
  }

 static size_t __cdecl _Getcat ( const locale :: facet * * _Ppf = 0,
  const locale * _Ploc = 0 )
  {
  if ( _Ppf != 0 && * _Ppf == 0 )
   * _Ppf = new ctype < _Elem > (
    _Locinfo ( _Ploc -> name ( ) ) );
  return ( 2 );
  }

protected :
 virtual ~ ctype ( )
  {
  if ( _Ctype . _Delfl )
   free ( ( void * ) _Ctype . _Table );
  }

protected :
 void _Init ( const _Locinfo & _Lobj )
  {
  _Ctype = _Lobj . _Getctype ( );
  }

 virtual bool do_is ( mask _Maskval, _Elem _Ch ) const
  {
  return ( ( _Ctype . _Table [ ( unsigned char ) narrow ( _Ch ) ]
   & _Maskval ) != 0 );
  }

 virtual const _Elem * do_is ( const _Elem * _First, const _Elem * _Last,
  mask * _Dest ) const
  {
  ;
  ;
  for (; _First != _Last; ++ _First, ++ _Dest )
   * _Dest = _Ctype . _Table [ ( unsigned char ) narrow ( * _First ) ];
  return ( _First );
  }

 virtual const _Elem * do_scan_is ( mask _Maskval,
  const _Elem * _First, const _Elem * _Last ) const
  {
  ;
  for (; _First != _Last && ! is ( _Maskval, * _First ); ++ _First )
   ;
  return ( _First );
  }

 virtual const _Elem * do_scan_not ( mask _Maskval,
  const _Elem * _First, const _Elem * _Last ) const
  {
  ;
  for (; _First != _Last && is ( _Maskval, * _First ); ++ _First )
   ;
  return ( _First );
  }

 virtual _Elem do_tolower ( _Elem _Ch ) const
  {
  unsigned char _Byte = ( unsigned char ) narrow ( _Ch, '\000' );
  if ( _Byte == '\000' )
   return ( _Ch );
  else
   return ( widen ( ( char ) _Tolower ( _Byte, & _Ctype ) ) );
  }

 virtual const _Elem * do_tolower ( _Elem * _First, const _Elem * _Last ) const
  {
  ;
  for (; _First != _Last; ++ _First )
   {
   unsigned char _Byte = ( unsigned char ) narrow ( * _First, '\000' );
   if ( _Byte != '\000' )
    * _First = ( widen ( ( char ) _Tolower ( _Byte, & _Ctype ) ) );
   }
  return ( ( const _Elem * ) _First );
  }

 virtual _Elem do_toupper ( _Elem _Ch ) const
  {
  unsigned char _Byte = ( unsigned char ) narrow ( _Ch, '\000' );
  if ( _Byte == '\000' )
   return ( _Ch );
  else
   return ( widen ( ( char ) _Toupper ( _Byte, & _Ctype ) ) );
  }

 virtual const _Elem * do_toupper ( _Elem * _First, const _Elem * _Last ) const
  {
  ;
  for (; _First != _Last; ++ _First )
   {
   unsigned char _Byte = ( unsigned char ) narrow ( * _First, '\000' );
   if ( _Byte != '\000' )
    * _First = ( widen ( ( char ) _Toupper ( _Byte, & _Ctype ) ) );
   }
  return ( ( const _Elem * ) _First );
  }

 virtual _Elem do_widen ( char _Byte ) const
  {
  return ( _Maklocchr ( _Byte, ( _Elem * ) 0, _Cvt ) );
  }

 __declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
 virtual const char * do_widen ( const char * _First,
  const char * _Last, _Elem * _Dest ) const
  {

  return _Do_widen_s ( _First, _Last, _Dest, _Last - _First );
  }

 virtual const char * _Do_widen_s ( const char * _First,
  const char * _Last, _Elem * _Dest, size_t _Dest_size ) const
  {
  ;
  ;
  { if ( ! ( _Dest_size >= ( size_t ) ( _Last - _First ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  for (; _First != _Last; ++ _First, ++ _Dest )
   * _Dest = _Maklocchr ( * _First, ( _Elem * ) 0, _Cvt );
  return ( _First );
  }

 char _Donarrow ( _Elem _Ch, char _Dflt ) const
  {
  char _Byte;
  if ( _Ch == ( _Elem ) 0 )
   return ( '\000' );
  else if ( ( _Byte = _Maklocbyte ( ( _Elem ) _Ch, _Cvt ) ) == '\000' )
   return ( _Dflt );
  else
   return ( _Byte );
  }

 virtual char do_narrow ( _Elem _Ch, char _Dflt ) const
  {
  return ( _Donarrow ( _Ch, _Dflt ) );
  }

 __declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
 virtual const _Elem * do_narrow ( const _Elem * _First,
  const _Elem * _Last, char _Dflt, char * _Dest ) const
  {

  return _Do_narrow_s ( _First, _Last, _Dflt, _Dest, _Last - _First );
  }

 virtual const _Elem * _Do_narrow_s ( const _Elem * _First,
  const _Elem * _Last, char _Dflt,
      char * _Dest,
  size_t _Dest_size ) const
  {
  ;
  ;
  { if ( ! ( _Dest_size >= ( size_t ) ( _Last - _First ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  for (; _First != _Last; ++ _First, ++ _Dest )
   * _Dest = _Donarrow ( * _First, _Dflt );
  return ( _First );
  }

private :
 _Locinfo :: _Ctypevec _Ctype;
 _Locinfo :: _Cvtvec _Cvt;
 };


template<class _Elem> locale::id 
ctype< _Elem> ::id; 


template<> class ctype< char>  : public ctype_base { 


typedef std::ctype< char>  _Myt; 


public: typedef char _Elem; 
typedef _Elem char_type; 

bool is(mask _Maskval, _Elem _Ch) const 
{ 
return ((((this->_Ctype)._Table)[(unsigned char)_Ch]) & _Maskval) != 0; 
} 

const _Elem *is(const _Elem *_First, const _Elem *
_Last, mask *_Dest) const 
{ 
; 
; 
for (; _First != _Last; (++_First), (++_Dest)) { 
(*_Dest) = ((this->_Ctype)._Table)[(unsigned char)(*_First)]; }  
return _First; 
} 

const _Elem *scan_is(mask _Maskval, const _Elem *
_First, const _Elem *_Last) const 
{ 
; 
for (; (_First != _Last) && (!this->is(_Maskval, *_First)); ++_First) { 
; }  
return _First; 
} 

const _Elem *scan_not(mask _Maskval, const _Elem *
_First, const _Elem *_Last) const 
{ 
; 
for (; (_First != _Last) && this->is(_Maskval, *_First); ++_First) { 
; }  
return _First; 
} 

_Elem tolower(_Elem _Ch) const 
{ 
return this->do_tolower(_Ch); 
} 

const _Elem *tolower(_Elem *_First, const _Elem *_Last) const 
{ 
return this->do_tolower(_First, _Last); 
} 

_Elem toupper(_Elem _Ch) const 
{ 
return this->do_toupper(_Ch); 
} 

const _Elem *toupper(_Elem *_First, const _Elem *_Last) const 
{ 
return this->do_toupper(_First, _Last); 
} 

_Elem widen(char _Byte) const 
{ 
return this->do_widen(_Byte); 
} 


__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'")) const _Elem *widen(const char *_First, const char *_Last, _Elem *
_Dest) const 
{ 

#pragma warning(push)
#pragma warning(disable:4996)
return this->do_widen(_First, _Last, _Dest); 
#pragma warning(pop)
} 

const _Elem *_Widen_s(const char *_First, const char *_Last, _Elem *
_Dest, size_t _Dest_size) const 
{ 
return this->_Do_widen_s(_First, _Last, _Dest, _Dest_size); 
} 

_Elem narrow(_Elem _Ch, char _Dflt = '\000') const 
{ 
return this->do_narrow(_Ch, _Dflt); 
} 


__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'")) const _Elem *narrow(const _Elem *_First, const _Elem *_Last, char 
_Dflt, char *_Dest) const 
{ 

#pragma warning(push)
#pragma warning(disable:4996)
return this->do_narrow(_First, _Last, _Dflt, _Dest); 
#pragma warning(pop)
} 

const _Elem *_Narrow_s(const _Elem *_First, const _Elem *_Last, char 
_Dflt, char *_Dest, size_t 
_Dest_size) const 
{ 
return this->_Do_narrow_s(_First, _Last, _Dflt, _Dest, _Dest_size); 
} 

static locale::id &__cdecl _Id_func(); 



static locale::id id; 
#line 1766 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocale"
explicit ctype(const mask *_Table = 0, bool 
_Deletetable = false, size_t 
_Refs = (0)) : ctype_base(_Refs) 

{ 
{ auto _Locinfo _Lobj; 
this->_Init(_Lobj); 
} 
if (_Table != (0)) 
{ 
this->_Tidy(); 
((this->_Ctype)._Table) = _Table; 
((this->_Ctype)._Delfl) = _Deletetable ? (-1) : 0; 
}  
} 

ctype(const _Locinfo &_Lobj, size_t _Refs = (0)) : ctype_base(_Refs) 

{ 
this->_Init(_Lobj); 
} 

static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *
_Ploc = 0) 
{ 
if ((_Ppf != (0)) && ((*_Ppf) == (0))) { 
(*_Ppf) = new std::ctype< char> (((_Locinfo)(_Ploc->name()))); }  

return 2; 
} 

static const size_t table_size = (1 << 8); 


protected: virtual ~ctype() 
{ 
this->_Tidy(); 
} 


void _Init(const _Locinfo &_Lobj) 
{ 
(this->_Ctype) = _Lobj._Getctype(); 
} 

void _Tidy() 
{ 
if (0 < ((this->_Ctype)._Delfl)) { 
free((void *)((this->_Ctype)._Table)); } else { 
if (((this->_Ctype)._Delfl) < 0) { 
delete [] ((void *)((this->_Ctype)._Table)); }  }  
} 

virtual _Elem do_tolower(_Elem _Ch) const 
{ 
return (_Elem)_Tolower((unsigned char)_Ch, &(this->_Ctype)); 
} 

virtual const _Elem *do_tolower(_Elem *_First, const _Elem *
_Last) const 
{ 
; 
for (; _First != _Last; ++_First) { 
(*_First) = (_Elem)_Tolower((unsigned char)(*_First), &(this->_Ctype)); }  
return (const _Elem *)_First; 
} 

virtual _Elem do_toupper(_Elem _Ch) const 
{ 
return (_Elem)_Toupper((unsigned char)_Ch, &(this->_Ctype)); 
} 

virtual const _Elem *do_toupper(_Elem *_First, const _Elem *
_Last) const 
{ 
; 
for (; _First != _Last; ++_First) { 
(*_First) = (_Elem)_Toupper((unsigned char)(*_First), &(this->_Ctype)); }  
return (const _Elem *)_First; 
} 

virtual _Elem do_widen(char _Byte) const 
{ 
return _Byte; 
} 


virtual __declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'")) const _Elem *do_widen(const char *_First, const char *
_Last, _Elem *_Dest) const 
{ 

return this->_Do_widen_s(_First, _Last, _Dest, _Last - _First); 
} 

virtual const _Elem *_Do_widen_s(const char *_First, const char *
_Last, _Elem *_Dest, size_t _Dest_size) const 
{ 
; 
; 
{ if (!(_Dest_size >= ((unsigned)(_Last - _First)))) { (void)0; ::_invalid_parameter_noinfo(); }  ; } ; 
::memcpy_s(_Dest, _Dest_size, _First, _Last - _First); 
return _Last; 
} 

virtual _Elem do_narrow(_Elem _Ch, char) const 
{ 
return _Ch; 
} 


virtual __declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'")) const _Elem *do_narrow(const _Elem *_First, const _Elem *
_Last, char _Dflt, char *
_Dest) const 
{ 

return this->_Do_narrow_s(_First, _Last, _Dflt, _Dest, _Last - _First); 
} 

virtual const _Elem *_Do_narrow_s(const _Elem *_First, const _Elem *
_Last, char, char *_Dest, size_t 
_Dest_size) const 
{ 
; 
; 
{ if (!(_Dest_size >= ((unsigned)(_Last - _First)))) { (void)0; ::_invalid_parameter_noinfo(); }  ; } ; 
::memcpy_s(_Dest, _Dest_size, _First, _Last - _First); 
return _Last; 
} 

const mask *table() const throw() 
{ 
return (this->_Ctype)._Table; 
} 

static const mask *__cdecl classic_table() throw() 
{ 
auto const _Myt &_Ctype_fac = use_facet< std::ctype< char> > (locale::classic()); 
return _Ctype_fac.table(); 
} 


private: _Locinfo::_Ctypevec _Ctype; 
}; 


template<> class ctype< __wchar_t>  : public ctype_base { 


typedef std::ctype< __wchar_t>  _Myt; 


public: typedef __wchar_t _Elem; 
typedef _Elem char_type; 

bool is(mask _Maskval, _Elem _Ch) const 
{ 
return this->do_is(_Maskval, _Ch); 
} 

const _Elem *is(const _Elem *_First, const _Elem *_Last, mask *
_Dest) const 
{ 
return this->do_is(_First, _Last, _Dest); 
} 

const _Elem *scan_is(mask _Maskval, const _Elem *_First, const _Elem *
_Last) const 
{ 
return this->do_scan_is(_Maskval, _First, _Last); 
} 

const _Elem *scan_not(mask _Maskval, const _Elem *_First, const _Elem *
_Last) const 
{ 
return this->do_scan_not(_Maskval, _First, _Last); 
} 

_Elem tolower(_Elem _Ch) const 
{ 
return this->do_tolower(_Ch); 
} 

const _Elem *tolower(_Elem *_First, const _Elem *_Last) const 
{ 
return this->do_tolower(_First, _Last); 
} 

_Elem toupper(_Elem _Ch) const 
{ 
return this->do_toupper(_Ch); 
} 

const _Elem *toupper(_Elem *_First, const _Elem *_Last) const 
{ 
return this->do_toupper(_First, _Last); 
} 

_Elem widen(char _Byte) const 
{ 
return this->do_widen(_Byte); 
} 


__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'")) const char *widen(const char *_First, const char *_Last, _Elem *
_Dest) const 
{ 

#pragma warning(push)
#pragma warning(disable:4996)
return this->do_widen(_First, _Last, _Dest); 
#pragma warning(pop)
} 

const char *_Widen_s(const char *_First, const char *_Last, _Elem *
_Dest, size_t _Dest_size) const 
{ 
return this->_Do_widen_s(_First, _Last, _Dest, _Dest_size); 
} 

char narrow(_Elem _Ch, char _Dflt = '\000') const 
{ 
return this->do_narrow(_Ch, _Dflt); 
} 


__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'")) const _Elem *narrow(const _Elem *_First, const _Elem *_Last, char 
_Dflt, char *_Dest) const 
{ 

#pragma warning(push)
#pragma warning(disable:4996)
return this->do_narrow(_First, _Last, _Dflt, _Dest); 
#pragma warning(pop)
} 

const _Elem *_Narrow_s(const _Elem *_First, const _Elem *_Last, char 
_Dflt, char *_Dest, size_t 
_Dest_size) const 
{ 
return this->_Do_narrow_s(_First, _Last, _Dflt, _Dest, _Dest_size); 
} 

static locale::id &__cdecl _Id_func(); 



static locale::id id; 
#line 2015 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocale"
explicit ctype(size_t _Refs = (0)) : ctype_base(_Refs) 

{ 
{ auto _Locinfo _Lobj; 
this->_Init(_Lobj); 
} 
} 

ctype(const _Locinfo &_Lobj, size_t _Refs = (0)) : ctype_base(_Refs) 

{ 
this->_Init(_Lobj); 
} 

static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *
_Ploc = 0) 
{ 
if ((_Ppf != (0)) && ((*_Ppf) == (0))) { 
(*_Ppf) = new std::ctype< __wchar_t> (((_Locinfo)(_Ploc->name()))); }  

return 2; 
} 


protected: virtual ~ctype() 
{ 
if ((this->_Ctype)._Delfl) { 
free((void *)((this->_Ctype)._Table)); }  
} 


void _Init(const _Locinfo &_Lobj) 
{ 
(this->_Ctype) = _Lobj._Getctype(); 
(this->_Cvt) = _Lobj._Getcvt(); 
} 

virtual bool do_is(mask _Maskval, _Elem _Ch) const 
{ 
return ((::_Getwctype(_Ch, &(this->_Ctype))) & _Maskval) != 0; 
} 

virtual const __wchar_t *do_is(const _Elem *_First, const _Elem *
_Last, mask *_Dest) const 
{ 
; 
; 
return ::_Getwctypes(_First, _Last, _Dest, &(this->_Ctype)); 
} 

virtual const _Elem *do_scan_is(mask _Maskval, const _Elem *
_First, const _Elem *_Last) const 
{ 
; 
for (; (_First != _Last) && (!this->is(_Maskval, *_First)); ++_First) { 
; }  
return _First; 
} 

virtual const _Elem *do_scan_not(mask _Maskval, const _Elem *
_First, const _Elem *_Last) const 
{ 
; 
for (; (_First != _Last) && this->is(_Maskval, *_First); ++_First) { 
; }  
return _First; 
} 

virtual _Elem do_tolower(_Elem _Ch) const 
{ 
return _Towlower(_Ch, &(this->_Ctype)); 
} 

virtual const _Elem *do_tolower(_Elem *_First, const _Elem *
_Last) const 
{ 
; 
for (; _First != _Last; ++_First) { 
(*_First) = _Towlower(*_First, &(this->_Ctype)); }  
return (const _Elem *)_First; 
} 

virtual _Elem do_toupper(_Elem _Ch) const 
{ 
return _Towupper(_Ch, &(this->_Ctype)); 
} 

virtual const _Elem *do_toupper(_Elem *_First, const _Elem *
_Last) const 
{ 
; 
for (; _First != _Last; ++_First) { 
(*_First) = _Towupper(*_First, &(this->_Ctype)); }  
return (const _Elem *)_First; 
} 

_Elem _Dowiden(char _Byte) const 
{ 
auto mbstate_t _Mbst = (0); 
auto __wchar_t _Wc; 
return (_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &(this->_Cvt)) < 0) ? ((__wchar_t)((wint_t)65535)) : _Wc; 

} 

virtual _Elem do_widen(char _Byte) const 
{ 
return this->_Dowiden(_Byte); 
} 


virtual __declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'")) const char *do_widen(const char *_First, const char *
_Last, _Elem *_Dest) const 
{ 

return this->_Do_widen_s(_First, _Last, _Dest, _Last - _First); 
} 

virtual const char *_Do_widen_s(const char *_First, const char *
_Last, _Elem *_Dest, size_t _Dest_size) const 
{ 
; 
; 
{ if (!(_Dest_size >= ((unsigned)(_Last - _First)))) { (void)0; ::_invalid_parameter_noinfo(); }  ; } ; 
for (; _First != _Last; (++_First), (++_Dest)) { 
(*_Dest) = this->_Dowiden(*_First); }  
return _First; 
} 

char _Donarrow(_Elem _Ch, char _Dflt) const 
{ 
auto char _Buf[5]; 
auto mbstate_t _Mbst = (0); 
return (_Wcrtomb(_Buf, _Ch, &_Mbst, &(this->_Cvt)) != 1) ? _Dflt : ((_Buf)[0]); 

} 

virtual char do_narrow(_Elem _Ch, char _Dflt) const 
{ 
return this->_Donarrow(_Ch, _Dflt); 
} 


virtual __declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'")) const _Elem *do_narrow(const _Elem *_First, const _Elem *
_Last, char _Dflt, char *
_Dest) const 
{ 

return this->_Do_narrow_s(_First, _Last, _Dflt, _Dest, _Last - _First); 
} 

virtual const _Elem *_Do_narrow_s(const _Elem *_First, const _Elem *
_Last, char _Dflt, char *
_Dest, size_t 
_Dest_size) const 
{ 
; 
; 
{ if (!(_Dest_size >= ((unsigned)(_Last - _First)))) { (void)0; ::_invalid_parameter_noinfo(); }  ; } ; 
for (; _First != _Last; (++_First), (++_Dest)) { 
(*_Dest) = this->_Donarrow(*_First, _Dflt); }  
return _First; 
} 


private: _Locinfo::_Ctypevec _Ctype; 
_Locinfo::_Cvtvec _Cvt; 
}; 



template<> class ctype< unsigned short>  : public ctype_base { 


typedef std::ctype< unsigned short>  _Myt; 


public: typedef unsigned short _Elem; 
typedef _Elem char_type; 

bool is(mask _Maskval, _Elem _Ch) const 
{ 
return this->do_is(_Maskval, _Ch); 
} 

const _Elem *is(const _Elem *_First, const _Elem *_Last, mask *
_Dest) const 
{ 
return this->do_is(_First, _Last, _Dest); 
} 

const _Elem *scan_is(mask _Maskval, const _Elem *_First, const _Elem *
_Last) const 
{ 
return this->do_scan_is(_Maskval, _First, _Last); 
} 

const _Elem *scan_not(mask _Maskval, const _Elem *_First, const _Elem *
_Last) const 
{ 
return this->do_scan_not(_Maskval, _First, _Last); 
} 

_Elem tolower(_Elem _Ch) const 
{ 
return this->do_tolower(_Ch); 
} 

const _Elem *tolower(_Elem *_First, const _Elem *_Last) const 
{ 
return this->do_tolower(_First, _Last); 
} 

_Elem toupper(_Elem _Ch) const 
{ 
return this->do_toupper(_Ch); 
} 

const _Elem *toupper(_Elem *_First, const _Elem *_Last) const 
{ 
return this->do_toupper(_First, _Last); 
} 

_Elem widen(char _Byte) const 
{ 
return this->do_widen(_Byte); 
} 


__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'")) const char *widen(const char *_First, const char *_Last, _Elem *
_Dest) const 
{ 

#pragma warning(push)
#pragma warning(disable:4996)
return this->do_widen(_First, _Last, _Dest); 
#pragma warning(pop)
} 

const char *_Widen_s(const char *_First, const char *_Last, _Elem *
_Dest, size_t _Dest_size) const 
{ 
return this->_Do_widen_s(_First, _Last, _Dest, _Dest_size); 
} 

char narrow(_Elem _Ch, char _Dflt = '\000') const 
{ 
return this->do_narrow(_Ch, _Dflt); 
} 


__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'")) const _Elem *narrow(const _Elem *_First, const _Elem *_Last, char 
_Dflt, char *_Dest) const 
{ 

#pragma warning(push)
#pragma warning(disable:4996)
return this->do_narrow(_First, _Last, _Dflt, _Dest); 
#pragma warning(pop)
} 

const _Elem *_Narrow_s(const _Elem *_First, const _Elem *_Last, char 
_Dflt, char *_Dest, size_t 
_Dest_size) const 
{ 
return this->_Do_narrow_s(_First, _Last, _Dflt, _Dest, _Dest_size); 
} 

static locale::id &__cdecl _Id_func(); 



static locale::id id; 
#line 2289 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocale"
explicit ctype(size_t _Refs = (0)) : ctype_base(_Refs) 

{ 
{ auto _Locinfo _Lobj; 
this->_Init(_Lobj); 
} 
} 

ctype(const _Locinfo &_Lobj, size_t _Refs = (0)) : ctype_base(_Refs) 

{ 
this->_Init(_Lobj); 
} 

static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *
_Ploc = 0) 
{ 
if ((_Ppf != (0)) && ((*_Ppf) == (0))) { 
(*_Ppf) = new std::ctype< unsigned short> (((_Locinfo)(_Ploc->name()))); }  

return 2; 
} 


protected: virtual ~ctype() 
{ 
if ((this->_Ctype)._Delfl) { 
free((void *)((this->_Ctype)._Table)); }  
} 


ctype(const char *_Locname, size_t _Refs = (0)) : ctype_base(_Refs) 

{ 
{ auto _Locinfo _Lobj(_Locname); 
this->_Init(_Lobj); 
} 
} 

void _Init(const _Locinfo &_Lobj) 
{ 
(this->_Ctype) = _Lobj._Getctype(); 
(this->_Cvt) = _Lobj._Getcvt(); 
} 

virtual bool do_is(mask _Maskval, _Elem _Ch) const 
{ 
return ((::_Getwctype(_Ch, &(this->_Ctype))) & _Maskval) != 0; 
} 

virtual const _Elem *do_is(const _Elem *_First, const _Elem *
_Last, mask *_Dest) const 
{ 
; 
; 
return (const _Elem *)::_Getwctypes((const __wchar_t *)_First, (const __wchar_t *)_Last, _Dest, &(this->_Ctype)); 

} 

virtual const _Elem *do_scan_is(mask _Maskval, const _Elem *
_First, const _Elem *_Last) const 
{ 
; 
for (; (_First != _Last) && (!this->is(_Maskval, *_First)); ++_First) { 
; }  
return _First; 
} 

virtual const _Elem *do_scan_not(mask _Maskval, const _Elem *
_First, const _Elem *_Last) const 
{ 
; 
for (; (_First != _Last) && this->is(_Maskval, *_First); ++_First) { 
; }  
return _First; 
} 

virtual _Elem do_tolower(_Elem _Ch) const 
{ 
return _Towlower(_Ch, &(this->_Ctype)); 
} 

virtual const _Elem *do_tolower(_Elem *_First, const _Elem *
_Last) const 
{ 
; 
for (; _First != _Last; ++_First) { 
(*_First) = _Towlower(*_First, &(this->_Ctype)); }  
return (const _Elem *)_First; 
} 

virtual _Elem do_toupper(_Elem _Ch) const 
{ 
return _Towupper(_Ch, &(this->_Ctype)); 
} 

virtual const _Elem *do_toupper(_Elem *_First, const _Elem *
_Last) const 
{ 
; 
for (; _First != _Last; ++_First) { 
(*_First) = _Towupper(*_First, &(this->_Ctype)); }  
return (const _Elem *)_First; 
} 

_Elem _Dowiden(char _Byte) const 
{ 
auto mbstate_t _Mbst = (0); 
auto unsigned short _Wc; 
return (_Mbrtowc((__wchar_t *)(&_Wc), &_Byte, 1, &_Mbst, &(this->_Cvt)) < 0) ? ((unsigned short)((wint_t)65535)) : _Wc; 

} 

virtual _Elem do_widen(char _Byte) const 
{ 
return this->_Dowiden(_Byte); 
} 


virtual __declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'")) const char *do_widen(const char *_First, const char *
_Last, _Elem *_Dest) const 
{ 

return this->_Do_widen_s(_First, _Last, _Dest, _Last - _First); 
} 

virtual const char *_Do_widen_s(const char *_First, const char *
_Last, _Elem *_Dest, size_t _Dest_size) const 
{ 
; 
; 
{ if (!(_Dest_size >= ((unsigned)(_Last - _First)))) { (void)0; ::_invalid_parameter_noinfo(); }  ; } ; 
for (; _First != _Last; (++_First), (++_Dest)) { 
(*_Dest) = this->_Dowiden(*_First); }  
return _First; 
} 

char _Donarrow(_Elem _Ch, char _Dflt) const 
{ 
auto char _Buf[5]; 
auto mbstate_t _Mbst = (0); 
return (_Wcrtomb(_Buf, _Ch, &_Mbst, &(this->_Cvt)) != 1) ? _Dflt : ((_Buf)[0]); 

} 

virtual char do_narrow(_Elem _Ch, char _Dflt) const 
{ 
return this->_Donarrow(_Ch, _Dflt); 
} 


virtual __declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'")) const _Elem *do_narrow(const _Elem *_First, const _Elem *
_Last, char _Dflt, char *_Dest) const 
{ 

return this->_Do_narrow_s(_First, _Last, _Dflt, _Dest, _Last - _First); 
} 

virtual const _Elem *_Do_narrow_s(const _Elem *_First, const _Elem *
_Last, char _Dflt, char *
_Dest, size_t 
_Dest_size) const 
{ 
; 
; 
{ if (!(_Dest_size >= ((unsigned)(_Last - _First)))) { (void)0; ::_invalid_parameter_noinfo(); }  ; } ; 
for (; _First != _Last; (++_First), (++_Dest)) { 
(*_Dest) = this->_Donarrow(*_First, _Dflt); }  
return _First; 
} 


private: _Locinfo::_Ctypevec _Ctype; 
_Locinfo::_Cvtvec _Cvt; 
}; 
#line 2467 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocale"
template < class _Elem >
 class ctype_byname
 : public ctype < _Elem >
 {
public :
 explicit ctype_byname ( const char * _Locname, size_t _Refs = 0 )
  : ctype < _Elem > ( _Locname, _Refs )
  {
  }

protected :
 virtual ~ ctype_byname ( )
  {
  }
 };


template<> class ctype_byname< char>  : public ctype< char>  { 



public: explicit ctype_byname(const char *_Locname, size_t _Refs = (0)) : std::ctype< char> (_Locname, _Refs) 

{ 
} 


protected: virtual ~ctype_byname() 
{ 
} 
}; 
#line 2504 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocale"
}


#pragma warning(pop)
#line 11 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xiosbase"
#pragma warning(push,3)
#pragma warning(disable:4412)
#line 2508 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocale"
#pragma pack ( pop )
#line 10 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xiosbase"
#pragma pack ( push, 8 )
#line 15 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xiosbase"
namespace std { 
#line 42
template<class _Dummy> 
class _Iosb { 


public: enum _Dummy_enum { _Dummy_enum_val = 1}; 

enum _Fmtflags { 

_Fmtmask = 65535, _Fmtzero = 0}; 

static const _Fmtflags skipws = ((_Fmtflags)1); 
static const _Fmtflags unitbuf = ((_Fmtflags)2); 
static const _Fmtflags uppercase = ((_Fmtflags)4); 
static const _Fmtflags showbase = ((_Fmtflags)8); 
static const _Fmtflags showpoint = ((_Fmtflags)16); 
static const _Fmtflags showpos = ((_Fmtflags)32); 
static const _Fmtflags left = ((_Fmtflags)64); 
static const _Fmtflags right = ((_Fmtflags)128); 
static const _Fmtflags internal = ((_Fmtflags)256); 
static const _Fmtflags dec = ((_Fmtflags)512); 
static const _Fmtflags oct = ((_Fmtflags)1024); 
static const _Fmtflags hex = ((_Fmtflags)2048); 
static const _Fmtflags scientific = ((_Fmtflags)4096); 
static const _Fmtflags fixed = ((_Fmtflags)8192); 

static const _Fmtflags hexfloat = ((_Fmtflags)12288); 


static const _Fmtflags boolalpha = ((_Fmtflags)16384); 
static const _Fmtflags _Stdio = ((_Fmtflags)32768); 
static const _Fmtflags adjustfield = ((_Fmtflags)((64 | 128) | 256)); 

static const _Fmtflags basefield = ((_Fmtflags)((512 | 1024) | 2048)); 

static const _Fmtflags floatfield = ((_Fmtflags)(4096 | 8192)); 


enum _Iostate { 

_Statmask = 23}; 

static const _Iostate goodbit = ((_Iostate)0); 
static const _Iostate eofbit = ((_Iostate)1); 
static const _Iostate failbit = ((_Iostate)2); 
static const _Iostate badbit = ((_Iostate)4); 
static const _Iostate _Hardfail = ((_Iostate)16); 

enum _Openmode { 

_Openmask = 255}; 

static const _Openmode in = ((_Openmode)1); 
static const _Openmode out = ((_Openmode)2); 
static const _Openmode ate = ((_Openmode)4); 
static const _Openmode app = ((_Openmode)8); 
static const _Openmode trunc = ((_Openmode)16); 
static const _Openmode _Nocreate = ((_Openmode)64); 
static const _Openmode _Noreplace = ((_Openmode)128); 
static const _Openmode binary = ((_Openmode)32); 

enum _Seekdir { 

_Seekmask = 3}; 
static const _Seekdir beg = ((_Seekdir)0); 
static const _Seekdir cur = ((_Seekdir)1); 
static const _Seekdir end = ((_Seekdir)2); 


enum __cuda__Openprot { 
_Openprot = 64}; 
}; 

template<class _Dummy> const typename _Iosb< _Dummy> ::_Fmtflags 
_Iosb< _Dummy> ::skipws; 
template<class _Dummy> const typename _Iosb< _Dummy> ::_Fmtflags 
_Iosb< _Dummy> ::unitbuf; 
template<class _Dummy> const typename _Iosb< _Dummy> ::_Fmtflags 
_Iosb< _Dummy> ::uppercase; 
template<class _Dummy> const typename _Iosb< _Dummy> ::_Fmtflags 
_Iosb< _Dummy> ::showbase; 
template<class _Dummy> const typename _Iosb< _Dummy> ::_Fmtflags 
_Iosb< _Dummy> ::showpoint; 
template<class _Dummy> const typename _Iosb< _Dummy> ::_Fmtflags 
_Iosb< _Dummy> ::showpos; 
template<class _Dummy> const typename _Iosb< _Dummy> ::_Fmtflags 
_Iosb< _Dummy> ::left; 
template<class _Dummy> const typename _Iosb< _Dummy> ::_Fmtflags 
_Iosb< _Dummy> ::right; 
template<class _Dummy> const typename _Iosb< _Dummy> ::_Fmtflags 
_Iosb< _Dummy> ::internal; 
template<class _Dummy> const typename _Iosb< _Dummy> ::_Fmtflags 
_Iosb< _Dummy> ::dec; 
template<class _Dummy> const typename _Iosb< _Dummy> ::_Fmtflags 
_Iosb< _Dummy> ::oct; 
template<class _Dummy> const typename _Iosb< _Dummy> ::_Fmtflags 
_Iosb< _Dummy> ::hex; 
template<class _Dummy> const typename _Iosb< _Dummy> ::_Fmtflags 
_Iosb< _Dummy> ::scientific; 
template<class _Dummy> const typename _Iosb< _Dummy> ::_Fmtflags 
_Iosb< _Dummy> ::fixed; 

template<class _Dummy> const typename _Iosb< _Dummy> ::_Fmtflags 

_Iosb< _Dummy> ::hexfloat; 

template<class _Dummy> const typename _Iosb< _Dummy> ::_Fmtflags 
_Iosb< _Dummy> ::boolalpha; 
template<class _Dummy> const typename _Iosb< _Dummy> ::_Fmtflags 
_Iosb< _Dummy> ::_Stdio; 
template<class _Dummy> const typename _Iosb< _Dummy> ::_Fmtflags 
_Iosb< _Dummy> ::adjustfield; 
template<class _Dummy> const typename _Iosb< _Dummy> ::_Fmtflags 
_Iosb< _Dummy> ::basefield; 
template<class _Dummy> const typename _Iosb< _Dummy> ::_Fmtflags 
_Iosb< _Dummy> ::floatfield; 

template<class _Dummy> const typename _Iosb< _Dummy> ::_Iostate 
_Iosb< _Dummy> ::goodbit; 
template<class _Dummy> const typename _Iosb< _Dummy> ::_Iostate 
_Iosb< _Dummy> ::eofbit; 
template<class _Dummy> const typename _Iosb< _Dummy> ::_Iostate 
_Iosb< _Dummy> ::failbit; 
template<class _Dummy> const typename _Iosb< _Dummy> ::_Iostate 
_Iosb< _Dummy> ::badbit; 
template<class _Dummy> const typename _Iosb< _Dummy> ::_Iostate 
_Iosb< _Dummy> ::_Hardfail; 

template<class _Dummy> const typename _Iosb< _Dummy> ::_Openmode 
_Iosb< _Dummy> ::in; 
template<class _Dummy> const typename _Iosb< _Dummy> ::_Openmode 
_Iosb< _Dummy> ::out; 
template<class _Dummy> const typename _Iosb< _Dummy> ::_Openmode 
_Iosb< _Dummy> ::ate; 
template<class _Dummy> const typename _Iosb< _Dummy> ::_Openmode 
_Iosb< _Dummy> ::app; 
template<class _Dummy> const typename _Iosb< _Dummy> ::_Openmode 
_Iosb< _Dummy> ::trunc; 
template<class _Dummy> const typename _Iosb< _Dummy> ::_Openmode 
_Iosb< _Dummy> ::_Nocreate; 
template<class _Dummy> const typename _Iosb< _Dummy> ::_Openmode 
_Iosb< _Dummy> ::_Noreplace; 
template<class _Dummy> const typename _Iosb< _Dummy> ::_Openmode 
_Iosb< _Dummy> ::binary; 

template<class _Dummy> const typename _Iosb< _Dummy> ::_Seekdir 
_Iosb< _Dummy> ::beg; 
template<class _Dummy> const typename _Iosb< _Dummy> ::_Seekdir 
_Iosb< _Dummy> ::cur; 
template<class _Dummy> const typename _Iosb< _Dummy> ::_Seekdir 
_Iosb< _Dummy> ::end; 


class ios_base : public _Iosb< int>  { 



public: typedef int fmtflags; 
typedef int iostate; 
typedef int openmode; 
typedef int seekdir; 

typedef std::streamoff streamoff; 
typedef std::streampos streampos; 

enum event { 

erase_event, imbue_event, copyfmt_event}; 

typedef void (__cdecl *event_callback)(event, ios_base &, int); 
typedef unsigned io_state; typedef unsigned open_mode; typedef unsigned seek_dir; 


class failure : public runtime_error { 



public: explicit failure(const string &_Message) : runtime_error(_Message) 

{ 
} 

virtual ~failure() throw() 
{ 
} 
#line 236 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xiosbase"
}; 


class Init { 


public: Init() 
{ 
_Init_ctor(this); 
} 

~Init() 
{ 
_Init_dtor(this); 
} 


private: static void __cdecl _Init_ctor(Init *); 
static void __cdecl _Init_dtor(Init *); 

static int &__cdecl _Init_cnt_func(); 



static int _Init_cnt; 
#line 262 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xiosbase"
}; 

ios_base &operator=(const ios_base &_Right) 
{ 
if (this != (&_Right)) 
{ 
(this->_Mystate) = _Right._Mystate; 
this->copyfmt(_Right); 
}  
return *this; 
} 

operator void *() const 
{ 
return this->fail() ? (0) : ((void *)this); 
} 

bool operator!() const 
{ 
return this->fail(); 
} 

void clear(iostate _State, bool _Reraise) 
{ 
(this->_Mystate) = (iostate)(_State & (_Statmask)); 
if (((this->_Mystate) & (this->_Except)) == 0) { 
; } else { 
if (_Reraise) { 
throw; } else { 
if (((this->_Mystate) & (this->_Except)) & ((_Iostate)4)) { 
throw ((failure)("ios_base::badbit set")); } else { 
if (((this->_Mystate) & (this->_Except)) & ((_Iostate)2)) { 
throw ((failure)("ios_base::failbit set")); } else { 

throw ((failure)("ios_base::eofbit set")); }  }  }  }  
} 

void clear(iostate _State = ((_Iostate)0)) 
{ 
this->clear(_State, false); 
} 

void clear(io_state _State) 
{ 
this->clear((iostate)_State); 
} 

iostate rdstate() const 
{ 
return this->_Mystate; 
} 


void setstate(iostate _State, bool _Exreraise) 
{ 
if (_State != ((_Iostate)0)) { 
this->clear((iostate)(((int)this->rdstate()) | _State), _Exreraise); }  
} 

void setstate(iostate _State) 
{ 
if (_State != ((_Iostate)0)) { 
this->clear((iostate)(((int)this->rdstate()) | _State), false); }  
} 

void setstate(io_state _State) 
{ 
this->setstate((iostate)_State); 
} 

bool good() const 
{ 
return this->rdstate() == ((_Iostate)0); 
} 

bool eof() const 
{ 
return ((int)this->rdstate()) & ((int)((_Iostate)1)); 
} 

bool fail() const 
{ 
return (((int)this->rdstate()) & (((int)((_Iostate)4)) | ((int)((_Iostate)2)))) != 0; 

} 

bool bad() const 
{ 
return (((int)this->rdstate()) & ((int)((_Iostate)4))) != 0; 
} 




iostate exceptions() const 
{ 
return this->_Except; 
} 

void exceptions(iostate _Newexcept) 
{ 
(this->_Except) = (iostate)(_Newexcept & ((int)_Statmask)); 
this->clear(this->_Mystate); 
} 

void exceptions(io_state _State) 
{ 
this->exceptions((iostate)_State); 
} 

fmtflags flags() const 
{ 
return this->_Fmtfl; 
} 

fmtflags flags(fmtflags _Newfmtflags) 
{ 
auto fmtflags _Oldfmtflags = (this->_Fmtfl); 
(this->_Fmtfl) = (fmtflags)(_Newfmtflags & ((int)_Fmtmask)); 
return _Oldfmtflags; 
} 

fmtflags setf(fmtflags _Newfmtflags) 
{ 
auto fmtflags _Oldfmtflags = (this->_Fmtfl); 
(this->_Fmtfl) = (fmtflags)((this->_Fmtfl) | (_Newfmtflags & ((int)_Fmtmask))); 

return _Oldfmtflags; 
} 

fmtflags setf(fmtflags _Newfmtflags, fmtflags _Mask) 
{ 
auto fmtflags _Oldfmtflags = (this->_Fmtfl); 
(this->_Fmtfl) = (fmtflags)(((this->_Fmtfl) & ((int)(~_Mask))) | ((_Newfmtflags & _Mask) & ((int)_Fmtmask))); 

return _Oldfmtflags; 
} 

void unsetf(fmtflags _Mask) 
{ 
(this->_Fmtfl) = (fmtflags)((this->_Fmtfl) & ((int)(~_Mask))); 
} 

streamsize precision() const 
{ 
return this->_Prec; 
} 

streamsize precision(streamsize _Newprecision) 
{ 
auto streamsize _Oldprecision = (this->_Prec); 
(this->_Prec) = _Newprecision; 
return _Oldprecision; 
} 

streamsize width() const 
{ 
return this->_Wide; 
} 

streamsize width(streamsize _Newwidth) 
{ 
auto streamsize _Oldwidth = (this->_Wide); 
(this->_Wide) = _Newwidth; 
return _Oldwidth; 
} 

locale getloc() const 
{ 
return *(this->_Ploc); 
} 

locale imbue(const locale &_Loc) 
{ 
auto locale _Oldlocale = *(this->_Ploc); 
((*(this->_Ploc)) = _Loc); 
this->_Callfns(imbue_event); 
return _Oldlocale; 
} 

static int __cdecl xalloc() 
{ 
{ auto _Lockit _Lock(2); 
return _Index++; 
} 
} 

long &iword(int _Idx) 
{ 
return this->_Findarr(_Idx)._Lo; 
} 

void *&pword(int _Idx) 
{ 
return this->_Findarr(_Idx)._Vp; 
} 

void register_callback(event_callback _Pfn, int _Idx) 
{ 
(this->_Calls) = (new _Fnarray(_Idx, _Pfn, this->_Calls)); 
} 

ios_base &copyfmt(const ios_base &_Other) 
{ 
if (this != (&_Other)) 
{ 
this->_Tidy(); 
((*(this->_Ploc)) = (*(_Other._Ploc))); 
(this->_Fmtfl) = _Other._Fmtfl; 
(this->_Prec) = _Other._Prec; 
(this->_Wide) = _Other._Wide; 
auto _Iosarray *_Ptr = (_Other._Arr); 

for ((this->_Arr) = (0); _Ptr != (0); _Ptr = _Ptr->_Next) { 
if (((_Ptr->_Lo) != (0)) || ((_Ptr->_Vp) != (0))) 
{ 
this->iword(_Ptr->_Index) = _Ptr->_Lo; 
this->pword(_Ptr->_Index) = _Ptr->_Vp; 
}  }  

for (_Fnarray *_Q = (_Other._Calls); _Q != (0); _Q = _Q->_Next) { 
this->register_callback(_Q->_Pfn, _Q->_Index); }  

this->_Callfns(copyfmt_event); 
this->exceptions(_Other._Except); 
}  
return *this; 
} 


virtual ~ios_base() 
{ 
_Ios_base_dtor(this); 
} 

static bool __cdecl sync_with_stdio(bool _Newsync = true) 
{ 
{ auto _Lockit _Lock(2); 
auto const bool _Oldsync = _Sync; 
_Sync = _Newsync; 
return _Oldsync; 
} 
} 

static void __cdecl _Addstd(ios_base *); 
size_t _Stdstr; 


protected: ios_base() 
{ 
} 

void _Init() 
{ 
(this->_Ploc) = (0); 
(this->_Stdstr) = (0); 
(this->_Except) = ((_Iostate)0); 
(this->_Fmtfl) = (((_Fmtflags)1) | ((_Fmtflags)512)); 
(this->_Prec) = (6); 
(this->_Wide) = (0); 
(this->_Arr) = (0); 
(this->_Calls) = (0); 
this->clear((_Iostate)0); 
(this->_Ploc) = (new locale); 
} 



private: struct _Iosarray { 


_Iosarray(int _Idx, _Iosarray *_Link) : _Next(_Link), _Index(_Idx), _Lo((0)), _Vp((0)) 

{ 
} 

_Iosarray *_Next; 
int _Index; 
long _Lo; 
void *_Vp; 
}; 


struct _Fnarray { 

_Fnarray(int _Idx, event_callback _Pnew, _Fnarray *_Link) : _Next(_Link), _Index(_Idx), _Pfn(_Pnew) 

{ 
} 

_Fnarray *_Next; 
int _Index; 
event_callback _Pfn; 
}; 

void _Callfns(event _Ev) 
{ 
for (_Fnarray *_Ptr = (this->_Calls); _Ptr != (0); _Ptr = _Ptr->_Next) { 
(_Ptr->_Pfn)(_Ev, *this, _Ptr->_Index); }  
} 

_Iosarray &_Findarr(int _Idx) 
{ 
auto _Iosarray *_Ptr; auto _Iosarray *_Q; 

for ((_Ptr = this->_Arr), (_Q = (0)); _Ptr != (0); _Ptr = _Ptr->_Next) { 
if ((_Ptr->_Index) == _Idx) { 
return *_Ptr; } else { 
if (((_Q == (0)) && ((_Ptr->_Lo) == (0))) && ((_Ptr->_Vp) == (0))) { 
_Q = _Ptr; }  }  }  

if (_Q != (0)) 
{ 
(_Q->_Index) = _Idx; 
return *_Q; 
}  

(this->_Arr) = (new _Iosarray(_Idx, this->_Arr)); 
return *(this->_Arr); 
} 

void __cdecl _Tidy() 
{ 
this->_Callfns(erase_event); 
auto _Iosarray *_Q1; auto _Iosarray *_Q2; 

for (_Q1 = this->_Arr; _Q1 != (0); _Q1 = _Q2) { 
(_Q2 = _Q1->_Next), (delete _Q1); }  
(this->_Arr) = (0); 

auto _Fnarray *_Q3; auto _Fnarray *_Q4; 
for (_Q3 = this->_Calls; _Q3 != (0); _Q3 = _Q4) { 
(_Q4 = _Q3->_Next), (delete _Q3); }  
(this->_Calls) = (0); 
} 

static void __cdecl _Ios_base_dtor(ios_base *); 

iostate _Mystate; 
iostate _Except; 
fmtflags _Fmtfl; 
streamsize _Prec; 
streamsize _Wide; 
_Iosarray *_Arr; 
_Fnarray *_Calls; 
locale *_Ploc; 
#line 613 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xiosbase"
static int _Index; 
static bool _Sync; 
#line 616 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xiosbase"
static int &__cdecl _Index_func(); 
static bool &__cdecl _Sync_func(); 
}; 
#line 624
}

#pragma warning(pop)
#line 10 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\streambuf"
#pragma warning(push,3)
#line 627 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xiosbase"
#pragma pack ( pop )
#line 9 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\streambuf"
#pragma pack ( push, 8 )
#line 12 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\streambuf"
namespace std { 


template < class _Elem,
 class _Traits >
 class basic_streambuf
 {

 basic_streambuf ( const basic_streambuf < _Elem, _Traits > & );
 basic_streambuf < _Elem, _Traits > &
  operator = ( const basic_streambuf < _Elem, _Traits > & );


protected :
 basic_streambuf ( )
  : _Plocale ( new ( locale ) )
  {
  _Init ( );
  }

 basic_streambuf ( _Uninitialized )
  {
  }

public :
 typedef basic_streambuf < _Elem, _Traits > _Myt;
 typedef _Elem char_type;
 typedef _Traits traits_type;

 virtual ~ basic_streambuf ( )
  {
  delete ( _Plocale );
  }

 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;

 pos_type pubseekoff ( off_type _Off, ios_base :: seekdir _Way,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out )
  {
  return ( seekoff ( _Off, _Way, _Mode ) );
  }

 pos_type pubseekoff ( off_type _Off, ios_base :: seek_dir _Way,
  ios_base :: open_mode _Mode )
  {
  return ( pubseekoff ( _Off, ( ios_base :: seekdir ) _Way,
   ( ios_base :: openmode ) _Mode ) );
  }

 pos_type pubseekpos ( pos_type _Pos,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out )
  {
  return ( seekpos ( _Pos, _Mode ) );
  }

 pos_type pubseekpos ( pos_type _Pos, ios_base :: open_mode _Mode )
  {
  return ( seekpos ( _Pos, ( ios_base :: openmode ) _Mode ) );
  }

 _Myt * pubsetbuf ( _Elem * _Buffer, streamsize _Count )
  {
  return ( setbuf ( _Buffer, _Count ) );
  }

 locale pubimbue ( const locale & _Newlocale )
  {
  locale _Oldlocale = * _Plocale;
  imbue ( _Newlocale );
  * _Plocale = _Newlocale;
  return ( _Oldlocale );
  }

 locale getloc ( ) const
  {
  return ( * _Plocale );
  }

 streamsize in_avail ( )
  {
  streamsize _Res = _Gnavail ( );
  return ( 0 < _Res ? _Res : showmanyc ( ) );
  }

 int pubsync ( )
  {
  return ( sync ( ) );
  }

 int_type sbumpc ( )
  {
  return ( 0 < _Gnavail ( )
   ? _Traits :: to_int_type ( * _Gninc ( ) ) : uflow ( ) );
  }

 int_type sgetc ( )
  {
  return ( 0 < _Gnavail ( )
   ? _Traits :: to_int_type ( * gptr ( ) ) : underflow ( ) );
  }

 streamsize _Sgetn_s ( _Elem * _Ptr, size_t _Ptr_size, streamsize _Count )
  {
  return _Xsgetn_s ( _Ptr, _Ptr_size, _Count );
  }

 __declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
 streamsize sgetn ( _Elem * _Ptr, streamsize _Count )
  {
#pragma warning(push)
#pragma warning(disable:4996)
  return xsgetn ( _Ptr, _Count );
#pragma warning(pop)
  }

 int_type snextc ( )
  {
  return ( 1 < _Gnavail ( )
   ? _Traits :: to_int_type ( * _Gnpreinc ( ) )
   : _Traits :: eq_int_type ( _Traits :: eof ( ), sbumpc ( ) )
    ? _Traits :: eof ( ) : sgetc ( ) );
  }

 int_type sputbackc ( _Elem _Ch )
  {
  return ( gptr ( ) != 0 && eback ( ) < gptr ( )
   && _Traits :: eq ( _Ch, gptr ( ) [ - 1 ] )
   ? _Traits :: to_int_type ( * _Gndec ( ) )
   : pbackfail ( _Traits :: to_int_type ( _Ch ) ) );
  }

 void stossc ( )
  {
  if ( 0 < _Gnavail ( ) )
   _Gninc ( );
  else
   uflow ( );
  }

 int_type sungetc ( )
  {
  return ( gptr ( ) != 0 && eback ( ) < gptr ( )
   ? _Traits :: to_int_type ( * _Gndec ( ) ) : pbackfail ( ) );
  }

 int_type sputc ( _Elem _Ch )
  {
  return ( 0 < _Pnavail ( )
   ? _Traits :: to_int_type ( * _Pninc ( ) = _Ch )
   : overflow ( _Traits :: to_int_type ( _Ch ) ) );
  }

 streamsize sputn ( const _Elem * _Ptr, streamsize _Count )
  {
  return ( xsputn ( _Ptr, _Count ) );
  }

 void _Lock ( )
  {
  _Mylock . _Lock ( );
  }

 void _Unlock ( )
  {
  _Mylock . _Unlock ( );
  }


protected :
 _Elem * eback ( ) const
  {
  return ( * _IGfirst );
  }

 _Elem * gptr ( ) const
  {
  return ( * _IGnext );
  }

 _Elem * pbase ( ) const
  {
  return ( * _IPfirst );
  }

 _Elem * pptr ( ) const
  {
  return ( * _IPnext );
  }

 _Elem * egptr ( ) const
  {
  return ( * _IGnext + * _IGcount );
  }

 void gbump ( int _Off )
  {
  * _IGcount -= _Off;
  * _IGnext += _Off;
  }

 void setg ( _Elem * _First, _Elem * _Next, _Elem * _Last )
  {
  * _IGfirst = _First;
  * _IGnext = _Next;
  * _IGcount = ( int ) ( _Last - _Next );
  }

 _Elem * epptr ( ) const
  {
  return ( * _IPnext + * _IPcount );
  }

 _Elem * _Gndec ( )
  {
  ++ * _IGcount;
  return ( -- * _IGnext );
  }

 _Elem * _Gninc ( )
  {
  -- * _IGcount;
  return ( ( * _IGnext ) ++ );
  }

 _Elem * _Gnpreinc ( )
  {
  -- * _IGcount;
  return ( ++ ( * _IGnext ) );
  }

 streamsize _Gnavail ( ) const
  {
  return ( * _IGnext != 0 ? * _IGcount : 0 );
  }

 void pbump ( int _Off )
  {
  * _IPcount -= _Off;
  * _IPnext += _Off;
  }

 void setp ( _Elem * _First, _Elem * _Last )
  {
  * _IPfirst = _First;
  * _IPnext = _First;
  * _IPcount = ( int ) ( _Last - _First );
  }

 void setp ( _Elem * _First, _Elem * _Next, _Elem * _Last )
  {
  * _IPfirst = _First;
  * _IPnext = _Next;
  * _IPcount = ( int ) ( _Last - _Next );
  }

 _Elem * _Pninc ( )
  {
  -- * _IPcount;
  return ( ( * _IPnext ) ++ );
  }

 streamsize _Pnavail ( ) const
  {
  return ( * _IPnext != 0 ? * _IPcount : 0 );
  }

 void _Init ( )
  {
  _IGfirst = & _Gfirst, _IPfirst = & _Pfirst;
  _IGnext = & _Gnext, _IPnext = & _Pnext;
  _IGcount = & _Gcount, _IPcount = & _Pcount;
  setp ( 0, 0 ), setg ( 0, 0, 0 );
  }

 void _Init ( _Elem * * _Gf, _Elem * * _Gn, int * _Gc,
  _Elem * * _Pf, _Elem * * _Pn, int * _Pc )
  {
  _IGfirst = _Gf, _IPfirst = _Pf;
  _IGnext = _Gn, _IPnext = _Pn;
  _IGcount = _Gc, _IPcount = _Pc;
  }

 virtual int_type overflow ( int_type = _Traits :: eof ( ) )
  {
  return ( _Traits :: eof ( ) );
  }

 virtual int_type pbackfail ( int_type = _Traits :: eof ( ) )
  {
  return ( _Traits :: eof ( ) );
  }

 virtual streamsize showmanyc ( )
  {
  return ( 0 );
  }

 virtual int_type underflow ( )
  {
  return ( _Traits :: eof ( ) );
  }

 virtual int_type uflow ( )
  {
  return ( _Traits :: eq_int_type ( _Traits :: eof ( ), underflow ( ) )
   ? _Traits :: eof ( ) : _Traits :: to_int_type ( * _Gninc ( ) ) );
  }

 __declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
 virtual streamsize xsgetn ( _Elem * _Ptr,
  streamsize _Count )
  {

  return _Xsgetn_s ( _Ptr, ( size_t ) - 1, _Count );
  }

 virtual streamsize _Xsgetn_s ( _Elem * _Ptr,
  size_t _Ptr_size, streamsize _Count )
  {
  int_type _Meta;
  streamsize _Stream_size, _Size, _Copied;

  for ( _Copied = 0; 0 < _Count; )
   if ( 0 < ( _Stream_size = _Gnavail ( ) ) )
    {
    _Size = _Stream_size;
    if ( _Count < _Size )
     _Size = _Count;
    _Traits_helper :: copy_s < _Traits > ( _Ptr, _Ptr_size, gptr ( ), _Size );
    _Ptr += _Size;
    _Copied += _Size;
    _Count -= _Size;
    gbump ( ( int ) _Size );
    }
   else if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta = uflow ( ) ) )
    break;
   else
    {
    * _Ptr ++ = _Traits :: to_char_type ( _Meta );
    ++ _Copied;
    -- _Count;
    }

  return ( _Copied );
  }

 virtual streamsize xsputn ( const _Elem * _Ptr,
  streamsize _Count )
  {
  streamsize _Stream_size, _Size, _Copied;

  for ( _Copied = 0; 0 < _Count; )
   if ( 0 < ( _Stream_size = _Pnavail ( ) ) )
    {
    _Size = _Stream_size;
    if ( _Count < _Size )
     _Size = _Count;
    _Traits_helper :: copy_s < _Traits > ( pptr ( ), _Stream_size, _Ptr, _Size );
    _Ptr += _Size;
    _Copied += _Size;
    _Count -= _Size;
    pbump ( ( int ) _Size );
    }
   else if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    overflow ( _Traits :: to_int_type ( * _Ptr ) ) ) )
    break;
   else
    {
    ++ _Ptr;
    ++ _Copied;
    -- _Count;
    }

  return ( _Copied );
  }

 virtual pos_type seekoff ( off_type, ios_base :: seekdir,
  ios_base :: openmode = ios_base :: in | ios_base :: out )
  {
  return ( streampos ( _BADOFF ) );
  }

 virtual pos_type seekpos ( pos_type,
  ios_base :: openmode = ios_base :: in | ios_base :: out )
  {
  return ( streampos ( _BADOFF ) );
  }

 virtual _Myt * setbuf ( _Elem *, streamsize )
  {
  return ( this );
  }

 virtual int sync ( )
  {
  return ( 0 );
  }

 virtual void imbue ( const locale & )
  {
  }

private :
 _Mutex _Mylock;
 _Elem * _Gfirst;
 _Elem * _Pfirst;
 _Elem * * _IGfirst;
 _Elem * * _IPfirst;
 _Elem * _Gnext;
 _Elem * _Pnext;
 _Elem * * _IGnext;
 _Elem * * _IPnext;
 int _Gcount;
 int _Pcount;
 int * _IGcount;
 int * _IPcount;
 locale * _Plocale;
 };
#line 443 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\streambuf"
template < class _Elem,
 class _Traits >
 class istreambuf_iterator
  : public iterator < input_iterator_tag,
   _Elem, typename _Traits :: off_type, _Elem *, _Elem & >
 {
 typedef istreambuf_iterator < _Elem, _Traits > _Myt;
public :
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef basic_streambuf < _Elem, _Traits > streambuf_type;
 typedef basic_istream < _Elem, _Traits > istream_type;

 typedef typename traits_type :: int_type int_type;


 typedef _Range_checked_iterator_tag _Checked_iterator_category;


 istreambuf_iterator ( streambuf_type * _Sb = 0 ) throw ( )
  : _Strbuf ( _Sb ), _Got ( _Sb == 0 )
  {
  }

 istreambuf_iterator ( istream_type & _Istr ) throw ( )
  : _Strbuf ( _Istr . rdbuf ( ) ), _Got ( _Istr . rdbuf ( ) == 0 )
  {
  }

 _Elem operator * ( ) const
  {
  if ( ! _Got )
   ( ( _Myt * ) this ) -> _Peek ( );






  return ( _Val );
  }

 _Myt & operator ++ ( )
  {






  _Inc ( );
  return ( * this );
  }

 _Myt operator ++ ( int )
  {
  if ( ! _Got )
   _Peek ( );
  _Myt _Tmp = * this;
  ++ * this;
  return ( _Tmp );
  }

 bool equal ( const _Myt & _Right ) const
  {
  if ( ! _Got )
   ( ( _Myt * ) this ) -> _Peek ( );
  if ( ! _Right . _Got )
   ( ( _Myt * ) & _Right ) -> _Peek ( );
  return ( _Strbuf == 0 && _Right . _Strbuf == 0
   || _Strbuf != 0 && _Right . _Strbuf != 0 );
  }

private :
 void _Inc ( )
  {
  if ( _Strbuf == 0
   || traits_type :: eq_int_type ( traits_type :: eof ( ),
    _Strbuf -> sbumpc ( ) ) )
   _Strbuf = 0, _Got = true;
  else
   _Got = false;
  }

 _Elem _Peek ( )
  {
  int_type _Meta;
  if ( _Strbuf == 0
   || traits_type :: eq_int_type ( traits_type :: eof ( ),
    _Meta = _Strbuf -> sgetc ( ) ) )
   _Strbuf = 0;
  else
   _Val = traits_type :: to_char_type ( _Meta );
  _Got = true;
  return ( _Val );
  }

 streambuf_type * _Strbuf;
 bool _Got;
 _Elem _Val;
 };
#line 546 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\streambuf"
template < class _Elem,
 class _Traits > inline
 bool operator == (
  const istreambuf_iterator < _Elem, _Traits > & _Left,
  const istreambuf_iterator < _Elem, _Traits > & _Right )
 {
 return ( _Left . equal ( _Right ) );
 }

template < class _Elem,
 class _Traits > inline
 bool operator != (
  const istreambuf_iterator < _Elem, _Traits > & _Left,
  const istreambuf_iterator < _Elem, _Traits > & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }


template < class _Elem,
 class _Traits >
 class ostreambuf_iterator
  : public _Outit
 {
 typedef ostreambuf_iterator < _Elem, _Traits > _Myt;
public :
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef basic_streambuf < _Elem, _Traits > streambuf_type;
 typedef basic_ostream < _Elem, _Traits > ostream_type;


 typedef _Range_checked_iterator_tag _Checked_iterator_category;


 ostreambuf_iterator ( streambuf_type * _Sb ) throw ( )
  : _Failed ( false ), _Strbuf ( _Sb )
  {
  }

 ostreambuf_iterator ( ostream_type & _Ostr ) throw ( )
  : _Failed ( false ), _Strbuf ( _Ostr . rdbuf ( ) )
  {
  }

 _Myt & operator = ( _Elem _Right )
  {
  if ( _Strbuf == 0
   || traits_type :: eq_int_type ( _Traits :: eof ( ),
    _Strbuf -> sputc ( _Right ) ) )
   _Failed = true;
  return ( * this );
  }

 _Myt & operator * ( )
  {
  return ( * this );
  }

 _Myt & operator ++ ( )
  {
  return ( * this );
  }

 _Myt & operator ++ ( int )
  {
  return ( * this );
  }

 bool failed ( ) const throw ( )
  {
  return ( _Failed );
  }

private :
 bool _Failed;
 streambuf_type * _Strbuf;
 };
#line 624 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\streambuf"
}

#pragma warning(pop)
#line 13 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocnum"
#pragma warning(push,3)
#line 627 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\streambuf"
#pragma pack ( pop )
#line 12 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocnum"
#pragma pack ( push, 8 )
#line 21 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocnum"
extern "C" { extern float __cdecl _Stofx(const char *, char **, long, int *); } 

extern "C" { extern double __cdecl _Stodx(const char *, char **, long, int *); } 

extern "C" { extern long double __cdecl _Stoldx(const char *, char **, long, int *); } 

extern "C" { extern long __cdecl _Stolx(const char *, char **, int, int *); } 

extern "C" { extern unsigned long __cdecl _Stoulx(const char *, char **, int, int *); } 




extern "C" { extern __int64 __cdecl _Stollx(const char *, char **, int, int *); } 

extern "C" { extern unsigned __int64 __cdecl _Stoullx(const char *, char **, int, int *); } 
#line 50 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocnum"
namespace std { 



#pragma warning(push)
#pragma warning(disable:4275)

template < class _Elem >
 class numpunct
  : public locale :: facet
 {
public :
 typedef basic_string < _Elem, char_traits < _Elem >, allocator < _Elem > >
  string_type;
 typedef _Elem char_type;

  static locale :: id id;

 _Elem decimal_point ( ) const
  {
  return ( do_decimal_point ( ) );
  }

 _Elem thousands_sep ( ) const
  {
  return ( do_thousands_sep ( ) );
  }

 string grouping ( ) const
  {
  return ( do_grouping ( ) );
  }

 string_type falsename ( ) const
  {
  return ( do_falsename ( ) );
  }

 string_type truename ( ) const
  {
  return ( do_truename ( ) );
  }

 explicit numpunct ( size_t _Refs = 0 )
  : locale :: facet ( _Refs )
  {
  { _Locinfo _Lobj;
   _Init ( _Lobj );
   if ( _Kseparator == 0 )
    _Kseparator =
     _Maklocchr ( ',', ( _Elem * ) 0, _Lobj . _Getcvt ( ) );
  }
  }

  numpunct ( const _Locinfo & _Lobj, size_t _Refs = 0, bool _Isdef = false )
  : locale :: facet ( _Refs )
  {
  _Init ( _Lobj, _Isdef );
  }

 static size_t __cdecl _Getcat ( const locale :: facet * * _Ppf = 0,
  const locale * _Ploc = 0 )
  {
  if ( _Ppf != 0 && * _Ppf == 0 )
   * _Ppf = new numpunct < _Elem > (
    _Locinfo ( _Ploc -> name ( ) ), 0, true );
  return ( 4 );
  }

protected :
 virtual ~ numpunct ( )
  {
  _Tidy ( );
  }

protected :
  numpunct ( const char * _Locname, size_t _Refs = 0, bool _Isdef = false )
  : locale :: facet ( _Refs )
  {
  { _Locinfo _Lobj ( _Locname );
   _Init ( _Lobj, _Isdef );
  }
  }

 void _Init ( const _Locinfo & _Lobj, bool _Isdef = false )
  {
  const lconv * _Ptr = _Lobj . _Getlconv ( );

  _Grouping = 0;
  _Falsename = 0;
  _Truename = 0;

  try {
  _Grouping = _Maklocstr ( _Ptr -> grouping, ( char * ) 0, _Lobj . _Getcvt ( ) );
  _Falsename = _Maklocstr ( _Lobj . _Getfalse ( ), ( _Elem * ) 0, _Lobj . _Getcvt ( ) );
  _Truename = _Maklocstr ( _Lobj . _Gettrue ( ), ( _Elem * ) 0, _Lobj . _Getcvt ( ) );
  } catch ( ... ) {
  _Tidy ( );
  throw;
  }

  _Dp = _Maklocchr ( _Ptr -> decimal_point [ 0 ], ( _Elem * ) 0, _Lobj . _Getcvt ( ) );
  _Kseparator =
   _Maklocchr ( _Ptr -> thousands_sep [ 0 ], ( _Elem * ) 0, _Lobj . _Getcvt ( ) );

  if ( _Isdef )
   {
   _Grouping = _Maklocstr ( "", ( char * ) 0, _Lobj . _Getcvt ( ) );
   _Dp = _Maklocchr ( '.', ( _Elem * ) 0, _Lobj . _Getcvt ( ) );
   _Kseparator = _Maklocchr ( ',', ( _Elem * ) 0, _Lobj . _Getcvt ( ) );
   }
  }

 virtual _Elem do_decimal_point ( ) const
  {
  return ( _Dp );
  }

 virtual _Elem do_thousands_sep ( ) const
  {
  return ( _Kseparator );
  }

 virtual string do_grouping ( ) const
  {
  return ( string ( _Grouping ) );
  }

 virtual string_type do_falsename ( ) const
  {
  return ( string_type ( _Falsename ) );
  }

 virtual string_type do_truename ( ) const
  {
  return ( string_type ( _Truename ) );
  }

private :
 void _Tidy ( )
  {
  delete [ ] ( ( void * ) _Grouping );
  delete [ ] ( ( void * ) _Falsename );
  delete [ ] ( ( void * ) _Truename );
  }

 const char * _Grouping;
 _Elem _Dp;
 _Elem _Kseparator;
 const _Elem * _Falsename;
 const _Elem * _Truename;
 };


template < class _Elem >
 class numpunct_byname
  : public numpunct < _Elem >
 {
public :
 explicit numpunct_byname ( const char * _Locname, size_t _Refs = 0 )
  : numpunct < _Elem > ( _Locname, _Refs )
  {
  }

protected :
 virtual ~ numpunct_byname ( )
  {
  }
 };


template<class _Elem> locale::id 
numpunct< _Elem> ::id; 


template < class _Elem,
 class _InIt = istreambuf_iterator < _Elem, char_traits < _Elem > > >
 class num_get
  : public locale :: facet
 {
public :
 typedef numpunct < _Elem > _Mypunct;
 typedef basic_string < _Elem, char_traits < _Elem >, allocator < _Elem > >
  _Mystr;

 static size_t __cdecl _Getcat ( const locale :: facet * * _Ppf = 0,
  const locale * _Ploc = 0 )
  {
  if ( _Ppf != 0 && * _Ppf == 0 )
   * _Ppf = new num_get < _Elem, _InIt > (
    _Locinfo ( _Ploc -> name ( ) ) );
  return ( 4 );
  }

  static locale :: id id;

protected :
 virtual ~ num_get ( )
  {
  }

protected :
 void _Init ( const _Locinfo & _Lobj )
  {
  _Cvt = _Lobj . _Getcvt ( );
  }

 _Locinfo :: _Cvtvec _Cvt;

public :
 explicit num_get ( size_t _Refs = 0 )
  : locale :: facet ( _Refs )
  {
  { _Locinfo _Lobj;
   _Init ( _Lobj );
  }
  }

  num_get ( const _Locinfo & _Lobj, size_t _Refs = 0 )
  : locale :: facet ( _Refs )
  {
  _Init ( _Lobj );
  }

 typedef _Elem char_type;
 typedef _InIt iter_type;

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   _Bool & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned short & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned int & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   long & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned long & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }


 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   __int64 & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned __int64 & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }


 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   float & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   double & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   long double & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   void * & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

protected :
 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   _Bool & _Val ) const
  {
  ;
  int _Ans = - 1;

  if ( _Iosbase . flags ( ) & ios_base :: boolalpha )
   {
   typedef typename _Mystr :: size_type _Mystrsize;
   const _Mypunct & _Punct_fac = use_facet < _Mypunct > ( _Iosbase . getloc ( ) );
   _Mystr _Str ( ( _Mystrsize ) 1, ( char_type ) 0 );
   _Str += _Punct_fac . falsename ( );
   _Str += ( char_type ) 0;
   _Str += _Punct_fac . truename ( );
   _Ans = _Getloctxt ( _First, _Last, ( size_t ) 2, _Str . c_str ( ) );
   }
  else
   {
   char _Ac [ 32 ], * _Ep;
   int _Errno = 0;
   const unsigned long _Ulo = :: _Stoulx ( _Ac, & _Ep,
    _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ),
     _Iosbase . getloc ( ) ), & _Errno );
   if ( _Ep != _Ac && _Errno == 0 && _Ulo <= 1 )
    _Ans = _Ulo;
   }

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ans < 0 )
   _State |= ios_base :: failbit;
  else
   _Val = _Ans != 0;
  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned short & _Val ) const
  {
  ;
  char _Ac [ 32 ], * _Ep;
  int _Errno = 0;
  int _Base = _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ),
   _Iosbase . getloc ( ) );
  char * _Ptr = _Ac [ 0 ] == '-' ? _Ac + 1 : _Ac;
  const unsigned long _Ans =
   :: _Stoulx ( _Ptr, & _Ep, _Base, & _Errno );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ptr || _Errno != 0 || 65535 < _Ans )
   _State |= ios_base :: failbit;
  else
   _Val = ( unsigned short ) ( _Ac [ 0 ] == '-'
    ? 0 - _Ans : _Ans );
  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned int & _Val ) const
  {
  ;
  char _Ac [ 32 ], * _Ep;
  int _Errno = 0;
  int _Base = _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ),
   _Iosbase . getloc ( ) );
  char * _Ptr = _Ac [ 0 ] == '-' ? _Ac + 1 : _Ac;
  const unsigned long _Ans =
   :: _Stoulx ( _Ptr, & _Ep, _Base, & _Errno );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ptr || _Errno != 0 || 4294967295U < _Ans )
   _State |= ios_base :: failbit;
  else
   _Val = _Ac [ 0 ] == '-' ? 0 - _Ans : _Ans;
  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   long & _Val ) const
  {
  ;
  char _Ac [ 32 ], * _Ep;
  int _Errno = 0;
  const long _Ans = :: _Stolx ( _Ac, & _Ep,
   _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ),
    _Iosbase . getloc ( ) ), & _Errno );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ac || _Errno != 0 )
   _State |= ios_base :: failbit;
  else
   _Val = _Ans;
  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned long & _Val ) const
  {
  ;
  char _Ac [ 32 ], * _Ep;
  int _Errno = 0;
  const unsigned long _Ans = :: _Stoulx ( _Ac, & _Ep,
   _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ),
    _Iosbase . getloc ( ) ), & _Errno );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ac || _Errno != 0 )
   _State |= ios_base :: failbit;
  else
   _Val = _Ans;
  return ( _First );
  }


 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   __int64 & _Val ) const
  {
  ;
  char _Ac [ 32 ], * _Ep;
  int _Errno = 0;
  const __int64 _Ans = :: _Stollx ( _Ac, & _Ep, _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ), _Iosbase . getloc ( ) ), & _Errno );


  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ac || _Errno != 0 )
   _State |= ios_base :: failbit;
  else
   _Val = _Ans;
  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned __int64 & _Val ) const
  {
  ;
  char _Ac [ 32 ], * _Ep;
  int _Errno = 0;
  const unsigned __int64 _Ans = :: _Stoullx ( _Ac, & _Ep, _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ), _Iosbase . getloc ( ) ), & _Errno );


  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ac || _Errno != 0 )
   _State |= ios_base :: failbit;
  else
   _Val = _Ans;
  return ( _First );
  }


 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   float & _Val ) const
  {
  ;
  char _Ac [ 8 + 36 + 16 ], * _Ep;
  int _Errno = 0;
  const float _Ans = :: _Stofx ( _Ac, & _Ep,
   _Getffld ( _Ac, _First, _Last,
    _Iosbase . getloc ( ) ), & _Errno );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ac || _Errno != 0 )
   _State |= ios_base :: failbit;
  else
   _Val = _Ans;
  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   double & _Val ) const
  {
  ;
  char _Ac [ 8 + 36 + 16 ], * _Ep;
  int _Errno = 0;
  const double _Ans = :: _Stodx ( _Ac, & _Ep,
   _Getffld ( _Ac, _First, _Last,
    _Iosbase . getloc ( ) ), & _Errno );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ac || _Errno != 0 )
   _State |= ios_base :: failbit;
  else
   _Val = _Ans;
  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   long double & _Val ) const
  {
  ;
  char _Ac [ 8 + 36 + 16 ], * _Ep;
  int _Errno = 0;
  const long double _Ans = :: _Stoldx ( _Ac, & _Ep,
   _Getffld ( _Ac, _First, _Last,
    _Iosbase . getloc ( ) ), & _Errno );

  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ac || _Errno != 0 )
   _State |= ios_base :: failbit;
  else
   _Val = _Ans;
  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   void * & _Val ) const
  {
  ;
  char _Ac [ 32 ], * _Ep;
  int _Errno = 0;


  int _Base = _Getifld ( _Ac, _First, _Last, ios_base :: hex,
   _Iosbase . getloc ( ) );
  const unsigned __int64 _Ans =
   ( sizeof ( void * ) == sizeof ( unsigned long ) )
    ? ( unsigned __int64 ) :: _Stoulx ( _Ac, & _Ep, _Base, & _Errno )
    : :: _Stoullx ( _Ac, & _Ep, _Base, & _Errno );







  if ( _First == _Last )
   _State |= ios_base :: eofbit;
  if ( _Ep == _Ac || _Errno != 0 )
   _State |= ios_base :: failbit;
  else
   _Val = ( void * ) ( ( char * ) 0 + _Ans );
  return ( _First );
  }

private :
 int __cdecl _Getifld ( char * _Ac,
  _InIt & _First, _InIt & _Last, ios_base :: fmtflags _Basefield,
   const locale & _Loc ) const
  {
  const _Mypunct & _Punct_fac = use_facet < _Mypunct > ( _Loc );
  const string _Grouping = _Punct_fac . grouping ( );
  const _Elem _Kseparator = _Grouping . size ( ) == 0
   ? ( _Elem ) 0 : _Punct_fac . thousands_sep ( );
  const _Elem _E0 = _Maklocchr ( '0', ( _Elem * ) 0, _Cvt );
  char * _Ptr = _Ac;

  if ( _First == _Last )
   ;
  else if ( * _First == _Maklocchr ( '+', ( _Elem * ) 0, _Cvt ) )
   * _Ptr ++ = '+', ++ _First;
  else if ( * _First == _Maklocchr ( '-', ( _Elem * ) 0, _Cvt ) )
   * _Ptr ++ = '-', ++ _First;

  _Basefield &= ios_base :: basefield;
  int _Base = _Basefield == ios_base :: oct ? 8
   : _Basefield == ios_base :: hex ? 16
   : _Basefield == ios_base :: _Fmtzero ? 0 : 10;

  bool _Seendigit = false;
  bool _Nonzero = false;

  if ( _First != _Last && * _First == _E0 )
   {
   _Seendigit = true, ++ _First;
   if ( _First != _Last && ( * _First == _Maklocchr ( 'x', ( _Elem * ) 0, _Cvt )
     || * _First == _Maklocchr ( 'X', ( _Elem * ) 0, _Cvt ) )
    && ( _Base == 0 || _Base == 16 ) )
    _Base = 16, _Seendigit = false, ++ _First;
   else if ( _Base == 0 )
    _Base = 8;
   }

  int _Dlen = _Base == 0 || _Base == 10 ? 10
   : _Base == 8 ? 8 : 16 + 6;
  string _Groups ( ( size_t ) 1, ( char ) _Seendigit );
  size_t _Group = 0;

  for ( char * const _Pe = & _Ac [ 32 - 1 ];
   _First != _Last; ++ _First )
   if ( :: memchr ( ( const char * ) "0123456789abcdefABCDEF",
    * _Ptr = _Maklocbyte ( ( _Elem ) * _First, _Cvt ), _Dlen ) != 0 )
    {
    if ( ( _Nonzero || * _Ptr != '0' ) && _Ptr < _Pe )
     ++ _Ptr, _Nonzero = true;
    _Seendigit = true;
    if ( _Groups [ _Group ] != 127 )
     ++ _Groups [ _Group ];
    }
   else if ( _Groups [ _Group ] == '\000'
    || _Kseparator == ( _Elem ) 0
    || * _First != _Kseparator )
    break;
   else
    {
    _Groups . append ( ( string :: size_type ) 1, '\000' );
    ++ _Group;
    }

  if ( _Group == 0 )
   ;
  else if ( '\000' < _Groups [ _Group ] )
   ++ _Group;
  else
   _Seendigit = false;

  for ( const char * _Pg = _Grouping . c_str ( ); _Seendigit && 0 < _Group; )
   if ( * _Pg == 127 )
    break;
   else if ( 0 < -- _Group && * _Pg != _Groups [ _Group ]
    || 0 == _Group && * _Pg < _Groups [ _Group ] )
    _Seendigit = false;
   else if ( '\000' < _Pg [ 1 ] )
    ++ _Pg;

  if ( _Seendigit && ! _Nonzero )
   * _Ptr ++ = '0';
  else if ( ! _Seendigit )
   _Ptr = _Ac;
  * _Ptr = '\000';
  return ( _Base );
  }

 int __cdecl _Getffld ( char * _Ac,
  _InIt & _First, _InIt & _Last, const locale & _Loc ) const
  {
  const _Mypunct & _Punct_fac = use_facet < _Mypunct > ( _Loc );
  const string _Grouping = _Punct_fac . grouping ( );
  const _Elem _E0 = _Maklocchr ( '0', ( _Elem * ) 0, _Cvt );
  char * _Ptr = _Ac;
  bool _Bad = false;

  if ( _First == _Last )
   ;
  else if ( * _First == _Maklocchr ( '+', ( _Elem * ) 0, _Cvt ) )
   * _Ptr ++ = '+', ++ _First;
  else if ( * _First == _Maklocchr ( '-', ( _Elem * ) 0, _Cvt ) )
   * _Ptr ++ = '-', ++ _First;

  bool _Seendigit = false;
  int _Significant = 0;
  int _Pten = 0;

  if ( * _Grouping . c_str ( ) == 127 || * _Grouping . c_str ( ) <= '\000' )
   for (; _First != _Last
    && _E0 <= * _First && * _First <= _E0 + 9;
     _Seendigit = true, ++ _First )
    if ( 36 <= _Significant )
     ++ _Pten;
    else if ( * _First == _E0 && _Significant == 0 )
     ;
    else
     {
     * _Ptr ++ = ( char ) ( ( * _First - _E0 ) + '0' );
     ++ _Significant;
     }
  else
   {
   const _Elem _Kseparator = _Punct_fac . thousands_sep ( );

   string _Groups ( ( size_t ) 1, '\000' );
   size_t _Group = 0;

   for (; _First != _Last; ++ _First )
    if ( _E0 <= * _First && * _First <= _E0 + 9 )
     {
     _Seendigit = true;
     if ( 36 <= _Significant )
      ++ _Pten;
     else if ( * _First == _E0 && _Significant == 0 )
      ;
     else
      {
      * _Ptr ++ = ( char ) ( ( * _First - _E0 ) + '0' );
      ++ _Significant;
      }
     if ( _Groups [ _Group ] != 127 )
      ++ _Groups [ _Group ];
     }
    else if ( _Groups [ _Group ] == '\000'
     || _Kseparator == ( _Elem ) 0
     || * _First != _Kseparator )
     break;
    else
     {
     _Groups . append ( ( size_t ) 1, '\000' );
     ++ _Group;
     }
   if ( _Group == 0 )
    ;
   else if ( '\000' < _Groups [ _Group ] )
    ++ _Group;
   else
    _Bad = true;

   for ( const char * _Pg = _Grouping . c_str ( );
    ! _Bad && 0 < _Group; )
    if ( * _Pg == 127 )
     break;
    else if ( 0 < -- _Group && * _Pg != _Groups [ _Group ]
     || 0 == _Group && * _Pg < _Groups [ _Group ] )
     _Bad = true;
    else if ( '\000' < _Pg [ 1 ] )
     ++ _Pg;
   }

  if ( _Seendigit && _Significant == 0 )
   * _Ptr ++ = '0';

  if ( _First != _Last && * _First == _Punct_fac . decimal_point ( ) )
   * _Ptr ++ = localeconv ( ) -> decimal_point [ 0 ], ++ _First;

  if ( _Significant == 0 )
   {
   for (; _First != _Last && * _First == _E0;
    _Seendigit = true, ++ _First )
    -- _Pten;
   if ( _Pten < 0 )
    * _Ptr ++ = '0', ++ _Pten;
   }

  for (; _First != _Last
    && _E0 <= * _First && * _First <= _E0 + 9;
    _Seendigit = true, ++ _First )
   if ( _Significant < 36 )
    {
    * _Ptr ++ = ( char ) ( ( * _First - _E0 ) + '0' );
    ++ _Significant;
    }

  if ( _Seendigit && _First != _Last
   && ( * _First == _Maklocchr ( 'e', ( _Elem * ) 0, _Cvt )
    || * _First == _Maklocchr ( 'E', ( _Elem * ) 0, _Cvt ) ) )
   {
   * _Ptr ++ = 'e', ++ _First;
   _Seendigit = false, _Significant = 0;

   if ( _First == _Last )
    ;
   else if ( * _First == _Maklocchr ( '+', ( _Elem * ) 0, _Cvt ) )
    * _Ptr ++ = '+', ++ _First;
   else if ( * _First == _Maklocchr ( '-', ( _Elem * ) 0, _Cvt ) )
    * _Ptr ++ = '-', ++ _First;
   for (; _First != _Last && * _First == _E0; )
    _Seendigit = true, ++ _First;
   if ( _Seendigit )
    * _Ptr ++ = '0';
   for (; _First != _Last
    && _E0 <= * _First && * _First <= _E0 + 9;
    _Seendigit = true, ++ _First )
    if ( _Significant < 8 )
     {
     * _Ptr ++ = ( char ) ( ( * _First - _E0 ) + '0' );
     ++ _Significant;
     }
   }

  if ( _Bad || ! _Seendigit )
   _Ptr = _Ac;
  * _Ptr = '\000';
  return ( _Pten );
  }


 int _Hexdig ( const _Elem _Dig, const _Elem _E0,
  const _Elem _Al, const _Elem _Au ) const
  {
  if ( _E0 <= _Dig && _Dig <= _E0 + 9 )
   return ( _Dig - _E0 );
  else if ( _Al <= _Dig && _Dig <= _Al + 5 )
   return ( _Dig - _Al + 10 );
  else if ( _Au <= _Dig && _Dig <= _Au + 5 )
   return ( _Dig - _Au + 10 );
  else
   return ( - 1 );
  }

 int __cdecl _Getffldx ( char * _Ac,
  _InIt & _First, _InIt & _Last,
  ios_base & _Iosbase, int * _Phexexp ) const
  {
  const _Mypunct & _Punct_fac = use_facet < _Mypunct > ( _Iosbase . getloc ( ) );
  const string _Grouping = _Punct_fac . grouping ( );
  const _Elem _E0 = _Maklocchr ( '0', ( _Elem * ) 0, _Cvt );
  const _Elem _Al = _Maklocchr ( 'a', ( _Elem * ) 0, _Cvt );
  const _Elem _Au = _Maklocchr ( 'A', ( _Elem * ) 0, _Cvt );
  char * _Ptr = _Ac;
  bool _Bad = false;
  int _Dig;

  if ( _First == _Last )
   ;
  else if ( * _First == _Maklocchr ( '+', ( _Elem * ) 0, _Cvt ) )
   * _Ptr ++ = '+', ++ _First;
  else if ( * _First == _Maklocchr ( '-', ( _Elem * ) 0, _Cvt ) )
   * _Ptr ++ = '-', ++ _First;

  * _Ptr ++ = '0';
  * _Ptr ++ = 'x';

  bool _Seendigit = false;
  int _Significant = 0;
  int _Phex = 0;

  if ( _First == _Last || * _First != _E0 )
   ;
  else if ( ++ _First != _Last
   && ( * _First == _Maklocchr ( 'x', ( _Elem * ) 0, _Cvt )
     || * _First == _Maklocchr ( 'X', ( _Elem * ) 0, _Cvt ) ) )
   ++ _First;
  else
   _Seendigit = true;

  if ( * _Grouping . c_str ( ) == 127 || * _Grouping . c_str ( ) <= '\000' )
   for (; _First != _Last
    && 0 <= ( _Dig = _Hexdig ( * _First, _E0, _Al, _Au ) );
     _Seendigit = true, ++ _First )
    if ( 36 <= _Significant )
     ++ _Phex;
    else if ( * _First == _E0 && _Significant == 0 )
     ;
    else
     {
     * _Ptr ++ = "0123456789abcdef" [ _Dig ];
     ++ _Significant;
     }
  else
   {
   const _Elem _Kseparator = _Grouping . size ( ) == 0
    ? ( _Elem ) 0 : _Punct_fac . thousands_sep ( );
   string _Groups ( ( size_t ) 1, '\000' );
   size_t _Group = 0;

   for (; _First != _Last; ++ _First )
    if ( 0 <= ( _Dig = _Hexdig ( * _First, _E0, _Al, _Au ) ) )
     {
     _Seendigit = true;
     if ( 36 <= _Significant )
      ++ _Phex;
     else if ( * _First == _E0 && _Significant == 0 )
      ;
     else
      {
      * _Ptr ++ = "0123456789abcdef" [ _Dig ];
      ++ _Significant;
      }
     if ( _Groups [ _Group ] != 127 )
      ++ _Groups [ _Group ];
     }
    else if ( _Groups [ _Group ] == '\000'
     || _Kseparator == ( _Elem ) 0
     || * _First != _Kseparator )
     break;
    else
     {
     _Groups . append ( ( size_t ) 1, '\000' );
     ++ _Group;
     }
   if ( _Group == 0 )
    ;
   else if ( '\000' < _Groups [ _Group ] )
    ++ _Group;
   else
    _Bad = true;

   for ( const char * _Pg = _Grouping . c_str ( );
    ! _Bad && 0 < _Group; )
    if ( * _Pg == 127 )
     break;
    else if ( 0 < -- _Group && * _Pg != _Groups [ _Group ]
     || 0 == _Group && * _Pg < _Groups [ _Group ] )
     _Bad = true;
    else if ( '\000' < _Pg [ 1 ] )
     ++ _Pg;
   }

  if ( _Seendigit && _Significant == 0 )
   * _Ptr ++ = '0';

  if ( _First != _Last && * _First == _Punct_fac . decimal_point ( ) )
   * _Ptr ++ = localeconv ( ) -> decimal_point [ 0 ], ++ _First;

  if ( _Significant == 0 )
   {
   for (; _First != _Last && * _First == _E0;
    _Seendigit = true, ++ _First )
    -- _Phex;
   if ( _Phex < 0 )
    * _Ptr ++ = '0', ++ _Phex;
   }

  for (; _First != _Last
    && 0 <= ( _Dig = _Hexdig ( * _First, _E0, _Al, _Au ) );
    _Seendigit = true, ++ _First )
   if ( _Significant < 36 )
    {
    * _Ptr ++ = "0123456789abcdef" [ _Dig ];
    ++ _Significant;
    }

  if ( _Seendigit && _First != _Last
   && ( * _First == _Maklocchr ( 'p', ( _Elem * ) 0, _Cvt )
    || * _First == _Maklocchr ( 'P', ( _Elem * ) 0, _Cvt ) ) )
   {
   * _Ptr ++ = 'p', ++ _First;
   _Seendigit = false, _Significant = 0;

   if ( _First == _Last )
    ;
   else if ( * _First == _Maklocchr ( '+', ( _Elem * ) 0, _Cvt ) )
    * _Ptr ++ = '+', ++ _First;
   else if ( * _First == _Maklocchr ( '-', ( _Elem * ) 0, _Cvt ) )
    * _Ptr ++ = '-', ++ _First;
   for (; _First != _Last && * _First == _E0; )
    _Seendigit = true, ++ _First;
   if ( _Seendigit )
    * _Ptr ++ = '0';
   for (; _First != _Last
    && _E0 <= * _First && * _First <= _E0 + 9;
    _Seendigit = true, ++ _First )
    if ( _Significant < 8 )
     {
     * _Ptr ++ = ( char ) ( ( * _First - _E0 ) + '0' );
     ++ _Significant;
     }
   }

  if ( _Bad || ! _Seendigit )
   _Ptr = _Ac;
  * _Ptr = '\000';
  * _Phexexp = _Phex;
  return ( 0 );
  }
 };
#line 1013 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocnum"
template<class _Elem, class 
_InIt> locale::id 
num_get< _Elem, _InIt> ::id; 


template < class _Elem,
 class _OutIt = ostreambuf_iterator < _Elem, char_traits < _Elem > > >
 class num_put
  : public locale :: facet
 {
public :
 typedef numpunct < _Elem > _Mypunct;
 typedef basic_string < _Elem, char_traits < _Elem >, allocator < _Elem > >
  _Mystr;

 static size_t __cdecl _Getcat ( const locale :: facet * * _Ppf = 0,
  const locale * _Ploc = 0 )
  {
  if ( _Ppf != 0 && * _Ppf == 0 )
   * _Ppf = new num_put < _Elem, _OutIt > (
    _Locinfo ( _Ploc -> name ( ) ) );
  return ( 4 );
  }

  static locale :: id id;

protected :
 virtual ~ num_put ( )
  {
  }

protected :
 void _Init ( const _Locinfo & _Lobj )
  {
  _Cvt = _Lobj . _Getcvt ( );
  }

 _Locinfo :: _Cvtvec _Cvt;

public :
 explicit num_put ( size_t _Refs = 0 )
  : locale :: facet ( _Refs )
  {
  { _Locinfo _Lobj;
   _Init ( _Lobj );
  }
  }

  num_put ( const _Locinfo & _Lobj, size_t _Refs = 0 )
  : locale :: facet ( _Refs )
  {
  _Init ( _Lobj );
  }

 typedef _Elem char_type;
 typedef _OutIt iter_type;

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, _Bool _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, long _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, unsigned long _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }


 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, __int64 _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, unsigned __int64 _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }


 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, double _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, long double _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, const void * _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

protected :
 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, _Bool _Val ) const
  {
  ;
  if ( ! ( _Iosbase . flags ( ) & ios_base :: boolalpha ) )
   return ( do_put ( _Dest, _Iosbase, _Fill, ( long ) _Val ) );
  else
   {
   const _Mypunct & _Punct_fac = use_facet < _Mypunct > ( _Iosbase . getloc ( ) );
   _Mystr _Str;
   if ( _Val )
    _Str . assign ( _Punct_fac . truename ( ) );
   else
    _Str . assign ( _Punct_fac . falsename ( ) );

   size_t _Fillcount = _Iosbase . width ( ) <= 0
    || ( size_t ) _Iosbase . width ( ) <= _Str . size ( )
     ? 0 : ( size_t ) _Iosbase . width ( ) - _Str . size ( );

   if ( ( _Iosbase . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
    {
    _Dest = _Rep ( _Dest, _Fill, _Fillcount );
    _Fillcount = 0;
    }
   _Dest = _Put ( _Dest, _Str . c_str ( ), _Str . size ( ) );
   _Iosbase . width ( 0 );
   return ( _Rep ( _Dest, _Fill, _Fillcount ) );
   }
  }

 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, long _Val ) const
  {
  const size_t _Buf_size = 2 * 32;
  char _Buf [ _Buf_size ], _Fmt [ 6 ];
  return ( _Iput ( _Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s ( _Buf, _Buf_size, _Ifmt ( _Fmt, "ld",
    _Iosbase . flags ( ) ), _Val ) ) );
  }

 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, unsigned long _Val ) const
  {
  const size_t _Buf_size = 2 * 32;
  char _Buf [ _Buf_size ], _Fmt [ 6 ];
  return ( _Iput ( _Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s ( _Buf, _Buf_size, _Ifmt ( _Fmt, "lu",
    _Iosbase . flags ( ) ), _Val ) ) );
  }


 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, __int64 _Val ) const
  {
  const size_t _Buf_size = 2 * 32;
  char _Buf [ _Buf_size ], _Fmt [ 8 ];
  return ( _Iput ( _Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s ( _Buf, _Buf_size, _Ifmt ( _Fmt, "Ld",
    _Iosbase . flags ( ) ), _Val ) ) );
  }

 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, unsigned __int64 _Val ) const
  {
  const size_t _Buf_size = 2 * 32;
  char _Buf [ _Buf_size ], _Fmt [ 8 ];
  return ( _Iput ( _Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s ( _Buf, _Buf_size, _Ifmt ( _Fmt, "Lu",
    _Iosbase . flags ( ) ), _Val ) ) );
  }


 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, double _Val ) const
  {
  const size_t _Buf_size = 8 + 36 + 64;
  char _Buf [ _Buf_size ], _Fmt [ 8 ];
  streamsize _Precision = _Iosbase . precision ( ) <= 0
   && ! ( _Iosbase . flags ( ) & ios_base :: fixed )
    ? 6 : _Iosbase . precision ( );
  int _Significance = 36 < _Precision
   ? 36 : ( int ) _Precision;
  _Precision -= _Significance;
  size_t _Beforepoint = 0;
  size_t _Afterpoint = 0;

  if ( ( _Iosbase . flags ( ) & ios_base :: floatfield ) == ios_base :: fixed
   && _Val * (0.5) != _Val )
   {
   bool _Signed = _Val < 0;
   if ( _Signed )
    _Val = - _Val;

   for (; (9.9999999999999997e+034) <= _Val && _Beforepoint < 5000; _Beforepoint += 10 )
    _Val /= (10000000000.0);

   if ( 0 < _Val )
    for (; 10 <= _Precision && _Val <= (1e-035)
     && _Afterpoint < 5000; _Afterpoint += 10 )
     {
     _Val *= (10000000000.0);
     _Precision -= 10;
     }

   if ( _Signed )
    _Val = - _Val;
   }

  return ( _Fput ( _Dest, _Iosbase, _Fill, _Buf,
   _Beforepoint, _Afterpoint, _Precision,
    :: sprintf_s ( _Buf, _Buf_size, _Ffmt ( _Fmt, 0, _Iosbase . flags ( ) ),
     _Significance, _Val ) ) );
  }

 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, long double _Val ) const
  {
  const size_t _Buf_size = 8 + 36 + 64;
  char _Buf [ _Buf_size ], _Fmt [ 8 ];
  streamsize _Precision = _Iosbase . precision ( ) <= 0
   && ! ( _Iosbase . flags ( ) & ios_base :: fixed )
    ? 6 : _Iosbase . precision ( );
  int _Significance = 36 < _Precision
   ? 36 : ( int ) _Precision;
  _Precision -= _Significance;
  size_t _Beforepoint = 0;
  size_t _Afterpoint = 0;

  if ( ( _Iosbase . flags ( ) & ios_base :: floatfield ) == ios_base :: fixed )
   {
   bool _Signed = _Val < 0;
   if ( _Signed )
    _Val = - _Val;

   for (; (9.9999999999999997e+034) <= _Val && _Beforepoint < 5000; _Beforepoint += 10 )
    _Val /= (10000000000.0);

   if ( 0 < _Val )
    for (; 10 <= _Precision && _Val <= (1e-035)
     && _Afterpoint < 5000; _Afterpoint += 10 )
     {
     _Val *= (10000000000.0);
     _Precision -= 10;
     }

   if ( _Signed )
    _Val = - _Val;
   }

  return ( _Fput ( _Dest, _Iosbase, _Fill, _Buf,
   _Beforepoint, _Afterpoint, _Precision,
    :: sprintf_s ( _Buf, _Buf_size, _Ffmt ( _Fmt, 'L', _Iosbase . flags ( ) ),
     _Significance, _Val ) ) );
  }

 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, const void * _Val ) const
  {
  const size_t _Buf_size = 2 * 32;
  char _Buf [ _Buf_size ];
  return ( _Iput ( _Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s ( _Buf, _Buf_size, "%p", _Val ) ) );
  }

private :
 char * __cdecl _Ffmt ( char * _Fmt,
  char _Spec, ios_base :: fmtflags _Flags ) const
  {
  char * _Ptr = _Fmt;
  * _Ptr ++ = '%';

  if ( _Flags & ios_base :: showpos )
   * _Ptr ++ = '+';
  if ( _Flags & ios_base :: showpoint )
   * _Ptr ++ = '#';
  * _Ptr ++ = '.';
  * _Ptr ++ = '*';
  if ( _Spec != '\000' )
   * _Ptr ++ = _Spec;

  ios_base :: fmtflags _Ffl = _Flags & ios_base :: floatfield;
  * _Ptr ++ = _Ffl == ios_base :: fixed ? 'f'
   : _Ffl == ios_base :: hexfloat ? 'a'
   : _Ffl == ios_base :: scientific ? 'e' : 'g';
  * _Ptr = '\000';
  return ( _Fmt );
  }

 _OutIt __cdecl _Fput ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, const char * _Buf,
   size_t _Beforepoint, size_t _Afterpoint,
    size_t _Trailing, size_t _Count ) const
  {
  ;
  const _Mypunct & _Punct_fac = use_facet < _Mypunct > ( _Iosbase . getloc ( ) );
  const string _Grouping = _Punct_fac . grouping ( );
  const _Elem _Kseparator = _Punct_fac . thousands_sep ( );
  string _Groupstring;
  const _Elem _E0 = _Maklocchr ( '0', ( _Elem * ) 0, _Cvt );
  size_t _Prefix = _Buf [ 0 ] == '+' || _Buf [ 0 ] == '-' ? 1 : 0;

  char _Enders [ 3 ];
  _Enders [ 0 ] = :: localeconv ( ) -> decimal_point [ 0 ];
  _Enders [ 1 ] = 'e';
  _Enders [ 2 ] = '\000';

  const char * _Eptr = ( const char * ) :: memchr ( _Buf,
   'e', _Count );
  const char * _Pointptr = ( const char * ) :: memchr ( _Buf,
   _Enders [ 0 ], _Count );
  if ( _Pointptr == 0 )
   _Trailing = 0;

  if ( * _Grouping . c_str ( ) != 127 && '\000' < * _Grouping . c_str ( ) )
   {
   _Groupstring . append ( _Buf, _Count );
   if ( _Eptr == 0 )
    _Groupstring . append ( _Trailing, '0' );
   else
    {
    if ( _Pointptr == 0 )
     {
     _Groupstring . append ( _Beforepoint, '0' );
     _Beforepoint = 0;
     }
    _Groupstring . insert ( _Eptr - _Buf, _Trailing, '0' );
    }
   _Trailing = 0;

   if ( _Pointptr == 0 )
    _Groupstring . append ( _Beforepoint, '0' );
   else
    {
    _Groupstring . insert ( _Pointptr - _Buf + 1, _Afterpoint, '0' );
    _Groupstring . insert ( _Pointptr - _Buf, _Beforepoint, '0' );
    _Afterpoint = 0;
    }
   _Beforepoint = 0;

   const char * _Pg = _Grouping . c_str ( );
   size_t _Off = :: strcspn ( & _Groupstring [ 0 ], & _Enders [ 0 ] );
   while ( * _Pg != 127 && '\000' < * _Pg
    && ( size_t ) * _Pg < _Off - _Prefix )
    {
    _Groupstring . insert ( _Off -= * _Pg, ( size_t ) 1, '\000' );
    if ( '\000' < _Pg [ 1 ] )
     ++ _Pg;
    }

   _Buf = & _Groupstring [ 0 ];
   _Trailing = 0;
   _Count = _Groupstring . size ( );
   }

  size_t _Fillcount = _Beforepoint + _Afterpoint + _Trailing + _Count;
  _Fillcount = _Iosbase . width ( ) <= 0
   || ( size_t ) _Iosbase . width ( ) <= _Fillcount
    ? 0 : ( size_t ) _Iosbase . width ( ) - _Fillcount;
  ios_base :: fmtflags _Adjustfield =
   _Iosbase . flags ( ) & ios_base :: adjustfield;
  if ( _Adjustfield != ios_base :: left
   && _Adjustfield != ios_base :: internal )
   {
   _Dest = _Rep ( _Dest, _Fill, _Fillcount );
   _Fillcount = 0;
   }
  else if ( _Adjustfield == ios_base :: internal )
   {
   if ( 0 < _Prefix )
    {
    _Dest = _Putc ( _Dest, _Buf, 1 );
    ++ _Buf, -- _Count;
    }
   _Dest = _Rep ( _Dest, _Fill, _Fillcount );
   _Fillcount = 0;
   }

  _Pointptr = ( const char * ) :: memchr ( _Buf,
   _Enders [ 0 ], _Count );
  if ( _Pointptr != 0 )
   {
   size_t _Fracoffset = _Pointptr - _Buf + 1;
   _Dest = _Putgrouped ( _Dest, _Buf, _Fracoffset - 1, _Kseparator );
   _Dest = _Rep ( _Dest, _E0, _Beforepoint );
   _Dest = _Rep ( _Dest, _Punct_fac . decimal_point ( ), 1 );
   _Dest = _Rep ( _Dest, _E0, _Afterpoint );
   _Buf += _Fracoffset, _Count -= _Fracoffset;
   }

  _Eptr = ( const char * ) :: memchr ( _Buf,
   'e', _Count );
  if ( _Eptr != 0 )
   {
   size_t _Expoffset = _Eptr - _Buf + 1;
   _Dest = _Putgrouped ( _Dest, _Buf, _Expoffset - 1, _Kseparator );
   _Dest = _Rep ( _Dest, _E0, _Trailing ), _Trailing = 0;
   _Dest = _Putc ( _Dest, _Iosbase . flags ( ) & ios_base :: uppercase
    ? "E" : "e", 1 );
   _Buf += _Expoffset, _Count -= _Expoffset;
   }

  _Dest = _Putgrouped ( _Dest, _Buf, _Count,
   _Kseparator );
  _Dest = _Rep ( _Dest, _E0, _Trailing );
  _Iosbase . width ( 0 );
  return ( _Rep ( _Dest, _Fill, _Fillcount ) );
  }

 char * __cdecl _Ifmt ( char * _Fmt,
  const char * _Spec, ios_base :: fmtflags _Flags ) const
  {
  char * _Ptr = _Fmt;
  * _Ptr ++ = '%';

  if ( _Flags & ios_base :: showpos )
   * _Ptr ++ = '+';
  if ( _Flags & ios_base :: showbase )
   * _Ptr ++ = '#';
  if ( _Spec [ 0 ] != 'L' )
   * _Ptr ++ = _Spec [ 0 ];
  else
   {
   * _Ptr ++ = 'I';
   * _Ptr ++ = '6';
   * _Ptr ++ = '4';
   }

  ios_base :: fmtflags _Basefield = _Flags & ios_base :: basefield;
  * _Ptr ++ = _Basefield == ios_base :: oct ? 'o'
   : _Basefield != ios_base :: hex ? _Spec [ 1 ]
   : _Flags & ios_base :: uppercase ? 'X' : 'x';
  * _Ptr = '\000';
  return ( _Fmt );
  }

 _OutIt __cdecl _Iput ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, char * _Buf, size_t _Count ) const
  {
  ;
  const _Mypunct & _Punct_fac = use_facet < _Mypunct > ( _Iosbase . getloc ( ) );
  const string _Grouping = _Punct_fac . grouping ( );
  const size_t _Prefix = * _Buf == '+' || * _Buf == '-' ? 1
   : * _Buf == '0' && ( _Buf [ 1 ] == 'x' || _Buf [ 1 ] == 'X' ) ? 2
   : 0;

  if ( * _Grouping . c_str ( ) != 127 && '\000' < * _Grouping . c_str ( ) )
   {
   const char * _Pg = _Grouping . c_str ( );
   size_t _Off = _Count;
   while ( * _Pg != 127 && '\000' < * _Pg
    && ( size_t ) * _Pg < _Off - _Prefix )
    {
    _Off -= * _Pg;
    :: memmove_s ( ( & _Buf [ _Off + 1 ] ), ( _Count + 1 - _Off ), ( & _Buf [ _Off ] ), ( _Count + 1 - _Off ) );

    _Buf [ _Off ] = '\000', ++ _Count;
    if ( '\000' < _Pg [ 1 ] )
     ++ _Pg;
    }
   }

  size_t _Fillcount = _Iosbase . width ( ) <= 0
   || ( size_t ) _Iosbase . width ( ) <= _Count
    ? 0 : ( size_t ) _Iosbase . width ( ) - _Count;

  ios_base :: fmtflags _Adjustfield =
   _Iosbase . flags ( ) & ios_base :: adjustfield;
  if ( _Adjustfield != ios_base :: left
   && _Adjustfield != ios_base :: internal )
   {
   _Dest = _Rep ( _Dest, _Fill, _Fillcount );
   _Fillcount = 0;
   }
  else if ( _Adjustfield == ios_base :: internal )
   {
   _Dest = _Putc ( _Dest, _Buf, _Prefix );
   _Buf += _Prefix, _Count -= _Prefix;
   _Dest = _Rep ( _Dest, _Fill, _Fillcount ), _Fillcount = 0;
   }

  _Dest = _Putgrouped ( _Dest, _Buf, _Count,
   _Punct_fac . thousands_sep ( ) );
  _Iosbase . width ( 0 );
  return ( _Rep ( _Dest, _Fill, _Fillcount ) );
  }

 _OutIt __cdecl _Put ( _OutIt _Dest,
  const _Elem * _Ptr, size_t _Count ) const
  {
  for (; 0 < _Count; -- _Count, ++ _Dest, ++ _Ptr )
   * _Dest = * _Ptr;
  return ( _Dest );
  }

 _OutIt __cdecl _Putc ( _OutIt _Dest,
  const char * _Ptr, size_t _Count ) const
  {
  for (; 0 < _Count; -- _Count, ++ _Dest, ++ _Ptr )
   * _Dest = _Maklocchr ( * _Ptr, ( _Elem * ) 0, _Cvt );
  return ( _Dest );
  }

 _OutIt __cdecl _Putgrouped ( _OutIt _Dest,
  const char * _Ptr, size_t _Count, _Elem _Kseparator ) const
  {
  for (;; ++ _Ptr, -- _Count )
   {
   const char * _Pend =
    ( const char * ) :: memchr ( _Ptr, '\000', _Count );
   size_t _Groupsize = _Pend != 0 ? _Pend - _Ptr : _Count;

   _Dest = _Putc ( _Dest, _Ptr, _Groupsize );
   _Ptr += _Groupsize, _Count -= _Groupsize;
   if ( _Count == 0 )
    break;
   if ( _Kseparator != ( _Elem ) 0 )
    _Dest = _Rep ( _Dest, _Kseparator, 1 );
   }
  return ( _Dest );
  }

 _OutIt __cdecl _Rep ( _OutIt _Dest,
  _Elem _Ch, size_t _Count ) const
  {
  for (; 0 < _Count; -- _Count, ++ _Dest )
   * _Dest = _Ch;
  return ( _Dest );
  }
 };
#line 1552 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocnum"
template<class _Elem, class 
_OutIt> locale::id 
num_put< _Elem, _OutIt> ::id; 
#line 1574 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocnum"
#pragma warning(pop)
}


#pragma warning(pop)
#line 10 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\ios"
#pragma warning(push,3)
#line 1579 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xlocnum"
#pragma pack ( pop )
#line 9 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\ios"
#pragma pack ( push, 8 )
#line 13 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\ios"
namespace std { 


template < class _Elem,
 class _Traits >
 class basic_ios
  : public ios_base
 {
public :
 typedef basic_ios < _Elem, _Traits > _Myt;
 typedef basic_ostream < _Elem, _Traits > _Myos;
 typedef basic_streambuf < _Elem, _Traits > _Mysb;
 typedef ctype < _Elem > _Ctype;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;

 explicit basic_ios ( _Mysb * _Strbuf )
  {
  init ( _Strbuf );
  }

 virtual ~ basic_ios ( )
  {
  }

 void clear ( iostate _State = goodbit, bool _Reraise = false )
  {
  ios_base :: clear ( ( iostate ) ( _Mystrbuf == 0
   ? ( int ) _State | ( int ) badbit : ( int ) _State ), _Reraise );
  }

 void clear ( io_state _State )
  {
  clear ( ( iostate ) _State );
  }

 void setstate ( iostate _State, bool _Reraise = false )
  {
  if ( _State != goodbit )
   clear ( ( iostate ) ( ( int ) rdstate ( ) | ( int ) _State ), _Reraise );
  }

 void setstate ( io_state _State )
  {
  setstate ( ( iostate ) _State );
  }

 _Myt & copyfmt ( const _Myt & _Right )
  {
  _Tiestr = _Right . tie ( );
  _Fillch = _Right . fill ( );
  ios_base :: copyfmt ( _Right );
  return ( * this );
  }

 _Myos * tie ( ) const
  {
  return ( _Tiestr );
  }

 _Myos * tie ( _Myos * _Newtie )
  {
  _Myos * _Oldtie = _Tiestr;
  _Tiestr = _Newtie;
  return ( _Oldtie );
  }

 _Mysb * rdbuf ( ) const
  {
  return ( _Mystrbuf );
  }

 _Mysb * rdbuf ( _Mysb * _Strbuf )
  {
  _Mysb * _Oldstrbuf = _Mystrbuf;
  _Mystrbuf = _Strbuf;
  clear ( );
  return ( _Oldstrbuf );
  }

 locale imbue ( const locale & _Loc )
  {
  locale _Oldlocale = ios_base :: imbue ( _Loc );
  if ( rdbuf ( ) != 0 )
   rdbuf ( ) -> pubimbue ( _Loc );
  return ( _Oldlocale );
  }

 _Elem fill ( ) const
  {
  return ( _Fillch );
  }

 _Elem fill ( _Elem _Newfill )
  {
  _Elem _Oldfill = _Fillch;
  _Fillch = _Newfill;
  return ( _Oldfill );
  }

 char narrow ( _Elem _Ch, char _Dflt = '\000' ) const
  {
  const _Ctype & _Ctype_fac = use_facet < _Ctype > ( getloc ( ) );
  return ( _Ctype_fac . narrow ( _Ch, _Dflt ) );
  }

 _Elem widen ( char _Byte ) const
  {
  const _Ctype & _Ctype_fac = use_facet < _Ctype > ( getloc ( ) );
  return ( _Ctype_fac . widen ( _Byte ) );
  }

protected :
 void init ( _Mysb * _Strbuf = 0,
  bool _Isstd = false )
  {
  _Init ( );
  _Mystrbuf = _Strbuf;
  _Tiestr = 0;
  _Fillch = widen ( ' ' );

  if ( _Mystrbuf == 0 )
   setstate ( badbit );

  if ( _Isstd )
   _Addstd ( this );
  else
  _Stdstr = 0;
  }

  basic_ios ( )
  {
  }

private :
  basic_ios ( const _Myt & );
 _Myt & operator = ( const _Myt & );

 _Mysb * _Mystrbuf;
 _Myos * _Tiestr;
 _Elem _Fillch;
 };
#line 171 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\ios"
inline ios_base &__cdecl boolalpha(ios_base &_Iosbase) 
{ 
_Iosbase.setf((_Iosb< int> ::_Fmtflags)16384); 
return _Iosbase; 
} 

inline ios_base &__cdecl dec(ios_base &_Iosbase) 
{ 
_Iosbase.setf((_Iosb< int> ::_Fmtflags)512, (_Iosb< int> ::_Fmtflags)3584); 
return _Iosbase; 
} 

inline ios_base &__cdecl fixed(ios_base &_Iosbase) 
{ 
_Iosbase.setf((_Iosb< int> ::_Fmtflags)8192, (_Iosb< int> ::_Fmtflags)12288); 
return _Iosbase; 
} 

inline ios_base &__cdecl hex(ios_base &_Iosbase) 
{ 
_Iosbase.setf((_Iosb< int> ::_Fmtflags)2048, (_Iosb< int> ::_Fmtflags)3584); 
return _Iosbase; 
} 

namespace tr1 { 
inline ios_base &__cdecl hexfloat(ios_base &_Iosbase) 
{ 
_Iosbase.setf((_Iosb< int> ::_Fmtflags)12288, (_Iosb< int> ::_Fmtflags)12288); 
return _Iosbase; 
} 
}
using tr1::hexfloat;

inline ios_base &__cdecl internal(ios_base &_Iosbase) 
{ 
_Iosbase.setf((_Iosb< int> ::_Fmtflags)256, (_Iosb< int> ::_Fmtflags)448); 
return _Iosbase; 
} 

inline ios_base &__cdecl left(ios_base &_Iosbase) 
{ 
_Iosbase.setf((_Iosb< int> ::_Fmtflags)64, (_Iosb< int> ::_Fmtflags)448); 
return _Iosbase; 
} 

inline ios_base &__cdecl noboolalpha(ios_base &_Iosbase) 
{ 
_Iosbase.unsetf((_Iosb< int> ::_Fmtflags)16384); 
return _Iosbase; 
} 

inline ios_base &__cdecl noshowbase(ios_base &_Iosbase) 
{ 
_Iosbase.unsetf((_Iosb< int> ::_Fmtflags)8); 
return _Iosbase; 
} 

inline ios_base &__cdecl noshowpoint(ios_base &_Iosbase) 
{ 
_Iosbase.unsetf((_Iosb< int> ::_Fmtflags)16); 
return _Iosbase; 
} 

inline ios_base &__cdecl noshowpos(ios_base &_Iosbase) 
{ 
_Iosbase.unsetf((_Iosb< int> ::_Fmtflags)32); 
return _Iosbase; 
} 

inline ios_base &__cdecl noskipws(ios_base &_Iosbase) 
{ 
_Iosbase.unsetf((_Iosb< int> ::_Fmtflags)1); 
return _Iosbase; 
} 

inline ios_base &__cdecl nounitbuf(ios_base &_Iosbase) 
{ 
_Iosbase.unsetf((_Iosb< int> ::_Fmtflags)2); 
return _Iosbase; 
} 

inline ios_base &__cdecl nouppercase(ios_base &_Iosbase) 
{ 
_Iosbase.unsetf((_Iosb< int> ::_Fmtflags)4); 
return _Iosbase; 
} 

inline ios_base &__cdecl oct(ios_base &_Iosbase) 
{ 
_Iosbase.setf((_Iosb< int> ::_Fmtflags)1024, (_Iosb< int> ::_Fmtflags)3584); 
return _Iosbase; 
} 

inline ios_base &__cdecl right(ios_base &_Iosbase) 
{ 
_Iosbase.setf((_Iosb< int> ::_Fmtflags)128, (_Iosb< int> ::_Fmtflags)448); 
return _Iosbase; 
} 

inline ios_base &__cdecl scientific(ios_base &_Iosbase) 
{ 
_Iosbase.setf((_Iosb< int> ::_Fmtflags)4096, (_Iosb< int> ::_Fmtflags)12288); 
return _Iosbase; 
} 

inline ios_base &__cdecl showbase(ios_base &_Iosbase) 
{ 
_Iosbase.setf((_Iosb< int> ::_Fmtflags)8); 
return _Iosbase; 
} 

inline ios_base &__cdecl showpoint(ios_base &_Iosbase) 
{ 
_Iosbase.setf((_Iosb< int> ::_Fmtflags)16); 
return _Iosbase; 
} 

inline ios_base &__cdecl showpos(ios_base &_Iosbase) 
{ 
_Iosbase.setf((_Iosb< int> ::_Fmtflags)32); 
return _Iosbase; 
} 

inline ios_base &__cdecl skipws(ios_base &_Iosbase) 
{ 
_Iosbase.setf((_Iosb< int> ::_Fmtflags)1); 
return _Iosbase; 
} 

inline ios_base &__cdecl unitbuf(ios_base &_Iosbase) 
{ 
_Iosbase.setf((_Iosb< int> ::_Fmtflags)2); 
return _Iosbase; 
} 

inline ios_base &__cdecl uppercase(ios_base &_Iosbase) 
{ 
_Iosbase.setf((_Iosb< int> ::_Fmtflags)4); 
return _Iosbase; 
} 
}


#pragma warning(pop)
#line 10 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\ostream"
#pragma warning(push,3)
#pragma warning(disable: 4390)
#line 315 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\ios"
#pragma pack ( pop )
#line 9 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\ostream"
#pragma pack ( push, 8 )
#line 14 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\ostream"
namespace std { 
#line 38 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\ostream"
template < class _Elem,
 class _Traits >
 class basic_ostream
  : virtual public basic_ios < _Elem, _Traits >
 {
public :
 typedef basic_ostream < _Elem, _Traits > _Myt;
 typedef basic_ios < _Elem, _Traits > _Myios;
 typedef basic_streambuf < _Elem, _Traits > _Mysb;
 typedef ostreambuf_iterator < _Elem, _Traits > _Iter;
 typedef num_put < _Elem, _Iter > _Nput;

 explicit basic_ostream ( basic_streambuf < _Elem, _Traits > * _Strbuf,
  bool _Isstd = false )
  {
  _Myios :: init ( _Strbuf, _Isstd );
  }

  basic_ostream ( _Uninitialized, bool _Addit = true )
  {
  if ( _Addit )
   ios_base :: _Addstd ( this );
  }

 virtual ~ basic_ostream ( )
  {
  }

 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;

 class _Sentry_base
  {
 public :
   _Sentry_base ( _Myt & _Ostr )
   : _Myostr ( _Ostr )
   {
   if ( _Myostr . rdbuf ( ) != 0 )
    _Myostr . rdbuf ( ) -> _Lock ( );
   }

   ~ _Sentry_base ( )
   {
   if ( _Myostr . rdbuf ( ) != 0 )
    _Myostr . rdbuf ( ) -> _Unlock ( );
   }

  _Myt & _Myostr;
  };

 class sentry
  : public _Sentry_base
  {
 public :
  explicit sentry ( _Myt & _Ostr )
   : _Sentry_base ( _Ostr )
   {
   if ( _Ostr . good ( ) && _Ostr . tie ( ) != 0 )
    _Ostr . tie ( ) -> flush ( );
   _Ok = _Ostr . good ( );
   }

   ~ sentry ( )
   {


   if ( ! std :: uncaught_exception ( ) )
    this -> _Myostr . _Osfx ( );
   }






   operator bool ( ) const
   {
   return ( _Ok );
   }

 private :
   sentry ( const sentry & );
  sentry & operator = ( const sentry & );

  bool _Ok;
  };

 bool opfx ( )
  {
  if ( ios_base :: good ( ) && _Myios :: tie ( ) != 0 )
   _Myios :: tie ( ) -> flush ( );
  return ( ios_base :: good ( ) );
  }

 void osfx ( )
  {
  _Osfx ( );
  }

 void _Osfx ( )
  {
  try {
  if ( ios_base :: flags ( ) & ios_base :: unitbuf )
   flush ( );
  } catch ( ... ) {
  }
  }
























 _Myt & operator << ( _Myt & ( __cdecl * _Pfn ) ( _Myt & ) )
  {
  ;
  return ( ( * _Pfn ) ( * this ) );
  }

 _Myt & operator << ( _Myios & ( __cdecl * _Pfn ) ( _Myios & ) )
  {
  ;
  ( * _Pfn ) ( * ( _Myios * ) this );
  return ( * this );
  }

 _Myt & operator << ( ios_base & ( __cdecl * _Pfn ) ( ios_base & ) )
  {
  ;
  ( * _Pfn ) ( * ( ios_base * ) this );
  return ( * this );
  }

 _Myt & operator << ( _Bool _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( ios_base :: getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( short _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( ios_base :: getloc ( ) );
   ios_base :: fmtflags _Bfl =
    ios_base :: flags ( ) & ios_base :: basefield;
   long _Tmp = ( _Bfl == ios_base :: oct
    || _Bfl == ios_base :: hex )
    ? ( long ) ( unsigned short ) _Val : ( long ) _Val;

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Tmp ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }









 _Myt & operator << ( unsigned short _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( ios_base :: getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), ( unsigned long ) _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( int __w64 _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( ios_base :: getloc ( ) );
   ios_base :: fmtflags _Bfl =
    ios_base :: flags ( ) & ios_base :: basefield;
   long _Tmp = ( _Bfl == ios_base :: oct
    || _Bfl == ios_base :: hex )
    ? ( long ) ( unsigned int ) _Val : ( long ) _Val;

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Tmp ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( unsigned int __w64 _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( ios_base :: getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), ( unsigned long ) _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( long _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( ios_base :: getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( unsigned long __w64 _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( ios_base :: getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), ( unsigned long ) _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }


 _Myt & operator << ( __int64 _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( ios_base :: getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( unsigned __int64 _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( ios_base :: getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }


 _Myt & operator << ( float _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( ios_base :: getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), ( double ) _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( double _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( ios_base :: getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( long double _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( ios_base :: getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( const void * _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = use_facet < _Nput > ( ios_base :: getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator << ( _Mysb * _Strbuf )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  bool _Copied = false;
  const sentry _Ok ( * this );

  if ( _Ok && _Strbuf != 0 )
   for ( int_type _Meta = _Traits :: eof ( );; _Copied = true )
    {
    try {
    _Meta = _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta )
     ? _Strbuf -> sgetc ( ) : _Strbuf -> snextc ( );
    } catch ( ... ) {
     _Myios :: setstate ( ios_base :: failbit );
     throw;
    }

    if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
     break;

    try {
     if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
      _Myios :: rdbuf ( ) -> sputc (
       _Traits :: to_char_type ( _Meta ) ) ) )
      {
      _State |= ios_base :: badbit;
      break;
      }
    } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
    }

  ios_base :: width ( 0 );
  _Myios :: setstate ( _Strbuf == 0 ? ios_base :: badbit
   : ! _Copied ? _State | ios_base :: failbit : _State );
  return ( * this );
  }

 _Myt & put ( _Elem _Ch )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( ! _Ok )
   _State |= ios_base :: badbit;
  else
   {
   try {
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Myios :: rdbuf ( ) -> sputc ( _Ch ) ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & write ( const _Elem * _Str,
  streamsize _Count )
  {
  if ( 0 < _Count )
   ;
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( ! _Ok )
   _State |= ios_base :: badbit;
  else
   {
   try {
   if ( _Myios :: rdbuf ( ) -> sputn ( _Str, _Count ) != _Count )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & flush ( )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  if ( ! ios_base :: fail ( ) && _Myios :: rdbuf ( ) -> pubsync ( ) == - 1 )
   _State |= ios_base :: badbit;
  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & seekp ( pos_type _Pos )
  {
  if ( ! ios_base :: fail ( )
   && ( off_type ) _Myios :: rdbuf ( ) -> pubseekpos ( _Pos,
    ios_base :: out ) == _BADOFF )
   _Myios :: setstate ( ios_base :: failbit );
  return ( * this );
  }

 _Myt & seekp ( off_type _Off, ios_base :: seekdir _Way )
  {
  if ( ! ios_base :: fail ( )
   && ( off_type ) _Myios :: rdbuf ( ) -> pubseekoff ( _Off, _Way,
    ios_base :: out ) == _BADOFF )
   _Myios :: setstate ( ios_base :: failbit );
  return ( * this );
  }

 pos_type tellp ( )
  {
  if ( ! ios_base :: fail ( ) )
   return ( _Myios :: rdbuf ( ) -> pubseekoff ( 0,
    ios_base :: cur, ios_base :: out ) );
  else
   return ( pos_type ( _BADOFF ) );
  }
 };
#line 651 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\ostream"
template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > & __cdecl operator << (
  basic_ostream < _Elem, _Traits > & _Ostr, const char * _Val )
 {
 ios_base :: iostate _State = ios_base :: goodbit;
 streamsize _Count = ( streamsize ) :: strlen ( _Val );
 streamsize _Pad = _Ostr . width ( ) <= 0 || _Ostr . width ( ) <= _Count
  ? 0 : _Ostr . width ( ) - _Count;
 const typename basic_ostream < _Elem, _Traits > :: sentry _Ok ( _Ostr );

 if ( ! _Ok )
  _State |= ios_base :: badbit;
 else
  {
  try {
  const ctype < _Elem > & _Ctype_fac = use_facet < ctype < _Elem > > ( _Ostr . getloc ( ) );
  if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }

  for (; _State == ios_base :: goodbit && 0 < _Count; -- _Count, ++ _Val )
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Ostr . rdbuf ( ) -> sputc ( _Ctype_fac . widen ( * _Val ) ) ) )
     _State |= ios_base :: badbit;

  if ( _State == ios_base :: goodbit )
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }
  _Ostr . width ( 0 );
  } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Ostr . setstate ( _State );
 return ( _Ostr );
 }

template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > & __cdecl operator << (
  basic_ostream < _Elem, _Traits > & _Ostr, char _Ch )
 {
 ios_base :: iostate _State = ios_base :: goodbit;
 const typename basic_ostream < _Elem, _Traits > :: sentry _Ok ( _Ostr );

 if ( _Ok )
  {
  const ctype < _Elem > & _Ctype_fac = use_facet < ctype < _Elem > > ( _Ostr . getloc ( ) );
  streamsize _Pad = _Ostr . width ( ) <= 1 ? 0 : _Ostr . width ( ) - 1;

  try {
  if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
   for (; _State == ios_base :: goodbit && 0 < _Pad;
    -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     _State |= ios_base :: badbit;

  if ( _State == ios_base :: goodbit
   && _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Ostr . rdbuf ( ) -> sputc ( _Ctype_fac . widen ( _Ch ) ) ) )
   _State |= ios_base :: badbit;

  for (; _State == ios_base :: goodbit && 0 < _Pad;
   -- _Pad )
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
    _State |= ios_base :: badbit;
  } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Ostr . width ( 0 );
 _Ostr . setstate ( _State );
 return ( _Ostr );
 }

template < class _Traits > inline
 basic_ostream < char, _Traits > & __cdecl operator << (
  basic_ostream < char, _Traits > & _Ostr,
  const char * _Val )
 {
 typedef char _Elem;
 typedef basic_ostream < _Elem, _Traits > _Myos;
 ios_base :: iostate _State = ios_base :: goodbit;
 streamsize _Count = ( streamsize ) _Traits :: length ( _Val );
 streamsize _Pad = _Ostr . width ( ) <= 0 || _Ostr . width ( ) <= _Count
  ? 0 : _Ostr . width ( ) - _Count;
 const typename _Myos :: sentry _Ok ( _Ostr );

 if ( ! _Ok )
  _State |= ios_base :: badbit;
 else
  {
  try {
  if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }

  if ( _State == ios_base :: goodbit
   && _Ostr . rdbuf ( ) -> sputn ( _Val, _Count ) != _Count )
   _State |= ios_base :: badbit;

  if ( _State == ios_base :: goodbit )
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }
  _Ostr . width ( 0 );
  } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Ostr . setstate ( _State );
 return ( _Ostr );
 }

template < class _Traits > inline
 basic_ostream < char, _Traits > & __cdecl operator << (
  basic_ostream < char, _Traits > & _Ostr, char _Ch )
 {
 typedef char _Elem;
 typedef basic_ostream < _Elem, _Traits > _Myos;
 ios_base :: iostate _State = ios_base :: goodbit;
 const typename _Myos :: sentry _Ok ( _Ostr );

 if ( _Ok )
  {
  streamsize _Pad = _Ostr . width ( ) <= 1 ? 0 : _Ostr . width ( ) - 1;

  try {
  if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
   for (; _State == ios_base :: goodbit && 0 < _Pad;
    -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     _State |= ios_base :: badbit;

  if ( _State == ios_base :: goodbit
   && _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Ostr . rdbuf ( ) -> sputc ( _Ch ) ) )
   _State |= ios_base :: badbit;

  for (; _State == ios_base :: goodbit && 0 < _Pad;
   -- _Pad )
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
    _State |= ios_base :: badbit;
  } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Ostr . width ( 0 );
 _Ostr . setstate ( _State );
 return ( _Ostr );
 }

template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > & __cdecl operator << (
  basic_ostream < _Elem, _Traits > & _Ostr, const _Elem * _Val )
 {
 typedef basic_ostream < _Elem, _Traits > _Myos;
 ios_base :: iostate _State = ios_base :: goodbit;
 streamsize _Count = ( streamsize ) _Traits :: length ( _Val );
 streamsize _Pad = _Ostr . width ( ) <= 0 || _Ostr . width ( ) <= _Count
  ? 0 : _Ostr . width ( ) - _Count;
 const typename _Myos :: sentry _Ok ( _Ostr );

 if ( ! _Ok )
  _State |= ios_base :: badbit;
 else
  {
  try {
  if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }

  if ( _State == ios_base :: goodbit
   && _Ostr . rdbuf ( ) -> sputn ( _Val, _Count ) != _Count )
   _State |= ios_base :: badbit;

  if ( _State == ios_base :: goodbit )
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }
  _Ostr . width ( 0 );
  } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Ostr . setstate ( _State );
 return ( _Ostr );
 }

template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > & __cdecl operator << (
  basic_ostream < _Elem, _Traits > & _Ostr, _Elem _Ch )
 {
 typedef basic_ostream < _Elem, _Traits > _Myos;
 ios_base :: iostate _State = ios_base :: goodbit;
 const typename _Myos :: sentry _Ok ( _Ostr );

 if ( _Ok )
  {
  streamsize _Pad = _Ostr . width ( ) <= 1 ? 0 : _Ostr . width ( ) - 1;

  try {
  if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
   for (; _State == ios_base :: goodbit && 0 < _Pad;
    -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     _State |= ios_base :: badbit;

  if ( _State == ios_base :: goodbit
   && _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Ostr . rdbuf ( ) -> sputc ( _Ch ) ) )
   _State |= ios_base :: badbit;

  for (; _State == ios_base :: goodbit && 0 < _Pad;
   -- _Pad )
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
    _State |= ios_base :: badbit;
  } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Ostr . width ( 0 );
 _Ostr . setstate ( _State );
 return ( _Ostr );
 }

template < class _Traits > inline
 basic_ostream < char, _Traits > & __cdecl operator << (
  basic_ostream < char, _Traits > & _Ostr, const signed char * _Val )
 {
 return ( _Ostr << ( const char * ) _Val );
 }

template < class _Traits > inline
 basic_ostream < char, _Traits > & __cdecl operator << (
  basic_ostream < char, _Traits > & _Ostr, signed char _Ch )
 {
 return ( _Ostr << ( char ) _Ch );
 }

template < class _Traits > inline
 basic_ostream < char, _Traits > & __cdecl operator << (
  basic_ostream < char, _Traits > & _Ostr, const unsigned char * _Val )
 {
 return ( _Ostr << ( const char * ) _Val );
 }

template < class _Traits > inline
 basic_ostream < char, _Traits > & __cdecl operator << (
  basic_ostream < char, _Traits > & _Ostr, unsigned char _Ch )
 {
 return ( _Ostr << ( char ) _Ch );
 }


template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > &
  __cdecl endl ( basic_ostream < _Elem, _Traits > & _Ostr )
 {
 _Ostr . put ( _Ostr . widen ( '\n' ) );
 _Ostr . flush ( );
 return ( _Ostr );
 }

template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > &
  __cdecl ends ( basic_ostream < _Elem, _Traits > & _Ostr )
 {
 _Ostr . put ( _Elem ( ) );
 return ( _Ostr );
 }

template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > &
  __cdecl flush ( basic_ostream < _Elem, _Traits > & _Ostr )
 {
 _Ostr . flush ( );
 return ( _Ostr );
 }


inline basic_ostream< char, char_traits< char> >  &__cdecl endl(basic_ostream< char, char_traits< char> >  &_Ostr) 
{ 
_Ostr.put('\n'); 
_Ostr.flush(); 
return _Ostr; 
} 


inline basic_ostream< __wchar_t, char_traits< __wchar_t> >  &__cdecl endl(basic_ostream< __wchar_t, char_traits< __wchar_t> >  &
_Ostr) 
{ 
_Ostr.put('\n'); 
_Ostr.flush(); 
return _Ostr; 
} 



inline basic_ostream< char, char_traits< char> >  &__cdecl ends(basic_ostream< char, char_traits< char> >  &_Ostr) 
{ 
_Ostr.put('\000'); 
return _Ostr; 
} 


inline basic_ostream< __wchar_t, char_traits< __wchar_t> >  &__cdecl ends(basic_ostream< __wchar_t, char_traits< __wchar_t> >  &
_Ostr) 
{ 
_Ostr.put('\000'); 
return _Ostr; 
} 



inline basic_ostream< char, char_traits< char> >  &__cdecl flush(basic_ostream< char, char_traits< char> >  &_Ostr) 
{ 
_Ostr.flush(); 
return _Ostr; 
} 


inline basic_ostream< __wchar_t, char_traits< __wchar_t> >  &__cdecl flush(basic_ostream< __wchar_t, char_traits< __wchar_t> >  &
_Ostr) 
{ 
_Ostr.flush(); 
return _Ostr; 
} 
#line 1019 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\ostream"
}


#pragma warning(default: 4390)
#pragma warning(pop)
#line 10 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\istream"
#pragma warning(push,3)
#line 1024 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\ostream"
#pragma pack ( pop )
#line 9 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\istream"
#pragma pack ( push, 8 )
#line 13 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\istream"
namespace std { 


template < class _Elem,
 class _Traits >
 class basic_istream
  : virtual public basic_ios < _Elem, _Traits >
 {
public :
 typedef basic_istream < _Elem, _Traits > _Myt;
 typedef basic_ios < _Elem, _Traits > _Myios;
 typedef basic_streambuf < _Elem, _Traits > _Mysb;
 typedef istreambuf_iterator < _Elem, _Traits > _Iter;
 typedef ctype < _Elem > _Ctype;
 typedef num_get < _Elem, _Iter > _Nget;


 explicit basic_istream ( _Mysb * _Strbuf, bool _Isstd = false )
  : _Chcount ( 0 )
  {
  _Myios :: init ( _Strbuf, _Isstd );
  }

  basic_istream ( _Uninitialized )
  {
  ios_base :: _Addstd ( this );
  }

 virtual ~ basic_istream ( )
  {
  }

 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;


 class _Sentry_base
  {
 public :
   _Sentry_base ( _Myt & _Istr )
   : _Myistr ( _Istr )
   {
   if ( _Myistr . rdbuf ( ) != 0 )
    _Myistr . rdbuf ( ) -> _Lock ( );
   }

   ~ _Sentry_base ( )
   {
   if ( _Myistr . rdbuf ( ) != 0 )
    _Myistr . rdbuf ( ) -> _Unlock ( );
   }

  _Myt & _Myistr;
  };

 class sentry
  : public _Sentry_base
  {
 public :
  explicit sentry ( _Myt & _Istr, bool _Noskip = false )
   : _Sentry_base ( _Istr )
   {
   _Ok = this -> _Myistr . _Ipfx ( _Noskip );
   }

   operator bool ( ) const
   {
   return ( _Ok );
   }

 private :
   sentry ( const sentry & );
  sentry & operator = ( const sentry & );

  bool _Ok;
  };

 bool _Ipfx ( bool _Noskip = false )
  {
  if ( ios_base :: good ( ) )
   {
   if ( _Myios :: tie ( ) != 0 )
    _Myios :: tie ( ) -> flush ( );

   if ( ! _Noskip && ios_base :: flags ( ) & ios_base :: skipws )
    {
    const _Ctype & _Ctype_fac = use_facet < _Ctype > ( ios_base :: getloc ( ) );

    try {
    int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

    for (;; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) )
     if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
      {
      _Myios :: setstate ( ios_base :: eofbit );
      break;
      }
     else if ( ! _Ctype_fac . is ( _Ctype :: space,
      _Traits :: to_char_type ( _Meta ) ) )
      break;
    } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
    }

   if ( ios_base :: good ( ) )
    return ( true );
   }
  _Myios :: setstate ( ios_base :: failbit );
  return ( false );
  }

 bool ipfx ( bool _Noskip = false )
  {
  return _Ipfx ( _Noskip );
  }

 void isfx ( )
  {
  }























 _Myt & operator >> ( _Myt & ( __cdecl * _Pfn ) ( _Myt & ) )
  {
  ;
  return ( ( * _Pfn ) ( * this ) );
  }

 _Myt & operator >> ( _Myios & ( __cdecl * _Pfn ) ( _Myios & ) )
  {
  ;
  ( * _Pfn ) ( * ( _Myios * ) this );
  return ( * this );
  }

 _Myt & operator >> ( ios_base & ( __cdecl * _Pfn ) ( ios_base & ) )
  {
  ;
  ( * _Pfn ) ( * ( ios_base * ) this );
  return ( * this );
  }

 _Myt & operator >> ( _Bool & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( ios_base :: getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( short & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   long _Tmp = 0;
   const _Nget & _Nget_fac = use_facet < _Nget > ( ios_base :: getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Tmp );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }

   if ( _State & ios_base :: failbit
    || _Tmp < ( - 32768 ) || 32767 < _Tmp )
    _State |= ios_base :: failbit;
   else
    _Val = ( short ) _Tmp;
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }









 _Myt & operator >> ( unsigned short & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( ios_base :: getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( int & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   long _Tmp = 0;
   const _Nget & _Nget_fac = use_facet < _Nget > ( ios_base :: getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Tmp );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }

   if ( _State & ios_base :: failbit
    || _Tmp < ( - 2147483647 - 1 ) || 2147483647 < _Tmp )
    _State |= ios_base :: failbit;
   else
    _Val = _Tmp;
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( unsigned int & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );
  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( ios_base :: getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( long & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( ios_base :: getloc ( ) );
   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( unsigned long __w64 & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( ios_base :: getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }


 _Myt & operator >> ( __int64 & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( ios_base :: getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( unsigned __int64 & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );
  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( ios_base :: getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }


 _Myt & operator >> ( float & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( ios_base :: getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( double & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );
  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( ios_base :: getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( long double & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( ios_base :: getloc ( ) );
   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( void * & _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nget & _Nget_fac = use_facet < _Nget > ( ios_base :: getloc ( ) );

   try {
   _Nget_fac . get ( _Iter ( _Myios :: rdbuf ( ) ), _Iter ( 0 ),
    * this, _State, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & operator >> ( _Mysb * _Strbuf )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  bool _Copied = false;
  const sentry _Ok ( * this );

  if ( _Ok && _Strbuf != 0 )
   {
   try {
   int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

   for (;; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
     {
     _State |= ios_base :: eofbit;
     break;
     }
    else
     {
     try {
      if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
       _Strbuf -> sputc ( _Traits :: to_char_type ( _Meta ) ) ) )
       break;
     } catch ( ... ) {
      break;
     }
     _Copied = true;
     }
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( ! _Copied ? _State | ios_base :: failbit : _State );
  return ( * this );
  }

 int_type get ( )
  {
  int_type _Meta = 0;
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );

  if ( ! _Ok )
   _Meta = _Traits :: eof ( );
  else
   {
   try {
   _Meta = _Myios :: rdbuf ( ) -> sbumpc ( );

   if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
    _State |= ios_base :: eofbit | ios_base :: failbit;
   else
    ++ _Chcount;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( _Meta );
  }

 _Myt & get ( _Elem * _Str, streamsize _Count )
  {
  return ( get ( _Str, _Count, _Myios :: widen ( '\n' ) ) );
  }

 _Myt & get ( _Elem * _Str,
  streamsize _Count, _Elem _Delim )
  {
  ;
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );

  if ( _Ok && 0 < _Count )
   {
   try {
   int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

   for (; 0 < -- _Count; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
     {
     _State |= ios_base :: eofbit;
     break;
     }
    else if ( _Traits :: to_char_type ( _Meta ) == _Delim )
     break;
    else
     {
     * _Str ++ = _Traits :: to_char_type ( _Meta );
     ++ _Chcount;
     }
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _Chcount == 0
   ? _State | ios_base :: failbit : _State );
  * _Str = _Elem ( );
  return ( * this );
  }

 _Myt & get ( _Elem & _Ch )
  {
  int_type _Meta = get ( );
  if ( ! _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
   _Ch = _Traits :: to_char_type ( _Meta );
  return ( * this );
  }

 _Myt & get ( _Mysb & _Strbuf )
  {
  return ( get ( _Strbuf, _Myios :: widen ( '\n' ) ) );
  }

 _Myt & get ( _Mysb & _Strbuf, _Elem _Delim )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );

  if ( _Ok )
   {
   try {
   int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

   for (;; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
     {
     _State |= ios_base :: eofbit;
     break;
     }
    else
     {
     try {
      _Elem _Ch = _Traits :: to_char_type ( _Meta );
      if ( _Ch == _Delim
       || _Traits :: eq_int_type ( _Traits :: eof ( ),
        _Strbuf . sputc ( _Ch ) ) )
       break;
     } catch ( ... ) {
      break;
     }
     ++ _Chcount;
     }
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  if ( _Chcount == 0 )
   _State |= ios_base :: failbit;
  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & getline ( _Elem * _Str, streamsize _Count )
  {
  return ( getline ( _Str, _Count, _Myios :: widen ( '\n' ) ) );
  }

 _Myt & getline ( _Elem * _Str,
  streamsize _Count, _Elem _Delim )
  {
  ;
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );

  if ( _Ok && 0 < _Count )
   {
   int_type _Metadelim = _Traits :: to_int_type ( _Delim );

   try {
   int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

   for (;; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
     {
     _State |= ios_base :: eofbit;
     break;
     }
    else if ( _Meta == _Metadelim )
     {
     ++ _Chcount;
     _Myios :: rdbuf ( ) -> sbumpc ( );
     break;
     }
    else if ( -- _Count <= 0 )
     {
     _State |= ios_base :: failbit;
     break;
     }
    else
     {
     ++ _Chcount;
     * _Str ++ = _Traits :: to_char_type ( _Meta );
     }
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  * _Str = _Elem ( );
  _Myios :: setstate ( _Chcount == 0 ? _State | ios_base :: failbit : _State );
  return ( * this );
  }

 _Myt & ignore ( streamsize _Count = 1,
  int_type _Metadelim = _Traits :: eof ( ) )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );

  if ( _Ok && 0 < _Count )
   {
   try {
   for (;; )
    {
    int_type _Meta;
    if ( _Count != 2147483647 && -- _Count < 0 )
     break;
    else if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Meta = _Myios :: rdbuf ( ) -> sbumpc ( ) ) )
     {
     _State |= ios_base :: eofbit;
     break;
     }
    else
     {
     ++ _Chcount;
     if ( _Meta == _Metadelim )
      break;
     }
    }
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & _Read_s ( _Elem * _Str, size_t _Str_size, streamsize _Count )
  {
  ;
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );

  if ( _Ok )
   {
   try {
   const streamsize _Num = _Myios :: rdbuf ( ) -> _Sgetn_s ( _Str, _Str_size, _Count );
   _Chcount += _Num;
   if ( _Num != _Count )
    _State |= ios_base :: eofbit | ios_base :: failbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & read ( _Elem * _Str, streamsize _Count )
  {
  return _Read_s ( _Str, ( size_t ) - 1, _Count );
  }

 streamsize _Readsome_s ( _Elem * _Str, size_t _Str_size, streamsize _Count )
  {
  ;
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );
  streamsize _Num;

  if ( ! _Ok )
   _State |= ios_base :: failbit;
  else if ( ( _Num = _Myios :: rdbuf ( ) -> in_avail ( ) ) < 0 )
   _State |= ios_base :: eofbit;
  else if ( 0 < _Num )
   _Read_s ( _Str, _Str_size, _Num < _Count ? _Num : _Count );

  _Myios :: setstate ( _State );
  return ( gcount ( ) );
  }

 __declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
 streamsize readsome ( _Elem * _Str, streamsize _Count )
  {
  return _Readsome_s ( _Str, ( size_t ) - 1, _Count );
  }

 int_type peek ( )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  int_type _Meta = 0;
  const sentry _Ok ( * this, true );

  if ( ! _Ok )
   _Meta = _Traits :: eof ( );
  else
   {
   try {
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Meta = _Myios :: rdbuf ( ) -> sgetc ( ) ) )
    _State |= ios_base :: eofbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( _Meta );
  }

 _Myt & putback ( _Elem _Ch )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );

  if ( _Ok )
   {
   try {
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Myios :: rdbuf ( ) -> sputbackc ( _Ch ) ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 _Myt & unget ( )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );

  if ( _Ok )
   {
   try {
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Myios :: rdbuf ( ) -> sungetc ( ) ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 streamsize gcount ( ) const
  {
  return ( _Chcount );
  }

 int sync ( )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  int _Ans;

  if ( _Myios :: rdbuf ( ) == 0 )
   _Ans = - 1;
  else if ( _Myios :: rdbuf ( ) -> pubsync ( ) == - 1 )
   {
   _State |= ios_base :: badbit;
   _Ans = - 1;
   }
  else
   _Ans = 0;

  _Myios :: setstate ( _State );
  return ( _Ans );
  }

 _Myt & seekg ( pos_type _Pos )
  {
  if ( ! ios_base :: fail ( )
   && ( off_type ) _Myios :: rdbuf ( ) -> pubseekpos ( _Pos,
    ios_base :: in ) == _BADOFF )
   _Myios :: setstate ( ios_base :: failbit );
  else
   _Myios :: clear ( );
  return ( * this );
  }

 _Myt & seekg ( off_type _Off, ios_base :: seekdir _Way )
  {
  if ( ! ios_base :: fail ( )
   && ( off_type ) _Myios :: rdbuf ( ) -> pubseekoff ( _Off, _Way,
    ios_base :: in ) == _BADOFF )
   _Myios :: setstate ( ios_base :: failbit );
  else
   _Myios :: clear ( );
  return ( * this );
  }

 pos_type tellg ( )
  {
  if ( ! ios_base :: fail ( ) )
   return ( _Myios :: rdbuf ( ) -> pubseekoff ( 0,
    ios_base :: cur, ios_base :: in ) );
  else
   return ( pos_type ( _BADOFF ) );
  }

private :
 streamsize _Chcount;
 };
#line 898 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\istream"
template < class _Elem,
 class _Traits >
 class basic_iostream
 : public basic_istream < _Elem, _Traits >,
  public basic_ostream < _Elem, _Traits >
 {
public :
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;

 explicit basic_iostream ( basic_streambuf < _Elem, _Traits > * _Strbuf )
  : basic_istream < _Elem, _Traits > ( _Strbuf, false ),
   basic_ostream < _Elem, _Traits > ( _Noinit, false )
  {
  }

 virtual ~ basic_iostream ( )
  {
  }
 };
#line 932 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\istream"
template < class _Elem,
 class _Traits > inline
 basic_istream < _Elem, _Traits > & __cdecl operator >> (
  basic_istream < _Elem, _Traits > & _Istr, _Elem * _Str )
 {
 ;
 typedef basic_istream < _Elem, _Traits > _Myis;
 typedef ctype < _Elem > _Ctype;
 ios_base :: iostate _State = ios_base :: goodbit;
 _Elem * _Str0 = _Str;
 const typename _Myis :: sentry _Ok ( _Istr );

 if ( _Ok )
  {
  const _Ctype & _Ctype_fac = use_facet < _Ctype > ( _Istr . getloc ( ) );

  try {
  streamsize _Count = 0 < _Istr . width ( ) ? _Istr . width ( ) : 2147483647;
  typename _Myis :: int_type _Meta = _Istr . rdbuf ( ) -> sgetc ( );
  _Elem _Ch;
  for (; 0 < -- _Count; _Meta = _Istr . rdbuf ( ) -> snextc ( ) )
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
    {
    _State |= ios_base :: eofbit;
    break;
    }
   else if ( _Ctype_fac . is ( _Ctype :: space,
    _Ch = _Traits :: to_char_type ( _Meta ) )
     || _Ch == _Elem ( ) )
    break;
   else
    * _Str ++ = _Traits :: to_char_type ( _Meta );
  } catch ( ... ) { ( _Istr ) . setstate ( ios_base :: badbit, true ); }
  }

 * _Str = _Elem ( );
 _Istr . width ( 0 );
 _Istr . setstate ( _Str == _Str0 ? _State | ios_base :: failbit : _State );
 return ( _Istr );
 }

template < class _Elem,
 class _Traits > inline
 basic_istream < _Elem, _Traits > & __cdecl operator >> (
  basic_istream < _Elem, _Traits > & _Istr, _Elem & _Ch )
 {
 typedef basic_istream < _Elem, _Traits > _Myis;
 typename _Myis :: int_type _Meta;
 ios_base :: iostate _State = ios_base :: goodbit;
 const typename _Myis :: sentry _Ok ( _Istr );

 if ( _Ok )
  {
  try {
  _Meta = _Istr . rdbuf ( ) -> sbumpc ( );
  if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
   _State |= ios_base :: eofbit | ios_base :: failbit;
  else
   _Ch = _Traits :: to_char_type ( _Meta );
  } catch ( ... ) { ( _Istr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Istr . setstate ( _State );
 return ( _Istr );
 }


template < class _Traits > inline
 basic_istream < char, _Traits > & __cdecl operator >> (
  basic_istream < char, _Traits > & _Istr, signed char * _Str )
 {
 return ( _Istr >> ( char * ) _Str );
 }

template < class _Traits > inline
 basic_istream < char, _Traits > & __cdecl operator >> (
  basic_istream < char, _Traits > & _Istr, signed char & _Ch )
 {
 return ( _Istr >> ( char & ) _Ch );
 }

template < class _Traits > inline
 basic_istream < char, _Traits > & __cdecl operator >> (
  basic_istream < char, _Traits > & _Istr, unsigned char * _Str )
 {
 return ( _Istr >> ( char * ) _Str );
 }

template < class _Traits > inline
 basic_istream < char, _Traits > & __cdecl operator >> (
  basic_istream < char, _Traits > & _Istr, unsigned char & _Ch )
 {
 return ( _Istr >> ( char & ) _Ch );
 }
#line 1030 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\istream"
template < class _Elem,
 class _Traits > inline
 basic_istream < _Elem, _Traits > &
  __cdecl ws ( basic_istream < _Elem, _Traits > & _Istr )
 {
 typedef basic_istream < _Elem, _Traits > _Myis;
 typedef ctype < _Elem > _Ctype;

 if ( ! _Istr . eof ( ) )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const typename _Myis :: sentry _Ok ( _Istr, true );

  if ( _Ok )
   {
   const _Ctype & _Ctype_fac = use_facet < _Ctype > ( _Istr . getloc ( ) );

   try {
   for ( typename _Traits :: int_type _Meta = _Istr . rdbuf ( ) -> sgetc ( );;
    _Meta = _Istr . rdbuf ( ) -> snextc ( ) )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
     {
     _State |= ios_base :: eofbit;
     break;
     }
    else if ( ! _Ctype_fac . is ( _Ctype :: space,
     _Traits :: to_char_type ( _Meta ) ) )
     break;
   } catch ( ... ) { ( _Istr ) . setstate ( ios_base :: badbit, true ); }
   }

  _Istr . setstate ( _State );
  }
 return ( _Istr );
 }


inline basic_istream< char, char_traits< char> >  &__cdecl ws(basic_istream< char, char_traits< char> >  &_Istr) 
{ 
typedef char _Elem; 
typedef char_traits< char>  _Traits; 

if (!_Istr.eof()) 
{ 
auto ios_base::iostate _State = ((_Iosb< int> ::_Iostate)0); 
auto const basic_istream< char, char_traits< char> > ::sentry _Ok(_Istr, true); 

if (_Ok) 
{ 
auto const ctype< char>  &_Ctype_fac = use_facet< ctype< char> > (_Istr.getloc()); 


try { 
for (char_traits< char> ::int_type _Meta = (*_Istr.rdbuf()).sgetc(); ; _Meta = (*_Istr.rdbuf()).snextc()) { 

if (_Traits::eq_int_type(_Traits::eof(), _Meta)) 
{ 
_State |= ((_Iosb< int> ::_Iostate)1); 
break; 
} else { 
if (!_Ctype_fac.is(ctype< char> ::space, _Traits::to_char_type(_Meta))) { 

break; }  }  }  
} catch (...) { _Istr.setstate((_Iosb< int> ::_Iostate)4, true); }  
}  

_Istr.setstate(_State); 
}  
return _Istr; 
} 


inline basic_istream< __wchar_t, char_traits< __wchar_t> >  &__cdecl ws(basic_istream< __wchar_t, char_traits< __wchar_t> >  &_Istr) 
{ 
typedef __wchar_t _Elem; 
typedef char_traits< __wchar_t>  _Traits; 

if (!_Istr.eof()) 
{ 
auto ios_base::iostate _State = ((_Iosb< int> ::_Iostate)0); 
auto const basic_istream< __wchar_t, char_traits< __wchar_t> > ::sentry _Ok(_Istr, true); 

if (_Ok) 
{ 
auto const ctype< __wchar_t>  &_Ctype_fac = use_facet< ctype< __wchar_t> > (_Istr.getloc()); 


try { 
for (char_traits< __wchar_t> ::int_type _Meta = (*_Istr.rdbuf()).sgetc(); ; _Meta = (*_Istr.rdbuf()).snextc()) { 

if (_Traits::eq_int_type(_Traits::eof(), _Meta)) 
{ 
_State |= ((_Iosb< int> ::_Iostate)1); 
break; 
} else { 
if (!_Ctype_fac.is(ctype< __wchar_t> ::space, _Traits::to_char_type(_Meta))) { 

break; }  }  }  
} catch (...) { _Istr.setstate((_Iosb< int> ::_Iostate)4, true); }  
}  

_Istr.setstate(_State); 
}  
return _Istr; 
} 
#line 1159 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\istream"
}


#pragma warning(pop)
#line 10 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\iostream"
#pragma warning(push,3)
#line 1163 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\istream"
#pragma pack ( pop )
#line 9 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\iostream"
#pragma pack ( push, 8 )
#line 12 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\iostream"
namespace std { 



extern istream *_Ptr_cin; 
extern ostream *_Ptr_cout; 
extern ostream *_Ptr_cerr; 
extern ostream *_Ptr_clog; 
#line 24 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\iostream"
class _Winit { 

public: __thiscall _Winit(); 
__thiscall ~_Winit(); 

private: static int _Init_cnt; 
}; 
#line 35 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\iostream"
extern wistream *_Ptr_wcin; 
extern wostream *_Ptr_wcout; 
extern wostream *_Ptr_wcerr; 
extern wostream *_Ptr_wclog; 
#line 52 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\iostream"
extern istream cin; 
extern ostream cout; 
extern ostream cerr; 
extern ostream clog; 

extern wistream wcin; 
extern wostream wcout; 
extern wostream wcerr; 
extern wostream wclog; 
#line 62 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\iostream"
}

#pragma warning(pop)
#line 10 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\iterator"
#pragma warning(push,3)
#line 65 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\iostream"
#pragma pack ( pop )
#line 9 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\iterator"
#pragma pack ( push, 8 )
#line 13 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\iterator"
namespace std { 


template < class _Container >
 class back_insert_iterator
  : public _Outit
 {
public :
 typedef _Container container_type;
 typedef typename _Container :: reference reference;

 typedef _Range_checked_iterator_tag _Checked_iterator_category;

 explicit back_insert_iterator ( _Container & _Cont )
  : container ( & _Cont )
  {
  }

 back_insert_iterator < _Container > & operator = (
  typename _Container :: const_reference _Val )
  {
  container -> push_back ( _Val );
  return ( * this );
  }

 back_insert_iterator < _Container > & operator * ( )
  {
  return ( * this );
  }

 back_insert_iterator < _Container > & operator ++ ( )
  {
  return ( * this );
  }

 back_insert_iterator < _Container > operator ++ ( int )
  {
  return ( * this );
  }

protected :
 _Container * container;
 };


template < class _Container > inline
 back_insert_iterator < _Container > back_inserter ( _Container & _Cont )
 {
 return ( std :: back_insert_iterator < _Container > ( _Cont ) );
 }


template < class _Container >
 class front_insert_iterator
  : public _Outit
 {
public :
 typedef _Container container_type;
 typedef typename _Container :: reference reference;

 typedef _Range_checked_iterator_tag _Checked_iterator_category;

 explicit front_insert_iterator ( _Container & _Cont )
  : container ( & _Cont )
  {
  }

 front_insert_iterator < _Container > & operator = (
  typename _Container :: const_reference _Val )
  {
  container -> push_front ( _Val );
  return ( * this );
  }

 front_insert_iterator < _Container > & operator * ( )
  {
  return ( * this );
  }

 front_insert_iterator < _Container > & operator ++ ( )
  {
  return ( * this );
  }

 front_insert_iterator < _Container > operator ++ ( int )
  {
  return ( * this );
  }

protected :
 _Container * container;
 };


template < class _Container > inline
 front_insert_iterator < _Container > front_inserter ( _Container & _Cont )
 {
 return ( std :: front_insert_iterator < _Container > ( _Cont ) );
 }


template < class _Container >
 class insert_iterator
  : public _Outit
 {
public :
 typedef _Container container_type;
 typedef typename _Container :: reference reference;

 typedef _Range_checked_iterator_tag _Checked_iterator_category;

 insert_iterator ( _Container & _Cont, typename _Container :: iterator _Where )
  : container ( & _Cont ), iter ( _Where )
  {
  }

 insert_iterator < _Container > & operator = (
  typename _Container :: const_reference _Val )
  {
  iter = container -> insert ( iter, _Val );
  ++ iter;
  return ( * this );
  }

 insert_iterator < _Container > & operator * ( )
  {
  return ( * this );
  }

 insert_iterator < _Container > & operator ++ ( )
  {
  return ( * this );
  }

 insert_iterator < _Container > & operator ++ ( int )
  {
  return ( * this );
  }

protected :
 _Container * container;
 typename _Container :: iterator iter;
 };


template < class _Container,
 class _Iter > inline
 insert_iterator < _Container > inserter ( _Container & _Cont, _Iter _Where )
 {
 return ( std :: insert_iterator < _Container > ( _Cont, _Where ) );
 }


template < class _Ty,
 class _Elem = char,
 class _Traits = char_traits < _Elem >,
 class _Diff = ptrdiff_t >
 class istream_iterator
  : public iterator < input_iterator_tag, _Ty, _Diff,
   const _Ty *, const _Ty & >
 {
 typedef istream_iterator < _Ty, _Elem, _Traits, _Diff > _Myt;
public :
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef basic_istream < _Elem, _Traits > istream_type;


 typedef _Range_checked_iterator_tag _Checked_iterator_category;


 istream_iterator ( )
  : _Myistr ( 0 )
  {
  }

 istream_iterator ( istream_type & _Istr )
  : _Myistr ( & _Istr )
  {
  _Getval ( );
  }

 const _Ty & operator * ( ) const
  {








  { if ( ! ( _Myistr != 0 ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };


  return ( _Myval );
  }

 const _Ty * operator -> ( ) const
  {
  return ( & * * this );
  }

 _Myt & operator ++ ( )
  {








  { if ( ! ( _Myistr != 0 ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };


  _Getval ( );
  return ( * this );
  }

 _Myt operator ++ ( int )
  {
  _Myt _Tmp = * this;
  ++ * this;
  return ( _Tmp );
  }

 bool _Equal ( const _Myt & _Right ) const
  {
  return ( _Myistr == _Right . _Myistr );
  }

protected :
 void _Getval ( )
  {
  if ( _Myistr != 0 && ! ( * _Myistr >> _Myval ) )
   _Myistr = 0;
  }

 static void _Xran ( )
  {
  throw out_of_range ( "invalid istream_iterator" );
  }

 istream_type * _Myistr;
 _Ty _Myval;
 };
#line 262 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\iterator"
template < class _Ty,
 class _Elem,
 class _Traits,
 class _Diff > inline
 bool operator == (
  const istream_iterator < _Ty, _Elem, _Traits, _Diff > & _Left,
  const istream_iterator < _Ty, _Elem, _Traits, _Diff > & _Right )
 {
 return ( _Left . _Equal ( _Right ) );
 }

template < class _Ty,
 class _Elem,
 class _Traits,
 class _Diff > inline
 bool operator != (
  const istream_iterator < _Ty, _Elem, _Traits, _Diff > & _Left,
  const istream_iterator < _Ty, _Elem, _Traits, _Diff > & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }


template < class _Ty,
 class _Elem = char,
 class _Traits = char_traits < _Elem > >
 class ostream_iterator
  : public _Outit
 {
public :
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef basic_ostream < _Elem, _Traits > ostream_type;


 typedef _Range_checked_iterator_tag _Checked_iterator_category;


 ostream_iterator ( ostream_type & _Ostr,
  const _Elem * _Delim = 0 )
  : _Myostr ( & _Ostr ), _Mydelim ( _Delim )
  {
  }

 ostream_iterator < _Ty, _Elem, _Traits > & operator = ( const _Ty & _Val )
  {
  * _Myostr << _Val;
  if ( _Mydelim != 0 )
   * _Myostr << _Mydelim;








  { if ( ! ( * _Myostr != 0 ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };


  return ( * this );
  }

 ostream_iterator < _Ty, _Elem, _Traits > & operator * ( )
  {
  return ( * this );
  }

 ostream_iterator < _Ty, _Elem, _Traits > & operator ++ ( )
  {
  return ( * this );
  }

 ostream_iterator < _Ty, _Elem, _Traits > operator ++ ( int )
  {
  return ( * this );
  }

protected :
 static void _Xran ( )
  {
  throw out_of_range ( "invalid ostream_iterator" );
  }

 const _Elem * _Mydelim;
 ostream_type * _Myostr;
 };
#line 350 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\iterator"
}

namespace stdext { 


template < class _Cont, class _Iter = typename _Cont :: iterator >
 class checked_iterator
  : public :: std :: iterator <
   typename :: std :: iterator_traits < _Iter > :: iterator_category,
   typename :: std :: iterator_traits < _Iter > :: value_type,
   typename :: std :: iterator_traits < _Iter > :: difference_type,
   typename :: std :: iterator_traits < _Iter > :: pointer,
   typename :: std :: iterator_traits < _Iter > :: reference >
 {
 friend class checked_iterator;
public :
 typedef checked_iterator < _Cont, _Iter > _Myt;
 typedef typename :: std :: iterator_traits < _Iter > :: difference_type difference_type;
 typedef typename :: std :: iterator_traits < _Iter > :: pointer pointer;
 typedef typename :: std :: iterator_traits < _Iter > :: reference reference;

 typedef :: std :: _Range_checked_iterator_tag _Checked_iterator_category;
 typedef _Iter _Inner_type;

 typedef _Iter _Checked_iterator_base_type;

 _Checked_iterator_base_type _Checked_iterator_base ( ) const
 {
  return _Current;
 }

 void _Checked_iterator_assign_from_base ( _Checked_iterator_base_type _Base )
 {
  _Current = _Base;
 }



 checked_iterator ( )
  : _Mycont ( 0 )
 {
 }

 checked_iterator ( _Cont & _C, _Iter _Ptr )
  : _Mycont ( & _C ), _Current ( _Ptr )
 {
 }

 checked_iterator ( const _Myt & _Right )
  : _Mycont ( _Right . _Mycont ), _Current ( _Right . _Current )
 {
 }

 template < class Iter2 >
 checked_iterator ( const checked_iterator < _Cont, Iter2 > & _Right )
  : _Mycont ( _Right . _Mycont ), _Current ( _Right . _Current )
 {
 }

 _Iter base ( ) const
 {
  { if ( ! ( _Mycont != 0 ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  return _Current;
 }

 template < class Iter2 >
 bool operator == ( const checked_iterator < _Cont, Iter2 > & _Right ) const
 {
  { if ( ! ( _Mycont == _Right . _Mycont ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  return _Current == _Right . _Current;
 }

 template < class Iter2 >
 bool operator != ( const checked_iterator < _Cont, Iter2 > & _Right ) const
 {
  { if ( ! ( _Mycont != 0 ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  return ! ( * this == _Right );
 }

 template < class Iter2 >
 bool operator < ( const checked_iterator < _Cont, Iter2 > & _Right ) const
 {
  { if ( ! ( _Mycont != 0 && _Mycont == _Right . _Mycont ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  return _Current < _Right . _Current;
 }

 template < class Iter2 >
 bool operator > ( const checked_iterator < _Cont, Iter2 > & _Right ) const
 {
  return _Right < * this;
 }

 template < class Iter2 >
 bool operator <= ( const checked_iterator < _Cont, Iter2 > & _Right ) const
 {
  return ! ( _Right < * this );
 }

 template < class Iter2 >
 bool operator >= ( const checked_iterator < _Cont, Iter2 > & _Right ) const
 {
  return ! ( * this < _Right );
 }

 reference operator * ( ) const
 {
  { if ( ! ( _Mycont != 0 ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  { if ( ! ( _Current != _Mycont -> end ( ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  return * _Current;
 }

 pointer operator -> ( ) const
 {
  return ( & * * this );
 }

 _Myt & operator ++ ( )
 {
  { if ( ! ( _Mycont != 0 ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  { if ( ! ( _Current != _Mycont -> end ( ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  ++ _Current;
  return * this;
 }

 _Myt operator ++ ( int )
 {
  _Myt _Tmp = * this;
  ++ * this;
  return _Tmp;
 }

 _Myt & operator -- ( )
 {
  { if ( ! ( _Mycont != 0 ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  { if ( ! ( _Current != _Mycont -> begin ( ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  -- _Current;
  return * this;
 }

 _Myt operator -- ( int )
 {
  _Myt _Tmp = * this;
  -- * this;
  return _Tmp;
 }



 _Myt & operator += ( difference_type _Off )
 {
  { if ( ! ( _Mycont != 0 ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  { if ( ! ( ( _Mycont -> end ( ) - _Current ) >= _Off && ( _Mycont -> begin ( ) - _Current ) <= _Off ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  _Current += _Off;
  return * this;
 }

 _Myt operator + ( difference_type _Off ) const
 {
  _Myt _Tmp = * this;
  return ( _Tmp += _Off );
 }

 _Myt & operator -= ( difference_type _Off )
 {
  return ( * this += - _Off );
 }

 _Myt operator - ( difference_type _Off ) const
 {
  _Myt _Tmp = * this;
  return ( _Tmp -= _Off );
 }

 difference_type operator - ( const _Myt & _Right ) const
 {
  { if ( ! ( _Mycont != 0 && _Mycont == _Right . _Mycont ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  return _Current - _Right . _Current;
 }

 reference operator [ ] ( difference_type _Off ) const
 {
  { if ( ! ( _Mycont != 0 ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  { if ( ! ( ( _Mycont -> end ( ) - _Current ) > _Off && ( _Mycont -> begin ( ) - _Current ) <= _Off ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  return _Current [ _Off ];
 }

protected :
 void _Xran ( ) const
 {
  throw :: std :: out_of_range ( "invalid checked_iterator<T> subscript" );
 }

 void _Xinvarg ( ) const
 {
  throw :: std :: invalid_argument ( "invalid checked_iterator<T> argument" );
 }

 _Cont * _Mycont;
 _Iter _Current;
 };

}


#pragma warning(pop)
#line 11 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\memory"
#pragma warning(push,3)
#line 555 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\iterator"
#pragma pack ( pop )
#line 10 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\memory"
#pragma pack ( push, 8 )
#line 13 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\memory"
namespace std { 


template < class _Ty > inline
 pair < _Ty *, ptrdiff_t >
  get_temporary_buffer ( ptrdiff_t _Count )
 {
 _Ty * _Pbuf;

 if ( _Count <= 0 )
  _Count = 0;
 else if ( ( ( size_t ) ( - 1 ) / _Count ) < sizeof ( _Ty ) )
  throw std :: bad_alloc ( 0 );

 for ( _Pbuf = 0; 0 < _Count; _Count /= 2 )
  if ( ( _Pbuf = ( _Ty * ) operator new (
   ( size_t ) _Count * sizeof ( _Ty ), nothrow ) ) != 0 )
   break;

 return ( pair < _Ty *, ptrdiff_t > ( _Pbuf, _Count ) );
 }


template < class _Ty > inline
 void return_temporary_buffer ( _Ty * _Pbuf )
 {
 operator delete ( _Pbuf );
 }


template < class _InIt,
 class _FwdIt > inline
 _FwdIt _Uninit_copy ( _InIt _First, _InIt _Last, _FwdIt _Dest,
  _Nonscalar_ptr_iterator_tag, _Range_checked_iterator_tag )
 {
 ;
 ;
 _FwdIt _Next = _Dest;

 try {
 for (; _First != _Last; ++ _Dest, ++ _First )
  _Construct ( & * _Dest, * _First );
 } catch ( ... ) {
 for (; _Next != _Dest; ++ _Next )
  _Destroy ( & * _Next );
 throw;
 }
 return ( _Dest );
 }

template < class _Ty1,
 class _Ty2 > inline
 _Ty2 _Uninit_copy ( _Ty1 _First, _Ty1 _Last, _Ty2 _Dest,
  _Scalar_ptr_iterator_tag, _Range_checked_iterator_tag )
 {
 ;
 ;
 size_t _Count = ( size_t ) ( _Last - _First );
 _Ty2 _Result = _Dest + _Count;
 if ( _Count > 0 )
  :: memmove_s ( ( & * _Dest ), ( _Count * sizeof ( * _First ) ), ( & * _First ), ( _Count * sizeof ( * _First ) ) );

 return ( _Result );
 }
#line 81 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\memory"
template < class _InIt,
 class _FwdIt > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _FwdIt > :: _Result, _FwdIt > :: _Result uninitialized_copy ( _InIt _First, _InIt _Last, _FwdIt _Dest )
 {
 return ( _Uninit_copy ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest,
  _Ptr_cat ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) ) );
 }

template < class _InIt, class _FwdElem, size_t _Size >
inline
_FwdElem * uninitialized_copy ( _InIt _First, _InIt _Last, _FwdElem ( & _Dest ) [ _Size ] )
 {
 return ( uninitialized_copy ( _First, _Last,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ) ) . base ( ) );
 }

template < class _InIt,
 class _FwdIt > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _FwdIt > :: _Result, _FwdIt > :: _Result uninitialized_copy ( _InIt _First, _InIt _Last, _FwdIt _Dest )
 {
 return ( _Uninit_copy ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest,
  _Ptr_cat ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) ) );
 }
#line 119 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\memory"
template < class _InIt,
 class _FwdIt,
 class _Alloc > inline
 _FwdIt _Uninit_copy ( _InIt _First, _InIt _Last, _FwdIt _Dest,
  _Alloc & _Al, _Nonscalar_ptr_iterator_tag, _Range_checked_iterator_tag )
 {
 ;
 ;
 _FwdIt _Next = _Dest;

 try {
 for (; _First != _Last; ++ _Dest, ++ _First )
  _Al . construct ( _Dest, * _First );
 } catch ( ... ) {
 for (; _Next != _Dest; ++ _Next )
  _Al . destroy ( _Next );
 throw;
 }
 return ( _Dest );
 }

template < class _InIt,
 class _FwdIt,
 class _Alloc > inline
 _FwdIt _Uninit_copy ( _InIt _First, _InIt _Last, _FwdIt _Dest,
  _Alloc &, _Scalar_ptr_iterator_tag, _Range_checked_iterator_tag )
 {
 ;
 ;
 size_t _Count = ( size_t ) ( _Last - _First );
 _FwdIt _Result = _Dest + _Count;
 if ( _Count > 0 )
  :: memmove_s ( ( & * _Dest ), ( _Count * sizeof ( * _First ) ), ( & * _First ), ( _Count * sizeof ( * _First ) ) );
 return ( _Result );
 }



template < class _InIt,
 class _FwdIt,
 class _Alloc > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _FwdIt > :: _Result, _FwdIt > :: _Result _Uninitialized_copy ( _InIt _First, _InIt _Last, _FwdIt _Dest,
  _Alloc & _Al )
 {
 return ( _Uninit_copy ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Al,
  _Ptr_cat ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) ) );
 }

template < class _InIt, class _FwdElem, class _Alloc, size_t _Size >
inline
_FwdElem * _Uninitialized_copy ( _InIt _First, _InIt _Last, _FwdElem ( & _Dest ) [ _Size ],
  _Alloc & _Al )
 {
 return ( _Uninitialized_copy ( _First, _Last,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ), _Al ) . base ( ) );
 }

template < class _InIt,
 class _FwdIt,
 class _Alloc > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _FwdIt > :: _Result, _FwdIt > :: _Result _Uninitialized_copy ( _InIt _First, _InIt _Last, _FwdIt _Dest,
  _Alloc & _Al )
 {
 return ( _Uninit_copy ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Al,
  _Ptr_cat ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) ) );
 }
#line 202 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\memory"
template < class _InIt, class _FwdIt, class _Alloc, class _MoveCatTy >
inline
 _FwdIt _Uninit_move ( _InIt _First, _InIt _Last, _FwdIt _Dest,
  _Alloc & _Al, _MoveCatTy, _Range_checked_iterator_tag )
 {
 return ( :: stdext :: unchecked_uninitialized_copy ( _First, _Last, _Dest, _Al ) );
 }

template < class _InIt, class _FwdIt, class _Alloc >
inline
 _FwdIt _Uninit_move ( _InIt _First, _InIt _Last, _FwdIt _Dest,
  _Alloc & _Al, _Swap_move_tag, _Range_checked_iterator_tag )
 {
 ;
 ;
 _FwdIt _Next = _Dest;

 typename _Alloc :: value_type _Val;

 try {
 for (; _First != _Last; ++ _Dest, ++ _First )
  {
  _Al . construct ( _Dest, _Val );
  :: std :: _Swap_adl ( * _Dest, * _First );
  }
 } catch ( ... ) {
 for (; _Next != _Dest; ++ _Next )
  _Al . destroy ( _Next );
 throw;
 }
 return ( _Dest );
 }



template < class _InIt, class _FwdIt, class _Alloc >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _FwdIt > :: _Result, _FwdIt > :: _Result _Uninitialized_move ( _InIt _First, _InIt _Last, _FwdIt _Dest,
  _Alloc & _Al )
 {
 return ( _Uninit_move ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Al,
  _Move_cat ( _Dest ), :: std :: _Range_checked_iterator_tag ( ) ) );
 }

template < class _InIt, class _FwdElem, class _Alloc, size_t _Size >
inline
_FwdElem * _Uninitialized_move ( _InIt _First, _InIt _Last, _FwdElem ( & _Dest ) [ _Size ],
  _Alloc & _Al )
 {
 return ( _Uninitialized_move ( _First, _Last,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ), _Al ) . base ( ) );
 }

template < class _InIt, class _FwdIt, class _Alloc >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _FwdIt > :: _Result, _FwdIt > :: _Result _Uninitialized_move ( _InIt _First, _InIt _Last, _FwdIt _Dest,
  _Alloc & _Al )
 {
 return ( _Uninit_move ( :: std :: _Checked_base ( _First ),
  :: std :: _Checked_base ( _Last ), _Dest, _Al,
  _Move_cat ( _Dest ), :: std :: _Range_checked_iterator_tag ( ) ) );
 }
#line 281 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\memory"
template < class _FwdIt,
 class _Tval > inline
 void _Uninit_fill ( _FwdIt _First, _FwdIt _Last, const _Tval & _Val,
  _Nonscalar_ptr_iterator_tag )
 {
 ;
 _FwdIt _Next = _First;

 try {
 for (; _First != _Last; ++ _First )
  _Construct ( & * _First, _Val );
 } catch ( ... ) {
 for (; _Next != _First; ++ _Next )
  _Destroy ( & * _Next );
 throw;
 }
 }

template < class _Ty,
 class _Tval > inline
 void _Uninit_fill ( _Ty * _First, _Ty * _Last, const _Tval & _Val,
  _Scalar_ptr_iterator_tag )
 {
 std :: fill ( _First, _Last, _Val );
 }

template < class _FwdIt,
 class _Tval > inline
 void uninitialized_fill ( _FwdIt _First, _FwdIt _Last, const _Tval & _Val )
 {
 _Uninit_fill ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Val, _Ptr_cat ( _First, _First ) );
 }


template < class _FwdIt,
 class _Diff,
 class _Tval > inline
 void _Uninit_fill_n ( _FwdIt _First, _Diff _Count, const _Tval & _Val,
  _Nonscalar_ptr_iterator_tag, _Range_checked_iterator_tag )
 {






 _FwdIt _Next = _First;

 try {
 for (; 0 < _Count; -- _Count, ++ _First )
  _Construct ( & * _First, _Val );
 } catch ( ... ) {
 for (; _Next != _First; ++ _Next )
  _Destroy ( & * _Next );
 throw;
 }
 }
#line 339 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\memory"
template < class _FwdIt,
 class _Diff,
 class _Tval > inline
 void _Uninit_fill_n ( _FwdIt _First, _Diff _Count, const _Tval & _Val,
  _Scalar_ptr_iterator_tag, _Range_checked_iterator_tag )
 {
 :: stdext :: unchecked_fill_n ( & * _First, _Count, _Val );
 }



template < class _FwdIt,
 class _Diff,
 class _Tval > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _FwdIt > :: _Result, void > :: _Result uninitialized_fill_n ( _FwdIt _First, _Diff _Count, const _Tval & _Val )
 {
 _Uninit_fill_n ( _First, _Count, _Val, _Ptr_cat ( _First, _First ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _FwdElem, class _Diff, class _Tval, size_t _Size >
inline
void uninitialized_fill_n ( _FwdElem ( & _First ) [ _Size ], _Diff _Count, const _Tval & _Val )
 {
 uninitialized_fill_n ( :: stdext :: make_checked_array_iterator ( _First, _Size ), _Count, _Val );
 }

template < class _FwdIt,
 class _Diff,
 class _Tval > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _FwdIt > :: _Result, void > :: _Result uninitialized_fill_n ( _FwdIt _First, _Diff _Count, const _Tval & _Val )
 {
 _Uninit_fill_n ( _First, _Count, _Val, _Ptr_cat ( _First, _First ), :: std :: _Range_checked_iterator_tag ( ) );
 }
#line 387 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\memory"
template < class _FwdIt,
 class _Diff,
 class _Tval,
 class _Alloc > inline
 void _Uninit_fill_n ( _FwdIt _First, _Diff _Count,
  const _Tval & _Val, _Alloc & _Al, _Nonscalar_ptr_iterator_tag, _Range_checked_iterator_tag )
 {






 _FwdIt _Next = _First;

 try {
 for (; 0 < _Count; -- _Count, ++ _First )
  _Al . construct ( _First, _Val );
 } catch ( ... ) {
 for (; _Next != _First; ++ _Next )
  _Al . destroy ( _Next );
 throw;
 }
 }
#line 412 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\memory"
template < class _FwdIt,
 class _Diff,
 class _Tval,
 class _Alloc > inline
 void _Uninit_fill_n ( _FwdIt _First, _Diff _Count,
  const _Tval & _Val, _Alloc &, _Scalar_ptr_iterator_tag, _Range_checked_iterator_tag )
 {
  :: stdext :: unchecked_fill_n ( _First, _Count, _Val );
 }



template < class _FwdIt,
 class _Diff,
 class _Tval,
 class _Alloc > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _FwdIt > :: _Result, void > :: _Result _Uninitialized_fill_n ( _FwdIt _First, _Diff _Count,
  const _Tval & _Val, _Alloc & _Al )
 {
 _Uninit_fill_n ( _First, _Count, _Val, _Al,
  _Ptr_cat ( _First, _First ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _FwdElem, class _Diff, class _Tval, class _Alloc, size_t _Size >
inline
void _Uninitialized_fill_n ( _FwdElem ( & _First ) [ _Size ], _Diff _Count,
  const _Tval & _Val, _Alloc & _Al )
 {
 _Uninitialized_fill_n ( :: stdext :: make_checked_array_iterator ( _First, _Size ), _Count, _Val, _Al );
 }

template < class _FwdIt,
 class _Diff,
 class _Tval,
 class _Alloc > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _FwdIt > :: _Result, void > :: _Result _Uninitialized_fill_n ( _FwdIt _First, _Diff _Count,
  const _Tval & _Val, _Alloc & _Al )
 {
 _Uninit_fill_n ( _First, _Count, _Val, _Al,
  _Ptr_cat ( _First, _First ), :: std :: _Range_checked_iterator_tag ( ) );
 }
#line 471 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\memory"
template < class _FwdIt,
 class _Ty >
 class raw_storage_iterator
  : public _Outit
 {
public :
 typedef _FwdIt iterator_type;
 typedef _FwdIt iter_type;
 typedef _Ty element_type;

 explicit raw_storage_iterator ( _FwdIt _First )
  : _Next ( _First )
  {
  }

 raw_storage_iterator < _FwdIt, _Ty > & operator * ( )
  {
  return ( * this );
  }

 raw_storage_iterator < _FwdIt, _Ty > & operator = ( const _Ty & _Val )
  {
  _Construct ( & * _Next, _Val );
  return ( * this );
  }

 raw_storage_iterator < _FwdIt, _Ty > & operator ++ ( )
  {
  ++ _Next;
  return ( * this );
  }

 raw_storage_iterator < _FwdIt, _Ty > operator ++ ( int )
  {
  raw_storage_iterator < _FwdIt, _Ty > _Ans = * this;
  ++ _Next;
  return ( _Ans );
  }

private :
 _FwdIt _Next;
 };


template < class _Ty >
 class _Temp_iterator
  : public _Outit
 {
public :
 typedef _Ty * _Pty;


 typedef _Range_checked_iterator_tag _Checked_iterator_category;


 _Temp_iterator ( ptrdiff_t _Count = 0 )
  {
  _Buf . _Begin = 0;
  _Buf . _Current = 0;
  _Buf . _Hiwater = 0;
  _Buf . _Size = _Count;
  _Pbuf = & _Buf;
  }

 _Temp_iterator ( const _Temp_iterator < _Ty > & _Right )
  {
  _Buf . _Begin = 0;
  _Buf . _Current = 0;
  _Buf . _Hiwater = 0;
  _Buf . _Size = 0;
  * this = _Right;
  }

 ~ _Temp_iterator ( )
  {
  if ( _Buf . _Begin != 0 )
   {
   for ( _Pty _Next = _Buf . _Begin;
    _Next != _Buf . _Hiwater; ++ _Next )
    _Destroy ( & * _Next );
   std :: return_temporary_buffer ( _Buf . _Begin );
   }
  }

 _Temp_iterator < _Ty > & operator = ( const _Temp_iterator < _Ty > & _Right )
  {
  _Pbuf = _Right . _Pbuf;
  return ( * this );
  }

 _Temp_iterator < _Ty > & operator = ( const _Ty & _Val )
  {
  if ( _Pbuf -> _Current < _Pbuf -> _Hiwater )
   * _Pbuf -> _Current ++ = _Val;
  else
   {
   { if ( ! ( ( _Pbuf -> _Current - _Pbuf -> _Begin ) < _Pbuf -> _Size ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
   _Pty _Ptr = & * _Pbuf -> _Current;
   _Construct ( _Ptr, _Val );
   _Pbuf -> _Hiwater = ++ _Pbuf -> _Current;
   }
  return ( * this );
  }

 _Temp_iterator < _Ty > & operator * ( )
  {
  return ( * this );
  }

 _Temp_iterator < _Ty > & operator ++ ( )
  {
  return ( * this );
  }

 _Temp_iterator < _Ty > & operator ++ ( int )
  {
  return ( * this );
  }

 _Temp_iterator < _Ty > & _Init ( )
  {
  _Pbuf -> _Current = _Pbuf -> _Begin;
  return ( * this );
  }

 _Pty _First ( ) const
  {
  return ( _Pbuf -> _Begin );
  }

 _Pty _Last ( ) const
  {
  return ( _Pbuf -> _Current );
  }

 ptrdiff_t _Maxlen ( )
  {
  if ( _Pbuf -> _Begin == 0 && 0 < _Pbuf -> _Size )
   {
   pair < _Pty, ptrdiff_t > _Pair =
    std :: get_temporary_buffer < _Ty > ( _Pbuf -> _Size );

   _Pbuf -> _Begin = _Pair . first;
   _Pbuf -> _Current = _Pair . first;
   _Pbuf -> _Hiwater = _Pair . first;
   _Pbuf -> _Size = _Pair . second;
   }
  return ( _Pbuf -> _Size );
  }

 static void _Xinvarg ( )
  {
  throw invalid_argument ( "invalid _Temp_iterator<T> argument" );
  }

private :
 struct _Bufpar
  {
  _Pty _Begin;
  _Pty _Current;
  _Pty _Hiwater;
  ptrdiff_t _Size;
  };
 _Bufpar _Buf;
 _Bufpar * _Pbuf;
 };
#line 639 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\memory"
template < class _Ty >
 class auto_ptr;

template < class _Ty >
 struct auto_ptr_ref
  {
 explicit auto_ptr_ref ( _Ty * _Right )
  : _Ref ( _Right )
  {
  }

 _Ty * _Ref;
 };

template < class _Ty >
 class auto_ptr
  {
public :
 typedef _Ty element_type;

 explicit auto_ptr ( _Ty * _Ptr = 0 ) throw ( )
  : _Myptr ( _Ptr )
  {
  }

 auto_ptr ( auto_ptr < _Ty > & _Right ) throw ( )
  : _Myptr ( _Right . release ( ) )
  {
  }

 auto_ptr ( auto_ptr_ref < _Ty > _Right ) throw ( )
  {
  _Ty * _Ptr = _Right . _Ref;
  _Right . _Ref = 0;
  _Myptr = _Ptr;
  }

 template < class _Other >
  operator auto_ptr < _Other > ( ) throw ( )
  {
  return ( auto_ptr < _Other > ( * this ) );
  }

 template < class _Other >
  operator auto_ptr_ref < _Other > ( ) throw ( )
  {
  _Other * _Cvtptr = _Myptr;
  auto_ptr_ref < _Other > _Ans ( _Cvtptr );
  _Myptr = 0;
  return ( _Ans );
  }


 template < class _Other >
  auto_ptr < _Ty > & operator = ( auto_ptr < _Other > & _Right ) throw ( )
  {
  reset ( _Right . release ( ) );
  return ( * this );
  }

 template < class _Other >
  auto_ptr ( auto_ptr < _Other > & _Right ) throw ( )
  : _Myptr ( _Right . release ( ) )
  {
  }

 auto_ptr < _Ty > & operator = ( auto_ptr < _Ty > & _Right ) throw ( )
  {
  reset ( _Right . release ( ) );
  return ( * this );
  }

 auto_ptr < _Ty > & operator = ( auto_ptr_ref < _Ty > _Right ) throw ( )
  {
  _Ty * _Ptr = _Right . _Ref;
  _Right . _Ref = 0;
  reset ( _Ptr );
  return ( * this );
  }

 ~ auto_ptr ( )
  {
  delete _Myptr;
  }

 _Ty & operator * ( ) const throw ( )
  {






  ;

  return ( * get ( ) );
  }

 _Ty * operator -> ( ) const throw ( )
  {






  return ( get ( ) );
  }

 _Ty * get ( ) const throw ( )
  {
  return ( _Myptr );
  }

 _Ty * release ( ) throw ( )
  {
  _Ty * _Tmp = _Myptr;
  _Myptr = 0;
  return ( _Tmp );
  }

 void reset ( _Ty * _Ptr = 0 )
  {
  if ( _Ptr != _Myptr )
   delete _Myptr;
  _Myptr = _Ptr;
  }

private :
 _Ty * _Myptr;
 };
#line 770 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\memory"
}

namespace stdext { 

template < class _InIt,
 class _FwdIt > inline
 _FwdIt unchecked_uninitialized_copy ( _InIt _First, _InIt _Last,
  _FwdIt _Dest )
 {
  return ( :: std :: _Uninit_copy ( :: std :: _Checked_base ( _First ),
   :: std :: _Checked_base ( _Last ), _Dest,
   :: std :: _Ptr_cat ( _First, _Dest ),
   :: std :: _Range_checked_iterator_tag ( ) ) );
 }

template < class _InIt,
 class _FwdIt > inline
 typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _FwdIt > :: _Result, _FwdIt > :: _Result checked_uninitialized_copy ( _InIt _First, _InIt _Last,
  _FwdIt _Dest )
 {
 return ( :: std :: _Uninit_copy ( :: std :: _Checked_base ( _First ),
   :: std :: _Checked_base ( _Last ), _Dest,
   :: std :: _Ptr_cat ( _First, _Dest ),
   :: std :: _Range_checked_iterator_tag ( ) ) );
 }

template < class _InIt, class _FwdElem, size_t _Size > inline
 _FwdElem * checked_uninitialized_copy ( _InIt _First, _InIt _Last,
  _FwdElem ( & _Dest ) [ _Size ] )
 {
 return ( checked_uninitialized_copy ( _First, _Last,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ) ) . base ( ) );
 }

template < class _InIt,
 class _FwdIt > inline
 __declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) ) typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _FwdIt > :: _Result, _FwdIt > :: _Result
  checked_uninitialized_copy ( _InIt _First, _InIt _Last, _FwdIt _Dest )
 {
 return ( :: std :: _Uninit_copy ( :: std :: _Checked_base ( _First ),
  :: std :: _Checked_base ( _Last ), _Dest,
  :: std :: _Ptr_cat ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) ) );
 }

template < class _InIt,
 class _FwdIt,
 class _Alloc > inline
 _FwdIt unchecked_uninitialized_copy ( _InIt _First, _InIt _Last,
  _FwdIt _Dest, _Alloc & _Al )
 {
 return ( :: std :: _Uninit_copy ( :: std :: _Checked_base ( _First ),
  :: std :: _Checked_base ( _Last ), _Dest, _Al,
  :: std :: _Ptr_cat ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) ) );
 }

template < class _InIt,
 class _FwdIt,
 class _Alloc > inline
 typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _FwdIt > :: _Result, _FwdIt > :: _Result checked_uninitialized_copy ( _InIt _First, _InIt _Last,
  _FwdIt _Dest, _Alloc & _Al )
 {
 return ( :: std :: _Uninit_copy ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ),
  _Dest, _Al,
  :: std :: _Ptr_cat ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) ) );
 }

template < class _InIt, class _FwdElem, class _Alloc, size_t _Size > inline
 _FwdElem * checked_uninitialized_copy ( _InIt _First, _InIt _Last,
  _FwdElem ( & _Dest ) [ _Size ], _Alloc & _Al )
 {
 return ( checked_uninitialized_copy ( _First, _Last,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ), _Al ) . base ( ) );
 }

template < class _InIt,
 class _FwdIt,
 class _Alloc > inline
 __declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) ) typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _FwdIt > :: _Result, _FwdIt > :: _Result
  checked_uninitialized_copy ( _InIt _First, _InIt _Last,
  _FwdIt _Dest, _Alloc & _Al )
 {
 return ( :: std :: _Uninit_copy ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ),
  _Dest, _Al,
  :: std :: _Ptr_cat ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) ) );
 }

template < class _InIt,
 class _FwdIt,
 class _Alloc > inline
 _FwdIt _Unchecked_uninitialized_move ( _InIt _First, _InIt _Last,
  _FwdIt _Dest, _Alloc & _Al )
 {
 return ( :: std :: _Uninit_move ( :: std :: _Checked_base ( _First ),
  :: std :: _Checked_base ( _Last ), _Dest, _Al,
  :: std :: _Move_cat ( _Dest ), :: std :: _Range_checked_iterator_tag ( ) ) );
 }

template < class _InIt, class _FwdIt, class _Alloc > inline
 typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _FwdIt > :: _Result, _FwdIt > :: _Result _Checked_uninitialized_move ( _InIt _First, _InIt _Last,
  _FwdIt _Dest, _Alloc & _Al )
 {
 return ( :: std :: _Uninit_move ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ),
  _Dest, _Al,
  :: std :: _Move_cat ( _Dest ), :: std :: _Range_checked_iterator_tag ( ) ) );
 }

template < class _InIt, class _FwdElem, class _Alloc, size_t _Size > inline
 _FwdElem * _Checked_uninitialized_move ( _InIt _First, _InIt _Last,
  _FwdElem ( & _Dest ) [ _Size ], _Alloc & _Al )
 {
 return ( _Checked_uninitialized_move ( _First, _Last,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ), _Al ) . base ( ) );
 }

template < class _InIt, class _FwdIt, class _Alloc > inline
 __declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) ) typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _FwdIt > :: _Result, _FwdIt > :: _Result
  _Checked_uninitialized_move ( _InIt _First, _InIt _Last,
   _FwdIt _Dest, _Alloc & _Al )
 {
 return ( :: std :: _Uninit_move ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ),
  _Dest, _Al,
  :: std :: _Move_cat ( _Dest ), :: std :: _Range_checked_iterator_tag ( ) ) );
 }

template < class _FwdIt,
 class _Diff,
 class _Tval > inline
 void unchecked_uninitialized_fill_n ( _FwdIt _First, _Diff _Count,
  const _Tval & _Val )
 {
 :: std :: _Uninit_fill_n ( _First, _Count, _Val,
  :: std :: _Ptr_cat ( _First, _First ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _FwdIt,
 class _Diff,
 class _Tval > inline
 typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _FwdIt > :: _Result, void > :: _Result
  checked_uninitialized_fill_n ( _FwdIt _First, _Diff _Count,
   const _Tval & _Val )
 {
 :: std :: _Uninit_fill_n ( _First, _Count, _Val,
  :: std :: _Ptr_cat ( _First, _First ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _FwdElem, class _Diff, class _Tval, size_t _Size > inline
 void checked_uninitialized_fill_n ( _FwdElem ( & _First ) [ _Size ],
  _Diff _Count, const _Tval & _Val )
 {
 checked_uninitialized_fill_n (
  :: stdext :: make_checked_array_iterator ( _First, _Size ), _Count, _Val );
 }

template < class _FwdIt,
 class _Diff,
 class _Tval > inline
 __declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) ) typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _FwdIt > :: _Result, void > :: _Result
  checked_uninitialized_fill_n ( _FwdIt _First, _Diff _Count,
   const _Tval & _Val )
 {
 :: std :: _Uninit_fill_n ( _First, _Count, _Val,
  :: std :: _Ptr_cat ( _First, _First ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _FwdIt,
 class _Diff,
 class _Tval,
 class _Alloc > inline
 void unchecked_uninitialized_fill_n ( _FwdIt _First, _Diff _Count,
  const _Tval & _Val, _Alloc & _Al )
 {
 :: std :: _Uninit_fill_n ( _First, _Count, _Val, _Al,
  :: std :: _Ptr_cat ( _First, _First ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _FwdIt,
 class _Diff,
 class _Tval,
 class _Alloc > inline
 typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _FwdIt > :: _Result, void > :: _Result
  checked_uninitialized_fill_n ( _FwdIt _First, _Diff _Count,
   const _Tval & _Val, _Alloc & _Al )
 {
 :: std :: _Uninit_fill_n ( _First, _Count, _Val, _Al,
  :: std :: _Ptr_cat ( _First, _First ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _FwdElem,
 class _Diff,
 class _Tval,
 class _Alloc,
 size_t _Size > inline
 void checked_uninitialized_fill_n ( _FwdElem ( & _First ) [ _Size ],
  _Diff _Count, const _Tval & _Val, _Alloc & _Al )
 {
 checked_uninitialized_fill_n (
  :: stdext :: make_checked_array_iterator ( _First, _Size ),
  _Count, _Val, _Al );
 }

template < class _FwdIt,
 class _Diff,
 class _Tval,
 class _Alloc > inline
 __declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) ) typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _FwdIt > :: _Result, void > :: _Result
  checked_uninitialized_fill_n ( _FwdIt _First, _Diff _Count,
   const _Tval & _Val, _Alloc & _Al )
 {
 :: std :: _Uninit_fill_n ( _First, _Count, _Val, _Al,
  :: std :: _Ptr_cat ( _First, _First ), :: std :: _Range_checked_iterator_tag ( ) );
 }

}
#line 993 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\memory"
extern "C" long __cdecl _InterlockedIncrement(volatile long *); 
extern "C" long __cdecl _InterlockedDecrement(volatile long *); 
extern "C" long __cdecl _InterlockedCompareExchange(volatile long *, long, long); 


#pragma intrinsic(_InterlockedIncrement)
#pragma intrinsic(_InterlockedDecrement)
#pragma intrinsic(_InterlockedCompareExchange)
#line 1007 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\memory"
namespace std { 
namespace tr1 { 


class bad_weak_ptr : public exception { 



public: explicit bad_weak_ptr(const char * = 0) 
{ 
} 

virtual const char *what() const throw() 
{ 
return "tr1::bad_weak_ptr"; 
} 
}; 

extern __declspec( noreturn ) void __cdecl _Xweak(); 


class _Ref_count_base { 


virtual void _Destroy() = 0; 
virtual void _Delete_this() = 0; 

const volatile void *_Ptr; 
long _Uses; 
long _Weaks; 


protected: _Ref_count_base(const volatile void *_Px) : _Ptr(_Px), _Uses((0)), _Weaks((1)) 

{ 
} 


public: virtual ~_Ref_count_base() 
{ 
} 

bool _Incref_nz() 
{ 
for (; ;) 
{ 
auto long _Count = ((volatile long &)(this->_Uses)); 
if (_Count == (0)) { 
return false; }  
if (_InterlockedCompareExchange(&(this->_Uses), _Count + (1), _Count) == _Count) { 
return true; }  
}  
} 

void _Incref() 
{ 
_InterlockedIncrement(&(this->_Uses)); 
} 

void _Incwref() 
{ 
_InterlockedIncrement(&(this->_Weaks)); 
} 

void _Decref() 
{ 
if (_InterlockedDecrement(&(this->_Uses)) == (0)) 
{ 
this->_Destroy(); 
this->_Decwref(); 
}  
} 

void _Decwref() 
{ 
if (_InterlockedDecrement(&(this->_Weaks)) == (0)) { 
this->_Delete_this(); }  
} 

long _Use_count() const 
{ 
return this->_Uses; 
} 

bool _Expired() const 
{ 
return (this->_Uses) == (0); 
} 

virtual void *_Get_deleter(const type_info &) const 
{ 
return 0; 
} 

const volatile void *_Getptr() const 
{ 
return this->_Ptr; 
} 
}; 


template < class _Ty >
 class _Ref_count
 : public _Ref_count_base
 {
public :
 _Ref_count ( _Ty * _Px )
  : _Ref_count_base ( _Px )
  {
  }

private :
 virtual void _Destroy ( )
  {
  delete ( _Ty * ) _Getptr ( );
  }

 virtual void _Delete_this ( )
  {
  delete this;
  }
 };

template < class _Ty,
 class _Dx,
 class _Alloc = std :: allocator < int > >
 class _Ref_count_d
 : public _Ref_count_base
 {
public :
 typedef _Ref_count_d < _Ty, _Dx, _Alloc > _Myty;
 typedef typename _Alloc :: template rebind < _Myty > :: other _Myalty;

 _Ref_count_d ( _Ty * _Px, _Dx _Dt, _Myalty _Al = _Myalty ( ) )
  : _Ref_count_base ( _Px ), _Dtor ( _Dt ), _Myal ( _Al )
  {
  }

 void * _Get_deleter ( const type_info & _Type ) const
  {
  return ( ( void * ) ( _Type == typeid ( _Dx ) ? & _Dtor : 0 ) );
  }

private :
 virtual void _Destroy ( )
  {
  _Dtor ( ( _Ty * ) _Getptr ( ) );
  }

 virtual void _Delete_this ( )
  {
  _Myalty _Al = _Myal;
  _Al . destroy ( this );
  _Al . deallocate ( this, 1 );
  }

 _Myalty _Myal;
 _Dx _Dtor;
 };


template < class _Ty >
 class weak_ptr;
template < class _Ty >
 class shared_ptr;
template < class _Ty >
 class enable_shared_from_this;
struct _Static_tag { }; 
struct _Const_tag { }; 
struct _Dynamic_tag { }; 

template < class _Ty1,
 class _Ty2 >
 void _Do_enable ( _Ty1 *, enable_shared_from_this < _Ty2 > *, _Ref_count_base * );

template < class _Ty >
 inline void _Enable_shared ( _Ty * _Ptr, _Ref_count_base * _Refptr,
  typename _Ty :: _EStype * = 0 )
 {
 if ( _Ptr )
  _Do_enable ( _Ptr,
   ( enable_shared_from_this < typename _Ty :: _EStype > * ) _Ptr, _Refptr );
 }

inline void _Enable_shared(const volatile void *, const volatile void *) 
{ 
} 


template < class _Ty >
 class _Ptr_base
 {
public :
 typedef _Ty _Elem;
 typedef _Elem element_type;

 _Ptr_base ( )
  : _Ptr ( 0 ), _Rep ( 0 )
  {
  }

 long use_count ( ) const
  {
  return ( _Rep ? _Rep -> _Use_count ( ) : 0 );
  }

 void _Swap ( _Ptr_base & _Other )
  {
  :: std :: swap ( _Rep, _Other . _Rep );
  :: std :: swap ( _Ptr, _Other . _Ptr );
  }

 template < class _Ty2 >
  bool _Cmp ( const _Ptr_base < _Ty2 > & _Right ) const
  {
  return ( _Rep < _Right . _Rep );
  }

 void * _Get_deleter ( const type_info & _Type ) const
  {
  return ( _Rep ? _Rep -> _Get_deleter ( _Type ) : 0 );
  }

 _Ty * _Get ( ) const
  {
  return ( _Ptr );
  }

 bool _Expired ( ) const
  {
  return ( ! _Rep || _Rep -> _Expired ( ) );
  }

 void _Decref ( )
  {
  if ( _Rep != 0 )
   _Rep -> _Decref ( );
  }

 void _Reset ( )
  {
  _Reset ( 0, 0 );
  }

 template < class _Ty2 >
  void _Reset ( const _Ptr_base < _Ty2 > & _Other )
  {
  _Reset ( _Other . _Ptr, _Other . _Rep );
  }

 template < class _Ty2 >
  void _Reset ( const _Ptr_base < _Ty2 > & _Other, bool _Throw )
  {
  _Reset ( _Other . _Ptr, _Other . _Rep, _Throw );
  }

 template < class _Ty2 >
  void _Reset ( const _Ptr_base < _Ty2 > & _Other, const _Static_tag & )
  {
  _Reset ( static_cast < _Elem * > ( _Other . _Ptr ), _Other . _Rep );
  }

 template < class _Ty2 >
  void _Reset ( const _Ptr_base < _Ty2 > & _Other, const _Const_tag & )
  {
  _Reset ( const_cast < _Elem * > ( _Other . _Ptr ), _Other . _Rep );
  }
 template < class _Ty2 >
  void _Reset ( const _Ptr_base < _Ty2 > & _Other, const _Dynamic_tag & )
  {
  _Elem * _Ptr = dynamic_cast < _Elem * > ( _Other . _Ptr );
  if ( _Ptr )
   _Reset ( _Ptr, _Other . _Rep );
  else
   _Reset ( );
  }

 template < class _Ty2 >
  void _Reset ( auto_ptr < _Ty2 > & _Other )
  {
  _Ty2 * _Px = _Other . get ( );
  _Reset ( _Px, new _Ref_count < _Elem > ( _Px ) );
  _Other . release ( );
  }

 void _Reset ( _Ty * _Other_ptr, _Ref_count_base * _Other_rep )
  {
  if ( _Other_rep )
   _Other_rep -> _Incref ( );
  if ( _Rep != 0 )
   _Rep -> _Decref ( );
  _Rep = _Other_rep;
  _Ptr = _Other_ptr;
  }

 void _Reset ( _Ty * _Other_ptr, _Ref_count_base * _Other_rep, bool _Throw )
  {


  if ( _Other_rep && _Other_rep -> _Incref_nz ( ) )
   {
   if ( _Rep != 0 )
    _Rep -> _Decref ( );
   _Rep = _Other_rep;
   _Ptr = _Other_ptr;
   }
  else if ( _Throw )
   _Xweak ( );
  }

 void _Decwref ( )
  {
  if ( _Rep != 0 )
   _Rep -> _Decwref ( );
  }

 void _Resetw ( )
  {
  _Resetw ( ( _Elem * ) 0, 0 );
  }

 template < class _Ty2 >
  void _Resetw ( const _Ptr_base < _Ty2 > & _Other )
  {
  _Resetw ( _Other . _Ptr, _Other . _Rep );
  }

 template < class _Ty2 >
  void _Resetw ( const _Ty2 * _Other_ptr, _Ref_count_base * _Other_rep )
  {
  _Resetw ( const_cast < _Ty2 * > ( _Other_ptr ), _Other_rep );
  }

 template < class _Ty2 >
  void _Resetw ( _Ty2 * _Other_ptr, _Ref_count_base * _Other_rep )
  {
  if ( _Other_rep )
   _Other_rep -> _Incwref ( );
  if ( _Rep != 0 )
   _Rep -> _Decwref ( );
  _Rep = _Other_rep;
  _Ptr = _Other_ptr;
  }

private :
 _Ty * _Ptr;
 _Ref_count_base * _Rep;
 template < class _Ty0 >
  friend class _Ptr_base;
 };


template<class _Ty> 
struct _Ref { 

typedef _Ty &_Type; 
}; 


template<> struct _Ref< void>  { 

typedef void _Type; 
}; 


template<> struct _Ref< const void>  { 

typedef void _Type; 
}; 


template<> struct _Ref< volatile void>  { 

typedef void _Type; 
}; 


template<> struct _Ref< const volatile void>  { 

typedef void _Type; 
}; 


template < class _Ty >
 class shared_ptr
  : public _Ptr_base < _Ty >
 {
public :
 shared_ptr ( )
  {
  this -> _Reset ( );
  }

 template < class _Ux >
  explicit shared_ptr ( _Ux * _Px )
  {
  _Resetp ( _Px );
  }

 template < class _Ux,
  class _Dx >
  shared_ptr ( _Ux * _Px, _Dx _Dt )
  {
  _Resetp ( _Px, _Dt );
  }

 template < class _Ux,
  class _Dx,
  class _Alloc >
  shared_ptr ( _Ux * _Px, _Dx _Dt, _Alloc _Ax )
  {
  _Resetp ( _Px, _Dt, _Ax );
  }

 shared_ptr ( const shared_ptr & _Other )
  {
  this -> _Reset ( _Other );
  }

 template < class _Ty2 >
  shared_ptr ( const shared_ptr < _Ty2 > & _Other )
  {
  this -> _Reset ( _Other );
  }

 template < class _Ty2 >
  explicit shared_ptr ( const weak_ptr < _Ty2 > & _Other,
   bool _Throw = true )
  {
  this -> _Reset ( _Other, _Throw );
  }

 template < class _Ty2 >
  explicit shared_ptr ( auto_ptr < _Ty2 > & _Other )
  {
  this -> _Reset ( _Other );
  }

 template < class _Ty2 >
  shared_ptr ( const shared_ptr < _Ty2 > & _Other, const _Static_tag & _Tag )
  {
  this -> _Reset ( _Other, _Tag );
  }

 template < class _Ty2 >
  shared_ptr ( const shared_ptr < _Ty2 > & _Other, const _Const_tag & _Tag )
  {
  this -> _Reset ( _Other, _Tag );
  }

 template < class _Ty2 >
  shared_ptr ( const shared_ptr < _Ty2 > & _Other, const _Dynamic_tag & _Tag )
  {
  this -> _Reset ( _Other, _Tag );
  }

 ~ shared_ptr ( )
  {
  this -> _Decref ( );
  }

 shared_ptr & operator = ( const shared_ptr & _Right )
  {
  this -> _Reset ( _Right );
  return ( * this );
  }

 template < class _Ty2 >
  shared_ptr & operator = ( const shared_ptr < _Ty2 > & _Right )
  {
  this -> _Reset ( _Right );
  return ( * this );
  }

 template < class _Ty2 >
  shared_ptr & operator = ( auto_ptr < _Ty2 > & _Right )
  {
  this -> _Reset ( _Right );
  return ( * this );
  }

 void reset ( )
  {
  this -> _Reset ( );
  }

 template < class _Ux >
  void reset ( _Ux * _Px )
  {
  _Resetp ( _Px );
  }

 template < class _Ux,
  class _Dx >
  void reset ( _Ux * _Px, _Dx _Dt )
  {
  _Resetp ( _Px, _Dt );
  }

 template < class _Ux,
  class _Dx,
  class _Alloc >
  void reset ( _Ux * _Px, _Dx _Dt, _Alloc _Ax )
  {
  _Resetp ( _Px, _Dt, _Ax );
  }

 void swap ( shared_ptr & _Other )
  {
  this -> _Swap ( _Other );
  }

 _Ty * get ( ) const
  {
  return ( this -> _Get ( ) );
  }

 typename _Ref < _Ty > :: _Type operator * ( ) const
  {
  return ( * this -> _Get ( ) );
  }

 _Ty * operator -> ( ) const
  {
  return ( this -> _Get ( ) );
  }

 bool unique ( ) const
  {
  return ( this -> use_count ( ) == 1 );
  }

 operator :: std :: _Bool_type ( ) const
  {
  return ( this -> _Get ( ) != 0 ? ( & :: std :: _Bool_struct :: _Member ) : 0 );
  }

private :
 template < class _Ux >
  void _Resetp ( _Ux * _Px )
  {
  try {
  _Resetp0 ( _Px, new _Ref_count < _Ux > ( _Px ) );
  } catch ( ... ) {
  delete _Px;
  throw;
  }
  }

 template < class _Ux,
  class _Dx >
  void _Resetp ( _Ux * _Px, _Dx _Dt )
  {
  typedef _Ref_count_d < _Ux, _Dx > _Refd;

  try {
  _Resetp0 ( _Px, new _Refd ( _Px, _Dt ) );
  } catch ( ... ) {
  _Dt ( _Px );
  throw;
  }
  }

 template < class _Ux,
  class _Dx,
  class _Alloc >
  void _Resetp ( _Ux * _Px, _Dx _Dt, _Alloc _Ax )
  {
  typedef _Ref_count_d < _Ux, _Dx, _Alloc > _Refd;
  typename _Alloc :: template rebind < _Refd > :: other _Al = _Ax;

  try {
  _Refd * _Ptr = _Al . allocate ( 1 );
  new ( _Ptr ) _Refd ( _Px, _Dt, _Al );
  _Resetp0 ( _Px, _Ptr );
  } catch ( ... ) {
  _Dt ( _Px );
  throw;
  }
  }

 template < class _Ux >
  void _Resetp0 ( _Ux * _Px, _Ref_count_base * _Rx )
  {
  this -> _Reset ( _Px, _Rx );
  _Enable_shared ( _Px, _Rx );
  }
 };

template < class _Ty1,
 class _Ty2 >
 bool operator == ( const shared_ptr < _Ty1 > & _S1,
  const shared_ptr < _Ty2 > & _S2 )
 {
 return ( _S1 . get ( ) == _S2 . get ( ) );
 }

template < class _Ty1,
 class _Ty2 >
 bool operator != ( const shared_ptr < _Ty1 > & _S1,
  const shared_ptr < _Ty2 > & _S2 )
 {
 return ( ! ( _S1 == _S2 ) );
 }

template < class _Ty1,
 class _Ty2 >
 bool operator < ( const shared_ptr < _Ty1 > & _S1,
  const shared_ptr < _Ty2 > & _S2 )
 {
 return ( _S1 . _Cmp ( _S2 ) );
 }

template < class _Elem,
 class _Traits,
 class _Ty >
 basic_ostream < _Elem, _Traits > &
 operator << ( basic_ostream < _Elem, _Traits > & _Out,
  const shared_ptr < _Ty > & _Px )
 {
 return ( _Out << _Px . get ( ) );
 }

template < class _Ty >
 void swap ( shared_ptr < _Ty > & _S1, shared_ptr < _Ty > & _S2 )
 {
 _S1 . swap ( _S2 );
 }

template < class _Ty1,
 class _Ty2 >
 shared_ptr < _Ty1 > static_pointer_cast ( const shared_ptr < _Ty2 > & _Other )
 {
 return ( shared_ptr < _Ty1 > ( _Other, _Static_tag ( ) ) );
 }

template < class _Ty1,
 class _Ty2 >
 shared_ptr < _Ty1 > const_pointer_cast ( const shared_ptr < _Ty2 > & _Other )
 {
 return ( shared_ptr < _Ty1 > ( _Other, _Const_tag ( ) ) );
 }

template < class _Ty1,
 class _Ty2 >
 shared_ptr < _Ty1 > dynamic_pointer_cast ( const shared_ptr < _Ty2 > & _Other )
 {
 return ( shared_ptr < _Ty1 > ( _Other, _Dynamic_tag ( ) ) );
 }

template < class _Dx,
 class _Ty >
 _Dx * get_deleter ( const shared_ptr < _Ty > & _Sx )
 {
 return ( ( _Dx * ) _Sx . _Get_deleter ( typeid ( _Dx ) ) );
 }


template < class _Ty >
 class weak_ptr
  : public _Ptr_base < _Ty >
 {
 typedef typename _Ptr_base < _Ty > :: _Elem _Elem;

public :
 weak_ptr ( )
  {
  this -> _Resetw ( );
  }

 template < class _Ty2 >
  weak_ptr ( const shared_ptr < _Ty2 > & _Other )
  {
  this -> _Resetw ( _Other );
  }

 weak_ptr ( const weak_ptr & _Other )
  {
  this -> _Resetw ( _Other );
  }

 template < class _Ty2 >
  weak_ptr ( const weak_ptr < _Ty2 > & _Other )
  {
  this -> _Resetw ( _Other );
  }

 ~ weak_ptr ( )
  {
  this -> _Decwref ( );
  }

 weak_ptr & operator = ( const weak_ptr & _Right )
  {
  this -> _Resetw ( _Right );
  return ( * this );
  }

 template < class _Ty2 >
  weak_ptr & operator = ( const weak_ptr < _Ty2 > & _Right )
  {
  this -> _Resetw ( _Right );
  return ( * this );
  }

 template < class _Ty2 >
  weak_ptr & operator = ( shared_ptr < _Ty2 > & _Right )
  {
  this -> _Resetw ( _Right );
  return ( * this );
  }

 void reset ( )
  {
  this -> _Resetw ( );
  }

 void swap ( weak_ptr & _Other )
  {
  this -> _Swap ( _Other );
  }

 bool expired ( ) const
  {
  return ( this -> _Expired ( ) );
  }

 shared_ptr < _Ty > lock ( ) const
  {
  return ( shared_ptr < _Elem > ( * this, false ) );
  }
 };

template < class _Ty1,
 class _Ty2 >
 bool operator < ( const weak_ptr < _Ty1 > & _W1,
  const weak_ptr < _Ty2 > & _W2 )
 {
 return ( _W1 . _Cmp ( _W2 ) );
 }

template < class _Ty >
 void swap ( weak_ptr < _Ty > & _W1, weak_ptr < _Ty > & _W2 )
 {
 _W1 . swap ( _W2 );
 }


template < class _Ty > class enable_shared_from_this
 {
public :
 typedef _Ty _EStype;

 shared_ptr < _Ty > shared_from_this ( )
  {
  return ( shared_ptr < _Ty > ( _Wptr ) );
  }

 shared_ptr < const _Ty > shared_from_this ( ) const
  {
  return ( shared_ptr < const _Ty > ( _Wptr ) );
  }

protected :
 enable_shared_from_this ( )
  {
  }

 enable_shared_from_this ( const enable_shared_from_this & )
  {
  }

 enable_shared_from_this & operator = ( const enable_shared_from_this & )
  {
  return ( * this );
  }

 ~ enable_shared_from_this ( )
  {
  }

private :
 template < class _Ty1,
  class _Ty2 >
  friend void _Do_enable (
   _Ty1 *,
   enable_shared_from_this < _Ty2 > *,
   _Ref_count_base * );

 mutable weak_ptr < _Ty > _Wptr;
 };

template < class _Ty1,
 class _Ty2 >
 inline void _Do_enable (
  _Ty1 * _Ptr,
  enable_shared_from_this < _Ty2 > * _Es,
  _Ref_count_base * _Refptr )
 {
 _Es -> _Wptr . _Resetw ( _Ptr, _Refptr );
 }
}

template<class _Ty> 
#pragma pack(8)
#line 1811
class _Move_operation_category< tr1::shared_ptr< _Ty> >  { 


public: typedef _Swap_move_tag _Move_cat; 
}; 
#pragma pack()
template<class _Ty> 
#pragma pack(8)
#line 1818
class _Move_operation_category< tr1::weak_ptr< _Ty> >  { 


public: typedef _Swap_move_tag _Move_cat; 
}; 
#pragma pack()
#line 1823
}
#line 1827 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\memory"
#pragma warning(pop)
#line 10 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
#pragma warning(push,3)
#pragma warning(disable: 4244)
#line 1828 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\memory"
#pragma pack ( pop )
#line 9 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
#pragma pack ( push, 8 )
#line 14 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
namespace std { 


static const int _ISORT_MAX = 32; 


template < class _InIt,
 class _Fn1 > inline
 _Fn1 for_each ( _InIt _First, _InIt _Last, _Fn1 _Func )
 {
 ;
 ;
 typename :: std :: _Checked_iterator_base_helper < _InIt > :: _Checked_iterator_base_type _ChkFirst ( :: std :: _Checked_base ( _First ) );
 typename :: std :: _Checked_iterator_base_helper < _InIt > :: _Checked_iterator_base_type _ChkLast ( :: std :: _Checked_base ( _Last ) );
 for (; _ChkFirst != _ChkLast; ++ _ChkFirst )
  _Func ( * _ChkFirst );
 return ( _Func );
 }


template < class _InIt, class _Ty >
inline
 _InIt _Find ( _InIt _First, _InIt _Last, const _Ty & _Val )
 {
 ;
 for (; _First != _Last; ++ _First )
  if ( * _First == _Val )
   break;
 return ( _First );
 }

inline const char *_Find(const char *_First, const char *_Last, int _Val) 
{ 
; 
_First = (const char *)::memchr(_First, _Val, _Last - _First); 
return (_First == (0)) ? _Last : _First; 
} 

inline const signed char *_Find(const signed char *_First, const signed char *
_Last, int _Val) 
{ 
; 
_First = (const signed char *)::memchr(_First, _Val, _Last - _First); 

return (_First == (0)) ? _Last : _First; 
} 

inline const unsigned char *_Find(const unsigned char *_First, const unsigned char *
_Last, int _Val) 
{ 
; 
_First = (const unsigned char *)::memchr(_First, _Val, _Last - _First); 

return (_First == (0)) ? _Last : _First; 
} 

template < class _InIt, class _Ty >
inline
 _InIt find ( _InIt _First, _InIt _Last, const _Ty & _Val )
 {
 :: std :: _Checked_assign_from_base ( _First, _Find ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Val ) );

 return ( _First );
 }
#line 80 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _InIt,
 class _Pr > inline
 _InIt _Find_if ( _InIt _First, _InIt _Last, _Pr _Pred )
 {
 ;
 ;
 for (; _First != _Last; ++ _First )
  if ( _Pred ( * _First ) )
   break;
 return ( _First );
 }

template < class _InIt,
 class _Pr > inline
 _InIt find_if ( _InIt _First, _InIt _Last, _Pr _Pred )
 {
 :: std :: _Checked_assign_from_base ( _First, _Find_if ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Pred ) );

 return ( _First );
 }
#line 102 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _FwdIt > inline
 _FwdIt _Adjacent_find ( _FwdIt _First, _FwdIt _Last )
 {
 ;
 for ( _FwdIt _Firstb; ( _Firstb = _First ) != _Last && ++ _First != _Last; )
  if ( * _Firstb == * _First )
   return ( _Firstb );
 return ( _Last );
 }

template < class _FwdIt > inline
 _FwdIt adjacent_find ( _FwdIt _First, _FwdIt _Last )
 {
 :: std :: _Checked_assign_from_base ( _First, _Adjacent_find ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ) ) );

 return ( _First );
 }
#line 121 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _FwdIt,
 class _Pr > inline
 _FwdIt _Adjacent_find ( _FwdIt _First, _FwdIt _Last, _Pr _Pred )
 {
 ;
 ;
 for ( _FwdIt _Firstb; ( _Firstb = _First ) != _Last && ++ _First != _Last; )
  if ( _Pred ( * _Firstb, * _First ) )
   return ( _Firstb );
 return ( _Last );
 }

template < class _FwdIt,
 class _Pr > inline
 _FwdIt adjacent_find ( _FwdIt _First, _FwdIt _Last, _Pr _Pred )
 {
 :: std :: _Checked_assign_from_base ( _First, _Adjacent_find ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Pred ) );

 return ( _First );
 }
#line 143 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _InIt,
 class _Ty > inline
 typename iterator_traits < _InIt > :: difference_type
  _Count ( _InIt _First, _InIt _Last, const _Ty & _Val )
 {
 ;
 typename iterator_traits < _InIt > :: difference_type _Cnt = 0;

 for (; _First != _Last; ++ _First )
  if ( * _First == _Val )
   ++ _Cnt;
 return ( _Cnt );
 }

template < class _InIt,
 class _Ty > inline
 typename iterator_traits < _InIt > :: difference_type
  count ( _InIt _First, _InIt _Last, const _Ty & _Val )
 {
 return _Count ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Val );
 }


template < class _InIt,
 class _Pr > inline
 typename iterator_traits < _InIt > :: difference_type
  _Count_if ( _InIt _First, _InIt _Last, _Pr _Pred )
 {
 ;
 ;
 typename iterator_traits < _InIt > :: difference_type _Count = 0;

 for (; _First != _Last; ++ _First )
  if ( _Pred ( * _First ) )
   ++ _Count;
 return ( _Count );
 }

template < class _InIt,
 class _Pr > inline
 typename iterator_traits < _InIt > :: difference_type
  count_if ( _InIt _First, _InIt _Last, _Pr _Pred )
 {
 return _Count_if ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Pred );
 }


template < class _FwdIt1,
 class _FwdIt2,
 class _Diff1,
 class _Diff2 > inline
 _FwdIt1 _Search ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Diff1 *, _Diff2 * )
 {
 ;
 ;
 _Diff1 _Count1 = 0;
 _Distance ( _First1, _Last1, _Count1 );
 _Diff2 _Count2 = 0;
 _Distance ( _First2, _Last2, _Count2 );

 for (; _Count2 <= _Count1; ++ _First1, -- _Count1 )
  {
  _FwdIt1 _Mid1 = _First1;
  for ( _FwdIt2 _Mid2 = _First2;; ++ _Mid1, ++ _Mid2 )
   if ( _Mid2 == _Last2 )
    return ( _First1 );
   else if ( ! ( * _Mid1 == * _Mid2 ) )
    break;
  }
 return ( _Last1 );
 }

template < class _FwdIt1,
 class _FwdIt2 > inline
 _FwdIt1 search ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2 )
 {
 :: std :: _Checked_assign_from_base ( _First1, _Search ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ), _Dist_type ( _First1 ), _Dist_type ( _First2 ) ) );

 return _First1;
 }
#line 229 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _FwdIt1,
 class _FwdIt2,
 class _Diff1,
 class _Diff2,
 class _Pr > inline
 _FwdIt1 _Search ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred, _Diff1 *, _Diff2 * )
 {
 ;
 ;
 ;
 _Diff1 _Count1 = 0;
 _Distance ( _First1, _Last1, _Count1 );
 _Diff2 _Count2 = 0;
 _Distance ( _First2, _Last2, _Count2 );

 for (; _Count2 <= _Count1; ++ _First1, -- _Count1 )
  {
  _FwdIt1 _Mid1 = _First1;
  for ( _FwdIt2 _Mid2 = _First2;; ++ _Mid1, ++ _Mid2 )
   if ( _Mid2 == _Last2 )
    return ( _First1 );
   else if ( ! _Pred ( * _Mid1, * _Mid2 ) )
    break;
  }
 return ( _Last1 );
 }

template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 _FwdIt1 search ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred )
 {
 :: std :: _Checked_assign_from_base ( _First1, _Search ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ), _Pred, _Dist_type ( _First1 ), _Dist_type ( _First2 ) ) );

 return _First1;
 }
#line 271 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _FwdIt1,
 class _Diff2,
 class _Ty > inline
 _FwdIt1 _Search_n ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _Diff2 _Count, const _Ty & _Val, forward_iterator_tag )
 {
 ;

 if ( _Count <= 0 )
  return ( _First1 );

 for (; _First1 != _Last1; ++ _First1 )
  if ( * _First1 == _Val )
   {
   _FwdIt1 _Mid1 = _First1;

   for ( _Diff2 _Count1 = _Count;; )
    if ( -- _Count1 == 0 )
     return ( _First1 );
    else if ( ++ _Mid1 == _Last1 )
     return ( _Last1 );
    else if ( ! ( * _Mid1 == _Val ) )
     break;

   _First1 = _Mid1;
   }
 return ( _Last1 );
 }

template < class _FwdIt1,
 class _Diff2,
 class _Ty > inline
 _FwdIt1 _Search_n ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _Diff2 _Count, const _Ty & _Val, random_access_iterator_tag )
 {
 ;

 if ( _Count <= 0 )
  return ( _First1 );

 _FwdIt1 _Oldfirst1 = _First1;
 for ( _Diff2 _Inc = 0; _Count <= _Last1 - _Oldfirst1; )
  {
  _First1 = _Oldfirst1 + _Inc;
  if ( * _First1 == _Val )
   {
   _Diff2 _Count1 = _Count;
   _FwdIt1 _Mid1 = _First1;

   for (; _Oldfirst1 != _First1 && _First1 [ - 1 ] == _Val; -- _First1 )
    -- _Count1;

   if ( _Count1 <= _Last1 - _Mid1 )
    for (;; )
     if ( -- _Count1 == 0 )
      return ( _First1 );
     else if ( ! ( * ++ _Mid1 == _Val ) )
      break;

   _Oldfirst1 = ++ _Mid1;
   _Inc = 0;
   }
  else
   {
   _Oldfirst1 = _First1 + 1;
   _Inc = _Count - 1;
   }
  }
 return ( _Last1 );
 }

template < class _FwdIt1,
 class _Diff2,
 class _Ty > inline
 _FwdIt1 search_n ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _Diff2 _Count, const _Ty & _Val )
 {
 :: std :: _Checked_assign_from_base ( _First1, _Search_n ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _Count, _Val, _Iter_cat ( _First1 ) ) );

 return _First1;
 }
#line 355 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _FwdIt1,
 class _Diff2,
 class _Ty,
 class _Pr > inline
 _FwdIt1 _Search_n ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _Diff2 _Count, const _Ty & _Val, _Pr _Pred, forward_iterator_tag )
 {
 ;
 ;

 if ( _Count <= 0 )
  return ( _First1 );

 for (; _First1 != _Last1; ++ _First1 )
  if ( _Pred ( * _First1, _Val ) )
   {
   _FwdIt1 _Mid1 = _First1;

   for ( _Diff2 _Count1 = _Count;; )
    if ( -- _Count1 == 0 )
     return ( _First1 );
    else if ( ++ _Mid1 == _Last1 )
     return ( _Last1 );
    else if ( ! _Pred ( * _Mid1, _Val ) )
     break;

   _First1 = _Mid1;
   }
 return ( _Last1 );
 }

template < class _FwdIt1,
 class _Diff2,
 class _Ty,
 class _Pr > inline
 _FwdIt1 _Search_n ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _Diff2 _Count, const _Ty & _Val, _Pr _Pred, random_access_iterator_tag )
 {
 ;
 ;

 if ( _Count <= 0 )
  return ( _First1 );

 _FwdIt1 _Oldfirst1 = _First1;
 for (; _Count <= _Last1 - _Oldfirst1; )
  {
  if ( _Pred ( * _First1, _Val ) )
   {
   _Diff2 _Count1 = _Count;
   _FwdIt1 _Mid1 = _First1;

   for (; _Oldfirst1 != _First1 && _Pred ( _First1 [ - 1 ], _Val );
    -- _First1 )
    -- _Count1;

   if ( _Count1 <= _Last1 - _Mid1 )
    for (;; )
     if ( -- _Count1 == 0 )
      return ( _First1 );
     else if ( ! _Pred ( * ++ _Mid1, _Val ) )
      break;

   _Oldfirst1 = ++ _Mid1;
   _First1 = _Oldfirst1;
   }
  else
   {
   _Oldfirst1 = _First1 + 1;
   _First1 += _Count;
   }
  }
 return ( _Last1 );
 }

template < class _FwdIt1,
 class _Diff2,
 class _Ty,
 class _Pr > inline
 _FwdIt1 search_n ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _Diff2 _Count, const _Ty & _Val, _Pr _Pred )
 {
 :: std :: _Checked_assign_from_base ( _First1, _Search_n ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _Count, _Val, _Pred, _Iter_cat ( _First1 ) ) );

 return _First1;
 }
#line 444 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _FwdIt1,
 class _FwdIt2,
 class _Diff1,
 class _Diff2 > inline
 _FwdIt1 _Find_end ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Diff1 *, _Diff2 * )
 {
 ;
 ;
 _Diff1 _Count1 = 0;
 _Distance ( _First1, _Last1, _Count1 );
 _Diff2 _Count2 = 0;
 _Distance ( _First2, _Last2, _Count2 );
 _FwdIt1 _Ans = _Last1;

 if ( 0 < _Count2 )
  for (; _Count2 <= _Count1; ++ _First1, -- _Count1 )
   {
   _FwdIt1 _Mid1 = _First1;
   for ( _FwdIt2 _Mid2 = _First2;; ++ _Mid1 )
    if ( ! ( * _Mid1 == * _Mid2 ) )
     break;
    else if ( ++ _Mid2 == _Last2 )
     {
     _Ans = _First1;
     break;
     }
   }
 return ( _Ans );
 }

template < class _FwdIt1,
 class _FwdIt2 > inline
 _FwdIt1 find_end ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2 )
 {
 :: std :: _Checked_assign_from_base ( _First1, _Find_end ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ), _Dist_type ( _First1 ), _Dist_type ( _First2 ) ) );

 return _First1;
 }
#line 488 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _FwdIt1,
 class _FwdIt2,
 class _Diff1,
 class _Diff2,
 class _Pr > inline
 _FwdIt1 _Find_end ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred, _Diff1 *, _Diff2 * )
 {
 ;
 ;
 ;
 _Diff1 _Count1 = 0;
 _Distance ( _First1, _Last1, _Count1 );
 _Diff2 _Count2 = 0;
 _Distance ( _First2, _Last2, _Count2 );
 _FwdIt1 _Ans = _Last1;

 if ( 0 < _Count2 )
  for (; _Count2 <= _Count1; ++ _First1, -- _Count1 )
   {
   _FwdIt1 _Mid1 = _First1;
   for ( _FwdIt2 _Mid2 = _First2;; ++ _Mid1 )
    if ( ! _Pred ( * _Mid1, * _Mid2 ) )
     break;
    else if ( ++ _Mid2 == _Last2 )
     {
     _Ans = _First1;
     break;
     }
   }
 return ( _Ans );
 }

template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 _FwdIt1 find_end ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred )
 {
 :: std :: _Checked_assign_from_base ( _First1, _Find_end ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ), _Pred, _Dist_type ( _First1 ), _Dist_type ( _First2 ) ) );

 return _First1;
 }
#line 535 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _FwdIt1,
 class _FwdIt2 > inline
 _FwdIt1 _Find_first_of ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2 )
 {
 ;
 ;
 for (; _First1 != _Last1; ++ _First1 )
  for ( _FwdIt2 _Mid2 = _First2; _Mid2 != _Last2; ++ _Mid2 )
   if ( * _First1 == * _Mid2 )
    return ( _First1 );
 return ( _First1 );
 }

template < class _FwdIt1,
 class _FwdIt2 > inline
 _FwdIt1 find_first_of ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2 )
 {
 ;
 ;
 :: std :: _Checked_assign_from_base ( _First1, _Find_first_of ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ) ) );

 return _First1;
 }
#line 563 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 _FwdIt1 _Find_first_of ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred )
 {
 ;
 for (; _First1 != _Last1; ++ _First1 )
  for ( _FwdIt2 _Mid2 = _First2; _Mid2 != _Last2; ++ _Mid2 )
   if ( _Pred ( * _First1, * _Mid2 ) )
    return ( _First1 );
 return ( _First1 );
 }

template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 _FwdIt1 find_first_of ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred )
 {
 :: std :: _Checked_assign_from_base ( _First1, _Find_first_of ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ), _Pred ) );

 return ( _First1 );
 }
#line 590 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _FwdIt1,
 class _FwdIt2 > inline
 void iter_swap ( _FwdIt1 _Left, _FwdIt2 _Right )
 {
 swap ( * _Left, * _Right );
 }


template < class _FwdIt1, class _FwdIt2, class _FwdItCats >
inline
 _FwdIt2 _Swap_ranges ( _FwdIt1 _First1, _FwdIt1 _Last1, _FwdIt2 _First2,
  _FwdItCats, _Range_checked_iterator_tag )
 {
 ;
 for (; _First1 != _Last1; ++ _First1, ++ _First2 )
  std :: iter_swap ( _First1, _First2 );
 return ( _First2 );
 }


template < class _FwdIt1, class _FwdIt2 >
inline
 _FwdIt2 _Swap_ranges ( _FwdIt1 _First1, _FwdIt1 _Last1, _FwdIt2 _First2,
  random_access_iterator_tag, _Range_checked_iterator_tag )
 {

 _FwdIt2 _Result = _First2 + ( _Last1 - _First1 );
 _Swap_ranges ( _First1, _Last1, :: std :: _Checked_base ( _First2 ),
  forward_iterator_tag ( ), _Range_checked_iterator_tag ( ) );
 return ( _Result );
 }
#line 625 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _FwdIt1, class _FwdIt2 >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _FwdIt2 > :: _Result, _FwdIt2 > :: _Result swap_ranges ( _FwdIt1 _First1, _FwdIt1 _Last1, _FwdIt2 _First2 )
 {
  return _Swap_ranges ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _First2,
   _Iter_random ( _First1, _First2 ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _FwdIt1, class _FwdElem2, size_t _Size >
inline
_FwdElem2 * swap_ranges ( _FwdIt1 _First1, _FwdIt1 _Last1, _FwdElem2 ( & _First2 ) [ _Size ] )
 {
  return ( swap_ranges ( _First1, _Last1, :: stdext :: make_checked_array_iterator ( _First2, _Size ) ) . base ( ) );
 }

template < class _FwdIt1, class _FwdIt2 >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _FwdIt2 > :: _Result, _FwdIt2 > :: _Result swap_ranges ( _FwdIt1 _First1, _FwdIt1 _Last1, _FwdIt2 _First2 )
 {
  return _Swap_ranges ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _First2,
   _Iter_random ( _First1, _First2 ), :: std :: _Range_checked_iterator_tag ( ) );
 }
#line 662 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _InIt, class _OutIt, class _Fn1, class _InOutItCat >
inline
 _OutIt _Transform ( _InIt _First, _InIt _Last, _OutIt _Dest, _Fn1 _Func,
  _InOutItCat, _Range_checked_iterator_tag )
 {
 ;
 ;
 ;
 for (; _First != _Last; ++ _First, ++ _Dest )
  * _Dest = _Func ( * _First );
 return ( _Dest );
 }


template < class _InIt, class _OutIt, class _Fn1 >
inline
 _OutIt _Transform ( _InIt _First, _InIt _Last, _OutIt _Dest, _Fn1 _Func,
  random_access_iterator_tag, _Range_checked_iterator_tag )
 {

 _OutIt _Result = _Dest + ( _Last - _First );
 _Transform ( _First, _Last, :: std :: _Checked_base ( _Dest ), _Func,
  forward_iterator_tag ( ), _Range_checked_iterator_tag ( ) );
 return ( _Result );
 }
#line 691 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _InIt, class _OutIt, class _Fn1 >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result transform ( _InIt _First, _InIt _Last, _OutIt _Dest, _Fn1 _Func )
 {
 return _Transform ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Func,
  _Iter_random ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt, class _OutElem, class _Fn1, size_t _Size >
inline
_OutElem * transform ( _InIt _First, _InIt _Last, _OutElem ( & _Dest ) [ _Size ], _Fn1 _Func )
 {
 return ( transform ( _First, _Last,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ), _Func ) . base ( ) );
 }

template < class _InIt, class _OutIt, class _Fn1 >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result transform ( _InIt _First, _InIt _Last, _OutIt _Dest, _Fn1 _Func )
 {
 return _Transform ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Func,
  _Iter_random ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }
#line 729 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _InIt1, class _InIt2, class _OutIt, class _Fn2, class _InItCats, class _InOutItCat >
inline
 _OutIt _Transform ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2,
  _OutIt _Dest, _Fn2 _Func,
  _InItCats, _InOutItCat,
  _Range_checked_iterator_tag, _Range_checked_iterator_tag )
 {
 ;
 ;
 ;
 for (; _First1 != _Last1; ++ _First1, ++ _First2, ++ _Dest )
  * _Dest = _Func ( * _First1, * _First2 );
 return ( _Dest );
 }


template < class _InIt1, class _InIt2, class _OutIt, class _Fn2 >
inline
 _OutIt _Transform ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2,
  _OutIt _Dest, _Fn2 _Func,
  random_access_iterator_tag, random_access_iterator_tag,
  _Range_checked_iterator_tag, _Range_checked_iterator_tag )
 {

 _InIt2 _Last2 = _First2 + ( _Last1 - _First1 ); ( _Last2 );
 _OutIt _Result = _Dest + ( _Last1 - _First1 );
 _Transform ( _First1, _Last1, :: std :: _Checked_base ( _First2 ),
  :: std :: _Checked_base ( _Dest ), _Func,
  forward_iterator_tag ( ), forward_iterator_tag ( ),
  _Range_checked_iterator_tag ( ), _Range_checked_iterator_tag ( ) );
 return _Result;
 }

template < class _InIt1, class _InIt2, class _OutIt, class _Fn2, class _InOutItCat >
inline
 _OutIt _Transform ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2,
  _OutIt _Dest, _Fn2 _Func,
  random_access_iterator_tag, _InOutItCat,
  _Range_checked_iterator_tag, _Range_checked_iterator_tag )
 {

 _InIt2 _Last2 = _First2 + ( _Last1 - _First1 ); ( _Last2 );
 return _Transform ( _First1, _Last1, :: std :: _Checked_base ( _First2 ),
  _Dest, _Func,
  forward_iterator_tag ( ), forward_iterator_tag ( ),
  _Range_checked_iterator_tag ( ), _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1, class _InIt2, class _OutIt, class _Fn2, class _InItCats >
inline
 _OutIt _Transform ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2,
  _OutIt _Dest, _Fn2 _Func,
  _InItCats, random_access_iterator_tag,
  _Range_checked_iterator_tag, _Range_checked_iterator_tag )
 {

 _OutIt _Result = _Dest + ( _Last1 - _First1 );
 _Transform ( _First1, _Last1, _First2,
  :: std :: _Checked_base ( _Dest ), _Func,
  forward_iterator_tag ( ), forward_iterator_tag ( ),
  _Range_checked_iterator_tag ( ), _Range_checked_iterator_tag ( ) );
 return _Result;
 }
#line 796 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _InIt1, class _InIt2, class _OutIt, class _Fn2 >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _InIt2 > :: _Result && :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result transform ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2,
  _OutIt _Dest, _Fn2 _Func )
 {
 return _Transform ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _First2, _Dest, _Func,
  _Iter_random ( _First1, _First2 ), _Iter_random ( _First1, _Dest ),
  :: std :: _Range_checked_iterator_tag ( ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1, class _InElem2, class _OutElem, class _Fn2, size_t _SizeFirst2, size_t _SizeDest >
inline
_OutElem * transform ( _InIt1 _First1, _InIt1 _Last1, _InElem2 ( & _First2 ) [ _SizeFirst2 ],
  _OutElem ( & _Dest ) [ _SizeDest ], _Fn2 _Func )
 {
 return ( transform ( _First1, _Last1,
  :: stdext :: make_checked_array_iterator ( _First2, _SizeFirst2 ),
  :: stdext :: make_checked_array_iterator ( _Dest, _SizeDest ),
  _Func ) . base ( ) );
 }

template < class _InIt1, class _InIt2, class _OutElem, class _Fn2, size_t _SizeDest >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _InIt2 > :: _Result, _OutElem * > :: _Result transform ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2,
  _OutElem ( & _Dest ) [ _SizeDest ], _Fn2 _Func )
 {
 return ( _Transform ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _First2,
  :: stdext :: make_checked_array_iterator ( _Dest, _SizeDest ), _Func,
  _Iter_random ( _First1, _First2 ), _Iter_cat ( _First1 ),
  :: std :: _Range_checked_iterator_tag ( ), :: std :: _Range_checked_iterator_tag ( ) ) . base ( ) );
 }

template < class _InIt1, class _InIt2, class _OutElem, class _Fn2, size_t _SizeDest >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _InIt2 > :: _Result, _OutElem * > :: _Result transform ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2,
  _OutElem ( & _Dest ) [ _SizeDest ], _Fn2 _Func )
 {
 return ( _Transform ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _First2,
  :: stdext :: make_checked_array_iterator ( _Dest, _SizeDest ), _Func,
  _Iter_random ( _First1, _First2 ), _Iter_cat ( _First1 ),
  :: std :: _Range_checked_iterator_tag ( ), :: std :: _Range_checked_iterator_tag ( ) ) . base ( ) );
 }

template < class _InIt1, class _InElem2, class _OutIt, class _Fn2, size_t _SizeFirst2 >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result transform ( _InIt1 _First1, _InIt1 _Last1, _InElem2 ( & _First2 ) [ _SizeFirst2 ],
  _OutIt _Dest, _Fn2 _Func )
 {
 return ( _Transform ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: stdext :: make_checked_array_iterator ( _First2, _SizeFirst2 ),
  _Dest, _Func,
  _Iter_cat ( _First1 ), _Iter_random ( _First1, _Dest ),
  :: std :: _Range_checked_iterator_tag ( ), :: std :: _Range_checked_iterator_tag ( ) ) );
 }

template < class _InIt1, class _InElem2, class _OutIt, class _Fn2, size_t _SizeFirst2 >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result transform ( _InIt1 _First1, _InIt1 _Last1, _InElem2 ( & _First2 ) [ _SizeFirst2 ],
  _OutIt _Dest, _Fn2 _Func )
 {
 return ( _Transform ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: stdext :: make_checked_array_iterator ( _First2, _SizeFirst2 ),
  _Dest, _Func,
  _Iter_cat ( _First1 ), _Iter_random ( _First1, _Dest ),
  :: std :: _Range_checked_iterator_tag ( ), :: std :: _Range_checked_iterator_tag ( ) ) );
 }

template < class _InIt1, class _InIt2, class _OutIt, class _Fn2 >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _InIt2 > :: _Result || ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result transform ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2,
  _OutIt _Dest, _Fn2 _Func )
 {
 return _Transform ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _First2, _Dest, _Func,
  _Iter_random ( _First1, _First2 ), _Iter_random ( _First1, _Dest ),
  :: std :: _Range_checked_iterator_tag ( ), :: std :: _Range_checked_iterator_tag ( ) );
 }
#line 891 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _FwdIt,
 class _Ty > inline
 void _Replace ( _FwdIt _First, _FwdIt _Last,
  const _Ty & _Oldval, const _Ty & _Newval )
 {
 ;
 for (; _First != _Last; ++ _First )
  if ( * _First == _Oldval )
   * _First = _Newval;
 }

template < class _FwdIt,
 class _Ty > inline
 void replace ( _FwdIt _First, _FwdIt _Last,
  const _Ty & _Oldval, const _Ty & _Newval )
 {
 _Replace ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Oldval, _Newval );
 }


template < class _FwdIt,
 class _Pr,
 class _Ty > inline
 void _Replace_if ( _FwdIt _First, _FwdIt _Last, _Pr _Pred, const _Ty & _Val )
 {
 ;
 ;
 for (; _First != _Last; ++ _First )
  if ( _Pred ( * _First ) )
   * _First = _Val;
 }

template < class _FwdIt,
 class _Pr,
 class _Ty > inline
 void replace_if ( _FwdIt _First, _FwdIt _Last, _Pr _Pred, const _Ty & _Val )
 {
 _Replace_if ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Pred, _Val );
 }


template < class _InIt, class _OutIt, class _Ty, class _InOutItCat >
inline
 _OutIt _Replace_copy ( _InIt _First, _InIt _Last, _OutIt _Dest,
  const _Ty & _Oldval, const _Ty & _Newval,
  _InOutItCat, _Range_checked_iterator_tag )
 {
 ;
 ;
 for (; _First != _Last; ++ _First, ++ _Dest )
  * _Dest = * _First == _Oldval ? _Newval : * _First;
 return ( _Dest );
 }


template < class _InIt, class _OutIt, class _Ty >
inline
 _OutIt _Replace_copy ( _InIt _First, _InIt _Last, _OutIt _Dest,
  const _Ty & _Oldval, const _Ty & _Newval,
  random_access_iterator_tag, _Range_checked_iterator_tag )
 {

 _OutIt _Result = _Dest + ( _Last - _First );
 _Replace_copy ( _First, _Last, :: std :: _Checked_base ( _Dest ),
  _Oldval, _Newval,
  forward_iterator_tag ( ), _Range_checked_iterator_tag ( ) );
 return ( _Result );
 }
#line 963 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _InIt,
 class _OutIt,
 class _Ty > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result replace_copy ( _InIt _First, _InIt _Last, _OutIt _Dest,
  const _Ty & _Oldval, const _Ty & _Newval )
 {
 return _Replace_copy ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Oldval, _Newval,
  _Iter_random ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt, class _OutElem, class _Ty, size_t _Size >
inline
_OutElem * replace_copy ( _InIt _First, _InIt _Last, _OutElem ( & _Dest ) [ _Size ],
  const _Ty & _Oldval, const _Ty & _Newval )
 {
 return ( replace_copy ( _First, _Last,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ),
  _Oldval, _Newval ) . base ( ) );
 }

template < class _InIt,
 class _OutIt,
 class _Ty > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result replace_copy ( _InIt _First, _InIt _Last, _OutIt _Dest,
  const _Ty & _Oldval, const _Ty & _Newval )
 {
 return _Replace_copy ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Oldval, _Newval,
  _Iter_random ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }
#line 1009 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _InIt, class _OutIt, class _Pr, class _Ty, class _InOutItCat >
inline
 _OutIt _Replace_copy_if ( _InIt _First, _InIt _Last, _OutIt _Dest,
  _Pr _Pred, const _Ty & _Val, _InOutItCat, _Range_checked_iterator_tag )
 {
 ;
 ;
 ;
 for (; _First != _Last; ++ _First, ++ _Dest )
  * _Dest = _Pred ( * _First ) ? _Val : * _First;
 return ( _Dest );
 }


template < class _InIt, class _OutIt, class _Pr, class _Ty >
inline
 _OutIt _Replace_copy_if ( _InIt _First, _InIt _Last, _OutIt _Dest,
  _Pr _Pred, const _Ty & _Val,
  random_access_iterator_tag, _Range_checked_iterator_tag )
 {

 _OutIt _Result = _Dest + ( _Last - _First );
 _Replace_copy_if ( _First, _Last, :: std :: _Checked_base ( _Dest ),
  _Pred, _Val,
  forward_iterator_tag ( ), _Range_checked_iterator_tag ( ) );
 return ( _Result );
 }
#line 1040 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _InIt,
 class _OutIt,
 class _Pr,
 class _Ty > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result replace_copy_if ( _InIt _First, _InIt _Last, _OutIt _Dest,
  _Pr _Pred, const _Ty & _Val )
 {
 return _Replace_copy_if ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Pred, _Val,
  _Iter_random ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt, class _OutElem, class _Pr, class _Ty, size_t _Size >
inline
_OutElem * replace_copy_if ( _InIt _First, _InIt _Last, _OutElem ( & _Dest ) [ _Size ],
  _Pr _Pred, const _Ty & _Val )
 {
 return ( replace_copy_if ( _First, _Last,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ),
  _Pred, _Val ) . base ( ) );
 }

template < class _InIt,
 class _OutIt,
 class _Pr,
 class _Ty > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result replace_copy_if ( _InIt _First, _InIt _Last, _OutIt _Dest,
  _Pr _Pred, const _Ty & _Val )
 {
 return _Replace_copy_if ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Pred, _Val,
  _Iter_random ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }
#line 1089 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _FwdIt,
 class _Fn0 > inline
 void _Generate ( _FwdIt _First, _FwdIt _Last, _Fn0 _Func )
 {
 ;
 ;
 for (; _First != _Last; ++ _First )
  * _First = _Func ( );
 }

template < class _FwdIt,
 class _Fn0 > inline
 void generate ( _FwdIt _First, _FwdIt _Last, _Fn0 _Func )
 {
 _Generate ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Func );
 }


template < class _OutIt, class _Diff, class _Fn0, class _OutItCat >
inline
 void _Generate_n ( _OutIt _Dest, _Diff _Count, _Fn0 _Func,
  _OutItCat, _Range_checked_iterator_tag )
 {
 ;
 ;
 for (; 0 < _Count; -- _Count, ++ _Dest )
  * _Dest = _Func ( );
 }


template < class _OutIt, class _Diff, class _Fn0 >
inline
 void _Generate_n ( _OutIt _Dest, _Diff _Count, _Fn0 _Func,
  random_access_iterator_tag, _Range_checked_iterator_tag )
 {

 _OutIt _Result = _Dest + _Count;
 _Generate_n ( :: std :: _Checked_base ( _Dest ), _Count, _Func,
  forward_iterator_tag ( ), _Range_checked_iterator_tag ( ) );
 }
#line 1133 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _OutIt,
 class _Diff,
 class _Fn0 > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, void > :: _Result generate_n ( _OutIt _Dest, _Diff _Count, _Fn0 _Func )
 {
 _Generate_n ( _Dest, _Count, _Func,
  _Iter_cat ( _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _OutElem, class _Diff, class _Fn0, size_t _Size >
inline
void generate_n ( _OutElem ( & _Dest ) [ _Size ], _Diff _Count, _Fn0 _Func )
 {
 generate_n ( :: stdext :: make_checked_array_iterator ( _Dest, _Size ), _Count, _Func );
 }

template < class _OutIt,
 class _Diff,
 class _Fn0 > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, void > :: _Result generate_n ( _OutIt _Dest, _Diff _Count, _Fn0 _Func )
 {
 _Generate_n ( _Dest, _Count, _Func,
  _Iter_cat ( _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }
#line 1173 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _InIt,
 class _OutIt,
 class _Ty > inline
 _OutIt _Remove_copy ( _InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty & _Val, _Range_checked_iterator_tag )
 {
 ;
 ;
 for (; _First != _Last; ++ _First )
  if ( ! ( * _First == _Val ) )
   * _Dest ++ = * _First;
 return ( _Dest );
 }



template < class _InIt,
 class _OutIt,
 class _Ty > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result remove_copy ( _InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty & _Val )
 {
 return _Remove_copy ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Val, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt, class _OutElem, class _Ty, size_t _Size >
inline
_OutElem * remove_copy ( _InIt _First, _InIt _Last,
  _OutElem ( & _Dest ) [ _Size ], const _Ty & _Val )
 {
 return ( remove_copy ( _First, _Last,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ),
  _Val ) . base ( ) );
 }

template < class _InIt,
 class _OutIt,
 class _Ty > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result remove_copy ( _InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty & _Val )
 {
 return _Remove_copy ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Val, :: std :: _Range_checked_iterator_tag ( ) );
 }
#line 1232 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _InIt,
 class _OutIt,
 class _Pr > inline
 _OutIt _Remove_copy_if ( _InIt _First, _InIt _Last, _OutIt _Dest, _Pr _Pred, _Range_checked_iterator_tag )
 {
 ;
 ;
 ;
 for (; _First != _Last; ++ _First )
  if ( ! _Pred ( * _First ) )
   * _Dest ++ = * _First;
 return ( _Dest );
 }



template < class _InIt,
 class _OutIt,
 class _Pr > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result remove_copy_if ( _InIt _First, _InIt _Last, _OutIt _Dest, _Pr _Pred )
 {
 return _Remove_copy_if ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Pred, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt, class _OutElem, class _Pr, size_t _Size >
inline
_OutElem * remove_copy_if ( _InIt _First, _InIt _Last, _OutElem ( & _Dest ) [ _Size ], _Pr _Pred )
 {
 return ( remove_copy_if ( _First, _Last,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ), _Pred ) . base ( ) );
 }

template < class _InIt,
 class _OutIt,
 class _Pr > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result remove_copy_if ( _InIt _First, _InIt _Last, _OutIt _Dest, _Pr _Pred )
 {
 return _Remove_copy_if ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Pred, :: std :: _Range_checked_iterator_tag ( ) );
 }
#line 1286 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _FwdIt,
 class _Ty > inline
 _FwdIt remove ( _FwdIt _First, _FwdIt _Last, const _Ty & _Val )
 {
 _First = find ( _First, _Last, _Val );
 if ( _First == _Last )
  return ( _First );
 else
  {
  _FwdIt _First1 = _First;
  return ( :: stdext :: unchecked_remove_copy ( ++ _First1, _Last, _First, _Val ) );
  }
 }


template < class _FwdIt,
 class _Pr > inline
 _FwdIt remove_if ( _FwdIt _First, _FwdIt _Last, _Pr _Pred )
 {
 _First = std :: find_if ( _First, _Last, _Pred );
 if ( _First == _Last )
  return ( _First );
 else
  {
  _FwdIt _First1 = _First;
  return ( :: stdext :: unchecked_remove_copy_if ( ++ _First1, _Last, _First, _Pred ) );
  }
 }


template < class _FwdIt > inline
 _FwdIt _Unique ( _FwdIt _First, _FwdIt _Last )
 {
 ;
 for ( _FwdIt _Firstb; ( _Firstb = _First ) != _Last && ++ _First != _Last; )
  if ( * _Firstb == * _First )
   {
   for (; ++ _First != _Last; )
    if ( ! ( * _Firstb == * _First ) )
     * ++ _Firstb = * _First;
   return ( ++ _Firstb );
   }
 return ( _Last );
 }

template < class _FwdIt > inline
 _FwdIt unique ( _FwdIt _First, _FwdIt _Last )
 {
 :: std :: _Checked_assign_from_base ( _Last, _Unique ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ) ) );

 return ( _Last );
 }
#line 1340 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _FwdIt,
 class _Pr > inline
 _FwdIt _Unique ( _FwdIt _First, _FwdIt _Last, _Pr _Pred )
 {
 ;
 ;
 for ( _FwdIt _Firstb; ( _Firstb = _First ) != _Last && ++ _First != _Last; )
  if ( _Pred ( * _Firstb, * _First ) )
   {
   for (; ++ _First != _Last; )
    if ( ! _Pred ( * _Firstb, * _First ) )
     * ++ _Firstb = * _First;
   return ( ++ _Firstb );
   }
 return ( _Last );
 }

template < class _FwdIt,
 class _Pr > inline
 _FwdIt unique ( _FwdIt _First, _FwdIt _Last, _Pr _Pred )
 {
 :: std :: _Checked_assign_from_base ( _Last, _Unique ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Pred ) );

 return ( _Last );
 }
#line 1367 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _InIt,
 class _OutIt,
 class _Ty > inline
 _OutIt _Unique_copy ( _InIt _First, _InIt _Last, _OutIt _Dest, _Ty *, _Range_checked_iterator_tag )
 {
 ;
 _Ty _Val = * _First;

 for ( * _Dest ++ = _Val; ++ _First != _Last; )
  if ( ! ( _Val == * _First ) )
   _Val = * _First, * _Dest ++ = _Val;
 return ( _Dest );
 }

template < class _InIt,
 class _OutIt > inline
 _OutIt _Unique_copy ( _InIt _First, _InIt _Last, _OutIt _Dest,
  input_iterator_tag, _Range_checked_iterator_tag )
 {
 return ( _Unique_copy ( _First, _Last, _Dest, _Val_type ( _First ), _Range_checked_iterator_tag ( ) ) );
 }

template < class _FwdIt,
 class _OutIt > inline
 _OutIt _Unique_copy ( _FwdIt _First, _FwdIt _Last, _OutIt _Dest,
  forward_iterator_tag, _Range_checked_iterator_tag )
 {
 ;
 ;
 _FwdIt _Firstb = _First;
 for ( * _Dest ++ = * _Firstb; ++ _First != _Last; )
  if ( ! ( * _Firstb == * _First ) )
   _Firstb = _First, * _Dest ++ = * _Firstb;
 return ( _Dest );
 }

template < class _BidIt,
 class _OutIt > inline
 _OutIt _Unique_copy ( _BidIt _First, _BidIt _Last, _OutIt _Dest,
  bidirectional_iterator_tag, _Range_checked_iterator_tag )
 {
 return ( _Unique_copy ( _First, _Last, _Dest, forward_iterator_tag ( ), _Range_checked_iterator_tag ( ) ) );
 }

template < class _RanIt,
 class _OutIt > inline
 _OutIt _Unique_copy ( _RanIt _First, _RanIt _Last, _OutIt _Dest,
  random_access_iterator_tag, _Range_checked_iterator_tag )
 {
 return ( _Unique_copy ( _First, _Last, _Dest, forward_iterator_tag ( ), _Range_checked_iterator_tag ( ) ) );
 }



template < class _InIt,
 class _OutIt > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result unique_copy ( _InIt _First, _InIt _Last, _OutIt _Dest )
 {
 return ( _First == _Last ? _Dest :
  _Unique_copy ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Iter_cat ( _First ), :: std :: _Range_checked_iterator_tag ( ) ) );
 }

template < class _InIt, class _OutElem, size_t _Size >
inline
_OutElem * unique_copy ( _InIt _First, _InIt _Last, _OutElem ( & _Dest ) [ _Size ] )
 {
 return ( _First == _Last ? _Dest :
  ( unique_copy ( _First, _Last, :: stdext :: make_checked_array_iterator ( _Dest, _Size ) ) . base ( ) ) );
 }

template < class _InIt,
 class _OutIt > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result unique_copy ( _InIt _First, _InIt _Last, _OutIt _Dest )
 {
 return ( _First == _Last ? _Dest :
  _Unique_copy ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Iter_cat ( _First ), :: std :: _Range_checked_iterator_tag ( ) ) );
 }
#line 1459 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _InIt,
 class _OutIt,
 class _Ty,
 class _Pr > inline
 _OutIt _Unique_copy ( _InIt _First, _InIt _Last, _OutIt _Dest, _Pr _Pred,
  _Ty *, _Range_checked_iterator_tag )
 {
 ;
 ;
 _Ty _Val = * _First;

 for ( * _Dest ++ = _Val; ++ _First != _Last; )
  if ( ! _Pred ( _Val, * _First ) )
   _Val = * _First, * _Dest ++ = _Val;
 return ( _Dest );
 }

template < class _InIt,
 class _OutIt,
 class _Pr > inline
 _OutIt _Unique_copy ( _InIt _First, _InIt _Last, _OutIt _Dest, _Pr _Pred,
  input_iterator_tag, _Range_checked_iterator_tag )
 {
 return ( _Unique_copy ( _First, _Last, _Dest, _Pred, _Val_type ( _First ), _Range_checked_iterator_tag ( ) ) );
 }

template < class _FwdIt,
 class _OutIt,
 class _Pr > inline
 _OutIt _Unique_copy ( _FwdIt _First, _FwdIt _Last, _OutIt _Dest, _Pr _Pred,
  forward_iterator_tag, _Range_checked_iterator_tag )
 {
 ;
 ;
 ;
 _FwdIt _Firstb = _First;

 for ( * _Dest ++ = * _Firstb; ++ _First != _Last; )
  if ( ! _Pred ( * _Firstb, * _First ) )
   _Firstb = _First, * _Dest ++ = * _Firstb;
 return ( _Dest );
 }

template < class _BidIt,
 class _OutIt,
 class _Pr > inline
 _OutIt _Unique_copy ( _BidIt _First, _BidIt _Last, _OutIt _Dest, _Pr _Pred,
  bidirectional_iterator_tag, _Range_checked_iterator_tag )
 {
 return ( _Unique_copy ( _First, _Last, _Dest, _Pred,
  forward_iterator_tag ( ), _Range_checked_iterator_tag ( ) ) );
 }

template < class _RanIt,
 class _OutIt,
 class _Pr > inline
 _OutIt _Unique_copy ( _RanIt _First, _RanIt _Last, _OutIt _Dest, _Pr _Pred,
  random_access_iterator_tag, _Range_checked_iterator_tag )
 {
 return ( _Unique_copy ( _First, _Last, _Dest, _Pred,
  forward_iterator_tag ( ), _Range_checked_iterator_tag ( ) ) );
 }



template < class _InIt,
 class _OutIt,
 class _Pr > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result unique_copy ( _InIt _First, _InIt _Last, _OutIt _Dest, _Pr _Pred )
 {
 return ( _First == _Last ? _Dest
  : _Unique_copy ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Pred, _Iter_cat ( _First ), :: std :: _Range_checked_iterator_tag ( ) ) );
 }

template < class _InIt, class _OutElem, class _Pr, size_t _Size >
inline
_OutElem * unique_copy ( _InIt _First, _InIt _Last, _OutElem ( & _Dest ) [ _Size ], _Pr _Pred )
 {
 return ( _First == _Last ? _Dest
  : ( unique_copy ( _First, _Last, :: stdext :: make_checked_array_iterator ( _Dest, _Size ), _Pred ) . base ( ) ) );
 }

template < class _InIt,
 class _OutIt,
 class _Pr > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result unique_copy ( _InIt _First, _InIt _Last, _OutIt _Dest, _Pr _Pred )
 {
 return ( _First == _Last ? _Dest
  : _Unique_copy ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Pred, _Iter_cat ( _First ), :: std :: _Range_checked_iterator_tag ( ) ) );
 }
#line 1565 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _BidIt > inline
 void _Reverse ( _BidIt _First, _BidIt _Last, bidirectional_iterator_tag )
 {
 for (; _First != _Last && _First != -- _Last; ++ _First )
  std :: iter_swap ( _First, _Last );
 }

template < class _RanIt > inline
 void _Reverse ( _RanIt _First, _RanIt _Last, random_access_iterator_tag )
 {
 ;
 for (; _First < _Last; ++ _First )
  std :: iter_swap ( _First, -- _Last );
 }

template < class _BidIt > inline
 void reverse ( _BidIt _First, _BidIt _Last )
 {
 _Reverse ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Iter_cat ( _First ) );
 }


template < class _BidIt, class _OutIt, class _InOutItCat >
inline
 _OutIt _Reverse_copy ( _BidIt _First, _BidIt _Last, _OutIt _Dest,
  _InOutItCat, _Range_checked_iterator_tag )
 {
 ;
 ;
 for (; _First != _Last; ++ _Dest )
  * _Dest = * -- _Last;
 return ( _Dest );
 }


template < class _BidIt, class _OutIt >
inline
 _OutIt _Reverse_copy ( _BidIt _First, _BidIt _Last, _OutIt _Dest,
  random_access_iterator_tag, _Range_checked_iterator_tag )
 {

 _OutIt _Result = _Dest + ( _Last - _First );
 _Reverse_copy ( _First, _Last, :: std :: _Checked_base ( _Dest ),
  forward_iterator_tag ( ), _Range_checked_iterator_tag ( ) );
 return ( _Result );
 }
#line 1615 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _BidIt,
 class _OutIt > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result reverse_copy ( _BidIt _First, _BidIt _Last, _OutIt _Dest )
 {
 return _Reverse_copy ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Iter_random ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _BidIt, class _OutElem, size_t _Size >
inline
_OutElem * reverse_copy ( _BidIt _First, _BidIt _Last, _OutElem ( & _Dest ) [ _Size ] )
 {
 return ( reverse_copy ( _First, _Last, :: stdext :: make_checked_array_iterator ( _Dest, _Size ) ) . base ( ) );
 }

template < class _BidIt,
 class _OutIt > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result reverse_copy ( _BidIt _First, _BidIt _Last, _OutIt _Dest )
 {
 return _Reverse_copy ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Iter_random ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }
#line 1649 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _FwdIt > inline
 void _Rotate ( _FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
  forward_iterator_tag )
 {
 for ( _FwdIt _Next = _Mid;; )
  {
  std :: iter_swap ( _First, _Next );
  if ( ++ _First == _Mid )
   if ( ++ _Next == _Last )
    break;
   else
    _Mid = _Next;
  else if ( ++ _Next == _Last )
   _Next = _Mid;
  }
 }

template < class _BidIt > inline
 void _Rotate ( _BidIt _First, _BidIt _Mid, _BidIt _Last,
  bidirectional_iterator_tag )
 {
 std :: reverse ( _First, _Mid );
 std :: reverse ( _Mid, _Last );
 std :: reverse ( _First, _Last );
 }

template < class _RanIt,
 class _Diff,
 class _Ty > inline
 void _Rotate ( _RanIt _First, _RanIt _Mid, _RanIt _Last, _Diff *, _Ty * )
 {
 ;
 ;
 _Diff _Shift = _Mid - _First;
 _Diff _Count = _Last - _First;

 for ( _Diff _Factor = _Shift; _Factor != 0; )
  {
  _Diff _Tmp = _Count % _Factor;
  _Count = _Factor, _Factor = _Tmp;
  }

 if ( _Count < _Last - _First )
  for (; 0 < _Count; -- _Count )
   {
   _RanIt _Hole = _First + _Count;
   _RanIt _Next = _Hole;
   _Ty _Holeval = * _Hole;
   _RanIt _Next1 = _Next + _Shift == _Last ? _First : _Next + _Shift;
   while ( _Next1 != _Hole )
    {
    * _Next = * _Next1;
    _Next = _Next1;
    _Next1 = _Shift < _Last - _Next1 ? _Next1 + _Shift
     : _First + ( _Shift - ( _Last - _Next1 ) );
    }
   * _Next = _Holeval;
   }
 }

template < class _RanIt > inline
 void _Rotate ( _RanIt _First, _RanIt _Mid, _RanIt _Last,
   random_access_iterator_tag )
 {
 _Rotate ( _First, _Mid, _Last, _Dist_type ( _First ), _Val_type ( _First ) );
 }

template < class _FwdIt > inline
 void rotate ( _FwdIt _First, _FwdIt _Mid, _FwdIt _Last )
 {
 if ( _First != _Mid && _Mid != _Last )
  _Rotate ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Mid ), :: std :: _Checked_base ( _Last ), _Iter_cat ( _First ) );
 }


template < class _FwdIt,
 class _OutIt > inline
 _OutIt _Rotate_copy ( _FwdIt _First, _FwdIt _Mid, _FwdIt _Last, _OutIt _Dest, _Range_checked_iterator_tag )
 {
 _Dest = :: stdext :: unchecked_copy ( _Mid, _Last, _Dest );
 return ( :: stdext :: unchecked_copy ( _First, _Mid, _Dest ) );
 }



template < class _FwdIt, class _OutIt >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result rotate_copy ( _FwdIt _First, _FwdIt _Mid, _FwdIt _Last, _OutIt _Dest )
 {
  return _Rotate_copy ( _First, _Mid, _Last, _Dest, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _FwdIt, class _OutElem, size_t _Size >
inline
_OutElem * rotate_copy ( _FwdIt _First, _FwdIt _Mid, _FwdIt _Last, _OutElem ( & _Dest ) [ _Size ] )
 {
  return ( rotate_copy ( _First, _Mid, _Last, :: stdext :: make_checked_array_iterator ( _Dest, _Size ) ) . base ( ) );
 }

template < class _FwdIt, class _OutIt >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result rotate_copy ( _FwdIt _First, _FwdIt _Mid, _FwdIt _Last, _OutIt _Dest )
 {
  return _Rotate_copy ( _First, _Mid, _Last, _Dest, :: std :: _Range_checked_iterator_tag ( ) );
 }
#line 1768 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _RanIt,
 class _Diff > inline
 void _Random_shuffle ( _RanIt _First, _RanIt _Last, _Diff * )
 {
 ;
 const int _RANDOM_BITS = 15;
 const int _RANDOM_MAX = ( 1U << _RANDOM_BITS ) - 1;

 _RanIt _Next = _First;
 for ( unsigned long _Index = 2; ++ _Next != _Last; ++ _Index )
  {
  unsigned long _Rm = _RANDOM_MAX;
  unsigned long _Rn = :: rand ( ) & _RANDOM_MAX;
  for (; _Rm < _Index && _Rm != ~ 0UL;
   _Rm = _Rm << _RANDOM_BITS | _RANDOM_MAX )
   _Rn = _Rn << _RANDOM_BITS
    | ( :: rand ( ) & _RANDOM_MAX );

  std :: iter_swap ( _Next, _First + _Diff ( _Rn % _Index ) );
  }
 }

template < class _RanIt > inline
 void random_shuffle ( _RanIt _First, _RanIt _Last )
 {
 if ( _First != _Last )
  _Random_shuffle ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dist_type ( _First ) );
 }


template < class _RanIt,
 class _Fn1,
 class _Diff > inline
 void _Random_shuffle ( _RanIt _First, _RanIt _Last, _Fn1 & _Func, _Diff * )
 {
 ;
 ;
 _RanIt _Next = _First;

 for ( _Diff _Index = 2; ++ _Next != _Last; ++ _Index )
  std :: iter_swap ( _Next, _First + _Diff ( _Func ( _Index ) % _Index ) );
 }

template < class _RanIt,
 class _Fn1 > inline
 void random_shuffle ( _RanIt _First, _RanIt _Last, _Fn1 & _Func )
 {
 if ( _First != _Last )
  _Random_shuffle ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Func, _Dist_type ( _First ) );
 }


template < class _BidIt,
 class _Pr > inline
 _BidIt _Partition ( _BidIt _First, _BidIt _Last, _Pr _Pred )
 {
 ;
 ;
 for (;; ++ _First )
  {
  for (; _First != _Last && _Pred ( * _First ); ++ _First )
   ;
  if ( _First == _Last )
   break;

  for (; _First != -- _Last && ! _Pred ( * _Last ); )
   ;
  if ( _First == _Last )
   break;

  std :: iter_swap ( _First, _Last );
  }
 return ( _First );
 }

template < class _BidIt,
 class _Pr > inline
 _BidIt partition ( _BidIt _First, _BidIt _Last, _Pr _Pred )
 {
 :: std :: _Checked_assign_from_base ( _First, _Partition ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Pred ) );

 return ( _First );
 }
#line 1853 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _BidIt,
 class _Pr,
 class _Diff,
 class _Ty > inline
 _BidIt _Stable_partition ( _BidIt _First, _BidIt _Last, _Pr _Pred,
  _Diff _Count, _Temp_iterator < _Ty > & _Tempbuf )
 {
 if ( _Count == 0 )
  return ( _First );
 else if ( _Count == 1 )
  return ( _Pred ( * _First ) ? _Last : _First );
 else if ( _Count <= _Tempbuf . _Maxlen ( ) )
  {
  _BidIt _Next = _First;
  for ( _Tempbuf . _Init ( ); _First != _Last; ++ _First )
   if ( _Pred ( * _First ) )
    * _Next ++ = * _First;
   else
    * _Tempbuf ++ = * _First;

  :: stdext :: unchecked_copy ( _Tempbuf . _First ( ), _Tempbuf . _Last ( ), _Next );
  return ( _Next );
  }
 else
  {
  _BidIt _Mid = _First;
  std :: advance ( _Mid, _Count / 2 );

  _BidIt _Left = _Stable_partition ( _First, _Mid, _Pred,
   _Count / 2, _Tempbuf );
  _BidIt _Right = _Stable_partition ( _Mid, _Last, _Pred,
   _Count - _Count / 2, _Tempbuf );

  _Diff _Count1 = 0;
  _Distance ( _Left, _Mid, _Count1 );
  _Diff _Count2 = 0;
  _Distance ( _Mid, _Right, _Count2 );

  return ( _Buffered_rotate ( _Left, _Mid, _Right,
   _Count1, _Count2, _Tempbuf ) );
  }
 }

template < class _BidIt,
 class _Pr,
 class _Diff,
 class _Ty > inline
 _BidIt _Stable_partition ( _BidIt _First, _BidIt _Last, _Pr _Pred,
  _Diff *, _Ty * )
 {
 _Diff _Count = 0;
 _Distance ( _First, _Last, _Count );
 _Temp_iterator < _Ty > _Tempbuf ( _Count );
 return ( _Stable_partition ( _First, _Last, _Pred, _Count, _Tempbuf ) );
 }

template < class _BidIt,
 class _Pr > inline
 _BidIt stable_partition ( _BidIt _First, _BidIt _Last, _Pr _Pred )
 {
 if ( _First != _Last )
  {
  :: std :: _Checked_assign_from_base ( _First, _Stable_partition ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Pred, _Dist_type ( _First ), _Val_type ( _First ) ) );

  }
 return _First;
 }
#line 1967 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _RanIt,
 class _Diff,
 class _Ty > inline
 void _Push_heap ( _RanIt _First, _Diff _Hole,
  _Diff _Top, _Ty _Val )
 {
 for ( _Diff _Idx = ( _Hole - 1 ) / 2;
  _Top < _Hole && ( ( * ( _First + _Idx ) ) < ( _Val ) );
  _Idx = ( _Hole - 1 ) / 2 )
  {
  * ( _First + _Hole ) = * ( _First + _Idx );
  _Hole = _Idx;
  }

 * ( _First + _Hole ) = _Val;
 }

template < class _RanIt,
 class _Diff,
 class _Ty > inline
 void _Push_heap_0 ( _RanIt _First, _RanIt _Last, _Diff *, _Ty * )
 {
 _Diff _Count = _Last - _First;
 if ( 0 < _Count )
  std :: _Push_heap ( _First, _Count, _Diff ( 0 ), _Ty ( * _Last ) );
 }

template < class _RanIt > inline
 void push_heap ( _RanIt _First, _RanIt _Last )
 {
 ;
 if ( _First != _Last )
  {
  ;
  std :: _Push_heap_0 ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( -- _Last ),
   _Dist_type ( _First ), _Val_type ( _First ) );
  }
 }


template < class _RanIt,
 class _Diff,
 class _Ty,
 class _Pr > inline
 void _Push_heap ( _RanIt _First, _Diff _Hole,
  _Diff _Top, _Ty _Val, _Pr _Pred )
 {
 for ( _Diff _Idx = ( _Hole - 1 ) / 2;
  _Top < _Hole && _Pred ( * ( _First + _Idx ), _Val );
  _Idx = ( _Hole - 1 ) / 2 )
  {
  * ( _First + _Hole ) = * ( _First + _Idx );
  _Hole = _Idx;
  }

 * ( _First + _Hole ) = _Val;
 }

template < class _RanIt,
 class _Diff,
 class _Ty,
 class _Pr > inline
 void _Push_heap_0 ( _RanIt _First, _RanIt _Last, _Pr _Pred, _Diff *, _Ty * )
 {
 _Diff _Count = _Last - _First;
 if ( 0 < _Count )
  std :: _Push_heap ( _First, _Count, _Diff ( 0 ), _Ty ( * _Last ), _Pred );
 }

template < class _RanIt,
 class _Pr > inline
 void push_heap ( _RanIt _First, _RanIt _Last, _Pr _Pred )
 {
 ;
 ;
 if ( _First != _Last )
  {
  ;
  std :: _Push_heap_0 ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( -- _Last ), _Pred,
   _Dist_type ( _First ), _Val_type ( _First ) );
  }
 }


template < class _RanIt,
 class _Diff,
 class _Ty > inline
 void _Adjust_heap ( _RanIt _First, _Diff _Hole, _Diff _Bottom, _Ty _Val )
 {
 _Diff _Top = _Hole;
 _Diff _Idx = 2 * _Hole + 2;

 for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2 )
  {
  if ( ( ( * ( _First + _Idx ) ) < ( * ( _First + ( _Idx - 1 ) ) ) ) )
   -- _Idx;
  * ( _First + _Hole ) = * ( _First + _Idx ), _Hole = _Idx;
  }

 if ( _Idx == _Bottom )
  {
  * ( _First + _Hole ) = * ( _First + ( _Bottom - 1 ) );
  _Hole = _Bottom - 1;
  }
 std :: _Push_heap ( _First, _Hole, _Top, _Val );
 }

template < class _RanIt,
 class _Diff,
 class _Ty > inline
 void _Pop_heap ( _RanIt _First, _RanIt _Last, _RanIt _Dest,
  _Ty _Val, _Diff * )
 {
 * _Dest = * _First;
 std :: _Adjust_heap ( _First, _Diff ( 0 ), _Diff ( _Last - _First ), _Val );
 }

template < class _RanIt,
 class _Ty > inline
 void _Pop_heap_0 ( _RanIt _First, _RanIt _Last, _Ty * )
 {
 _Pop_heap ( _First, _Last - 1, _Last - 1,
  _Ty ( * ( _Last - 1 ) ), _Dist_type ( _First ) );
 }

template < class _RanIt > inline
 void pop_heap ( _RanIt _First, _RanIt _Last )
 {
 ;
 ;
 if ( 1 < _Last - _First )
  _Pop_heap_0 ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Val_type ( _First ) );
 }


template < class _RanIt,
 class _Diff,
 class _Ty,
 class _Pr > inline
 void _Adjust_heap ( _RanIt _First, _Diff _Hole, _Diff _Bottom,
  _Ty _Val, _Pr _Pred )
 {
 _Diff _Top = _Hole;
 _Diff _Idx = 2 * _Hole + 2;

 for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2 )
  {
  if ( _Pred ( * ( _First + _Idx ), * ( _First + ( _Idx - 1 ) ) ) )
   -- _Idx;
  * ( _First + _Hole ) = * ( _First + _Idx ), _Hole = _Idx;
  }

 if ( _Idx == _Bottom )
  {
  * ( _First + _Hole ) = * ( _First + ( _Bottom - 1 ) );
  _Hole = _Bottom - 1;
  }
 std :: _Push_heap ( _First, _Hole, _Top, _Val, _Pred );
 }

template < class _RanIt,
 class _Diff,
 class _Ty,
 class _Pr > inline
 void _Pop_heap ( _RanIt _First, _RanIt _Last, _RanIt _Dest,
  _Ty _Val, _Pr _Pred, _Diff * )
 {
 * _Dest = * _First;
 std :: _Adjust_heap ( _First, _Diff ( 0 ), _Diff ( _Last - _First ),
  _Val, _Pred );
 }

template < class _RanIt,
 class _Ty,
 class _Pr > inline
 void _Pop_heap_0 ( _RanIt _First, _RanIt _Last, _Pr _Pred, _Ty * )
 {
 _Pop_heap ( _First, _Last - 1, _Last - 1,
  _Ty ( * ( _Last - 1 ) ), _Pred, _Dist_type ( _First ) );
 }

template < class _RanIt,
 class _Pr > inline
 void pop_heap ( _RanIt _First, _RanIt _Last, _Pr _Pred )
 {
 ;
 ;
 ;
 if ( 1 < _Last - _First )
  _Pop_heap_0 ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Pred, _Val_type ( _First ) );
 }


template < class _RanIt,
 class _Diff,
 class _Ty > inline
 void _Make_heap ( _RanIt _First, _RanIt _Last, _Diff *, _Ty * )
 {
 _Diff _Bottom = _Last - _First;

 for ( _Diff _Hole = _Bottom / 2; 0 < _Hole; )
  {
  -- _Hole;
  std :: _Adjust_heap ( _First, _Hole, _Bottom,
   _Ty ( * ( _First + _Hole ) ) );
  }
 }

template < class _RanIt > inline
 void make_heap ( _RanIt _First, _RanIt _Last )
 {
 ;
 if ( 1 < _Last - _First )
  _Make_heap ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ),
   _Dist_type ( _First ), _Val_type ( _First ) );
 }


template < class _RanIt,
 class _Diff,
 class _Ty,
 class _Pr > inline
 void _Make_heap ( _RanIt _First, _RanIt _Last, _Pr _Pred, _Diff *, _Ty * )
 {
 _Diff _Bottom = _Last - _First;
 for ( _Diff _Hole = _Bottom / 2; 0 < _Hole; )
  {
  -- _Hole;
  std :: _Adjust_heap ( _First, _Hole, _Bottom,
   _Ty ( * ( _First + _Hole ) ), _Pred );
  }
 }

template < class _RanIt,
 class _Pr > inline
 void make_heap ( _RanIt _First, _RanIt _Last, _Pr _Pred )
 {
 ;
 ;
 if ( 1 < _Last - _First )
  _Make_heap ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Pred,
   _Dist_type ( _First ), _Val_type ( _First ) );
 }


template < class _RanIt > inline
 void _Sort_heap ( _RanIt _First, _RanIt _Last )
 {
 ;
 ;
 for (; 1 < _Last - _First; -- _Last )
  std :: pop_heap ( _First, _Last );
 }

template < class _RanIt > inline
 void sort_heap ( _RanIt _First, _RanIt _Last )
 {
 ;
 _Sort_heap ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ) );
 }


template < class _RanIt,
 class _Pr > inline
 void _Sort_heap ( _RanIt _First, _RanIt _Last, _Pr _Pred )
 {
 for (; 1 < _Last - _First; -- _Last )
  std :: pop_heap ( _First, _Last, _Pred );
 }

template < class _RanIt,
 class _Pr > inline
 void sort_heap ( _RanIt _First, _RanIt _Last, _Pr _Pred )
 {
 ;
 ;
 ;
 _Sort_heap ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Pred );
 }


template < class _FwdIt,
 class _Ty,
 class _Diff > inline
 _FwdIt _Lower_bound ( _FwdIt _First, _FwdIt _Last, const _Ty & _Val, _Diff * )
 {
 ;
 _Diff _Count = 0;
 _Distance ( _First, _Last, _Count );

 for (; 0 < _Count; )
  {
  _Diff _Count2 = _Count / 2;
  _FwdIt _Mid = _First;
  std :: advance ( _Mid, _Count2 );
  ;

  if ( ( ( * _Mid ) < ( _Val ) ) )
   _First = ++ _Mid, _Count -= _Count2 + 1;
  else
   _Count = _Count2;
  }
 return ( _First );
 }

template < class _FwdIt,
 class _Ty > inline
 _FwdIt lower_bound ( _FwdIt _First, _FwdIt _Last, const _Ty & _Val )
 {
 :: std :: _Checked_assign_from_base ( _First, _Lower_bound ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Val, _Dist_type ( _First ) ) );

 return _First;
 }
#line 2282 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _FwdIt,
 class _Ty,
 class _Diff,
 class _Pr > inline
 _FwdIt _Lower_bound ( _FwdIt _First, _FwdIt _Last,
  const _Ty & _Val, _Pr _Pred, _Diff * )
 {
 ;
 ;
 _Diff _Count = 0;
 _Distance ( _First, _Last, _Count );
 for (; 0 < _Count; )
  {
  _Diff _Count2 = _Count / 2;
  _FwdIt _Mid = _First;
  std :: advance ( _Mid, _Count2 );
  ;

  if ( _Pred ( * _Mid, _Val ) )
   _First = ++ _Mid, _Count -= _Count2 + 1;
  else
   _Count = _Count2;
  }
 return ( _First );
 }

template < class _FwdIt,
 class _Ty,
 class _Pr > inline
 _FwdIt lower_bound ( _FwdIt _First, _FwdIt _Last,
  const _Ty & _Val, _Pr _Pred )
 {
 :: std :: _Checked_assign_from_base ( _First, _Lower_bound ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Val, _Pred, _Dist_type ( _First ) ) );

 return _First;
 }
#line 2320 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _FwdIt,
 class _Ty,
 class _Diff > inline
 _FwdIt _Upper_bound ( _FwdIt _First, _FwdIt _Last, const _Ty & _Val, _Diff * )
 {
 ;
 _Diff _Count = 0;
 _Distance ( _First, _Last, _Count );
 for (; 0 < _Count; )
  {
  _Diff _Count2 = _Count / 2;
  _FwdIt _Mid = _First;
  std :: advance ( _Mid, _Count2 );
  ;

  if ( ! ( ( _Val ) < ( * _Mid ) ) )
   _First = ++ _Mid, _Count -= _Count2 + 1;
  else
   _Count = _Count2;
  }
 return ( _First );
 }

template < class _FwdIt,
 class _Ty > inline
 _FwdIt upper_bound ( _FwdIt _First, _FwdIt _Last, const _Ty & _Val )
 {
 :: std :: _Checked_assign_from_base ( _First, _Upper_bound ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Val, _Dist_type ( _First ) ) );

 return _First;
 }
#line 2353 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _FwdIt,
 class _Ty,
 class _Diff,
 class _Pr > inline
 _FwdIt _Upper_bound ( _FwdIt _First, _FwdIt _Last,
  const _Ty & _Val, _Pr _Pred, _Diff * )
 {
 ;
 ;
 _Diff _Count = 0;
 _Distance ( _First, _Last, _Count );
 for (; 0 < _Count; )
  {
  _Diff _Count2 = _Count / 2;
  _FwdIt _Mid = _First;
  std :: advance ( _Mid, _Count2 );
  ;

  if ( ! _Pred ( _Val, * _Mid ) )
   _First = ++ _Mid, _Count -= _Count2 + 1;
  else
   _Count = _Count2;
  }
 return ( _First );
 }

template < class _FwdIt,
 class _Ty,
 class _Pr > inline
 _FwdIt upper_bound ( _FwdIt _First, _FwdIt _Last,
  const _Ty & _Val, _Pr _Pred )
 {
 :: std :: _Checked_assign_from_base ( _First, _Upper_bound ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Val, _Pred, _Dist_type ( _First ) ) );

 return _First;
 }
#line 2391 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _FwdIt,
 class _Ty,
 class _Diff > inline
 pair < _FwdIt, _FwdIt > _Equal_range ( _FwdIt _First, _FwdIt _Last,
  const _Ty & _Val, _Diff * )
 {
 ;
 _Diff _Count = 0;
 _Distance ( _First, _Last, _Count );

 for (; 0 < _Count; )
  {
  _Diff _Count2 = _Count / 2;
  _FwdIt _Mid = _First;
  std :: advance ( _Mid, _Count2 );
  ;

  if ( ( ( * _Mid ) < ( _Val ) ) )
   {
   _First = ++ _Mid;
   _Count -= _Count2 + 1;
   }
  else if ( _Val < * _Mid )
   _Count = _Count2;
  else
   {
   _FwdIt _First2 = lower_bound ( _First, _Mid, _Val );
   std :: advance ( _First, _Count );
   _FwdIt _Last2 = upper_bound ( ++ _Mid, _First, _Val );
   return ( pair < _FwdIt, _FwdIt > ( _First2, _Last2 ) );
   }
  }

 return ( pair < _FwdIt, _FwdIt > ( _First, _First ) );
 }

template < class _FwdIt,
 class _Ty > inline
 pair < _FwdIt, _FwdIt > equal_range ( _FwdIt _First, _FwdIt _Last,
  const _Ty & _Val )
 {
 return ( _Equal_range ( _First, _Last, _Val, _Dist_type ( _First ) ) );
 }


template < class _FwdIt,
 class _Ty,
 class _Diff,
 class _Pr > inline
 pair < _FwdIt, _FwdIt > _Equal_range ( _FwdIt _First, _FwdIt _Last,
  const _Ty & _Val, _Pr _Pred, _Diff * )
 {
 ;
 ;
 _Diff _Count = 0;
 _Distance ( _First, _Last, _Count );

 for (; 0 < _Count; )
  {
  _Diff _Count2 = _Count / 2;
  _FwdIt _Mid = _First;
  std :: advance ( _Mid, _Count2 );
  ;

  if ( _Pred ( * _Mid, _Val ) )
   {
   _First = ++ _Mid;
   _Count -= _Count2 + 1;
   }
  else if ( _Pred ( _Val, * _Mid ) )
   _Count = _Count2;
  else
   {
   _FwdIt _First2 = lower_bound ( _First, _Mid, _Val, _Pred );
   std :: advance ( _First, _Count );
   _FwdIt _Last2 = upper_bound ( ++ _Mid, _First, _Val, _Pred );
   return ( pair < _FwdIt, _FwdIt > ( _First2, _Last2 ) );
   }
  }

 return ( pair < _FwdIt, _FwdIt > ( _First, _First ) );
 }

template < class _FwdIt,
 class _Ty,
 class _Pr > inline
 pair < _FwdIt, _FwdIt > equal_range ( _FwdIt _First, _FwdIt _Last,
  const _Ty & _Val, _Pr _Pred )
 {
 return ( _Equal_range ( _First, _Last, _Val, _Pred, _Dist_type ( _First ) ) );
 }


template < class _FwdIt,
 class _Ty > inline
 bool binary_search ( _FwdIt _First, _FwdIt _Last, const _Ty & _Val )
 {
 _First = std :: lower_bound ( _First, _Last, _Val );
 return ( _First != _Last && ! ( _Val < * _First ) );
 }


template < class _FwdIt,
 class _Ty,
 class _Pr > inline
 bool binary_search ( _FwdIt _First, _FwdIt _Last,
  const _Ty & _Val, _Pr _Pred )
 {
 _First = std :: lower_bound ( _First, _Last, _Val, _Pred );
 return ( _First != _Last && ! _Pred ( _Val, * _First ) );
 }


template < class _InIt1, class _InIt2, class _OutIt, class _InOutItCat >
inline
 _OutIt _Merge ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest,
  _InOutItCat, _Range_checked_iterator_tag )
 {
 ;
 ;
 ;
 for (; _First1 != _Last1 && _First2 != _Last2; ++ _Dest )
  if ( ( ( * _First2 ) < ( * _First1 ) ) )
   * _Dest = * _First2, ++ _First2;
  else
   * _Dest = * _First1, ++ _First1;

 _Dest = :: stdext :: unchecked_copy ( _First1, _Last1, _Dest );
 return ( :: stdext :: unchecked_copy ( _First2, _Last2, _Dest ) );
 }


template < class _InIt1, class _InIt2, class _OutIt >
inline
 _OutIt _Merge ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest,
  random_access_iterator_tag, _Range_checked_iterator_tag )
 {

 _OutIt _Result = _Dest + ( _Last1 - _First1 ) + ( _Last2 - _First2 );
 _Merge ( _First1, _Last1, _First2, _Last2, :: std :: _Checked_base ( _Dest ),
  forward_iterator_tag ( ), _Range_checked_iterator_tag ( ) );
 return _Result;
 }
#line 2540 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _InIt1,
 class _InIt2,
 class _OutIt > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result merge ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest )
 {
 return _Merge ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ), _Dest,
  _Iter_random ( _First1, _First2, _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1, class _InIt2, class _OutElem, size_t _Size >
inline
_OutElem * merge ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutElem ( & _Dest ) [ _Size ] )
 {
 return ( merge ( _First1, _Last1, _First2, _Last2,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ) ) . base ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result merge ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest )
 {
 return _Merge ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ), _Dest,
  _Iter_random ( _First1, _First2, _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }
#line 2588 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _InIt1, class _InIt2, class _OutIt, class _Pr, class _InOutItCat >
inline
 _OutIt _Merge ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred,
  _InOutItCat, _Range_checked_iterator_tag )
 {
 ;
 ;
 ;
 for (; _First1 != _Last1 && _First2 != _Last2; ++ _Dest )
  if ( _Pred ( * _First2, * _First1 ) )
   * _Dest = * _First2, ++ _First2;
  else
   * _Dest = * _First1, ++ _First1;

 _Dest = :: stdext :: unchecked_copy ( _First1, _Last1, _Dest );
 return ( :: stdext :: unchecked_copy ( _First2, _Last2, _Dest ) );
 }


template < class _InIt1, class _InIt2, class _OutIt, class _Pr >
inline
 _OutIt _Merge ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred,
  random_access_iterator_tag, _Range_checked_iterator_tag )
 {

 _OutIt _Result = _Dest + ( _Last1 - _First1 ) + ( _Last2 - _First2 );
 _Merge ( _First1, _Last1, _First2, _Last2, :: std :: _Checked_base ( _Dest ), _Pred,
  forward_iterator_tag ( ), _Range_checked_iterator_tag ( ) );
 return _Result;
 }
#line 2624 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result merge ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred )
 {
 return _Merge ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, _Pred,
  _Iter_random ( _First1, _First2, _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1, class _InIt2, class _OutElem, class _Pr, size_t _Size >
inline
_OutElem * merge ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutElem ( & _Dest ) [ _Size ], _Pr _Pred )
 {
 return ( merge ( _First1, _Last1, _First2, _Last2,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ), _Pred ) . base ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result merge ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred )
 {
 return _Merge ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, _Pred,
  _Iter_random ( _First1, _First2, _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }
#line 2678 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _BidIt,
 class _Diff,
 class _Ty > inline
 _BidIt _Buffered_rotate ( _BidIt _First, _BidIt _Mid, _BidIt _Last,
  _Diff _Count1, _Diff _Count2, _Temp_iterator < _Ty > & _Tempbuf )
 {
 if ( _Count1 <= _Count2 && _Count1 <= _Tempbuf . _Maxlen ( ) )
  {
  :: stdext :: unchecked_copy ( _First, _Mid, _Tempbuf . _Init ( ) );
  :: stdext :: unchecked_copy ( _Mid, _Last, _First );
  return ( :: stdext :: unchecked_copy_backward ( _Tempbuf . _First ( ), _Tempbuf . _Last ( ),
   _Last ) );
  }
 else if ( _Count2 <= _Tempbuf . _Maxlen ( ) )
  {
  :: stdext :: unchecked_copy ( _Mid, _Last, _Tempbuf . _Init ( ) );
  :: stdext :: unchecked_copy_backward ( _First, _Mid, _Last );
  return ( :: stdext :: unchecked_copy ( _Tempbuf . _First ( ), _Tempbuf . _Last ( ), _First ) );
  }
 else
  {
  std :: rotate ( _First, _Mid, _Last );
  std :: advance ( _First, _Count2 );
  return ( _First );
  }
 }

template < class _BidIt1,
 class _BidIt2,
 class _BidIt3 > inline
 _BidIt3 _Merge_backward ( _BidIt1 _First1, _BidIt1 _Last1,
  _BidIt2 _First2, _BidIt2 _Last2, _BidIt3 _Dest, _Range_checked_iterator_tag )
 {
 for (;; )
  if ( _First1 == _Last1 )
   return ( :: stdext :: unchecked_copy_backward ( _First2, _Last2, _Dest ) );
  else if ( _First2 == _Last2 )
   return ( :: stdext :: unchecked_copy_backward ( _First1, _Last1, _Dest ) );
  else if ( ( ( * -- _Last2 ) < ( * -- _Last1 ) ) )
   * -- _Dest = * _Last1, ++ _Last2;
  else
   * -- _Dest = * _Last2, ++ _Last1;
 }



template < class _BidIt1, class _BidIt2, class _BidIt3 >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _BidIt3 > :: _Result, _BidIt3 > :: _Result _Merge_backward ( _BidIt1 _First1, _BidIt1 _Last1,
  _BidIt2 _First2, _BidIt2 _Last2, _BidIt3 _Dest )
 {
  return _Merge_backward ( _First1, _Last1, _First2, _Last2, _Dest, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _BidIt1, class _BidIt2, class _BidIt3 >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _BidIt3 > :: _Result, _BidIt3 > :: _Result _Merge_backward ( _BidIt1 _First1, _BidIt1 _Last1,
  _BidIt2 _First2, _BidIt2 _Last2, _BidIt3 _Dest )
 {
  return _Merge_backward ( _First1, _Last1, _First2, _Last2, _Dest, :: std :: _Range_checked_iterator_tag ( ) );
 }
#line 2753 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _BidIt,
 class _Diff,
 class _Ty > inline
 void _Buffered_merge ( _BidIt _First, _BidIt _Mid, _BidIt _Last,
  _Diff _Count1, _Diff _Count2,
   _Temp_iterator < _Ty > & _Tempbuf )
 {
 if ( _Count1 + _Count2 == 2 )
  {
  if ( ( ( * _Mid ) < ( * _First ) ) )
   std :: iter_swap ( _First, _Mid );
  }
 else if ( _Count1 <= _Count2 && _Count1 <= _Tempbuf . _Maxlen ( ) )
  {
  :: stdext :: unchecked_copy ( _First, _Mid, _Tempbuf . _Init ( ) );
  :: stdext :: unchecked_merge ( _Tempbuf . _First ( ), _Tempbuf . _Last ( ), _Mid, _Last, _First );
  }
 else if ( _Count2 <= _Tempbuf . _Maxlen ( ) )
  {
  :: stdext :: unchecked_copy ( _Mid, _Last, _Tempbuf . _Init ( ) );
  :: stdext :: _Unchecked_merge_backward ( _First, _Mid,
   _Tempbuf . _First ( ), _Tempbuf . _Last ( ), _Last );
  }
 else
  {
  _BidIt _Firstn, _Lastn;
  _Diff _Count1n, _Count2n;

  if ( _Count2 < _Count1 )
   {
   _Count1n = _Count1 / 2, _Count2n = 0;
   _Firstn = _First;
   std :: advance ( _Firstn, _Count1n );
   _Lastn = std :: lower_bound ( _Mid, _Last, * _Firstn );
   _Distance ( _Mid, _Lastn, _Count2n );
   }
  else
   {
   _Count1n = 0, _Count2n = _Count2 / 2;
   _Lastn = _Mid;
   std :: advance ( _Lastn, _Count2n );
   _Firstn = std :: upper_bound ( _First, _Mid, * _Lastn );
   _Distance ( _First, _Firstn, _Count1n );
   }

  _BidIt _Midn = _Buffered_rotate ( _Firstn, _Mid, _Lastn,
   _Count1 - _Count1n, _Count2n, _Tempbuf );
  _Buffered_merge ( _First, _Firstn, _Midn,
   _Count1n, _Count2n, _Tempbuf );
  _Buffered_merge ( _Midn, _Lastn, _Last,
   _Count1 - _Count1n, _Count2 - _Count2n, _Tempbuf );
  }
 }

template < class _BidIt,
 class _Diff,
 class _Ty > inline
 void _Inplace_merge ( _BidIt _First, _BidIt _Mid, _BidIt _Last,
  _Diff *, _Ty * )
 {
 ;
 ;
 _Diff _Count1 = 0;
 _Distance ( _First, _Mid, _Count1 );
 _Diff _Count2 = 0;
 _Distance ( _Mid, _Last, _Count2 );
 _Temp_iterator < _Ty > _Tempbuf ( _Count1 < _Count2 ? _Count1 : _Count2 );
 _Buffered_merge ( _First, _Mid, _Last,
  _Count1, _Count2, _Tempbuf );
 }

template < class _BidIt > inline
 void inplace_merge ( _BidIt _First, _BidIt _Mid, _BidIt _Last )
 {
 if ( _First != _Mid && _Mid != _Last )
  _Inplace_merge ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Mid ), :: std :: _Checked_base ( _Last ),
   _Dist_type ( _First ), _Val_type ( _First ) );
 }


template < class _BidIt1,
 class _BidIt2,
 class _BidIt3,
 class _Pr > inline
 _BidIt3 _Merge_backward ( _BidIt1 _First1, _BidIt1 _Last1,
  _BidIt2 _First2, _BidIt2 _Last2, _BidIt3 _Dest, _Pr _Pred, _Range_checked_iterator_tag )
 {
 for (;; )
  if ( _First1 == _Last1 )
   return ( :: stdext :: unchecked_copy_backward ( _First2, _Last2, _Dest ) );
  else if ( _First2 == _Last2 )
   return ( :: stdext :: unchecked_copy_backward ( _First1, _Last1, _Dest ) );
  else if ( _Pred ( * -- _Last2, * -- _Last1 ) )
   * -- _Dest = * _Last1, ++ _Last2;
  else
   * -- _Dest = * _Last2, ++ _Last1;
 }



template < class _BidIt1, class _BidIt2, class _BidIt3, class _Pr >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _BidIt3 > :: _Result, _BidIt3 > :: _Result _Merge_backward ( _BidIt1 _First1, _BidIt1 _Last1,
  _BidIt2 _First2, _BidIt2 _Last2, _BidIt3 _Dest, _Pr _Pred )
 {
  return _Merge_backward ( _First1, _Last1, _First2, _Last2, _Dest, _Pred, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _BidIt1, class _BidIt2, class _BidIt3, class _Pr >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _BidIt3 > :: _Result, _BidIt3 > :: _Result _Merge_backward ( _BidIt1 _First1, _BidIt1 _Last1,
  _BidIt2 _First2, _BidIt2 _Last2, _BidIt3 _Dest, _Pr _Pred )
 {
  return _Merge_backward ( _First1, _Last1, _First2, _Last2, _Dest, _Pred, :: std :: _Range_checked_iterator_tag ( ) );
 }
#line 2882 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _BidIt,
 class _Diff,
 class _Ty,
 class _Pr > inline
 void _Buffered_merge ( _BidIt _First, _BidIt _Mid, _BidIt _Last,
  _Diff _Count1, _Diff _Count2,
   _Temp_iterator < _Ty > & _Tempbuf, _Pr _Pred )
 {
 if ( _Count1 + _Count2 == 2 )
  {
  if ( _Pred ( * _Mid, * _First ) )
   std :: iter_swap ( _First, _Mid );
  }
 else if ( _Count1 <= _Count2 && _Count1 <= _Tempbuf . _Maxlen ( ) )
  {
  :: stdext :: unchecked_copy ( _First, _Mid, _Tempbuf . _Init ( ) );
  :: stdext :: unchecked_merge ( _Tempbuf . _First ( ), _Tempbuf . _Last ( ),
   _Mid, _Last, _First, _Pred );
  }
 else if ( _Count2 <= _Tempbuf . _Maxlen ( ) )
  {
  :: stdext :: unchecked_copy ( _Mid, _Last, _Tempbuf . _Init ( ) );
  :: stdext :: _Unchecked_merge_backward ( _First, _Mid, _Tempbuf . _First ( ), _Tempbuf . _Last ( ),
   _Last, _Pred );
  }
 else
  {
  _BidIt _Firstn, _Lastn;
  _Diff _Count1n, _Count2n;
  if ( _Count2 < _Count1 )
   {
   _Count1n = _Count1 / 2, _Count2n = 0;
   _Firstn = _First;
   std :: advance ( _Firstn, _Count1n );
   _Lastn = lower_bound ( _Mid, _Last, * _Firstn, _Pred );
   _Distance ( _Mid, _Lastn, _Count2n );
   }
  else
   {
   _Count1n = 0, _Count2n = _Count2 / 2;
   _Lastn = _Mid;
   std :: advance ( _Lastn, _Count2n );
   _Firstn = upper_bound ( _First, _Mid, * _Lastn, _Pred );
   _Distance ( _First, _Firstn, _Count1n );
   }
  _BidIt _Midn = _Buffered_rotate ( _Firstn, _Mid, _Lastn,
   _Count1 - _Count1n, _Count2n, _Tempbuf );
  _Buffered_merge ( _First, _Firstn, _Midn,
   _Count1n, _Count2n, _Tempbuf, _Pred );
  _Buffered_merge ( _Midn, _Lastn, _Last,
   _Count1 - _Count1n, _Count2 - _Count2n, _Tempbuf, _Pred );
  }
 }

template < class _BidIt,
 class _Diff,
 class _Ty,
 class _Pr > inline
 void _Inplace_merge ( _BidIt _First, _BidIt _Mid, _BidIt _Last, _Pr _Pred,
  _Diff *, _Ty * )
 {
 ;
 ;
 _Diff _Count1 = 0;
 _Distance ( _First, _Mid, _Count1 );
 _Diff _Count2 = 0;
 _Distance ( _Mid, _Last, _Count2 );
 _Temp_iterator < _Ty > _Tempbuf ( _Count1 < _Count2 ? _Count1 : _Count2 );
 _Buffered_merge ( _First, _Mid, _Last,
  _Count1, _Count2, _Tempbuf, _Pred );
 }

template < class _BidIt,
 class _Pr > inline
 void inplace_merge ( _BidIt _First, _BidIt _Mid, _BidIt _Last, _Pr _Pred )
 {
 if ( _First != _Mid && _Mid != _Last )
  _Inplace_merge ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Mid ), :: std :: _Checked_base ( _Last ), _Pred,
   _Dist_type ( _First ), _Val_type ( _First ) );
 }


template < class _BidIt,
 class _Ty > inline
 void _Insertion_sort1 ( _BidIt _First, _BidIt _Last, _Ty * )
 {
 if ( _First != _Last )
  for ( _BidIt _Next = _First; ++ _Next != _Last; )
   {
   _BidIt _Next1 = _Next;
   _Ty _Val = * _Next;

   if ( ( ( _Val ) < ( * _First ) ) )
    {
    :: stdext :: unchecked_copy_backward ( _First, _Next, ++ _Next1 );
    * _First = _Val;
    }
   else
    {
    for ( _BidIt _First1 = _Next1;
     ( ( _Val ) < ( * -- _First1 ) );
     _Next1 = _First1 )
     * _Next1 = * _First1;
    * _Next1 = _Val;
    }
   }
 }

template < class _BidIt > inline
 void _Insertion_sort ( _BidIt _First, _BidIt _Last )
 {
 std :: _Insertion_sort1 ( _First, _Last, _Val_type ( _First ) );
 }

template < class _RanIt > inline
 void _Med3 ( _RanIt _First, _RanIt _Mid, _RanIt _Last )
 {
 if ( ( ( * _Mid ) < ( * _First ) ) )
  std :: iter_swap ( _Mid, _First );
 if ( ( ( * _Last ) < ( * _Mid ) ) )
  std :: iter_swap ( _Last, _Mid );
 if ( ( ( * _Mid ) < ( * _First ) ) )
  std :: iter_swap ( _Mid, _First );
 }

template < class _RanIt > inline
 void _Median ( _RanIt _First, _RanIt _Mid, _RanIt _Last )
 {
 if ( 40 < _Last - _First )
  {
  size_t _Step = ( _Last - _First + 1 ) / 8;
  std :: _Med3 ( _First, _First + _Step, _First + 2 * _Step );
  std :: _Med3 ( _Mid - _Step, _Mid, _Mid + _Step );
  std :: _Med3 ( _Last - 2 * _Step, _Last - _Step, _Last );
  std :: _Med3 ( _First + _Step, _Mid, _Last - _Step );
  }
 else
  std :: _Med3 ( _First, _Mid, _Last );
 }

template < class _RanIt > inline
 pair < _RanIt, _RanIt > _Unguarded_partition ( _RanIt _First, _RanIt _Last )
 {
 _RanIt _Mid = _First + ( _Last - _First ) / 2;
 std :: _Median ( _First, _Mid, _Last - 1 );
 _RanIt _Pfirst = _Mid;
 _RanIt _Plast = _Pfirst + 1;

 while ( _First < _Pfirst
  && ! ( ( * ( _Pfirst - 1 ) ) < ( * _Pfirst ) )
  && ! ( * _Pfirst < * ( _Pfirst - 1 ) ) )
  -- _Pfirst;
 while ( _Plast < _Last
  && ! ( ( * _Plast ) < ( * _Pfirst ) )
  && ! ( * _Pfirst < * _Plast ) )
  ++ _Plast;

 _RanIt _Gfirst = _Plast;
 _RanIt _Glast = _Pfirst;

 for (;; )
  {
  for (; _Gfirst < _Last; ++ _Gfirst )
   if ( ( ( * _Pfirst ) < ( * _Gfirst ) ) )
    ;
   else if ( * _Gfirst < * _Pfirst )
    break;
   else
    std :: iter_swap ( _Plast ++, _Gfirst );
  for (; _First < _Glast; -- _Glast )
   if ( ( ( * ( _Glast - 1 ) ) < ( * _Pfirst ) ) )
    ;
   else if ( * _Pfirst < * ( _Glast - 1 ) )
    break;
   else
    std :: iter_swap ( -- _Pfirst, _Glast - 1 );
  if ( _Glast == _First && _Gfirst == _Last )
   return ( pair < _RanIt, _RanIt > ( _Pfirst, _Plast ) );

  if ( _Glast == _First )
   {
   if ( _Plast != _Gfirst )
    std :: iter_swap ( _Pfirst, _Plast );
   ++ _Plast;
   std :: iter_swap ( _Pfirst ++, _Gfirst ++ );
   }
  else if ( _Gfirst == _Last )
   {
   if ( -- _Glast != -- _Pfirst )
    std :: iter_swap ( _Glast, _Pfirst );
   std :: iter_swap ( _Pfirst, -- _Plast );
   }
  else
   std :: iter_swap ( _Gfirst ++, -- _Glast );
  }
 }

template < class _RanIt,
 class _Diff > inline
 void _Sort ( _RanIt _First, _RanIt _Last, _Diff _Ideal )
 {
 _Diff _Count;
 for (; _ISORT_MAX < ( _Count = _Last - _First ) && 0 < _Ideal; )
  {
  pair < _RanIt, _RanIt > _Mid =
   std :: _Unguarded_partition ( _First, _Last );
  _Ideal /= 2, _Ideal += _Ideal / 2;

  if ( _Mid . first - _First < _Last - _Mid . second )
   {
   std :: _Sort ( _First, _Mid . first, _Ideal );
   _First = _Mid . second;
   }
  else
   {
   std :: _Sort ( _Mid . second, _Last, _Ideal );
   _Last = _Mid . first;
   }
  }

 if ( _ISORT_MAX < _Count )
  {
  std :: make_heap ( _First, _Last );
  std :: sort_heap ( _First, _Last );
  }
 else if ( 1 < _Count )
  std :: _Insertion_sort ( _First, _Last );
 }

template < class _RanIt > inline
 void sort ( _RanIt _First, _RanIt _Last )
 {
 ;
 std :: _Sort ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Last - _First );
 }


template < class _BidIt,
 class _Pr,
 class _Ty > inline
 void _Insertion_sort1 ( _BidIt _First, _BidIt _Last, _Pr _Pred, _Ty * )
 {
 if ( _First != _Last )
  for ( _BidIt _Next = _First; ++ _Next != _Last; )
   {
   _BidIt _Next1 = _Next;
   _Ty _Val = * _Next;

   if ( _Pred ( _Val, * _First ) )
    {
    :: stdext :: unchecked_copy_backward ( _First, _Next, ++ _Next1 );
    * _First = _Val;
    }
   else
    {
    for ( _BidIt _First1 = _Next1;
     _Pred ( _Val, * -- _First1 );
     _Next1 = _First1 )
     * _Next1 = * _First1;
    * _Next1 = _Val;
    }
   }
 }

template < class _BidIt,
 class _Pr > inline
 void _Insertion_sort ( _BidIt _First, _BidIt _Last, _Pr _Pred )
 {
 std :: _Insertion_sort1 ( _First, _Last, _Pred, _Val_type ( _First ) );
 }

template < class _RanIt,
 class _Pr > inline
 void _Med3 ( _RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred )
 {
 if ( _Pred ( * _Mid, * _First ) )
  std :: iter_swap ( _Mid, _First );
 if ( _Pred ( * _Last, * _Mid ) )
  std :: iter_swap ( _Last, _Mid );
 if ( _Pred ( * _Mid, * _First ) )
  std :: iter_swap ( _Mid, _First );
 }

template < class _RanIt,
 class _Pr > inline
 void _Median ( _RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred )
 {
 if ( 40 < _Last - _First )
  {
  size_t _Step = ( _Last - _First + 1 ) / 8;
  std :: _Med3 ( _First, _First + _Step, _First + 2 * _Step, _Pred );
  std :: _Med3 ( _Mid - _Step, _Mid, _Mid + _Step, _Pred );
  std :: _Med3 ( _Last - 2 * _Step, _Last - _Step, _Last, _Pred );
  std :: _Med3 ( _First + _Step, _Mid, _Last - _Step, _Pred );
  }
 else
  std :: _Med3 ( _First, _Mid, _Last, _Pred );
 }

template < class _RanIt,
 class _Pr > inline
 pair < _RanIt, _RanIt > _Unguarded_partition ( _RanIt _First, _RanIt _Last,
  _Pr _Pred )
 {
 _RanIt _Mid = _First + ( _Last - _First ) / 2;
 std :: _Median ( _First, _Mid, _Last - 1, _Pred );
 _RanIt _Pfirst = _Mid;
 _RanIt _Plast = _Pfirst + 1;

 while ( _First < _Pfirst
  && ! _Pred ( * ( _Pfirst - 1 ), * _Pfirst )
  && ! _Pred ( * _Pfirst, * ( _Pfirst - 1 ) ) )
  -- _Pfirst;
 while ( _Plast < _Last
  && ! _Pred ( * _Plast, * _Pfirst )
  && ! _Pred ( * _Pfirst, * _Plast ) )
  ++ _Plast;

 _RanIt _Gfirst = _Plast;
 _RanIt _Glast = _Pfirst;

 for (;; )
  {
  for (; _Gfirst < _Last; ++ _Gfirst )
   if ( _Pred ( * _Pfirst, * _Gfirst ) )
    ;
   else if ( _Pred ( * _Gfirst, * _Pfirst ) )
    break;
   else
    std :: iter_swap ( _Plast ++, _Gfirst );
  for (; _First < _Glast; -- _Glast )
   if ( _Pred ( * ( _Glast - 1 ), * _Pfirst ) )
    ;
   else if ( _Pred ( * _Pfirst, * ( _Glast - 1 ) ) )
    break;
   else
    std :: iter_swap ( -- _Pfirst, _Glast - 1 );
  if ( _Glast == _First && _Gfirst == _Last )
   return ( pair < _RanIt, _RanIt > ( _Pfirst, _Plast ) );

  if ( _Glast == _First )
   {
   if ( _Plast != _Gfirst )
    std :: iter_swap ( _Pfirst, _Plast );
   ++ _Plast;
   std :: iter_swap ( _Pfirst ++, _Gfirst ++ );
   }
  else if ( _Gfirst == _Last )
   {
   if ( -- _Glast != -- _Pfirst )
    std :: iter_swap ( _Glast, _Pfirst );
   std :: iter_swap ( _Pfirst, -- _Plast );
   }
  else
   std :: iter_swap ( _Gfirst ++, -- _Glast );
  }
 }

template < class _RanIt,
 class _Diff,
 class _Pr > inline
 void _Sort ( _RanIt _First, _RanIt _Last, _Diff _Ideal, _Pr _Pred )
 {
 _Diff _Count;
 for (; _ISORT_MAX < ( _Count = _Last - _First ) && 0 < _Ideal; )
  {
  pair < _RanIt, _RanIt > _Mid =
   std :: _Unguarded_partition ( _First, _Last, _Pred );
  _Ideal /= 2, _Ideal += _Ideal / 2;

  if ( _Mid . first - _First < _Last - _Mid . second )
   {
   std :: _Sort ( _First, _Mid . first, _Ideal, _Pred );
   _First = _Mid . second;
   }
  else
   {
   std :: _Sort ( _Mid . second, _Last, _Ideal, _Pred );
   _Last = _Mid . first;
   }
  }

 if ( _ISORT_MAX < _Count )
  {
  std :: make_heap ( _First, _Last, _Pred );
  std :: sort_heap ( _First, _Last, _Pred );
  }
 else if ( 1 < _Count )
  std :: _Insertion_sort ( _First, _Last, _Pred );
 }

template < class _RanIt,
 class _Pr > inline
 void sort ( _RanIt _First, _RanIt _Last, _Pr _Pred )
 {
 ;
 ;
 std :: _Sort ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Last - _First, _Pred );
 }


template < class _BidIt,
 class _OutIt,
 class _Diff > inline
 void _Chunked_merge ( _BidIt _First, _BidIt _Last, _OutIt _Dest,
  _Diff _Chunk, _Diff _Count, _Range_checked_iterator_tag )
 {
 for ( _Diff _Chunk2 = _Chunk * 2; _Chunk2 <= _Count; _Count -= _Chunk2 )
  {
  _BidIt _Mid1 = _First;
  std :: advance ( _Mid1, _Chunk );
  _BidIt _Mid2 = _Mid1;
  std :: advance ( _Mid2, _Chunk );

  _Dest = :: stdext :: unchecked_merge ( _First, _Mid1, _Mid1, _Mid2, _Dest );
  _First = _Mid2;
  }

 if ( _Count <= _Chunk )
  :: stdext :: unchecked_copy ( _First, _Last, _Dest );
 else
  {
  _BidIt _Mid = _First;
  std :: advance ( _Mid, _Chunk );

  :: stdext :: unchecked_merge ( _First, _Mid, _Mid, _Last, _Dest );
  }
 }



template < class _BidIt, class _OutIt, class _Diff >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, void > :: _Result _Chunked_merge ( _BidIt _First, _BidIt _Last, _OutIt _Dest,
  _Diff _Chunk, _Diff _Count )
 {
  _Chunked_merge ( _First, _Last, _Dest, _Chunk, _Count, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _BidIt, class _OutElem, class _Diff, size_t _Size >
inline
void _Chunked_merge ( _BidIt _First, _BidIt _Last, _OutElem ( & _Dest ) [ _Size ],
  _Diff _Chunk, _Diff _Count )
 {
  _Chunked_merge ( _First, _Last, :: stdext :: make_checked_array_iterator ( _Dest, _Size ), _Chunk, _Count, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _BidIt, class _OutIt, class _Diff >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, void > :: _Result _Chunked_merge ( _BidIt _First, _BidIt _Last, _OutIt _Dest,
  _Diff _Chunk, _Diff _Count )
 {
  _Chunked_merge ( _First, _Last, _Dest, _Chunk, _Count, :: std :: _Range_checked_iterator_tag ( ) );
 }
#line 3350 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _BidIt,
 class _Diff,
 class _Ty > inline
 void _Buffered_merge_sort ( _BidIt _First, _BidIt _Last, _Diff _Count,
  _Temp_iterator < _Ty > & _Tempbuf )
 {
 _BidIt _Mid = _First;
 for ( _Diff _Nleft = _Count; _ISORT_MAX <= _Nleft; _Nleft -= _ISORT_MAX )
  {
  _BidIt _Midend = _Mid;
  std :: advance ( _Midend, ( int ) _ISORT_MAX );

  std :: _Insertion_sort ( _Mid, _Midend );
  _Mid = _Midend;
  }
 std :: _Insertion_sort ( _Mid, _Last );

 for ( _Diff _Chunk = _ISORT_MAX; _Chunk < _Count; _Chunk *= 2 )
  {
  :: stdext :: _Unchecked_chunked_merge ( _First, _Last, _Tempbuf . _Init ( ),
   _Chunk, _Count );
  :: stdext :: _Unchecked_chunked_merge ( _Tempbuf . _First ( ), _Tempbuf . _Last ( ), _First,
   _Chunk *= 2, _Count );
  }
 }

template < class _BidIt,
 class _Diff,
 class _Ty > inline
 void _Stable_sort ( _BidIt _First, _BidIt _Last, _Diff _Count,
  _Temp_iterator < _Ty > & _Tempbuf )
 {
 if ( _Count <= _ISORT_MAX )
  std :: _Insertion_sort ( _First, _Last );
 else
  {
  _Diff _Count2 = ( _Count + 1 ) / 2;
  _BidIt _Mid = _First;
  std :: advance ( _Mid, _Count2 );

  if ( _Count2 <= _Tempbuf . _Maxlen ( ) )
   {
   _Buffered_merge_sort ( _First, _Mid, _Count2, _Tempbuf );
   _Buffered_merge_sort ( _Mid, _Last, _Count - _Count2, _Tempbuf );
   }
  else
   {
   _Stable_sort ( _First, _Mid, _Count2, _Tempbuf );
   _Stable_sort ( _Mid, _Last, _Count - _Count2, _Tempbuf );
   }

  _Buffered_merge ( _First, _Mid, _Last,
   _Count2, _Count - _Count2, _Tempbuf );
  }
 }

template < class _BidIt,
 class _Diff,
 class _Ty > inline
 void _Stable_sort ( _BidIt _First, _BidIt _Last, _Diff *, _Ty * )
 {
 _Diff _Count = 0;
 _Distance ( _First, _Last, _Count );
 _Temp_iterator < _Ty > _Tempbuf ( ( _Count + 1 ) / 2 );
 _Stable_sort ( _First, _Last, _Count, _Tempbuf );
 }

template < class _BidIt > inline
 void stable_sort ( _BidIt _First, _BidIt _Last )
 {
 ;
 if ( _First != _Last )
  {
  _Stable_sort ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dist_type ( _First ), _Val_type ( _First ) );
  }
 }


template < class _BidIt,
 class _OutIt,
 class _Diff,
 class _Pr > inline
 void _Chunked_merge ( _BidIt _First, _BidIt _Last, _OutIt _Dest,
  _Diff _Chunk, _Diff _Count, _Pr _Pred, _Range_checked_iterator_tag )
 {
 for ( _Diff _Chunk2 = _Chunk * 2; _Chunk2 <= _Count; _Count -= _Chunk2 )
  {
  _BidIt _Mid1 = _First;
  std :: advance ( _Mid1, _Chunk );
  _BidIt _Mid2 = _Mid1;
  std :: advance ( _Mid2, _Chunk );

  _Dest = :: stdext :: unchecked_merge ( _First, _Mid1, _Mid1, _Mid2, _Dest, _Pred );
  _First = _Mid2;
  }

 if ( _Count <= _Chunk )
  :: stdext :: unchecked_copy ( _First, _Last, _Dest );
 else
  {
  _BidIt _Mid1 = _First;
  std :: advance ( _Mid1, _Chunk );

  :: stdext :: unchecked_merge ( _First, _Mid1, _Mid1, _Last, _Dest, _Pred );
  }
 }



template < class _BidIt, class _OutIt, class _Diff, class _Pr >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, void > :: _Result _Chunked_merge ( _BidIt _First, _BidIt _Last, _OutIt _Dest,
  _Diff _Chunk, _Diff _Count, _Pr _Pred )
 {
  _Chunked_merge ( _First, _Last, _Dest, _Chunk, _Count, _Pred, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _BidIt, class _OutElem, class _Diff, class _Pr, size_t _Size >
inline
void _Chunked_merge ( _BidIt _First, _BidIt _Last, _OutElem ( & _Dest ) [ _Size ],
  _Diff _Chunk, _Diff _Count, _Pr _Pred )
 {
  _Chunked_merge ( _First, _Last, :: stdext :: make_checked_array_iterator ( _Dest, _Size ), _Chunk, _Count, _Pred, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _BidIt, class _OutIt, class _Diff, class _Pr >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, void > :: _Result _Chunked_merge ( _BidIt _First, _BidIt _Last, _OutIt _Dest,
  _Diff _Chunk, _Diff _Count, _Pr _Pred )
 {
  _Chunked_merge ( _First, _Last, _Dest, _Chunk, _Count, _Pred, :: std :: _Range_checked_iterator_tag ( ) );
 }
#line 3496 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _BidIt,
 class _Diff,
 class _Ty,
 class _Pr > inline
 void _Buffered_merge_sort ( _BidIt _First, _BidIt _Last, _Diff _Count,
  _Temp_iterator < _Ty > & _Tempbuf, _Pr _Pred )
 {
 _BidIt _Mid = _First;
 for ( _Diff _Nleft = _Count; _ISORT_MAX <= _Nleft; _Nleft -= _ISORT_MAX )
  {
  _BidIt _Midn = _Mid;
  std :: advance ( _Midn, ( int ) _ISORT_MAX );

  std :: _Insertion_sort ( _Mid, _Midn, _Pred );
  _Mid = _Midn;
  }
 std :: _Insertion_sort ( _Mid, _Last, _Pred );

 for ( _Diff _Chunk = _ISORT_MAX; _Chunk < _Count; _Chunk *= 2 )
  {
  :: stdext :: _Unchecked_chunked_merge ( _First, _Last, _Tempbuf . _Init ( ),
   _Chunk, _Count, _Pred );
  :: stdext :: _Unchecked_chunked_merge ( _Tempbuf . _First ( ), _Tempbuf . _Last ( ), _First,
   _Chunk *= 2, _Count, _Pred );
  }
 }

template < class _BidIt,
 class _Diff,
 class _Ty,
 class _Pr > inline
 void _Stable_sort ( _BidIt _First, _BidIt _Last, _Diff _Count,
  _Temp_iterator < _Ty > & _Tempbuf, _Pr _Pred )
 {
 if ( _Count <= _ISORT_MAX )
  std :: _Insertion_sort ( _First, _Last, _Pred );
 else
  {
  _Diff _Count2 = ( _Count + 1 ) / 2;
  _BidIt _Mid = _First;
  std :: advance ( _Mid, _Count2 );

  if ( _Count2 <= _Tempbuf . _Maxlen ( ) )
   {
   _Buffered_merge_sort ( _First, _Mid, _Count2, _Tempbuf, _Pred );
   _Buffered_merge_sort ( _Mid, _Last, _Count - _Count2,
    _Tempbuf, _Pred );
   }
  else
   {
   _Stable_sort ( _First, _Mid, _Count2, _Tempbuf, _Pred );
   _Stable_sort ( _Mid, _Last, _Count - _Count2, _Tempbuf, _Pred );
   }

  _Buffered_merge ( _First, _Mid, _Last,
   _Count2, _Count - _Count2, _Tempbuf, _Pred );
  }
 }

template < class _BidIt,
 class _Diff,
 class _Ty,
 class _Pr > inline
 void _Stable_sort ( _BidIt _First, _BidIt _Last, _Diff *, _Ty *, _Pr _Pred )
 {
 _Diff _Count = 0;
 _Distance ( _First, _Last, _Count );
 _Temp_iterator < _Ty > _Tempbuf ( ( _Count + 1 ) / 2 );
 _Stable_sort ( _First, _Last, _Count, _Tempbuf, _Pred );
 }

template < class _BidIt,
 class _Pr > inline
 void stable_sort ( _BidIt _First, _BidIt _Last, _Pr _Pred )
 {
 ;
 ;
 if ( _First != _Last )
  {
  _Stable_sort ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ),
   _Dist_type ( _First ), _Val_type ( _First ), _Pred );
  }
 }


template < class _RanIt,
 class _Ty > inline
 void _Partial_sort ( _RanIt _First, _RanIt _Mid, _RanIt _Last, _Ty * )
 {
 ;
 ;
 std :: make_heap ( _First, _Mid );

 for ( _RanIt _Next = _Mid; _Next < _Last; ++ _Next )
  if ( ( ( * _Next ) < ( * _First ) ) )
   _Pop_heap ( _First, _Mid, _Next, _Ty ( * _Next ),
    _Dist_type ( _First ) );
 std :: sort_heap ( _First, _Mid );
 }

template < class _RanIt > inline
 void partial_sort ( _RanIt _First, _RanIt _Mid, _RanIt _Last )
 {
 _Partial_sort ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Mid ), :: std :: _Checked_base ( _Last ), _Val_type ( _First ) );
 }


template < class _RanIt,
 class _Ty,
 class _Pr > inline
 void _Partial_sort ( _RanIt _First, _RanIt _Mid, _RanIt _Last,
  _Pr _Pred, _Ty * )
 {
 ;
 ;
 ;
 std :: make_heap ( _First, _Mid, _Pred );

 for ( _RanIt _Next = _Mid; _Next < _Last; ++ _Next )
  if ( _Pred ( * _Next, * _First ) )
   _Pop_heap ( _First, _Mid, _Next, _Ty ( * _Next ), _Pred,
    _Dist_type ( _First ) );
 std :: sort_heap ( _First, _Mid, _Pred );
 }

template < class _RanIt,
 class _Pr > inline
 void partial_sort ( _RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred )
 {
 _Partial_sort ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Mid ), :: std :: _Checked_base ( _Last ), _Pred, _Val_type ( _First ) );
 }


template < class _InIt,
 class _RanIt,
 class _Diff,
 class _Ty > inline
 _RanIt _Partial_sort_copy ( _InIt _First1, _InIt _Last1,
  _RanIt _First2, _RanIt _Last2, _Diff *, _Ty * )
 {
 ;
 ;
 _RanIt _Mid2 = _First2;
 for (; _First1 != _Last1 && _Mid2 != _Last2; ++ _First1, ++ _Mid2 )
  * _Mid2 = * _First1;
 std :: make_heap ( _First2, _Mid2 );

 for (; _First1 != _Last1; ++ _First1 )
  if ( ( ( * _First1 ) < ( * _First2 ) ) )
   std :: _Adjust_heap ( _First2, _Diff ( 0 ), _Diff ( _Mid2 - _First2 ),
    _Ty ( * _First1 ) );

 std :: sort_heap ( _First2, _Mid2 );
 return ( _Mid2 );
 }

template < class _InIt,
 class _RanIt > inline
 _RanIt partial_sort_copy ( _InIt _First1, _InIt _Last1,
  _RanIt _First2, _RanIt _Last2 )
 {
 if ( _First1 != _Last1 && _First2 != _Last2 )
         :: std :: _Checked_assign_from_base ( _First2, _Partial_sort_copy ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ), _Dist_type ( _First2 ), _Val_type ( _First1 ) ) );

 return ( _First2 );
 }
#line 3665 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _InIt,
 class _RanIt,
 class _Diff,
 class _Ty,
 class _Pr > inline
 _RanIt _Partial_sort_copy ( _InIt _First1, _InIt _Last1,
  _RanIt _First2, _RanIt _Last2, _Pr _Pred, _Diff *, _Ty * )
 {
 ;
 ;
 ;
 _RanIt _Mid2 = _First2;
 for (; _First1 != _Last1 && _Mid2 != _Last2; ++ _First1, ++ _Mid2 )
  * _Mid2 = * _First1;
 std :: make_heap ( _First2, _Mid2, _Pred );

 for (; _First1 != _Last1; ++ _First1 )
  if ( _Pred ( * _First1, * _First2 ) )
   std :: _Adjust_heap ( _First2, _Diff ( 0 ), _Diff ( _Mid2 - _First2 ),
    _Ty ( * _First1 ), _Pred );

 std :: sort_heap ( _First2, _Mid2, _Pred );
 return ( _Mid2 );
 }

template < class _InIt,
 class _RanIt,
 class _Pr > inline
 _RanIt partial_sort_copy ( _InIt _First1, _InIt _Last1,
  _RanIt _First2, _RanIt _Last2, _Pr _Pred )
 {
 if ( _First1 != _Last1 && _First2 != _Last2 )
  :: std :: _Checked_assign_from_base ( _First2, _Partial_sort_copy ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ), _Pred, _Dist_type ( _First2 ), _Val_type ( _First1 ) ) );

 return ( _First2 );
 }
#line 3704 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _RanIt > inline
 void _Nth_element ( _RanIt _First, _RanIt _Nth, _RanIt _Last )
 {
 ;
 for (; _ISORT_MAX < _Last - _First; )
  {
  pair < _RanIt, _RanIt > _Mid =
   std :: _Unguarded_partition ( _First, _Last );

  if ( _Mid . second <= _Nth )
   _First = _Mid . second;
  else if ( _Mid . first <= _Nth )
   return;
  else
   _Last = _Mid . first;
  }

 std :: _Insertion_sort ( _First, _Last );
 }

template < class _RanIt > inline
 void nth_element ( _RanIt _First, _RanIt _Nth, _RanIt _Last )
 {
 _Nth_element ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Nth ), :: std :: _Checked_base ( _Last ) );
 }


template < class _RanIt,
 class _Pr > inline
 void _Nth_element ( _RanIt _First, _RanIt _Nth, _RanIt _Last, _Pr _Pred )
 {
 ;
 ;
 for (; _ISORT_MAX < _Last - _First; )
  {
  pair < _RanIt, _RanIt > _Mid =
   std :: _Unguarded_partition ( _First, _Last, _Pred );

  if ( _Mid . second <= _Nth )
   _First = _Mid . second;
  else if ( _Mid . first <= _Nth )
   return;
  else
   _Last = _Mid . first;
  }

 std :: _Insertion_sort ( _First, _Last, _Pred );
 }

template < class _RanIt,
 class _Pr > inline
 void nth_element ( _RanIt _First, _RanIt _Nth, _RanIt _Last, _Pr _Pred )
 {
 _Nth_element ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Nth ), :: std :: _Checked_base ( _Last ), _Pred );
 }


template < class _InIt1,
 class _InIt2 > inline
 bool _Includes ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2 )
 {
 ;
 ;
 for (; _First1 != _Last1 && _First2 != _Last2; )
  if ( ( ( * _First2 ) < ( * _First1 ) ) )
   return ( false );
  else if ( * _First1 < * _First2 )
   ++ _First1;
  else
   ++ _First1, ++ _First2;
 return ( _First2 == _Last2 );
 }

template < class _InIt1,
 class _InIt2 > inline
 bool includes ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2 )
 {
 return _Includes ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ) );
 }


template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Includes ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred )
 {
 ;
 ;
 for (; _First1 != _Last1 && _First2 != _Last2; )
  if ( _Pred ( * _First2, * _First1 ) )
   return ( false );
  else if ( _Pred ( * _First1, * _First2 ) )
   ++ _First1;
  else
   ++ _First1, ++ _First2;
 return ( _First2 == _Last2 );
 }

template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool includes ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred )
 {
 return _Includes ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ), _Pred );
 }


template < class _InIt1,
 class _InIt2,
 class _OutIt > inline
 _OutIt _Set_union ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Range_checked_iterator_tag )
 {
 ;
 ;
 ;
 for (; _First1 != _Last1 && _First2 != _Last2; )
  if ( ( ( * _First1 ) < ( * _First2 ) ) )
   * _Dest ++ = * _First1, ++ _First1;
  else if ( * _First2 < * _First1 )
   * _Dest ++ = * _First2, ++ _First2;
  else
   * _Dest ++ = * _First1, ++ _First1, ++ _First2;
 _Dest = :: stdext :: unchecked_copy ( _First1, _Last1, _Dest );
 return ( :: stdext :: unchecked_copy ( _First2, _Last2, _Dest ) );
 }



template < class _InIt1,
 class _InIt2,
 class _OutIt > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result set_union ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest )
 {
 return _Set_union ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1, class _InIt2, class _OutElem, size_t _Size >
inline
_OutElem * set_union ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutElem ( & _Dest ) [ _Size ] )
 {
 return ( set_union ( _First1, _Last1, _First2, _Last2,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ) ) . base ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result set_union ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest )
 {
 return _Set_union ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, :: std :: _Range_checked_iterator_tag ( ) );
 }
#line 3887 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr > inline
 _OutIt _Set_union ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred, _Range_checked_iterator_tag )
 {
 ;
 ;
 ;
 for (; _First1 != _Last1 && _First2 != _Last2; )
  if ( _Pred ( * _First1, * _First2 ) )
   * _Dest ++ = * _First1, ++ _First1;
  else if ( _Pred ( * _First2, * _First1 ) )
   * _Dest ++ = * _First2, ++ _First2;
  else
   * _Dest ++ = * _First1, ++ _First1, ++ _First2;
 _Dest = :: stdext :: unchecked_copy ( _First1, _Last1, _Dest );
 return ( :: stdext :: unchecked_copy ( _First2, _Last2, _Dest ) );
 }



template < class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result set_union ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred )
 {
 return _Set_union ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, _Pred, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1, class _InIt2, class _OutElem, class _Pr, size_t _Size >
inline
_OutElem * set_union ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutElem ( & _Dest ) [ _Size ], _Pr _Pred )
 {
 return ( set_union ( _First1, _Last1, _First2, _Last2,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ), _Pred ) . base ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result set_union ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred )
 {
 return _Set_union ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, _Pred, :: std :: _Range_checked_iterator_tag ( ) );
 }
#line 3961 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _InIt1,
 class _InIt2,
 class _OutIt > inline
 _OutIt _Set_intersection ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Range_checked_iterator_tag )
 {
 ;
 ;
 ;
 for (; _First1 != _Last1 && _First2 != _Last2; )
  if ( ( ( * _First1 ) < ( * _First2 ) ) )
   ++ _First1;
  else if ( * _First2 < * _First1 )
   ++ _First2;
  else
   * _Dest ++ = * _First1 ++, ++ _First2;
 return ( _Dest );
 }



template < class _InIt1,
 class _InIt2,
 class _OutIt > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result set_intersection ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest )
 {
 return _Set_intersection ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1, class _InIt2, class _OutElem, size_t _Size >
inline
_OutElem * set_intersection ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutElem ( & _Dest ) [ _Size ] )
 {
 return ( set_intersection ( _First1, _Last1, _First2, _Last2,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ) ) . base ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result set_intersection ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest )
 {
 return _Set_intersection ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, :: std :: _Range_checked_iterator_tag ( ) );
 }
#line 4030 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr > inline
 _OutIt _Set_intersection ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred, _Range_checked_iterator_tag )
 {
 ;
 ;
 ;
 for (; _First1 != _Last1 && _First2 != _Last2; )
  if ( _Pred ( * _First1, * _First2 ) )
   ++ _First1;
  else if ( _Pred ( * _First2, * _First1 ) )
   ++ _First2;
  else
   * _Dest ++ = * _First1 ++, ++ _First2;
 return ( _Dest );
 }



template < class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result set_intersection ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred )
 {
 return _Set_intersection ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, _Pred, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1, class _InIt2, class _OutElem, class _Pr, size_t _Size >
inline
_OutElem * set_intersection ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutElem ( & _Dest ) [ _Size ], _Pr _Pred )
 {
 return ( set_intersection ( _First1, _Last1, _First2, _Last2,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ), _Pred ) . base ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result set_intersection ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred )
 {
 return _Set_intersection ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, _Pred, :: std :: _Range_checked_iterator_tag ( ) );
 }
#line 4103 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _InIt1,
 class _InIt2,
 class _OutIt > inline
 _OutIt _Set_difference ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Range_checked_iterator_tag )
 {
 ;
 ;
 ;
 for (; _First1 != _Last1 && _First2 != _Last2; )
  if ( ( ( * _First1 ) < ( * _First2 ) ) )
   * _Dest ++ = * _First1, ++ _First1;
  else if ( * _First2 < * _First1 )
   ++ _First2;
  else
   ++ _First1, ++ _First2;
 return ( :: stdext :: unchecked_copy ( _First1, _Last1, _Dest ) );
 }



template < class _InIt1,
 class _InIt2,
 class _OutIt > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result set_difference ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest )
 {
 return _Set_difference ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1, class _InIt2, class _OutElem, size_t _Size >
inline
_OutElem * set_difference ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutElem ( & _Dest ) [ _Size ] )
 {
 return ( set_difference ( _First1, _Last1, _First2, _Last2,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ) ) . base ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result set_difference ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest )
 {
 return _Set_difference ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, :: std :: _Range_checked_iterator_tag ( ) );
 }
#line 4172 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr > inline
 _OutIt _Set_difference ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred, _Range_checked_iterator_tag )
 {
 ;
 ;
 ;
 for (; _First1 != _Last1 && _First2 != _Last2; )
  if ( _Pred ( * _First1, * _First2 ) )
   * _Dest ++ = * _First1, ++ _First1;
  else if ( _Pred ( * _First2, * _First1 ) )
   ++ _First2;
  else
   ++ _First1, ++ _First2;
 return ( :: stdext :: unchecked_copy ( _First1, _Last1, _Dest ) );
 }



template < class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result set_difference ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred )
 {
 return _Set_difference ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, _Pred, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1, class _InIt2, class _OutElem, class _Pr, size_t _Size >
inline
_OutElem * set_difference ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutElem ( & _Dest ) [ _Size ], _Pr _Pred )
 {
 return ( set_difference ( _First1, _Last1, _First2, _Last2,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ), _Pred ) . base ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result set_difference ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred )
 {
 return _Set_difference ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, _Pred, :: std :: _Range_checked_iterator_tag ( ) );
 }
#line 4245 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _InIt1,
 class _InIt2,
 class _OutIt > inline
 _OutIt _Set_symmetric_difference ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Range_checked_iterator_tag )
 {
 ;
 ;
 ;
 for (; _First1 != _Last1 && _First2 != _Last2; )
  if ( ( ( * _First1 ) < ( * _First2 ) ) )
   * _Dest ++ = * _First1, ++ _First1;
  else if ( * _First2 < * _First1 )
   * _Dest ++ = * _First2, ++ _First2;
  else
   ++ _First1, ++ _First2;
 _Dest = :: stdext :: unchecked_copy ( _First1, _Last1, _Dest );
 return ( :: stdext :: unchecked_copy ( _First2, _Last2, _Dest ) );
 }



template < class _InIt1,
 class _InIt2,
 class _OutIt > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result set_symmetric_difference ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest )
 {
 return _Set_symmetric_difference ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1, class _InIt2, class _OutElem, size_t _Size >
inline
_OutElem * set_symmetric_difference ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutElem ( & _Dest ) [ _Size ] )
 {
 return ( set_symmetric_difference ( _First1, _Last1, _First2, _Last2,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ) ) . base ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result set_symmetric_difference ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest )
 {
 return _Set_symmetric_difference ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, :: std :: _Range_checked_iterator_tag ( ) );
 }
#line 4315 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr > inline
 _OutIt _Set_symmetric_difference ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred, _Range_checked_iterator_tag )
 {
 ;
 ;
 ;
 for (; _First1 != _Last1 && _First2 != _Last2; )
  if ( _Pred ( * _First1, * _First2 ) )
   * _Dest ++ = * _First1, ++ _First1;
  else if ( _Pred ( * _First2, * _First1 ) )
   * _Dest ++ = * _First2, ++ _First2;
  else
   ++ _First1, ++ _First2;
 _Dest = :: stdext :: unchecked_copy ( _First1, _Last1, _Dest );
 return ( :: stdext :: unchecked_copy ( _First2, _Last2, _Dest ) );
 }



template < class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result set_symmetric_difference ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred )
 {
 return _Set_symmetric_difference ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, _Pred, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1, class _InIt2, class _OutElem, class _Pr, size_t _Size >
inline
_OutElem * set_symmetric_difference ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutElem ( & _Dest ) [ _Size ], _Pr _Pred )
 {
 return ( set_symmetric_difference ( _First1, _Last1, _First2, _Last2,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ), _Pred ) . base ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result set_symmetric_difference ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred )
 {
 return _Set_symmetric_difference ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, _Pred, :: std :: _Range_checked_iterator_tag ( ) );
 }
#line 4389 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _FwdIt > inline
 _FwdIt _Max_element ( _FwdIt _First, _FwdIt _Last )
 {
 ;
 _FwdIt _Found = _First;
 if ( _First != _Last )
  for (; ++ _First != _Last; )
   if ( ( ( * _Found ) < ( * _First ) ) )
    _Found = _First;
 return ( _Found );
 }

template < class _FwdIt > inline
 _FwdIt max_element ( _FwdIt _First, _FwdIt _Last )
 {
 :: std :: _Checked_assign_from_base ( _First, _Max_element ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ) ) );

 return ( _First );
 }
#line 4410 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _FwdIt,
 class _Pr > inline
 _FwdIt _Max_element ( _FwdIt _First, _FwdIt _Last, _Pr _Pred )
 {
 ;
 ;
 _FwdIt _Found = _First;
 if ( _First != _Last )
  for (; ++ _First != _Last; )
   if ( _Pred ( * _Found, * _First ) )
    _Found = _First;
 return ( _Found );
 }

template < class _FwdIt,
 class _Pr > inline
 _FwdIt max_element ( _FwdIt _First, _FwdIt _Last, _Pr _Pred )
 {
 :: std :: _Checked_assign_from_base ( _First, _Max_element ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Pred ) );

 return ( _First );
 }
#line 4434 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _FwdIt > inline
 _FwdIt _Min_element ( _FwdIt _First, _FwdIt _Last )
 {
 ;
 _FwdIt _Found = _First;
 if ( _First != _Last )
  for (; ++ _First != _Last; )
   if ( ( ( * _First ) < ( * _Found ) ) )
    _Found = _First;
 return ( _Found );
 }

template < class _FwdIt > inline
 _FwdIt min_element ( _FwdIt _First, _FwdIt _Last )
 {
 :: std :: _Checked_assign_from_base ( _First, _Min_element ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ) ) );

 return ( _First );
 }
#line 4455 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _FwdIt,
 class _Pr > inline
 _FwdIt _Min_element ( _FwdIt _First, _FwdIt _Last, _Pr _Pred )
 {
 ;
 ;
 _FwdIt _Found = _First;
 if ( _First != _Last )
  for (; ++ _First != _Last; )
   if ( _Pred ( * _First, * _Found ) )
    _Found = _First;
 return ( _Found );
 }

template < class _FwdIt,
 class _Pr > inline
 _FwdIt min_element ( _FwdIt _First, _FwdIt _Last, _Pr _Pred )
 {
 :: std :: _Checked_assign_from_base ( _First, _Min_element ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Pred ) );

 return ( _First );
 }
#line 4479 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
template < class _BidIt > inline
 bool _Next_permutation ( _BidIt _First, _BidIt _Last )
 {
 ;
 _BidIt _Next = _Last;
 if ( _First == _Last || _First == -- _Next )
  return ( false );

 for (;; )
  {
  _BidIt _Next1 = _Next;
  if ( ( ( * -- _Next ) < ( * _Next1 ) ) )
   {
   _BidIt _Mid = _Last;
   for (; ! ( ( * _Next ) < ( * -- _Mid ) ); )
    ;
   std :: iter_swap ( _Next, _Mid );
   std :: reverse ( _Next1, _Last );
   return ( true );
   }

  if ( _Next == _First )
   {
   std :: reverse ( _First, _Last );
   return ( false );
   }
  }
 }

template < class _BidIt > inline
 bool next_permutation ( _BidIt _First, _BidIt _Last )
 {
 return _Next_permutation ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ) );
 }


template < class _BidIt,
 class _Pr > inline
 bool _Next_permutation ( _BidIt _First, _BidIt _Last, _Pr _Pred )
 {
 ;
 ;
 _BidIt _Next = _Last;
 if ( _First == _Last || _First == -- _Next )
  return ( false );

 for (;; )
  {
  _BidIt _Next1 = _Next;
  if ( _Pred ( * -- _Next, * _Next1 ) )
   {
   _BidIt _Mid = _Last;
   for (; ! _Pred ( * _Next, * -- _Mid ); )
    ;
   std :: iter_swap ( _Next, _Mid );
   std :: reverse ( _Next1, _Last );
   return ( true );
   }

  if ( _Next == _First )
   {
   std :: reverse ( _First, _Last );
   return ( false );
   }
  }
 }

template < class _BidIt,
 class _Pr > inline
 bool next_permutation ( _BidIt _First, _BidIt _Last, _Pr _Pred )
 {
 return _Next_permutation ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Pred );
 }


template < class _BidIt > inline
 bool _Prev_permutation ( _BidIt _First, _BidIt _Last )
 {
 ;
 _BidIt _Next = _Last;
 if ( _First == _Last || _First == -- _Next )
  return ( false );
 for (;; )
  {
  _BidIt _Next1 = _Next;
  if ( ( ( * _Next1 ) < ( * -- _Next ) ) )
   {
   _BidIt _Mid = _Last;
   for (; ! ( ( * -- _Mid ) < ( * _Next ) ); )
    ;
   std :: iter_swap ( _Next, _Mid );
   std :: reverse ( _Next1, _Last );
   return ( true );
   }

  if ( _Next == _First )
   {
   std :: reverse ( _First, _Last );
   return ( false );
   }
  }
 }

template < class _BidIt > inline
 bool prev_permutation ( _BidIt _First, _BidIt _Last )
 {
 return _Prev_permutation ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ) );
 }


template < class _BidIt,
 class _Pr > inline
 bool _Prev_permutation ( _BidIt _First, _BidIt _Last, _Pr _Pred )
 {
 ;
 ;
 _BidIt _Next = _Last;
 if ( _First == _Last || _First == -- _Next )
  return ( false );

 for (;; )
  {
  _BidIt _Next1 = _Next;
  if ( _Pred ( * _Next1, * -- _Next ) )
   {
   _BidIt _Mid = _Last;
   for (; ! _Pred ( * -- _Mid, * _Next ); )
    ;
   std :: iter_swap ( _Next, _Mid );
   std :: reverse ( _Next1, _Last );
   return ( true );
   }

  if ( _Next == _First )
   {
   std :: reverse ( _First, _Last );
   return ( false );
   }
  }
 }

template < class _BidIt,
 class _Pr > inline
 bool prev_permutation ( _BidIt _First, _BidIt _Last, _Pr _Pred )
 {
 return _Prev_permutation ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Pred );
 }

}

namespace stdext { 

template < class _InIt, class _OutIt, class _Fn1 >
inline
 _OutIt unchecked_transform ( _InIt _First, _InIt _Last, _OutIt _Dest, _Fn1 _Func )
 {
  return :: std :: _Transform ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Func,
   :: std :: _Iter_random ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt, class _OutIt, class _Fn1 >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_transform ( _InIt _First, _InIt _Last, _OutIt _Dest, _Fn1 _Func )
 {
 return :: std :: _Transform ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Func,
  :: std :: _Iter_random ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt, class _OutElem, class _Fn1, size_t _Size >
inline
_OutElem * checked_transform ( _InIt _First, _InIt _Last, _OutElem ( & _Dest ) [ _Size ], _Fn1 _Func )
 {
 return ( checked_transform ( _First, _Last,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ), _Func ) . base ( ) );
 }

template < class _InIt, class _OutIt, class _Fn1 >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_transform ( _InIt _First, _InIt _Last, _OutIt _Dest, _Fn1 _Func )
 {
 return :: std :: _Transform ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Func,
  :: std :: _Iter_random ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1, class _InIt2, class _OutIt, class _Fn2 >
inline
 _OutIt unchecked_transform ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2,
  _OutIt _Dest, _Fn2 _Func )
 {
  return :: std :: _Transform ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _First2, _Dest, _Func,
   :: std :: _Iter_random ( _First1, _First2 ), :: std :: _Iter_random ( _First1, _Dest ),
   :: std :: _Range_checked_iterator_tag ( ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1, class _InIt2, class _OutIt, class _Fn2 >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _InIt2 > :: _Result && :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_transform ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2,
  _OutIt _Dest, _Fn2 _Func )
 {
 return :: std :: _Transform ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _First2, _Dest, _Func,
  :: std :: _Iter_random ( _First1, _First2 ), :: std :: _Iter_random ( _First1, _Dest ),
  :: std :: _Range_checked_iterator_tag ( ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1, class _InElem2, class _OutElem, class _Fn2, size_t _SizeFirst2, size_t _SizeDest >
inline
_OutElem * checked_transform ( _InIt1 _First1, _InIt1 _Last1, _InElem2 ( & _First2 ) [ _SizeFirst2 ],
  _OutElem ( & _Dest ) [ _SizeDest ], _Fn2 _Func )
 {
 return ( checked_transform ( _First1, _Last1,
  :: stdext :: make_checked_array_iterator ( _First2, _SizeFirst2 ),
  :: stdext :: make_checked_array_iterator ( _Dest, _SizeDest ),
  _Func ) . base ( ) );
 }

template < class _InIt1, class _InIt2, class _OutElem, class _Fn2, size_t _SizeDest >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _InIt2 > :: _Result, _OutElem * > :: _Result checked_transform ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2,
  _OutElem ( & _Dest ) [ _SizeDest ], _Fn2 _Func )
 {
 return ( :: std :: _Transform ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _First2,
  :: stdext :: make_checked_array_iterator ( _Dest, _SizeDest ), _Func,
  :: std :: _Iter_random ( _First1, _First2 ), :: std :: _Iter_cat ( _First1 ),
  :: std :: _Range_checked_iterator_tag ( ), :: std :: _Range_checked_iterator_tag ( ) ) . base ( ) );
 }

template < class _InIt1, class _InIt2, class _OutElem, class _Fn2, size_t _SizeDest >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _InIt2 > :: _Result, _OutElem * > :: _Result checked_transform ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2,
  _OutElem ( & _Dest ) [ _SizeDest ], _Fn2 _Func )
 {
 return ( :: std :: _Transform ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _First2,
  :: stdext :: make_checked_array_iterator ( _Dest, _SizeDest ), _Func,
  :: std :: _Iter_random ( _First1, _First2 ), :: std :: _Iter_cat ( _First1 ),
  :: std :: _Range_checked_iterator_tag ( ), :: std :: _Range_checked_iterator_tag ( ) ) . base ( ) );
 }

template < class _InIt1, class _InElem2, class _OutIt, class _Fn2, size_t _SizeFirst2 >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_transform ( _InIt1 _First1, _InIt1 _Last1, _InElem2 ( & _First2 ) [ _SizeFirst2 ],
  _OutIt _Dest, _Fn2 _Func )
 {
 return ( :: std :: _Transform ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: stdext :: make_checked_array_iterator ( _First2, _SizeFirst2 ),
  _Dest, _Func,
  :: std :: _Iter_cat ( _First1 ), :: std :: _Iter_random ( _First1, _Dest ),
  :: std :: _Range_checked_iterator_tag ( ), :: std :: _Range_checked_iterator_tag ( ) ) );
 }

template < class _InIt1, class _InElem2, class _OutIt, class _Fn2, size_t _SizeFirst2 >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_transform ( _InIt1 _First1, _InIt1 _Last1, _InElem2 ( & _First2 ) [ _SizeFirst2 ],
  _OutIt _Dest, _Fn2 _Func )
 {
 return ( :: std :: _Transform ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: stdext :: make_checked_array_iterator ( _First2, _SizeFirst2 ),
  _Dest, _Func,
  :: std :: _Iter_cat ( _First1 ), :: std :: _Iter_random ( _First1, _Dest ),
  :: std :: _Range_checked_iterator_tag ( ), :: std :: _Range_checked_iterator_tag ( ) ) );
 }

template < class _InIt1, class _InIt2, class _OutIt, class _Fn2 >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _InIt2 > :: _Result || ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_transform ( _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2,
  _OutIt _Dest, _Fn2 _Func )
 {
 return :: std :: _Transform ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _First2, _Dest, _Func,
  :: std :: _Iter_random ( _First1, _First2 ), :: std :: _Iter_random ( _First1, _Dest ),
  :: std :: _Range_checked_iterator_tag ( ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _FwdIt1, class _FwdIt2 >
inline
 _FwdIt2 unchecked_swap_ranges ( _FwdIt1 _First1, _FwdIt1 _Last1, _FwdIt2 _First2 )
 {
  return :: std :: _Swap_ranges ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _First2,
   :: std :: _Iter_random ( _First1, _First2 ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _FwdIt1, class _FwdIt2 >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _FwdIt2 > :: _Result, _FwdIt2 > :: _Result checked_swap_ranges ( _FwdIt1 _First1, _FwdIt1 _Last1, _FwdIt2 _First2 )
 {
  return :: std :: _Swap_ranges ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _First2,
   :: std :: _Iter_random ( _First1, _First2 ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _FwdIt1, class _FwdElem2, size_t _Size >
inline
_FwdElem2 * checked_swap_ranges ( _FwdIt1 _First1, _FwdIt1 _Last1, _FwdElem2 ( & _First2 ) [ _Size ] )
 {
  return ( checked_swap_ranges ( _First1, _Last1, :: stdext :: make_checked_array_iterator ( _First2, _Size ) ) . base ( ) );
 }

template < class _FwdIt1, class _FwdIt2 >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _FwdIt2 > :: _Result, _FwdIt2 > :: _Result checked_swap_ranges ( _FwdIt1 _First1, _FwdIt1 _Last1, _FwdIt2 _First2 )
 {
  return :: std :: _Swap_ranges ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), _First2,
   :: std :: _Iter_random ( _First1, _First2 ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt,
 class _OutIt,
 class _Ty > inline
 _OutIt unchecked_replace_copy ( _InIt _First, _InIt _Last, _OutIt _Dest,
  const _Ty & _Oldval, const _Ty & _Newval )
 {
  return :: std :: _Replace_copy ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Oldval, _Newval,
   :: std :: _Iter_random ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt,
 class _OutIt,
 class _Ty > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_replace_copy ( _InIt _First, _InIt _Last, _OutIt _Dest,
  const _Ty & _Oldval, const _Ty & _Newval )
 {
 return :: std :: _Replace_copy ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Oldval, _Newval,
  :: std :: _Iter_random ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt, class _OutElem, class _Ty, size_t _Size >
inline
_OutElem * checked_replace_copy ( _InIt _First, _InIt _Last, _OutElem ( & _Dest ) [ _Size ],
  const _Ty & _Oldval, const _Ty & _Newval )
 {
 return ( checked_replace_copy ( _First, _Last,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ),
  _Oldval, _Newval ) . base ( ) );
 }

template < class _InIt,
 class _OutIt,
 class _Ty > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_replace_copy ( _InIt _First, _InIt _Last, _OutIt _Dest,
  const _Ty & _Oldval, const _Ty & _Newval )
 {
 return :: std :: _Replace_copy ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Oldval, _Newval,
  :: std :: _Iter_random ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt,
 class _OutIt,
 class _Pr,
 class _Ty > inline
 _OutIt unchecked_replace_copy_if ( _InIt _First, _InIt _Last, _OutIt _Dest,
  _Pr _Pred, const _Ty & _Val )
 {
  return :: std :: _Replace_copy_if ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Pred, _Val,
   :: std :: _Iter_random ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt,
 class _OutIt,
 class _Pr,
 class _Ty > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_replace_copy_if ( _InIt _First, _InIt _Last, _OutIt _Dest,
  _Pr _Pred, const _Ty & _Val )
 {
 return :: std :: _Replace_copy_if ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Pred, _Val,
  :: std :: _Iter_random ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt, class _OutElem, class _Pr, class _Ty, size_t _Size >
inline
_OutElem * checked_replace_copy_if ( _InIt _First, _InIt _Last, _OutElem ( & _Dest ) [ _Size ],
  _Pr _Pred, const _Ty & _Val )
 {
 return ( checked_replace_copy_if ( _First, _Last,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ),
  _Pred, _Val ) . base ( ) );
 }

template < class _InIt,
 class _OutIt,
 class _Pr,
 class _Ty > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_replace_copy_if ( _InIt _First, _InIt _Last, _OutIt _Dest,
  _Pr _Pred, const _Ty & _Val )
 {
 return :: std :: _Replace_copy_if ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Pred, _Val,
  :: std :: _Iter_random ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _OutIt,
 class _Diff,
 class _Fn0 > inline
 void unchecked_generate_n ( _OutIt _Dest, _Diff _Count, _Fn0 _Func )
 {
  :: std :: _Generate_n ( _Dest, _Count, _Func,
   :: std :: _Iter_cat ( _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _OutIt,
 class _Diff,
 class _Fn0 > inline
void checked_generate_n ( _OutIt _Dest, _Diff _Count, _Fn0 _Func, typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _Diff > :: _Result = 0 )
 {
 :: std :: _Generate_n ( _Dest, _Count, _Func,
  :: std :: _Iter_cat ( _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _OutElem, class _Diff, class _Fn0, size_t _Size >
inline
void checked_generate_n ( _OutElem ( & _Dest ) [ _Size ], _Diff _Count, _Fn0 _Func )
 {
 checked_generate_n ( :: stdext :: make_checked_array_iterator ( _Dest, _Size ), _Count, _Func );
 }

template < class _OutIt,
 class _Diff,
 class _Fn0 > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
void checked_generate_n ( _OutIt _Dest, _Diff _Count, _Fn0 _Func, typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _Diff > :: _Result = 0 )
 {
 :: std :: _Generate_n ( _Dest, _Count, _Func,
  :: std :: _Iter_cat ( _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt,
 class _OutIt,
 class _Ty > inline
 _OutIt unchecked_remove_copy ( _InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty & _Val )
 {
  return :: std :: _Remove_copy ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Val,
   :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt,
 class _OutIt,
 class _Ty > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_remove_copy ( _InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty & _Val )
 {
 return :: std :: _Remove_copy ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Val, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt, class _OutElem, class _Ty, size_t _Size >
inline
_OutElem * checked_remove_copy ( _InIt _First, _InIt _Last,
  _OutElem ( & _Dest ) [ _Size ], const _Ty & _Val )
 {
 return ( checked_remove_copy ( _First, _Last,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ),
  _Val ) . base ( ) );
 }

template < class _InIt,
 class _OutIt,
 class _Ty > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_remove_copy ( _InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty & _Val )
 {
 return :: std :: _Remove_copy ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Val, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt,
 class _OutIt,
 class _Pr > inline
 _OutIt unchecked_remove_copy_if ( _InIt _First, _InIt _Last, _OutIt _Dest, _Pr _Pred )
 {
  return :: std :: _Remove_copy_if ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Pred,
   :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt,
 class _OutIt,
 class _Pr > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_remove_copy_if ( _InIt _First, _InIt _Last, _OutIt _Dest, _Pr _Pred )
 {
 return :: std :: _Remove_copy_if ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Pred, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt, class _OutElem, class _Pr, size_t _Size >
inline
_OutElem * checked_remove_copy_if ( _InIt _First, _InIt _Last, _OutElem ( & _Dest ) [ _Size ], _Pr _Pred )
 {
 return ( checked_remove_copy_if ( _First, _Last,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ), _Pred ) . base ( ) );
 }

template < class _InIt,
 class _OutIt,
 class _Pr > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_remove_copy_if ( _InIt _First, _InIt _Last, _OutIt _Dest, _Pr _Pred )
 {
 return :: std :: _Remove_copy_if ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Pred, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt,
 class _OutIt > inline
 _OutIt unchecked_unique_copy ( _InIt _First, _InIt _Last, _OutIt _Dest )
 {
 return ( _First == _Last ? _Dest :
  :: std :: _Unique_copy ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest,
   :: std :: _Iter_cat ( _First ), :: std :: _Range_checked_iterator_tag ( ) ) );
 }

template < class _InIt,
 class _OutIt > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_unique_copy ( _InIt _First, _InIt _Last, _OutIt _Dest )
 {
 return ( _First == _Last ? _Dest :
  :: std :: _Unique_copy ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, :: std :: _Iter_cat ( _First ), :: std :: _Range_checked_iterator_tag ( ) ) );
 }

template < class _InIt, class _OutElem, size_t _Size >
inline
_OutElem * checked_unique_copy ( _InIt _First, _InIt _Last, _OutElem ( & _Dest ) [ _Size ] )
 {
 return ( _First == _Last ? _Dest :
  ( checked_unique_copy ( _First, _Last, :: stdext :: make_checked_array_iterator ( _Dest, _Size ) ) . base ( ) ) );
 }

template < class _InIt,
 class _OutIt > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_unique_copy ( _InIt _First, _InIt _Last, _OutIt _Dest )
 {
 return ( _First == _Last ? _Dest :
  :: std :: _Unique_copy ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, :: std :: _Iter_cat ( _First ), :: std :: _Range_checked_iterator_tag ( ) ) );
 }

template < class _InIt,
 class _OutIt,
 class _Pr > inline
 _OutIt unchecked_unique_copy ( _InIt _First, _InIt _Last, _OutIt _Dest, _Pr _Pred )
 {
 return ( _First == _Last ? _Dest
  : :: std :: _Unique_copy ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Pred,
   :: std :: _Iter_cat ( _First ), :: std :: _Range_checked_iterator_tag ( ) ) );
 }

template < class _InIt,
 class _OutIt,
 class _Pr > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_unique_copy ( _InIt _First, _InIt _Last, _OutIt _Dest, _Pr _Pred )
 {
 return ( _First == _Last ? _Dest
  : :: std :: _Unique_copy ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Pred, :: std :: _Iter_cat ( _First ), :: std :: _Range_checked_iterator_tag ( ) ) );
 }

template < class _InIt, class _OutElem, class _Pr, size_t _Size >
inline
_OutElem * checked_unique_copy ( _InIt _First, _InIt _Last, _OutElem ( & _Dest ) [ _Size ], _Pr _Pred )
 {
 return ( _First == _Last ? _Dest
  : ( checked_unique_copy ( _First, _Last, :: stdext :: make_checked_array_iterator ( _Dest, _Size ), _Pred ) . base ( ) ) );
 }

template < class _InIt,
 class _OutIt,
 class _Pr > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_unique_copy ( _InIt _First, _InIt _Last, _OutIt _Dest, _Pr _Pred )
 {
 return ( _First == _Last ? _Dest
  : :: std :: _Unique_copy ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, _Pred, :: std :: _Iter_cat ( _First ), :: std :: _Range_checked_iterator_tag ( ) ) );
 }

template < class _BidIt,
 class _OutIt > inline
 _OutIt unchecked_reverse_copy ( _BidIt _First, _BidIt _Last, _OutIt _Dest )
 {
  return :: std :: _Reverse_copy ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest,
   :: std :: _Iter_random ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _BidIt,
 class _OutIt > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_reverse_copy ( _BidIt _First, _BidIt _Last, _OutIt _Dest )
 {
 return :: std :: _Reverse_copy ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, :: std :: _Iter_random ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _BidIt, class _OutElem, size_t _Size >
inline
_OutElem * checked_reverse_copy ( _BidIt _First, _BidIt _Last, _OutElem ( & _Dest ) [ _Size ] )
 {
 return ( checked_reverse_copy ( _First, _Last, :: stdext :: make_checked_array_iterator ( _Dest, _Size ) ) . base ( ) );
 }

template < class _BidIt,
 class _OutIt > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_reverse_copy ( _BidIt _First, _BidIt _Last, _OutIt _Dest )
 {
 return :: std :: _Reverse_copy ( :: std :: _Checked_base ( _First ), :: std :: _Checked_base ( _Last ), _Dest, :: std :: _Iter_random ( _First, _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _FwdIt,
 class _OutIt > inline
 _OutIt unchecked_rotate_copy ( _FwdIt _First, _FwdIt _Mid, _FwdIt _Last, _OutIt _Dest )
 {
  return :: std :: _Rotate_copy ( _First, _Mid, _Last, _Dest, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _FwdIt, class _OutIt >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_rotate_copy ( _FwdIt _First, _FwdIt _Mid, _FwdIt _Last, _OutIt _Dest )
 {
  return :: std :: _Rotate_copy ( _First, _Mid, _Last, _Dest, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _FwdIt, class _OutElem, size_t _Size >
inline
_OutElem * checked_rotate_copy ( _FwdIt _First, _FwdIt _Mid, _FwdIt _Last, _OutElem ( & _Dest ) [ _Size ] )
 {
  return ( checked_rotate_copy ( _First, _Mid, _Last, :: stdext :: make_checked_array_iterator ( _Dest, _Size ) ) . base ( ) );
 }

template < class _FwdIt, class _OutIt >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_rotate_copy ( _FwdIt _First, _FwdIt _Mid, _FwdIt _Last, _OutIt _Dest )
 {
  return :: std :: _Rotate_copy ( _First, _Mid, _Last, _Dest, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt > inline
 _OutIt unchecked_merge ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest )
 {
  return :: std :: _Merge ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ), _Dest,
   :: std :: _Iter_random ( _First1, _First2, _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_merge ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest )
 {
 return :: std :: _Merge ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ), _Dest,
  :: std :: _Iter_random ( _First1, _First2, _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1, class _InIt2, class _OutElem, size_t _Size >
inline
_OutElem * checked_merge ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutElem ( & _Dest ) [ _Size ] )
 {
 return ( checked_merge ( _First1, _Last1, _First2, _Last2,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ) ) . base ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_merge ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest )
 {
 return :: std :: _Merge ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ), _Dest,
  :: std :: _Iter_random ( _First1, _First2, _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr > inline
 _OutIt unchecked_merge ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred )
 {
  return :: std :: _Merge ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ), _Dest, _Pred,
   :: std :: _Iter_random ( _First1, _First2, _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_merge ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred )
 {
 return :: std :: _Merge ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, _Pred,
  :: std :: _Iter_random ( _First1, _First2, _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1, class _InIt2, class _OutElem, class _Pr, size_t _Size >
inline
_OutElem * checked_merge ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutElem ( & _Dest ) [ _Size ], _Pr _Pred )
 {
 return ( checked_merge ( _First1, _Last1, _First2, _Last2,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ), _Pred ) . base ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_merge ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred )
 {
 return :: std :: _Merge ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, _Pred,
  :: std :: _Iter_random ( _First1, _First2, _Dest ), :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _BidIt1, class _BidIt2, class _BidIt3 >
inline
 _BidIt3 _Unchecked_merge_backward ( _BidIt1 _First1, _BidIt1 _Last1,
  _BidIt2 _First2, _BidIt2 _Last2, _BidIt3 _Dest )
 {
  return :: std :: _Merge_backward ( _First1, _Last1, _First2, _Last2, _Dest, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _BidIt1, class _BidIt2, class _BidIt3 >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _BidIt3 > :: _Result, _BidIt3 > :: _Result _Checked_merge_backward ( _BidIt1 _First1, _BidIt1 _Last1,
  _BidIt2 _First2, _BidIt2 _Last2, _BidIt3 _Dest )
 {
  return :: std :: _Merge_backward ( _First1, _Last1, _First2, _Last2, _Dest, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _BidIt1, class _BidIt2, class _BidIt3 >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _BidIt3 > :: _Result, _BidIt3 > :: _Result _Checked_merge_backward ( _BidIt1 _First1, _BidIt1 _Last1,
  _BidIt2 _First2, _BidIt2 _Last2, _BidIt3 _Dest )
 {
  return :: std :: _Merge_backward ( _First1, _Last1, _First2, _Last2, _Dest, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _BidIt1, class _BidIt2, class _BidIt3, class _Pr >
inline
 _BidIt3 _Unchecked_merge_backward ( _BidIt1 _First1, _BidIt1 _Last1,
  _BidIt2 _First2, _BidIt2 _Last2, _BidIt3 _Dest, _Pr _Pred )
 {
  return :: std :: _Merge_backward ( _First1, _Last1, _First2, _Last2, _Dest, _Pred, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _BidIt1, class _BidIt2, class _BidIt3, class _Pr >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _BidIt3 > :: _Result, _BidIt3 > :: _Result _Checked_merge_backward ( _BidIt1 _First1, _BidIt1 _Last1,
  _BidIt2 _First2, _BidIt2 _Last2, _BidIt3 _Dest, _Pr _Pred )
 {
  return :: std :: _Merge_backward ( _First1, _Last1, _First2, _Last2, _Dest, _Pred, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _BidIt1, class _BidIt2, class _BidIt3, class _Pr >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _BidIt3 > :: _Result, _BidIt3 > :: _Result _Checked_merge_backward ( _BidIt1 _First1, _BidIt1 _Last1,
  _BidIt2 _First2, _BidIt2 _Last2, _BidIt3 _Dest, _Pr _Pred )
 {
  return :: std :: _Merge_backward ( _First1, _Last1, _First2, _Last2, _Dest, _Pred, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _BidIt, class _OutIt, class _Diff >
inline
 void _Unchecked_chunked_merge ( _BidIt _First, _BidIt _Last, _OutIt _Dest,
  _Diff _Chunk, _Diff _Count )
 {
  :: std :: _Chunked_merge ( _First, _Last, _Dest, _Chunk, _Count, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _BidIt, class _OutIt, class _Diff >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, void > :: _Result _Checked_chunked_merge ( _BidIt _First, _BidIt _Last, _OutIt _Dest,
  _Diff _Chunk, _Diff _Count )
 {
  :: std :: _Chunked_merge ( _First, _Last, _Dest, _Chunk, _Count, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _BidIt, class _OutElem, class _Diff, size_t _Size >
inline
void _Checked_chunked_merge ( _BidIt _First, _BidIt _Last, _OutElem ( & _Dest ) [ _Size ],
  _Diff _Chunk, _Diff _Count )
 {
  :: std :: _Chunked_merge ( _First, _Last, :: stdext :: make_checked_array_iterator ( _Dest, _Size ), _Chunk, _Count, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _BidIt, class _OutIt, class _Diff >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, void > :: _Result _Checked_chunked_merge ( _BidIt _First, _BidIt _Last, _OutIt _Dest,
  _Diff _Chunk, _Diff _Count )
 {
  :: std :: _Chunked_merge ( _First, _Last, _Dest, _Chunk, _Count, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _BidIt, class _OutIt, class _Diff, class _Pr >
inline
 void _Unchecked_chunked_merge ( _BidIt _First, _BidIt _Last, _OutIt _Dest,
  _Diff _Chunk, _Diff _Count, _Pr _Pred )
 {
  :: std :: _Chunked_merge ( _First, _Last, _Dest, _Chunk, _Count, _Pred, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _BidIt, class _OutIt, class _Diff, class _Pr >
inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, void > :: _Result _Checked_chunked_merge ( _BidIt _First, _BidIt _Last, _OutIt _Dest,
  _Diff _Chunk, _Diff _Count, _Pr _Pred )
 {
  :: std :: _Chunked_merge ( _First, _Last, _Dest, _Chunk, _Count, _Pred, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _BidIt, class _OutElem, class _Diff, class _Pr, size_t _Size >
inline
void _Checked_chunked_merge ( _BidIt _First, _BidIt _Last, _OutElem ( & _Dest ) [ _Size ],
  _Diff _Chunk, _Diff _Count, _Pr _Pred )
 {
  :: std :: _Chunked_merge ( _First, _Last, :: stdext :: make_checked_array_iterator ( _Dest, _Size ), _Chunk, _Count, _Pred, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _BidIt, class _OutIt, class _Diff, class _Pr >
inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, void > :: _Result _Checked_chunked_merge ( _BidIt _First, _BidIt _Last, _OutIt _Dest,
  _Diff _Chunk, _Diff _Count, _Pr _Pred )
 {
  :: std :: _Chunked_merge ( _First, _Last, _Dest, _Chunk, _Count, _Pred, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt > inline
 _OutIt unchecked_set_union ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest )
 {
  return :: std :: _Set_union ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ), _Dest,
   :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_set_union ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest )
 {
 return :: std :: _Set_union ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1, class _InIt2, class _OutElem, size_t _Size >
inline
_OutElem * checked_set_union ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutElem ( & _Dest ) [ _Size ] )
 {
 return ( checked_set_union ( _First1, _Last1, _First2, _Last2,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ) ) . base ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_set_union ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest )
 {
 return :: std :: _Set_union ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr > inline
 _OutIt unchecked_set_union ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred )
 {
  return :: std :: _Set_union ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ), _Dest, _Pred,
   :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_set_union ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred )
 {
 return :: std :: _Set_union ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, _Pred, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1, class _InIt2, class _OutElem, class _Pr, size_t _Size >
inline
_OutElem * checked_set_union ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutElem ( & _Dest ) [ _Size ], _Pr _Pred )
 {
 return ( checked_set_union ( _First1, _Last1, _First2, _Last2,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ), _Pred ) . base ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_set_union ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred )
 {
 return :: std :: _Set_union ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, _Pred, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt > inline
 _OutIt unchecked_set_intersection ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest )
 {
  return :: std :: _Set_intersection ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ), _Dest,
   :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_set_intersection ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest )
 {
 return :: std :: _Set_intersection ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1, class _InIt2, class _OutElem, size_t _Size >
inline
_OutElem * checked_set_intersection ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutElem ( & _Dest ) [ _Size ] )
 {
 return ( checked_set_intersection ( _First1, _Last1, _First2, _Last2,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ) ) . base ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_set_intersection ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest )
 {
 return :: std :: _Set_intersection ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr > inline
 _OutIt unchecked_set_intersection ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred )
 {
  return :: std :: _Set_intersection ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ), _Dest, _Pred,
   :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_set_intersection ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred )
 {
 return :: std :: _Set_intersection ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, _Pred, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1, class _InIt2, class _OutElem, class _Pr, size_t _Size >
inline
_OutElem * checked_set_intersection ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutElem ( & _Dest ) [ _Size ], _Pr _Pred )
 {
 return ( checked_set_intersection ( _First1, _Last1, _First2, _Last2,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ), _Pred ) . base ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_set_intersection ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred )
 {
 return :: std :: _Set_intersection ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, _Pred, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt > inline
 _OutIt unchecked_set_difference ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest )
 {
  return :: std :: _Set_difference ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ), _Dest,
   :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_set_difference ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest )
 {
 return :: std :: _Set_difference ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1, class _InIt2, class _OutElem, size_t _Size >
inline
_OutElem * checked_set_difference ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutElem ( & _Dest ) [ _Size ] )
 {
 return ( checked_set_difference ( _First1, _Last1, _First2, _Last2,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ) ) . base ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_set_difference ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest )
 {
 return :: std :: _Set_difference ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr > inline
 _OutIt unchecked_set_difference ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred )
 {
  return :: std :: _Set_difference ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ), _Dest, _Pred,
   :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_set_difference ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred )
 {
 return :: std :: _Set_difference ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, _Pred, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1, class _InIt2, class _OutElem, class _Pr, size_t _Size >
inline
_OutElem * checked_set_difference ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutElem ( & _Dest ) [ _Size ], _Pr _Pred )
 {
 return ( checked_set_difference ( _First1, _Last1, _First2, _Last2,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ), _Pred ) . base ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_set_difference ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred )
 {
 return :: std :: _Set_difference ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, _Pred, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt > inline
 _OutIt unchecked_set_symmetric_difference ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest )
 {
  return :: std :: _Set_symmetric_difference ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ), _Dest,
   :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_set_symmetric_difference ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest )
 {
 return :: std :: _Set_symmetric_difference ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1, class _InIt2, class _OutElem, size_t _Size >
inline
_OutElem * checked_set_symmetric_difference ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutElem ( & _Dest ) [ _Size ] )
 {
 return ( checked_set_symmetric_difference ( _First1, _Last1, _First2, _Last2,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ) ) . base ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_set_symmetric_difference ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest )
 {
 return :: std :: _Set_symmetric_difference ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr > inline
 _OutIt unchecked_set_symmetric_difference ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred )
 {
  return :: std :: _Set_symmetric_difference ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ), :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ), _Dest, _Pred,
   :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr > inline
typename :: std :: _Enable_if < :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_set_symmetric_difference ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred )
 {
 return :: std :: _Set_symmetric_difference ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, _Pred, :: std :: _Range_checked_iterator_tag ( ) );
 }

template < class _InIt1, class _InIt2, class _OutElem, class _Pr, size_t _Size >
inline
_OutElem * checked_set_symmetric_difference ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutElem ( & _Dest ) [ _Size ], _Pr _Pred )
 {
 return ( checked_set_symmetric_difference ( _First1, _Last1, _First2, _Last2,
  :: stdext :: make_checked_array_iterator ( _Dest, _Size ), _Pred ) . base ( ) );
 }

template < class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr > inline
__declspec ( deprecated ( "Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. T" "o disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ \'Checked Iterators\'" ) )
typename :: std :: _Enable_if < ! :: std :: _Is_checked_iterator < _OutIt > :: _Result, _OutIt > :: _Result checked_set_symmetric_difference ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred )
 {
 return :: std :: _Set_symmetric_difference ( :: std :: _Checked_base ( _First1 ), :: std :: _Checked_base ( _Last1 ),
  :: std :: _Checked_base ( _First2 ), :: std :: _Checked_base ( _Last2 ),
  _Dest, _Pred, :: std :: _Range_checked_iterator_tag ( ) );
 }
#line 5765 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\algorithm"
}

#pragma warning(default: 4244)


#pragma warning(pop)
#pragma pack ( pop )
#line 52 "d:\\lab2\\fim\\meshfim_cuda_partition_color_square_modifiedb_modifieddatastucture_globalco\\trimesh2\\include\\Vec.h"
using std::min;
using std::max;
using std::swap;
#line 71 "d:\\lab2\\fim\\meshfim_cuda_partition_color_square_modifiedb_modifieddatastucture_globalco\\trimesh2\\include\\Vec.h"
template<bool X> struct VEC_STATIC_ASSERTION_FAILURE; 
template<> struct VEC_STATIC_ASSERTION_FAILURE< true>  { 
void operator()() { } }; 



template<int D, class T> 
class Vec { 

T v[D]; 



public: Vec() { for (int i = 0; i < D; i++) { ((this->v)[i]) = ((T)(0)); }  } 


Vec(T x, T y) 
{ VEC_STATIC_ASSERTION_FAILURE< (D == 2)> (); ((this->v)[0]) = x; ((this->v)[1]) = y; } 
Vec(T x, T y, T z) 
{ VEC_STATIC_ASSERTION_FAILURE< (D == 3)> (); ((this->v)[0]) = x; ((this->v)[1]) = y; ((this->v)[2]) = z; } 
Vec(T x, T y, T z, T w) 
{ VEC_STATIC_ASSERTION_FAILURE< (D == 4)> (); ((this->v)[0]) = x; ((this->v)[1]) = y; ((this->v)[2]) = z; ((this->v)[3]) = w; } 



template<class S> explicit Vec(const S &x) 
{ for (int i = 0; i < D; i++) { ((this->v)[i]) = ((T)(x[i])); }  } 




const T &operator[](int i) const 
{ return (this->v)[i]; } 
T &operator[](int i) 
{ return (this->v)[i]; } 
operator const T *() const 
{ return this->v; } 
operator const T *() 
{ return this->v; } 
operator T *() 
{ return this->v; } 


::Vec< D, T>  &operator+=(const ::Vec< D, T>  &x) 
{ for (int i = 0; i < D; i++) { ((this->v)[i]) += x[i]; }  return *this; } 
::Vec< D, T>  &operator-=(const ::Vec< D, T>  &x) 
{ for (int i = 0; i < D; i++) { ((this->v)[i]) -= x[i]; }  return *this; } 
::Vec< D, T>  &operator*=(const ::Vec< D, T>  &x) 
{ for (int i = 0; i < D; i++) { ((this->v)[i]) *= x[i]; }  return *this; } 
::Vec< D, T>  &operator*=(const T &x) 
{ for (int i = 0; i < D; i++) { ((this->v)[i]) *= x; }  return *this; } 
::Vec< D, T>  &operator/=(const ::Vec< D, T>  &x) 
{ for (int i = 0; i < D; i++) { ((this->v)[i]) /= x[i]; }  return *this; } 
::Vec< D, T>  &operator/=(const T &x) 
{ for (int i = 0; i < D; i++) { ((this->v)[i]) /= x; }  return *this; } 




typedef T value_type; 
size_t size() const 
{ return D; } 
T sum() const 
{ auto T total = ((this->v)[0]); 
for (int i = 1; i < D; i++) { total += (this->v)[i]; }  
return total; } 
T avg() const 
{ return this->sum() / D; } 
T product() const 
{ auto T total = ((this->v)[0]); 
for (int i = 1; i < D; i++) { total *= (this->v)[i]; }  
return total; } 
T min() const 
{ auto T m = ((this->v)[0]); 
for (int i = 0; i < D; i++) { 
if ((this->v)[i] < m) { m = (this->v)[i]; }  }  
return m; } 
T max() const 
{ auto T m = ((this->v)[0]); 
for (int i = 1; i < D; i++) { 
if ((this->v)[i] > m) { m = (this->v)[i]; }  }  
return m; } 
T *begin() { return &((this->v)[0]); } 
const T *begin() const { return &((this->v)[0]); } 
T *end() { return this->begin() + D; } 
const T *end() const { return this->begin() + D; } 
void clear() { for (int i = 0; i < D; i++) { ((this->v)[i]) = ((T)(0)); }  } 
bool empty() const 
{ for (int i = 0; i < D; i++) { 
if ((this->v)[i]) { return false; }  }  
return true; } 
}; 

typedef Vec< 3, float>  vec; 
typedef Vec< 3, float>  point; 
typedef Vec< 2, float>  vec2; 
typedef Vec< 3, float>  vec3; 
typedef Vec< 4, float>  vec4; 
typedef Vec< 2, int>  ivec2; 
typedef Vec< 3, int>  ivec3; 
typedef Vec< 4, int>  ivec4; 



template<int D, class T> static inline const Vec< D, T>  
operator+(const Vec< D, T>  &v1, const Vec< D, T>  &v2) 
{ 
return ((Vec< D, T> )(v1)) += v2; 
} 

template<int D, class T> static inline const Vec< D, T>  
operator-(const Vec< D, T>  &v1, const Vec< D, T>  &v2) 
{ 
return ((Vec< D, T> )(v1)) -= v2; 
} 

template<int D, class T> static inline const Vec< D, T>  
operator*(const Vec< D, T>  &v1, const Vec< D, T>  &v2) 
{ 
return ((Vec< D, T> )(v1)) *= v2; 
} 

template<int D, class T> static inline const Vec< D, T>  
operator/(const Vec< D, T>  &v1, const Vec< D, T>  &v2) 
{ 
return ((Vec< D, T> )(v1)) /= v2; 
} 

template<int D, class T> static inline const T 
operator^(const Vec< D, T>  &v1, const Vec< D, T>  &v2) 
{ 
auto T sum = (v1[0] * v2[0]); 
for (int i = 1; i < D; i++) { 
sum += v1[i] * v2[i]; }  
return sum; 
} 


template<class T> static inline const Vec< 3, T>  
operator%(const Vec< 3, T>  &v1, const Vec< 3, T>  &v2) 
{ 
return Vec< 3, T> (v1[1] * v2[2] - v1[2] * v2[1], v1[2] * v2[0] - v1[0] * v2[2], v1[0] * v2[1] - v1[1] * v2[0]); 


} 
#line 221
template<int D, class T> static inline bool 
operator==(const Vec< D, T>  &v1, const Vec< D, T>  &v2) 
{ 
for (int i = 0; i < D; i++) { 
if (v1[i] != v2[i]) { 
return false; }  }  
return true; 
} 

template<int D, class T> static inline bool 
operator!=(const Vec< D, T>  &v1, const Vec< D, T>  &v2) 
{ 
for (int i = 0; i < D; i++) { 
if (v1[i] != v2[i]) { 
return true; }  }  
return false; 
} 



template<int D, class T> static inline const Vec< D, T>  &
operator+(const Vec< D, T>  &v) 
{ 
return v; 
} 

template<int D, class T> static inline const Vec< D, T>  
operator-(const Vec< D, T>  &v) 
{ 
auto Vec< D, T>  result(v); 
for (int i = 0; i < D; i++) { 
(result[i]) = -result[i]; }  
return result; 
} 

template<int D, class T> static inline bool 
operator!(const Vec< D, T>  &v) 
{ 
return (v.empty()); 
} 



template<int D, class T> static inline const Vec< D, T>  
operator*(const T &x, const Vec< D, T>  &v) 
{ 
auto Vec< D, T>  result(v); 
for (int i = 0; i < D; i++) { 
(result[i]) = x * result[i]; }  
return result; 
} 

template<int D, class T> static inline const Vec< D, T>  
operator*(const Vec< D, T>  &v, const T &x) 
{ 
return ((Vec< D, T> )(v)) *= x; 
} 

template<int D, class T> static inline const Vec< D, T>  
operator/(const T &x, const Vec< D, T>  &v) 
{ 
auto Vec< D, T>  result(v); 
for (int i = 0; i < D; i++) { 
(result[i]) = x / result[i]; }  
return result; 
} 

template<int D, class T> static inline const Vec< D, T>  
operator/(const Vec< D, T>  &v, const T &x) 
{ 
return ((Vec< D, T> )(v)) /= x; 
} 



template<int D, class T> static inline std::ostream &
operator<<(std::ostream &os, const Vec< D, T>  &v) 

{ 
(os << ("(")); 
for (int i = 0; i < (D - 1); i++) { 
(os << (v[i])) << ", "; }  
return (os << (v[D - 1])) << ")"; 
} 

template<int D, class T> static inline std::istream &
operator>>(std::istream &is, Vec< D, T>  &v) 
{ 
auto char c1 = (0); auto char c2 = (0); 

(is >> c1); 
if ((c1 == ('(')) || (c1 == ('['))) { 
((is >> (v[0])) >> (&std::ws)) >> c2; 
for (int i = 1; i < D; i++) { 
if (c2 == (',')) { 
((is >> (v[i])) >> (&std::ws)) >> c2; } else { 

is.setstate((std::_Iosb< int> ::_Iostate)2); }  
}  
}  

if ((c1 == ('(')) && (c2 != (')'))) { 
is.setstate((std::_Iosb< int> ::_Iostate)2); } else { 
if ((c1 == ('[')) && (c2 != (']'))) { 
is.setstate((std::_Iosb< int> ::_Iostate)2); }  }  

return is; 
} 



template<class T> static inline T 
sqr(const T &x) 
{ 
return x * x; 
} 

template<class T> static inline T 
cube(const T &x) 
{ 
return (x * x) * x; 
} 



template<class T> static inline T 
fract(const T &x) 
{ 
return x - floor(x); 
} 

template<class T> static inline T 
clamp(const T &x, const T &a, const T &b) 
{ 
return (x > a) ? ((x < b) ? x : b) : a; 
} 

template<class T, class S> static inline T 
mix(const T &x, const T &y, const S &a) 
{ 
return (((S)(1)) - a) * x + a * y; 
} 

template<class T> static inline T 
step(const T &x, const T &a) 
{ 
return (x < a) ? ((T)(0)) : ((T)(1)); 
} 

template<class T> static inline T 
smoothstep(const T &x, const T &a, const T &b) 
{ 
if (b <= a) { return step(x, a); }  
auto T t = ((x - a) / (b - a)); 
return (t <= ((T)(0))) ? ((T)(0)) : ((t >= ((T)(1))) ? ((T)(1)) : ((t * t) * (((T)(3)) - ((T)(2)) * t))); 
} 


template<class T> static inline T 
trinorm(const T &v0, const T &v1, const T &v2) 
{ 
return ((typename T::value_type)(0.5)) * ((v1 - v0) % (v2 - v0)); 
} 


template<class T> static inline T 
sgn(const T &x) 
{ 
return (x < ((T)(0))) ? ((T)(-1)) : ((T)(1)); 
} 



template<int D, class T> static inline const T 
len2(const Vec< D, T>  &v) 
{ 
auto T l2 = (v[0] * v[0]); 
for (int i = 1; i < D; i++) { 
l2 += v[i] * v[i]; }  
return l2; 
} 

template<int D, class T> static inline const T 
len(const Vec< D, T>  &v) 
{ 
return sqrt(len2(v)); 
} 

template<int D, class T> static inline const T 
dist2(const Vec< D, T>  &v1, const Vec< D, T>  &v2) 
{ 
auto T d2 = (sqr(v2[0] - v1[0])); 
for (int i = 1; i < D; i++) { 
d2 += sqr(v2[i] - v1[i]); }  
return d2; 
} 

template<int D, class T> static inline const T 
dist(const Vec< D, T>  &v1, const Vec< D, T>  &v2) 
{ 
return sqrt(dist2(v1, v2)); 
} 

template<int D, class T> static inline Vec< D, T>  
normalize(Vec< D, T>  &v) 
{ 
auto T l = (len(v)); 
if (l <= ((T)(0))) { 
(v[0]) = ((T)(1)); 
for (int i = 1; i < D; i++) { 
(v[i]) = ((T)(0)); }  
return v; 
}  

l = ((T)(1)) / l; 
for (int i = 0; i < D; i++) { 
(v[i]) *= l; }  

return v; 
} 

template<int D, class T> static inline void 
swap(const Vec< D, T>  &v1, const Vec< D, T>  &v2) 
{ 
for (int i = 0; i < D; i++) { 
swap(v1[i], v2[i]); }  
} 

template<int D, class T> static inline Vec< D, T>  
fabs(const Vec< D, T>  &v) 
{ 
auto Vec< D, T>  result(v); 
for (int i = 0; i < D; i++) { 
if (result[i] < ((T)(0))) { 
(result[i]) = -result[i]; }  }  
return result; 
} 
#line 23 "d:\\lab2\\fim\\meshfim_cuda_partition_color_square_modifiedb_modifieddatastucture_globalco\\trimesh2\\include\\Color.h"
class Color : public Vec< 3, float>  { 

public: Color() 
{ } 
Color(const ::Vec< 3, float>  &v_) : ::Vec< 3, float> ((v_)) 
{ } 
Color(const ::Vec< 3, double>  &v_) : ::Vec< 3, float> ((float)(v_[0]), (float)(v_[1]), (float)(v_[2])) 
{ } 
Color(float r, float g, float b) : ::Vec< 3, float> (r, g, b) 
{ } 
Color(double r, double g, double b) : ::Vec< 3, float> ((float)r, (float)g, (float)b) 
{ } 
explicit Color(const float *rgb) : ::Vec< 3, float> (rgb[0], rgb[1], rgb[2]) 
{ } 
explicit Color(const double *rgb) : ::Vec< 3, float> ((float)(rgb[0]), (float)(rgb[1]), (float)(rgb[2])) 
{ } 



explicit Color(float c) : ::Vec< 3, float> (c, c, c) 
{ } 
explicit Color(double c) : ::Vec< 3, float> ((float)c, (float)c, (float)c) 
{ } 
Color &operator=(float c) 
{ return (*this) = ((Color)(c)); } 
Color &operator=(double c) 
{ return (*this) = ((Color)(c)); } 


Color(int r, int g, int b) 
{ 
auto const float mult = ((1.0F) / (255.0F)); 
(*this) = Color(mult * r, mult * g, mult * b); 
} 
explicit Color(const int *rgb) 
{ (*this) = Color(rgb[0], rgb[1], rgb[2]); } 
explicit Color(const unsigned char *rgb) 
{ (*this) = Color(rgb[0], rgb[1], rgb[2]); } 
explicit Color(int c) 
{ (*this) = Color(c, c, c); } 
Color &operator=(int c) 
{ return (*this) = ((Color)(c)); } 

static Color black() 
{ return Color((0.0F), (0.0F), (0.0F)); } 
static Color white() 
{ return Color((1.0F), (1.0F), (1.0F)); } 
static Color red() 
{ return Color((1.0F), (0.0F), (0.0F)); } 
static Color green() 
{ return Color((0.0F), (1.0F), (0.0F)); } 
static Color blue() 
{ return Color((0.0F), (0.0F), (1.0F)); } 
static Color yellow() 
{ return Color((1.0F), (1.0F), (0.0F)); } 
static Color cyan() 
{ return Color((0.0F), (1.0F), (1.0F)); } 
static Color magenta() 
{ return Color((1.0F), (0.0F), (1.0F)); } 
static Color hsv(float h, float s, float v) 
{ 

if (s <= (0.0F)) { 
return Color(v, v, v); }  
h = fmod(h, (float)(((2.0F)) * (3.1415926535897931))); 
if (h < (0.0)) { 
h += ((float)((2.0) * (3.1415926535897931))); }  
h /= ((float)((3.1415926535897931) / (3.0))); 
auto int i = ((int)floor(h)); 
auto float f = (h - i); 
auto float p = (v * ((1.0F) - s)); 
auto float q = (v * ((1.0F) - s * f)); 
auto float t = (v * ((1.0F) - s * ((1.0F) - f))); 
switch (i) { 
case 0: return Color(v, t, p); 
case 1: return Color(q, v, p); 
case 2: return Color(p, v, t); 
case 3: return Color(p, q, v); 
case 4: return Color(t, p, v); 
default: return Color(v, p, q); 
}  
} 
}; 
#line 11 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\vector"
#pragma warning(push,3)
#pragma warning(disable: 4244)
#line 10
#pragma pack ( push, 8 )
#line 15 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\vector"
namespace std { 
template < class _Ty,
 class _Ax = allocator < _Ty > >
 class vector;


template < class _Ty,
 class _Alloc >
 class _Vector_const_iterator
  : public _Ranit < _Ty, typename _Alloc :: difference_type,
   typename _Alloc :: const_pointer, typename _Alloc :: const_reference >
 {
public :
 typedef _Vector_const_iterator < _Ty, _Alloc > _Myt;
 typedef vector < _Ty, _Alloc > _Myvec;
 typedef typename _Alloc :: pointer _Tptr;

 typedef random_access_iterator_tag iterator_category;
 typedef _Ty value_type;
 typedef typename _Alloc :: difference_type difference_type;
 typedef typename _Alloc :: const_pointer pointer;
 typedef typename _Alloc :: const_reference reference;


 typedef _Range_checked_iterator_tag _Checked_iterator_category;



 typedef pointer _Checked_iterator_base_type;

 _Checked_iterator_base_type _Checked_iterator_base ( ) const
 {
  return _Myptr;
 }

 void _Checked_iterator_assign_from_base ( _Checked_iterator_base_type _Base )
 {
  this -> _Myptr = const_cast < _Tptr > ( _Base );
 }






 typedef _Tptr _Inner_type;

 _Vector_const_iterator ( )
  {
  _Myptr = 0;
  }










 _Vector_const_iterator ( _Tptr _Ptr, const _Container_base * _Pvector )
  {
  { if ( ! ( _Pvector != 0 && ( ( _Myvec * ) _Pvector ) -> _Myfirst <= _Ptr && _Ptr <= ( ( _Myvec * ) _Pvector ) -> _Mylast ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  this -> _Set_container ( _Pvector );
  _Myptr = _Ptr;
  }








 reference operator * ( ) const
  {










   { if ( ! ( this -> _Has_container ( ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  { if ( ! ( _Myptr < ( ( _Myvec * ) ( this -> _Getmycont ( ) ) ) -> _Mylast ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };


  return ( * _Myptr );
  }

 pointer operator -> ( ) const
  {
  return ( & * * this );
  }

 _Myt & operator ++ ( )
  {
  { if ( ! ( this -> _Has_container ( ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  { if ( ! ( _Myptr < ( ( _Myvec * ) ( this -> _Getmycont ( ) ) ) -> _Mylast ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };







  ++ _Myptr;
  return ( * this );
  }

 _Myt operator ++ ( int )
  {
  _Myt _Tmp = * this;
  ++ * this;
  return ( _Tmp );
  }

 _Myt & operator -- ( )
  {
  { if ( ! ( this -> _Has_container ( ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  { if ( ! ( _Myptr > ( ( _Myvec * ) ( this -> _Getmycont ( ) ) ) -> _Myfirst ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };







  -- _Myptr;
  return ( * this );
  }

 _Myt operator -- ( int )
  {
  _Myt _Tmp = * this;
  -- * this;
  return ( _Tmp );
  }

 _Myt & operator += ( difference_type _Off )
  {
  { if ( ! ( this -> _Has_container ( ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  { if ( ! ( _Myptr + _Off <= ( ( _Myvec * ) ( this -> _Getmycont ( ) ) ) -> _Mylast && _Myptr + _Off >= ( ( _Myvec * ) ( this -> _Getmycont ( ) ) ) -> _Myfirst ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };

  _Myptr += _Off;
  return ( * this );
  }

 _Myt operator + ( difference_type _Off ) const
  {
  _Myt _Tmp = * this;
  return ( _Tmp += _Off );
  }

 _Myt & operator -= ( difference_type _Off )
  {
  return ( * this += - _Off );
  }

 _Myt operator - ( difference_type _Off ) const
  {
  _Myt _Tmp = * this;
  return ( _Tmp -= _Off );
  }

 difference_type operator - ( const _Myt & _Right ) const
  {




  { if ( ! ( this -> _Has_container ( ) && this -> _Same_container ( _Right ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };


  return ( _Myptr - _Right . _Myptr );
  }

 reference operator [ ] ( difference_type _Off ) const
  {
  return ( * ( * this + _Off ) );
  }

 bool operator == ( const _Myt & _Right ) const
  {




  { if ( ! ( this -> _Has_container ( ) && this -> _Same_container ( _Right ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };


  return ( _Myptr == _Right . _Myptr );
  }

 bool operator != ( const _Myt & _Right ) const
  {
  return ( ! ( * this == _Right ) );
  }

 bool operator < ( const _Myt & _Right ) const
  {




  { if ( ! ( this -> _Has_container ( ) && this -> _Same_container ( _Right ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };


  return ( _Myptr < _Right . _Myptr );
  }

 bool operator > ( const _Myt & _Right ) const
  {
  return ( _Right < * this );
  }

 bool operator <= ( const _Myt & _Right ) const
  {
  return ( ! ( _Right < * this ) );
  }

 bool operator >= ( const _Myt & _Right ) const
  {
  return ( ! ( * this < _Right ) );
  }












 static void _Xlen ( )
  {
  throw length_error ( "vector<T> too long" );
  }

 static void _Xran ( )
  {
  throw out_of_range ( "invalid vector<T> subscript" );
  }

 static void _Xinvarg ( )
  {
  throw invalid_argument ( "invalid vector<T> argument" );
  }

 _Tptr _Myptr;
 };
#line 275 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\vector"
template < class _Ty,
 class _Alloc > inline
 _Vector_const_iterator < _Ty, _Alloc > operator + (
  typename _Vector_const_iterator < _Ty, _Alloc > :: difference_type _Off,
  _Vector_const_iterator < _Ty, _Alloc > _Next )
 {
 return ( _Next += _Off );
 }


template < class _Ty,
 class _Alloc >
 class _Vector_iterator
  : public _Vector_const_iterator < _Ty, _Alloc >
 {
public :
 typedef _Vector_iterator < _Ty, _Alloc > _Myt;
 typedef _Vector_const_iterator < _Ty, _Alloc > _Mybase;

 typedef random_access_iterator_tag iterator_category;
 typedef _Ty value_type;
 typedef typename _Alloc :: difference_type difference_type;
 typedef typename _Alloc :: pointer pointer;
 typedef typename _Alloc :: reference reference;


 typedef pointer _Checked_iterator_base_type;

 _Checked_iterator_base_type _Checked_iterator_base ( ) const
  {
  return ( this -> _Myptr );
  }

 void _Checked_iterator_assign_from_base ( _Checked_iterator_base_type _Base )
  {
  this -> _Myptr = _Base;
  }


 _Vector_iterator ( )
  {
  }








 _Vector_iterator ( pointer _Ptr, const _Container_base * _Pvector )
  : _Mybase ( _Ptr, _Pvector )
  {
  }








 reference operator * ( ) const
  {
  return ( ( reference ) * * ( _Mybase * ) this );
  }

 pointer operator -> ( ) const
  {
  return ( & * * this );
  }

 _Myt & operator ++ ( )
  {
  ++ ( * ( _Mybase * ) this );
  return ( * this );
  }

 _Myt operator ++ ( int )
  {
  _Myt _Tmp = * this;
  ++ * this;
  return ( _Tmp );
  }

 _Myt & operator -- ( )
  {
  -- ( * ( _Mybase * ) this );
  return ( * this );
  }

 _Myt operator -- ( int )
  {
  _Myt _Tmp = * this;
  -- * this;
  return ( _Tmp );
  }

 _Myt & operator += ( difference_type _Off )
  {
  ( * ( _Mybase * ) this ) += _Off;
  return ( * this );
  }

 _Myt operator + ( difference_type _Off ) const
  {
  _Myt _Tmp = * this;
  return ( _Tmp += _Off );
  }

 _Myt & operator -= ( difference_type _Off )
  {
  return ( * this += - _Off );
  }

 _Myt operator - ( difference_type _Off ) const
  {
  _Myt _Tmp = * this;
  return ( _Tmp -= _Off );
  }

 difference_type operator - ( const _Mybase & _Right ) const
  {
  return ( * ( _Mybase * ) this - _Right );
  }

 reference operator [ ] ( difference_type _Off ) const
  {
  return ( * ( * this + _Off ) );
  }
 };
#line 407 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\vector"
template < class _Ty,
 class _Alloc > inline
 _Vector_iterator < _Ty, _Alloc > operator + (
  typename _Vector_iterator < _Ty, _Alloc > :: difference_type _Off,
  _Vector_iterator < _Ty, _Alloc > _Next )
 {
 return ( _Next += _Off );
 }


template < class _Ty,
 class _Alloc >
 class _Vector_val
  : public _Container_base_aux_alloc_real < _Alloc >
 {
protected :
 _Vector_val ( _Alloc _Al = _Alloc ( ) )
  : _Container_base_aux_alloc_real < _Alloc > ( _Al ), _Alval ( _Al )
  {
  }

 typedef typename _Alloc :: template
  rebind < _Ty > :: other _Alty;

 _Alty _Alval;
 };


template < class _Ty,
 class _Ax >
 class vector
  : public _Vector_val < _Ty, _Ax >
 {
public :
 typedef vector < _Ty, _Ax > _Myt;
 typedef _Vector_val < _Ty, _Ax > _Mybase;
 typedef typename _Mybase :: _Alty _Alloc;
 typedef _Alloc allocator_type;
 typedef typename _Alloc :: size_type size_type;
 typedef typename _Alloc :: difference_type _Dift;
 typedef _Dift difference_type;
 typedef typename _Alloc :: pointer _Tptr;
 typedef typename _Alloc :: const_pointer _Ctptr;
 typedef _Tptr pointer;
 typedef _Ctptr const_pointer;
 typedef typename _Alloc :: reference _Reft;
 typedef _Reft reference;
 typedef typename _Alloc :: const_reference const_reference;
 typedef typename _Alloc :: value_type value_type;



 typedef _Vector_iterator < _Ty, _Alloc > iterator;
 typedef _Vector_const_iterator < _Ty, _Alloc > const_iterator;


 friend class _Vector_const_iterator < _Ty, _Alloc >;

 typedef std :: reverse_iterator < iterator > reverse_iterator;
 typedef std :: reverse_iterator < const_iterator > const_reverse_iterator;

 vector ( )
  : _Mybase ( )
  {
  _Buy ( 0 );
  }

 explicit vector ( const _Alloc & _Al )
  : _Mybase ( _Al )
  {
  _Buy ( 0 );
  }

 explicit vector ( size_type _Count )
  : _Mybase ( )
  {
  _Construct_n ( _Count, _Ty ( ) );
  }

 vector ( size_type _Count, const _Ty & _Val )
  : _Mybase ( )
  {
  _Construct_n ( _Count, _Val );
  }

 vector ( size_type _Count, const _Ty & _Val, const _Alloc & _Al )
  : _Mybase ( _Al )
  {
  _Construct_n ( _Count, _Val );
  }

 vector ( const _Myt & _Right )
  : _Mybase ( _Right . _Alval )
  {
  if ( _Buy ( _Right . size ( ) ) )
   try {
   _Mylast = _Ucopy ( _Right . begin ( ), _Right . end ( ), _Myfirst );
   } catch ( ... ) {
   _Tidy ( );
   throw;
   }
  }

 template < class _Iter >
  vector ( _Iter _First, _Iter _Last )
  : _Mybase ( )
  {
  _Construct ( _First, _Last, _Iter_cat ( _First ) );
  }

 template < class _Iter >
  vector ( _Iter _First, _Iter _Last, const _Alloc & _Al )
  : _Mybase ( _Al )
  {
  _Construct ( _First, _Last, _Iter_cat ( _First ) );
  }

 template < class _Iter >
  void _Construct ( _Iter _Count, _Iter _Val, _Int_iterator_tag )
  {
  size_type _Size = ( size_type ) _Count;
  _Construct_n ( _Size, ( _Ty ) _Val );
  }

 template < class _Iter >
  void _Construct ( _Iter _First,
   _Iter _Last, input_iterator_tag )
  {
  _Buy ( 0 );
  try {
  insert ( begin ( ), _First, _Last );
  } catch ( ... ) {
  _Tidy ( );
  throw;
  }
  }

 void _Construct_n ( size_type _Count, const _Ty & _Val )
  {
  if ( _Buy ( _Count ) )
   {
   try {
   _Mylast = _Ufill ( _Myfirst, _Count, _Val );
   } catch ( ... ) {
   _Tidy ( );
   throw;
   }
   }
  }

 ~ vector ( )
  {
  _Tidy ( );
  }

 _Myt & operator = ( const _Myt & _Right )
  {
  if ( this != & _Right )
   {





   if ( _Right . size ( ) == 0 )
    clear ( );
   else if ( _Right . size ( ) <= size ( ) )
    {
    pointer _Ptr = :: stdext :: unchecked_copy ( _Right . _Myfirst, _Right . _Mylast,
     _Myfirst );
    _Destroy ( _Ptr, _Mylast );
    _Mylast = _Myfirst + _Right . size ( );
    }
   else if ( _Right . size ( ) <= capacity ( ) )
    {
    pointer _Ptr = _Right . _Myfirst + size ( );
    :: stdext :: unchecked_copy ( _Right . _Myfirst, _Ptr, _Myfirst );
    _Mylast = _Ucopy ( _Ptr, _Right . _Mylast, _Mylast );
    }
   else
    {
    if ( _Myfirst != 0 )
     {
     _Destroy ( _Myfirst, _Mylast );
     this -> _Alval . deallocate ( _Myfirst, _Myend - _Myfirst );
     }
    if ( _Buy ( _Right . size ( ) ) )
     _Mylast = _Ucopy ( _Right . _Myfirst, _Right . _Mylast,
      _Myfirst );
    }
   }
  return ( * this );
  }

 void reserve ( size_type _Count )
  {
  if ( max_size ( ) < _Count )
   _Xlen ( );
  else if ( capacity ( ) < _Count )
   {
   pointer _Ptr = this -> _Alval . allocate ( _Count );

   try {
   _Umove ( begin ( ), end ( ), _Ptr );
   } catch ( ... ) {
   this -> _Alval . deallocate ( _Ptr, _Count );
   throw;
   }

   size_type _Size = size ( );
   if ( _Myfirst != 0 )
    {
    _Destroy ( _Myfirst, _Mylast );
    this -> _Alval . deallocate ( _Myfirst, _Myend - _Myfirst );
    }





   _Myend = _Ptr + _Count;
   _Mylast = _Ptr + _Size;
   _Myfirst = _Ptr;
   }
  }

 size_type capacity ( ) const
  {
  return ( _Myfirst == 0 ? 0 : _Myend - _Myfirst );
  }


 iterator begin ( )
  {
  return ( iterator ( _Myfirst, this ) );
  }

 const_iterator begin ( ) const
  {
  return ( const_iterator ( _Myfirst, this ) );
  }

 iterator end ( )
  {
  return ( iterator ( _Mylast, this ) );
  }

 const_iterator end ( ) const
  {
  return ( const_iterator ( _Mylast, this ) );
  }

 iterator _Make_iter ( const_iterator _Where ) const
  {
  return ( iterator ( _Where . _Myptr, this ) );
  }




























 reverse_iterator rbegin ( )
  {
  return ( reverse_iterator ( end ( ) ) );
  }

 const_reverse_iterator rbegin ( ) const
  {
  return ( const_reverse_iterator ( end ( ) ) );
  }

 reverse_iterator rend ( )
  {
  return ( reverse_iterator ( begin ( ) ) );
  }

 const_reverse_iterator rend ( ) const
  {
  return ( const_reverse_iterator ( begin ( ) ) );
  }

 void resize ( size_type _Newsize )
  {
  resize ( _Newsize, _Ty ( ) );
  }

 void resize ( size_type _Newsize, _Ty _Val )
  {
  if ( size ( ) < _Newsize )
   _Insert_n ( end ( ), _Newsize - size ( ), _Val );
  else if ( _Newsize < size ( ) )
   erase ( begin ( ) + _Newsize, end ( ) );
  }

 size_type size ( ) const
  {
  return ( _Mylast - _Myfirst );
  }

 size_type max_size ( ) const
  {
  return ( this -> _Alval . max_size ( ) );
  }

 bool empty ( ) const
  {
  return ( size ( ) == 0 );
  }

 _Alloc get_allocator ( ) const
  {
  return ( this -> _Alval );
  }

 const_reference at ( size_type _Pos ) const
  {
  if ( size ( ) <= _Pos )
   _Xran ( );
  return ( * ( begin ( ) + _Pos ) );
  }

 reference at ( size_type _Pos )
  {
  if ( size ( ) <= _Pos )
   _Xran ( );
  return ( * ( begin ( ) + _Pos ) );
  }

 const_reference operator [ ] ( size_type _Pos ) const
  {








  { if ( ! ( _Pos < size ( ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };

  return ( * ( _Myfirst + _Pos ) );
  }

 reference operator [ ] ( size_type _Pos )
  {








  { if ( ! ( _Pos < size ( ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };

  return ( * ( _Myfirst + _Pos ) );
  }

 reference front ( )
  {
  return ( * begin ( ) );
  }

 const_reference front ( ) const
  {
  return ( * begin ( ) );
  }

 reference back ( )
  {
  return ( * ( end ( ) - 1 ) );
  }

 const_reference back ( ) const
  {
  return ( * ( end ( ) - 1 ) );
  }

 void push_back ( const _Ty & _Val )
  {
  if ( size ( ) < capacity ( ) )








   _Mylast = _Ufill ( _Mylast, 1, _Val );


  else
   insert ( end ( ), _Val );
  }















 void pop_back ( )
  {
  if ( ! empty ( ) )
   {
   _Destroy ( _Mylast - 1, _Mylast );
   -- _Mylast;
   }
  }


 template < class _Iter >
  void assign ( _Iter _First, _Iter _Last )
  {
  _Assign ( _First, _Last, _Iter_cat ( _First ) );
  }

 template < class _Iter >
  void _Assign ( _Iter _Count, _Iter _Val, _Int_iterator_tag )
  {
  _Assign_n ( ( size_type ) _Count, ( _Ty ) _Val );
  }

 template < class _Iter >
  void _Assign ( _Iter _First, _Iter _Last, input_iterator_tag )
  {
  erase ( begin ( ), end ( ) );
  insert ( begin ( ), _First, _Last );
  }

 void assign ( size_type _Count, const _Ty & _Val )
  {
  _Assign_n ( _Count, _Val );
  }

 iterator insert ( const_iterator _Where, const _Ty & _Val )
  {
  size_type _Off = size ( ) == 0 ? 0 : _Where - begin ( );
  _Insert_n ( _Where, ( size_type ) 1, _Val );
  return ( begin ( ) + _Off );
  }

 void insert ( const_iterator _Where, size_type _Count, const _Ty & _Val )
  {
  _Insert_n ( _Where, _Count, _Val );
  }

 template < class _Iter >
  void insert ( const_iterator _Where, _Iter _First, _Iter _Last )
  {
  _Insert ( _Where, _First, _Last, _Iter_cat ( _First ) );
  }

 template < class _Iter >
  void _Insert ( const_iterator _Where, _Iter _First, _Iter _Last,
   _Int_iterator_tag )
  {
  _Insert_n ( _Where, ( size_type ) _First, ( _Ty ) _Last );
  }

 template < class _Iter >
  void _Insert ( const_iterator _Where, _Iter _First, _Iter _Last,
   input_iterator_tag )
  {







  if ( _First != _Last )
   {
   size_type _Oldsize = size ( );
   size_type _Whereoff = _Where . _Myptr - _Myfirst;

   for (; _First != _Last; ++ _First )
    _Insert_n ( end ( ), ( size_type ) 1, ( value_type ) * _First );

   _Reverse ( _Myfirst + _Whereoff, _Myfirst + _Oldsize );
   _Reverse ( _Myfirst + _Oldsize, _Mylast );
   _Reverse ( _Myfirst + _Whereoff, _Mylast );
   }
  }

 template < class _Iter >
  void _Insert ( const_iterator _Where,
   _Iter _First, _Iter _Last, forward_iterator_tag )
  {








  size_type _Count = 0;
  _Distance ( _First, _Last, _Count );
  size_type _Capacity = capacity ( );

  if ( _Count == 0 )
   ;
  else if ( max_size ( ) - size ( ) < _Count )
   _Xlen ( );
  else if ( _Capacity < size ( ) + _Count )
   {
   _Capacity = max_size ( ) - _Capacity / 2 < _Capacity
    ? 0 : _Capacity + _Capacity / 2;
   if ( _Capacity < size ( ) + _Count )
    _Capacity = size ( ) + _Count;
   pointer _Newvec = this -> _Alval . allocate ( _Capacity );
   pointer _Ptr = _Newvec;

   try {
   _Ptr = _Umove ( _Myfirst, ( _Where ) . _Myptr,
    _Newvec );
   _Ptr = _Ucopy ( _First, _Last, _Ptr );
   _Umove ( ( _Where ) . _Myptr, _Mylast, _Ptr );
   } catch ( ... ) {
   _Destroy ( _Newvec, _Ptr );
   this -> _Alval . deallocate ( _Newvec, _Capacity );
   throw;
   }

   _Count += size ( );
   if ( _Myfirst != 0 )
    {
    _Destroy ( _Myfirst, _Mylast );
    this -> _Alval . deallocate ( _Myfirst, _Myend - _Myfirst );
    }





   _Myend = _Newvec + _Capacity;
   _Mylast = _Newvec + _Count;
   _Myfirst = _Newvec;
   }
  else
   {
   _Ucopy ( _First, _Last, _Mylast );

   _Reverse ( _Where . _Myptr, _Mylast );
   _Reverse ( _Mylast, _Mylast + _Count );
   _Reverse ( _Where . _Myptr, _Mylast + _Count );

   _Mylast += _Count;





   }
  }

  void _Reverse ( pointer _First, pointer _Last )
  {
  for (; _First != _Last && _First != -- _Last; ++ _First )
   :: std :: _Swap_adl ( * _First, * _Last );
  }















 iterator erase ( const_iterator _Where )
  {
  :: stdext :: unchecked_copy ( ( _Where ) . _Myptr + 1, _Mylast,
   ( _Where ) . _Myptr );
  _Destroy ( _Mylast - 1, _Mylast );
  -- _Mylast;
  return ( _Make_iter ( _Where ) );
  }


 iterator erase ( const_iterator _First_arg,
  const_iterator _Last_arg )
  {
  iterator _First = _Make_iter ( _First_arg );
  iterator _Last = _Make_iter ( _Last_arg );

  if ( _First != _Last )
   {










   pointer _Ptr = :: stdext :: unchecked_copy ( ( _Last ) . _Myptr, _Mylast,
    ( _First ) . _Myptr );


   _Destroy ( _Ptr, _Mylast );
   _Mylast = _Ptr;
   }



  return ( _First );

  }

 void clear ( )
  {
  erase ( begin ( ), end ( ) );
  }

 void swap ( _Myt & _Right )
  {
  if ( this == & _Right )
   ;
  else if ( this -> _Alval == _Right . _Alval )
   {





   this -> _Swap_aux ( _Right );

   :: std :: swap ( _Myfirst, _Right . _Myfirst );
   :: std :: swap ( _Mylast, _Right . _Mylast );
   :: std :: swap ( _Myend, _Right . _Myend );
   }
  else
   {
   this -> _Swap_aux ( _Right );

   _Myt _Ts = * this;

   * this = _Right;
   _Right = _Ts;
   }
  }



protected :
 void _Assign_n ( size_type _Count, const _Ty & _Val )
  {
  _Ty _Tmp = _Val;
  erase ( begin ( ), end ( ) );
  insert ( begin ( ), _Count, _Tmp );
  }

 bool _Buy ( size_type _Capacity )
  {
  _Myfirst = 0, _Mylast = 0, _Myend = 0;
  if ( _Capacity == 0 )
   return ( false );
  else if ( max_size ( ) < _Capacity )
   _Xlen ( );
  else
   {
   _Myfirst = this -> _Alval . allocate ( _Capacity );
   _Mylast = _Myfirst;
   _Myend = _Myfirst + _Capacity;
   }
  return ( true );
  }

 void _Destroy ( pointer _First, pointer _Last )
  {
  _Destroy_range ( _First, _Last, this -> _Alval );
  }

 void _Tidy ( )
  {
  if ( _Myfirst != 0 )
   {





   _Destroy ( _Myfirst, _Mylast );
   this -> _Alval . deallocate ( _Myfirst, _Myend - _Myfirst );
   }
  _Myfirst = 0, _Mylast = 0, _Myend = 0;
  }

 template < class _Iter >
  pointer _Ucopy ( _Iter _First, _Iter _Last, pointer _Ptr )
  {
  return ( :: stdext :: unchecked_uninitialized_copy ( _First, _Last,
   _Ptr, this -> _Alval ) );
  }

 template < class _Iter >
  pointer _Umove ( _Iter _First, _Iter _Last, pointer _Ptr )
  {
  return ( :: stdext :: _Unchecked_uninitialized_move ( _First, _Last,
   _Ptr, this -> _Alval ) );
  }

 void _Insert_n ( const_iterator _Where,
  size_type _Count, const _Ty & _Val )
  {







  size_type _Capacity = capacity ( );

  if ( _Count == 0 )
   ;
  else if ( max_size ( ) - size ( ) < _Count )
   _Xlen ( );
  else if ( _Capacity < size ( ) + _Count )
   {
   _Capacity = max_size ( ) - _Capacity / 2 < _Capacity
    ? 0 : _Capacity + _Capacity / 2;
   if ( _Capacity < size ( ) + _Count )
    _Capacity = size ( ) + _Count;
   pointer _Newvec = this -> _Alval . allocate ( _Capacity );
   size_type _Whereoff = ( _Where ) . _Myptr - _Myfirst;
   int _Ncopied = 0;

   try {
   _Ufill ( _Newvec + _Whereoff, _Count, _Val );
   ++ _Ncopied;
   _Umove ( this -> _Myfirst, ( _Where ) . _Myptr,
    _Newvec );
   ++ _Ncopied;
   _Umove ( ( _Where ) . _Myptr, this -> _Mylast,
    _Newvec + ( _Whereoff + _Count ) );
   } catch ( ... ) {
   if ( 1 < _Ncopied )
    _Destroy ( _Newvec, _Newvec + _Whereoff );
   if ( 0 < _Ncopied )
    _Destroy ( _Newvec + _Whereoff, _Newvec + _Whereoff + _Count );
   this -> _Alval . deallocate ( _Newvec, _Capacity );
   throw;
   }

   _Count += size ( );
   if ( _Myfirst != 0 )
    {
    _Destroy ( _Myfirst, _Mylast );
    this -> _Alval . deallocate ( _Myfirst, _Myend - _Myfirst );
    }





   _Myend = _Newvec + _Capacity;
   _Mylast = _Newvec + _Count;
   _Myfirst = _Newvec;
   }
  else if ( ( size_type ) ( _Mylast - ( _Where ) . _Myptr ) < _Count )
   {
   _Ty _Tmp = _Val;

   _Umove ( ( _Where ) . _Myptr, _Mylast,
    ( _Where ) . _Myptr + _Count );

   try {
   _Ufill ( _Mylast, _Count - ( _Mylast - ( _Where ) . _Myptr ),
    _Tmp );
   } catch ( ... ) {
   _Destroy ( ( _Where ) . _Myptr + _Count, _Mylast + _Count );
   throw;
   }

   _Mylast += _Count;





   std :: fill ( ( _Where ) . _Myptr, _Mylast - _Count,
    _Tmp );
   }
  else
   {
   _Ty _Tmp = _Val;

   pointer _Oldend = _Mylast;
   _Mylast = _Umove ( _Oldend - _Count, _Oldend,
    _Mylast );





   :: stdext :: _Unchecked_move_backward ( ( _Where ) . _Myptr, _Oldend - _Count,
    _Oldend );
   std :: fill ( ( _Where ) . _Myptr, ( _Where ) . _Myptr + _Count,
    _Tmp );
   }
  }

 pointer _Ufill ( pointer _Ptr, size_type _Count, const _Ty & _Val )
  {
  :: stdext :: unchecked_uninitialized_fill_n ( _Ptr, _Count, _Val, this -> _Alval );
  return ( _Ptr + _Count );
  }

 static void _Xlen ( )
  {
  throw length_error ( "vector<T> too long" );
  }

 static void _Xran ( )
  {
  throw out_of_range ( "invalid vector<T> subscript" );
  }

 static void _Xinvarg ( )
  {
  throw invalid_argument ( "invalid vector<T> argument" );
  }

















 pointer _Myfirst;
 pointer _Mylast;
 pointer _Myend;
 };
#line 1295 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\vector"
template<class _Ty, class _Ax> 
#pragma pack(8)
#line 1296
class _Move_operation_category< vector< _Ty, _Ax> >  { 


public: typedef _Swap_move_tag _Move_cat; 
}; 
#pragma pack()

template < class _Ty,
 class _Alloc > inline
 bool operator == ( const vector < _Ty, _Alloc > & _Left,
  const vector < _Ty, _Alloc > & _Right )
 {
 return ( _Left . size ( ) == _Right . size ( )
  && equal ( _Left . begin ( ), _Left . end ( ), _Right . begin ( ) ) );
 }

template < class _Ty,
 class _Alloc > inline
 bool operator != ( const vector < _Ty, _Alloc > & _Left,
  const vector < _Ty, _Alloc > & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }

template < class _Ty,
 class _Alloc > inline
 bool operator < ( const vector < _Ty, _Alloc > & _Left,
  const vector < _Ty, _Alloc > & _Right )
 {
 return ( lexicographical_compare ( _Left . begin ( ), _Left . end ( ),
  _Right . begin ( ), _Right . end ( ) ) );
 }

template < class _Ty,
 class _Alloc > inline
 bool operator > ( const vector < _Ty, _Alloc > & _Left,
  const vector < _Ty, _Alloc > & _Right )
 {
 return ( _Right < _Left );
 }

template < class _Ty,
 class _Alloc > inline
 bool operator <= ( const vector < _Ty, _Alloc > & _Left,
  const vector < _Ty, _Alloc > & _Right )
 {
 return ( ! ( _Right < _Left ) );
 }

template < class _Ty,
 class _Alloc > inline
 bool operator >= ( const vector < _Ty, _Alloc > & _Left,
  const vector < _Ty, _Alloc > & _Right )
 {
 return ( ! ( _Left < _Right ) );
 }

template < class _Ty,
 class _Alloc > inline
 void swap ( vector < _Ty, _Alloc > & _Left, vector < _Ty, _Alloc > & _Right )
 {
 _Left . swap ( _Right );
 }




typedef unsigned _Vbase; 
static const int _VBITS = ((8) * sizeof(_Vbase)); 


template < class _Sizet,
 class _Difft,
 class _MycontTy >
 class _Vb_iter_base
  : public _Ranit < _Bool, _Difft, bool *, bool >
 {
public :

 typedef _Range_checked_iterator_tag _Checked_iterator_category;


 _Vb_iter_base ( )
  : _Myptr ( 0 ), _Myoff ( 0 )
  {
  }











 _Vb_iter_base ( _Vbase * _Ptr, _Sizet _Off,
  const _Container_base * _Mypvbool )
  : _Myptr ( _Ptr ), _Myoff ( _Off )
  {
  { if ( ! ( _Mypvbool != 0 ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  this -> _Set_container ( _Mypvbool );
  }







 _Vbase * _Myptr;
 _Sizet _Myoff;

 static void _Xlen ( )
  {
  throw length_error ( "vector<bool> too long" );
   }

 static void _Xran ( )
  {
  throw out_of_range ( "invalid vector<bool> subscript" );
  }

 static void _Xinvarg ( )
  {
  throw invalid_argument ( "invalid vector<bool> argument" );
  }


 _Vbase * _My_cont_begin ( ) const
  {
  return ( ( ( ( _MycontTy * ) this -> _Getmycont ( ) ) -> _Myvec . begin ( ) ) . _Myptr );

  }

 _Sizet _My_actual_offset ( ) const
  {
  _Sizet _Off = this -> _Myoff;
  _Off += _VBITS * ( this -> _Myptr - _My_cont_begin ( ) );
  return ( _Off );
  }

 };
#line 1442 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\vector"
template < class _Sizet,
 class _Difft,
 class _MycontTy >
 class _Vb_reference
  : public _Vb_iter_base < _Sizet, _Difft, _MycontTy >
 {
public :
 typedef _Vb_iter_base < _Sizet, _Difft, _MycontTy > _Mybase;
 typedef _Vb_reference < _Sizet, _Difft, _MycontTy > _Mytype;

 _Vb_reference ( )
  {
  }


 _Vb_reference ( const _Mybase & _Right )
  : _Mybase ( _Right . _Myptr, _Right . _Myoff, _Right . _Getmycont ( ) )
  {
  }








 _Mytype & operator = ( const _Mytype & _Right )
  {
  return ( * this = bool ( _Right ) );
  }

 _Mytype & operator = ( bool _Val )
  {
  if ( _Val )
   * _Getptr ( ) |= _Mask ( );
  else
   * _Getptr ( ) &= ~ _Mask ( );
  return ( * this );
  }

 void flip ( )
  {
  * _Getptr ( ) ^= _Mask ( );
  }

 bool operator ~ ( ) const
  {
  return ( ! bool ( * this ) );
  }

 operator bool ( ) const
  {
  return ( ( * _Getptr ( ) & _Mask ( ) ) != 0 );
  }

 _Vbase * _Getptr ( ) const
  {








   { if ( ! ( this -> _Has_container ( ) && this -> _Myptr != 0 ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  { if ( ! ( this -> _My_actual_offset ( ) < ( ( _MycontTy * ) this -> _Getmycont ( ) ) -> _Mysize ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };


  return ( this -> _Myptr );
  }

protected :
 _Vbase _Mask ( ) const
  {
  return ( ( _Vbase ) ( 1 << this -> _Myoff ) );
  }
 };
#line 1522 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\vector"
template < class _Sizet,
 class _Difft,
 class _MycontTy >
 void swap ( _Vb_reference < _Sizet, _Difft, _MycontTy > _Left,
  _Vb_reference < _Sizet, _Difft, _MycontTy > _Right )
 {
 bool _Val = _Left;
 _Left = _Right;
 _Right = _Val;
 }


template < class _Sizet,
 class _Difft,
 class _MycontTy >
 class _Vb_const_iterator
  : public _Vb_iter_base < _Sizet, _Difft, _MycontTy >
 {
public :
 typedef _Vb_iter_base < _Sizet, _Difft, _MycontTy > _Mybase;
 typedef _Vb_const_iterator < _Sizet, _Difft, _MycontTy > _Mytype;

 typedef _Vb_reference < _Sizet, _Difft, _MycontTy > _Reft;
 typedef bool const_reference;

 typedef random_access_iterator_tag iterator_category;
 typedef _Bool value_type;
 typedef _Sizet size_type;
 typedef _Difft difference_type;
 typedef const_reference * pointer;
 typedef const_reference reference;

 _Vb_const_iterator ( )
  {
  }


 _Vb_const_iterator ( const _Vbase * _Ptr, const _Container_base * _Mypvbool )
  : _Mybase ( ( _Vbase * ) _Ptr, 0, ( _Container_base * ) _Mypvbool )






  {
  }

 const_reference operator * ( ) const
  {
  return ( _Reft ( * this ) );
  }

 _Mytype & operator ++ ( )
  {
  _Inc ( );
  return ( * this );
  }

 _Mytype operator ++ ( int )
  {
  _Mytype _Tmp = * this;
  ++ * this;
  return ( _Tmp );
  }

 _Mytype & operator -- ( )
  {
  _Dec ( );
  return ( * this );
  }

 _Mytype operator -- ( int )
  {
  _Mytype _Tmp = * this;
  -- * this;
  return ( _Tmp );
  }

 _Mytype & operator += ( difference_type _Off )
  {
  if ( _Off == 0 )
   return ( * this );
  { if ( ! ( this -> _Has_container ( ) && this -> _Myptr != 0 ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  if ( _Off < 0 )
   {
   { if ( ! ( this -> _My_actual_offset ( ) >= ( ( size_type ) - _Off ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
   }
  else
   {
   { if ( ! ( ( this -> _My_actual_offset ( ) + _Off ) <= ( ( _MycontTy * ) this -> _Getmycont ( ) ) -> _Mysize ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
   }
  if ( _Off < 0 && this -> _Myoff < 0 - ( size_type ) _Off )
   {
   this -> _Myoff += _Off;
   this -> _Myptr -= 1 + ( ( size_type ) ( - 1 ) - this -> _Myoff ) / _VBITS;
   this -> _Myoff %= _VBITS;
   }
  else
   {
   this -> _Myoff += _Off;
   this -> _Myptr += this -> _Myoff / _VBITS;
   this -> _Myoff %= _VBITS;
   }
  return ( * this );
  }

 _Mytype operator + ( difference_type _Off ) const
  {
  _Mytype _Tmp = * this;
  return ( _Tmp += _Off );
  }

 _Mytype & operator -= ( difference_type _Off )
  {
  return ( * this += - _Off );
  }

 _Mytype operator - ( difference_type _Off ) const
  {
  _Mytype _Tmp = * this;
  return ( _Tmp -= _Off );
  }

 difference_type operator - (
  const _Mytype & _Right ) const
  {





  return ( _VBITS * ( this -> _Myptr - _Right . _Myptr )
   + ( difference_type ) this -> _Myoff
   - ( difference_type ) _Right . _Myoff );
  }

 const_reference operator [ ] ( difference_type _Off ) const
  {
  return ( * ( * this + _Off ) );
  }

 bool operator == ( const _Mytype & _Right ) const
  {





  return ( this -> _Myptr == _Right . _Myptr
   && this -> _Myoff == _Right . _Myoff );
  }

 bool operator != ( const _Mytype & _Right ) const
  {
  return ( ! ( * this == _Right ) );
  }

 bool operator < ( const _Mytype & _Right ) const
  {





  return ( this -> _Myptr < _Right . _Myptr
   || this -> _Myptr == _Right . _Myptr
    && this -> _Myoff < _Right . _Myoff );
  }

 bool operator > ( const _Mytype & _Right ) const
  {
  return ( _Right < * this );
  }

 bool operator <= ( const _Mytype & _Right ) const
  {
  return ( ! ( _Right < * this ) );
  }

 bool operator >= ( const _Mytype & _Right ) const
  {
  return ( ! ( * this < _Right ) );
  }

protected :









 void _Dec ( )
  {
  if ( this -> _Myoff != 0 )
   {
   -- this -> _Myoff;
   }
  else
   {
   { if ( ! ( this -> _Has_container ( ) && this -> _Myptr != 0 ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
   { if ( ! ( this -> _Myptr > this -> _My_cont_begin ( ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
   -- this -> _Myptr;
   this -> _Myoff = _VBITS - 1;
   }
  }

 void _Inc ( )
  {
  { if ( ! ( this -> _Has_container ( ) && this -> _Myptr != 0 ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  { if ( ! ( ( this -> _My_actual_offset ( ) + 1 ) <= ( ( _MycontTy * ) this -> _Getmycont ( ) ) -> _Mysize ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  if ( this -> _Myoff < _VBITS - 1 )
   ++ this -> _Myoff;
  else
   this -> _Myoff = 0, ++ this -> _Myptr;
  }
 };
#line 1743 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\vector"
template < class _Sizet,
 class _Difft,
 class _MycontTy >
 _Vb_const_iterator < _Sizet, _Difft, _MycontTy > operator + ( _Difft _Off,
  _Vb_const_iterator < _Sizet, _Difft, _MycontTy > _Right )
  {
  return ( _Right += _Off );
  }


template < class _Sizet,
 class _Difft,
 class _MycontTy >
 class _Vb_iterator
  : public _Vb_const_iterator < _Sizet, _Difft, _MycontTy >
 {
public :
 typedef _Vb_const_iterator < _Sizet, _Difft, _MycontTy > _Mybase;
 typedef _Vb_iterator < _Sizet, _Difft, _MycontTy > _Mytype;

 typedef _Vb_reference < _Sizet, _Difft, _MycontTy > _Reft;
 typedef bool const_reference;

 typedef random_access_iterator_tag iterator_category;
 typedef _Bool value_type;
 typedef _Sizet size_type;
 typedef _Difft difference_type;
 typedef _Reft * pointer;
 typedef _Reft reference;

 _Vb_iterator ( )
  {
  }


 _Vb_iterator ( _Vbase * _Ptr, _Container_base * _Mypvbool )
  : _Mybase ( _Ptr, _Mypvbool )






  {
  }

 reference operator * ( ) const
  {
  return ( _Reft ( * this ) );
  }

 _Mytype & operator ++ ( )
  {
  ++ * ( _Mybase * ) this;
  return ( * this );
  }

 _Mytype operator ++ ( int )
  {
  _Mytype _Tmp = * this;
  ++ * this;
  return ( _Tmp );
  }

 _Mytype & operator -- ( )
  {
  -- * ( _Mybase * ) this;
  return ( * this );
  }

 _Mytype operator -- ( int )
  {
  _Mytype _Tmp = * this;
  -- * this;
  return ( _Tmp );
  }

 _Mytype & operator += ( difference_type _Off )
  {
  * ( _Mybase * ) this += _Off;
  return ( * this );
  }

 _Mytype operator + ( difference_type _Off ) const
  {
  _Mytype _Tmp = * this;
  return ( _Tmp += _Off );
  }

 _Mytype & operator -= ( difference_type _Off )
  {
  return ( * this += - _Off );
  }

 _Mytype operator - ( difference_type _Off ) const
  {
  _Mytype _Tmp = * this;
  return ( _Tmp -= _Off );
  }

 difference_type operator - ( const _Mybase & _Right ) const
  {
  return ( * ( _Mybase * ) this - _Right );
  }

 reference operator [ ] ( difference_type _Off ) const
  {
  return ( * ( * this + _Off ) );
  }
 };
#line 1854 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\vector"
template < class _Sizet,
 class _Difft,
 class _MycontTy >
 _Vb_iterator < _Sizet, _Difft, _MycontTy > operator + ( _Difft _Off,
  _Vb_iterator < _Sizet, _Difft, _MycontTy > _Right )
  {
  return ( _Right += _Off );
  }


template < class _Alloc >
 class vector < _Bool, _Alloc >
  : public _Container_base_aux_alloc_real < _Alloc >
 {
public :
 typedef typename _Alloc :: size_type size_type;
 typedef typename _Alloc :: difference_type _Dift;
 typedef std :: vector < _Vbase,
  typename _Alloc :: template rebind < _Vbase > :: other >
   _Vbtype;
 typedef std :: vector < _Bool, _Alloc > _Myt;


 typedef _Dift difference_type;
 typedef _Bool _Ty;
 typedef _Alloc allocator_type;

 typedef _Vb_reference < size_type, _Dift, _Myt > reference;
 typedef bool const_reference;
 typedef bool value_type;

 typedef reference _Reft;
 typedef _Vb_const_iterator < size_type, difference_type, _Myt > const_iterator;
 typedef _Vb_iterator < size_type, difference_type, _Myt > iterator;

 friend class _Vb_iter_base < size_type, difference_type, _Myt >;
 friend class _Vb_reference < size_type, difference_type, _Myt >;
 friend class _Vb_const_iterator < size_type, difference_type, _Myt >;
 friend class _Vb_iterator < size_type, difference_type, _Myt >;

 typedef iterator pointer;
 typedef const_iterator const_pointer;
 typedef std :: reverse_iterator < iterator > reverse_iterator;
 typedef std :: reverse_iterator < const_iterator > const_reverse_iterator;

 static const int _VBITS = std :: _VBITS;

 vector ( )
  : _Container_base_aux_alloc_real < _Alloc > ( _Alloc ( ) ), _Mysize ( 0 ), _Myvec ( )
  {
  }

 vector ( const _Myt & _Right )
  : _Container_base_aux_alloc_real < _Alloc > ( _Right . get_allocator ( ) ), _Mysize ( _Right . _Mysize ), _Myvec ( _Right . _Myvec )
  {
  }

 explicit vector ( const _Alloc & _Al )
  : _Container_base_aux_alloc_real < _Alloc > ( _Al ), _Mysize ( 0 ), _Myvec ( _Al )
  {
  }

 explicit vector ( size_type _Count, bool _Val = false )
  : _Container_base_aux_alloc_real < _Alloc > ( _Alloc ( ) ), _Mysize ( 0 ), _Myvec ( _Nw ( _Count ), ( _Vbase ) ( _Val ? - 1 : 0 ) )
  {
  _Trim ( _Count );
  }

 vector ( size_type _Count, bool _Val, const _Alloc & _Al )
  : _Container_base_aux_alloc_real < _Alloc > ( _Al ), _Mysize ( 0 ), _Myvec ( _Nw ( _Count ), ( _Vbase ) ( _Val ? - 1 : 0 ), _Al )
  {
  _Trim ( _Count );
  }

 template < class _Iter >
  vector ( _Iter _First, _Iter _Last )
  : _Container_base_aux_alloc_real < _Alloc > ( _Alloc ( ) ), _Mysize ( 0 ), _Myvec ( )
  {
  _BConstruct ( _First, _Last, _Iter_cat ( _First ) );
  }

 template < class _Iter >
  vector ( _Iter _First, _Iter _Last, const _Alloc & _Al )
  : _Container_base_aux_alloc_real < _Alloc > ( _Al ), _Mysize ( 0 ), _Myvec ( _Al )
  {
  _BConstruct ( _First, _Last, _Iter_cat ( _First ) );
  }

 template < class _Iter >
  void _BConstruct ( _Iter _Count, _Iter _Val, _Int_iterator_tag )
  {
  size_type _Num = ( size_type ) _Count;
  _Myvec . assign ( _Num, ( _Ty ) _Val ? - 1 : 0 );
  _Trim ( _Num );
  }

 template < class _Iter >
  void _BConstruct ( _Iter _First, _Iter _Last, input_iterator_tag )
  {
  insert ( begin ( ), _First, _Last );
  }

 ~ vector ( )
  {
  _Mysize = 0;
  }

 void reserve ( size_type _Count )
  {
  _Myvec . reserve ( _Nw ( _Count ) );
  }

 size_type capacity ( ) const
  {
  return ( _Myvec . capacity ( ) * _VBITS );
  }


 iterator begin ( )
  {
  return ( iterator ( ( _Myvec . begin ( ) ) . _Myptr, this ) );
  }

 const_iterator begin ( ) const
  {
  return ( const_iterator ( ( _Myvec . begin ( ) ) . _Myptr, this ) );
  }













 iterator end ( )
  {
  iterator _Tmp = begin ( );
  if ( 0 < _Mysize )
   _Tmp += _Mysize;
  return ( _Tmp );
  }

 const_iterator end ( ) const
  {
  const_iterator _Tmp = begin ( );
  if ( 0 < _Mysize )
   _Tmp += _Mysize;
  return ( _Tmp );
  }

 iterator _Make_iter ( const_iterator _Where )
  {
  iterator _Tmp = begin ( );
  if ( 0 < _Mysize )
   _Tmp += _Where - begin ( );
  return ( _Tmp );
  }

 reverse_iterator rbegin ( )
  {
  return ( reverse_iterator ( end ( ) ) );
  }

 const_reverse_iterator rbegin ( ) const
  {
  return ( const_reverse_iterator ( end ( ) ) );
  }

 reverse_iterator rend ( )
  {
  return ( reverse_iterator ( begin ( ) ) );
  }

 const_reverse_iterator rend ( ) const
  {
  return ( const_reverse_iterator ( begin ( ) ) );
  }

 void resize ( size_type _Newsize, bool _Val = false )
  {
  if ( size ( ) < _Newsize )
   _Insert_n ( end ( ), _Newsize - size ( ), _Val );
  else if ( _Newsize < size ( ) )
   erase ( begin ( ) + _Newsize, end ( ) );
  }

 size_type size ( ) const
  {
  return ( _Mysize );
  }

 size_type max_size ( ) const
  {
  const size_type _Maxsize = _Myvec . max_size ( );
  return ( _Maxsize < ( size_type ) ( - 1 ) / _VBITS
   ? _Maxsize * _VBITS : ( size_type ) ( - 1 ) );
  }

 bool empty ( ) const
  {
  return ( size ( ) == 0 );
  }

 _Alloc get_allocator ( ) const
  {

  _Alloc _Alret = _Myvec . get_allocator ( );
  return ( _Alret );
  }

 const_reference at ( size_type _Off ) const
  {
  if ( size ( ) <= _Off )
   _Xran ( );
  return ( * ( begin ( ) + _Off ) );
  }

 reference at ( size_type _Off )
  {
  if ( size ( ) <= _Off )
   _Xran ( );
  return ( * ( begin ( ) + _Off ) );
  }

 const_reference operator [ ] ( size_type _Off ) const
  {
  return ( * ( begin ( ) + _Off ) );
  }

 reference operator [ ] ( size_type _Off )
  {
  return ( * ( begin ( ) + _Off ) );
  }

 reference front ( )
  {
  return ( * begin ( ) );
  }

 const_reference front ( ) const
  {
  return ( * begin ( ) );
  }

 reference back ( )
  {
  return ( * ( end ( ) - 1 ) );
  }

 const_reference back ( ) const
  {
  return ( * ( end ( ) - 1 ) );
  }

 void push_back ( bool _Val )
  {
  insert ( end ( ), _Val );
  }

 void pop_back ( )
  {
  if ( ! empty ( ) )
   erase ( end ( ) - 1 );
  }

 template < class _Iter >
  void assign ( _Iter _First, _Iter _Last )
  {
  _Assign ( _First, _Last, _Iter_cat ( _First ) );
  }

 template < class _Iter >
  void _Assign ( _Iter _Count, _Iter _Val, _Int_iterator_tag )
  {
  _Assign_n ( ( size_type ) _Count, ( bool ) _Val );
  }

 template < class _Iter >
  void _Assign ( _Iter _First, _Iter _Last, input_iterator_tag )
  {
  erase ( begin ( ), end ( ) );
  insert ( begin ( ), _First, _Last );
  }

 void assign ( size_type _Count, bool _Val )
  {
  _Assign_n ( _Count, _Val );
  }

 iterator insert ( const_iterator _Where, bool _Val )
  {
  size_type _Off = _Where - begin ( );
  _Insert_n ( _Where, ( size_type ) 1, _Val );
  return ( begin ( ) + _Off );
  }

 void insert ( const_iterator _Where, size_type _Count, bool _Val )
  {
  _Insert_n ( _Where, _Count, _Val );
  }

 template < class _Iter >
  void insert ( const_iterator _Where, _Iter _First, _Iter _Last )
  {
  _Insert ( _Where, _First, _Last, _Iter_cat ( _First ) );
  }

 template < class _Iter >
  void _Insert ( const_iterator _Where, _Iter _Count, _Iter _Val,
   _Int_iterator_tag )
  {
  _Insert_n ( _Where, ( size_type ) _Count, ( bool ) _Val );
  }

 template < class _Iter >
  void _Insert ( const_iterator _Where, _Iter _First, _Iter _Last,
   input_iterator_tag )
  {
  size_type _Off = _Where - begin ( );

  for (; _First != _Last; ++ _First, ++ _Off )
   insert ( begin ( ) + _Off, * _First );
  }

 template < class _Iter >
  void _Insert ( const_iterator _Where,
   _Iter _First, _Iter _Last,
   forward_iterator_tag )
  {





  size_type _Count = 0;
  _Distance ( _First, _Last, _Count );

  size_type _Off = _Insert_x ( _Where, _Count );
  std :: copy ( _First, _Last, begin ( ) + _Off );
  }

 iterator erase ( const_iterator _Where_arg )
  {
  iterator _Where = _Make_iter ( _Where_arg );
  size_type _Off = _Where - begin ( );








  std :: copy ( _Where + 1, end ( ), _Where );


  _Trim ( _Mysize - 1 );
  return ( begin ( ) + _Off );
  }

 iterator erase ( const_iterator _First_arg, const_iterator _Last_arg )
  {
  iterator _First = _Make_iter ( _First_arg );
  iterator _Last = _Make_iter ( _Last_arg );
  size_type _Off = _First - begin ( );










  iterator _Next = std :: copy ( _Last, end ( ), _First );
  _Trim ( _Next - begin ( ) );


  return ( begin ( ) + _Off );
  }

 void clear ( )
  {
  erase ( begin ( ), end ( ) );
  }

 void flip ( )
  {
  for ( _Vbtype :: iterator _Next = _Myvec . begin ( );
   _Next != _Myvec . end ( ); ++ _Next )
   * _Next = ( _Vbase ) ~ * _Next;
  _Trim ( _Mysize );
  }

 void swap ( _Myt & _Right )
  {
  if ( this != & _Right )
   {





   this -> _Swap_aux ( _Right );
   :: std :: swap ( _Mysize, _Right . _Mysize );
   _Myvec . swap ( _Right . _Myvec );
   }
  }



 static void swap ( reference _Left, reference _Right )
  {
  bool _Val = _Left;

  _Left = _Right;
  _Right = _Val;
  }


protected :
 void _Assign_n ( size_type _Count, bool _Val )
  {
  erase ( begin ( ), end ( ) );
  _Insert_n ( begin ( ), _Count, _Val );
  }

 void _Insert_n ( const_iterator _Where,
  size_type _Count, bool _Val )
  {
  size_type _Off = _Insert_x ( _Where, _Count );
  std :: fill ( begin ( ) + _Off, begin ( ) + ( _Off + _Count ), _Val );
  }

 size_type _Insert_x ( const_iterator _Where, size_type _Count )
  {
  size_type _Off = _Where - begin ( );







  if ( _Count == 0 )
   ;
  else if ( max_size ( ) - size ( ) < _Count )
   _Xlen ( );
  else
   {
   _Myvec . resize ( _Nw ( size ( ) + _Count ), 0 );
   if ( size ( ) == 0 )
    _Mysize += _Count;
   else
    {
    iterator _Oldend = end ( );
    _Mysize += _Count;
    std :: copy_backward ( begin ( ) + _Off, _Oldend, end ( ) );
    }





   }
  return ( _Off );
  }

 static size_type _Nw ( size_type _Count )
  {
  return ( ( _Count + _VBITS - 1 ) / _VBITS );
  }


























 void _Trim ( size_type _Size )
  {
  if ( max_size ( ) < _Size )
   _Xlen ( );
  size_type _Words = _Nw ( _Size );

  if ( _Words < _Myvec . size ( ) )
   _Myvec . erase ( _Myvec . begin ( ) + _Words, _Myvec . end ( ) );
  _Mysize = _Size;
  _Size %= _VBITS;
  if ( 0 < _Size )
   _Myvec [ _Words - 1 ] &= ( _Vbase ) ( ( 1 << _Size ) - 1 );
  }

 void _Xlen ( ) const
  {
  throw length_error ( "vector<bool> too long" );
  }

 void _Xran ( ) const
  {
  throw out_of_range ( "invalid vector<bool> subscript" );
  }

 size_type _Mysize;
 _Vbtype _Myvec;
 };
#line 2387 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\vector"
typedef vector< bool, allocator< bool> >  _Bvector; 
#line 2394 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\vector"
}


#pragma warning(default: 4244)
#pragma warning(pop)
#line 11 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\functional"
#pragma warning(push,3)
#pragma warning(disable: 4100 4180 4244)
#line 2399 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\vector"
#pragma pack ( pop )
#line 10 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\functional"
#pragma pack ( push, 8 )
#line 15 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\functional"
namespace std { 


template<class _Arg, class 
_Result> 
struct unary_function { 

typedef _Arg argument_type; 
typedef _Result result_type; 
}; 


template<class _Arg1, class 
_Arg2, class 
_Result> 
struct binary_function { 

typedef _Arg1 first_argument_type; 
typedef _Arg2 second_argument_type; 
typedef _Result result_type; 
}; 


template < class _Ty >
 struct plus
  : public binary_function < _Ty, _Ty, _Ty >
 {
 _Ty operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left + _Right );
  }
 };


template < class _Ty >
 struct minus
  : public binary_function < _Ty, _Ty, _Ty >
 {
 _Ty operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left - _Right );
  }
 };


template < class _Ty >
 struct multiplies
  : public binary_function < _Ty, _Ty, _Ty >
 {
 _Ty operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left * _Right );
  }
 };


template < class _Ty >
 struct divides
  : public binary_function < _Ty, _Ty, _Ty >
 {
 _Ty operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left / _Right );
  }
 };


template < class _Ty >
 struct modulus
  : public binary_function < _Ty, _Ty, _Ty >
 {
 _Ty operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left % _Right );
  }
 };


template < class _Ty >
 struct negate
  : public unary_function < _Ty, _Ty >
 {
 _Ty operator ( ) ( const _Ty & _Left ) const
  {
  return ( - _Left );
  }
 };


template < class _Ty >
 struct equal_to
  : public binary_function < _Ty, _Ty, bool >
 {
 bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left == _Right );
  }
 };


template < class _Ty >
 struct not_equal_to
  : public binary_function < _Ty, _Ty, bool >
 {
 bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left != _Right );
  }
 };


template < class _Ty >
 struct greater
  : public binary_function < _Ty, _Ty, bool >
 {
 bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left > _Right );
  }
 };


template < class _Ty >
 struct less
  : public binary_function < _Ty, _Ty, bool >
 {
 bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left < _Right );
  }
 };


template < class _Ty >
 struct greater_equal
  : public binary_function < _Ty, _Ty, bool >
 {
 bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left >= _Right );
  }
 };


template < class _Ty >
 struct less_equal
  : public binary_function < _Ty, _Ty, bool >
 {
 bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left <= _Right );
  }
 };


template < class _Ty >
 struct logical_and
  : public binary_function < _Ty, _Ty, bool >
 {
 bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left && _Right );
  }
 };


template < class _Ty >
 struct logical_or
  : public binary_function < _Ty, _Ty, bool >
 {
 bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left || _Right );
  }
 };


template < class _Ty >
 struct logical_not
  : public unary_function < _Ty, bool >
 {
 bool operator ( ) ( const _Ty & _Left ) const
  {
  return ( ! _Left );
  }
 };


template < class _Fn1 >
 class unary_negate
 : public unary_function < typename _Fn1 :: argument_type, bool >
 {
public :
 explicit unary_negate ( const _Fn1 & _Func )
  : _Functor ( _Func )
  {
  }

 bool operator ( ) ( const typename _Fn1 :: argument_type & _Left ) const
  {
  return ( ! _Functor ( _Left ) );
  }

protected :
 _Fn1 _Functor;
 };


template < class _Fn1 > inline
 unary_negate < _Fn1 > not1 ( const _Fn1 & _Func )
 {
 return ( std :: unary_negate < _Fn1 > ( _Func ) );
 }


template < class _Fn2 >
 class binary_negate
  : public binary_function < typename _Fn2 :: first_argument_type,
   typename _Fn2 :: second_argument_type, bool >
 {
public :
 explicit binary_negate ( const _Fn2 & _Func )
  : _Functor ( _Func )
  {
  }

 bool operator ( ) ( const typename _Fn2 :: first_argument_type & _Left,
  const typename _Fn2 :: second_argument_type & _Right ) const
  {
  return ( ! _Functor ( _Left, _Right ) );
  }

protected :
 _Fn2 _Functor;
 };


template < class _Fn2 > inline
 binary_negate < _Fn2 > not2 ( const _Fn2 & _Func )
 {
 return ( std :: binary_negate < _Fn2 > ( _Func ) );
 }


template < class _Fn2 >
 class binder1st
  : public unary_function < typename _Fn2 :: second_argument_type,
   typename _Fn2 :: result_type >
 {
public :
 typedef unary_function < typename _Fn2 :: second_argument_type,
  typename _Fn2 :: result_type > _Base;
 typedef typename _Base :: argument_type argument_type;
 typedef typename _Base :: result_type result_type;

 binder1st ( const _Fn2 & _Func,
  const typename _Fn2 :: first_argument_type & _Left )
  : op ( _Func ), value ( _Left )
  {
  }

 result_type operator ( ) ( const argument_type & _Right ) const
  {
  return ( op ( value, _Right ) );
  }

 result_type operator ( ) ( argument_type & _Right ) const
  {
  return ( op ( value, _Right ) );
  }

protected :
 _Fn2 op;
 typename _Fn2 :: first_argument_type value;
 };


template < class _Fn2,
 class _Ty > inline
 binder1st < _Fn2 > bind1st ( const _Fn2 & _Func, const _Ty & _Left )
  {
  typename _Fn2 :: first_argument_type _Val ( _Left );
  return ( std :: binder1st < _Fn2 > ( _Func, _Val ) );
  }


template < class _Fn2 >
 class binder2nd
  : public unary_function < typename _Fn2 :: first_argument_type,
   typename _Fn2 :: result_type >
 {
public :
 typedef unary_function < typename _Fn2 :: first_argument_type,
  typename _Fn2 :: result_type > _Base;
 typedef typename _Base :: argument_type argument_type;
 typedef typename _Base :: result_type result_type;

 binder2nd ( const _Fn2 & _Func,
  const typename _Fn2 :: second_argument_type & _Right )
  : op ( _Func ), value ( _Right )
  {
  }

 result_type operator ( ) ( const argument_type & _Left ) const
  {
  return ( op ( _Left, value ) );
  }

 result_type operator ( ) ( argument_type & _Left ) const
  {
  return ( op ( _Left, value ) );
  }

protected :
 _Fn2 op;
 typename _Fn2 :: second_argument_type value;
 };


template < class _Fn2,
 class _Ty > inline
 binder2nd < _Fn2 > bind2nd ( const _Fn2 & _Func, const _Ty & _Right )
 {
 typename _Fn2 :: second_argument_type _Val ( _Right );
 return ( std :: binder2nd < _Fn2 > ( _Func, _Val ) );
 }


template < class _Arg,
 class _Result,
 class _Fn = _Result ( * ) ( _Arg ) >
 class pointer_to_unary_function
  : public unary_function < _Arg, _Result >
 {
public :
 explicit pointer_to_unary_function ( _Fn _Left )
  : _Pfun ( _Left )
  {
  }

 _Result operator ( ) ( _Arg _Left ) const
  {
  return ( _Pfun ( _Left ) );
  }

protected :
 _Fn _Pfun;
 };


template < class _Arg1,
 class _Arg2,
 class _Result,
 class _Fn = _Result ( * ) ( _Arg1, _Arg2 ) >
 class pointer_to_binary_function
  : public binary_function < _Arg1, _Arg2, _Result >
 {
public :
 explicit pointer_to_binary_function ( _Fn _Left )
  : _Pfun ( _Left )
  {
  }

 _Result operator ( ) ( _Arg1 _Left, _Arg2 _Right ) const
  {
  return ( _Pfun ( _Left, _Right ) );
  }

protected :
 _Fn _Pfun;
 };


template < class _Arg,
 class _Result > inline
 pointer_to_unary_function < _Arg, _Result,
  _Result ( __cdecl * ) ( _Arg ) >
   ptr_fun ( _Result ( __cdecl * _Left ) ( _Arg ) )
 {
 return ( std :: pointer_to_unary_function < _Arg, _Result,
  _Result ( __cdecl * ) ( _Arg ) > ( _Left ) );
 }


template < class _Arg,
 class _Result > inline
 pointer_to_unary_function < _Arg, _Result,
  _Result ( __stdcall * ) ( _Arg ) >
   ptr_fun ( _Result ( __stdcall * _Left ) ( _Arg ) )
 {
 return ( std :: pointer_to_unary_function < _Arg, _Result,
  _Result ( __stdcall * ) ( _Arg ) > ( _Left ) );
 }


template < class _Arg,
 class _Result > inline
 pointer_to_unary_function < _Arg, _Result,
  _Result ( __fastcall * ) ( _Arg ) >
   ptr_fun ( _Result ( __fastcall * _Left ) ( _Arg ) )
 {
 return ( std :: pointer_to_unary_function < _Arg, _Result,
  _Result ( __fastcall * ) ( _Arg ) > ( _Left ) );
 }
#line 434 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\functional"
template < class _Arg1,
 class _Arg2,
 class _Result > inline
 pointer_to_binary_function < _Arg1, _Arg2, _Result,
  _Result ( __cdecl * ) ( _Arg1, _Arg2 ) >
   ptr_fun ( _Result ( __cdecl * _Left ) ( _Arg1, _Arg2 ) )
 {
 return ( std :: pointer_to_binary_function < _Arg1, _Arg2, _Result,
  _Result ( __cdecl * ) ( _Arg1, _Arg2 ) > ( _Left ) );
 }


template < class _Arg1,
 class _Arg2,
 class _Result > inline
 pointer_to_binary_function < _Arg1, _Arg2, _Result,
  _Result ( __stdcall * ) ( _Arg1, _Arg2 ) >
   ptr_fun ( _Result ( __stdcall * _Left ) ( _Arg1, _Arg2 ) )
 {
 return ( std :: pointer_to_binary_function < _Arg1, _Arg2, _Result,
  _Result ( __stdcall * ) ( _Arg1, _Arg2 ) > ( _Left ) );
 }


template < class _Arg1,
 class _Arg2,
 class _Result > inline
 pointer_to_binary_function < _Arg1, _Arg2, _Result,
  _Result ( __fastcall * ) ( _Arg1, _Arg2 ) >
   ptr_fun ( _Result ( __fastcall * _Left ) ( _Arg1, _Arg2 ) )
 {
 return ( std :: pointer_to_binary_function < _Arg1, _Arg2, _Result,
  _Result ( __fastcall * ) ( _Arg1, _Arg2 ) > ( _Left ) );
 }
#line 485 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\functional"
template < class _Result,
 class _Ty >
 class mem_fun_t
  : public unary_function < _Ty *, _Result >
 {
public :
 explicit mem_fun_t ( _Result ( _Ty :: * _Pm ) ( ) )
  : _Pmemfun ( _Pm )
  {
  }

 _Result operator ( ) ( _Ty * _Pleft ) const
  {
  return ( ( _Pleft ->* _Pmemfun ) ( ) );
  }

private :
 _Result ( _Ty :: * _Pmemfun ) ( );
 };


template < class _Result,
 class _Ty,
 class _Arg >
 class mem_fun1_t
  : public binary_function < _Ty *, _Arg, _Result >
 {
public :
 explicit mem_fun1_t ( _Result ( _Ty :: * _Pm ) ( _Arg ) )
  : _Pmemfun ( _Pm )
  {
  }

 _Result operator ( ) ( _Ty * _Pleft, _Arg _Right ) const
  {
  return ( ( _Pleft ->* _Pmemfun ) ( _Right ) );
  }

private :
 _Result ( _Ty :: * _Pmemfun ) ( _Arg );
 };


template < class _Result,
 class _Ty >
 class const_mem_fun_t
  : public unary_function < const _Ty *, _Result >
 {
public :
 explicit const_mem_fun_t ( _Result ( _Ty :: * _Pm ) ( ) const )
  : _Pmemfun ( _Pm )
  {
  }

 _Result operator ( ) ( const _Ty * _Pleft ) const
  {
  return ( ( _Pleft ->* _Pmemfun ) ( ) );
  }

private :
 _Result ( _Ty :: * _Pmemfun ) ( ) const;
 };


template < class _Result,
 class _Ty,
 class _Arg >
 class const_mem_fun1_t
  : public binary_function < const _Ty *, _Arg, _Result >
 {
public :
 explicit const_mem_fun1_t ( _Result ( _Ty :: * _Pm ) ( _Arg ) const )
  : _Pmemfun ( _Pm )
  {
  }

 _Result operator ( ) ( const _Ty * _Pleft, _Arg _Right ) const
  {
  return ( ( _Pleft ->* _Pmemfun ) ( _Right ) );
  }

private :
 _Result ( _Ty :: * _Pmemfun ) ( _Arg ) const;
 };


template < class _Result,
 class _Ty > inline
 mem_fun_t < _Result, _Ty > mem_fun ( _Result ( _Ty :: * _Pm ) ( ) )
 {
 return ( std :: mem_fun_t < _Result, _Ty > ( _Pm ) );
 }

template < class _Result,
 class _Ty,
 class _Arg > inline
 mem_fun1_t < _Result, _Ty, _Arg > mem_fun ( _Result ( _Ty :: * _Pm ) ( _Arg ) )
 {
 return ( std :: mem_fun1_t < _Result, _Ty, _Arg > ( _Pm ) );
 }

template < class _Result,
 class _Ty > inline
 const_mem_fun_t < _Result, _Ty >
  mem_fun ( _Result ( _Ty :: * _Pm ) ( ) const )
 {
 return ( std :: const_mem_fun_t < _Result, _Ty > ( _Pm ) );
 }

template < class _Result,
 class _Ty,
 class _Arg > inline
 const_mem_fun1_t < _Result, _Ty, _Arg >
  mem_fun ( _Result ( _Ty :: * _Pm ) ( _Arg ) const )
 {
 return ( std :: const_mem_fun1_t < _Result, _Ty, _Arg > ( _Pm ) );
 }


template < class _Result,
 class _Ty,
 class _Arg > inline
 mem_fun1_t < _Result, _Ty, _Arg > mem_fun1 ( _Result ( _Ty :: * _Pm ) ( _Arg ) )
 {
 return ( std :: mem_fun1_t < _Result, _Ty, _Arg > ( _Pm ) );
 }


template < class _Result,
 class _Ty >
 class mem_fun_ref_t
  : public unary_function < _Ty, _Result >
 {
public :
 explicit mem_fun_ref_t ( _Result ( _Ty :: * _Pm ) ( ) )
  : _Pmemfun ( _Pm )
  {
  }

 _Result operator ( ) ( _Ty & _Left ) const
  {
  return ( ( _Left .* _Pmemfun ) ( ) );
  }

private :
 _Result ( _Ty :: * _Pmemfun ) ( );
 };


template < class _Result,
 class _Ty,
 class _Arg >
 class mem_fun1_ref_t
  : public binary_function < _Ty, _Arg, _Result >
 {
public :
 explicit mem_fun1_ref_t ( _Result ( _Ty :: * _Pm ) ( _Arg ) )
  : _Pmemfun ( _Pm )
  {
  }

 _Result operator ( ) ( _Ty & _Left, _Arg _Right ) const
  {
  return ( ( _Left .* _Pmemfun ) ( _Right ) );
  }

private :
 _Result ( _Ty :: * _Pmemfun ) ( _Arg );
 };


template < class _Result,
 class _Ty >
 class const_mem_fun_ref_t
  : public unary_function < _Ty, _Result >
 {
public :
 explicit const_mem_fun_ref_t ( _Result ( _Ty :: * _Pm ) ( ) const )
  : _Pmemfun ( _Pm )
  {
  }

 _Result operator ( ) ( const _Ty & _Left ) const
  {
  return ( ( _Left .* _Pmemfun ) ( ) );
  }

private :
 _Result ( _Ty :: * _Pmemfun ) ( ) const;
 };


template < class _Result,
 class _Ty,
 class _Arg >
 class const_mem_fun1_ref_t
  : public binary_function < _Ty, _Arg, _Result >
 {
public :
 explicit const_mem_fun1_ref_t ( _Result ( _Ty :: * _Pm ) ( _Arg ) const )
  : _Pmemfun ( _Pm )
  {
  }

 _Result operator ( ) ( const _Ty & _Left, _Arg _Right ) const
  {
  return ( ( _Left .* _Pmemfun ) ( _Right ) );
  }

private :
 _Result ( _Ty :: * _Pmemfun ) ( _Arg ) const;
 };


template < class _Result,
 class _Ty > inline
 mem_fun_ref_t < _Result, _Ty > mem_fun_ref ( _Result ( _Ty :: * _Pm ) ( ) )
 {
 return ( std :: mem_fun_ref_t < _Result, _Ty > ( _Pm ) );
 }

template < class _Result,
 class _Ty,
 class _Arg > inline
 mem_fun1_ref_t < _Result, _Ty, _Arg >
  mem_fun_ref ( _Result ( _Ty :: * _Pm ) ( _Arg ) )
 {
 return ( std :: mem_fun1_ref_t < _Result, _Ty, _Arg > ( _Pm ) );
 }

template < class _Result,
 class _Ty > inline
 const_mem_fun_ref_t < _Result, _Ty >
  mem_fun_ref ( _Result ( _Ty :: * _Pm ) ( ) const )
 {
 return ( std :: const_mem_fun_ref_t < _Result, _Ty > ( _Pm ) );
 }

template < class _Result,
 class _Ty,
 class _Arg > inline
 const_mem_fun1_ref_t < _Result, _Ty, _Arg >
  mem_fun_ref ( _Result ( _Ty :: * _Pm ) ( _Arg ) const )
 {
 return ( std :: const_mem_fun1_ref_t < _Result, _Ty, _Arg > ( _Pm ) );
 }


template < class _Result,
 class _Ty,
 class _Arg > inline
 mem_fun1_ref_t < _Result, _Ty, _Arg > mem_fun1_ref ( _Result ( _Ty :: * _Pm ) ( _Arg ) )
 {
 return ( std :: mem_fun1_ref_t < _Result, _Ty, _Arg > ( _Pm ) );
 }
#line 869 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\functional"
}
#line 114 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xtr1common"
namespace std { 


template<class _T1, class 
_Ret> struct unary_function; 

template<class _T1, class 
_T2, class 
_Ret> struct binary_function; 


namespace tr1 { 



struct _Nil { 

}; 
static _Nil _Nil_obj; 


template<class _Ty, _Ty 
_Val> 
struct integral_constant { 

static const _Ty value = _Val; 

typedef _Ty value_type; 
typedef tr1::integral_constant< _Ty, _Val>  type; 
}; 

typedef integral_constant< bool, true>  true_type; 
typedef integral_constant< bool, false>  false_type; 


template<bool _First, bool 
_Second> struct _Or; 


template<> struct _Or< false, false>  : public false_type { 


}; 


template<> struct _Or< false, true>  : public true_type { 


}; 


template<> struct _Or< true, false>  : public true_type { 


}; 


template<> struct _Or< true, true>  : public true_type { 


}; 


template<bool __T0> struct _Cat_base; 


template<> struct _Cat_base< false>  : public false_type { 


}; 


template<> struct _Cat_base< true>  : public true_type { 


}; 


template<class _Ty> 
struct _Is_integral : public false_type { 


}; 


template<> struct _Is_integral< bool>  : public true_type { 


}; 


template<> struct _Is_integral< char>  : public true_type { 


}; 


template<> struct _Is_integral< unsigned char>  : public true_type { 


}; 


template<> struct _Is_integral< signed char>  : public true_type { 


}; 



template<> struct _Is_integral< __wchar_t>  : public true_type { 


}; 
#line 231 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xtr1common"
template<> struct _Is_integral< unsigned short>  : public true_type { 


}; 


template<> struct _Is_integral< signed short>  : public true_type { 


}; 


template<> struct _Is_integral< unsigned>  : public true_type { 


}; 


template<> struct _Is_integral< signed int>  : public true_type { 


}; 


template<> struct _Is_integral< unsigned long>  : public true_type { 


}; 


template<> struct _Is_integral< signed long>  : public true_type { 


}; 



template<> struct _Is_integral< __int64>  : public true_type { 


}; 


template<> struct _Is_integral< unsigned __int64>  : public true_type { 


}; 
#line 281 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xtr1common"
template<class _Ty> 
struct _Is_floating_point : public false_type { 


}; 


template<> struct _Is_floating_point< float>  : public true_type { 


}; 


template<> struct _Is_floating_point< double>  : public true_type { 


}; 


template<> struct _Is_floating_point< long double>  : public true_type { 


}; 


template<class _Ty> 
struct _Remove_reference { 

typedef _Ty _Type; 
}; 

template<class _Ty> 
struct _Remove_reference< _Ty &>  { 

typedef _Ty _Type; 
}; 


typedef char (&_No)[1]; 
typedef char (&_Yes)[2]; 




extern _No _Has_result_type(...); 

template<class _Ty> extern _Yes _Has_result_type(_Ty *, typename _Remove_reference< typename _Ty::result_type> ::_Type * = (0)); 
#line 333
}
}
#line 6 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xrefwrap"
namespace std { 
namespace tr1 { 



template<class _Tgt, class 
_Src> 
struct _Copy_cv { 

typedef _Tgt &_Type; 
}; 

template<class _Tgt, class 
_Src> 
struct _Copy_cv< _Tgt, const _Src &>  { 

typedef const _Tgt &_Type; 
}; 

template<class _Tgt, class 
_Src> 
struct _Copy_cv< _Tgt, volatile _Src &>  { 

typedef volatile _Tgt &_Type; 
}; 

template<class _Tgt, class 
_Src> 
struct _Copy_cv< _Tgt, const volatile _Src &>  { 

typedef const volatile _Tgt &_Type; 
}; 


template<class _Ty> struct _Result_of; 
#line 8 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<bool __T1, class 
_Fty> struct _Result_type0; 



template<class _Fty> 

struct _Result_type0< true, _Fty>  { 

typedef typename _Fty::result_type _Type; 
}; 

template<class _Fty> 

struct _Result_type0< false, _Fty>  { 



typedef void _Type; 
#line 32 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
}; 


template<class _Fty> 

struct _Result_of0 { 

static const bool _Value = (sizeof((tr1::_Has_result_type((_Fty *)0))) == sizeof(char [2])); 


typedef typename _Result_type0< (sizeof((tr1::_Has_result_type((_Fty *)0))) == sizeof(char [2])), _Fty> ::_Type _Type; 
}; 

template<class _Ret> 


struct _Result_of0< _Ret (&)(void)>  { 

typedef _Ret _Type; 
}; 

template<class _Ret> 


struct _Result_of0< _Ret (*)(void)>  { 

typedef _Ret _Type; 
}; 

template<class _Ret> 


struct _Result_of0< _Ret (*const)(void)>  { 

typedef _Ret _Type; 
}; 
#line 506 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Fty> 

struct _Result_of< _Fty __cdecl (void)>  { 

typedef typename _Result_of0< _Fty> ::_Type _Type; 
}; 
#line 8 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<bool __T2, class 
_Fty, class 
_Arg0> struct _Result_type1; 


template<class _Fty, class 
_Arg0> 
struct _Result_type1< true, _Fty, _Arg0>  { 

typedef typename _Fty::result_type _Type; 
}; 

template<class _Fty, class 
_Arg0> 
struct _Result_type1< false, _Fty, _Arg0>  { 
#line 29 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
typedef typename _Fty::template result< _Fty (_Arg0)> ::type _Type; 
#line 32 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
}; 


template<class _Fty, class 
_Farg0> 
struct _Result_of1 { 

static const bool _Value = (sizeof((tr1::_Has_result_type((_Fty *)0))) == sizeof(char [2])); 


typedef typename _Result_type1< (sizeof((tr1::_Has_result_type((_Fty *)0))) == sizeof(char [2])), _Fty, _Farg0> ::_Type _Type; 
}; 

template<class _Ret, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Ret (&)(_Arg0), _Farg0>  { 

typedef _Ret _Type; 
}; 

template<class _Ret, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Ret (*)(_Arg0), _Farg0>  { 

typedef _Ret _Type; 
}; 

template<class _Ret, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Ret (*const)(_Arg0), _Farg0>  { 

typedef _Ret _Type; 
}; 


template<class _Rx, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Rx _Arg0::*, _Farg0 &>  { 

typedef typename _Copy_cv< _Rx, _Farg0 &> ::_Type _Type; 
}; 

template<class _Rx, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Rx _Arg0::*const, _Farg0 &>  { 

typedef typename _Copy_cv< _Rx, _Farg0 &> ::_Type _Type; 
}; 
#line 89 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Rx (__thiscall _Arg0::*)(void), _Farg0 &>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Rx (__cdecl _Arg0::*)(void), _Farg0 &>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Rx (__stdcall _Arg0::*)(void), _Farg0 &>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Rx (__fastcall _Arg0::*)(void), _Farg0 &>  { 


typedef _Rx _Type; 
}; 
#line 141 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Rx (__thiscall _Arg0::*)(void) const, _Farg0 &>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Rx (__cdecl _Arg0::*)(void) const, _Farg0 &>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Rx (__stdcall _Arg0::*)(void) const, _Farg0 &>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Rx (__fastcall _Arg0::*)(void) const, _Farg0 &>  { 


typedef _Rx _Type; 
}; 
#line 193 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Rx (__thiscall _Arg0::*)(void) volatile, _Farg0 &>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Rx (__cdecl _Arg0::*)(void) volatile, _Farg0 &>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Rx (__stdcall _Arg0::*)(void) volatile, _Farg0 &>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Rx (__fastcall _Arg0::*)(void) volatile, _Farg0 &>  { 


typedef _Rx _Type; 
}; 
#line 245 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Rx (__thiscall _Arg0::*)(void) const volatile, _Farg0 &>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Rx (__cdecl _Arg0::*)(void) const volatile, _Farg0 &>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Rx (__stdcall _Arg0::*)(void) const volatile, _Farg0 &>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Rx (__fastcall _Arg0::*)(void) const volatile, _Farg0 &>  { 


typedef _Rx _Type; 
}; 
#line 297 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Rx (__thiscall _Arg0::*const)(void), _Farg0 &>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Rx (__cdecl _Arg0::*const)(void), _Farg0 &>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Rx (__stdcall _Arg0::*const)(void), _Farg0 &>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Rx (__fastcall _Arg0::*const)(void), _Farg0 &>  { 


typedef _Rx _Type; 
}; 
#line 349 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Rx (__thiscall _Arg0::*const)(void) const, _Farg0 &>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Rx (__cdecl _Arg0::*const)(void) const, _Farg0 &>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Rx (__stdcall _Arg0::*const)(void) const, _Farg0 &>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Rx (__fastcall _Arg0::*const)(void) const, _Farg0 &>  { 


typedef _Rx _Type; 
}; 
#line 401 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Rx (__thiscall _Arg0::*const)(void) volatile, _Farg0 &>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Rx (__cdecl _Arg0::*const)(void) volatile, _Farg0 &>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Rx (__stdcall _Arg0::*const)(void) volatile, _Farg0 &>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Rx (__fastcall _Arg0::*const)(void) volatile, _Farg0 &>  { 


typedef _Rx _Type; 
}; 
#line 453 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Rx (__thiscall _Arg0::*const)(void) const volatile, _Farg0 &>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Rx (__cdecl _Arg0::*const)(void) const volatile, _Farg0 &>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Rx (__stdcall _Arg0::*const)(void) const volatile, _Farg0 &>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class 
_Farg0> 
struct _Result_of1< _Rx (__fastcall _Arg0::*const)(void) const volatile, _Farg0 &>  { 


typedef _Rx _Type; 
}; 
#line 506 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Fty, class 
_Arg0> 
struct _Result_of< _Fty __cdecl (_Arg0)>  { 

typedef typename _Result_of1< _Fty, typename _Remove_reference< _Arg0> ::_Type &> ::_Type _Type; 
}; 
#line 8 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<bool __T3, class 
_Fty, class 
_Arg0, class _Arg1> struct _Result_type2; 


template<class _Fty, class 
_Arg0, class _Arg1> 
struct _Result_type2< true, _Fty, _Arg0, _Arg1>  { 

typedef typename _Fty::result_type _Type; 
}; 

template<class _Fty, class 
_Arg0, class _Arg1> 
struct _Result_type2< false, _Fty, _Arg0, _Arg1>  { 
#line 29 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
typedef typename _Fty::template result< _Fty (_Arg0, _Arg1)> ::type _Type; 
#line 32 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
}; 


template<class _Fty, class 
_Farg0, class _Farg1> 
struct _Result_of2 { 

static const bool _Value = (sizeof((tr1::_Has_result_type((_Fty *)0))) == sizeof(char [2])); 


typedef typename _Result_type2< (sizeof((tr1::_Has_result_type((_Fty *)0))) == sizeof(char [2])), _Fty, _Farg0, _Farg1> ::_Type _Type; 
}; 

template<class _Ret, class 
_Arg0, class _Arg1, class 
_Farg0, class _Farg1> 
struct _Result_of2< _Ret (&)(_Arg0, _Arg1), _Farg0, _Farg1>  { 

typedef _Ret _Type; 
}; 

template<class _Ret, class 
_Arg0, class _Arg1, class 
_Farg0, class _Farg1> 
struct _Result_of2< _Ret (*)(_Arg0, _Arg1), _Farg0, _Farg1>  { 

typedef _Ret _Type; 
}; 

template<class _Ret, class 
_Arg0, class _Arg1, class 
_Farg0, class _Farg1> 
struct _Result_of2< _Ret (*const)(_Arg0, _Arg1), _Farg0, _Farg1>  { 

typedef _Ret _Type; 
}; 
#line 89 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class 
_Farg0, class _Farg1> 
struct _Result_of2< _Rx (__thiscall _Arg0::*)(_Arg1), _Farg0 &, _Farg1>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class 
_Farg0, class _Farg1> 
struct _Result_of2< _Rx (__cdecl _Arg0::*)(_Arg1), _Farg0 &, _Farg1>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class 
_Farg0, class _Farg1> 
struct _Result_of2< _Rx (__stdcall _Arg0::*)(_Arg1), _Farg0 &, _Farg1>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class 
_Farg0, class _Farg1> 
struct _Result_of2< _Rx (__fastcall _Arg0::*)(_Arg1), _Farg0 &, _Farg1>  { 


typedef _Rx _Type; 
}; 
#line 141 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class 
_Farg0, class _Farg1> 
struct _Result_of2< _Rx (__thiscall _Arg0::*)(_Arg1) const, _Farg0 &, _Farg1>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class 
_Farg0, class _Farg1> 
struct _Result_of2< _Rx (__cdecl _Arg0::*)(_Arg1) const, _Farg0 &, _Farg1>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class 
_Farg0, class _Farg1> 
struct _Result_of2< _Rx (__stdcall _Arg0::*)(_Arg1) const, _Farg0 &, _Farg1>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class 
_Farg0, class _Farg1> 
struct _Result_of2< _Rx (__fastcall _Arg0::*)(_Arg1) const, _Farg0 &, _Farg1>  { 


typedef _Rx _Type; 
}; 
#line 193 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class 
_Farg0, class _Farg1> 
struct _Result_of2< _Rx (__thiscall _Arg0::*)(_Arg1) volatile, _Farg0 &, _Farg1>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class 
_Farg0, class _Farg1> 
struct _Result_of2< _Rx (__cdecl _Arg0::*)(_Arg1) volatile, _Farg0 &, _Farg1>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class 
_Farg0, class _Farg1> 
struct _Result_of2< _Rx (__stdcall _Arg0::*)(_Arg1) volatile, _Farg0 &, _Farg1>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class 
_Farg0, class _Farg1> 
struct _Result_of2< _Rx (__fastcall _Arg0::*)(_Arg1) volatile, _Farg0 &, _Farg1>  { 


typedef _Rx _Type; 
}; 
#line 245 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class 
_Farg0, class _Farg1> 
struct _Result_of2< _Rx (__thiscall _Arg0::*)(_Arg1) const volatile, _Farg0 &, _Farg1>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class 
_Farg0, class _Farg1> 
struct _Result_of2< _Rx (__cdecl _Arg0::*)(_Arg1) const volatile, _Farg0 &, _Farg1>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class 
_Farg0, class _Farg1> 
struct _Result_of2< _Rx (__stdcall _Arg0::*)(_Arg1) const volatile, _Farg0 &, _Farg1>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class 
_Farg0, class _Farg1> 
struct _Result_of2< _Rx (__fastcall _Arg0::*)(_Arg1) const volatile, _Farg0 &, _Farg1>  { 


typedef _Rx _Type; 
}; 
#line 297 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class 
_Farg0, class _Farg1> 
struct _Result_of2< _Rx (__thiscall _Arg0::*const)(_Arg1), _Farg0 &, _Farg1>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class 
_Farg0, class _Farg1> 
struct _Result_of2< _Rx (__cdecl _Arg0::*const)(_Arg1), _Farg0 &, _Farg1>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class 
_Farg0, class _Farg1> 
struct _Result_of2< _Rx (__stdcall _Arg0::*const)(_Arg1), _Farg0 &, _Farg1>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class 
_Farg0, class _Farg1> 
struct _Result_of2< _Rx (__fastcall _Arg0::*const)(_Arg1), _Farg0 &, _Farg1>  { 


typedef _Rx _Type; 
}; 
#line 349 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class 
_Farg0, class _Farg1> 
struct _Result_of2< _Rx (__thiscall _Arg0::*const)(_Arg1) const, _Farg0 &, _Farg1>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class 
_Farg0, class _Farg1> 
struct _Result_of2< _Rx (__cdecl _Arg0::*const)(_Arg1) const, _Farg0 &, _Farg1>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class 
_Farg0, class _Farg1> 
struct _Result_of2< _Rx (__stdcall _Arg0::*const)(_Arg1) const, _Farg0 &, _Farg1>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class 
_Farg0, class _Farg1> 
struct _Result_of2< _Rx (__fastcall _Arg0::*const)(_Arg1) const, _Farg0 &, _Farg1>  { 


typedef _Rx _Type; 
}; 
#line 401 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class 
_Farg0, class _Farg1> 
struct _Result_of2< _Rx (__thiscall _Arg0::*const)(_Arg1) volatile, _Farg0 &, _Farg1>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class 
_Farg0, class _Farg1> 
struct _Result_of2< _Rx (__cdecl _Arg0::*const)(_Arg1) volatile, _Farg0 &, _Farg1>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class 
_Farg0, class _Farg1> 
struct _Result_of2< _Rx (__stdcall _Arg0::*const)(_Arg1) volatile, _Farg0 &, _Farg1>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class 
_Farg0, class _Farg1> 
struct _Result_of2< _Rx (__fastcall _Arg0::*const)(_Arg1) volatile, _Farg0 &, _Farg1>  { 


typedef _Rx _Type; 
}; 
#line 453 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class 
_Farg0, class _Farg1> 
struct _Result_of2< _Rx (__thiscall _Arg0::*const)(_Arg1) const volatile, _Farg0 &, _Farg1>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class 
_Farg0, class _Farg1> 
struct _Result_of2< _Rx (__cdecl _Arg0::*const)(_Arg1) const volatile, _Farg0 &, _Farg1>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class 
_Farg0, class _Farg1> 
struct _Result_of2< _Rx (__stdcall _Arg0::*const)(_Arg1) const volatile, _Farg0 &, _Farg1>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class 
_Farg0, class _Farg1> 
struct _Result_of2< _Rx (__fastcall _Arg0::*const)(_Arg1) const volatile, _Farg0 &, _Farg1>  { 


typedef _Rx _Type; 
}; 
#line 506 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Fty, class 
_Arg0, class _Arg1> 
struct _Result_of< _Fty __cdecl (_Arg0, _Arg1)>  { 

typedef typename _Result_of2< _Fty, typename _Remove_reference< _Arg0> ::_Type &, typename _Remove_reference< _Arg1> ::_Type &> ::_Type _Type; 
}; 
#line 8 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<bool __T4, class 
_Fty, class 
_Arg0, class _Arg1, class _Arg2> struct _Result_type3; 


template<class _Fty, class 
_Arg0, class _Arg1, class _Arg2> 
struct _Result_type3< true, _Fty, _Arg0, _Arg1, _Arg2>  { 

typedef typename _Fty::result_type _Type; 
}; 

template<class _Fty, class 
_Arg0, class _Arg1, class _Arg2> 
struct _Result_type3< false, _Fty, _Arg0, _Arg1, _Arg2>  { 
#line 29 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
typedef typename _Fty::template result< _Fty (_Arg0, _Arg1, _Arg2)> ::type _Type; 
#line 32 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
}; 


template<class _Fty, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3 { 

static const bool _Value = (sizeof((tr1::_Has_result_type((_Fty *)0))) == sizeof(char [2])); 


typedef typename _Result_type3< (sizeof((tr1::_Has_result_type((_Fty *)0))) == sizeof(char [2])), _Fty, _Farg0, _Farg1, _Farg2> ::_Type _Type; 
}; 

template<class _Ret, class 
_Arg0, class _Arg1, class _Arg2, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3< _Ret (&)(_Arg0, _Arg1, _Arg2), _Farg0, _Farg1, _Farg2>  { 

typedef _Ret _Type; 
}; 

template<class _Ret, class 
_Arg0, class _Arg1, class _Arg2, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3< _Ret (*)(_Arg0, _Arg1, _Arg2), _Farg0, _Farg1, _Farg2>  { 

typedef _Ret _Type; 
}; 

template<class _Ret, class 
_Arg0, class _Arg1, class _Arg2, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3< _Ret (*const)(_Arg0, _Arg1, _Arg2), _Farg0, _Farg1, _Farg2>  { 

typedef _Ret _Type; 
}; 
#line 89 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3< _Rx (__thiscall _Arg0::*)(_Arg1, _Arg2), _Farg0 &, _Farg1, _Farg2>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3< _Rx (__cdecl _Arg0::*)(_Arg1, _Arg2), _Farg0 &, _Farg1, _Farg2>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3< _Rx (__stdcall _Arg0::*)(_Arg1, _Arg2), _Farg0 &, _Farg1, _Farg2>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3< _Rx (__fastcall _Arg0::*)(_Arg1, _Arg2), _Farg0 &, _Farg1, _Farg2>  { 


typedef _Rx _Type; 
}; 
#line 141 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3< _Rx (__thiscall _Arg0::*)(_Arg1, _Arg2) const, _Farg0 &, _Farg1, _Farg2>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3< _Rx (__cdecl _Arg0::*)(_Arg1, _Arg2) const, _Farg0 &, _Farg1, _Farg2>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3< _Rx (__stdcall _Arg0::*)(_Arg1, _Arg2) const, _Farg0 &, _Farg1, _Farg2>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3< _Rx (__fastcall _Arg0::*)(_Arg1, _Arg2) const, _Farg0 &, _Farg1, _Farg2>  { 


typedef _Rx _Type; 
}; 
#line 193 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3< _Rx (__thiscall _Arg0::*)(_Arg1, _Arg2) volatile, _Farg0 &, _Farg1, _Farg2>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3< _Rx (__cdecl _Arg0::*)(_Arg1, _Arg2) volatile, _Farg0 &, _Farg1, _Farg2>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3< _Rx (__stdcall _Arg0::*)(_Arg1, _Arg2) volatile, _Farg0 &, _Farg1, _Farg2>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3< _Rx (__fastcall _Arg0::*)(_Arg1, _Arg2) volatile, _Farg0 &, _Farg1, _Farg2>  { 


typedef _Rx _Type; 
}; 
#line 245 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3< _Rx (__thiscall _Arg0::*)(_Arg1, _Arg2) const volatile, _Farg0 &, _Farg1, _Farg2>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3< _Rx (__cdecl _Arg0::*)(_Arg1, _Arg2) const volatile, _Farg0 &, _Farg1, _Farg2>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3< _Rx (__stdcall _Arg0::*)(_Arg1, _Arg2) const volatile, _Farg0 &, _Farg1, _Farg2>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3< _Rx (__fastcall _Arg0::*)(_Arg1, _Arg2) const volatile, _Farg0 &, _Farg1, _Farg2>  { 


typedef _Rx _Type; 
}; 
#line 297 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3< _Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2), _Farg0 &, _Farg1, _Farg2>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3< _Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2), _Farg0 &, _Farg1, _Farg2>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3< _Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2), _Farg0 &, _Farg1, _Farg2>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3< _Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2), _Farg0 &, _Farg1, _Farg2>  { 


typedef _Rx _Type; 
}; 
#line 349 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3< _Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2) const, _Farg0 &, _Farg1, _Farg2>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3< _Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2) const, _Farg0 &, _Farg1, _Farg2>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3< _Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2) const, _Farg0 &, _Farg1, _Farg2>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3< _Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2) const, _Farg0 &, _Farg1, _Farg2>  { 


typedef _Rx _Type; 
}; 
#line 401 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3< _Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2) volatile, _Farg0 &, _Farg1, _Farg2>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3< _Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2) volatile, _Farg0 &, _Farg1, _Farg2>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3< _Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2) volatile, _Farg0 &, _Farg1, _Farg2>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3< _Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2) volatile, _Farg0 &, _Farg1, _Farg2>  { 


typedef _Rx _Type; 
}; 
#line 453 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3< _Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2) const volatile, _Farg0 &, _Farg1, _Farg2>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3< _Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2) const volatile, _Farg0 &, _Farg1, _Farg2>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3< _Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2) const volatile, _Farg0 &, _Farg1, _Farg2>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class 
_Farg0, class _Farg1, class _Farg2> 
struct _Result_of3< _Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2) const volatile, _Farg0 &, _Farg1, _Farg2>  { 


typedef _Rx _Type; 
}; 
#line 506 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Fty, class 
_Arg0, class _Arg1, class _Arg2> 
struct _Result_of< _Fty __cdecl (_Arg0, _Arg1, _Arg2)>  { 

typedef typename _Result_of3< _Fty, typename _Remove_reference< _Arg0> ::_Type &, typename _Remove_reference< _Arg1> ::_Type &, typename _Remove_reference< _Arg2> ::_Type &> ::_Type _Type; 
}; 
#line 8 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<bool __T5, class 
_Fty, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3> struct _Result_type4; 


template<class _Fty, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3> 
struct _Result_type4< true, _Fty, _Arg0, _Arg1, _Arg2, _Arg3>  { 

typedef typename _Fty::result_type _Type; 
}; 

template<class _Fty, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3> 
struct _Result_type4< false, _Fty, _Arg0, _Arg1, _Arg2, _Arg3>  { 
#line 29 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
typedef typename _Fty::template result< _Fty (_Arg0, _Arg1, _Arg2, _Arg3)> ::type _Type; 
#line 32 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
}; 


template<class _Fty, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4 { 

static const bool _Value = (sizeof((tr1::_Has_result_type((_Fty *)0))) == sizeof(char [2])); 


typedef typename _Result_type4< (sizeof((tr1::_Has_result_type((_Fty *)0))) == sizeof(char [2])), _Fty, _Farg0, _Farg1, _Farg2, _Farg3> ::_Type _Type; 
}; 

template<class _Ret, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4< _Ret (&)(_Arg0, _Arg1, _Arg2, _Arg3), _Farg0, _Farg1, _Farg2, _Farg3>  { 

typedef _Ret _Type; 
}; 

template<class _Ret, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4< _Ret (*)(_Arg0, _Arg1, _Arg2, _Arg3), _Farg0, _Farg1, _Farg2, _Farg3>  { 

typedef _Ret _Type; 
}; 

template<class _Ret, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4< _Ret (*const)(_Arg0, _Arg1, _Arg2, _Arg3), _Farg0, _Farg1, _Farg2, _Farg3>  { 

typedef _Ret _Type; 
}; 
#line 89 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4< _Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3), _Farg0 &, _Farg1, _Farg2, _Farg3>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4< _Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3), _Farg0 &, _Farg1, _Farg2, _Farg3>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4< _Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3), _Farg0 &, _Farg1, _Farg2, _Farg3>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4< _Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3), _Farg0 &, _Farg1, _Farg2, _Farg3>  { 


typedef _Rx _Type; 
}; 
#line 141 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4< _Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3) const, _Farg0 &, _Farg1, _Farg2, _Farg3>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4< _Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3) const, _Farg0 &, _Farg1, _Farg2, _Farg3>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4< _Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3) const, _Farg0 &, _Farg1, _Farg2, _Farg3>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4< _Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3) const, _Farg0 &, _Farg1, _Farg2, _Farg3>  { 


typedef _Rx _Type; 
}; 
#line 193 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4< _Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4< _Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4< _Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4< _Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3>  { 


typedef _Rx _Type; 
}; 
#line 245 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4< _Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4< _Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4< _Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4< _Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3>  { 


typedef _Rx _Type; 
}; 
#line 297 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4< _Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3), _Farg0 &, _Farg1, _Farg2, _Farg3>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4< _Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3), _Farg0 &, _Farg1, _Farg2, _Farg3>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4< _Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3), _Farg0 &, _Farg1, _Farg2, _Farg3>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4< _Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3), _Farg0 &, _Farg1, _Farg2, _Farg3>  { 


typedef _Rx _Type; 
}; 
#line 349 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4< _Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3) const, _Farg0 &, _Farg1, _Farg2, _Farg3>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4< _Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3) const, _Farg0 &, _Farg1, _Farg2, _Farg3>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4< _Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3) const, _Farg0 &, _Farg1, _Farg2, _Farg3>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4< _Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3) const, _Farg0 &, _Farg1, _Farg2, _Farg3>  { 


typedef _Rx _Type; 
}; 
#line 401 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4< _Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4< _Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4< _Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4< _Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3>  { 


typedef _Rx _Type; 
}; 
#line 453 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4< _Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4< _Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4< _Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3> 
struct _Result_of4< _Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3>  { 


typedef _Rx _Type; 
}; 
#line 506 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Fty, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3> 
struct _Result_of< _Fty __cdecl (_Arg0, _Arg1, _Arg2, _Arg3)>  { 

typedef typename _Result_of4< _Fty, typename _Remove_reference< _Arg0> ::_Type &, typename _Remove_reference< _Arg1> ::_Type &, typename _Remove_reference< _Arg2> ::_Type &, typename _Remove_reference< _Arg3> ::_Type &> ::_Type _Type; 
}; 
#line 8 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<bool __T6, class 
_Fty, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4> struct _Result_type5; 


template<class _Fty, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4> 
struct _Result_type5< true, _Fty, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4>  { 

typedef typename _Fty::result_type _Type; 
}; 

template<class _Fty, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4> 
struct _Result_type5< false, _Fty, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4>  { 
#line 29 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
typedef typename _Fty::template result< _Fty (_Arg0, _Arg1, _Arg2, _Arg3, _Arg4)> ::type _Type; 
#line 32 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
}; 


template<class _Fty, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5 { 

static const bool _Value = (sizeof((tr1::_Has_result_type((_Fty *)0))) == sizeof(char [2])); 


typedef typename _Result_type5< (sizeof((tr1::_Has_result_type((_Fty *)0))) == sizeof(char [2])), _Fty, _Farg0, _Farg1, _Farg2, _Farg3, _Farg4> ::_Type _Type; 
}; 

template<class _Ret, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5< _Ret (&)(_Arg0, _Arg1, _Arg2, _Arg3, _Arg4), _Farg0, _Farg1, _Farg2, _Farg3, _Farg4>  { 

typedef _Ret _Type; 
}; 

template<class _Ret, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5< _Ret (*)(_Arg0, _Arg1, _Arg2, _Arg3, _Arg4), _Farg0, _Farg1, _Farg2, _Farg3, _Farg4>  { 

typedef _Ret _Type; 
}; 

template<class _Ret, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5< _Ret (*const)(_Arg0, _Arg1, _Arg2, _Arg3, _Arg4), _Farg0, _Farg1, _Farg2, _Farg3, _Farg4>  { 

typedef _Ret _Type; 
}; 
#line 89 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5< _Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5< _Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5< _Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5< _Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4>  { 


typedef _Rx _Type; 
}; 
#line 141 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5< _Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5< _Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5< _Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5< _Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4>  { 


typedef _Rx _Type; 
}; 
#line 193 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5< _Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5< _Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5< _Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5< _Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4>  { 


typedef _Rx _Type; 
}; 
#line 245 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5< _Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5< _Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5< _Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5< _Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4>  { 


typedef _Rx _Type; 
}; 
#line 297 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5< _Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5< _Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5< _Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5< _Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4>  { 


typedef _Rx _Type; 
}; 
#line 349 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5< _Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5< _Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5< _Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5< _Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4>  { 


typedef _Rx _Type; 
}; 
#line 401 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5< _Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5< _Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5< _Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5< _Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4>  { 


typedef _Rx _Type; 
}; 
#line 453 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5< _Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5< _Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5< _Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4> 
struct _Result_of5< _Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4>  { 


typedef _Rx _Type; 
}; 
#line 506 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Fty, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4> 
struct _Result_of< _Fty __cdecl (_Arg0, _Arg1, _Arg2, _Arg3, _Arg4)>  { 

typedef typename _Result_of5< _Fty, typename _Remove_reference< _Arg0> ::_Type &, typename _Remove_reference< _Arg1> ::_Type &, typename _Remove_reference< _Arg2> ::_Type &, typename _Remove_reference< _Arg3> ::_Type &, typename _Remove_reference< _Arg4> ::_Type &> ::_Type _Type; 
}; 
#line 8 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<bool __T7, class 
_Fty, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5> struct _Result_type6; 


template<class _Fty, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5> 
struct _Result_type6< true, _Fty, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5>  { 

typedef typename _Fty::result_type _Type; 
}; 

template<class _Fty, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5> 
struct _Result_type6< false, _Fty, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5>  { 
#line 29 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
typedef typename _Fty::template result< _Fty (_Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5)> ::type _Type; 
#line 32 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
}; 


template<class _Fty, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6 { 

static const bool _Value = (sizeof((tr1::_Has_result_type((_Fty *)0))) == sizeof(char [2])); 


typedef typename _Result_type6< (sizeof((tr1::_Has_result_type((_Fty *)0))) == sizeof(char [2])), _Fty, _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5> ::_Type _Type; 
}; 

template<class _Ret, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6< _Ret (&)(_Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5), _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5>  { 

typedef _Ret _Type; 
}; 

template<class _Ret, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6< _Ret (*)(_Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5), _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5>  { 

typedef _Ret _Type; 
}; 

template<class _Ret, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6< _Ret (*const)(_Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5), _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5>  { 

typedef _Ret _Type; 
}; 
#line 89 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6< _Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6< _Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6< _Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6< _Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5>  { 


typedef _Rx _Type; 
}; 
#line 141 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6< _Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6< _Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6< _Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6< _Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5>  { 


typedef _Rx _Type; 
}; 
#line 193 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6< _Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6< _Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6< _Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6< _Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5>  { 


typedef _Rx _Type; 
}; 
#line 245 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6< _Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6< _Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6< _Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6< _Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5>  { 


typedef _Rx _Type; 
}; 
#line 297 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6< _Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6< _Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6< _Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6< _Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5>  { 


typedef _Rx _Type; 
}; 
#line 349 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6< _Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6< _Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6< _Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6< _Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5>  { 


typedef _Rx _Type; 
}; 
#line 401 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6< _Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6< _Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6< _Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6< _Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5>  { 


typedef _Rx _Type; 
}; 
#line 453 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6< _Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6< _Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6< _Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5> 
struct _Result_of6< _Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5>  { 


typedef _Rx _Type; 
}; 
#line 506 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Fty, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5> 
struct _Result_of< _Fty __cdecl (_Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5)>  { 

typedef typename _Result_of6< _Fty, typename _Remove_reference< _Arg0> ::_Type &, typename _Remove_reference< _Arg1> ::_Type &, typename _Remove_reference< _Arg2> ::_Type &, typename _Remove_reference< _Arg3> ::_Type &, typename _Remove_reference< _Arg4> ::_Type &, typename _Remove_reference< _Arg5> ::_Type &> ::_Type _Type; 
}; 
#line 8 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<bool __T8, class 
_Fty, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6> struct _Result_type7; 


template<class _Fty, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6> 
struct _Result_type7< true, _Fty, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6>  { 

typedef typename _Fty::result_type _Type; 
}; 

template<class _Fty, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6> 
struct _Result_type7< false, _Fty, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6>  { 
#line 29 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
typedef typename _Fty::template result< _Fty (_Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6)> ::type _Type; 
#line 32 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
}; 


template<class _Fty, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7 { 

static const bool _Value = (sizeof((tr1::_Has_result_type((_Fty *)0))) == sizeof(char [2])); 


typedef typename _Result_type7< (sizeof((tr1::_Has_result_type((_Fty *)0))) == sizeof(char [2])), _Fty, _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6> ::_Type _Type; 
}; 

template<class _Ret, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7< _Ret (&)(_Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6), _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6>  { 

typedef _Ret _Type; 
}; 

template<class _Ret, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7< _Ret (*)(_Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6), _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6>  { 

typedef _Ret _Type; 
}; 

template<class _Ret, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7< _Ret (*const)(_Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6), _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6>  { 

typedef _Ret _Type; 
}; 
#line 89 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7< _Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7< _Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7< _Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7< _Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6>  { 


typedef _Rx _Type; 
}; 
#line 141 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7< _Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7< _Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7< _Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7< _Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6>  { 


typedef _Rx _Type; 
}; 
#line 193 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7< _Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7< _Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7< _Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7< _Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6>  { 


typedef _Rx _Type; 
}; 
#line 245 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7< _Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7< _Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7< _Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7< _Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6>  { 


typedef _Rx _Type; 
}; 
#line 297 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7< _Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7< _Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7< _Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7< _Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6>  { 


typedef _Rx _Type; 
}; 
#line 349 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7< _Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7< _Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7< _Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7< _Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6>  { 


typedef _Rx _Type; 
}; 
#line 401 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7< _Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7< _Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7< _Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7< _Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6>  { 


typedef _Rx _Type; 
}; 
#line 453 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7< _Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7< _Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7< _Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6> 
struct _Result_of7< _Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6>  { 


typedef _Rx _Type; 
}; 
#line 506 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Fty, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6> 
struct _Result_of< _Fty __cdecl (_Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6)>  { 

typedef typename _Result_of7< _Fty, typename _Remove_reference< _Arg0> ::_Type &, typename _Remove_reference< _Arg1> ::_Type &, typename _Remove_reference< _Arg2> ::_Type &, typename _Remove_reference< _Arg3> ::_Type &, typename _Remove_reference< _Arg4> ::_Type &, typename _Remove_reference< _Arg5> ::_Type &, typename _Remove_reference< _Arg6> ::_Type &> ::_Type _Type; 
}; 
#line 8 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<bool __T9, class 
_Fty, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7> struct _Result_type8; 


template<class _Fty, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7> 
struct _Result_type8< true, _Fty, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7>  { 

typedef typename _Fty::result_type _Type; 
}; 

template<class _Fty, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7> 
struct _Result_type8< false, _Fty, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7>  { 
#line 29 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
typedef typename _Fty::template result< _Fty (_Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7)> ::type _Type; 
#line 32 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
}; 


template<class _Fty, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8 { 

static const bool _Value = (sizeof((tr1::_Has_result_type((_Fty *)0))) == sizeof(char [2])); 


typedef typename _Result_type8< (sizeof((tr1::_Has_result_type((_Fty *)0))) == sizeof(char [2])), _Fty, _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7> ::_Type _Type; 
}; 

template<class _Ret, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8< _Ret (&)(_Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7), _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7>  { 

typedef _Ret _Type; 
}; 

template<class _Ret, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8< _Ret (*)(_Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7), _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7>  { 

typedef _Ret _Type; 
}; 

template<class _Ret, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8< _Ret (*const)(_Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7), _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7>  { 

typedef _Ret _Type; 
}; 
#line 89 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8< _Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8< _Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8< _Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8< _Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7>  { 


typedef _Rx _Type; 
}; 
#line 141 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8< _Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8< _Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8< _Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8< _Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7>  { 


typedef _Rx _Type; 
}; 
#line 193 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8< _Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8< _Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8< _Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8< _Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7>  { 


typedef _Rx _Type; 
}; 
#line 245 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8< _Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8< _Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8< _Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8< _Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7>  { 


typedef _Rx _Type; 
}; 
#line 297 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8< _Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8< _Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8< _Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8< _Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7>  { 


typedef _Rx _Type; 
}; 
#line 349 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8< _Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8< _Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8< _Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8< _Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7>  { 


typedef _Rx _Type; 
}; 
#line 401 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8< _Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8< _Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8< _Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8< _Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7>  { 


typedef _Rx _Type; 
}; 
#line 453 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8< _Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8< _Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8< _Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7> 
struct _Result_of8< _Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7>  { 


typedef _Rx _Type; 
}; 
#line 506 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Fty, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7> 
struct _Result_of< _Fty __cdecl (_Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7)>  { 

typedef typename _Result_of8< _Fty, typename _Remove_reference< _Arg0> ::_Type &, typename _Remove_reference< _Arg1> ::_Type &, typename _Remove_reference< _Arg2> ::_Type &, typename _Remove_reference< _Arg3> ::_Type &, typename _Remove_reference< _Arg4> ::_Type &, typename _Remove_reference< _Arg5> ::_Type &, typename _Remove_reference< _Arg6> ::_Type &, typename _Remove_reference< _Arg7> ::_Type &> ::_Type _Type; 
}; 
#line 8 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<bool __T10, class 
_Fty, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8> struct _Result_type9; 


template<class _Fty, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8> 
struct _Result_type9< true, _Fty, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8>  { 

typedef typename _Fty::result_type _Type; 
}; 

template<class _Fty, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8> 
struct _Result_type9< false, _Fty, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8>  { 
#line 29 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
typedef typename _Fty::template result< _Fty (_Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8)> ::type _Type; 
#line 32 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
}; 


template<class _Fty, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9 { 

static const bool _Value = (sizeof((tr1::_Has_result_type((_Fty *)0))) == sizeof(char [2])); 


typedef typename _Result_type9< (sizeof((tr1::_Has_result_type((_Fty *)0))) == sizeof(char [2])), _Fty, _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8> ::_Type _Type; 
}; 

template<class _Ret, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9< _Ret (&)(_Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8), _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8>  { 

typedef _Ret _Type; 
}; 

template<class _Ret, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9< _Ret (*)(_Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8), _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8>  { 

typedef _Ret _Type; 
}; 

template<class _Ret, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9< _Ret (*const)(_Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8), _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8>  { 

typedef _Ret _Type; 
}; 
#line 89 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9< _Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9< _Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9< _Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9< _Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8>  { 


typedef _Rx _Type; 
}; 
#line 141 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9< _Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9< _Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9< _Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9< _Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8>  { 


typedef _Rx _Type; 
}; 
#line 193 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9< _Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9< _Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9< _Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9< _Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8>  { 


typedef _Rx _Type; 
}; 
#line 245 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9< _Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9< _Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9< _Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9< _Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8>  { 


typedef _Rx _Type; 
}; 
#line 297 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9< _Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9< _Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9< _Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9< _Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8>  { 


typedef _Rx _Type; 
}; 
#line 349 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9< _Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9< _Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9< _Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9< _Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8>  { 


typedef _Rx _Type; 
}; 
#line 401 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9< _Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9< _Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9< _Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9< _Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8>  { 


typedef _Rx _Type; 
}; 
#line 453 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9< _Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9< _Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9< _Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8> 
struct _Result_of9< _Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8>  { 


typedef _Rx _Type; 
}; 
#line 506 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Fty, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8> 
struct _Result_of< _Fty __cdecl (_Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8)>  { 

typedef typename _Result_of9< _Fty, typename _Remove_reference< _Arg0> ::_Type &, typename _Remove_reference< _Arg1> ::_Type &, typename _Remove_reference< _Arg2> ::_Type &, typename _Remove_reference< _Arg3> ::_Type &, typename _Remove_reference< _Arg4> ::_Type &, typename _Remove_reference< _Arg5> ::_Type &, typename _Remove_reference< _Arg6> ::_Type &, typename _Remove_reference< _Arg7> ::_Type &, typename _Remove_reference< _Arg8> ::_Type &> ::_Type _Type; 
}; 
#line 8 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<bool __T11, class 
_Fty, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9> struct _Result_type10; 


template<class _Fty, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9> 
struct _Result_type10< true, _Fty, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9>  { 

typedef typename _Fty::result_type _Type; 
}; 

template<class _Fty, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9> 
struct _Result_type10< false, _Fty, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9>  { 
#line 29 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
typedef typename _Fty::template result< _Fty (_Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9)> ::type _Type; 
#line 32 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
}; 


template<class _Fty, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10 { 

static const bool _Value = (sizeof((tr1::_Has_result_type((_Fty *)0))) == sizeof(char [2])); 


typedef typename _Result_type10< (sizeof((tr1::_Has_result_type((_Fty *)0))) == sizeof(char [2])), _Fty, _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9> ::_Type _Type; 
}; 

template<class _Ret, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10< _Ret (&)(_Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9), _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9>  { 

typedef _Ret _Type; 
}; 

template<class _Ret, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10< _Ret (*)(_Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9), _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9>  { 

typedef _Ret _Type; 
}; 

template<class _Ret, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10< _Ret (*const)(_Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9), _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9>  { 

typedef _Ret _Type; 
}; 
#line 89 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10< _Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10< _Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10< _Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10< _Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9>  { 


typedef _Rx _Type; 
}; 
#line 141 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10< _Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10< _Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10< _Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10< _Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9>  { 


typedef _Rx _Type; 
}; 
#line 193 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10< _Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10< _Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10< _Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10< _Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9>  { 


typedef _Rx _Type; 
}; 
#line 245 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10< _Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10< _Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10< _Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10< _Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9>  { 


typedef _Rx _Type; 
}; 
#line 297 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10< _Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10< _Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10< _Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10< _Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9), _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9>  { 


typedef _Rx _Type; 
}; 
#line 349 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10< _Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10< _Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10< _Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10< _Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9) const, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9>  { 


typedef _Rx _Type; 
}; 
#line 401 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10< _Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10< _Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10< _Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10< _Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9) volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9>  { 


typedef _Rx _Type; 
}; 
#line 453 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10< _Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10< _Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9>  { 


typedef _Rx _Type; 
}; 

template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10< _Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9>  { 


typedef _Rx _Type; 
}; 


template<class _Rx, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9, class 
_Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9> 
struct _Result_of10< _Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9) const volatile, _Farg0 &, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9>  { 


typedef _Rx _Type; 
}; 
#line 506 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxresult"
template<class _Fty, class 
_Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9> 
struct _Result_of< _Fty __cdecl (_Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9)>  { 

typedef typename _Result_of10< _Fty, typename _Remove_reference< _Arg0> ::_Type &, typename _Remove_reference< _Arg1> ::_Type &, typename _Remove_reference< _Arg2> ::_Type &, typename _Remove_reference< _Arg3> ::_Type &, typename _Remove_reference< _Arg4> ::_Type &, typename _Remove_reference< _Arg5> ::_Type &, typename _Remove_reference< _Arg6> ::_Type &, typename _Remove_reference< _Arg7> ::_Type &, typename _Remove_reference< _Arg8> ::_Type &, typename _Remove_reference< _Arg9> ::_Type &> ::_Type _Type; 
}; 
#line 47 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xrefwrap"
template<class _Fty> 
struct result_of { 

typedef typename _Result_of< _Fty> ::_Type type; 
}; 




template<class _Ret, class 
_Arg0> 
struct _Pmd_caller { 

template < class _Pmd,
  class _Farg0 >
  static _Ret _Call_pmd ( const volatile _Arg0 *, _Pmd _Pm, _Farg0 _F0 )
  {
  return ( ( _Ret ) ( _F0 .* _Pm ) );
  }

template < class _Pmd,
  class _Farg0 >
  static _Ret _Call_pmd ( const volatile void *, _Pmd _Pm, _Farg0 _F0 )
  {
  return ( ( * _F0 ) .* _Pm );
  }

template < class _Pmd,
  class _Farg0 >
  static _Ret _Apply_pmd ( _Pmd _Pm, _Farg0 & _F0 )
  {
  return ( _Call_pmd < _Pmd, _Farg0 & > ( & _F0, _Pm, _F0 ) );
  }

template < class _Pmd,
  class _Farg0 >
  static _Ret _Apply_pmd ( _Pmd _Pm, _Farg0 * _F0 )
  {
  return ( _Call_pmd < _Pmd, _Farg0 & > ( _F0, _Pm, * _F0 ) );
  }
}; 
#line 7 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxpmfcaller"
template < class _Ty >
 class reference_wrapper;

template<class _Ret, class 
_Arg0> 
struct _Pmf_caller1 { 

typedef _Arg0 _Funobj; 


template < class _Pmf,
  class _Farg0 >
  static _Ret _Call_pmf ( const volatile
   reference_wrapper < typename _Remove_reference < _Arg0 > :: _Type > *,
    _Pmf _Pm, _Farg0 _Fx0 )
  {
  typedef typename _Remove_reference < _Arg0 > :: _Type _Arg0_noref;
  typedef typename _Remove_reference < _Farg0 > :: _Type _Farg0_noref;
  typedef typename _Copy_cv < _Arg0_noref, _Farg0_noref > :: _Type
   _Funobj_cv;
  return ( ( ( _Funobj_cv ) _Fx0 .* _Pm ) ( ) );
  }

template < class _Pmf,
  class _Farg0 >
  static _Ret _Call_pmf (
   const volatile typename _Remove_reference < _Arg0 > :: _Type *,
    _Pmf _Pm, _Farg0 _Fx0 )
  {
  typedef typename _Remove_reference < _Arg0 > :: _Type _Arg0_noref;
  typedef typename _Remove_reference < _Farg0 > :: _Type _Farg0_noref;
  typedef typename _Copy_cv < _Arg0_noref, _Farg0_noref > :: _Type
   _Funobj_cv;
  return ( ( ( _Funobj_cv ) _Fx0 .* _Pm ) ( ) );
  }

template < class _Pmf,
  class _Farg0 >
  static _Ret _Call_pmf (
   const volatile typename _Remove_reference < _Arg0 > :: _Type &,
    _Pmf _Pm, _Farg0 _Fx0 )
  {
  return ( ( _Fx0 .* _Pm ) ( ) );
  }

template < class _Pmf,
  class _Farg0 >
  static _Ret _Call_pmf ( const volatile void *, _Pmf _Pm, _Farg0 _Fx0 )
  {
  return ( ( ( * _Fx0 ) .* _Pm ) ( ) );
  }

template < class _Pmf,
  class _Farg0 >
  static _Ret _Apply_pmf ( _Pmf _Pm, _Farg0 & _Fx0 )
  {
  return ( _Call_pmf < _Pmf, _Farg0 & > ( & _Fx0, _Pm,
   _Fx0 ) );
  }

template < class _Pmf,
  class _Farg0 >
  static _Ret _Apply_pmf ( _Pmf _Pm, _Farg0 * _Fx0 )
  {
  return ( _Call_pmf < _Pmf, _Farg0 & > ( _Fx0, _Pm,
   * _Fx0 ) );
  }
}; 
#line 7 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxpmfcaller"
template<class _Ty> class reference_wrapper; 


template<class _Ret, class 
_Arg0> 
struct _Pmf_caller2 { 

typedef _Arg0 _Funobj; 


template < class _Pmf,
  class _Farg0, class _Farg1 >
  static _Ret _Call_pmf ( const volatile
   reference_wrapper < typename _Remove_reference < _Arg0 > :: _Type > *,
    _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1 )
  {
  typedef typename _Remove_reference < _Arg0 > :: _Type _Arg0_noref;
  typedef typename _Remove_reference < _Farg0 > :: _Type _Farg0_noref;
  typedef typename _Copy_cv < _Arg0_noref, _Farg0_noref > :: _Type
   _Funobj_cv;
  return ( ( ( _Funobj_cv ) _Fx0 .* _Pm ) ( _Fx1 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1 >
  static _Ret _Call_pmf (
   const volatile typename _Remove_reference < _Arg0 > :: _Type *,
    _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1 )
  {
  typedef typename _Remove_reference < _Arg0 > :: _Type _Arg0_noref;
  typedef typename _Remove_reference < _Farg0 > :: _Type _Farg0_noref;
  typedef typename _Copy_cv < _Arg0_noref, _Farg0_noref > :: _Type
   _Funobj_cv;
  return ( ( ( _Funobj_cv ) _Fx0 .* _Pm ) ( _Fx1 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1 >
  static _Ret _Call_pmf (
   const volatile typename _Remove_reference < _Arg0 > :: _Type &,
    _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1 )
  {
  return ( ( _Fx0 .* _Pm ) ( _Fx1 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1 >
  static _Ret _Call_pmf ( const volatile void *, _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1 )
  {
  return ( ( ( * _Fx0 ) .* _Pm ) ( _Fx1 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1 >
  static _Ret _Apply_pmf ( _Pmf _Pm, _Farg0 & _Fx0, _Farg1 & _Fx1 )
  {
  return ( _Call_pmf < _Pmf, _Farg0 &, _Farg1 & > ( & _Fx0, _Pm,
   _Fx0, _Fx1 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1 >
  static _Ret _Apply_pmf ( _Pmf _Pm, _Farg0 * _Fx0, _Farg1 & _Fx1 )
  {
  return ( _Call_pmf < _Pmf, _Farg0 &, _Farg1 & > ( _Fx0, _Pm,
   * _Fx0, _Fx1 ) );
  }
}; 
#line 7 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxpmfcaller"
template<class _Ty> class reference_wrapper; 


template<class _Ret, class 
_Arg0> 
struct _Pmf_caller3 { 

typedef _Arg0 _Funobj; 


template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2 >
  static _Ret _Call_pmf ( const volatile
   reference_wrapper < typename _Remove_reference < _Arg0 > :: _Type > *,
    _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1, _Farg2 _Fx2 )
  {
  typedef typename _Remove_reference < _Arg0 > :: _Type _Arg0_noref;
  typedef typename _Remove_reference < _Farg0 > :: _Type _Farg0_noref;
  typedef typename _Copy_cv < _Arg0_noref, _Farg0_noref > :: _Type
   _Funobj_cv;
  return ( ( ( _Funobj_cv ) _Fx0 .* _Pm ) ( _Fx1, _Fx2 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2 >
  static _Ret _Call_pmf (
   const volatile typename _Remove_reference < _Arg0 > :: _Type *,
    _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1, _Farg2 _Fx2 )
  {
  typedef typename _Remove_reference < _Arg0 > :: _Type _Arg0_noref;
  typedef typename _Remove_reference < _Farg0 > :: _Type _Farg0_noref;
  typedef typename _Copy_cv < _Arg0_noref, _Farg0_noref > :: _Type
   _Funobj_cv;
  return ( ( ( _Funobj_cv ) _Fx0 .* _Pm ) ( _Fx1, _Fx2 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2 >
  static _Ret _Call_pmf (
   const volatile typename _Remove_reference < _Arg0 > :: _Type &,
    _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1, _Farg2 _Fx2 )
  {
  return ( ( _Fx0 .* _Pm ) ( _Fx1, _Fx2 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2 >
  static _Ret _Call_pmf ( const volatile void *, _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1, _Farg2 _Fx2 )
  {
  return ( ( ( * _Fx0 ) .* _Pm ) ( _Fx1, _Fx2 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2 >
  static _Ret _Apply_pmf ( _Pmf _Pm, _Farg0 & _Fx0, _Farg1 & _Fx1, _Farg2 & _Fx2 )
  {
  return ( _Call_pmf < _Pmf, _Farg0 &, _Farg1 &, _Farg2 & > ( & _Fx0, _Pm,
   _Fx0, _Fx1, _Fx2 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2 >
  static _Ret _Apply_pmf ( _Pmf _Pm, _Farg0 * _Fx0, _Farg1 & _Fx1, _Farg2 & _Fx2 )
  {
  return ( _Call_pmf < _Pmf, _Farg0 &, _Farg1 &, _Farg2 & > ( _Fx0, _Pm,
   * _Fx0, _Fx1, _Fx2 ) );
  }
}; 
#line 7 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxpmfcaller"
template<class _Ty> class reference_wrapper; 


template<class _Ret, class 
_Arg0> 
struct _Pmf_caller4 { 

typedef _Arg0 _Funobj; 


template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3 >
  static _Ret _Call_pmf ( const volatile
   reference_wrapper < typename _Remove_reference < _Arg0 > :: _Type > *,
    _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1, _Farg2 _Fx2, _Farg3 _Fx3 )
  {
  typedef typename _Remove_reference < _Arg0 > :: _Type _Arg0_noref;
  typedef typename _Remove_reference < _Farg0 > :: _Type _Farg0_noref;
  typedef typename _Copy_cv < _Arg0_noref, _Farg0_noref > :: _Type
   _Funobj_cv;
  return ( ( ( _Funobj_cv ) _Fx0 .* _Pm ) ( _Fx1, _Fx2, _Fx3 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3 >
  static _Ret _Call_pmf (
   const volatile typename _Remove_reference < _Arg0 > :: _Type *,
    _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1, _Farg2 _Fx2, _Farg3 _Fx3 )
  {
  typedef typename _Remove_reference < _Arg0 > :: _Type _Arg0_noref;
  typedef typename _Remove_reference < _Farg0 > :: _Type _Farg0_noref;
  typedef typename _Copy_cv < _Arg0_noref, _Farg0_noref > :: _Type
   _Funobj_cv;
  return ( ( ( _Funobj_cv ) _Fx0 .* _Pm ) ( _Fx1, _Fx2, _Fx3 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3 >
  static _Ret _Call_pmf (
   const volatile typename _Remove_reference < _Arg0 > :: _Type &,
    _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1, _Farg2 _Fx2, _Farg3 _Fx3 )
  {
  return ( ( _Fx0 .* _Pm ) ( _Fx1, _Fx2, _Fx3 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3 >
  static _Ret _Call_pmf ( const volatile void *, _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1, _Farg2 _Fx2, _Farg3 _Fx3 )
  {
  return ( ( ( * _Fx0 ) .* _Pm ) ( _Fx1, _Fx2, _Fx3 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3 >
  static _Ret _Apply_pmf ( _Pmf _Pm, _Farg0 & _Fx0, _Farg1 & _Fx1, _Farg2 & _Fx2, _Farg3 & _Fx3 )
  {
  return ( _Call_pmf < _Pmf, _Farg0 &, _Farg1 &, _Farg2 &, _Farg3 & > ( & _Fx0, _Pm,
   _Fx0, _Fx1, _Fx2, _Fx3 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3 >
  static _Ret _Apply_pmf ( _Pmf _Pm, _Farg0 * _Fx0, _Farg1 & _Fx1, _Farg2 & _Fx2, _Farg3 & _Fx3 )
  {
  return ( _Call_pmf < _Pmf, _Farg0 &, _Farg1 &, _Farg2 &, _Farg3 & > ( _Fx0, _Pm,
   * _Fx0, _Fx1, _Fx2, _Fx3 ) );
  }
}; 
#line 7 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxpmfcaller"
template<class _Ty> class reference_wrapper; 


template<class _Ret, class 
_Arg0> 
struct _Pmf_caller5 { 

typedef _Arg0 _Funobj; 


template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4 >
  static _Ret _Call_pmf ( const volatile
   reference_wrapper < typename _Remove_reference < _Arg0 > :: _Type > *,
    _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1, _Farg2 _Fx2, _Farg3 _Fx3, _Farg4 _Fx4 )
  {
  typedef typename _Remove_reference < _Arg0 > :: _Type _Arg0_noref;
  typedef typename _Remove_reference < _Farg0 > :: _Type _Farg0_noref;
  typedef typename _Copy_cv < _Arg0_noref, _Farg0_noref > :: _Type
   _Funobj_cv;
  return ( ( ( _Funobj_cv ) _Fx0 .* _Pm ) ( _Fx1, _Fx2, _Fx3, _Fx4 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4 >
  static _Ret _Call_pmf (
   const volatile typename _Remove_reference < _Arg0 > :: _Type *,
    _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1, _Farg2 _Fx2, _Farg3 _Fx3, _Farg4 _Fx4 )
  {
  typedef typename _Remove_reference < _Arg0 > :: _Type _Arg0_noref;
  typedef typename _Remove_reference < _Farg0 > :: _Type _Farg0_noref;
  typedef typename _Copy_cv < _Arg0_noref, _Farg0_noref > :: _Type
   _Funobj_cv;
  return ( ( ( _Funobj_cv ) _Fx0 .* _Pm ) ( _Fx1, _Fx2, _Fx3, _Fx4 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4 >
  static _Ret _Call_pmf (
   const volatile typename _Remove_reference < _Arg0 > :: _Type &,
    _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1, _Farg2 _Fx2, _Farg3 _Fx3, _Farg4 _Fx4 )
  {
  return ( ( _Fx0 .* _Pm ) ( _Fx1, _Fx2, _Fx3, _Fx4 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4 >
  static _Ret _Call_pmf ( const volatile void *, _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1, _Farg2 _Fx2, _Farg3 _Fx3, _Farg4 _Fx4 )
  {
  return ( ( ( * _Fx0 ) .* _Pm ) ( _Fx1, _Fx2, _Fx3, _Fx4 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4 >
  static _Ret _Apply_pmf ( _Pmf _Pm, _Farg0 & _Fx0, _Farg1 & _Fx1, _Farg2 & _Fx2, _Farg3 & _Fx3, _Farg4 & _Fx4 )
  {
  return ( _Call_pmf < _Pmf, _Farg0 &, _Farg1 &, _Farg2 &, _Farg3 &, _Farg4 & > ( & _Fx0, _Pm,
   _Fx0, _Fx1, _Fx2, _Fx3, _Fx4 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4 >
  static _Ret _Apply_pmf ( _Pmf _Pm, _Farg0 * _Fx0, _Farg1 & _Fx1, _Farg2 & _Fx2, _Farg3 & _Fx3, _Farg4 & _Fx4 )
  {
  return ( _Call_pmf < _Pmf, _Farg0 &, _Farg1 &, _Farg2 &, _Farg3 &, _Farg4 & > ( _Fx0, _Pm,
   * _Fx0, _Fx1, _Fx2, _Fx3, _Fx4 ) );
  }
}; 
#line 7 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxpmfcaller"
template<class _Ty> class reference_wrapper; 


template<class _Ret, class 
_Arg0> 
struct _Pmf_caller6 { 

typedef _Arg0 _Funobj; 


template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 >
  static _Ret _Call_pmf ( const volatile
   reference_wrapper < typename _Remove_reference < _Arg0 > :: _Type > *,
    _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1, _Farg2 _Fx2, _Farg3 _Fx3, _Farg4 _Fx4, _Farg5 _Fx5 )
  {
  typedef typename _Remove_reference < _Arg0 > :: _Type _Arg0_noref;
  typedef typename _Remove_reference < _Farg0 > :: _Type _Farg0_noref;
  typedef typename _Copy_cv < _Arg0_noref, _Farg0_noref > :: _Type
   _Funobj_cv;
  return ( ( ( _Funobj_cv ) _Fx0 .* _Pm ) ( _Fx1, _Fx2, _Fx3, _Fx4, _Fx5 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 >
  static _Ret _Call_pmf (
   const volatile typename _Remove_reference < _Arg0 > :: _Type *,
    _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1, _Farg2 _Fx2, _Farg3 _Fx3, _Farg4 _Fx4, _Farg5 _Fx5 )
  {
  typedef typename _Remove_reference < _Arg0 > :: _Type _Arg0_noref;
  typedef typename _Remove_reference < _Farg0 > :: _Type _Farg0_noref;
  typedef typename _Copy_cv < _Arg0_noref, _Farg0_noref > :: _Type
   _Funobj_cv;
  return ( ( ( _Funobj_cv ) _Fx0 .* _Pm ) ( _Fx1, _Fx2, _Fx3, _Fx4, _Fx5 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 >
  static _Ret _Call_pmf (
   const volatile typename _Remove_reference < _Arg0 > :: _Type &,
    _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1, _Farg2 _Fx2, _Farg3 _Fx3, _Farg4 _Fx4, _Farg5 _Fx5 )
  {
  return ( ( _Fx0 .* _Pm ) ( _Fx1, _Fx2, _Fx3, _Fx4, _Fx5 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 >
  static _Ret _Call_pmf ( const volatile void *, _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1, _Farg2 _Fx2, _Farg3 _Fx3, _Farg4 _Fx4, _Farg5 _Fx5 )
  {
  return ( ( ( * _Fx0 ) .* _Pm ) ( _Fx1, _Fx2, _Fx3, _Fx4, _Fx5 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 >
  static _Ret _Apply_pmf ( _Pmf _Pm, _Farg0 & _Fx0, _Farg1 & _Fx1, _Farg2 & _Fx2, _Farg3 & _Fx3, _Farg4 & _Fx4, _Farg5 & _Fx5 )
  {
  return ( _Call_pmf < _Pmf, _Farg0 &, _Farg1 &, _Farg2 &, _Farg3 &, _Farg4 &, _Farg5 & > ( & _Fx0, _Pm,
   _Fx0, _Fx1, _Fx2, _Fx3, _Fx4, _Fx5 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 >
  static _Ret _Apply_pmf ( _Pmf _Pm, _Farg0 * _Fx0, _Farg1 & _Fx1, _Farg2 & _Fx2, _Farg3 & _Fx3, _Farg4 & _Fx4, _Farg5 & _Fx5 )
  {
  return ( _Call_pmf < _Pmf, _Farg0 &, _Farg1 &, _Farg2 &, _Farg3 &, _Farg4 &, _Farg5 & > ( _Fx0, _Pm,
   * _Fx0, _Fx1, _Fx2, _Fx3, _Fx4, _Fx5 ) );
  }
}; 
#line 7 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxpmfcaller"
template<class _Ty> class reference_wrapper; 


template<class _Ret, class 
_Arg0> 
struct _Pmf_caller7 { 

typedef _Arg0 _Funobj; 


template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 >
  static _Ret _Call_pmf ( const volatile
   reference_wrapper < typename _Remove_reference < _Arg0 > :: _Type > *,
    _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1, _Farg2 _Fx2, _Farg3 _Fx3, _Farg4 _Fx4, _Farg5 _Fx5, _Farg6 _Fx6 )
  {
  typedef typename _Remove_reference < _Arg0 > :: _Type _Arg0_noref;
  typedef typename _Remove_reference < _Farg0 > :: _Type _Farg0_noref;
  typedef typename _Copy_cv < _Arg0_noref, _Farg0_noref > :: _Type
   _Funobj_cv;
  return ( ( ( _Funobj_cv ) _Fx0 .* _Pm ) ( _Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 >
  static _Ret _Call_pmf (
   const volatile typename _Remove_reference < _Arg0 > :: _Type *,
    _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1, _Farg2 _Fx2, _Farg3 _Fx3, _Farg4 _Fx4, _Farg5 _Fx5, _Farg6 _Fx6 )
  {
  typedef typename _Remove_reference < _Arg0 > :: _Type _Arg0_noref;
  typedef typename _Remove_reference < _Farg0 > :: _Type _Farg0_noref;
  typedef typename _Copy_cv < _Arg0_noref, _Farg0_noref > :: _Type
   _Funobj_cv;
  return ( ( ( _Funobj_cv ) _Fx0 .* _Pm ) ( _Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 >
  static _Ret _Call_pmf (
   const volatile typename _Remove_reference < _Arg0 > :: _Type &,
    _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1, _Farg2 _Fx2, _Farg3 _Fx3, _Farg4 _Fx4, _Farg5 _Fx5, _Farg6 _Fx6 )
  {
  return ( ( _Fx0 .* _Pm ) ( _Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 >
  static _Ret _Call_pmf ( const volatile void *, _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1, _Farg2 _Fx2, _Farg3 _Fx3, _Farg4 _Fx4, _Farg5 _Fx5, _Farg6 _Fx6 )
  {
  return ( ( ( * _Fx0 ) .* _Pm ) ( _Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 >
  static _Ret _Apply_pmf ( _Pmf _Pm, _Farg0 & _Fx0, _Farg1 & _Fx1, _Farg2 & _Fx2, _Farg3 & _Fx3, _Farg4 & _Fx4, _Farg5 & _Fx5, _Farg6 & _Fx6 )
  {
  return ( _Call_pmf < _Pmf, _Farg0 &, _Farg1 &, _Farg2 &, _Farg3 &, _Farg4 &, _Farg5 &, _Farg6 & > ( & _Fx0, _Pm,
   _Fx0, _Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 >
  static _Ret _Apply_pmf ( _Pmf _Pm, _Farg0 * _Fx0, _Farg1 & _Fx1, _Farg2 & _Fx2, _Farg3 & _Fx3, _Farg4 & _Fx4, _Farg5 & _Fx5, _Farg6 & _Fx6 )
  {
  return ( _Call_pmf < _Pmf, _Farg0 &, _Farg1 &, _Farg2 &, _Farg3 &, _Farg4 &, _Farg5 &, _Farg6 & > ( _Fx0, _Pm,
   * _Fx0, _Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6 ) );
  }
}; 
#line 7 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxpmfcaller"
template<class _Ty> class reference_wrapper; 


template<class _Ret, class 
_Arg0> 
struct _Pmf_caller8 { 

typedef _Arg0 _Funobj; 


template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 >
  static _Ret _Call_pmf ( const volatile
   reference_wrapper < typename _Remove_reference < _Arg0 > :: _Type > *,
    _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1, _Farg2 _Fx2, _Farg3 _Fx3, _Farg4 _Fx4, _Farg5 _Fx5, _Farg6 _Fx6, _Farg7 _Fx7 )
  {
  typedef typename _Remove_reference < _Arg0 > :: _Type _Arg0_noref;
  typedef typename _Remove_reference < _Farg0 > :: _Type _Farg0_noref;
  typedef typename _Copy_cv < _Arg0_noref, _Farg0_noref > :: _Type
   _Funobj_cv;
  return ( ( ( _Funobj_cv ) _Fx0 .* _Pm ) ( _Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6, _Fx7 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 >
  static _Ret _Call_pmf (
   const volatile typename _Remove_reference < _Arg0 > :: _Type *,
    _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1, _Farg2 _Fx2, _Farg3 _Fx3, _Farg4 _Fx4, _Farg5 _Fx5, _Farg6 _Fx6, _Farg7 _Fx7 )
  {
  typedef typename _Remove_reference < _Arg0 > :: _Type _Arg0_noref;
  typedef typename _Remove_reference < _Farg0 > :: _Type _Farg0_noref;
  typedef typename _Copy_cv < _Arg0_noref, _Farg0_noref > :: _Type
   _Funobj_cv;
  return ( ( ( _Funobj_cv ) _Fx0 .* _Pm ) ( _Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6, _Fx7 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 >
  static _Ret _Call_pmf (
   const volatile typename _Remove_reference < _Arg0 > :: _Type &,
    _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1, _Farg2 _Fx2, _Farg3 _Fx3, _Farg4 _Fx4, _Farg5 _Fx5, _Farg6 _Fx6, _Farg7 _Fx7 )
  {
  return ( ( _Fx0 .* _Pm ) ( _Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6, _Fx7 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 >
  static _Ret _Call_pmf ( const volatile void *, _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1, _Farg2 _Fx2, _Farg3 _Fx3, _Farg4 _Fx4, _Farg5 _Fx5, _Farg6 _Fx6, _Farg7 _Fx7 )
  {
  return ( ( ( * _Fx0 ) .* _Pm ) ( _Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6, _Fx7 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 >
  static _Ret _Apply_pmf ( _Pmf _Pm, _Farg0 & _Fx0, _Farg1 & _Fx1, _Farg2 & _Fx2, _Farg3 & _Fx3, _Farg4 & _Fx4, _Farg5 & _Fx5, _Farg6 & _Fx6, _Farg7 & _Fx7 )
  {
  return ( _Call_pmf < _Pmf, _Farg0 &, _Farg1 &, _Farg2 &, _Farg3 &, _Farg4 &, _Farg5 &, _Farg6 &, _Farg7 & > ( & _Fx0, _Pm,
   _Fx0, _Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6, _Fx7 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 >
  static _Ret _Apply_pmf ( _Pmf _Pm, _Farg0 * _Fx0, _Farg1 & _Fx1, _Farg2 & _Fx2, _Farg3 & _Fx3, _Farg4 & _Fx4, _Farg5 & _Fx5, _Farg6 & _Fx6, _Farg7 & _Fx7 )
  {
  return ( _Call_pmf < _Pmf, _Farg0 &, _Farg1 &, _Farg2 &, _Farg3 &, _Farg4 &, _Farg5 &, _Farg6 &, _Farg7 & > ( _Fx0, _Pm,
   * _Fx0, _Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6, _Fx7 ) );
  }
}; 
#line 7 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxpmfcaller"
template<class _Ty> class reference_wrapper; 


template<class _Ret, class 
_Arg0> 
struct _Pmf_caller9 { 

typedef _Arg0 _Funobj; 


template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 >
  static _Ret _Call_pmf ( const volatile
   reference_wrapper < typename _Remove_reference < _Arg0 > :: _Type > *,
    _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1, _Farg2 _Fx2, _Farg3 _Fx3, _Farg4 _Fx4, _Farg5 _Fx5, _Farg6 _Fx6, _Farg7 _Fx7, _Farg8 _Fx8 )
  {
  typedef typename _Remove_reference < _Arg0 > :: _Type _Arg0_noref;
  typedef typename _Remove_reference < _Farg0 > :: _Type _Farg0_noref;
  typedef typename _Copy_cv < _Arg0_noref, _Farg0_noref > :: _Type
   _Funobj_cv;
  return ( ( ( _Funobj_cv ) _Fx0 .* _Pm ) ( _Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6, _Fx7, _Fx8 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 >
  static _Ret _Call_pmf (
   const volatile typename _Remove_reference < _Arg0 > :: _Type *,
    _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1, _Farg2 _Fx2, _Farg3 _Fx3, _Farg4 _Fx4, _Farg5 _Fx5, _Farg6 _Fx6, _Farg7 _Fx7, _Farg8 _Fx8 )
  {
  typedef typename _Remove_reference < _Arg0 > :: _Type _Arg0_noref;
  typedef typename _Remove_reference < _Farg0 > :: _Type _Farg0_noref;
  typedef typename _Copy_cv < _Arg0_noref, _Farg0_noref > :: _Type
   _Funobj_cv;
  return ( ( ( _Funobj_cv ) _Fx0 .* _Pm ) ( _Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6, _Fx7, _Fx8 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 >
  static _Ret _Call_pmf (
   const volatile typename _Remove_reference < _Arg0 > :: _Type &,
    _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1, _Farg2 _Fx2, _Farg3 _Fx3, _Farg4 _Fx4, _Farg5 _Fx5, _Farg6 _Fx6, _Farg7 _Fx7, _Farg8 _Fx8 )
  {
  return ( ( _Fx0 .* _Pm ) ( _Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6, _Fx7, _Fx8 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 >
  static _Ret _Call_pmf ( const volatile void *, _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1, _Farg2 _Fx2, _Farg3 _Fx3, _Farg4 _Fx4, _Farg5 _Fx5, _Farg6 _Fx6, _Farg7 _Fx7, _Farg8 _Fx8 )
  {
  return ( ( ( * _Fx0 ) .* _Pm ) ( _Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6, _Fx7, _Fx8 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 >
  static _Ret _Apply_pmf ( _Pmf _Pm, _Farg0 & _Fx0, _Farg1 & _Fx1, _Farg2 & _Fx2, _Farg3 & _Fx3, _Farg4 & _Fx4, _Farg5 & _Fx5, _Farg6 & _Fx6, _Farg7 & _Fx7, _Farg8 & _Fx8 )
  {
  return ( _Call_pmf < _Pmf, _Farg0 &, _Farg1 &, _Farg2 &, _Farg3 &, _Farg4 &, _Farg5 &, _Farg6 &, _Farg7 &, _Farg8 & > ( & _Fx0, _Pm,
   _Fx0, _Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6, _Fx7, _Fx8 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 >
  static _Ret _Apply_pmf ( _Pmf _Pm, _Farg0 * _Fx0, _Farg1 & _Fx1, _Farg2 & _Fx2, _Farg3 & _Fx3, _Farg4 & _Fx4, _Farg5 & _Fx5, _Farg6 & _Fx6, _Farg7 & _Fx7, _Farg8 & _Fx8 )
  {
  return ( _Call_pmf < _Pmf, _Farg0 &, _Farg1 &, _Farg2 &, _Farg3 &, _Farg4 &, _Farg5 &, _Farg6 &, _Farg7 &, _Farg8 & > ( _Fx0, _Pm,
   * _Fx0, _Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6, _Fx7, _Fx8 ) );
  }
}; 
#line 7 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxpmfcaller"
template<class _Ty> class reference_wrapper; 


template<class _Ret, class 
_Arg0> 
struct _Pmf_caller10 { 

typedef _Arg0 _Funobj; 


template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9 >
  static _Ret _Call_pmf ( const volatile
   reference_wrapper < typename _Remove_reference < _Arg0 > :: _Type > *,
    _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1, _Farg2 _Fx2, _Farg3 _Fx3, _Farg4 _Fx4, _Farg5 _Fx5, _Farg6 _Fx6, _Farg7 _Fx7, _Farg8 _Fx8, _Farg9 _Fx9 )
  {
  typedef typename _Remove_reference < _Arg0 > :: _Type _Arg0_noref;
  typedef typename _Remove_reference < _Farg0 > :: _Type _Farg0_noref;
  typedef typename _Copy_cv < _Arg0_noref, _Farg0_noref > :: _Type
   _Funobj_cv;
  return ( ( ( _Funobj_cv ) _Fx0 .* _Pm ) ( _Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6, _Fx7, _Fx8, _Fx9 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9 >
  static _Ret _Call_pmf (
   const volatile typename _Remove_reference < _Arg0 > :: _Type *,
    _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1, _Farg2 _Fx2, _Farg3 _Fx3, _Farg4 _Fx4, _Farg5 _Fx5, _Farg6 _Fx6, _Farg7 _Fx7, _Farg8 _Fx8, _Farg9 _Fx9 )
  {
  typedef typename _Remove_reference < _Arg0 > :: _Type _Arg0_noref;
  typedef typename _Remove_reference < _Farg0 > :: _Type _Farg0_noref;
  typedef typename _Copy_cv < _Arg0_noref, _Farg0_noref > :: _Type
   _Funobj_cv;
  return ( ( ( _Funobj_cv ) _Fx0 .* _Pm ) ( _Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6, _Fx7, _Fx8, _Fx9 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9 >
  static _Ret _Call_pmf (
   const volatile typename _Remove_reference < _Arg0 > :: _Type &,
    _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1, _Farg2 _Fx2, _Farg3 _Fx3, _Farg4 _Fx4, _Farg5 _Fx5, _Farg6 _Fx6, _Farg7 _Fx7, _Farg8 _Fx8, _Farg9 _Fx9 )
  {
  return ( ( _Fx0 .* _Pm ) ( _Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6, _Fx7, _Fx8, _Fx9 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9 >
  static _Ret _Call_pmf ( const volatile void *, _Pmf _Pm, _Farg0 _Fx0, _Farg1 _Fx1, _Farg2 _Fx2, _Farg3 _Fx3, _Farg4 _Fx4, _Farg5 _Fx5, _Farg6 _Fx6, _Farg7 _Fx7, _Farg8 _Fx8, _Farg9 _Fx9 )
  {
  return ( ( ( * _Fx0 ) .* _Pm ) ( _Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6, _Fx7, _Fx8, _Fx9 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9 >
  static _Ret _Apply_pmf ( _Pmf _Pm, _Farg0 & _Fx0, _Farg1 & _Fx1, _Farg2 & _Fx2, _Farg3 & _Fx3, _Farg4 & _Fx4, _Farg5 & _Fx5, _Farg6 & _Fx6, _Farg7 & _Fx7, _Farg8 & _Fx8, _Farg9 & _Fx9 )
  {
  return ( _Call_pmf < _Pmf, _Farg0 &, _Farg1 &, _Farg2 &, _Farg3 &, _Farg4 &, _Farg5 &, _Farg6 &, _Farg7 &, _Farg8 &, _Farg9 & > ( & _Fx0, _Pm,
   _Fx0, _Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6, _Fx7, _Fx8, _Fx9 ) );
  }

template < class _Pmf,
  class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9 >
  static _Ret _Apply_pmf ( _Pmf _Pm, _Farg0 * _Fx0, _Farg1 & _Fx1, _Farg2 & _Fx2, _Farg3 & _Fx3, _Farg4 & _Fx4, _Farg5 & _Fx5, _Farg6 & _Fx6, _Farg7 & _Fx7, _Farg8 & _Fx8, _Farg9 & _Fx9 )
  {
  return ( _Call_pmf < _Pmf, _Farg0 &, _Farg1 &, _Farg2 &, _Farg3 &, _Farg4 &, _Farg5 &, _Farg6 &, _Farg7 &, _Farg8 &, _Farg9 & > ( _Fx0, _Pm,
   * _Fx0, _Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6, _Fx7, _Fx8, _Fx9 ) );
  }
}; 
#line 94 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xrefwrap"
template<class _Ty, bool 
_Indirect> struct _Callable_base; 


template < class _Ty >
 struct _Callable_base < _Ty, false >
 {
 enum { _EEN_INDIRECT = 0 };

 typedef _Ty _MyTy;
 typedef const _Ty & _MyCnstTy;

 _Callable_base ( _Ty & _Val )
  : _Object ( _Val )
  {
  }

 const _Ty & _Get ( ) const
  {
  return ( _Object );
  }

 _Ty & _Get ( )
  {
  return ( _Object );
  }

private :
 _Ty _Object;
};

template < class _Ty >
 struct _Callable_base < _Ty, true >
 {

 enum { _EEN_INDIRECT = 1 };

 typedef _Ty _MyTy;
 typedef _Ty & _MyCnstTy;

 _Callable_base ( _Ty & _Val )
  : _Ptr ( & _Val )
  {
  }

 _MyCnstTy _Get ( ) const
  {
  return ( * _Ptr );
  }

 _Ty & _Get ( )
  {
  return ( * _Ptr );
  }

 void _Reset ( _Ty & _Val )
  {
  _Ptr = & _Val;
  }

private :
 _Ty * _Ptr;
};


template < class _Ty,
 class _Memty,
 bool _Indirect = false >
 struct _Callable_pmd
  : _Callable_base < _Ty, _Indirect >
 {
 _Callable_pmd ( _Ty & _Val )
  : _Callable_base < _Ty, _Indirect > ( _Val )
  {
  }

 template < class _Ret,
  class _Arg0 >
  _Ret _ApplyX ( _Arg0 & _A0 ) const
  {
  return ( _Pmd_caller < _Ret, _Memty > :: _Apply_pmd ( this -> _Get ( ), _A0 ) );
  }
 };


template < class _Ty,
 bool _Indirect = false >
 struct _Callable_obj
  : _Callable_base < _Ty, _Indirect >
 {
 _Callable_obj ( _Ty & _Val )
  : _Callable_base < _Ty, _Indirect > ( _Val )
  {
  }




















































































































































































































































template < class _Ret >
 _Ret _ApplyX ( ) const
 {
 return ( this -> _Get ( ) ( ) );
 }

template < class _Ret >
 _Ret _ApplyX ( )
 {
 return ( this -> _Get ( ) ( ) );
 }




































































































































































































































































































































template < class _Ret, class _Arg0 >
 _Ret _ApplyX ( _Arg0 & _Ax0 ) const
 {
 return ( this -> _Get ( ) ( _Ax0 ) );
 }

template < class _Ret, class _Arg0 >
 _Ret _ApplyX ( _Arg0 & _Ax0 )
 {
 return ( this -> _Get ( ) ( _Ax0 ) );
 }


template < class _Ret, class _Arg0 >
 _Ret _ApplyX ( const _Arg0 & _Ax0 ) const
 {
 return ( this -> _Get ( ) ( _Ax0 ) );
 }

template < class _Ret, class _Arg0 >
 _Ret _ApplyX ( const _Arg0 & _Ax0 )
 {
 return ( this -> _Get ( ) ( _Ax0 ) );
 }






















































































































































































































































































































template < class _Ret, class _Arg0, class _Arg1 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1 ) );
 }

template < class _Ret, class _Arg0, class _Arg1 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1 )
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1 ) );
 }


template < class _Ret, class _Arg0, class _Arg1 >
 _Ret _ApplyX ( const _Arg0 & _Ax0, _Arg1 & _Ax1 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1 ) );
 }

template < class _Ret, class _Arg0, class _Arg1 >
 _Ret _ApplyX ( const _Arg0 & _Ax0, _Arg1 & _Ax1 )
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1 ) );
 }






















































































































































































































































































































template < class _Ret, class _Arg0, class _Arg1, class _Arg2 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2 ) );
 }

template < class _Ret, class _Arg0, class _Arg1, class _Arg2 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2 )
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2 ) );
 }


template < class _Ret, class _Arg0, class _Arg1, class _Arg2 >
 _Ret _ApplyX ( const _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2 ) );
 }

template < class _Ret, class _Arg0, class _Arg1, class _Arg2 >
 _Ret _ApplyX ( const _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2 )
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2 ) );
 }






















































































































































































































































































































template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3 ) );
 }

template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3 )
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3 ) );
 }


template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 _Ret _ApplyX ( const _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3 ) );
 }

template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 _Ret _ApplyX ( const _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3 )
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3 ) );
 }






















































































































































































































































































































template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4 ) );
 }

template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4 )
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4 ) );
 }


template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 _Ret _ApplyX ( const _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4 ) );
 }

template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 _Ret _ApplyX ( const _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4 )
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4 ) );
 }






















































































































































































































































































































template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4, _Arg5 & _Ax5 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 ) );
 }

template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4, _Arg5 & _Ax5 )
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 ) );
 }


template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 _Ret _ApplyX ( const _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4, _Arg5 & _Ax5 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 ) );
 }

template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 _Ret _ApplyX ( const _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4, _Arg5 & _Ax5 )
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 ) );
 }






















































































































































































































































































































template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4, _Arg5 & _Ax5, _Arg6 & _Ax6 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 ) );
 }

template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4, _Arg5 & _Ax5, _Arg6 & _Ax6 )
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 ) );
 }


template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 _Ret _ApplyX ( const _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4, _Arg5 & _Ax5, _Arg6 & _Ax6 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 ) );
 }

template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 _Ret _ApplyX ( const _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4, _Arg5 & _Ax5, _Arg6 & _Ax6 )
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 ) );
 }






















































































































































































































































































































template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4, _Arg5 & _Ax5, _Arg6 & _Ax6, _Arg7 & _Ax7 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 ) );
 }

template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4, _Arg5 & _Ax5, _Arg6 & _Ax6, _Arg7 & _Ax7 )
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 ) );
 }


template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 _Ret _ApplyX ( const _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4, _Arg5 & _Ax5, _Arg6 & _Ax6, _Arg7 & _Ax7 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 ) );
 }

template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 _Ret _ApplyX ( const _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4, _Arg5 & _Ax5, _Arg6 & _Ax6, _Arg7 & _Ax7 )
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 ) );
 }






















































































































































































































































































































template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4, _Arg5 & _Ax5, _Arg6 & _Ax6, _Arg7 & _Ax7, _Arg8 & _Ax8 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 ) );
 }

template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4, _Arg5 & _Ax5, _Arg6 & _Ax6, _Arg7 & _Ax7, _Arg8 & _Ax8 )
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 ) );
 }


template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 _Ret _ApplyX ( const _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4, _Arg5 & _Ax5, _Arg6 & _Ax6, _Arg7 & _Ax7, _Arg8 & _Ax8 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 ) );
 }

template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 _Ret _ApplyX ( const _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4, _Arg5 & _Ax5, _Arg6 & _Ax6, _Arg7 & _Ax7, _Arg8 & _Ax8 )
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 ) );
 }






















































































































































































































































































































template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4, _Arg5 & _Ax5, _Arg6 & _Ax6, _Arg7 & _Ax7, _Arg8 & _Ax8, _Arg9 & _Ax9 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8, _Ax9 ) );
 }

template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4, _Arg5 & _Ax5, _Arg6 & _Ax6, _Arg7 & _Ax7, _Arg8 & _Ax8, _Arg9 & _Ax9 )
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8, _Ax9 ) );
 }


template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 _Ret _ApplyX ( const _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4, _Arg5 & _Ax5, _Arg6 & _Ax6, _Arg7 & _Ax7, _Arg8 & _Ax8, _Arg9 & _Ax9 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8, _Ax9 ) );
 }

template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 _Ret _ApplyX ( const _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4, _Arg5 & _Ax5, _Arg6 & _Ax6, _Arg7 & _Ax7, _Arg8 & _Ax8, _Arg9 & _Ax9 )
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8, _Ax9 ) );
 }


























































































 };
#line 195 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xrefwrap"
template < class _Ty,
 class _Memty,
 bool _Indirect = false >
 struct _Callable_pmf
  : _Callable_base < _Ty, _Indirect >
 {
 _Callable_pmf ( _Ty & _Val )
  : _Callable_base < _Ty, _Indirect > ( _Val )
  {
  }



















































































































































































































































































































































































































































































































































































template < class _Ret, class _Arg0 >
 _Ret _ApplyX ( _Arg0 & _Ax0 ) const
 {
 return ( _Pmf_caller1 < _Ret, _Memty > ::
  _Apply_pmf ( this -> _Get ( ), _Ax0 ) );
 }























































































































































































































































































































template < class _Ret, class _Arg0, class _Arg1 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1 ) const
 {
 return ( _Pmf_caller2 < _Ret, _Memty > ::
  _Apply_pmf ( this -> _Get ( ), _Ax0, _Ax1 ) );
 }























































































































































































































































































































template < class _Ret, class _Arg0, class _Arg1, class _Arg2 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2 ) const
 {
 return ( _Pmf_caller3 < _Ret, _Memty > ::
  _Apply_pmf ( this -> _Get ( ), _Ax0, _Ax1, _Ax2 ) );
 }























































































































































































































































































































template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3 ) const
 {
 return ( _Pmf_caller4 < _Ret, _Memty > ::
  _Apply_pmf ( this -> _Get ( ), _Ax0, _Ax1, _Ax2, _Ax3 ) );
 }























































































































































































































































































































template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4 ) const
 {
 return ( _Pmf_caller5 < _Ret, _Memty > ::
  _Apply_pmf ( this -> _Get ( ), _Ax0, _Ax1, _Ax2, _Ax3, _Ax4 ) );
 }























































































































































































































































































































template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4, _Arg5 & _Ax5 ) const
 {
 return ( _Pmf_caller6 < _Ret, _Memty > ::
  _Apply_pmf ( this -> _Get ( ), _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 ) );
 }























































































































































































































































































































template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4, _Arg5 & _Ax5, _Arg6 & _Ax6 ) const
 {
 return ( _Pmf_caller7 < _Ret, _Memty > ::
  _Apply_pmf ( this -> _Get ( ), _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 ) );
 }























































































































































































































































































































template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4, _Arg5 & _Ax5, _Arg6 & _Ax6, _Arg7 & _Ax7 ) const
 {
 return ( _Pmf_caller8 < _Ret, _Memty > ::
  _Apply_pmf ( this -> _Get ( ), _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 ) );
 }























































































































































































































































































































template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4, _Arg5 & _Ax5, _Arg6 & _Ax6, _Arg7 & _Ax7, _Arg8 & _Ax8 ) const
 {
 return ( _Pmf_caller9 < _Ret, _Memty > ::
  _Apply_pmf ( this -> _Get ( ), _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 ) );
 }























































































































































































































































































































template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4, _Arg5 & _Ax5, _Arg6 & _Ax6, _Arg7 & _Ax7, _Arg8 & _Ax8, _Arg9 & _Ax9 ) const
 {
 return ( _Pmf_caller10 < _Ret, _Memty > ::
  _Apply_pmf ( this -> _Get ( ), _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8, _Ax9 ) );
 }


























































































 };
#line 212 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xrefwrap"
template < class _Ty,
 bool _Indirect = false >
 struct _Callable_fun
  : _Callable_base < _Ty, _Indirect >
 {
 _Callable_fun ( _Ty & _Val )
  : _Callable_base < _Ty, _Indirect > ( _Val )
  {
  }




















































































































































































































































template < class _Ret >
 _Ret _ApplyX ( ) const
 {
 return ( this -> _Get ( ) ( ) );
 }






























































































































































































































































































































template < class _Ret, class _Arg0 >
 _Ret _ApplyX ( _Arg0 & _Ax0 ) const
 {
 return ( this -> _Get ( ) ( _Ax0 ) );
 }


template < class _Ret, class _Arg0 >
 _Ret _ApplyX ( const _Arg0 & _Ax0 ) const
 {
 return ( this -> _Get ( ) ( _Ax0 ) );
 }






















































































































































































































































































































template < class _Ret, class _Arg0, class _Arg1 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1 ) );
 }


template < class _Ret, class _Arg0, class _Arg1 >
 _Ret _ApplyX ( const _Arg0 & _Ax0, _Arg1 & _Ax1 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1 ) );
 }






















































































































































































































































































































template < class _Ret, class _Arg0, class _Arg1, class _Arg2 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2 ) );
 }


template < class _Ret, class _Arg0, class _Arg1, class _Arg2 >
 _Ret _ApplyX ( const _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2 ) );
 }






















































































































































































































































































































template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3 ) );
 }


template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 _Ret _ApplyX ( const _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3 ) );
 }






















































































































































































































































































































template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4 ) );
 }


template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 _Ret _ApplyX ( const _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4 ) );
 }






















































































































































































































































































































template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4, _Arg5 & _Ax5 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 ) );
 }


template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 _Ret _ApplyX ( const _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4, _Arg5 & _Ax5 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 ) );
 }






















































































































































































































































































































template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4, _Arg5 & _Ax5, _Arg6 & _Ax6 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 ) );
 }


template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 _Ret _ApplyX ( const _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4, _Arg5 & _Ax5, _Arg6 & _Ax6 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 ) );
 }






















































































































































































































































































































template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4, _Arg5 & _Ax5, _Arg6 & _Ax6, _Arg7 & _Ax7 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 ) );
 }


template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 _Ret _ApplyX ( const _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4, _Arg5 & _Ax5, _Arg6 & _Ax6, _Arg7 & _Ax7 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 ) );
 }






















































































































































































































































































































template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4, _Arg5 & _Ax5, _Arg6 & _Ax6, _Arg7 & _Ax7, _Arg8 & _Ax8 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 ) );
 }


template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 _Ret _ApplyX ( const _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4, _Arg5 & _Ax5, _Arg6 & _Ax6, _Arg7 & _Ax7, _Arg8 & _Ax8 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 ) );
 }






















































































































































































































































































































template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 _Ret _ApplyX ( _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4, _Arg5 & _Ax5, _Arg6 & _Ax6, _Arg7 & _Ax7, _Arg8 & _Ax8, _Arg9 & _Ax9 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8, _Ax9 ) );
 }


template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 _Ret _ApplyX ( const _Arg0 & _Ax0, _Arg1 & _Ax1, _Arg2 & _Ax2, _Arg3 & _Ax3, _Arg4 & _Ax4, _Arg5 & _Ax5, _Arg6 & _Ax6, _Arg7 & _Ax7, _Arg8 & _Ax8, _Arg9 & _Ax9 ) const
 {
 return ( this -> _Get ( ) ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8, _Ax9 ) );
 }


























































































 };
#line 228 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xrefwrap"
template < class _Callable >
 struct _Call_wrapper_base
 {
 typedef typename _Callable :: _MyTy _MyTy;
 typedef typename _Callable :: _MyCnstTy _MyCnstTy;

 _Call_wrapper_base ( _MyTy & _Val )
  : _Callee ( _Val )
  {
  }

 void _Reset ( _MyTy & _Val )
  {
  _Callee . _Reset ( _Val );
  }

 _MyCnstTy _Get ( ) const
  {
  return ( _Callee . _Get ( ) );
  }

 _MyCnstTy _Get ( )
  {
  return ( _Callee . _Get ( ) );
  }

 _Callable _Callee;
 };


template < class _Callable >
 struct _Call_wrapper
 : _Call_wrapper_base < _Callable >
 {
 typedef _Call_wrapper_base < _Callable > _Mybase;

 _Call_wrapper ( typename _Call_wrapper_base < _Callable > :: _MyTy & _Val )
  : _Call_wrapper_base < _Callable > ( _Val )
  {
  }
















































































































































































































 typename _Result_of < typename _Callable :: _MyTy ( ) > :: _Type
  operator ( ) ( ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( ) );
 }






































































































































































































































































































































































































template < class _Carg0 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0 ) );
 }


























































































































































































template < class _Carg0 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0 ) );
 }

































































































































































































































































































































































































template < class _Carg0, class _Carg1 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1 ) );
 }


























































































































































































template < class _Carg0, class _Carg1 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1 ) );
 }



























































































































































































template < class _Carg0, class _Carg1 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1 ) );
 }
























































































































































































template < class _Carg0, class _Carg1 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1 ) );
 }


























































































































































































































































































































































































template < class _Carg0, class _Carg1, class _Carg2 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2 ) );
 }


























































































































































































template < class _Carg0, class _Carg1, class _Carg2 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2 ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2 ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2 ) );
 }















































































































































































































































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3 ) );
 }


























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3 ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3 ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3 ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3 ) );
 }





























































































































































































































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4 ) );
 }


























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4 ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4 ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4 ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4 ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4 ) );
 }


























































































































































































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5 ) );
 }


























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5 ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5 ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5 ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5 ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5 ) );
 }


























































































































































































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6 ) );
 }


























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6 ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6 ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6 ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6 ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6 ) );
 }


























































































































































































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7 ) );
 }


























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7 ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7 ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7 ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7 ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7 ) );
 }



























































































































































































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8 ) );
 }


























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8 ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8 ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8 ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8 ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8 ) );
 }




























































































































































































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }


























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Result_of < typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Result_of < typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Result_of <
  typename _Callable :: _MyTy ( const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & ) > :: _Type _Ret;
 return ( _Mybase :: _Callee . template _ApplyX < _Ret > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }




































































































































 };
#line 275 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xrefwrap"
template<class _Ty> extern _No _Has_result_and_arg_type(const volatile void *); 


template<class _Ty> extern _Yes _Has_result_and_arg_type(_Ty *, typename _Ty::argument_type * = (0), typename _Ty::result_type * = (0)); 
#line 286
template<class _Ty> extern _No _Has_result_and_2arg_type(const volatile void *); 


template<class _Ty> extern _Yes _Has_result_and_2arg_type(_Ty *, typename _Ty::first_argument_type * = (0), typename _Ty::second_argument_type * = (0), typename _Ty::result_type * = (0)); 
#line 299
template<class _T1, class 
_Ret> extern _No 
#line 299
_Has_unary_base(const volatile void *); 



template<class _T1, class 
_Ret> extern _Yes 
#line 303
_Has_unary_base(const volatile unary_function< _T1, _Ret>  *); 
#line 312
template<class _T1, class 
_T2, class 
_Ret> extern _No 
#line 312
_Has_binary_base(const volatile void *); 




template<class _T1, class 
_T2, class 
_Ret> extern _Yes 
#line 317
_Has_binary_base(const volatile binary_function< _T1, _T2, _Ret>  *); 
#line 328
template<class _Ty, bool 
__T12> 
struct _Refwrap_result0 { 

typedef typename _Ty::result_type result_type; 
}; 

template<class _Ty> 
struct _Refwrap_result0< _Ty, false>  { 

}; 


template<class _Ty, bool 
__T13> 
struct _Refwrap_result1_helper : public _Refwrap_result0< _Ty, (sizeof((tr1::_Has_result_type((_Ty *)0))) == sizeof(char [2]))>  { 


}; 

template<class _Ty> 
struct _Refwrap_result1_helper< _Ty, true>  : public unary_function< typename _Ty::argument_type, typename _Ty::result_type>  { 



}; 


template<class _Ty, bool 
__T14> 
struct _Refwrap_result1 : public _Refwrap_result0< _Ty, (sizeof((tr1::_Has_result_type((_Ty *)0))) == sizeof(char [2]))>  { 


}; 

template<class _Ty> 
struct _Refwrap_result1< _Ty, true>  : public _Refwrap_result1_helper< _Ty, (sizeof((_Has_unary_base< typename _Ty::argument_type, typename _Ty::result_type> ((_Ty *)0))) == sizeof(char [2]))>  { 


}; 


template<class _Ty, bool 
__T15> 
struct _Refwrap_result2_helper : public _Refwrap_result1< _Ty, (sizeof((tr1::_Has_result_and_arg_type< _Ty> ((_Ty *)0))) == sizeof(char [2]))>  { 


}; 

template<class _Ty> 
struct _Refwrap_result2_helper< _Ty, true>  : public binary_function< typename _Ty::first_argument_type, typename _Ty::second_argument_type, typename _Ty::result_type>  { 




}; 


template<class _Ty, bool 
__T16> 
struct _Refwrap_result2 : public _Refwrap_result1< _Ty, (sizeof((tr1::_Has_result_and_arg_type< _Ty> ((_Ty *)0))) == sizeof(char [2]))>  { 


}; 

template<class _Ty> 
struct _Refwrap_result2< _Ty, true>  : public _Refwrap_result2_helper< _Ty, (sizeof((_Has_binary_base< typename _Ty::first_argument_type, typename _Ty::second_argument_type, typename _Ty::result_type> ((_Ty *)0))) == sizeof(char [2]))>  { 


}; 


template < class _Ty >
 struct _Refwrap_impl
  : _Call_wrapper < _Callable_obj < _Ty, true > >,
   _Refwrap_result2 < _Ty, ( sizeof ( :: std :: tr1 :: _Has_result_and_2arg_type < _Ty > ( ( _Ty * ) 0 ) ) == sizeof ( :: std :: tr1 :: _Yes ) ) >
 {
 _Refwrap_impl ( _Ty & _Val )
  : _Call_wrapper < _Callable_obj < _Ty, true > > ( _Val )
  {
  }
 };

template < class _Rx,
 class _Arg0 >
 struct _Refwrap_impl < _Rx _Arg0 :: * >
  : _Call_wrapper < _Callable_pmd < _Rx _Arg0 :: * const, _Arg0, false > >
 {
 typedef _Rx _Arg0 :: * const _Fty;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty _Val )
  : _Call_wrapper < _Callable_pmd < _Fty, _Arg0, false > > ( _Val )
  {
  }
 };

template < class _Rx,
 class _Arg0 >
 struct _Refwrap_impl < _Rx _Arg0 :: * const >
  : _Call_wrapper < _Callable_pmd < _Rx _Arg0 :: *, _Arg0, false > >
 {
 typedef _Rx _Arg0 :: * _Fty;
 typedef _Rx result_type;
 _Refwrap_impl ( _Fty _Val )
  : _Call_wrapper < _Callable_pmd < _Fty, _Arg0, false > > ( _Val )
  {
  }
 };
#line 5 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
      >
 struct _Refwrap_impl < _Rx ( ) >
  : _Call_wrapper < _Callable_fun <
   _Rx ( * ) ( ), false > >








 {
 typedef _Rx ( * _Fty ) ( );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty _Val )
  : _Call_wrapper < _Callable_fun < _Fty, false > > ( _Val )
  {
  }
 };
#line 29 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
      >
 struct _Refwrap_impl < _Rx ( * ) ( ) >
  : _Call_wrapper < _Callable_fun <
   _Rx ( * ) ( ), true > >








 {
 typedef _Rx ( * _Fty ) ( );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_fun < _Fty, true > > ( _Val )
  {
  }
 };
#line 52 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
      >
 struct _Refwrap_impl < _Rx ( * const ) ( ) >
  : _Call_wrapper < _Callable_fun <
   _Rx ( * const ) ( ), true > >








 {
 typedef _Rx ( * const _Fty ) ( );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_fun < _Fty, true > > ( _Val )
  {
  }
 };
#line 5 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0 >
 struct _Refwrap_impl < _Rx ( _Arg0 ) >
  : _Call_wrapper < _Callable_fun <
   _Rx ( * ) ( _Arg0 ), false > >


   , unary_function < _Arg0, _Rx >





 {
 typedef _Rx ( * _Fty ) ( _Arg0 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty _Val )
  : _Call_wrapper < _Callable_fun < _Fty, false > > ( _Val )
  {
  }
 };
#line 29 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0 >
 struct _Refwrap_impl < _Rx ( * ) ( _Arg0 ) >
  : _Call_wrapper < _Callable_fun <
   _Rx ( * ) ( _Arg0 ), true > >


   , unary_function < _Arg0, _Rx >





 {
 typedef _Rx ( * _Fty ) ( _Arg0 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_fun < _Fty, true > > ( _Val )
  {
  }
 };
#line 52 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0 >
 struct _Refwrap_impl < _Rx ( * const ) ( _Arg0 ) >
  : _Call_wrapper < _Callable_fun <
   _Rx ( * const ) ( _Arg0 ), true > >


   , unary_function < _Arg0, _Rx >





 {
 typedef _Rx ( * const _Fty ) ( _Arg0 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_fun < _Fty, true > > ( _Val )
  {
  }
 };
#line 78 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( ) >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( ), _Arg0, true > >


   , unary_function < _Arg0 * const, _Rx >





 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 101 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( ) const >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( ) const, _Arg0, true > >


   , unary_function < _Arg0 * const, _Rx >





 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( ) const;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 124 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( ) volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( ) volatile, _Arg0, true > >


   , unary_function < _Arg0 * const, _Rx >





 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( ) volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 147 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( ) const volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( ) const volatile, _Arg0, true > >


   , unary_function < _Arg0 * const, _Rx >





 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( ) const volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 170 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( ) >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( ), _Arg0, true > >


   , unary_function < _Arg0 * const, _Rx >





 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 193 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( ) const >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( ) const, _Arg0, true > >


   , unary_function < _Arg0 * const, _Rx >





 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( ) const;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 216 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( ) volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( ) volatile, _Arg0, true > >


   , unary_function < _Arg0 * const, _Rx >





 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( ) volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 239 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( ) const volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( ) const volatile, _Arg0, true > >


   , unary_function < _Arg0 * const, _Rx >





 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( ) const volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 5 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1 >
 struct _Refwrap_impl < _Rx ( _Arg0, _Arg1 ) >
  : _Call_wrapper < _Callable_fun <
   _Rx ( * ) ( _Arg0, _Arg1 ), false > >





   , binary_function < _Arg0, _Arg1, _Rx >


 {
 typedef _Rx ( * _Fty ) ( _Arg0, _Arg1 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty _Val )
  : _Call_wrapper < _Callable_fun < _Fty, false > > ( _Val )
  {
  }
 };
#line 29 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1 >
 struct _Refwrap_impl < _Rx ( * ) ( _Arg0, _Arg1 ) >
  : _Call_wrapper < _Callable_fun <
   _Rx ( * ) ( _Arg0, _Arg1 ), true > >





   , binary_function < _Arg0, _Arg1, _Rx >


 {
 typedef _Rx ( * _Fty ) ( _Arg0, _Arg1 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_fun < _Fty, true > > ( _Val )
  {
  }
 };
#line 52 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1 >
 struct _Refwrap_impl < _Rx ( * const ) ( _Arg0, _Arg1 ) >
  : _Call_wrapper < _Callable_fun <
   _Rx ( * const ) ( _Arg0, _Arg1 ), true > >





   , binary_function < _Arg0, _Arg1, _Rx >


 {
 typedef _Rx ( * const _Fty ) ( _Arg0, _Arg1 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_fun < _Fty, true > > ( _Val )
  {
  }
 };
#line 78 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1 ) >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1 ), _Arg0, true > >





   , binary_function < _Arg0 * const, _Arg1, _Rx >


 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 101 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1 ) const >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1 ) const, _Arg0, true > >





   , binary_function < _Arg0 * const, _Arg1, _Rx >


 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1 ) const;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 124 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1 ) volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1 ) volatile, _Arg0, true > >





   , binary_function < _Arg0 * const, _Arg1, _Rx >


 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1 ) volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 147 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1 ) const volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1 ) const volatile, _Arg0, true > >





   , binary_function < _Arg0 * const, _Arg1, _Rx >


 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1 ) const volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 170 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1 ) >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1 ), _Arg0, true > >





   , binary_function < _Arg0 * const, _Arg1, _Rx >


 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 193 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1 ) const >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1 ) const, _Arg0, true > >





   , binary_function < _Arg0 * const, _Arg1, _Rx >


 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1 ) const;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 216 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1 ) volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1 ) volatile, _Arg0, true > >





   , binary_function < _Arg0 * const, _Arg1, _Rx >


 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1 ) volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 239 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1 ) const volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1 ) const volatile, _Arg0, true > >





   , binary_function < _Arg0 * const, _Arg1, _Rx >


 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1 ) const volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 5 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2 >
 struct _Refwrap_impl < _Rx ( _Arg0, _Arg1, _Arg2 ) >
  : _Call_wrapper < _Callable_fun <
   _Rx ( * ) ( _Arg0, _Arg1, _Arg2 ), false > >








 {
 typedef _Rx ( * _Fty ) ( _Arg0, _Arg1, _Arg2 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty _Val )
  : _Call_wrapper < _Callable_fun < _Fty, false > > ( _Val )
  {
  }
 };
#line 29 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2 >
 struct _Refwrap_impl < _Rx ( * ) ( _Arg0, _Arg1, _Arg2 ) >
  : _Call_wrapper < _Callable_fun <
   _Rx ( * ) ( _Arg0, _Arg1, _Arg2 ), true > >








 {
 typedef _Rx ( * _Fty ) ( _Arg0, _Arg1, _Arg2 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_fun < _Fty, true > > ( _Val )
  {
  }
 };
#line 52 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2 >
 struct _Refwrap_impl < _Rx ( * const ) ( _Arg0, _Arg1, _Arg2 ) >
  : _Call_wrapper < _Callable_fun <
   _Rx ( * const ) ( _Arg0, _Arg1, _Arg2 ), true > >








 {
 typedef _Rx ( * const _Fty ) ( _Arg0, _Arg1, _Arg2 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_fun < _Fty, true > > ( _Val )
  {
  }
 };
#line 78 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2 ) >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2 ), _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1, _Arg2 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 101 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2 ) const >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2 ) const, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1, _Arg2 ) const;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 124 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2 ) volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2 ) volatile, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1, _Arg2 ) volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 147 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2 ) const volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2 ) const volatile, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1, _Arg2 ) const volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 170 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2 ) >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2 ), _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1, _Arg2 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 193 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2 ) const >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2 ) const, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1, _Arg2 ) const;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 216 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2 ) volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2 ) volatile, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1, _Arg2 ) volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 239 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2 ) const volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2 ) const volatile, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1, _Arg2 ) const volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 5 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 struct _Refwrap_impl < _Rx ( _Arg0, _Arg1, _Arg2, _Arg3 ) >
  : _Call_wrapper < _Callable_fun <
   _Rx ( * ) ( _Arg0, _Arg1, _Arg2, _Arg3 ), false > >








 {
 typedef _Rx ( * _Fty ) ( _Arg0, _Arg1, _Arg2, _Arg3 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty _Val )
  : _Call_wrapper < _Callable_fun < _Fty, false > > ( _Val )
  {
  }
 };
#line 29 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 struct _Refwrap_impl < _Rx ( * ) ( _Arg0, _Arg1, _Arg2, _Arg3 ) >
  : _Call_wrapper < _Callable_fun <
   _Rx ( * ) ( _Arg0, _Arg1, _Arg2, _Arg3 ), true > >








 {
 typedef _Rx ( * _Fty ) ( _Arg0, _Arg1, _Arg2, _Arg3 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_fun < _Fty, true > > ( _Val )
  {
  }
 };
#line 52 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 struct _Refwrap_impl < _Rx ( * const ) ( _Arg0, _Arg1, _Arg2, _Arg3 ) >
  : _Call_wrapper < _Callable_fun <
   _Rx ( * const ) ( _Arg0, _Arg1, _Arg2, _Arg3 ), true > >








 {
 typedef _Rx ( * const _Fty ) ( _Arg0, _Arg1, _Arg2, _Arg3 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_fun < _Fty, true > > ( _Val )
  {
  }
 };
#line 78 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3 ) >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3 ), _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1, _Arg2, _Arg3 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 101 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3 ) const >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3 ) const, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1, _Arg2, _Arg3 ) const;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 124 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3 ) volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3 ) volatile, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1, _Arg2, _Arg3 ) volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 147 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3 ) const volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3 ) const volatile, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1, _Arg2, _Arg3 ) const volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 170 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ) >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ), _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1, _Arg2, _Arg3 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 193 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ) const >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ) const, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1, _Arg2, _Arg3 ) const;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 216 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ) volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ) volatile, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1, _Arg2, _Arg3 ) volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 239 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ) const volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ) const volatile, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1, _Arg2, _Arg3 ) const volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 5 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 struct _Refwrap_impl < _Rx ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 ) >
  : _Call_wrapper < _Callable_fun <
   _Rx ( * ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 ), false > >








 {
 typedef _Rx ( * _Fty ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty _Val )
  : _Call_wrapper < _Callable_fun < _Fty, false > > ( _Val )
  {
  }
 };
#line 29 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 struct _Refwrap_impl < _Rx ( * ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 ) >
  : _Call_wrapper < _Callable_fun <
   _Rx ( * ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 ), true > >








 {
 typedef _Rx ( * _Fty ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_fun < _Fty, true > > ( _Val )
  {
  }
 };
#line 52 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 struct _Refwrap_impl < _Rx ( * const ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 ) >
  : _Call_wrapper < _Callable_fun <
   _Rx ( * const ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 ), true > >








 {
 typedef _Rx ( * const _Fty ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_fun < _Fty, true > > ( _Val )
  {
  }
 };
#line 78 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4 ), _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 101 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 124 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) volatile, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 147 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const volatile, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 170 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ), _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 193 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 216 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) volatile, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 239 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const volatile, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 5 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 struct _Refwrap_impl < _Rx ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) >
  : _Call_wrapper < _Callable_fun <
   _Rx ( * ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ), false > >








 {
 typedef _Rx ( * _Fty ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty _Val )
  : _Call_wrapper < _Callable_fun < _Fty, false > > ( _Val )
  {
  }
 };
#line 29 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 struct _Refwrap_impl < _Rx ( * ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) >
  : _Call_wrapper < _Callable_fun <
   _Rx ( * ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ), true > >








 {
 typedef _Rx ( * _Fty ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_fun < _Fty, true > > ( _Val )
  {
  }
 };
#line 52 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 struct _Refwrap_impl < _Rx ( * const ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) >
  : _Call_wrapper < _Callable_fun <
   _Rx ( * const ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ), true > >








 {
 typedef _Rx ( * const _Fty ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_fun < _Fty, true > > ( _Val )
  {
  }
 };
#line 78 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ), _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 101 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 124 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) volatile, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 147 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const volatile, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 170 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ), _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 193 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 216 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) volatile, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 239 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const volatile, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 5 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 struct _Refwrap_impl < _Rx ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) >
  : _Call_wrapper < _Callable_fun <
   _Rx ( * ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ), false > >








 {
 typedef _Rx ( * _Fty ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty _Val )
  : _Call_wrapper < _Callable_fun < _Fty, false > > ( _Val )
  {
  }
 };
#line 29 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 struct _Refwrap_impl < _Rx ( * ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) >
  : _Call_wrapper < _Callable_fun <
   _Rx ( * ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ), true > >








 {
 typedef _Rx ( * _Fty ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_fun < _Fty, true > > ( _Val )
  {
  }
 };
#line 52 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 struct _Refwrap_impl < _Rx ( * const ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) >
  : _Call_wrapper < _Callable_fun <
   _Rx ( * const ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ), true > >








 {
 typedef _Rx ( * const _Fty ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_fun < _Fty, true > > ( _Val )
  {
  }
 };
#line 78 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ), _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 101 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 124 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) volatile, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 147 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const volatile, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 170 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ), _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 193 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 216 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) volatile, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 239 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const volatile, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 5 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 struct _Refwrap_impl < _Rx ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) >
  : _Call_wrapper < _Callable_fun <
   _Rx ( * ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ), false > >








 {
 typedef _Rx ( * _Fty ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty _Val )
  : _Call_wrapper < _Callable_fun < _Fty, false > > ( _Val )
  {
  }
 };
#line 29 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 struct _Refwrap_impl < _Rx ( * ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) >
  : _Call_wrapper < _Callable_fun <
   _Rx ( * ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ), true > >








 {
 typedef _Rx ( * _Fty ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_fun < _Fty, true > > ( _Val )
  {
  }
 };
#line 52 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 struct _Refwrap_impl < _Rx ( * const ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) >
  : _Call_wrapper < _Callable_fun <
   _Rx ( * const ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ), true > >








 {
 typedef _Rx ( * const _Fty ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_fun < _Fty, true > > ( _Val )
  {
  }
 };
#line 78 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ), _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 101 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 124 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) volatile, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 147 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const volatile, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 170 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ), _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 193 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 216 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) volatile, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 239 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const volatile, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 5 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 struct _Refwrap_impl < _Rx ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) >
  : _Call_wrapper < _Callable_fun <
   _Rx ( * ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ), false > >








 {
 typedef _Rx ( * _Fty ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty _Val )
  : _Call_wrapper < _Callable_fun < _Fty, false > > ( _Val )
  {
  }
 };
#line 29 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 struct _Refwrap_impl < _Rx ( * ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) >
  : _Call_wrapper < _Callable_fun <
   _Rx ( * ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ), true > >








 {
 typedef _Rx ( * _Fty ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_fun < _Fty, true > > ( _Val )
  {
  }
 };
#line 52 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 struct _Refwrap_impl < _Rx ( * const ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) >
  : _Call_wrapper < _Callable_fun <
   _Rx ( * const ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ), true > >








 {
 typedef _Rx ( * const _Fty ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_fun < _Fty, true > > ( _Val )
  {
  }
 };
#line 78 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ), _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 101 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 124 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) volatile, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 147 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const volatile, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 170 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ), _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 193 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 216 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) volatile, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 239 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const volatile, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 5 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 struct _Refwrap_impl < _Rx ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) >
  : _Call_wrapper < _Callable_fun <
   _Rx ( * ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ), false > >








 {
 typedef _Rx ( * _Fty ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty _Val )
  : _Call_wrapper < _Callable_fun < _Fty, false > > ( _Val )
  {
  }
 };
#line 29 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 struct _Refwrap_impl < _Rx ( * ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) >
  : _Call_wrapper < _Callable_fun <
   _Rx ( * ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ), true > >








 {
 typedef _Rx ( * _Fty ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_fun < _Fty, true > > ( _Val )
  {
  }
 };
#line 52 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 struct _Refwrap_impl < _Rx ( * const ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) >
  : _Call_wrapper < _Callable_fun <
   _Rx ( * const ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ), true > >








 {
 typedef _Rx ( * const _Fty ) ( _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_fun < _Fty, true > > ( _Val )
  {
  }
 };
#line 78 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ), _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 101 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 124 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) volatile, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 147 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * const ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const volatile, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * const _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 170 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ), _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 );
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 193 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 216 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) volatile, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 239 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxrefwrap"
template < class _Rx
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 struct _Refwrap_impl < _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const volatile >
  : _Call_wrapper < _Callable_pmf <
   _Rx ( _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const volatile, _Arg0, true > >








 {
 typedef _Rx ( _Arg0 :: * _Fty ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const volatile;
 typedef _Rx result_type;

 _Refwrap_impl ( _Fty & _Val )
  : _Call_wrapper < _Callable_pmf < _Fty, _Arg0, true > > ( _Val )
  {
  }
 };
#line 444 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xrefwrap"
template < class _Ty >
 class reference_wrapper
 : public _Refwrap_impl < _Ty >
 {
public :
 typedef _Refwrap_impl < _Ty > _MyBase;
 typedef _Ty type;

 explicit reference_wrapper ( _Ty & _Val )
  : _MyBase ( _Val )
  {
  }

 operator _Ty & ( ) const
  {
  return ( this -> _Get ( ) );
  }

 _Ty & get ( ) const
  {
  return ( this -> _Get ( ) );
  }
 };


template < class _Ty >
 reference_wrapper < _Ty > ref ( _Ty & _Val )
 {
 return ( reference_wrapper < _Ty > ( _Val ) );
 }

template < class _Ty >
 reference_wrapper < _Ty > ref ( reference_wrapper < _Ty > _Val )
 {
 return ( _Val );
 }

template < class _Ty >
 reference_wrapper < const _Ty > cref ( const _Ty & _Val )
 {
 return ( reference_wrapper < const _Ty > ( _Val ) );
 }

template < class _Ty >
 reference_wrapper < const _Ty > cref ( reference_wrapper < const _Ty > _Val )
 {
 return ( _Val );
 }

}
}
#line 880 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\functional"
namespace std { 
namespace tr1 { 



template < class _Rx,
 class _Arg0 >
 _Call_wrapper < _Callable_pmd < _Rx _Arg0 :: * const, _Arg0 > >
  mem_fn ( _Rx _Arg0 :: * const _Pmd )
 {
 return ( _Call_wrapper < _Callable_pmd < _Rx _Arg0 :: * const, _Arg0 > > ( _Pmd ) );
 }
#line 7 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Pmf, class _Arg0 >
 class _Mem_fn1
  : public _Call_wrapper < _Callable_pmf < _Pmf, _Arg0 > >


   , public :: std :: unary_function < _Arg0 *, _Rx >





 {
public :
 typedef _Rx result_type;

 _Mem_fn1 ( _Pmf _Fx )
  : _Call_wrapper < _Callable_pmf < _Pmf, _Arg0 > > ( _Fx )
  {
  }
 };
#line 30 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0 >
 _Mem_fn1 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( ), _Arg0 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( ) )
 {
 return ( _Mem_fn1 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( ),
  _Arg0 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0 >
 _Mem_fn1 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( ), _Arg0 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( ) )
 {
 return ( _Mem_fn1 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( ),
  _Arg0 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0 >
 _Mem_fn1 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( ), _Arg0 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( ) )
 {
 return ( _Mem_fn1 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( ),
  _Arg0 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0 >
 _Mem_fn1 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( ), _Arg0 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( ) )
 {
 return ( _Mem_fn1 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( ),
  _Arg0 > ( _Pm ) );
 }
#line 83 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0 >
 _Mem_fn1 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( ) const,
  const _Arg0 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( ) const )
 {
 return ( _Mem_fn1 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( ) const,
  const _Arg0 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0 >
 _Mem_fn1 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( ) const,
  const _Arg0 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( ) const )
 {
 return ( _Mem_fn1 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( ) const,
  const _Arg0 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0 >
 _Mem_fn1 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( ) const,
  const _Arg0 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( ) const )
 {
 return ( _Mem_fn1 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( ) const,
  const _Arg0 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0 >
 _Mem_fn1 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( ) const,
  const _Arg0 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( ) const )
 {
 return ( _Mem_fn1 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( ) const,
  const _Arg0 > ( _Pm ) );
 }
#line 141 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0 >
 _Mem_fn1 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( ) volatile,
  volatile _Arg0 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( ) volatile )
 {
 return ( _Mem_fn1 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( ) volatile,
  volatile _Arg0 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0 >
 _Mem_fn1 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( ) volatile,
  volatile _Arg0 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( ) volatile )
 {
 return ( _Mem_fn1 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( ) volatile,
  volatile _Arg0 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0 >
 _Mem_fn1 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( ) volatile,
  volatile _Arg0 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( ) volatile )
 {
 return ( _Mem_fn1 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( ) volatile,
  volatile _Arg0 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0 >
 _Mem_fn1 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( ) volatile,
  volatile _Arg0 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( ) volatile )
 {
 return ( _Mem_fn1 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( ) volatile,
  volatile _Arg0 > ( _Pm ) );
 }
#line 199 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0 >
 _Mem_fn1 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( ) const volatile,
  const volatile _Arg0 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( ) const volatile )
 {
 return ( _Mem_fn1 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( ) const volatile,
  const volatile _Arg0 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0 >
 _Mem_fn1 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( ) const volatile,
  const volatile _Arg0 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( ) const volatile )
 {
 return ( _Mem_fn1 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( ) const volatile,
  const volatile _Arg0 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0 >
 _Mem_fn1 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( ) const volatile,
  const volatile _Arg0 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( ) const volatile )
 {
 return ( _Mem_fn1 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( ) const volatile,
  const volatile _Arg0 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0 >
 _Mem_fn1 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( ) const volatile,
  const volatile _Arg0 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( ) const volatile )
 {
 return ( _Mem_fn1 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( ) const volatile,
  const volatile _Arg0 > ( _Pm ) );
 }
#line 7 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Pmf, class _Arg0, class _Arg1 >
 class _Mem_fn2
  : public _Call_wrapper < _Callable_pmf < _Pmf, _Arg0 > >





   , public :: std :: binary_function < _Arg0 *, _Arg1, _Rx >


 {
public :
 typedef _Rx result_type;

 _Mem_fn2 ( _Pmf _Fx )
  : _Call_wrapper < _Callable_pmf < _Pmf, _Arg0 > > ( _Fx )
  {
  }
 };
#line 30 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1 >
 _Mem_fn2 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1 ), _Arg0, _Arg1 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1 ) )
 {
 return ( _Mem_fn2 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1 ),
  _Arg0, _Arg1 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1 >
 _Mem_fn2 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1 ), _Arg0, _Arg1 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1 ) )
 {
 return ( _Mem_fn2 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1 ),
  _Arg0, _Arg1 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1 >
 _Mem_fn2 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1 ), _Arg0, _Arg1 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1 ) )
 {
 return ( _Mem_fn2 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1 ),
  _Arg0, _Arg1 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1 >
 _Mem_fn2 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1 ), _Arg0, _Arg1 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1 ) )
 {
 return ( _Mem_fn2 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1 ),
  _Arg0, _Arg1 > ( _Pm ) );
 }
#line 83 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1 >
 _Mem_fn2 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1 ) const,
  const _Arg0, _Arg1 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1 ) const )
 {
 return ( _Mem_fn2 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1 ) const,
  const _Arg0, _Arg1 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1 >
 _Mem_fn2 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1 ) const,
  const _Arg0, _Arg1 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1 ) const )
 {
 return ( _Mem_fn2 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1 ) const,
  const _Arg0, _Arg1 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1 >
 _Mem_fn2 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1 ) const,
  const _Arg0, _Arg1 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1 ) const )
 {
 return ( _Mem_fn2 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1 ) const,
  const _Arg0, _Arg1 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1 >
 _Mem_fn2 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1 ) const,
  const _Arg0, _Arg1 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1 ) const )
 {
 return ( _Mem_fn2 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1 ) const,
  const _Arg0, _Arg1 > ( _Pm ) );
 }
#line 141 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1 >
 _Mem_fn2 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1 ) volatile,
  volatile _Arg0, _Arg1 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1 ) volatile )
 {
 return ( _Mem_fn2 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1 ) volatile,
  volatile _Arg0, _Arg1 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1 >
 _Mem_fn2 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1 ) volatile,
  volatile _Arg0, _Arg1 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1 ) volatile )
 {
 return ( _Mem_fn2 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1 ) volatile,
  volatile _Arg0, _Arg1 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1 >
 _Mem_fn2 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1 ) volatile,
  volatile _Arg0, _Arg1 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1 ) volatile )
 {
 return ( _Mem_fn2 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1 ) volatile,
  volatile _Arg0, _Arg1 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1 >
 _Mem_fn2 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1 ) volatile,
  volatile _Arg0, _Arg1 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1 ) volatile )
 {
 return ( _Mem_fn2 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1 ) volatile,
  volatile _Arg0, _Arg1 > ( _Pm ) );
 }
#line 199 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1 >
 _Mem_fn2 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1 ) const volatile,
  const volatile _Arg0, _Arg1 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1 ) const volatile )
 {
 return ( _Mem_fn2 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1 ) const volatile,
  const volatile _Arg0, _Arg1 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1 >
 _Mem_fn2 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1 ) const volatile,
  const volatile _Arg0, _Arg1 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1 ) const volatile )
 {
 return ( _Mem_fn2 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1 ) const volatile,
  const volatile _Arg0, _Arg1 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1 >
 _Mem_fn2 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1 ) const volatile,
  const volatile _Arg0, _Arg1 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1 ) const volatile )
 {
 return ( _Mem_fn2 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1 ) const volatile,
  const volatile _Arg0, _Arg1 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1 >
 _Mem_fn2 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1 ) const volatile,
  const volatile _Arg0, _Arg1 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1 ) const volatile )
 {
 return ( _Mem_fn2 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1 ) const volatile,
  const volatile _Arg0, _Arg1 > ( _Pm ) );
 }
#line 7 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Pmf, class _Arg0, class _Arg1, class _Arg2 >
 class _Mem_fn3
  : public _Call_wrapper < _Callable_pmf < _Pmf, _Arg0 > >








 {
public :
 typedef _Rx result_type;

 _Mem_fn3 ( _Pmf _Fx )
  : _Call_wrapper < _Callable_pmf < _Pmf, _Arg0 > > ( _Fx )
  {
  }
 };
#line 30 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2 >
 _Mem_fn3 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2 ), _Arg0, _Arg1, _Arg2 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1, _Arg2 ) )
 {
 return ( _Mem_fn3 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2 ),
  _Arg0, _Arg1, _Arg2 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2 >
 _Mem_fn3 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2 ), _Arg0, _Arg1, _Arg2 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1, _Arg2 ) )
 {
 return ( _Mem_fn3 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2 ),
  _Arg0, _Arg1, _Arg2 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2 >
 _Mem_fn3 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2 ), _Arg0, _Arg1, _Arg2 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2 ) )
 {
 return ( _Mem_fn3 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2 ),
  _Arg0, _Arg1, _Arg2 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2 >
 _Mem_fn3 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2 ), _Arg0, _Arg1, _Arg2 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2 ) )
 {
 return ( _Mem_fn3 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2 ),
  _Arg0, _Arg1, _Arg2 > ( _Pm ) );
 }
#line 83 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2 >
 _Mem_fn3 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2 ) const,
  const _Arg0, _Arg1, _Arg2 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1, _Arg2 ) const )
 {
 return ( _Mem_fn3 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2 ) const,
  const _Arg0, _Arg1, _Arg2 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2 >
 _Mem_fn3 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2 ) const,
  const _Arg0, _Arg1, _Arg2 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1, _Arg2 ) const )
 {
 return ( _Mem_fn3 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2 ) const,
  const _Arg0, _Arg1, _Arg2 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2 >
 _Mem_fn3 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2 ) const,
  const _Arg0, _Arg1, _Arg2 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2 ) const )
 {
 return ( _Mem_fn3 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2 ) const,
  const _Arg0, _Arg1, _Arg2 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2 >
 _Mem_fn3 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2 ) const,
  const _Arg0, _Arg1, _Arg2 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2 ) const )
 {
 return ( _Mem_fn3 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2 ) const,
  const _Arg0, _Arg1, _Arg2 > ( _Pm ) );
 }
#line 141 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2 >
 _Mem_fn3 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2 ) volatile,
  volatile _Arg0, _Arg1, _Arg2 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1, _Arg2 ) volatile )
 {
 return ( _Mem_fn3 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2 ) volatile,
  volatile _Arg0, _Arg1, _Arg2 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2 >
 _Mem_fn3 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2 ) volatile,
  volatile _Arg0, _Arg1, _Arg2 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1, _Arg2 ) volatile )
 {
 return ( _Mem_fn3 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2 ) volatile,
  volatile _Arg0, _Arg1, _Arg2 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2 >
 _Mem_fn3 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2 ) volatile,
  volatile _Arg0, _Arg1, _Arg2 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2 ) volatile )
 {
 return ( _Mem_fn3 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2 ) volatile,
  volatile _Arg0, _Arg1, _Arg2 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2 >
 _Mem_fn3 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2 ) volatile,
  volatile _Arg0, _Arg1, _Arg2 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2 ) volatile )
 {
 return ( _Mem_fn3 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2 ) volatile,
  volatile _Arg0, _Arg1, _Arg2 > ( _Pm ) );
 }
#line 199 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2 >
 _Mem_fn3 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1, _Arg2 ) const volatile )
 {
 return ( _Mem_fn3 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2 >
 _Mem_fn3 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1, _Arg2 ) const volatile )
 {
 return ( _Mem_fn3 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2 >
 _Mem_fn3 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2 ) const volatile )
 {
 return ( _Mem_fn3 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2 >
 _Mem_fn3 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2 ) const volatile )
 {
 return ( _Mem_fn3 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2 > ( _Pm ) );
 }
#line 7 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Pmf, class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 class _Mem_fn4
  : public _Call_wrapper < _Callable_pmf < _Pmf, _Arg0 > >








 {
public :
 typedef _Rx result_type;

 _Mem_fn4 ( _Pmf _Fx )
  : _Call_wrapper < _Callable_pmf < _Pmf, _Arg0 > > ( _Fx )
  {
  }
 };
#line 30 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 _Mem_fn4 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ), _Arg0, _Arg1, _Arg2, _Arg3 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3 ) )
 {
 return ( _Mem_fn4 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ),
  _Arg0, _Arg1, _Arg2, _Arg3 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 _Mem_fn4 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ), _Arg0, _Arg1, _Arg2, _Arg3 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3 ) )
 {
 return ( _Mem_fn4 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ),
  _Arg0, _Arg1, _Arg2, _Arg3 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 _Mem_fn4 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ), _Arg0, _Arg1, _Arg2, _Arg3 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3 ) )
 {
 return ( _Mem_fn4 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ),
  _Arg0, _Arg1, _Arg2, _Arg3 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 _Mem_fn4 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ), _Arg0, _Arg1, _Arg2, _Arg3 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3 ) )
 {
 return ( _Mem_fn4 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ),
  _Arg0, _Arg1, _Arg2, _Arg3 > ( _Pm ) );
 }
#line 83 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 _Mem_fn4 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3 ) const )
 {
 return ( _Mem_fn4 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 _Mem_fn4 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3 ) const )
 {
 return ( _Mem_fn4 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 _Mem_fn4 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3 ) const )
 {
 return ( _Mem_fn4 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 _Mem_fn4 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3 ) const )
 {
 return ( _Mem_fn4 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3 > ( _Pm ) );
 }
#line 141 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 _Mem_fn4 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3 ) volatile )
 {
 return ( _Mem_fn4 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 _Mem_fn4 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3 ) volatile )
 {
 return ( _Mem_fn4 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 _Mem_fn4 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3 ) volatile )
 {
 return ( _Mem_fn4 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 _Mem_fn4 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3 ) volatile )
 {
 return ( _Mem_fn4 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3 > ( _Pm ) );
 }
#line 199 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 _Mem_fn4 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3 ) const volatile )
 {
 return ( _Mem_fn4 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 _Mem_fn4 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3 ) const volatile )
 {
 return ( _Mem_fn4 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 _Mem_fn4 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3 ) const volatile )
 {
 return ( _Mem_fn4 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 _Mem_fn4 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3 ) const volatile )
 {
 return ( _Mem_fn4 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3 > ( _Pm ) );
 }
#line 7 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Pmf, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 class _Mem_fn5
  : public _Call_wrapper < _Callable_pmf < _Pmf, _Arg0 > >








 {
public :
 typedef _Rx result_type;

 _Mem_fn5 ( _Pmf _Fx )
  : _Call_wrapper < _Callable_pmf < _Pmf, _Arg0 > > ( _Fx )
  {
  }
 };
#line 30 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 _Mem_fn5 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ), _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) )
 {
 return ( _Mem_fn5 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ),
  _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 _Mem_fn5 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ), _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) )
 {
 return ( _Mem_fn5 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ),
  _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 _Mem_fn5 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ), _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) )
 {
 return ( _Mem_fn5 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ),
  _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 _Mem_fn5 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ), _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) )
 {
 return ( _Mem_fn5 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ),
  _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > ( _Pm ) );
 }
#line 83 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 _Mem_fn5 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const )
 {
 return ( _Mem_fn5 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 _Mem_fn5 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const )
 {
 return ( _Mem_fn5 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 _Mem_fn5 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const )
 {
 return ( _Mem_fn5 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 _Mem_fn5 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const )
 {
 return ( _Mem_fn5 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > ( _Pm ) );
 }
#line 141 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 _Mem_fn5 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) volatile )
 {
 return ( _Mem_fn5 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 _Mem_fn5 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) volatile )
 {
 return ( _Mem_fn5 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 _Mem_fn5 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) volatile )
 {
 return ( _Mem_fn5 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 _Mem_fn5 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) volatile )
 {
 return ( _Mem_fn5 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > ( _Pm ) );
 }
#line 199 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 _Mem_fn5 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const volatile )
 {
 return ( _Mem_fn5 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 _Mem_fn5 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const volatile )
 {
 return ( _Mem_fn5 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 _Mem_fn5 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const volatile )
 {
 return ( _Mem_fn5 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 _Mem_fn5 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const volatile )
 {
 return ( _Mem_fn5 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > ( _Pm ) );
 }
#line 7 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Pmf, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 class _Mem_fn6
  : public _Call_wrapper < _Callable_pmf < _Pmf, _Arg0 > >








 {
public :
 typedef _Rx result_type;

 _Mem_fn6 ( _Pmf _Fx )
  : _Call_wrapper < _Callable_pmf < _Pmf, _Arg0 > > ( _Fx )
  {
  }
 };
#line 30 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 _Mem_fn6 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ), _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) )
 {
 return ( _Mem_fn6 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ),
  _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 _Mem_fn6 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ), _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) )
 {
 return ( _Mem_fn6 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ),
  _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 _Mem_fn6 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ), _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) )
 {
 return ( _Mem_fn6 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ),
  _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 _Mem_fn6 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ), _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) )
 {
 return ( _Mem_fn6 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ),
  _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > ( _Pm ) );
 }
#line 83 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 _Mem_fn6 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const )
 {
 return ( _Mem_fn6 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 _Mem_fn6 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const )
 {
 return ( _Mem_fn6 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 _Mem_fn6 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const )
 {
 return ( _Mem_fn6 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 _Mem_fn6 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const )
 {
 return ( _Mem_fn6 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > ( _Pm ) );
 }
#line 141 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 _Mem_fn6 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) volatile )
 {
 return ( _Mem_fn6 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 _Mem_fn6 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) volatile )
 {
 return ( _Mem_fn6 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 _Mem_fn6 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) volatile )
 {
 return ( _Mem_fn6 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 _Mem_fn6 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) volatile )
 {
 return ( _Mem_fn6 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > ( _Pm ) );
 }
#line 199 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 _Mem_fn6 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const volatile )
 {
 return ( _Mem_fn6 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 _Mem_fn6 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const volatile )
 {
 return ( _Mem_fn6 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 _Mem_fn6 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const volatile )
 {
 return ( _Mem_fn6 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 _Mem_fn6 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const volatile )
 {
 return ( _Mem_fn6 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > ( _Pm ) );
 }
#line 7 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Pmf, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 class _Mem_fn7
  : public _Call_wrapper < _Callable_pmf < _Pmf, _Arg0 > >








 {
public :
 typedef _Rx result_type;

 _Mem_fn7 ( _Pmf _Fx )
  : _Call_wrapper < _Callable_pmf < _Pmf, _Arg0 > > ( _Fx )
  {
  }
 };
#line 30 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 _Mem_fn7 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ), _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) )
 {
 return ( _Mem_fn7 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ),
  _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 _Mem_fn7 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ), _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) )
 {
 return ( _Mem_fn7 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ),
  _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 _Mem_fn7 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ), _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) )
 {
 return ( _Mem_fn7 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ),
  _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 _Mem_fn7 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ), _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) )
 {
 return ( _Mem_fn7 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ),
  _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > ( _Pm ) );
 }
#line 83 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 _Mem_fn7 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const )
 {
 return ( _Mem_fn7 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 _Mem_fn7 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const )
 {
 return ( _Mem_fn7 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 _Mem_fn7 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const )
 {
 return ( _Mem_fn7 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 _Mem_fn7 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const )
 {
 return ( _Mem_fn7 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > ( _Pm ) );
 }
#line 141 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 _Mem_fn7 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) volatile )
 {
 return ( _Mem_fn7 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 _Mem_fn7 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) volatile )
 {
 return ( _Mem_fn7 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 _Mem_fn7 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) volatile )
 {
 return ( _Mem_fn7 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 _Mem_fn7 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) volatile )
 {
 return ( _Mem_fn7 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > ( _Pm ) );
 }
#line 199 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 _Mem_fn7 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const volatile )
 {
 return ( _Mem_fn7 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 _Mem_fn7 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const volatile )
 {
 return ( _Mem_fn7 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 _Mem_fn7 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const volatile )
 {
 return ( _Mem_fn7 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 _Mem_fn7 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const volatile )
 {
 return ( _Mem_fn7 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > ( _Pm ) );
 }
#line 7 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Pmf, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 class _Mem_fn8
  : public _Call_wrapper < _Callable_pmf < _Pmf, _Arg0 > >








 {
public :
 typedef _Rx result_type;

 _Mem_fn8 ( _Pmf _Fx )
  : _Call_wrapper < _Callable_pmf < _Pmf, _Arg0 > > ( _Fx )
  {
  }
 };
#line 30 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 _Mem_fn8 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ), _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) )
 {
 return ( _Mem_fn8 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ),
  _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 _Mem_fn8 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ), _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) )
 {
 return ( _Mem_fn8 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ),
  _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 _Mem_fn8 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ), _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) )
 {
 return ( _Mem_fn8 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ),
  _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 _Mem_fn8 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ), _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) )
 {
 return ( _Mem_fn8 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ),
  _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > ( _Pm ) );
 }
#line 83 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 _Mem_fn8 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const )
 {
 return ( _Mem_fn8 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 _Mem_fn8 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const )
 {
 return ( _Mem_fn8 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 _Mem_fn8 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const )
 {
 return ( _Mem_fn8 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 _Mem_fn8 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const )
 {
 return ( _Mem_fn8 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > ( _Pm ) );
 }
#line 141 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 _Mem_fn8 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) volatile )
 {
 return ( _Mem_fn8 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 _Mem_fn8 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) volatile )
 {
 return ( _Mem_fn8 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 _Mem_fn8 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) volatile )
 {
 return ( _Mem_fn8 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 _Mem_fn8 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) volatile )
 {
 return ( _Mem_fn8 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > ( _Pm ) );
 }
#line 199 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 _Mem_fn8 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const volatile )
 {
 return ( _Mem_fn8 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 _Mem_fn8 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const volatile )
 {
 return ( _Mem_fn8 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 _Mem_fn8 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const volatile )
 {
 return ( _Mem_fn8 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 _Mem_fn8 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const volatile )
 {
 return ( _Mem_fn8 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > ( _Pm ) );
 }
#line 7 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Pmf, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 class _Mem_fn9
  : public _Call_wrapper < _Callable_pmf < _Pmf, _Arg0 > >








 {
public :
 typedef _Rx result_type;

 _Mem_fn9 ( _Pmf _Fx )
  : _Call_wrapper < _Callable_pmf < _Pmf, _Arg0 > > ( _Fx )
  {
  }
 };
#line 30 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 _Mem_fn9 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ), _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) )
 {
 return ( _Mem_fn9 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ),
  _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 _Mem_fn9 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ), _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) )
 {
 return ( _Mem_fn9 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ),
  _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 _Mem_fn9 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ), _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) )
 {
 return ( _Mem_fn9 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ),
  _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 _Mem_fn9 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ), _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) )
 {
 return ( _Mem_fn9 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ),
  _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > ( _Pm ) );
 }
#line 83 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 _Mem_fn9 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const )
 {
 return ( _Mem_fn9 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 _Mem_fn9 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const )
 {
 return ( _Mem_fn9 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 _Mem_fn9 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const )
 {
 return ( _Mem_fn9 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 _Mem_fn9 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const )
 {
 return ( _Mem_fn9 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > ( _Pm ) );
 }
#line 141 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 _Mem_fn9 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) volatile )
 {
 return ( _Mem_fn9 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 _Mem_fn9 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) volatile )
 {
 return ( _Mem_fn9 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 _Mem_fn9 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) volatile )
 {
 return ( _Mem_fn9 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 _Mem_fn9 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) volatile )
 {
 return ( _Mem_fn9 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > ( _Pm ) );
 }
#line 199 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 _Mem_fn9 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const volatile )
 {
 return ( _Mem_fn9 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 _Mem_fn9 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const volatile )
 {
 return ( _Mem_fn9 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 _Mem_fn9 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const volatile )
 {
 return ( _Mem_fn9 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 _Mem_fn9 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const volatile )
 {
 return ( _Mem_fn9 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > ( _Pm ) );
 }
#line 7 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Pmf, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 class _Mem_fn10
  : public _Call_wrapper < _Callable_pmf < _Pmf, _Arg0 > >








 {
public :
 typedef _Rx result_type;

 _Mem_fn10 ( _Pmf _Fx )
  : _Call_wrapper < _Callable_pmf < _Pmf, _Arg0 > > ( _Fx )
  {
  }
 };
#line 30 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 _Mem_fn10 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ), _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) )
 {
 return ( _Mem_fn10 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ),
  _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 _Mem_fn10 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ), _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) )
 {
 return ( _Mem_fn10 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ),
  _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 _Mem_fn10 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ), _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) )
 {
 return ( _Mem_fn10 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ),
  _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 _Mem_fn10 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ), _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) )
 {
 return ( _Mem_fn10 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ),
  _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > ( _Pm ) );
 }
#line 83 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 _Mem_fn10 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const )
 {
 return ( _Mem_fn10 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 _Mem_fn10 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const )
 {
 return ( _Mem_fn10 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 _Mem_fn10 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const )
 {
 return ( _Mem_fn10 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 _Mem_fn10 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const )
 {
 return ( _Mem_fn10 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const,
  const _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > ( _Pm ) );
 }
#line 141 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 _Mem_fn10 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) volatile )
 {
 return ( _Mem_fn10 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 _Mem_fn10 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) volatile )
 {
 return ( _Mem_fn10 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 _Mem_fn10 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) volatile )
 {
 return ( _Mem_fn10 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 _Mem_fn10 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) volatile )
 {
 return ( _Mem_fn10 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) volatile,
  volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > ( _Pm ) );
 }
#line 199 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxmem_fn"
template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 _Mem_fn10 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 >
  mem_fn ( _Rx ( __thiscall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const volatile )
 {
 return ( _Mem_fn10 < _Rx, _Rx ( __thiscall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 _Mem_fn10 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 >
  mem_fn ( _Rx ( __cdecl _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const volatile )
 {
 return ( _Mem_fn10 < _Rx, _Rx ( __cdecl _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > ( _Pm ) );
 }

template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 _Mem_fn10 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 >
  mem_fn ( _Rx ( __stdcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const volatile )
 {
 return ( _Mem_fn10 < _Rx, _Rx ( __stdcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > ( _Pm ) );
 }


template < class _Rx,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 _Mem_fn10 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 >
  mem_fn ( _Rx ( __fastcall _Arg0 :: * _Pm ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const volatile )
 {
 return ( _Mem_fn10 < _Rx, _Rx ( __fastcall _Arg0 :: * ) ( _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 ) const volatile,
  const volatile _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > ( _Pm ) );
 }
#line 903 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\functional"
typedef int _Unutterable; 
#line 923 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\functional"
class bad_function_call : public exception { 



public: explicit bad_function_call(const char * = 0) 
{ 
} 

virtual const char *what() const throw() 
{ 
return "bad function call"; 
} 
}; 

extern __declspec( noreturn ) void __cdecl _Xfunc(); 


template<class _Tx> struct _Get_function_impl; 
#line 9 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxfunction"
template < class _Rx >
 class _Impl_base0
 {
public :
 virtual _Impl_base0 * _Copy ( void * = 0 ) = 0;
 virtual _Rx _Do_call ( ) = 0;
 virtual const type_info & _Target_type ( ) const = 0;
 virtual void _Delete_this ( bool ) = 0;

 const void * _Target ( const type_info & _Info ) const
  {
  return ( _Target_type ( ) == _Info ? _Get ( ) : 0 );
  }

 virtual ~ _Impl_base0 ( )
  {
  }

private :
 virtual const void * _Get ( ) const = 0;
 };


template < class _Callable,
 class _Rx,
 class _Alloc >
 class _Impl0
  : public _Impl_base0 < _Rx >
 {
public :
 typedef _Impl0 _Myty;
 typedef typename _Alloc :: template rebind < _Myty > :: other _Myalty;

 _Impl0 ( typename _Callable :: _MyTy & _Val,
  _Myalty _Ax = _Myalty ( ) )
  : _Callee ( _Val ), _Myal ( _Ax )
  {
  }

 virtual ~ _Impl0 ( )
  {
  }

 virtual _Impl_base0 < _Rx > * _Copy ( void * _Where = 0 )
  {
  if ( _Where == 0 )
   _Where = _Myal . allocate ( 1 );
  new ( _Where ) _Impl0 ( * this );
  return ( ( _Impl_base0 < _Rx > * ) _Where );
  }

 _Rx _Do_call ( )
  {
  return ( _Callee . template _ApplyX < _Rx > ( ) );
  }

 const type_info & _Target_type ( ) const
  {
  return ( typeid ( typename _Callable :: _MyTy ) );
  }

private :
 const void * _Get ( ) const
  {
  return ( & _Callee . _Get ( ) );
  }

 virtual void _Delete_this ( bool _Deallocate )
  {
  _Myalty _Al = _Myal;
  _Al . destroy ( this );
  if ( _Deallocate )
   _Al . deallocate ( this, 1 );
  }

 _Callable _Callee;
 _Myalty _Myal;
 };


template < class _Ret >
 class _Function_impl0








 {
 typedef _Function_impl0 < _Ret > _Myt;
 typedef _Impl_base0 < _Ret > _Ptrt;

public :
 typedef _Ret result_type;

 _Ret operator ( ) ( ) const
  {
  if ( _Impl == 0 )
   _Xfunc ( );
  return ( _Impl -> _Do_call ( ) );
  }

 bool _Empty ( ) const
  {
  return ( _Impl == 0 );
  }

protected :
 void _Reset ( )
  {
  _Set ( 0 );
  }

 void _Reset ( const _Myt & _Right )
  {
  if ( _Right . _Impl == 0 )
   _Set ( 0 );
  else if ( _Right . _Local ( ) )
   _Set ( _Right . _Impl -> _Copy ( ( void * ) & _Space ) );
  else
   _Set ( _Right . _Impl -> _Copy ( ) );
  }

 template < class _Fret,
  class _Alloc >
  void _Reset ( _Fret ( * const _Val ) ( ), _Alloc _Ax )
  {
  typedef _Callable_fun < _Fret ( * const ) ( ) > _MyWrapper;
  typedef _Impl0 < _MyWrapper, _Ret, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fty,
  class _Alloc >
  void _Reset ( _Fty _Val, _Alloc _Ax )
  {
  typedef _Callable_obj < _Fty > _MyWrapper;
  typedef _Impl0 < _MyWrapper, _Ret, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }




























































































































 void _Tidy ( )
  {
  if ( _Impl != 0 )
   {
   _Impl -> _Delete_this ( ! _Local ( ) );
   _Impl = 0;
   }
  }

 void _Swap ( _Myt & _Right )
  {
  if ( this == & _Right )
   {
   return;
   }

  if ( _Local ( ) )
   {
   if ( _Right . _Local ( ) )
    {
    _Myt _Temp;
    _Temp . _Reset ( * this );
    _Tidy ( );
    _Reset ( _Right );
    _Right . _Tidy ( );
    _Right . _Reset ( _Temp );
    _Temp . _Tidy ( );
    }
   else
    {
    _Ptrt * _Temp = _Right . _Impl;
    _Right . _Reset ( * this );
    _Tidy ( );
    _Set ( _Temp );
    }
   }
  else
   {
   if ( _Right . _Local ( ) )
    {
    _Ptrt * _Temp = _Impl;
    _Reset ( _Right );
    _Right . _Tidy ( );
    _Right . _Set ( _Temp );
    }
   else
    {
    :: std :: swap ( _Impl, _Right . _Impl );
    }
   }
  }

 const type_info & _Target_type ( ) const
  {
  return ( _Impl ? _Impl -> _Target_type ( ) : typeid ( void ) );
  }

 const void * _Target ( const type_info & _Info ) const
  {
  return ( _Impl ? _Impl -> _Target ( _Info ) : 0 );
  }

private :
 void _Set ( _Ptrt * _Ptr )
  {
  _Impl = _Ptr;
  }

 bool _Local ( ) const
  {
  return ( ( void * ) _Impl == ( void * ) & _Space );
  }

 typedef void ( * _Pfnty ) ( );
 union
  {
  _Pfnty _Pfn [ 3 ];
  void * _Pobj [ 3 ];
  long double _Ldbl;
  } _Space;

 _Ptrt * _Impl;
 };
#line 385 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxfunction"
template<class _Ret> 
struct _Get_function_impl< _Ret (void)>  { 

typedef _Function_impl0< _Ret>  _Type; 
}; 
#line 9 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxfunction"
template < class _Rx, class _Arg0 >
 class _Impl_base1
 {
public :
 virtual _Impl_base1 * _Copy ( void * = 0 ) = 0;
 virtual _Rx _Do_call ( _Arg0 _Ax0 ) = 0;
 virtual const type_info & _Target_type ( ) const = 0;
 virtual void _Delete_this ( bool ) = 0;

 const void * _Target ( const type_info & _Info ) const
  {
  return ( _Target_type ( ) == _Info ? _Get ( ) : 0 );
  }

 virtual ~ _Impl_base1 ( )
  {
  }

private :
 virtual const void * _Get ( ) const = 0;
 };


template < class _Callable,
 class _Rx, class _Arg0,
 class _Alloc >
 class _Impl1
  : public _Impl_base1 < _Rx, _Arg0 >
 {
public :
 typedef _Impl1 _Myty;
 typedef typename _Alloc :: template rebind < _Myty > :: other _Myalty;

 _Impl1 ( typename _Callable :: _MyTy & _Val,
  _Myalty _Ax = _Myalty ( ) )
  : _Callee ( _Val ), _Myal ( _Ax )
  {
  }

 virtual ~ _Impl1 ( )
  {
  }

 virtual _Impl_base1 < _Rx, _Arg0 > * _Copy ( void * _Where = 0 )
  {
  if ( _Where == 0 )
   _Where = _Myal . allocate ( 1 );
  new ( _Where ) _Impl1 ( * this );
  return ( ( _Impl_base1 < _Rx, _Arg0 > * ) _Where );
  }

 _Rx _Do_call ( _Arg0 _Ax0 )
  {
  return ( _Callee . template _ApplyX < _Rx > ( _Ax0 ) );
  }

 const type_info & _Target_type ( ) const
  {
  return ( typeid ( typename _Callable :: _MyTy ) );
  }

private :
 const void * _Get ( ) const
  {
  return ( & _Callee . _Get ( ) );
  }

 virtual void _Delete_this ( bool _Deallocate )
  {
  _Myalty _Al = _Myal;
  _Al . destroy ( this );
  if ( _Deallocate )
   _Al . deallocate ( this, 1 );
  }

 _Callable _Callee;
 _Myalty _Myal;
 };


template < class _Ret, class _Arg0 >
 class _Function_impl1


  : public :: std :: unary_function < _Arg0, _Ret >





 {
 typedef _Function_impl1 < _Ret, _Arg0 > _Myt;
 typedef _Impl_base1 < _Ret, _Arg0 > _Ptrt;

public :
 typedef _Ret result_type;

 _Ret operator ( ) ( _Arg0 _Ax0 ) const
  {
  if ( _Impl == 0 )
   _Xfunc ( );
  return ( _Impl -> _Do_call ( _Ax0 ) );
  }

 bool _Empty ( ) const
  {
  return ( _Impl == 0 );
  }

protected :
 void _Reset ( )
  {
  _Set ( 0 );
  }

 void _Reset ( const _Myt & _Right )
  {
  if ( _Right . _Impl == 0 )
   _Set ( 0 );
  else if ( _Right . _Local ( ) )
   _Set ( _Right . _Impl -> _Copy ( ( void * ) & _Space ) );
  else
   _Set ( _Right . _Impl -> _Copy ( ) );
  }

 template < class _Fret, class _Farg0,
  class _Alloc >
  void _Reset ( _Fret ( * const _Val ) ( _Farg0 ), _Alloc _Ax )
  {
  typedef _Callable_fun < _Fret ( * const ) ( _Farg0 ) > _MyWrapper;
  typedef _Impl1 < _MyWrapper, _Ret, _Arg0, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fty,
  class _Alloc >
  void _Reset ( _Fty _Val, _Alloc _Ax )
  {
  typedef _Callable_obj < _Fty > _MyWrapper;
  typedef _Impl1 < _MyWrapper, _Ret, _Arg0, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }


 template < class _Fret,
  class _Farg0,
  class _Alloc >
  void _Reset ( _Fret _Farg0 :: * const _Val, _Alloc _Ax )
  {
  typedef _Callable_pmd < _Fret _Farg0 :: * const, _Arg0 > _MyWrapper;
  typedef _Impl1 < _MyWrapper, _Ret, _Arg0, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }



 template < class _Fret, class _Farg0,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( ), _Alloc _Ax )
  {
  typedef _Callable_pmf < _Fret ( _Farg0 :: * const ) ( ), _Arg0 >
   _MyWrapper;
  typedef _Impl1 < _MyWrapper, _Ret, _Arg0, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fret, class _Farg0,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( ) const,
   _Alloc _Ax )
  {
  typedef _Callable_pmf <
   _Fret ( _Farg0 :: * const ) ( ) const, _Arg0 > _MyWrapper;
  typedef _Impl1 < _MyWrapper, _Ret, _Arg0, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fret, class _Farg0,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( ) volatile,
   _Alloc _Ax )
  {
  typedef _Callable_pmf <
   _Fret ( _Farg0 :: * const ) ( ) volatile, _Arg0 > _MyWrapper;
  typedef _Impl1 < _MyWrapper, _Ret, _Arg0, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fret, class _Farg0,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( ) const volatile,
   _Alloc _Ax )
  {
  typedef _Callable_pmf <
   _Fret ( _Farg0 :: * const ) ( ) const volatile, _Arg0 >
   _MyWrapper;
  typedef _Impl1 < _MyWrapper, _Ret, _Arg0, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }


 void _Tidy ( )
  {
  if ( _Impl != 0 )
   {
   _Impl -> _Delete_this ( ! _Local ( ) );
   _Impl = 0;
   }
  }

 void _Swap ( _Myt & _Right )
  {
  if ( this == & _Right )
   {
   return;
   }

  if ( _Local ( ) )
   {
   if ( _Right . _Local ( ) )
    {
    _Myt _Temp;
    _Temp . _Reset ( * this );
    _Tidy ( );
    _Reset ( _Right );
    _Right . _Tidy ( );
    _Right . _Reset ( _Temp );
    _Temp . _Tidy ( );
    }
   else
    {
    _Ptrt * _Temp = _Right . _Impl;
    _Right . _Reset ( * this );
    _Tidy ( );
    _Set ( _Temp );
    }
   }
  else
   {
   if ( _Right . _Local ( ) )
    {
    _Ptrt * _Temp = _Impl;
    _Reset ( _Right );
    _Right . _Tidy ( );
    _Right . _Set ( _Temp );
    }
   else
    {
    :: std :: swap ( _Impl, _Right . _Impl );
    }
   }
  }

 const type_info & _Target_type ( ) const
  {
  return ( _Impl ? _Impl -> _Target_type ( ) : typeid ( void ) );
  }

 const void * _Target ( const type_info & _Info ) const
  {
  return ( _Impl ? _Impl -> _Target ( _Info ) : 0 );
  }

private :
 void _Set ( _Ptrt * _Ptr )
  {
  _Impl = _Ptr;
  }

 bool _Local ( ) const
  {
  return ( ( void * ) _Impl == ( void * ) & _Space );
  }

 typedef void ( * _Pfnty ) ( );
 union
  {
  _Pfnty _Pfn [ 3 ];
  void * _Pobj [ 3 ];
  long double _Ldbl;
  } _Space;

 _Ptrt * _Impl;
 };
#line 385 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxfunction"
template<class _Ret, class _Arg0> 
struct _Get_function_impl< _Ret (_Arg0)>  { 

typedef _Function_impl1< _Ret, _Arg0>  _Type; 
}; 
#line 9 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxfunction"
template < class _Rx, class _Arg0, class _Arg1 >
 class _Impl_base2
 {
public :
 virtual _Impl_base2 * _Copy ( void * = 0 ) = 0;
 virtual _Rx _Do_call ( _Arg0 _Ax0, _Arg1 _Ax1 ) = 0;
 virtual const type_info & _Target_type ( ) const = 0;
 virtual void _Delete_this ( bool ) = 0;

 const void * _Target ( const type_info & _Info ) const
  {
  return ( _Target_type ( ) == _Info ? _Get ( ) : 0 );
  }

 virtual ~ _Impl_base2 ( )
  {
  }

private :
 virtual const void * _Get ( ) const = 0;
 };


template < class _Callable,
 class _Rx, class _Arg0, class _Arg1,
 class _Alloc >
 class _Impl2
  : public _Impl_base2 < _Rx, _Arg0, _Arg1 >
 {
public :
 typedef _Impl2 _Myty;
 typedef typename _Alloc :: template rebind < _Myty > :: other _Myalty;

 _Impl2 ( typename _Callable :: _MyTy & _Val,
  _Myalty _Ax = _Myalty ( ) )
  : _Callee ( _Val ), _Myal ( _Ax )
  {
  }

 virtual ~ _Impl2 ( )
  {
  }

 virtual _Impl_base2 < _Rx, _Arg0, _Arg1 > * _Copy ( void * _Where = 0 )
  {
  if ( _Where == 0 )
   _Where = _Myal . allocate ( 1 );
  new ( _Where ) _Impl2 ( * this );
  return ( ( _Impl_base2 < _Rx, _Arg0, _Arg1 > * ) _Where );
  }

 _Rx _Do_call ( _Arg0 _Ax0, _Arg1 _Ax1 )
  {
  return ( _Callee . template _ApplyX < _Rx > ( _Ax0, _Ax1 ) );
  }

 const type_info & _Target_type ( ) const
  {
  return ( typeid ( typename _Callable :: _MyTy ) );
  }

private :
 const void * _Get ( ) const
  {
  return ( & _Callee . _Get ( ) );
  }

 virtual void _Delete_this ( bool _Deallocate )
  {
  _Myalty _Al = _Myal;
  _Al . destroy ( this );
  if ( _Deallocate )
   _Al . deallocate ( this, 1 );
  }

 _Callable _Callee;
 _Myalty _Myal;
 };


template < class _Ret, class _Arg0, class _Arg1 >
 class _Function_impl2





  : public :: std :: binary_function < _Arg0, _Arg1, _Ret >


 {
 typedef _Function_impl2 < _Ret, _Arg0, _Arg1 > _Myt;
 typedef _Impl_base2 < _Ret, _Arg0, _Arg1 > _Ptrt;

public :
 typedef _Ret result_type;

 _Ret operator ( ) ( _Arg0 _Ax0, _Arg1 _Ax1 ) const
  {
  if ( _Impl == 0 )
   _Xfunc ( );
  return ( _Impl -> _Do_call ( _Ax0, _Ax1 ) );
  }

 bool _Empty ( ) const
  {
  return ( _Impl == 0 );
  }

protected :
 void _Reset ( )
  {
  _Set ( 0 );
  }

 void _Reset ( const _Myt & _Right )
  {
  if ( _Right . _Impl == 0 )
   _Set ( 0 );
  else if ( _Right . _Local ( ) )
   _Set ( _Right . _Impl -> _Copy ( ( void * ) & _Space ) );
  else
   _Set ( _Right . _Impl -> _Copy ( ) );
  }

 template < class _Fret, class _Farg0, class _Farg1,
  class _Alloc >
  void _Reset ( _Fret ( * const _Val ) ( _Farg0, _Farg1 ), _Alloc _Ax )
  {
  typedef _Callable_fun < _Fret ( * const ) ( _Farg0, _Farg1 ) > _MyWrapper;
  typedef _Impl2 < _MyWrapper, _Ret, _Arg0, _Arg1, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fty,
  class _Alloc >
  void _Reset ( _Fty _Val, _Alloc _Ax )
  {
  typedef _Callable_obj < _Fty > _MyWrapper;
  typedef _Impl2 < _MyWrapper, _Ret, _Arg0, _Arg1, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }



























 template < class _Fret, class _Farg0, class _Farg1,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1 ), _Alloc _Ax )
  {
  typedef _Callable_pmf < _Fret ( _Farg0 :: * const ) ( _Farg1 ), _Arg0 >
   _MyWrapper;
  typedef _Impl2 < _MyWrapper, _Ret, _Arg0, _Arg1, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fret, class _Farg0, class _Farg1,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1 ) const,
   _Alloc _Ax )
  {
  typedef _Callable_pmf <
   _Fret ( _Farg0 :: * const ) ( _Farg1 ) const, _Arg0 > _MyWrapper;
  typedef _Impl2 < _MyWrapper, _Ret, _Arg0, _Arg1, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fret, class _Farg0, class _Farg1,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1 ) volatile,
   _Alloc _Ax )
  {
  typedef _Callable_pmf <
   _Fret ( _Farg0 :: * const ) ( _Farg1 ) volatile, _Arg0 > _MyWrapper;
  typedef _Impl2 < _MyWrapper, _Ret, _Arg0, _Arg1, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fret, class _Farg0, class _Farg1,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1 ) const volatile,
   _Alloc _Ax )
  {
  typedef _Callable_pmf <
   _Fret ( _Farg0 :: * const ) ( _Farg1 ) const volatile, _Arg0 >
   _MyWrapper;
  typedef _Impl2 < _MyWrapper, _Ret, _Arg0, _Arg1, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }


 void _Tidy ( )
  {
  if ( _Impl != 0 )
   {
   _Impl -> _Delete_this ( ! _Local ( ) );
   _Impl = 0;
   }
  }

 void _Swap ( _Myt & _Right )
  {
  if ( this == & _Right )
   {
   return;
   }

  if ( _Local ( ) )
   {
   if ( _Right . _Local ( ) )
    {
    _Myt _Temp;
    _Temp . _Reset ( * this );
    _Tidy ( );
    _Reset ( _Right );
    _Right . _Tidy ( );
    _Right . _Reset ( _Temp );
    _Temp . _Tidy ( );
    }
   else
    {
    _Ptrt * _Temp = _Right . _Impl;
    _Right . _Reset ( * this );
    _Tidy ( );
    _Set ( _Temp );
    }
   }
  else
   {
   if ( _Right . _Local ( ) )
    {
    _Ptrt * _Temp = _Impl;
    _Reset ( _Right );
    _Right . _Tidy ( );
    _Right . _Set ( _Temp );
    }
   else
    {
    :: std :: swap ( _Impl, _Right . _Impl );
    }
   }
  }

 const type_info & _Target_type ( ) const
  {
  return ( _Impl ? _Impl -> _Target_type ( ) : typeid ( void ) );
  }

 const void * _Target ( const type_info & _Info ) const
  {
  return ( _Impl ? _Impl -> _Target ( _Info ) : 0 );
  }

private :
 void _Set ( _Ptrt * _Ptr )
  {
  _Impl = _Ptr;
  }

 bool _Local ( ) const
  {
  return ( ( void * ) _Impl == ( void * ) & _Space );
  }

 typedef void ( * _Pfnty ) ( );
 union
  {
  _Pfnty _Pfn [ 3 ];
  void * _Pobj [ 3 ];
  long double _Ldbl;
  } _Space;

 _Ptrt * _Impl;
 };
#line 385 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxfunction"
template<class _Ret, class _Arg0, class _Arg1> 
struct _Get_function_impl< _Ret (_Arg0, _Arg1)>  { 

typedef _Function_impl2< _Ret, _Arg0, _Arg1>  _Type; 
}; 
#line 9 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxfunction"
template < class _Rx, class _Arg0, class _Arg1, class _Arg2 >
 class _Impl_base3
 {
public :
 virtual _Impl_base3 * _Copy ( void * = 0 ) = 0;
 virtual _Rx _Do_call ( _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2 ) = 0;
 virtual const type_info & _Target_type ( ) const = 0;
 virtual void _Delete_this ( bool ) = 0;

 const void * _Target ( const type_info & _Info ) const
  {
  return ( _Target_type ( ) == _Info ? _Get ( ) : 0 );
  }

 virtual ~ _Impl_base3 ( )
  {
  }

private :
 virtual const void * _Get ( ) const = 0;
 };


template < class _Callable,
 class _Rx, class _Arg0, class _Arg1, class _Arg2,
 class _Alloc >
 class _Impl3
  : public _Impl_base3 < _Rx, _Arg0, _Arg1, _Arg2 >
 {
public :
 typedef _Impl3 _Myty;
 typedef typename _Alloc :: template rebind < _Myty > :: other _Myalty;

 _Impl3 ( typename _Callable :: _MyTy & _Val,
  _Myalty _Ax = _Myalty ( ) )
  : _Callee ( _Val ), _Myal ( _Ax )
  {
  }

 virtual ~ _Impl3 ( )
  {
  }

 virtual _Impl_base3 < _Rx, _Arg0, _Arg1, _Arg2 > * _Copy ( void * _Where = 0 )
  {
  if ( _Where == 0 )
   _Where = _Myal . allocate ( 1 );
  new ( _Where ) _Impl3 ( * this );
  return ( ( _Impl_base3 < _Rx, _Arg0, _Arg1, _Arg2 > * ) _Where );
  }

 _Rx _Do_call ( _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2 )
  {
  return ( _Callee . template _ApplyX < _Rx > ( _Ax0, _Ax1, _Ax2 ) );
  }

 const type_info & _Target_type ( ) const
  {
  return ( typeid ( typename _Callable :: _MyTy ) );
  }

private :
 const void * _Get ( ) const
  {
  return ( & _Callee . _Get ( ) );
  }

 virtual void _Delete_this ( bool _Deallocate )
  {
  _Myalty _Al = _Myal;
  _Al . destroy ( this );
  if ( _Deallocate )
   _Al . deallocate ( this, 1 );
  }

 _Callable _Callee;
 _Myalty _Myal;
 };


template < class _Ret, class _Arg0, class _Arg1, class _Arg2 >
 class _Function_impl3








 {
 typedef _Function_impl3 < _Ret, _Arg0, _Arg1, _Arg2 > _Myt;
 typedef _Impl_base3 < _Ret, _Arg0, _Arg1, _Arg2 > _Ptrt;

public :
 typedef _Ret result_type;

 _Ret operator ( ) ( _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2 ) const
  {
  if ( _Impl == 0 )
   _Xfunc ( );
  return ( _Impl -> _Do_call ( _Ax0, _Ax1, _Ax2 ) );
  }

 bool _Empty ( ) const
  {
  return ( _Impl == 0 );
  }

protected :
 void _Reset ( )
  {
  _Set ( 0 );
  }

 void _Reset ( const _Myt & _Right )
  {
  if ( _Right . _Impl == 0 )
   _Set ( 0 );
  else if ( _Right . _Local ( ) )
   _Set ( _Right . _Impl -> _Copy ( ( void * ) & _Space ) );
  else
   _Set ( _Right . _Impl -> _Copy ( ) );
  }

 template < class _Fret, class _Farg0, class _Farg1, class _Farg2,
  class _Alloc >
  void _Reset ( _Fret ( * const _Val ) ( _Farg0, _Farg1, _Farg2 ), _Alloc _Ax )
  {
  typedef _Callable_fun < _Fret ( * const ) ( _Farg0, _Farg1, _Farg2 ) > _MyWrapper;
  typedef _Impl3 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fty,
  class _Alloc >
  void _Reset ( _Fty _Val, _Alloc _Ax )
  {
  typedef _Callable_obj < _Fty > _MyWrapper;
  typedef _Impl3 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }



























 template < class _Fret, class _Farg0, class _Farg1, class _Farg2,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2 ), _Alloc _Ax )
  {
  typedef _Callable_pmf < _Fret ( _Farg0 :: * const ) ( _Farg1, _Farg2 ), _Arg0 >
   _MyWrapper;
  typedef _Impl3 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fret, class _Farg0, class _Farg1, class _Farg2,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2 ) const,
   _Alloc _Ax )
  {
  typedef _Callable_pmf <
   _Fret ( _Farg0 :: * const ) ( _Farg1, _Farg2 ) const, _Arg0 > _MyWrapper;
  typedef _Impl3 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fret, class _Farg0, class _Farg1, class _Farg2,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2 ) volatile,
   _Alloc _Ax )
  {
  typedef _Callable_pmf <
   _Fret ( _Farg0 :: * const ) ( _Farg1, _Farg2 ) volatile, _Arg0 > _MyWrapper;
  typedef _Impl3 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fret, class _Farg0, class _Farg1, class _Farg2,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2 ) const volatile,
   _Alloc _Ax )
  {
  typedef _Callable_pmf <
   _Fret ( _Farg0 :: * const ) ( _Farg1, _Farg2 ) const volatile, _Arg0 >
   _MyWrapper;
  typedef _Impl3 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }


 void _Tidy ( )
  {
  if ( _Impl != 0 )
   {
   _Impl -> _Delete_this ( ! _Local ( ) );
   _Impl = 0;
   }
  }

 void _Swap ( _Myt & _Right )
  {
  if ( this == & _Right )
   {
   return;
   }

  if ( _Local ( ) )
   {
   if ( _Right . _Local ( ) )
    {
    _Myt _Temp;
    _Temp . _Reset ( * this );
    _Tidy ( );
    _Reset ( _Right );
    _Right . _Tidy ( );
    _Right . _Reset ( _Temp );
    _Temp . _Tidy ( );
    }
   else
    {
    _Ptrt * _Temp = _Right . _Impl;
    _Right . _Reset ( * this );
    _Tidy ( );
    _Set ( _Temp );
    }
   }
  else
   {
   if ( _Right . _Local ( ) )
    {
    _Ptrt * _Temp = _Impl;
    _Reset ( _Right );
    _Right . _Tidy ( );
    _Right . _Set ( _Temp );
    }
   else
    {
    :: std :: swap ( _Impl, _Right . _Impl );
    }
   }
  }

 const type_info & _Target_type ( ) const
  {
  return ( _Impl ? _Impl -> _Target_type ( ) : typeid ( void ) );
  }

 const void * _Target ( const type_info & _Info ) const
  {
  return ( _Impl ? _Impl -> _Target ( _Info ) : 0 );
  }

private :
 void _Set ( _Ptrt * _Ptr )
  {
  _Impl = _Ptr;
  }

 bool _Local ( ) const
  {
  return ( ( void * ) _Impl == ( void * ) & _Space );
  }

 typedef void ( * _Pfnty ) ( );
 union
  {
  _Pfnty _Pfn [ 3 ];
  void * _Pobj [ 3 ];
  long double _Ldbl;
  } _Space;

 _Ptrt * _Impl;
 };
#line 385 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxfunction"
template<class _Ret, class _Arg0, class _Arg1, class _Arg2> 
struct _Get_function_impl< _Ret (_Arg0, _Arg1, _Arg2)>  { 

typedef _Function_impl3< _Ret, _Arg0, _Arg1, _Arg2>  _Type; 
}; 
#line 9 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxfunction"
template < class _Rx, class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 class _Impl_base4
 {
public :
 virtual _Impl_base4 * _Copy ( void * = 0 ) = 0;
 virtual _Rx _Do_call ( _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 ) = 0;
 virtual const type_info & _Target_type ( ) const = 0;
 virtual void _Delete_this ( bool ) = 0;

 const void * _Target ( const type_info & _Info ) const
  {
  return ( _Target_type ( ) == _Info ? _Get ( ) : 0 );
  }

 virtual ~ _Impl_base4 ( )
  {
  }

private :
 virtual const void * _Get ( ) const = 0;
 };


template < class _Callable,
 class _Rx, class _Arg0, class _Arg1, class _Arg2, class _Arg3,
 class _Alloc >
 class _Impl4
  : public _Impl_base4 < _Rx, _Arg0, _Arg1, _Arg2, _Arg3 >
 {
public :
 typedef _Impl4 _Myty;
 typedef typename _Alloc :: template rebind < _Myty > :: other _Myalty;

 _Impl4 ( typename _Callable :: _MyTy & _Val,
  _Myalty _Ax = _Myalty ( ) )
  : _Callee ( _Val ), _Myal ( _Ax )
  {
  }

 virtual ~ _Impl4 ( )
  {
  }

 virtual _Impl_base4 < _Rx, _Arg0, _Arg1, _Arg2, _Arg3 > * _Copy ( void * _Where = 0 )
  {
  if ( _Where == 0 )
   _Where = _Myal . allocate ( 1 );
  new ( _Where ) _Impl4 ( * this );
  return ( ( _Impl_base4 < _Rx, _Arg0, _Arg1, _Arg2, _Arg3 > * ) _Where );
  }

 _Rx _Do_call ( _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 )
  {
  return ( _Callee . template _ApplyX < _Rx > ( _Ax0, _Ax1, _Ax2, _Ax3 ) );
  }

 const type_info & _Target_type ( ) const
  {
  return ( typeid ( typename _Callable :: _MyTy ) );
  }

private :
 const void * _Get ( ) const
  {
  return ( & _Callee . _Get ( ) );
  }

 virtual void _Delete_this ( bool _Deallocate )
  {
  _Myalty _Al = _Myal;
  _Al . destroy ( this );
  if ( _Deallocate )
   _Al . deallocate ( this, 1 );
  }

 _Callable _Callee;
 _Myalty _Myal;
 };


template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 class _Function_impl4








 {
 typedef _Function_impl4 < _Ret, _Arg0, _Arg1, _Arg2, _Arg3 > _Myt;
 typedef _Impl_base4 < _Ret, _Arg0, _Arg1, _Arg2, _Arg3 > _Ptrt;

public :
 typedef _Ret result_type;

 _Ret operator ( ) ( _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 ) const
  {
  if ( _Impl == 0 )
   _Xfunc ( );
  return ( _Impl -> _Do_call ( _Ax0, _Ax1, _Ax2, _Ax3 ) );
  }

 bool _Empty ( ) const
  {
  return ( _Impl == 0 );
  }

protected :
 void _Reset ( )
  {
  _Set ( 0 );
  }

 void _Reset ( const _Myt & _Right )
  {
  if ( _Right . _Impl == 0 )
   _Set ( 0 );
  else if ( _Right . _Local ( ) )
   _Set ( _Right . _Impl -> _Copy ( ( void * ) & _Space ) );
  else
   _Set ( _Right . _Impl -> _Copy ( ) );
  }

 template < class _Fret, class _Farg0, class _Farg1, class _Farg2, class _Farg3,
  class _Alloc >
  void _Reset ( _Fret ( * const _Val ) ( _Farg0, _Farg1, _Farg2, _Farg3 ), _Alloc _Ax )
  {
  typedef _Callable_fun < _Fret ( * const ) ( _Farg0, _Farg1, _Farg2, _Farg3 ) > _MyWrapper;
  typedef _Impl4 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fty,
  class _Alloc >
  void _Reset ( _Fty _Val, _Alloc _Ax )
  {
  typedef _Callable_obj < _Fty > _MyWrapper;
  typedef _Impl4 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }



























 template < class _Fret, class _Farg0, class _Farg1, class _Farg2, class _Farg3,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3 ), _Alloc _Ax )
  {
  typedef _Callable_pmf < _Fret ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3 ), _Arg0 >
   _MyWrapper;
  typedef _Impl4 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fret, class _Farg0, class _Farg1, class _Farg2, class _Farg3,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3 ) const,
   _Alloc _Ax )
  {
  typedef _Callable_pmf <
   _Fret ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3 ) const, _Arg0 > _MyWrapper;
  typedef _Impl4 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fret, class _Farg0, class _Farg1, class _Farg2, class _Farg3,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3 ) volatile,
   _Alloc _Ax )
  {
  typedef _Callable_pmf <
   _Fret ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3 ) volatile, _Arg0 > _MyWrapper;
  typedef _Impl4 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fret, class _Farg0, class _Farg1, class _Farg2, class _Farg3,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3 ) const volatile,
   _Alloc _Ax )
  {
  typedef _Callable_pmf <
   _Fret ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3 ) const volatile, _Arg0 >
   _MyWrapper;
  typedef _Impl4 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }


 void _Tidy ( )
  {
  if ( _Impl != 0 )
   {
   _Impl -> _Delete_this ( ! _Local ( ) );
   _Impl = 0;
   }
  }

 void _Swap ( _Myt & _Right )
  {
  if ( this == & _Right )
   {
   return;
   }

  if ( _Local ( ) )
   {
   if ( _Right . _Local ( ) )
    {
    _Myt _Temp;
    _Temp . _Reset ( * this );
    _Tidy ( );
    _Reset ( _Right );
    _Right . _Tidy ( );
    _Right . _Reset ( _Temp );
    _Temp . _Tidy ( );
    }
   else
    {
    _Ptrt * _Temp = _Right . _Impl;
    _Right . _Reset ( * this );
    _Tidy ( );
    _Set ( _Temp );
    }
   }
  else
   {
   if ( _Right . _Local ( ) )
    {
    _Ptrt * _Temp = _Impl;
    _Reset ( _Right );
    _Right . _Tidy ( );
    _Right . _Set ( _Temp );
    }
   else
    {
    :: std :: swap ( _Impl, _Right . _Impl );
    }
   }
  }

 const type_info & _Target_type ( ) const
  {
  return ( _Impl ? _Impl -> _Target_type ( ) : typeid ( void ) );
  }

 const void * _Target ( const type_info & _Info ) const
  {
  return ( _Impl ? _Impl -> _Target ( _Info ) : 0 );
  }

private :
 void _Set ( _Ptrt * _Ptr )
  {
  _Impl = _Ptr;
  }

 bool _Local ( ) const
  {
  return ( ( void * ) _Impl == ( void * ) & _Space );
  }

 typedef void ( * _Pfnty ) ( );
 union
  {
  _Pfnty _Pfn [ 3 ];
  void * _Pobj [ 3 ];
  long double _Ldbl;
  } _Space;

 _Ptrt * _Impl;
 };
#line 385 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxfunction"
template<class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3> 
struct _Get_function_impl< _Ret (_Arg0, _Arg1, _Arg2, _Arg3)>  { 

typedef _Function_impl4< _Ret, _Arg0, _Arg1, _Arg2, _Arg3>  _Type; 
}; 
#line 9 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxfunction"
template < class _Rx, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 class _Impl_base5
 {
public :
 virtual _Impl_base5 * _Copy ( void * = 0 ) = 0;
 virtual _Rx _Do_call ( _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 ) = 0;
 virtual const type_info & _Target_type ( ) const = 0;
 virtual void _Delete_this ( bool ) = 0;

 const void * _Target ( const type_info & _Info ) const
  {
  return ( _Target_type ( ) == _Info ? _Get ( ) : 0 );
  }

 virtual ~ _Impl_base5 ( )
  {
  }

private :
 virtual const void * _Get ( ) const = 0;
 };


template < class _Callable,
 class _Rx, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4,
 class _Alloc >
 class _Impl5
  : public _Impl_base5 < _Rx, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 >
 {
public :
 typedef _Impl5 _Myty;
 typedef typename _Alloc :: template rebind < _Myty > :: other _Myalty;

 _Impl5 ( typename _Callable :: _MyTy & _Val,
  _Myalty _Ax = _Myalty ( ) )
  : _Callee ( _Val ), _Myal ( _Ax )
  {
  }

 virtual ~ _Impl5 ( )
  {
  }

 virtual _Impl_base5 < _Rx, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > * _Copy ( void * _Where = 0 )
  {
  if ( _Where == 0 )
   _Where = _Myal . allocate ( 1 );
  new ( _Where ) _Impl5 ( * this );
  return ( ( _Impl_base5 < _Rx, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > * ) _Where );
  }

 _Rx _Do_call ( _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 )
  {
  return ( _Callee . template _ApplyX < _Rx > ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4 ) );
  }

 const type_info & _Target_type ( ) const
  {
  return ( typeid ( typename _Callable :: _MyTy ) );
  }

private :
 const void * _Get ( ) const
  {
  return ( & _Callee . _Get ( ) );
  }

 virtual void _Delete_this ( bool _Deallocate )
  {
  _Myalty _Al = _Myal;
  _Al . destroy ( this );
  if ( _Deallocate )
   _Al . deallocate ( this, 1 );
  }

 _Callable _Callee;
 _Myalty _Myal;
 };


template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 class _Function_impl5








 {
 typedef _Function_impl5 < _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > _Myt;
 typedef _Impl_base5 < _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > _Ptrt;

public :
 typedef _Ret result_type;

 _Ret operator ( ) ( _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 ) const
  {
  if ( _Impl == 0 )
   _Xfunc ( );
  return ( _Impl -> _Do_call ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4 ) );
  }

 bool _Empty ( ) const
  {
  return ( _Impl == 0 );
  }

protected :
 void _Reset ( )
  {
  _Set ( 0 );
  }

 void _Reset ( const _Myt & _Right )
  {
  if ( _Right . _Impl == 0 )
   _Set ( 0 );
  else if ( _Right . _Local ( ) )
   _Set ( _Right . _Impl -> _Copy ( ( void * ) & _Space ) );
  else
   _Set ( _Right . _Impl -> _Copy ( ) );
  }

 template < class _Fret, class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4,
  class _Alloc >
  void _Reset ( _Fret ( * const _Val ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4 ), _Alloc _Ax )
  {
  typedef _Callable_fun < _Fret ( * const ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4 ) > _MyWrapper;
  typedef _Impl5 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fty,
  class _Alloc >
  void _Reset ( _Fty _Val, _Alloc _Ax )
  {
  typedef _Callable_obj < _Fty > _MyWrapper;
  typedef _Impl5 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }



























 template < class _Fret, class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4 ), _Alloc _Ax )
  {
  typedef _Callable_pmf < _Fret ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4 ), _Arg0 >
   _MyWrapper;
  typedef _Impl5 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fret, class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4 ) const,
   _Alloc _Ax )
  {
  typedef _Callable_pmf <
   _Fret ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4 ) const, _Arg0 > _MyWrapper;
  typedef _Impl5 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fret, class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4 ) volatile,
   _Alloc _Ax )
  {
  typedef _Callable_pmf <
   _Fret ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4 ) volatile, _Arg0 > _MyWrapper;
  typedef _Impl5 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fret, class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4 ) const volatile,
   _Alloc _Ax )
  {
  typedef _Callable_pmf <
   _Fret ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4 ) const volatile, _Arg0 >
   _MyWrapper;
  typedef _Impl5 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }


 void _Tidy ( )
  {
  if ( _Impl != 0 )
   {
   _Impl -> _Delete_this ( ! _Local ( ) );
   _Impl = 0;
   }
  }

 void _Swap ( _Myt & _Right )
  {
  if ( this == & _Right )
   {
   return;
   }

  if ( _Local ( ) )
   {
   if ( _Right . _Local ( ) )
    {
    _Myt _Temp;
    _Temp . _Reset ( * this );
    _Tidy ( );
    _Reset ( _Right );
    _Right . _Tidy ( );
    _Right . _Reset ( _Temp );
    _Temp . _Tidy ( );
    }
   else
    {
    _Ptrt * _Temp = _Right . _Impl;
    _Right . _Reset ( * this );
    _Tidy ( );
    _Set ( _Temp );
    }
   }
  else
   {
   if ( _Right . _Local ( ) )
    {
    _Ptrt * _Temp = _Impl;
    _Reset ( _Right );
    _Right . _Tidy ( );
    _Right . _Set ( _Temp );
    }
   else
    {
    :: std :: swap ( _Impl, _Right . _Impl );
    }
   }
  }

 const type_info & _Target_type ( ) const
  {
  return ( _Impl ? _Impl -> _Target_type ( ) : typeid ( void ) );
  }

 const void * _Target ( const type_info & _Info ) const
  {
  return ( _Impl ? _Impl -> _Target ( _Info ) : 0 );
  }

private :
 void _Set ( _Ptrt * _Ptr )
  {
  _Impl = _Ptr;
  }

 bool _Local ( ) const
  {
  return ( ( void * ) _Impl == ( void * ) & _Space );
  }

 typedef void ( * _Pfnty ) ( );
 union
  {
  _Pfnty _Pfn [ 3 ];
  void * _Pobj [ 3 ];
  long double _Ldbl;
  } _Space;

 _Ptrt * _Impl;
 };
#line 385 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxfunction"
template<class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4> 
struct _Get_function_impl< _Ret (_Arg0, _Arg1, _Arg2, _Arg3, _Arg4)>  { 

typedef _Function_impl5< _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4>  _Type; 
}; 
#line 9 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxfunction"
template < class _Rx, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 class _Impl_base6
 {
public :
 virtual _Impl_base6 * _Copy ( void * = 0 ) = 0;
 virtual _Rx _Do_call ( _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 ) = 0;
 virtual const type_info & _Target_type ( ) const = 0;
 virtual void _Delete_this ( bool ) = 0;

 const void * _Target ( const type_info & _Info ) const
  {
  return ( _Target_type ( ) == _Info ? _Get ( ) : 0 );
  }

 virtual ~ _Impl_base6 ( )
  {
  }

private :
 virtual const void * _Get ( ) const = 0;
 };


template < class _Callable,
 class _Rx, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5,
 class _Alloc >
 class _Impl6
  : public _Impl_base6 < _Rx, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 >
 {
public :
 typedef _Impl6 _Myty;
 typedef typename _Alloc :: template rebind < _Myty > :: other _Myalty;

 _Impl6 ( typename _Callable :: _MyTy & _Val,
  _Myalty _Ax = _Myalty ( ) )
  : _Callee ( _Val ), _Myal ( _Ax )
  {
  }

 virtual ~ _Impl6 ( )
  {
  }

 virtual _Impl_base6 < _Rx, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > * _Copy ( void * _Where = 0 )
  {
  if ( _Where == 0 )
   _Where = _Myal . allocate ( 1 );
  new ( _Where ) _Impl6 ( * this );
  return ( ( _Impl_base6 < _Rx, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > * ) _Where );
  }

 _Rx _Do_call ( _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 )
  {
  return ( _Callee . template _ApplyX < _Rx > ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 ) );
  }

 const type_info & _Target_type ( ) const
  {
  return ( typeid ( typename _Callable :: _MyTy ) );
  }

private :
 const void * _Get ( ) const
  {
  return ( & _Callee . _Get ( ) );
  }

 virtual void _Delete_this ( bool _Deallocate )
  {
  _Myalty _Al = _Myal;
  _Al . destroy ( this );
  if ( _Deallocate )
   _Al . deallocate ( this, 1 );
  }

 _Callable _Callee;
 _Myalty _Myal;
 };


template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 class _Function_impl6








 {
 typedef _Function_impl6 < _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > _Myt;
 typedef _Impl_base6 < _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > _Ptrt;

public :
 typedef _Ret result_type;

 _Ret operator ( ) ( _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 ) const
  {
  if ( _Impl == 0 )
   _Xfunc ( );
  return ( _Impl -> _Do_call ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 ) );
  }

 bool _Empty ( ) const
  {
  return ( _Impl == 0 );
  }

protected :
 void _Reset ( )
  {
  _Set ( 0 );
  }

 void _Reset ( const _Myt & _Right )
  {
  if ( _Right . _Impl == 0 )
   _Set ( 0 );
  else if ( _Right . _Local ( ) )
   _Set ( _Right . _Impl -> _Copy ( ( void * ) & _Space ) );
  else
   _Set ( _Right . _Impl -> _Copy ( ) );
  }

 template < class _Fret, class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5,
  class _Alloc >
  void _Reset ( _Fret ( * const _Val ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ), _Alloc _Ax )
  {
  typedef _Callable_fun < _Fret ( * const ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ) > _MyWrapper;
  typedef _Impl6 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fty,
  class _Alloc >
  void _Reset ( _Fty _Val, _Alloc _Ax )
  {
  typedef _Callable_obj < _Fty > _MyWrapper;
  typedef _Impl6 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }



























 template < class _Fret, class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ), _Alloc _Ax )
  {
  typedef _Callable_pmf < _Fret ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ), _Arg0 >
   _MyWrapper;
  typedef _Impl6 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fret, class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ) const,
   _Alloc _Ax )
  {
  typedef _Callable_pmf <
   _Fret ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ) const, _Arg0 > _MyWrapper;
  typedef _Impl6 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fret, class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ) volatile,
   _Alloc _Ax )
  {
  typedef _Callable_pmf <
   _Fret ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ) volatile, _Arg0 > _MyWrapper;
  typedef _Impl6 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fret, class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ) const volatile,
   _Alloc _Ax )
  {
  typedef _Callable_pmf <
   _Fret ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ) const volatile, _Arg0 >
   _MyWrapper;
  typedef _Impl6 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }


 void _Tidy ( )
  {
  if ( _Impl != 0 )
   {
   _Impl -> _Delete_this ( ! _Local ( ) );
   _Impl = 0;
   }
  }

 void _Swap ( _Myt & _Right )
  {
  if ( this == & _Right )
   {
   return;
   }

  if ( _Local ( ) )
   {
   if ( _Right . _Local ( ) )
    {
    _Myt _Temp;
    _Temp . _Reset ( * this );
    _Tidy ( );
    _Reset ( _Right );
    _Right . _Tidy ( );
    _Right . _Reset ( _Temp );
    _Temp . _Tidy ( );
    }
   else
    {
    _Ptrt * _Temp = _Right . _Impl;
    _Right . _Reset ( * this );
    _Tidy ( );
    _Set ( _Temp );
    }
   }
  else
   {
   if ( _Right . _Local ( ) )
    {
    _Ptrt * _Temp = _Impl;
    _Reset ( _Right );
    _Right . _Tidy ( );
    _Right . _Set ( _Temp );
    }
   else
    {
    :: std :: swap ( _Impl, _Right . _Impl );
    }
   }
  }

 const type_info & _Target_type ( ) const
  {
  return ( _Impl ? _Impl -> _Target_type ( ) : typeid ( void ) );
  }

 const void * _Target ( const type_info & _Info ) const
  {
  return ( _Impl ? _Impl -> _Target ( _Info ) : 0 );
  }

private :
 void _Set ( _Ptrt * _Ptr )
  {
  _Impl = _Ptr;
  }

 bool _Local ( ) const
  {
  return ( ( void * ) _Impl == ( void * ) & _Space );
  }

 typedef void ( * _Pfnty ) ( );
 union
  {
  _Pfnty _Pfn [ 3 ];
  void * _Pobj [ 3 ];
  long double _Ldbl;
  } _Space;

 _Ptrt * _Impl;
 };
#line 385 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxfunction"
template<class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5> 
struct _Get_function_impl< _Ret (_Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5)>  { 

typedef _Function_impl6< _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5>  _Type; 
}; 
#line 9 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxfunction"
template < class _Rx, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 class _Impl_base7
 {
public :
 virtual _Impl_base7 * _Copy ( void * = 0 ) = 0;
 virtual _Rx _Do_call ( _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 ) = 0;
 virtual const type_info & _Target_type ( ) const = 0;
 virtual void _Delete_this ( bool ) = 0;

 const void * _Target ( const type_info & _Info ) const
  {
  return ( _Target_type ( ) == _Info ? _Get ( ) : 0 );
  }

 virtual ~ _Impl_base7 ( )
  {
  }

private :
 virtual const void * _Get ( ) const = 0;
 };


template < class _Callable,
 class _Rx, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6,
 class _Alloc >
 class _Impl7
  : public _Impl_base7 < _Rx, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 >
 {
public :
 typedef _Impl7 _Myty;
 typedef typename _Alloc :: template rebind < _Myty > :: other _Myalty;

 _Impl7 ( typename _Callable :: _MyTy & _Val,
  _Myalty _Ax = _Myalty ( ) )
  : _Callee ( _Val ), _Myal ( _Ax )
  {
  }

 virtual ~ _Impl7 ( )
  {
  }

 virtual _Impl_base7 < _Rx, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > * _Copy ( void * _Where = 0 )
  {
  if ( _Where == 0 )
   _Where = _Myal . allocate ( 1 );
  new ( _Where ) _Impl7 ( * this );
  return ( ( _Impl_base7 < _Rx, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > * ) _Where );
  }

 _Rx _Do_call ( _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 )
  {
  return ( _Callee . template _ApplyX < _Rx > ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 ) );
  }

 const type_info & _Target_type ( ) const
  {
  return ( typeid ( typename _Callable :: _MyTy ) );
  }

private :
 const void * _Get ( ) const
  {
  return ( & _Callee . _Get ( ) );
  }

 virtual void _Delete_this ( bool _Deallocate )
  {
  _Myalty _Al = _Myal;
  _Al . destroy ( this );
  if ( _Deallocate )
   _Al . deallocate ( this, 1 );
  }

 _Callable _Callee;
 _Myalty _Myal;
 };


template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 class _Function_impl7








 {
 typedef _Function_impl7 < _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > _Myt;
 typedef _Impl_base7 < _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > _Ptrt;

public :
 typedef _Ret result_type;

 _Ret operator ( ) ( _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 ) const
  {
  if ( _Impl == 0 )
   _Xfunc ( );
  return ( _Impl -> _Do_call ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 ) );
  }

 bool _Empty ( ) const
  {
  return ( _Impl == 0 );
  }

protected :
 void _Reset ( )
  {
  _Set ( 0 );
  }

 void _Reset ( const _Myt & _Right )
  {
  if ( _Right . _Impl == 0 )
   _Set ( 0 );
  else if ( _Right . _Local ( ) )
   _Set ( _Right . _Impl -> _Copy ( ( void * ) & _Space ) );
  else
   _Set ( _Right . _Impl -> _Copy ( ) );
  }

 template < class _Fret, class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6,
  class _Alloc >
  void _Reset ( _Fret ( * const _Val ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ), _Alloc _Ax )
  {
  typedef _Callable_fun < _Fret ( * const ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ) > _MyWrapper;
  typedef _Impl7 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fty,
  class _Alloc >
  void _Reset ( _Fty _Val, _Alloc _Ax )
  {
  typedef _Callable_obj < _Fty > _MyWrapper;
  typedef _Impl7 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }



























 template < class _Fret, class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ), _Alloc _Ax )
  {
  typedef _Callable_pmf < _Fret ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ), _Arg0 >
   _MyWrapper;
  typedef _Impl7 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fret, class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ) const,
   _Alloc _Ax )
  {
  typedef _Callable_pmf <
   _Fret ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ) const, _Arg0 > _MyWrapper;
  typedef _Impl7 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fret, class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ) volatile,
   _Alloc _Ax )
  {
  typedef _Callable_pmf <
   _Fret ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ) volatile, _Arg0 > _MyWrapper;
  typedef _Impl7 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fret, class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ) const volatile,
   _Alloc _Ax )
  {
  typedef _Callable_pmf <
   _Fret ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ) const volatile, _Arg0 >
   _MyWrapper;
  typedef _Impl7 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }


 void _Tidy ( )
  {
  if ( _Impl != 0 )
   {
   _Impl -> _Delete_this ( ! _Local ( ) );
   _Impl = 0;
   }
  }

 void _Swap ( _Myt & _Right )
  {
  if ( this == & _Right )
   {
   return;
   }

  if ( _Local ( ) )
   {
   if ( _Right . _Local ( ) )
    {
    _Myt _Temp;
    _Temp . _Reset ( * this );
    _Tidy ( );
    _Reset ( _Right );
    _Right . _Tidy ( );
    _Right . _Reset ( _Temp );
    _Temp . _Tidy ( );
    }
   else
    {
    _Ptrt * _Temp = _Right . _Impl;
    _Right . _Reset ( * this );
    _Tidy ( );
    _Set ( _Temp );
    }
   }
  else
   {
   if ( _Right . _Local ( ) )
    {
    _Ptrt * _Temp = _Impl;
    _Reset ( _Right );
    _Right . _Tidy ( );
    _Right . _Set ( _Temp );
    }
   else
    {
    :: std :: swap ( _Impl, _Right . _Impl );
    }
   }
  }

 const type_info & _Target_type ( ) const
  {
  return ( _Impl ? _Impl -> _Target_type ( ) : typeid ( void ) );
  }

 const void * _Target ( const type_info & _Info ) const
  {
  return ( _Impl ? _Impl -> _Target ( _Info ) : 0 );
  }

private :
 void _Set ( _Ptrt * _Ptr )
  {
  _Impl = _Ptr;
  }

 bool _Local ( ) const
  {
  return ( ( void * ) _Impl == ( void * ) & _Space );
  }

 typedef void ( * _Pfnty ) ( );
 union
  {
  _Pfnty _Pfn [ 3 ];
  void * _Pobj [ 3 ];
  long double _Ldbl;
  } _Space;

 _Ptrt * _Impl;
 };
#line 385 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxfunction"
template<class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6> 
struct _Get_function_impl< _Ret (_Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6)>  { 

typedef _Function_impl7< _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6>  _Type; 
}; 
#line 9 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxfunction"
template < class _Rx, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 class _Impl_base8
 {
public :
 virtual _Impl_base8 * _Copy ( void * = 0 ) = 0;
 virtual _Rx _Do_call ( _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 ) = 0;
 virtual const type_info & _Target_type ( ) const = 0;
 virtual void _Delete_this ( bool ) = 0;

 const void * _Target ( const type_info & _Info ) const
  {
  return ( _Target_type ( ) == _Info ? _Get ( ) : 0 );
  }

 virtual ~ _Impl_base8 ( )
  {
  }

private :
 virtual const void * _Get ( ) const = 0;
 };


template < class _Callable,
 class _Rx, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7,
 class _Alloc >
 class _Impl8
  : public _Impl_base8 < _Rx, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 >
 {
public :
 typedef _Impl8 _Myty;
 typedef typename _Alloc :: template rebind < _Myty > :: other _Myalty;

 _Impl8 ( typename _Callable :: _MyTy & _Val,
  _Myalty _Ax = _Myalty ( ) )
  : _Callee ( _Val ), _Myal ( _Ax )
  {
  }

 virtual ~ _Impl8 ( )
  {
  }

 virtual _Impl_base8 < _Rx, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > * _Copy ( void * _Where = 0 )
  {
  if ( _Where == 0 )
   _Where = _Myal . allocate ( 1 );
  new ( _Where ) _Impl8 ( * this );
  return ( ( _Impl_base8 < _Rx, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > * ) _Where );
  }

 _Rx _Do_call ( _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 )
  {
  return ( _Callee . template _ApplyX < _Rx > ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 ) );
  }

 const type_info & _Target_type ( ) const
  {
  return ( typeid ( typename _Callable :: _MyTy ) );
  }

private :
 const void * _Get ( ) const
  {
  return ( & _Callee . _Get ( ) );
  }

 virtual void _Delete_this ( bool _Deallocate )
  {
  _Myalty _Al = _Myal;
  _Al . destroy ( this );
  if ( _Deallocate )
   _Al . deallocate ( this, 1 );
  }

 _Callable _Callee;
 _Myalty _Myal;
 };


template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 class _Function_impl8








 {
 typedef _Function_impl8 < _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > _Myt;
 typedef _Impl_base8 < _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > _Ptrt;

public :
 typedef _Ret result_type;

 _Ret operator ( ) ( _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 ) const
  {
  if ( _Impl == 0 )
   _Xfunc ( );
  return ( _Impl -> _Do_call ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 ) );
  }

 bool _Empty ( ) const
  {
  return ( _Impl == 0 );
  }

protected :
 void _Reset ( )
  {
  _Set ( 0 );
  }

 void _Reset ( const _Myt & _Right )
  {
  if ( _Right . _Impl == 0 )
   _Set ( 0 );
  else if ( _Right . _Local ( ) )
   _Set ( _Right . _Impl -> _Copy ( ( void * ) & _Space ) );
  else
   _Set ( _Right . _Impl -> _Copy ( ) );
  }

 template < class _Fret, class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7,
  class _Alloc >
  void _Reset ( _Fret ( * const _Val ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ), _Alloc _Ax )
  {
  typedef _Callable_fun < _Fret ( * const ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ) > _MyWrapper;
  typedef _Impl8 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fty,
  class _Alloc >
  void _Reset ( _Fty _Val, _Alloc _Ax )
  {
  typedef _Callable_obj < _Fty > _MyWrapper;
  typedef _Impl8 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }



























 template < class _Fret, class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ), _Alloc _Ax )
  {
  typedef _Callable_pmf < _Fret ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ), _Arg0 >
   _MyWrapper;
  typedef _Impl8 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fret, class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ) const,
   _Alloc _Ax )
  {
  typedef _Callable_pmf <
   _Fret ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ) const, _Arg0 > _MyWrapper;
  typedef _Impl8 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fret, class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ) volatile,
   _Alloc _Ax )
  {
  typedef _Callable_pmf <
   _Fret ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ) volatile, _Arg0 > _MyWrapper;
  typedef _Impl8 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fret, class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ) const volatile,
   _Alloc _Ax )
  {
  typedef _Callable_pmf <
   _Fret ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ) const volatile, _Arg0 >
   _MyWrapper;
  typedef _Impl8 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }


 void _Tidy ( )
  {
  if ( _Impl != 0 )
   {
   _Impl -> _Delete_this ( ! _Local ( ) );
   _Impl = 0;
   }
  }

 void _Swap ( _Myt & _Right )
  {
  if ( this == & _Right )
   {
   return;
   }

  if ( _Local ( ) )
   {
   if ( _Right . _Local ( ) )
    {
    _Myt _Temp;
    _Temp . _Reset ( * this );
    _Tidy ( );
    _Reset ( _Right );
    _Right . _Tidy ( );
    _Right . _Reset ( _Temp );
    _Temp . _Tidy ( );
    }
   else
    {
    _Ptrt * _Temp = _Right . _Impl;
    _Right . _Reset ( * this );
    _Tidy ( );
    _Set ( _Temp );
    }
   }
  else
   {
   if ( _Right . _Local ( ) )
    {
    _Ptrt * _Temp = _Impl;
    _Reset ( _Right );
    _Right . _Tidy ( );
    _Right . _Set ( _Temp );
    }
   else
    {
    :: std :: swap ( _Impl, _Right . _Impl );
    }
   }
  }

 const type_info & _Target_type ( ) const
  {
  return ( _Impl ? _Impl -> _Target_type ( ) : typeid ( void ) );
  }

 const void * _Target ( const type_info & _Info ) const
  {
  return ( _Impl ? _Impl -> _Target ( _Info ) : 0 );
  }

private :
 void _Set ( _Ptrt * _Ptr )
  {
  _Impl = _Ptr;
  }

 bool _Local ( ) const
  {
  return ( ( void * ) _Impl == ( void * ) & _Space );
  }

 typedef void ( * _Pfnty ) ( );
 union
  {
  _Pfnty _Pfn [ 3 ];
  void * _Pobj [ 3 ];
  long double _Ldbl;
  } _Space;

 _Ptrt * _Impl;
 };
#line 385 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxfunction"
template<class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7> 
struct _Get_function_impl< _Ret (_Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7)>  { 

typedef _Function_impl8< _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7>  _Type; 
}; 
#line 9 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxfunction"
template < class _Rx, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 class _Impl_base9
 {
public :
 virtual _Impl_base9 * _Copy ( void * = 0 ) = 0;
 virtual _Rx _Do_call ( _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 ) = 0;
 virtual const type_info & _Target_type ( ) const = 0;
 virtual void _Delete_this ( bool ) = 0;

 const void * _Target ( const type_info & _Info ) const
  {
  return ( _Target_type ( ) == _Info ? _Get ( ) : 0 );
  }

 virtual ~ _Impl_base9 ( )
  {
  }

private :
 virtual const void * _Get ( ) const = 0;
 };


template < class _Callable,
 class _Rx, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8,
 class _Alloc >
 class _Impl9
  : public _Impl_base9 < _Rx, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 >
 {
public :
 typedef _Impl9 _Myty;
 typedef typename _Alloc :: template rebind < _Myty > :: other _Myalty;

 _Impl9 ( typename _Callable :: _MyTy & _Val,
  _Myalty _Ax = _Myalty ( ) )
  : _Callee ( _Val ), _Myal ( _Ax )
  {
  }

 virtual ~ _Impl9 ( )
  {
  }

 virtual _Impl_base9 < _Rx, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > * _Copy ( void * _Where = 0 )
  {
  if ( _Where == 0 )
   _Where = _Myal . allocate ( 1 );
  new ( _Where ) _Impl9 ( * this );
  return ( ( _Impl_base9 < _Rx, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > * ) _Where );
  }

 _Rx _Do_call ( _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 )
  {
  return ( _Callee . template _ApplyX < _Rx > ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 ) );
  }

 const type_info & _Target_type ( ) const
  {
  return ( typeid ( typename _Callable :: _MyTy ) );
  }

private :
 const void * _Get ( ) const
  {
  return ( & _Callee . _Get ( ) );
  }

 virtual void _Delete_this ( bool _Deallocate )
  {
  _Myalty _Al = _Myal;
  _Al . destroy ( this );
  if ( _Deallocate )
   _Al . deallocate ( this, 1 );
  }

 _Callable _Callee;
 _Myalty _Myal;
 };


template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 class _Function_impl9








 {
 typedef _Function_impl9 < _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > _Myt;
 typedef _Impl_base9 < _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > _Ptrt;

public :
 typedef _Ret result_type;

 _Ret operator ( ) ( _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 ) const
  {
  if ( _Impl == 0 )
   _Xfunc ( );
  return ( _Impl -> _Do_call ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 ) );
  }

 bool _Empty ( ) const
  {
  return ( _Impl == 0 );
  }

protected :
 void _Reset ( )
  {
  _Set ( 0 );
  }

 void _Reset ( const _Myt & _Right )
  {
  if ( _Right . _Impl == 0 )
   _Set ( 0 );
  else if ( _Right . _Local ( ) )
   _Set ( _Right . _Impl -> _Copy ( ( void * ) & _Space ) );
  else
   _Set ( _Right . _Impl -> _Copy ( ) );
  }

 template < class _Fret, class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8,
  class _Alloc >
  void _Reset ( _Fret ( * const _Val ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ), _Alloc _Ax )
  {
  typedef _Callable_fun < _Fret ( * const ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ) > _MyWrapper;
  typedef _Impl9 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fty,
  class _Alloc >
  void _Reset ( _Fty _Val, _Alloc _Ax )
  {
  typedef _Callable_obj < _Fty > _MyWrapper;
  typedef _Impl9 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }



























 template < class _Fret, class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ), _Alloc _Ax )
  {
  typedef _Callable_pmf < _Fret ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ), _Arg0 >
   _MyWrapper;
  typedef _Impl9 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fret, class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ) const,
   _Alloc _Ax )
  {
  typedef _Callable_pmf <
   _Fret ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ) const, _Arg0 > _MyWrapper;
  typedef _Impl9 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fret, class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ) volatile,
   _Alloc _Ax )
  {
  typedef _Callable_pmf <
   _Fret ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ) volatile, _Arg0 > _MyWrapper;
  typedef _Impl9 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fret, class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ) const volatile,
   _Alloc _Ax )
  {
  typedef _Callable_pmf <
   _Fret ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ) const volatile, _Arg0 >
   _MyWrapper;
  typedef _Impl9 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }


 void _Tidy ( )
  {
  if ( _Impl != 0 )
   {
   _Impl -> _Delete_this ( ! _Local ( ) );
   _Impl = 0;
   }
  }

 void _Swap ( _Myt & _Right )
  {
  if ( this == & _Right )
   {
   return;
   }

  if ( _Local ( ) )
   {
   if ( _Right . _Local ( ) )
    {
    _Myt _Temp;
    _Temp . _Reset ( * this );
    _Tidy ( );
    _Reset ( _Right );
    _Right . _Tidy ( );
    _Right . _Reset ( _Temp );
    _Temp . _Tidy ( );
    }
   else
    {
    _Ptrt * _Temp = _Right . _Impl;
    _Right . _Reset ( * this );
    _Tidy ( );
    _Set ( _Temp );
    }
   }
  else
   {
   if ( _Right . _Local ( ) )
    {
    _Ptrt * _Temp = _Impl;
    _Reset ( _Right );
    _Right . _Tidy ( );
    _Right . _Set ( _Temp );
    }
   else
    {
    :: std :: swap ( _Impl, _Right . _Impl );
    }
   }
  }

 const type_info & _Target_type ( ) const
  {
  return ( _Impl ? _Impl -> _Target_type ( ) : typeid ( void ) );
  }

 const void * _Target ( const type_info & _Info ) const
  {
  return ( _Impl ? _Impl -> _Target ( _Info ) : 0 );
  }

private :
 void _Set ( _Ptrt * _Ptr )
  {
  _Impl = _Ptr;
  }

 bool _Local ( ) const
  {
  return ( ( void * ) _Impl == ( void * ) & _Space );
  }

 typedef void ( * _Pfnty ) ( );
 union
  {
  _Pfnty _Pfn [ 3 ];
  void * _Pobj [ 3 ];
  long double _Ldbl;
  } _Space;

 _Ptrt * _Impl;
 };
#line 385 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxfunction"
template<class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8> 
struct _Get_function_impl< _Ret (_Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8)>  { 

typedef _Function_impl9< _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8>  _Type; 
}; 
#line 9 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxfunction"
template < class _Rx, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 class _Impl_base10
 {
public :
 virtual _Impl_base10 * _Copy ( void * = 0 ) = 0;
 virtual _Rx _Do_call ( _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8, _Arg9 _Ax9 ) = 0;
 virtual const type_info & _Target_type ( ) const = 0;
 virtual void _Delete_this ( bool ) = 0;

 const void * _Target ( const type_info & _Info ) const
  {
  return ( _Target_type ( ) == _Info ? _Get ( ) : 0 );
  }

 virtual ~ _Impl_base10 ( )
  {
  }

private :
 virtual const void * _Get ( ) const = 0;
 };


template < class _Callable,
 class _Rx, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9,
 class _Alloc >
 class _Impl10
  : public _Impl_base10 < _Rx, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 >
 {
public :
 typedef _Impl10 _Myty;
 typedef typename _Alloc :: template rebind < _Myty > :: other _Myalty;

 _Impl10 ( typename _Callable :: _MyTy & _Val,
  _Myalty _Ax = _Myalty ( ) )
  : _Callee ( _Val ), _Myal ( _Ax )
  {
  }

 virtual ~ _Impl10 ( )
  {
  }

 virtual _Impl_base10 < _Rx, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > * _Copy ( void * _Where = 0 )
  {
  if ( _Where == 0 )
   _Where = _Myal . allocate ( 1 );
  new ( _Where ) _Impl10 ( * this );
  return ( ( _Impl_base10 < _Rx, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > * ) _Where );
  }

 _Rx _Do_call ( _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8, _Arg9 _Ax9 )
  {
  return ( _Callee . template _ApplyX < _Rx > ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8, _Ax9 ) );
  }

 const type_info & _Target_type ( ) const
  {
  return ( typeid ( typename _Callable :: _MyTy ) );
  }

private :
 const void * _Get ( ) const
  {
  return ( & _Callee . _Get ( ) );
  }

 virtual void _Delete_this ( bool _Deallocate )
  {
  _Myalty _Al = _Myal;
  _Al . destroy ( this );
  if ( _Deallocate )
   _Al . deallocate ( this, 1 );
  }

 _Callable _Callee;
 _Myalty _Myal;
 };


template < class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 class _Function_impl10








 {
 typedef _Function_impl10 < _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > _Myt;
 typedef _Impl_base10 < _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > _Ptrt;

public :
 typedef _Ret result_type;

 _Ret operator ( ) ( _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8, _Arg9 _Ax9 ) const
  {
  if ( _Impl == 0 )
   _Xfunc ( );
  return ( _Impl -> _Do_call ( _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8, _Ax9 ) );
  }

 bool _Empty ( ) const
  {
  return ( _Impl == 0 );
  }

protected :
 void _Reset ( )
  {
  _Set ( 0 );
  }

 void _Reset ( const _Myt & _Right )
  {
  if ( _Right . _Impl == 0 )
   _Set ( 0 );
  else if ( _Right . _Local ( ) )
   _Set ( _Right . _Impl -> _Copy ( ( void * ) & _Space ) );
  else
   _Set ( _Right . _Impl -> _Copy ( ) );
  }

 template < class _Fret, class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9,
  class _Alloc >
  void _Reset ( _Fret ( * const _Val ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ), _Alloc _Ax )
  {
  typedef _Callable_fun < _Fret ( * const ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ) > _MyWrapper;
  typedef _Impl10 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fty,
  class _Alloc >
  void _Reset ( _Fty _Val, _Alloc _Ax )
  {
  typedef _Callable_obj < _Fty > _MyWrapper;
  typedef _Impl10 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }



























 template < class _Fret, class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ), _Alloc _Ax )
  {
  typedef _Callable_pmf < _Fret ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ), _Arg0 >
   _MyWrapper;
  typedef _Impl10 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fret, class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ) const,
   _Alloc _Ax )
  {
  typedef _Callable_pmf <
   _Fret ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ) const, _Arg0 > _MyWrapper;
  typedef _Impl10 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fret, class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ) volatile,
   _Alloc _Ax )
  {
  typedef _Callable_pmf <
   _Fret ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ) volatile, _Arg0 > _MyWrapper;
  typedef _Impl10 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }

 template < class _Fret, class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9,
  class _Alloc >
  void _Reset ( _Fret ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ) const volatile,
   _Alloc _Ax )
  {
  typedef _Callable_pmf <
   _Fret ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ) const volatile, _Arg0 >
   _MyWrapper;
  typedef _Impl10 < _MyWrapper, _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9, _Alloc > _Myimpl;

  if ( sizeof ( _Myimpl ) <= sizeof ( _Space ) )
   {
   new ( ( void * ) & _Space ) _Myimpl ( _Val );
   _Set ( ( _Ptrt * ) & _Space );
   }
  else
   {
   typename _Alloc :: template rebind < _Myimpl > :: other _Al = _Ax;
   _Myimpl * _Ptr = _Al . allocate ( 1 );

   new ( _Ptr ) _Myimpl ( _Val, _Al );
   _Set ( _Ptr );
   }
  }


 void _Tidy ( )
  {
  if ( _Impl != 0 )
   {
   _Impl -> _Delete_this ( ! _Local ( ) );
   _Impl = 0;
   }
  }

 void _Swap ( _Myt & _Right )
  {
  if ( this == & _Right )
   {
   return;
   }

  if ( _Local ( ) )
   {
   if ( _Right . _Local ( ) )
    {
    _Myt _Temp;
    _Temp . _Reset ( * this );
    _Tidy ( );
    _Reset ( _Right );
    _Right . _Tidy ( );
    _Right . _Reset ( _Temp );
    _Temp . _Tidy ( );
    }
   else
    {
    _Ptrt * _Temp = _Right . _Impl;
    _Right . _Reset ( * this );
    _Tidy ( );
    _Set ( _Temp );
    }
   }
  else
   {
   if ( _Right . _Local ( ) )
    {
    _Ptrt * _Temp = _Impl;
    _Reset ( _Right );
    _Right . _Tidy ( );
    _Right . _Set ( _Temp );
    }
   else
    {
    :: std :: swap ( _Impl, _Right . _Impl );
    }
   }
  }

 const type_info & _Target_type ( ) const
  {
  return ( _Impl ? _Impl -> _Target_type ( ) : typeid ( void ) );
  }

 const void * _Target ( const type_info & _Info ) const
  {
  return ( _Impl ? _Impl -> _Target ( _Info ) : 0 );
  }

private :
 void _Set ( _Ptrt * _Ptr )
  {
  _Impl = _Ptr;
  }

 bool _Local ( ) const
  {
  return ( ( void * ) _Impl == ( void * ) & _Space );
  }

 typedef void ( * _Pfnty ) ( );
 union
  {
  _Pfnty _Pfn [ 3 ];
  void * _Pobj [ 3 ];
  long double _Ldbl;
  } _Space;

 _Ptrt * _Impl;
 };
#line 385 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxfunction"
template<class _Ret, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9> 
struct _Get_function_impl< _Ret (_Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9)>  { 

typedef _Function_impl10< _Ret, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9>  _Type; 
}; 
#line 948 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\functional"
template < class _Fty >
 class function
  : public _Get_function_impl < _Fty > :: _Type
 {
public :
 typedef function < _Fty > _Myt;
 typedef typename _Get_function_impl < _Fty > :: _Type _Mybase;
 typedef std :: allocator < int > _Alty0;

 explicit function ( )
  {
  this -> _Reset ( );
  }

 function ( const _Myt & _Right )
  {
  this -> _Reset ( ( const _Mybase & ) _Right );
  }

 template < class _Fx >
  function ( _Fx _Func )
  {
  this -> _Reset ( _Func, _Alty0 ( ) );
  }

 template < class _Fx,
  class _Alloc >
  function ( _Fx _Func, _Alloc _Ax )
  {
  this -> _Reset ( _Func, _Ax );
  }

 template < class _Fx >
  function ( reference_wrapper < _Fx > _Func )
  {
  this -> _Reset ( _Func . get ( ), _Alty0 ( ) );
  }

 template < class _Fx,
  class _Alloc >
  function ( reference_wrapper < _Fx > _Func, _Alloc _Ax )
  {
  this -> _Reset ( _Func . get ( ), _Ax );
  }

 function ( _Unutterable )
  {
  this -> _Reset ( );
  }

 ~ function ( )
  {
  this -> _Tidy ( );
  }

 _Myt & operator = ( const _Myt & _Right )
  {
  if ( this != & _Right )
   {
   this -> _Tidy ( );
   this -> _Reset ( ( const _Mybase & ) _Right );
   }
  return ( * this );
  }

 template < class _Fx >
  _Myt & operator = ( _Fx _Func )
  {
  this -> _Tidy ( );
  this -> _Reset ( _Func, _Alty0 ( ) );
  return ( * this );
  }

 function & operator = ( _Unutterable )
  {
  this -> _Tidy ( );
  this -> _Reset ( );
  return ( * this );
  }

 template < class _Fx >
  _Myt & operator = ( reference_wrapper < _Fx > _Func )
  {
  this -> _Reset ( _Func . get ( ), _Alty0 ( ) );
  return ( * this );
  }

 template < class _Fx,
  class _Alloc >
  void assign ( _Fx _Func, _Alloc _Ax )
  {
  this -> _Reset ( _Func, _Ax );
  }

 template < class _Fx,
  class _Alloc >
  void assign ( reference_wrapper < _Fx > _Func, _Alloc _Ax )
  {
  this -> _Reset ( _Func . get ( ), _Ax );
  }

 void swap ( _Myt & _Right )
  {
  this -> _Swap ( _Right );
  }


 operator :: std :: _Bool_type ( ) const
  {
  return ( ! this -> _Empty ( ) ? ( & :: std :: _Bool_struct :: _Member ) : 0 );
  }

 const type_info & target_type ( ) const
  {
  return ( this -> _Target_type ( ) );
  }

 template < class _Fty2 >
  _Fty2 * target ( )
  {
  return ( ( _Fty2 * ) this -> _Target ( typeid ( _Fty2 ) ) );
  }

 template < class _Fty2 >
  const _Fty2 * target ( ) const
  {
  return ( ( const _Fty2 * ) this -> _Target ( typeid ( _Fty2 ) ) );
  }

private :

 template < class _Fty2 >
  void operator == ( const function < _Fty2 > & );
 template < class _Fty2 >
  void operator != ( const function < _Fty2 > & );
 };


template < class _Fty >
 void swap ( function < _Fty > & _Left, function < _Fty > & _Right )
 {
 _Left . swap ( _Right );
 }


template < class _Fty >
 bool operator == ( const function < _Fty > & _Other, _Unutterable )
 {
 return ( ! _Other );
 }

template < class _Fty >
 bool operator == ( _Unutterable _Npc, const function < _Fty > & _Other )
 {
 return ( operator == ( _Other, _Npc ) );
 }

template < class _Fty >
 bool operator != ( const function < _Fty > & _Other, _Unutterable _Npc )
 {
 return ( ! operator == ( _Other, _Npc ) );
 }

template < class _Fty >
 bool operator != ( _Unutterable _Npc, const function < _Fty > & _Other )
 {
 return ( ! operator == ( _Other, _Npc ) );
 }
#line 1127
template<int _Nx> 
class _Ph { 

}; 

template<class _Tx> 
struct is_placeholder { 

static const int value = 0; 
}; 

template<int _Nx> 
struct is_placeholder< _Ph< _Nx> >  { 

static const int value = _Nx; 
}; 


struct _Notforced { 

}; 

template<class _Override, class 
_Natural> 
struct _Bindret { 

typedef _Override _Type; 
}; 

template<class _Natural> 
struct _Bindret< _Notforced, _Natural>  { 

typedef _Natural _Type; 
}; 


template < class _Ret,
 class _BindN >
 class _Bind
 {
public :
 typedef typename _BindN :: _MyTy _MyTy;
 typedef _BindN _MyBind;

 _Bind ( _BindN _B0 )
  : _Bx ( _B0 )
  {
  }
















































































































































































































 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }




 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }






































































































































































































































































































































































































template < class _Carg0 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


























































































































































































template < class _Carg0 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }

































































































































































































































































































































































































template < class _Carg0, class _Carg1 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


























































































































































































template < class _Carg0, class _Carg1 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }



























































































































































































template < class _Carg0, class _Carg1 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


























































































































































































































































































































































































template < class _Carg0, class _Carg1, class _Carg2 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


























































































































































































template < class _Carg0, class _Carg1, class _Carg2 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }















































































































































































































































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }





























































































































































































































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


























































































































































































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Nil &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


























































































































































































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Nil &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _Nil_obj, _Nil_obj, _Nil_obj ) );
 }


























































































































































































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }


























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Nil &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _Nil_obj, _Nil_obj ) );
 }



























































































































































































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }


























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Nil & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _Nil_obj ) );
 }




























































































































































































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }


























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }



























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
    _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }
























































































































































































template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >


 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 ) const
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }


template < class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9 >

 typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type
  operator ( ) ( const _Carg0 & _CA0, const _Carg1 & _CA1, const _Carg2 & _CA2, const _Carg3 & _CA3, const _Carg4 & _CA4, _Carg5 & _CA5, _Carg6 & _CA6, _Carg7 & _CA7, _Carg8 & _CA8, _Carg9 & _CA9 )
 {
 typedef typename _Bindret < _Ret,
  typename _MyBind :: template _Return <
   const _Carg0 &, const _Carg1 &, const _Carg2 &, const _Carg3 &, const _Carg4 &, _Carg5 &, _Carg6 &, _Carg7 &, _Carg8 &, _Carg9 & > :: _Type > :: _Type _Rx;
 return ( _Bx . template _ApplyX < _Rx > ( _CA0, _CA1, _CA2, _CA3, _CA4, _CA5, _CA6, _CA7, _CA8, _CA9 ) );
 }




































































































































private :
 _BindN _Bx;
 };
#line 1184 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\functional"
template<class _Tx> 
struct is_bind_expression { 

static const bool value = false; 
}; 

template<class _Rx, class 
_BindN> 
struct is_bind_expression< _Bind< _Rx, _BindN> >  { 

static const bool value = true; 
}; 


template<bool _Expr, int 
_Nx> struct _Binder; 



template<> struct _Binder< true, 0>  { 

template < class _Arg,
  class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  static typename _Arg ::
   _MyBind :: template _Return < _Barg0 &, _Barg1 &, _Barg2 &, _Barg3 &, _Barg4 &, _Barg5 &, _Barg6 &, _Barg7 &, _Barg8 &, _Barg9 & > :: _Type
    _Get ( _Arg _Ax, _Barg0 & _Bx0, _Barg1 & _Bx1, _Barg2 & _Bx2, _Barg3 & _Bx3, _Barg4 & _Bx4, _Barg5 & _Bx5, _Barg6 & _Bx6, _Barg7 & _Bx7, _Barg8 & _Bx8, _Barg9 & _Bx9 )
  {
  return ( _Ax ( _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ) );
  }

template<class _Arg, class 
_Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9> 
struct _Ret { 



typedef typename _Arg::_MyBind::template _Return< _Barg0, _Barg1, _Barg2, _Barg3, _Barg4, _Barg5, _Barg6, _Barg7, _Barg8, _Barg9> ::_Type _Type; 
}; 
}; 


template<> struct _Binder< false, 0>  { 

template < class _Arg,
  class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  static _Arg & _Get ( _Arg & _Val, _Barg0 & _Bx0, _Barg1 & _Bx1, _Barg2 & _Bx2, _Barg3 & _Bx3, _Barg4 & _Bx4, _Barg5 & _Bx5, _Barg6 & _Bx6, _Barg7 & _Bx7, _Barg8 & _Bx8, _Barg9 & _Bx9 )
  {
  return ( _Val );
  }
template<class _Arg, class 
_Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9> 
struct _Ret { 

typedef _Arg &_Type; 
}; 
}; 
#line 206 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template < class _Callable >
 class _Bind0
 {
public :
 typedef _Callable _MyCallable;
 typedef typename _Callable :: _MyTy _MyTy;

 template < class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  struct _Return
  {
  typedef typename _MyCallable :: _MyTy _MyTy;
  typedef typename result_of < _MyTy ( ) > :: type _Type;
  };

 _Bind0 ( _MyTy & _Val )
  : _Callee ( _Val )
  {
  }

 template < class _Ret,
  class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  _Ret _ApplyX ( _Barg0 _Bx0, _Barg1 _Bx1, _Barg2 _Bx2, _Barg3 _Bx3, _Barg4 _Bx4, _Barg5 _Bx5, _Barg6 _Bx6, _Barg7 _Bx7, _Barg8 _Bx8, _Barg9 _Bx9 ) const
  {
  return ( _Callee . template _ApplyX < _Ret > ( ) );
  }

 _MyCallable _Callee;
 };
#line 302 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template<class _Ret, class _BindTy> 
struct _Result_of0< _Bind< _Ret, _BindTy> >  { 

typedef _Ret _Type; 
}; 

template<class _BindTy> 
struct _Result_of0< _Bind< _Notforced, _BindTy> >  { 


typedef typename _BindTy::template _Return< _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &> ::_Type _Type; 
}; 

template < class _Ret,
 class _Fty
      >
 _Bind < _Ret,
  _Bind0 < _Callable_obj < _Fty > > >
   bind ( _Fty _Val )
 {
 typedef _Bind0 < _Callable_obj < _Fty > > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val ) ) );
 }

template < class _Fty
      >
 _Bind < _Notforced,
  _Bind0 < _Callable_obj < _Fty > > >
   bind ( _Fty _Val )
 {
 typedef _Bind0 < _Callable_obj < _Fty > > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val ) ) );
 }


template < class _Ret,
 class _Rx >







 _Bind < _Ret,
  _Bind0 < _Callable_fun < _Rx ( * const ) ( ) > > >
   bind ( _Rx ( * const _Val ) ( ) )
 {
 typedef _Callable_fun < _Rx ( * const ) ( ) > _Callable;
 typedef _Bind0 < _Callable > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val ) ) );
 }
#line 356 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template < class _Rx >






 _Bind < _Notforced,
  _Bind0 < _Callable_fun < _Rx ( * const ) ( ) > > >
   bind ( _Rx ( * const _Val ) ( ) )
 {
 typedef _Callable_fun < _Rx ( * const ) ( ) > _Callable;
 typedef _Bind0 < _Callable > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val ) ) );
 }
#line 237 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template<> struct _Binder< false, 1>  { 

template < class _Arg,
  class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  static _Barg0 & _Get ( _Arg, _Barg0 & _Bx0, _Barg1 & _Bx1, _Barg2 & _Bx2, _Barg3 & _Bx3, _Barg4 & _Bx4, _Barg5 & _Bx5, _Barg6 & _Bx6, _Barg7 & _Bx7, _Barg8 & _Bx8, _Barg9 & _Bx9 )
  {
  return ( _Bx0 );
  }

template<class _Arg, class 
_Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9> 
struct _Ret { 

typedef _Barg0 _Type; 
}; 
}; 

template < class _Callable,
 class _Arg0 >
 class _Bind1
  : public _Bind0 < _Callable >
 {
public :
 typedef _Bind1 < _Callable, _Arg0 > _Self;
 typedef _Binder < is_bind_expression < _Arg0 > :: value,
  is_placeholder < _Arg0 > :: value > _Binder0;
 typedef _Arg0 _MyArg;

 template < class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  struct _Return
  {
  typedef typename _Bind0 < _Callable > :: _MyCallable
   _MyCallable;
  typedef typename _MyCallable :: _MyTy _MyTy;
  typedef typename result_of < _MyTy ( _Barg0 ) > :: type _Type;
  };

 _Bind1 ( typename _Callable :: _MyTy _Val, _Arg0 _Ax0 )
  : _Vx0 ( _Ax0 ), _Bind0 < _Callable > ( _Val )
  {
  }

 template < class _Ret,
  class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  _Ret _ApplyX ( _Barg0 & _Bx0, _Barg1 & _Bx1, _Barg2 & _Bx2, _Barg3 & _Bx3, _Barg4 & _Bx4, _Barg5 & _Bx5, _Barg6 & _Bx6, _Barg7 & _Bx7, _Barg8 & _Bx8, _Barg9 & _Bx9 ) const
  {
  return ( this -> _Callee . template _ApplyX < _Ret > ( _Self :: _Binder0 :: _Get ( this -> _Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ) ) );
  }

 template < class _Ret,
  class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  _Ret _ApplyX ( _Barg0 & _Bx0, _Barg1 & _Bx1, _Barg2 & _Bx2, _Barg3 & _Bx3, _Barg4 & _Bx4, _Barg5 & _Bx5, _Barg6 & _Bx6, _Barg7 & _Bx7, _Barg8 & _Bx8, _Barg9 & _Bx9 )
  {
  return ( this -> _Callee . template _ApplyX < _Ret > ( _Self :: _Binder0 :: _Get ( this -> _Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ) ) );
  }

 _Arg0 _Vx0;
 };


namespace placeholders { 
static _Ph< 1>  _1; 
}
#line 302 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template<class _Ret, class _BindTy, class _Arg0> 
struct _Result_of1< _Bind< _Ret, _BindTy> , _Arg0>  { 

typedef _Ret _Type; 
}; 

template<class _BindTy, class _Arg0> 
struct _Result_of1< _Bind< _Notforced, _BindTy> , _Arg0>  { 


typedef typename _BindTy::template _Return< _Arg0, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &> ::_Type _Type; 
}; 

template < class _Ret,
 class _Fty
 , class _Arg0 >
 _Bind < _Ret,
  _Bind1 < _Callable_obj < _Fty >, _Arg0 > >
   bind ( _Fty _Val, _Arg0 _Ax0 )
 {
 typedef _Bind1 < _Callable_obj < _Fty >, _Arg0 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0 ) ) );
 }

template < class _Fty
 , class _Arg0 >
 _Bind < _Notforced,
  _Bind1 < _Callable_obj < _Fty >, _Arg0 > >
   bind ( _Fty _Val, _Arg0 _Ax0 )
 {
 typedef _Bind1 < _Callable_obj < _Fty >, _Arg0 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0 ) ) );
 }
#line 341 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template < class _Ret
 , class _Farg0
 , class _Arg0,
 class _Rx >

 _Bind < _Ret,
  _Bind1 < _Callable_fun < _Rx ( * const ) ( _Farg0 ) >, _Arg0 > >
   bind ( _Rx ( * const _Val ) ( _Farg0 ), _Arg0 _Ax0 )
 {
 typedef _Callable_fun < _Rx ( * const ) ( _Farg0 ) > _Callable;
 typedef _Bind1 < _Callable, _Arg0 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0 ) ) );
 }
#line 359 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template < class _Farg0
 , class _Arg0,
 class _Rx >

 _Bind < _Notforced,
  _Bind1 < _Callable_fun < _Rx ( * const ) ( _Farg0 ) >, _Arg0 > >
   bind ( _Rx ( * const _Val ) ( _Farg0 ), _Arg0 _Ax0 )
 {
 typedef _Callable_fun < _Rx ( * const ) ( _Farg0 ) > _Callable;
 typedef _Bind1 < _Callable, _Arg0 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0 ) ) );
 }
#line 373 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template < class _Ret,
 class _Farg0,
 class _Arg0,
 class _Rx >
 _Bind < _Ret,
  _Bind1 < _Callable_pmd < _Rx _Farg0 :: * const, _Farg0 >, _Arg0 > >
   bind ( _Rx _Farg0 :: * const _Val, _Arg0 _A0 )
 {
 typedef _Callable_pmd < _Rx _Farg0 :: * const, _Farg0 > _Callable;
 typedef _Bind1 < _Callable, _Arg0 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _A0 ) ) );
 }

template < class _Farg0,
 class _Arg0,
 class _Rx >
 _Bind < _Notforced,
  _Bind1 < _Callable_pmd < _Rx _Farg0 :: * const, _Farg0 >, _Arg0 > >
   bind ( _Rx _Farg0 :: * const _Val, _Arg0 _A0 )
 {
 typedef _Callable_pmd < _Rx _Farg0 :: * const, _Farg0 > _Callable;
 typedef _Bind1 < _Callable, _Arg0 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _A0 ) ) );
 }
#line 400 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template < class _Ret,
 class _Farg0,
 class _Arg0,
 class _Rx >
 _Bind < _Ret,
  _Bind1 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( ), _Farg0 >,
   _Arg0 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( ), _Arg0 _Ax0 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( ), _Farg0 >
  _Callable;
 typedef _Bind1 < _Callable, _Arg0 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0 ) ) );
 }

template < class _Farg0,
 class _Arg0,
 class _Rx >
 _Bind < _Notforced,
  _Bind1 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( ), _Farg0 >,
   _Arg0 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( ), _Arg0 _Ax0 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( ), _Farg0 >
  _Callable;
 typedef _Bind1 < _Callable, _Arg0 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0 ) ) );
 }

template < class _Ret,
 class _Farg0,
 class _Arg0,
 class _Rx >
 _Bind < _Ret,
  _Bind1 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( ) const,
   _Farg0 >, _Arg0 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( ) const, _Arg0 _Ax0 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( ) const, _Farg0 >
  _Callable;
 typedef _Bind1 < _Callable, _Arg0 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0 ) ) );
 }

template < class _Farg0,
 class _Arg0,
 class _Rx >
 _Bind < _Notforced,
  _Bind1 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( ) const,
   _Farg0 >, _Arg0 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( ) const, _Arg0 _Ax0 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( ) const, _Farg0 >
  _Callable;
 typedef _Bind1 < _Callable, _Arg0 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0 ) ) );
 }

template < class _Ret,
 class _Farg0,
 class _Arg0,
 class _Rx >
 _Bind < _Ret,
  _Bind1 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( ) volatile,
   _Farg0 >, _Arg0 > >
  bind ( _Rx ( _Farg0 :: * const _Val ) ( ) volatile, _Arg0 _Ax0 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( ) volatile, _Farg0 >
  _Callable;
 typedef _Bind1 < _Callable, _Arg0 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0 ) ) );
 }

template < class _Farg0,
 class _Arg0,
 class _Rx >
 _Bind < _Notforced,
  _Bind1 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( ) volatile,
   _Farg0 >, _Arg0 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( ) volatile, _Arg0 _Ax0 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( ) volatile, _Farg0 >
  _Callable;
 typedef _Bind1 < _Callable, _Arg0 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0 ) ) );
 }

template < class _Ret,
 class _Farg0,
 class _Arg0,
 class _Rx >
 _Bind < _Ret,
  _Bind1 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( ) const volatile,
   _Farg0 >, _Arg0 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( )
    const volatile, _Arg0 _Ax0 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( ) const volatile,
  _Farg0 > _Callable;
 typedef _Bind1 < _Callable, _Arg0 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0 ) ) );
 }

template < class _Farg0,
 class _Arg0,
 class _Rx >
 _Bind < _Notforced,
  _Bind1 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( ) const volatile,
   _Farg0 >, _Arg0 > >
  bind ( _Rx ( _Farg0 :: * const _Val ) (
     ) const volatile, _Arg0 _Ax0 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( ) const volatile,
  _Farg0 > _Callable;
 typedef _Bind1 < _Callable, _Arg0 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0 ) ) );
 }
#line 237 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template<> struct _Binder< false, 2>  { 

template < class _Arg,
  class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  static _Barg1 & _Get ( _Arg, _Barg0 & _Bx0, _Barg1 & _Bx1, _Barg2 & _Bx2, _Barg3 & _Bx3, _Barg4 & _Bx4, _Barg5 & _Bx5, _Barg6 & _Bx6, _Barg7 & _Bx7, _Barg8 & _Bx8, _Barg9 & _Bx9 )
  {
  return ( _Bx1 );
  }

template<class _Arg, class 
_Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9> 
struct _Ret { 

typedef _Barg1 _Type; 
}; 
}; 

template < class _Callable,
 class _Arg0, class _Arg1 >
 class _Bind2
  : public _Bind1 < _Callable, _Arg0 >
 {
public :
 typedef _Bind2 < _Callable, _Arg0, _Arg1 > _Self;
 typedef _Binder < is_bind_expression < _Arg1 > :: value,
  is_placeholder < _Arg1 > :: value > _Binder1;
 typedef _Arg1 _MyArg;

 template < class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  struct _Return
  {
  typedef typename _Bind1 < _Callable, _Arg0 > :: _MyCallable
   _MyCallable;
  typedef typename _MyCallable :: _MyTy _MyTy;
  typedef typename result_of < _MyTy ( _Barg0, _Barg1 ) > :: type _Type;
  };

 _Bind2 ( typename _Callable :: _MyTy _Val, _Arg0 _Ax0, _Arg1 _Ax1 )
  : _Vx1 ( _Ax1 ), _Bind1 < _Callable, _Arg0 > ( _Val, _Ax0 )
  {
  }

 template < class _Ret,
  class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  _Ret _ApplyX ( _Barg0 & _Bx0, _Barg1 & _Bx1, _Barg2 & _Bx2, _Barg3 & _Bx3, _Barg4 & _Bx4, _Barg5 & _Bx5, _Barg6 & _Bx6, _Barg7 & _Bx7, _Barg8 & _Bx8, _Barg9 & _Bx9 ) const
  {
  return ( this -> _Callee . template _ApplyX < _Ret > ( _Self :: _Binder0 :: _Get ( this -> _Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder1 :: _Get ( this -> _Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ) ) );
  }

 template < class _Ret,
  class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  _Ret _ApplyX ( _Barg0 & _Bx0, _Barg1 & _Bx1, _Barg2 & _Bx2, _Barg3 & _Bx3, _Barg4 & _Bx4, _Barg5 & _Bx5, _Barg6 & _Bx6, _Barg7 & _Bx7, _Barg8 & _Bx8, _Barg9 & _Bx9 )
  {
  return ( this -> _Callee . template _ApplyX < _Ret > ( _Self :: _Binder0 :: _Get ( this -> _Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder1 :: _Get ( this -> _Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ) ) );
  }

 _Arg1 _Vx1;
 };


namespace placeholders { 
static _Ph< 2>  _2; 
}
#line 302 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template<class _Ret, class _BindTy, class _Arg0, class _Arg1> 
struct _Result_of2< _Bind< _Ret, _BindTy> , _Arg0, _Arg1>  { 

typedef _Ret _Type; 
}; 

template<class _BindTy, class _Arg0, class _Arg1> 
struct _Result_of2< _Bind< _Notforced, _BindTy> , _Arg0, _Arg1>  { 


typedef typename _BindTy::template _Return< _Arg0, _Arg1, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &> ::_Type _Type; 
}; 

template < class _Ret,
 class _Fty
 , class _Arg0, class _Arg1 >
 _Bind < _Ret,
  _Bind2 < _Callable_obj < _Fty >, _Arg0, _Arg1 > >
   bind ( _Fty _Val, _Arg0 _Ax0, _Arg1 _Ax1 )
 {
 typedef _Bind2 < _Callable_obj < _Fty >, _Arg0, _Arg1 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1 ) ) );
 }

template < class _Fty
 , class _Arg0, class _Arg1 >
 _Bind < _Notforced,
  _Bind2 < _Callable_obj < _Fty >, _Arg0, _Arg1 > >
   bind ( _Fty _Val, _Arg0 _Ax0, _Arg1 _Ax1 )
 {
 typedef _Bind2 < _Callable_obj < _Fty >, _Arg0, _Arg1 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1 ) ) );
 }
#line 341 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template < class _Ret
 , class _Farg0, class _Farg1
 , class _Arg0, class _Arg1,
 class _Rx >

 _Bind < _Ret,
  _Bind2 < _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1 ) >, _Arg0, _Arg1 > >
   bind ( _Rx ( * const _Val ) ( _Farg0, _Farg1 ), _Arg0 _Ax0, _Arg1 _Ax1 )
 {
 typedef _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1 ) > _Callable;
 typedef _Bind2 < _Callable, _Arg0, _Arg1 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1 ) ) );
 }
#line 359 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template < class _Farg0, class _Farg1
 , class _Arg0, class _Arg1,
 class _Rx >

 _Bind < _Notforced,
  _Bind2 < _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1 ) >, _Arg0, _Arg1 > >
   bind ( _Rx ( * const _Val ) ( _Farg0, _Farg1 ), _Arg0 _Ax0, _Arg1 _Ax1 )
 {
 typedef _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1 ) > _Callable;
 typedef _Bind2 < _Callable, _Arg0, _Arg1 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1 ) ) );
 }
#line 400 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template < class _Ret,
 class _Farg0, class _Farg1,
 class _Arg0, class _Arg1,
 class _Rx >
 _Bind < _Ret,
  _Bind2 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1 ), _Farg0 >,
   _Arg0, _Arg1 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1 ), _Arg0 _Ax0, _Arg1 _Ax1 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1 ), _Farg0 >
  _Callable;
 typedef _Bind2 < _Callable, _Arg0, _Arg1 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1 ) ) );
 }

template < class _Farg0, class _Farg1,
 class _Arg0, class _Arg1,
 class _Rx >
 _Bind < _Notforced,
  _Bind2 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1 ), _Farg0 >,
   _Arg0, _Arg1 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1 ), _Arg0 _Ax0, _Arg1 _Ax1 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1 ), _Farg0 >
  _Callable;
 typedef _Bind2 < _Callable, _Arg0, _Arg1 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1 ) ) );
 }

template < class _Ret,
 class _Farg0, class _Farg1,
 class _Arg0, class _Arg1,
 class _Rx >
 _Bind < _Ret,
  _Bind2 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1 ) const,
   _Farg0 >, _Arg0, _Arg1 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1 ) const, _Arg0 _Ax0, _Arg1 _Ax1 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1 ) const, _Farg0 >
  _Callable;
 typedef _Bind2 < _Callable, _Arg0, _Arg1 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1 ) ) );
 }

template < class _Farg0, class _Farg1,
 class _Arg0, class _Arg1,
 class _Rx >
 _Bind < _Notforced,
  _Bind2 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1 ) const,
   _Farg0 >, _Arg0, _Arg1 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1 ) const, _Arg0 _Ax0, _Arg1 _Ax1 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1 ) const, _Farg0 >
  _Callable;
 typedef _Bind2 < _Callable, _Arg0, _Arg1 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1 ) ) );
 }

template < class _Ret,
 class _Farg0, class _Farg1,
 class _Arg0, class _Arg1,
 class _Rx >
 _Bind < _Ret,
  _Bind2 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1 ) volatile,
   _Farg0 >, _Arg0, _Arg1 > >
  bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1 ) volatile, _Arg0 _Ax0, _Arg1 _Ax1 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1 ) volatile, _Farg0 >
  _Callable;
 typedef _Bind2 < _Callable, _Arg0, _Arg1 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1 ) ) );
 }

template < class _Farg0, class _Farg1,
 class _Arg0, class _Arg1,
 class _Rx >
 _Bind < _Notforced,
  _Bind2 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1 ) volatile,
   _Farg0 >, _Arg0, _Arg1 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1 ) volatile, _Arg0 _Ax0, _Arg1 _Ax1 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1 ) volatile, _Farg0 >
  _Callable;
 typedef _Bind2 < _Callable, _Arg0, _Arg1 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1 ) ) );
 }

template < class _Ret,
 class _Farg0, class _Farg1,
 class _Arg0, class _Arg1,
 class _Rx >
 _Bind < _Ret,
  _Bind2 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1 ) const volatile,
   _Farg0 >, _Arg0, _Arg1 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1 )
    const volatile, _Arg0 _Ax0, _Arg1 _Ax1 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1 ) const volatile,
  _Farg0 > _Callable;
 typedef _Bind2 < _Callable, _Arg0, _Arg1 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1 ) ) );
 }

template < class _Farg0, class _Farg1,
 class _Arg0, class _Arg1,
 class _Rx >
 _Bind < _Notforced,
  _Bind2 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1 ) const volatile,
   _Farg0 >, _Arg0, _Arg1 > >
  bind ( _Rx ( _Farg0 :: * const _Val ) (
     _Farg1 ) const volatile, _Arg0 _Ax0, _Arg1 _Ax1 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1 ) const volatile,
  _Farg0 > _Callable;
 typedef _Bind2 < _Callable, _Arg0, _Arg1 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1 ) ) );
 }
#line 237 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template<> struct _Binder< false, 3>  { 

template < class _Arg,
  class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  static _Barg2 & _Get ( _Arg, _Barg0 & _Bx0, _Barg1 & _Bx1, _Barg2 & _Bx2, _Barg3 & _Bx3, _Barg4 & _Bx4, _Barg5 & _Bx5, _Barg6 & _Bx6, _Barg7 & _Bx7, _Barg8 & _Bx8, _Barg9 & _Bx9 )
  {
  return ( _Bx2 );
  }

template<class _Arg, class 
_Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9> 
struct _Ret { 

typedef _Barg2 _Type; 
}; 
}; 

template < class _Callable,
 class _Arg0, class _Arg1, class _Arg2 >
 class _Bind3
  : public _Bind2 < _Callable, _Arg0, _Arg1 >
 {
public :
 typedef _Bind3 < _Callable, _Arg0, _Arg1, _Arg2 > _Self;
 typedef _Binder < is_bind_expression < _Arg2 > :: value,
  is_placeholder < _Arg2 > :: value > _Binder2;
 typedef _Arg2 _MyArg;

 template < class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  struct _Return
  {
  typedef typename _Bind2 < _Callable, _Arg0, _Arg1 > :: _MyCallable
   _MyCallable;
  typedef typename _MyCallable :: _MyTy _MyTy;
  typedef typename result_of < _MyTy ( _Barg0, _Barg1, _Barg2 ) > :: type _Type;
  };

 _Bind3 ( typename _Callable :: _MyTy _Val, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2 )
  : _Vx2 ( _Ax2 ), _Bind2 < _Callable, _Arg0, _Arg1 > ( _Val, _Ax0, _Ax1 )
  {
  }

 template < class _Ret,
  class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  _Ret _ApplyX ( _Barg0 & _Bx0, _Barg1 & _Bx1, _Barg2 & _Bx2, _Barg3 & _Bx3, _Barg4 & _Bx4, _Barg5 & _Bx5, _Barg6 & _Bx6, _Barg7 & _Bx7, _Barg8 & _Bx8, _Barg9 & _Bx9 ) const
  {
  return ( this -> _Callee . template _ApplyX < _Ret > ( _Self :: _Binder0 :: _Get ( this -> _Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder1 :: _Get ( this -> _Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder2 :: _Get ( this -> _Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ) ) );
  }

 template < class _Ret,
  class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  _Ret _ApplyX ( _Barg0 & _Bx0, _Barg1 & _Bx1, _Barg2 & _Bx2, _Barg3 & _Bx3, _Barg4 & _Bx4, _Barg5 & _Bx5, _Barg6 & _Bx6, _Barg7 & _Bx7, _Barg8 & _Bx8, _Barg9 & _Bx9 )
  {
  return ( this -> _Callee . template _ApplyX < _Ret > ( _Self :: _Binder0 :: _Get ( this -> _Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder1 :: _Get ( this -> _Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder2 :: _Get ( this -> _Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ) ) );
  }

 _Arg2 _Vx2;
 };


namespace placeholders { 
static _Ph< 3>  _3; 
}
#line 302 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template<class _Ret, class _BindTy, class _Arg0, class _Arg1, class _Arg2> 
struct _Result_of3< _Bind< _Ret, _BindTy> , _Arg0, _Arg1, _Arg2>  { 

typedef _Ret _Type; 
}; 

template<class _BindTy, class _Arg0, class _Arg1, class _Arg2> 
struct _Result_of3< _Bind< _Notforced, _BindTy> , _Arg0, _Arg1, _Arg2>  { 


typedef typename _BindTy::template _Return< _Arg0, _Arg1, _Arg2, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &> ::_Type _Type; 
}; 

template < class _Ret,
 class _Fty
 , class _Arg0, class _Arg1, class _Arg2 >
 _Bind < _Ret,
  _Bind3 < _Callable_obj < _Fty >, _Arg0, _Arg1, _Arg2 > >
   bind ( _Fty _Val, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2 )
 {
 typedef _Bind3 < _Callable_obj < _Fty >, _Arg0, _Arg1, _Arg2 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2 ) ) );
 }

template < class _Fty
 , class _Arg0, class _Arg1, class _Arg2 >
 _Bind < _Notforced,
  _Bind3 < _Callable_obj < _Fty >, _Arg0, _Arg1, _Arg2 > >
   bind ( _Fty _Val, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2 )
 {
 typedef _Bind3 < _Callable_obj < _Fty >, _Arg0, _Arg1, _Arg2 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2 ) ) );
 }
#line 341 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template < class _Ret
 , class _Farg0, class _Farg1, class _Farg2
 , class _Arg0, class _Arg1, class _Arg2,
 class _Rx >

 _Bind < _Ret,
  _Bind3 < _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1, _Farg2 ) >, _Arg0, _Arg1, _Arg2 > >
   bind ( _Rx ( * const _Val ) ( _Farg0, _Farg1, _Farg2 ), _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2 )
 {
 typedef _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1, _Farg2 ) > _Callable;
 typedef _Bind3 < _Callable, _Arg0, _Arg1, _Arg2 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2 ) ) );
 }
#line 359 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template < class _Farg0, class _Farg1, class _Farg2
 , class _Arg0, class _Arg1, class _Arg2,
 class _Rx >

 _Bind < _Notforced,
  _Bind3 < _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1, _Farg2 ) >, _Arg0, _Arg1, _Arg2 > >
   bind ( _Rx ( * const _Val ) ( _Farg0, _Farg1, _Farg2 ), _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2 )
 {
 typedef _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1, _Farg2 ) > _Callable;
 typedef _Bind3 < _Callable, _Arg0, _Arg1, _Arg2 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2 ) ) );
 }
#line 400 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template < class _Ret,
 class _Farg0, class _Farg1, class _Farg2,
 class _Arg0, class _Arg1, class _Arg2,
 class _Rx >
 _Bind < _Ret,
  _Bind3 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2 ), _Farg0 >,
   _Arg0, _Arg1, _Arg2 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2 ), _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2 ), _Farg0 >
  _Callable;
 typedef _Bind3 < _Callable, _Arg0, _Arg1, _Arg2 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2 ) ) );
 }

template < class _Farg0, class _Farg1, class _Farg2,
 class _Arg0, class _Arg1, class _Arg2,
 class _Rx >
 _Bind < _Notforced,
  _Bind3 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2 ), _Farg0 >,
   _Arg0, _Arg1, _Arg2 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2 ), _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2 ), _Farg0 >
  _Callable;
 typedef _Bind3 < _Callable, _Arg0, _Arg1, _Arg2 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2 ) ) );
 }

template < class _Ret,
 class _Farg0, class _Farg1, class _Farg2,
 class _Arg0, class _Arg1, class _Arg2,
 class _Rx >
 _Bind < _Ret,
  _Bind3 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2 ) const,
   _Farg0 >, _Arg0, _Arg1, _Arg2 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2 ) const, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2 ) const, _Farg0 >
  _Callable;
 typedef _Bind3 < _Callable, _Arg0, _Arg1, _Arg2 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2 ) ) );
 }

template < class _Farg0, class _Farg1, class _Farg2,
 class _Arg0, class _Arg1, class _Arg2,
 class _Rx >
 _Bind < _Notforced,
  _Bind3 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2 ) const,
   _Farg0 >, _Arg0, _Arg1, _Arg2 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2 ) const, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2 ) const, _Farg0 >
  _Callable;
 typedef _Bind3 < _Callable, _Arg0, _Arg1, _Arg2 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2 ) ) );
 }

template < class _Ret,
 class _Farg0, class _Farg1, class _Farg2,
 class _Arg0, class _Arg1, class _Arg2,
 class _Rx >
 _Bind < _Ret,
  _Bind3 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2 ) volatile,
   _Farg0 >, _Arg0, _Arg1, _Arg2 > >
  bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2 ) volatile, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2 ) volatile, _Farg0 >
  _Callable;
 typedef _Bind3 < _Callable, _Arg0, _Arg1, _Arg2 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2 ) ) );
 }

template < class _Farg0, class _Farg1, class _Farg2,
 class _Arg0, class _Arg1, class _Arg2,
 class _Rx >
 _Bind < _Notforced,
  _Bind3 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2 ) volatile,
   _Farg0 >, _Arg0, _Arg1, _Arg2 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2 ) volatile, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2 ) volatile, _Farg0 >
  _Callable;
 typedef _Bind3 < _Callable, _Arg0, _Arg1, _Arg2 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2 ) ) );
 }

template < class _Ret,
 class _Farg0, class _Farg1, class _Farg2,
 class _Arg0, class _Arg1, class _Arg2,
 class _Rx >
 _Bind < _Ret,
  _Bind3 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2 ) const volatile,
   _Farg0 >, _Arg0, _Arg1, _Arg2 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2 )
    const volatile, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2 ) const volatile,
  _Farg0 > _Callable;
 typedef _Bind3 < _Callable, _Arg0, _Arg1, _Arg2 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2 ) ) );
 }

template < class _Farg0, class _Farg1, class _Farg2,
 class _Arg0, class _Arg1, class _Arg2,
 class _Rx >
 _Bind < _Notforced,
  _Bind3 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2 ) const volatile,
   _Farg0 >, _Arg0, _Arg1, _Arg2 > >
  bind ( _Rx ( _Farg0 :: * const _Val ) (
   _Farg1, _Farg2 ) const volatile, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2 ) const volatile,
  _Farg0 > _Callable;
 typedef _Bind3 < _Callable, _Arg0, _Arg1, _Arg2 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2 ) ) );
 }
#line 237 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template<> struct _Binder< false, 4>  { 

template < class _Arg,
  class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  static _Barg3 & _Get ( _Arg, _Barg0 & _Bx0, _Barg1 & _Bx1, _Barg2 & _Bx2, _Barg3 & _Bx3, _Barg4 & _Bx4, _Barg5 & _Bx5, _Barg6 & _Bx6, _Barg7 & _Bx7, _Barg8 & _Bx8, _Barg9 & _Bx9 )
  {
  return ( _Bx3 );
  }

template<class _Arg, class 
_Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9> 
struct _Ret { 

typedef _Barg3 _Type; 
}; 
}; 

template < class _Callable,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 class _Bind4
  : public _Bind3 < _Callable, _Arg0, _Arg1, _Arg2 >
 {
public :
 typedef _Bind4 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3 > _Self;
 typedef _Binder < is_bind_expression < _Arg3 > :: value,
  is_placeholder < _Arg3 > :: value > _Binder3;
 typedef _Arg3 _MyArg;

 template < class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  struct _Return
  {
  typedef typename _Bind3 < _Callable, _Arg0, _Arg1, _Arg2 > :: _MyCallable
   _MyCallable;
  typedef typename _MyCallable :: _MyTy _MyTy;
  typedef typename result_of < _MyTy ( _Barg0, _Barg1, _Barg2, _Barg3 ) > :: type _Type;
  };

 _Bind4 ( typename _Callable :: _MyTy _Val, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 )
  : _Vx3 ( _Ax3 ), _Bind3 < _Callable, _Arg0, _Arg1, _Arg2 > ( _Val, _Ax0, _Ax1, _Ax2 )
  {
  }

 template < class _Ret,
  class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  _Ret _ApplyX ( _Barg0 & _Bx0, _Barg1 & _Bx1, _Barg2 & _Bx2, _Barg3 & _Bx3, _Barg4 & _Bx4, _Barg5 & _Bx5, _Barg6 & _Bx6, _Barg7 & _Bx7, _Barg8 & _Bx8, _Barg9 & _Bx9 ) const
  {
  return ( this -> _Callee . template _ApplyX < _Ret > ( _Self :: _Binder0 :: _Get ( this -> _Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder1 :: _Get ( this -> _Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder2 :: _Get ( this -> _Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder3 :: _Get ( this -> _Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ) ) );
  }

 template < class _Ret,
  class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  _Ret _ApplyX ( _Barg0 & _Bx0, _Barg1 & _Bx1, _Barg2 & _Bx2, _Barg3 & _Bx3, _Barg4 & _Bx4, _Barg5 & _Bx5, _Barg6 & _Bx6, _Barg7 & _Bx7, _Barg8 & _Bx8, _Barg9 & _Bx9 )
  {
  return ( this -> _Callee . template _ApplyX < _Ret > ( _Self :: _Binder0 :: _Get ( this -> _Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder1 :: _Get ( this -> _Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder2 :: _Get ( this -> _Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder3 :: _Get ( this -> _Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ) ) );
  }

 _Arg3 _Vx3;
 };


namespace placeholders { 
static _Ph< 4>  _4; 
}
#line 302 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template<class _Ret, class _BindTy, class _Arg0, class _Arg1, class _Arg2, class _Arg3> 
struct _Result_of4< _Bind< _Ret, _BindTy> , _Arg0, _Arg1, _Arg2, _Arg3>  { 

typedef _Ret _Type; 
}; 

template<class _BindTy, class _Arg0, class _Arg1, class _Arg2, class _Arg3> 
struct _Result_of4< _Bind< _Notforced, _BindTy> , _Arg0, _Arg1, _Arg2, _Arg3>  { 


typedef typename _BindTy::template _Return< _Arg0, _Arg1, _Arg2, _Arg3, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &> ::_Type _Type; 
}; 

template < class _Ret,
 class _Fty
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 _Bind < _Ret,
  _Bind4 < _Callable_obj < _Fty >, _Arg0, _Arg1, _Arg2, _Arg3 > >
   bind ( _Fty _Val, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 )
 {
 typedef _Bind4 < _Callable_obj < _Fty >, _Arg0, _Arg1, _Arg2, _Arg3 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3 ) ) );
 }

template < class _Fty
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3 >
 _Bind < _Notforced,
  _Bind4 < _Callable_obj < _Fty >, _Arg0, _Arg1, _Arg2, _Arg3 > >
   bind ( _Fty _Val, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 )
 {
 typedef _Bind4 < _Callable_obj < _Fty >, _Arg0, _Arg1, _Arg2, _Arg3 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3 ) ) );
 }
#line 341 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template < class _Ret
 , class _Farg0, class _Farg1, class _Farg2, class _Farg3
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3,
 class _Rx >

 _Bind < _Ret,
  _Bind4 < _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1, _Farg2, _Farg3 ) >, _Arg0, _Arg1, _Arg2, _Arg3 > >
   bind ( _Rx ( * const _Val ) ( _Farg0, _Farg1, _Farg2, _Farg3 ), _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 )
 {
 typedef _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1, _Farg2, _Farg3 ) > _Callable;
 typedef _Bind4 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3 ) ) );
 }
#line 359 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template < class _Farg0, class _Farg1, class _Farg2, class _Farg3
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3,
 class _Rx >

 _Bind < _Notforced,
  _Bind4 < _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1, _Farg2, _Farg3 ) >, _Arg0, _Arg1, _Arg2, _Arg3 > >
   bind ( _Rx ( * const _Val ) ( _Farg0, _Farg1, _Farg2, _Farg3 ), _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 )
 {
 typedef _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1, _Farg2, _Farg3 ) > _Callable;
 typedef _Bind4 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3 ) ) );
 }
#line 400 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template < class _Ret,
 class _Farg0, class _Farg1, class _Farg2, class _Farg3,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3,
 class _Rx >
 _Bind < _Ret,
  _Bind4 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3 ), _Farg0 >,
   _Arg0, _Arg1, _Arg2, _Arg3 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3 ), _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3 ), _Farg0 >
  _Callable;
 typedef _Bind4 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3 ) ) );
 }

template < class _Farg0, class _Farg1, class _Farg2, class _Farg3,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3,
 class _Rx >
 _Bind < _Notforced,
  _Bind4 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3 ), _Farg0 >,
   _Arg0, _Arg1, _Arg2, _Arg3 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3 ), _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3 ), _Farg0 >
  _Callable;
 typedef _Bind4 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3 ) ) );
 }

template < class _Ret,
 class _Farg0, class _Farg1, class _Farg2, class _Farg3,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3,
 class _Rx >
 _Bind < _Ret,
  _Bind4 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3 ) const,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3 ) const, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3 ) const, _Farg0 >
  _Callable;
 typedef _Bind4 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3 ) ) );
 }

template < class _Farg0, class _Farg1, class _Farg2, class _Farg3,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3,
 class _Rx >
 _Bind < _Notforced,
  _Bind4 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3 ) const,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3 ) const, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3 ) const, _Farg0 >
  _Callable;
 typedef _Bind4 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3 ) ) );
 }

template < class _Ret,
 class _Farg0, class _Farg1, class _Farg2, class _Farg3,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3,
 class _Rx >
 _Bind < _Ret,
  _Bind4 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3 ) volatile,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3 > >
  bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3 ) volatile, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3 ) volatile, _Farg0 >
  _Callable;
 typedef _Bind4 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3 ) ) );
 }

template < class _Farg0, class _Farg1, class _Farg2, class _Farg3,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3,
 class _Rx >
 _Bind < _Notforced,
  _Bind4 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3 ) volatile,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3 ) volatile, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3 ) volatile, _Farg0 >
  _Callable;
 typedef _Bind4 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3 ) ) );
 }

template < class _Ret,
 class _Farg0, class _Farg1, class _Farg2, class _Farg3,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3,
 class _Rx >
 _Bind < _Ret,
  _Bind4 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3 ) const volatile,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3 )
    const volatile, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3 ) const volatile,
  _Farg0 > _Callable;
 typedef _Bind4 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3 ) ) );
 }

template < class _Farg0, class _Farg1, class _Farg2, class _Farg3,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3,
 class _Rx >
 _Bind < _Notforced,
  _Bind4 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3 ) const volatile,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3 > >
  bind ( _Rx ( _Farg0 :: * const _Val ) (
   _Farg1, _Farg2, _Farg3 ) const volatile, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3 ) const volatile,
  _Farg0 > _Callable;
 typedef _Bind4 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3 ) ) );
 }
#line 237 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template<> struct _Binder< false, 5>  { 

template < class _Arg,
  class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  static _Barg4 & _Get ( _Arg, _Barg0 & _Bx0, _Barg1 & _Bx1, _Barg2 & _Bx2, _Barg3 & _Bx3, _Barg4 & _Bx4, _Barg5 & _Bx5, _Barg6 & _Bx6, _Barg7 & _Bx7, _Barg8 & _Bx8, _Barg9 & _Bx9 )
  {
  return ( _Bx4 );
  }

template<class _Arg, class 
_Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9> 
struct _Ret { 

typedef _Barg4 _Type; 
}; 
}; 

template < class _Callable,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 class _Bind5
  : public _Bind4 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3 >
 {
public :
 typedef _Bind5 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > _Self;
 typedef _Binder < is_bind_expression < _Arg4 > :: value,
  is_placeholder < _Arg4 > :: value > _Binder4;
 typedef _Arg4 _MyArg;

 template < class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  struct _Return
  {
  typedef typename _Bind4 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3 > :: _MyCallable
   _MyCallable;
  typedef typename _MyCallable :: _MyTy _MyTy;
  typedef typename result_of < _MyTy ( _Barg0, _Barg1, _Barg2, _Barg3, _Barg4 ) > :: type _Type;
  };

 _Bind5 ( typename _Callable :: _MyTy _Val, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 )
  : _Vx4 ( _Ax4 ), _Bind4 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3 > ( _Val, _Ax0, _Ax1, _Ax2, _Ax3 )
  {
  }

 template < class _Ret,
  class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  _Ret _ApplyX ( _Barg0 & _Bx0, _Barg1 & _Bx1, _Barg2 & _Bx2, _Barg3 & _Bx3, _Barg4 & _Bx4, _Barg5 & _Bx5, _Barg6 & _Bx6, _Barg7 & _Bx7, _Barg8 & _Bx8, _Barg9 & _Bx9 ) const
  {
  return ( this -> _Callee . template _ApplyX < _Ret > ( _Self :: _Binder0 :: _Get ( this -> _Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder1 :: _Get ( this -> _Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder2 :: _Get ( this -> _Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder3 :: _Get ( this -> _Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder4 :: _Get ( this -> _Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ) ) );
  }

 template < class _Ret,
  class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  _Ret _ApplyX ( _Barg0 & _Bx0, _Barg1 & _Bx1, _Barg2 & _Bx2, _Barg3 & _Bx3, _Barg4 & _Bx4, _Barg5 & _Bx5, _Barg6 & _Bx6, _Barg7 & _Bx7, _Barg8 & _Bx8, _Barg9 & _Bx9 )
  {
  return ( this -> _Callee . template _ApplyX < _Ret > ( _Self :: _Binder0 :: _Get ( this -> _Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder1 :: _Get ( this -> _Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder2 :: _Get ( this -> _Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder3 :: _Get ( this -> _Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder4 :: _Get ( this -> _Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ) ) );
  }

 _Arg4 _Vx4;
 };


namespace placeholders { 
static _Ph< 5>  _5; 
}
#line 302 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template<class _Ret, class _BindTy, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4> 
struct _Result_of5< _Bind< _Ret, _BindTy> , _Arg0, _Arg1, _Arg2, _Arg3, _Arg4>  { 

typedef _Ret _Type; 
}; 

template<class _BindTy, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4> 
struct _Result_of5< _Bind< _Notforced, _BindTy> , _Arg0, _Arg1, _Arg2, _Arg3, _Arg4>  { 


typedef typename _BindTy::template _Return< _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Nil &, _Nil &, _Nil &, _Nil &, _Nil &> ::_Type _Type; 
}; 

template < class _Ret,
 class _Fty
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 _Bind < _Ret,
  _Bind5 < _Callable_obj < _Fty >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > >
   bind ( _Fty _Val, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 )
 {
 typedef _Bind5 < _Callable_obj < _Fty >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4 ) ) );
 }

template < class _Fty
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4 >
 _Bind < _Notforced,
  _Bind5 < _Callable_obj < _Fty >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > >
   bind ( _Fty _Val, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 )
 {
 typedef _Bind5 < _Callable_obj < _Fty >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4 ) ) );
 }
#line 341 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template < class _Ret
 , class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4,
 class _Rx >

 _Bind < _Ret,
  _Bind5 < _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4 ) >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > >
   bind ( _Rx ( * const _Val ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4 ), _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 )
 {
 typedef _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4 ) > _Callable;
 typedef _Bind5 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4 ) ) );
 }
#line 359 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template < class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4,
 class _Rx >

 _Bind < _Notforced,
  _Bind5 < _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4 ) >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > >
   bind ( _Rx ( * const _Val ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4 ), _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 )
 {
 typedef _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4 ) > _Callable;
 typedef _Bind5 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4 ) ) );
 }
#line 400 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template < class _Ret,
 class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4,
 class _Rx >
 _Bind < _Ret,
  _Bind5 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4 ), _Farg0 >,
   _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4 ), _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4 ), _Farg0 >
  _Callable;
 typedef _Bind5 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4 ) ) );
 }

template < class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4,
 class _Rx >
 _Bind < _Notforced,
  _Bind5 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4 ), _Farg0 >,
   _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4 ), _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4 ), _Farg0 >
  _Callable;
 typedef _Bind5 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4 ) ) );
 }

template < class _Ret,
 class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4,
 class _Rx >
 _Bind < _Ret,
  _Bind5 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4 ) const,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4 ) const, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4 ) const, _Farg0 >
  _Callable;
 typedef _Bind5 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4 ) ) );
 }

template < class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4,
 class _Rx >
 _Bind < _Notforced,
  _Bind5 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4 ) const,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4 ) const, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4 ) const, _Farg0 >
  _Callable;
 typedef _Bind5 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4 ) ) );
 }

template < class _Ret,
 class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4,
 class _Rx >
 _Bind < _Ret,
  _Bind5 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4 ) volatile,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > >
  bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4 ) volatile, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4 ) volatile, _Farg0 >
  _Callable;
 typedef _Bind5 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4 ) ) );
 }

template < class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4,
 class _Rx >
 _Bind < _Notforced,
  _Bind5 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4 ) volatile,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4 ) volatile, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4 ) volatile, _Farg0 >
  _Callable;
 typedef _Bind5 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4 ) ) );
 }

template < class _Ret,
 class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4,
 class _Rx >
 _Bind < _Ret,
  _Bind5 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4 ) const volatile,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4 )
    const volatile, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4 ) const volatile,
  _Farg0 > _Callable;
 typedef _Bind5 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4 ) ) );
 }

template < class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4,
 class _Rx >
 _Bind < _Notforced,
  _Bind5 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4 ) const volatile,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > >
  bind ( _Rx ( _Farg0 :: * const _Val ) (
   _Farg1, _Farg2, _Farg3, _Farg4 ) const volatile, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4 ) const volatile,
  _Farg0 > _Callable;
 typedef _Bind5 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4 ) ) );
 }
#line 237 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template<> struct _Binder< false, 6>  { 

template < class _Arg,
  class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  static _Barg5 & _Get ( _Arg, _Barg0 & _Bx0, _Barg1 & _Bx1, _Barg2 & _Bx2, _Barg3 & _Bx3, _Barg4 & _Bx4, _Barg5 & _Bx5, _Barg6 & _Bx6, _Barg7 & _Bx7, _Barg8 & _Bx8, _Barg9 & _Bx9 )
  {
  return ( _Bx5 );
  }

template<class _Arg, class 
_Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9> 
struct _Ret { 

typedef _Barg5 _Type; 
}; 
}; 

template < class _Callable,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 class _Bind6
  : public _Bind5 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 >
 {
public :
 typedef _Bind6 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > _Self;
 typedef _Binder < is_bind_expression < _Arg5 > :: value,
  is_placeholder < _Arg5 > :: value > _Binder5;
 typedef _Arg5 _MyArg;

 template < class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  struct _Return
  {
  typedef typename _Bind5 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > :: _MyCallable
   _MyCallable;
  typedef typename _MyCallable :: _MyTy _MyTy;
  typedef typename result_of < _MyTy ( _Barg0, _Barg1, _Barg2, _Barg3, _Barg4, _Barg5 ) > :: type _Type;
  };

 _Bind6 ( typename _Callable :: _MyTy _Val, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 )
  : _Vx5 ( _Ax5 ), _Bind5 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4 > ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4 )
  {
  }

 template < class _Ret,
  class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  _Ret _ApplyX ( _Barg0 & _Bx0, _Barg1 & _Bx1, _Barg2 & _Bx2, _Barg3 & _Bx3, _Barg4 & _Bx4, _Barg5 & _Bx5, _Barg6 & _Bx6, _Barg7 & _Bx7, _Barg8 & _Bx8, _Barg9 & _Bx9 ) const
  {
  return ( this -> _Callee . template _ApplyX < _Ret > ( _Self :: _Binder0 :: _Get ( this -> _Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder1 :: _Get ( this -> _Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder2 :: _Get ( this -> _Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder3 :: _Get ( this -> _Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder4 :: _Get ( this -> _Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder5 :: _Get ( this -> _Vx5, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ) ) );
  }

 template < class _Ret,
  class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  _Ret _ApplyX ( _Barg0 & _Bx0, _Barg1 & _Bx1, _Barg2 & _Bx2, _Barg3 & _Bx3, _Barg4 & _Bx4, _Barg5 & _Bx5, _Barg6 & _Bx6, _Barg7 & _Bx7, _Barg8 & _Bx8, _Barg9 & _Bx9 )
  {
  return ( this -> _Callee . template _ApplyX < _Ret > ( _Self :: _Binder0 :: _Get ( this -> _Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder1 :: _Get ( this -> _Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder2 :: _Get ( this -> _Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder3 :: _Get ( this -> _Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder4 :: _Get ( this -> _Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder5 :: _Get ( this -> _Vx5, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ) ) );
  }

 _Arg5 _Vx5;
 };


namespace placeholders { 
static _Ph< 6>  _6; 
}
#line 302 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template<class _Ret, class _BindTy, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5> 
struct _Result_of6< _Bind< _Ret, _BindTy> , _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5>  { 

typedef _Ret _Type; 
}; 

template<class _BindTy, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5> 
struct _Result_of6< _Bind< _Notforced, _BindTy> , _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5>  { 


typedef typename _BindTy::template _Return< _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Nil &, _Nil &, _Nil &, _Nil &> ::_Type _Type; 
}; 

template < class _Ret,
 class _Fty
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 _Bind < _Ret,
  _Bind6 < _Callable_obj < _Fty >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > >
   bind ( _Fty _Val, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 )
 {
 typedef _Bind6 < _Callable_obj < _Fty >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 ) ) );
 }

template < class _Fty
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 >
 _Bind < _Notforced,
  _Bind6 < _Callable_obj < _Fty >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > >
   bind ( _Fty _Val, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 )
 {
 typedef _Bind6 < _Callable_obj < _Fty >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 ) ) );
 }
#line 341 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template < class _Ret
 , class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5,
 class _Rx >

 _Bind < _Ret,
  _Bind6 < _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ) >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > >
   bind ( _Rx ( * const _Val ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ), _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 )
 {
 typedef _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ) > _Callable;
 typedef _Bind6 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 ) ) );
 }
#line 359 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template < class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5,
 class _Rx >

 _Bind < _Notforced,
  _Bind6 < _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ) >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > >
   bind ( _Rx ( * const _Val ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ), _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 )
 {
 typedef _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ) > _Callable;
 typedef _Bind6 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 ) ) );
 }
#line 400 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template < class _Ret,
 class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5,
 class _Rx >
 _Bind < _Ret,
  _Bind6 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ), _Farg0 >,
   _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ), _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ), _Farg0 >
  _Callable;
 typedef _Bind6 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 ) ) );
 }

template < class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5,
 class _Rx >
 _Bind < _Notforced,
  _Bind6 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ), _Farg0 >,
   _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ), _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ), _Farg0 >
  _Callable;
 typedef _Bind6 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 ) ) );
 }

template < class _Ret,
 class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5,
 class _Rx >
 _Bind < _Ret,
  _Bind6 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ) const,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ) const, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ) const, _Farg0 >
  _Callable;
 typedef _Bind6 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 ) ) );
 }

template < class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5,
 class _Rx >
 _Bind < _Notforced,
  _Bind6 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ) const,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ) const, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ) const, _Farg0 >
  _Callable;
 typedef _Bind6 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 ) ) );
 }

template < class _Ret,
 class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5,
 class _Rx >
 _Bind < _Ret,
  _Bind6 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ) volatile,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > >
  bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ) volatile, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ) volatile, _Farg0 >
  _Callable;
 typedef _Bind6 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 ) ) );
 }

template < class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5,
 class _Rx >
 _Bind < _Notforced,
  _Bind6 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ) volatile,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ) volatile, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ) volatile, _Farg0 >
  _Callable;
 typedef _Bind6 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 ) ) );
 }

template < class _Ret,
 class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5,
 class _Rx >
 _Bind < _Ret,
  _Bind6 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ) const volatile,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 )
    const volatile, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ) const volatile,
  _Farg0 > _Callable;
 typedef _Bind6 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 ) ) );
 }

template < class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5,
 class _Rx >
 _Bind < _Notforced,
  _Bind6 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ) const volatile,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > >
  bind ( _Rx ( _Farg0 :: * const _Val ) (
   _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ) const volatile, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 ) const volatile,
  _Farg0 > _Callable;
 typedef _Bind6 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 ) ) );
 }
#line 237 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template<> struct _Binder< false, 7>  { 

template < class _Arg,
  class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  static _Barg6 & _Get ( _Arg, _Barg0 & _Bx0, _Barg1 & _Bx1, _Barg2 & _Bx2, _Barg3 & _Bx3, _Barg4 & _Bx4, _Barg5 & _Bx5, _Barg6 & _Bx6, _Barg7 & _Bx7, _Barg8 & _Bx8, _Barg9 & _Bx9 )
  {
  return ( _Bx6 );
  }

template<class _Arg, class 
_Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9> 
struct _Ret { 

typedef _Barg6 _Type; 
}; 
}; 

template < class _Callable,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 class _Bind7
  : public _Bind6 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 >
 {
public :
 typedef _Bind7 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > _Self;
 typedef _Binder < is_bind_expression < _Arg6 > :: value,
  is_placeholder < _Arg6 > :: value > _Binder6;
 typedef _Arg6 _MyArg;

 template < class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  struct _Return
  {
  typedef typename _Bind6 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > :: _MyCallable
   _MyCallable;
  typedef typename _MyCallable :: _MyTy _MyTy;
  typedef typename result_of < _MyTy ( _Barg0, _Barg1, _Barg2, _Barg3, _Barg4, _Barg5, _Barg6 ) > :: type _Type;
  };

 _Bind7 ( typename _Callable :: _MyTy _Val, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 )
  : _Vx6 ( _Ax6 ), _Bind6 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 > ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 )
  {
  }

 template < class _Ret,
  class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  _Ret _ApplyX ( _Barg0 & _Bx0, _Barg1 & _Bx1, _Barg2 & _Bx2, _Barg3 & _Bx3, _Barg4 & _Bx4, _Barg5 & _Bx5, _Barg6 & _Bx6, _Barg7 & _Bx7, _Barg8 & _Bx8, _Barg9 & _Bx9 ) const
  {
  return ( this -> _Callee . template _ApplyX < _Ret > ( _Self :: _Binder0 :: _Get ( this -> _Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder1 :: _Get ( this -> _Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder2 :: _Get ( this -> _Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder3 :: _Get ( this -> _Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder4 :: _Get ( this -> _Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder5 :: _Get ( this -> _Vx5, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder6 :: _Get ( this -> _Vx6, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ) ) );
  }

 template < class _Ret,
  class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  _Ret _ApplyX ( _Barg0 & _Bx0, _Barg1 & _Bx1, _Barg2 & _Bx2, _Barg3 & _Bx3, _Barg4 & _Bx4, _Barg5 & _Bx5, _Barg6 & _Bx6, _Barg7 & _Bx7, _Barg8 & _Bx8, _Barg9 & _Bx9 )
  {
  return ( this -> _Callee . template _ApplyX < _Ret > ( _Self :: _Binder0 :: _Get ( this -> _Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder1 :: _Get ( this -> _Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder2 :: _Get ( this -> _Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder3 :: _Get ( this -> _Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder4 :: _Get ( this -> _Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder5 :: _Get ( this -> _Vx5, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder6 :: _Get ( this -> _Vx6, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ) ) );
  }

 _Arg6 _Vx6;
 };


namespace placeholders { 
static _Ph< 7>  _7; 
}
#line 302 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template<class _Ret, class _BindTy, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6> 
struct _Result_of7< _Bind< _Ret, _BindTy> , _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6>  { 

typedef _Ret _Type; 
}; 

template<class _BindTy, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6> 
struct _Result_of7< _Bind< _Notforced, _BindTy> , _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6>  { 


typedef typename _BindTy::template _Return< _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Nil &, _Nil &, _Nil &> ::_Type _Type; 
}; 

template < class _Ret,
 class _Fty
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 _Bind < _Ret,
  _Bind7 < _Callable_obj < _Fty >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > >
   bind ( _Fty _Val, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 )
 {
 typedef _Bind7 < _Callable_obj < _Fty >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 ) ) );
 }

template < class _Fty
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 >
 _Bind < _Notforced,
  _Bind7 < _Callable_obj < _Fty >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > >
   bind ( _Fty _Val, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 )
 {
 typedef _Bind7 < _Callable_obj < _Fty >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 ) ) );
 }
#line 341 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template < class _Ret
 , class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6,
 class _Rx >

 _Bind < _Ret,
  _Bind7 < _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ) >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > >
   bind ( _Rx ( * const _Val ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ), _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 )
 {
 typedef _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ) > _Callable;
 typedef _Bind7 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 ) ) );
 }
#line 359 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template < class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6,
 class _Rx >

 _Bind < _Notforced,
  _Bind7 < _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ) >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > >
   bind ( _Rx ( * const _Val ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ), _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 )
 {
 typedef _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ) > _Callable;
 typedef _Bind7 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 ) ) );
 }
#line 400 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template < class _Ret,
 class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6,
 class _Rx >
 _Bind < _Ret,
  _Bind7 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ), _Farg0 >,
   _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ), _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ), _Farg0 >
  _Callable;
 typedef _Bind7 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 ) ) );
 }

template < class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6,
 class _Rx >
 _Bind < _Notforced,
  _Bind7 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ), _Farg0 >,
   _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ), _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ), _Farg0 >
  _Callable;
 typedef _Bind7 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 ) ) );
 }

template < class _Ret,
 class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6,
 class _Rx >
 _Bind < _Ret,
  _Bind7 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ) const,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ) const, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ) const, _Farg0 >
  _Callable;
 typedef _Bind7 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 ) ) );
 }

template < class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6,
 class _Rx >
 _Bind < _Notforced,
  _Bind7 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ) const,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ) const, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ) const, _Farg0 >
  _Callable;
 typedef _Bind7 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 ) ) );
 }

template < class _Ret,
 class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6,
 class _Rx >
 _Bind < _Ret,
  _Bind7 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ) volatile,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > >
  bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ) volatile, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ) volatile, _Farg0 >
  _Callable;
 typedef _Bind7 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 ) ) );
 }

template < class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6,
 class _Rx >
 _Bind < _Notforced,
  _Bind7 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ) volatile,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ) volatile, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ) volatile, _Farg0 >
  _Callable;
 typedef _Bind7 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 ) ) );
 }

template < class _Ret,
 class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6,
 class _Rx >
 _Bind < _Ret,
  _Bind7 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ) const volatile,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 )
    const volatile, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ) const volatile,
  _Farg0 > _Callable;
 typedef _Bind7 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 ) ) );
 }

template < class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6,
 class _Rx >
 _Bind < _Notforced,
  _Bind7 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ) const volatile,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > >
  bind ( _Rx ( _Farg0 :: * const _Val ) (
   _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ) const volatile, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 ) const volatile,
  _Farg0 > _Callable;
 typedef _Bind7 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 ) ) );
 }
#line 237 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template<> struct _Binder< false, 8>  { 

template < class _Arg,
  class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  static _Barg7 & _Get ( _Arg, _Barg0 & _Bx0, _Barg1 & _Bx1, _Barg2 & _Bx2, _Barg3 & _Bx3, _Barg4 & _Bx4, _Barg5 & _Bx5, _Barg6 & _Bx6, _Barg7 & _Bx7, _Barg8 & _Bx8, _Barg9 & _Bx9 )
  {
  return ( _Bx7 );
  }

template<class _Arg, class 
_Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9> 
struct _Ret { 

typedef _Barg7 _Type; 
}; 
}; 

template < class _Callable,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 class _Bind8
  : public _Bind7 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 >
 {
public :
 typedef _Bind8 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > _Self;
 typedef _Binder < is_bind_expression < _Arg7 > :: value,
  is_placeholder < _Arg7 > :: value > _Binder7;
 typedef _Arg7 _MyArg;

 template < class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  struct _Return
  {
  typedef typename _Bind7 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > :: _MyCallable
   _MyCallable;
  typedef typename _MyCallable :: _MyTy _MyTy;
  typedef typename result_of < _MyTy ( _Barg0, _Barg1, _Barg2, _Barg3, _Barg4, _Barg5, _Barg6, _Barg7 ) > :: type _Type;
  };

 _Bind8 ( typename _Callable :: _MyTy _Val, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 )
  : _Vx7 ( _Ax7 ), _Bind7 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 > ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 )
  {
  }

 template < class _Ret,
  class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  _Ret _ApplyX ( _Barg0 & _Bx0, _Barg1 & _Bx1, _Barg2 & _Bx2, _Barg3 & _Bx3, _Barg4 & _Bx4, _Barg5 & _Bx5, _Barg6 & _Bx6, _Barg7 & _Bx7, _Barg8 & _Bx8, _Barg9 & _Bx9 ) const
  {
  return ( this -> _Callee . template _ApplyX < _Ret > ( _Self :: _Binder0 :: _Get ( this -> _Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder1 :: _Get ( this -> _Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder2 :: _Get ( this -> _Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder3 :: _Get ( this -> _Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder4 :: _Get ( this -> _Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder5 :: _Get ( this -> _Vx5, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder6 :: _Get ( this -> _Vx6, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder7 :: _Get ( this -> _Vx7, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ) ) );
  }

 template < class _Ret,
  class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  _Ret _ApplyX ( _Barg0 & _Bx0, _Barg1 & _Bx1, _Barg2 & _Bx2, _Barg3 & _Bx3, _Barg4 & _Bx4, _Barg5 & _Bx5, _Barg6 & _Bx6, _Barg7 & _Bx7, _Barg8 & _Bx8, _Barg9 & _Bx9 )
  {
  return ( this -> _Callee . template _ApplyX < _Ret > ( _Self :: _Binder0 :: _Get ( this -> _Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder1 :: _Get ( this -> _Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder2 :: _Get ( this -> _Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder3 :: _Get ( this -> _Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder4 :: _Get ( this -> _Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder5 :: _Get ( this -> _Vx5, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder6 :: _Get ( this -> _Vx6, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder7 :: _Get ( this -> _Vx7, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ) ) );
  }

 _Arg7 _Vx7;
 };


namespace placeholders { 
static _Ph< 8>  _8; 
}
#line 302 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template<class _Ret, class _BindTy, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7> 
struct _Result_of8< _Bind< _Ret, _BindTy> , _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7>  { 

typedef _Ret _Type; 
}; 

template<class _BindTy, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7> 
struct _Result_of8< _Bind< _Notforced, _BindTy> , _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7>  { 


typedef typename _BindTy::template _Return< _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Nil &, _Nil &> ::_Type _Type; 
}; 

template < class _Ret,
 class _Fty
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 _Bind < _Ret,
  _Bind8 < _Callable_obj < _Fty >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > >
   bind ( _Fty _Val, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 )
 {
 typedef _Bind8 < _Callable_obj < _Fty >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 ) ) );
 }

template < class _Fty
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 >
 _Bind < _Notforced,
  _Bind8 < _Callable_obj < _Fty >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > >
   bind ( _Fty _Val, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 )
 {
 typedef _Bind8 < _Callable_obj < _Fty >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 ) ) );
 }
#line 341 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template < class _Ret
 , class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7,
 class _Rx >

 _Bind < _Ret,
  _Bind8 < _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ) >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > >
   bind ( _Rx ( * const _Val ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ), _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 )
 {
 typedef _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ) > _Callable;
 typedef _Bind8 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 ) ) );
 }
#line 359 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template < class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7,
 class _Rx >

 _Bind < _Notforced,
  _Bind8 < _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ) >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > >
   bind ( _Rx ( * const _Val ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ), _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 )
 {
 typedef _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ) > _Callable;
 typedef _Bind8 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 ) ) );
 }
#line 400 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template < class _Ret,
 class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7,
 class _Rx >
 _Bind < _Ret,
  _Bind8 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ), _Farg0 >,
   _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ), _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ), _Farg0 >
  _Callable;
 typedef _Bind8 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 ) ) );
 }

template < class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7,
 class _Rx >
 _Bind < _Notforced,
  _Bind8 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ), _Farg0 >,
   _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ), _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ), _Farg0 >
  _Callable;
 typedef _Bind8 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 ) ) );
 }

template < class _Ret,
 class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7,
 class _Rx >
 _Bind < _Ret,
  _Bind8 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ) const,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ) const, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ) const, _Farg0 >
  _Callable;
 typedef _Bind8 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 ) ) );
 }

template < class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7,
 class _Rx >
 _Bind < _Notforced,
  _Bind8 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ) const,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ) const, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ) const, _Farg0 >
  _Callable;
 typedef _Bind8 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 ) ) );
 }

template < class _Ret,
 class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7,
 class _Rx >
 _Bind < _Ret,
  _Bind8 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ) volatile,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > >
  bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ) volatile, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ) volatile, _Farg0 >
  _Callable;
 typedef _Bind8 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 ) ) );
 }

template < class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7,
 class _Rx >
 _Bind < _Notforced,
  _Bind8 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ) volatile,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ) volatile, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ) volatile, _Farg0 >
  _Callable;
 typedef _Bind8 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 ) ) );
 }

template < class _Ret,
 class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7,
 class _Rx >
 _Bind < _Ret,
  _Bind8 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ) const volatile,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 )
    const volatile, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ) const volatile,
  _Farg0 > _Callable;
 typedef _Bind8 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 ) ) );
 }

template < class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7,
 class _Rx >
 _Bind < _Notforced,
  _Bind8 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ) const volatile,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > >
  bind ( _Rx ( _Farg0 :: * const _Val ) (
   _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ) const volatile, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 ) const volatile,
  _Farg0 > _Callable;
 typedef _Bind8 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 ) ) );
 }
#line 237 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template<> struct _Binder< false, 9>  { 

template < class _Arg,
  class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  static _Barg8 & _Get ( _Arg, _Barg0 & _Bx0, _Barg1 & _Bx1, _Barg2 & _Bx2, _Barg3 & _Bx3, _Barg4 & _Bx4, _Barg5 & _Bx5, _Barg6 & _Bx6, _Barg7 & _Bx7, _Barg8 & _Bx8, _Barg9 & _Bx9 )
  {
  return ( _Bx8 );
  }

template<class _Arg, class 
_Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9> 
struct _Ret { 

typedef _Barg8 _Type; 
}; 
}; 

template < class _Callable,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 class _Bind9
  : public _Bind8 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 >
 {
public :
 typedef _Bind9 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > _Self;
 typedef _Binder < is_bind_expression < _Arg8 > :: value,
  is_placeholder < _Arg8 > :: value > _Binder8;
 typedef _Arg8 _MyArg;

 template < class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  struct _Return
  {
  typedef typename _Bind8 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > :: _MyCallable
   _MyCallable;
  typedef typename _MyCallable :: _MyTy _MyTy;
  typedef typename result_of < _MyTy ( _Barg0, _Barg1, _Barg2, _Barg3, _Barg4, _Barg5, _Barg6, _Barg7, _Barg8 ) > :: type _Type;
  };

 _Bind9 ( typename _Callable :: _MyTy _Val, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 )
  : _Vx8 ( _Ax8 ), _Bind8 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 > ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 )
  {
  }

 template < class _Ret,
  class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  _Ret _ApplyX ( _Barg0 & _Bx0, _Barg1 & _Bx1, _Barg2 & _Bx2, _Barg3 & _Bx3, _Barg4 & _Bx4, _Barg5 & _Bx5, _Barg6 & _Bx6, _Barg7 & _Bx7, _Barg8 & _Bx8, _Barg9 & _Bx9 ) const
  {
  return ( this -> _Callee . template _ApplyX < _Ret > ( _Self :: _Binder0 :: _Get ( this -> _Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder1 :: _Get ( this -> _Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder2 :: _Get ( this -> _Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder3 :: _Get ( this -> _Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder4 :: _Get ( this -> _Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder5 :: _Get ( this -> _Vx5, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder6 :: _Get ( this -> _Vx6, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder7 :: _Get ( this -> _Vx7, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder8 :: _Get ( this -> _Vx8, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ) ) );
  }

 template < class _Ret,
  class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  _Ret _ApplyX ( _Barg0 & _Bx0, _Barg1 & _Bx1, _Barg2 & _Bx2, _Barg3 & _Bx3, _Barg4 & _Bx4, _Barg5 & _Bx5, _Barg6 & _Bx6, _Barg7 & _Bx7, _Barg8 & _Bx8, _Barg9 & _Bx9 )
  {
  return ( this -> _Callee . template _ApplyX < _Ret > ( _Self :: _Binder0 :: _Get ( this -> _Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder1 :: _Get ( this -> _Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder2 :: _Get ( this -> _Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder3 :: _Get ( this -> _Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder4 :: _Get ( this -> _Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder5 :: _Get ( this -> _Vx5, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder6 :: _Get ( this -> _Vx6, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder7 :: _Get ( this -> _Vx7, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder8 :: _Get ( this -> _Vx8, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ) ) );
  }

 _Arg8 _Vx8;
 };


namespace placeholders { 
static _Ph< 9>  _9; 
}
#line 302 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template<class _Ret, class _BindTy, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8> 
struct _Result_of9< _Bind< _Ret, _BindTy> , _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8>  { 

typedef _Ret _Type; 
}; 

template<class _BindTy, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8> 
struct _Result_of9< _Bind< _Notforced, _BindTy> , _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8>  { 


typedef typename _BindTy::template _Return< _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Nil &> ::_Type _Type; 
}; 

template < class _Ret,
 class _Fty
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 _Bind < _Ret,
  _Bind9 < _Callable_obj < _Fty >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > >
   bind ( _Fty _Val, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 )
 {
 typedef _Bind9 < _Callable_obj < _Fty >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 ) ) );
 }

template < class _Fty
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 >
 _Bind < _Notforced,
  _Bind9 < _Callable_obj < _Fty >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > >
   bind ( _Fty _Val, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 )
 {
 typedef _Bind9 < _Callable_obj < _Fty >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 ) ) );
 }
#line 341 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template < class _Ret
 , class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8,
 class _Rx >

 _Bind < _Ret,
  _Bind9 < _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ) >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > >
   bind ( _Rx ( * const _Val ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ), _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 )
 {
 typedef _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ) > _Callable;
 typedef _Bind9 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 ) ) );
 }
#line 359 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template < class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8,
 class _Rx >

 _Bind < _Notforced,
  _Bind9 < _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ) >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > >
   bind ( _Rx ( * const _Val ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ), _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 )
 {
 typedef _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ) > _Callable;
 typedef _Bind9 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 ) ) );
 }
#line 400 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template < class _Ret,
 class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8,
 class _Rx >
 _Bind < _Ret,
  _Bind9 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ), _Farg0 >,
   _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ), _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ), _Farg0 >
  _Callable;
 typedef _Bind9 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 ) ) );
 }

template < class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8,
 class _Rx >
 _Bind < _Notforced,
  _Bind9 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ), _Farg0 >,
   _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ), _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ), _Farg0 >
  _Callable;
 typedef _Bind9 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 ) ) );
 }

template < class _Ret,
 class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8,
 class _Rx >
 _Bind < _Ret,
  _Bind9 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ) const,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ) const, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ) const, _Farg0 >
  _Callable;
 typedef _Bind9 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 ) ) );
 }

template < class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8,
 class _Rx >
 _Bind < _Notforced,
  _Bind9 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ) const,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ) const, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ) const, _Farg0 >
  _Callable;
 typedef _Bind9 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 ) ) );
 }

template < class _Ret,
 class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8,
 class _Rx >
 _Bind < _Ret,
  _Bind9 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ) volatile,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > >
  bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ) volatile, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ) volatile, _Farg0 >
  _Callable;
 typedef _Bind9 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 ) ) );
 }

template < class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8,
 class _Rx >
 _Bind < _Notforced,
  _Bind9 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ) volatile,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ) volatile, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ) volatile, _Farg0 >
  _Callable;
 typedef _Bind9 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 ) ) );
 }

template < class _Ret,
 class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8,
 class _Rx >
 _Bind < _Ret,
  _Bind9 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ) const volatile,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 )
    const volatile, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ) const volatile,
  _Farg0 > _Callable;
 typedef _Bind9 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 ) ) );
 }

template < class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8,
 class _Rx >
 _Bind < _Notforced,
  _Bind9 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ) const volatile,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > >
  bind ( _Rx ( _Farg0 :: * const _Val ) (
   _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ) const volatile, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 ) const volatile,
  _Farg0 > _Callable;
 typedef _Bind9 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 ) ) );
 }
#line 237 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template<> struct _Binder< false, 10>  { 

template < class _Arg,
  class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  static _Barg9 & _Get ( _Arg, _Barg0 & _Bx0, _Barg1 & _Bx1, _Barg2 & _Bx2, _Barg3 & _Bx3, _Barg4 & _Bx4, _Barg5 & _Bx5, _Barg6 & _Bx6, _Barg7 & _Bx7, _Barg8 & _Bx8, _Barg9 & _Bx9 )
  {
  return ( _Bx9 );
  }

template<class _Arg, class 
_Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9> 
struct _Ret { 

typedef _Barg9 _Type; 
}; 
}; 

template < class _Callable,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 class _Bind10
  : public _Bind9 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 >
 {
public :
 typedef _Bind10 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > _Self;
 typedef _Binder < is_bind_expression < _Arg9 > :: value,
  is_placeholder < _Arg9 > :: value > _Binder9;
 typedef _Arg9 _MyArg;

 template < class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  struct _Return
  {
  typedef typename _Bind9 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > :: _MyCallable
   _MyCallable;
  typedef typename _MyCallable :: _MyTy _MyTy;
  typedef typename result_of < _MyTy ( _Barg0, _Barg1, _Barg2, _Barg3, _Barg4, _Barg5, _Barg6, _Barg7, _Barg8, _Barg9 ) > :: type _Type;
  };

 _Bind10 ( typename _Callable :: _MyTy _Val, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8, _Arg9 _Ax9 )
  : _Vx9 ( _Ax9 ), _Bind9 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 > ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 )
  {
  }

 template < class _Ret,
  class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  _Ret _ApplyX ( _Barg0 & _Bx0, _Barg1 & _Bx1, _Barg2 & _Bx2, _Barg3 & _Bx3, _Barg4 & _Bx4, _Barg5 & _Bx5, _Barg6 & _Bx6, _Barg7 & _Bx7, _Barg8 & _Bx8, _Barg9 & _Bx9 ) const
  {
  return ( this -> _Callee . template _ApplyX < _Ret > ( _Self :: _Binder0 :: _Get ( this -> _Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder1 :: _Get ( this -> _Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder2 :: _Get ( this -> _Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder3 :: _Get ( this -> _Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder4 :: _Get ( this -> _Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder5 :: _Get ( this -> _Vx5, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder6 :: _Get ( this -> _Vx6, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder7 :: _Get ( this -> _Vx7, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder8 :: _Get ( this -> _Vx8, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder9 :: _Get ( this -> _Vx9, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ) ) );
  }

 template < class _Ret,
  class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9 >
  _Ret _ApplyX ( _Barg0 & _Bx0, _Barg1 & _Bx1, _Barg2 & _Bx2, _Barg3 & _Bx3, _Barg4 & _Bx4, _Barg5 & _Bx5, _Barg6 & _Bx6, _Barg7 & _Bx7, _Barg8 & _Bx8, _Barg9 & _Bx9 )
  {
  return ( this -> _Callee . template _ApplyX < _Ret > ( _Self :: _Binder0 :: _Get ( this -> _Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder1 :: _Get ( this -> _Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder2 :: _Get ( this -> _Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder3 :: _Get ( this -> _Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder4 :: _Get ( this -> _Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder5 :: _Get ( this -> _Vx5, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder6 :: _Get ( this -> _Vx6, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder7 :: _Get ( this -> _Vx7, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder8 :: _Get ( this -> _Vx8, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ), _Self :: _Binder9 :: _Get ( this -> _Vx9, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9 ) ) );
  }

 _Arg9 _Vx9;
 };


namespace placeholders { 
static _Ph< 10>  _10; 
}
#line 302 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template<class _Ret, class _BindTy, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9> 
struct _Result_of10< _Bind< _Ret, _BindTy> , _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9>  { 

typedef _Ret _Type; 
}; 

template<class _BindTy, class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9> 
struct _Result_of10< _Bind< _Notforced, _BindTy> , _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9>  { 


typedef typename _BindTy::template _Return< _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9> ::_Type _Type; 
}; 

template < class _Ret,
 class _Fty
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 _Bind < _Ret,
  _Bind10 < _Callable_obj < _Fty >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > >
   bind ( _Fty _Val, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8, _Arg9 _Ax9 )
 {
 typedef _Bind10 < _Callable_obj < _Fty >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8, _Ax9 ) ) );
 }

template < class _Fty
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9 >
 _Bind < _Notforced,
  _Bind10 < _Callable_obj < _Fty >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > >
   bind ( _Fty _Val, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8, _Arg9 _Ax9 )
 {
 typedef _Bind10 < _Callable_obj < _Fty >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8, _Ax9 ) ) );
 }
#line 341 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template < class _Ret
 , class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9,
 class _Rx >

 _Bind < _Ret,
  _Bind10 < _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ) >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > >
   bind ( _Rx ( * const _Val ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ), _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8, _Arg9 _Ax9 )
 {
 typedef _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ) > _Callable;
 typedef _Bind10 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8, _Ax9 ) ) );
 }
#line 359 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template < class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9
 , class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9,
 class _Rx >

 _Bind < _Notforced,
  _Bind10 < _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ) >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > >
   bind ( _Rx ( * const _Val ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ), _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8, _Arg9 _Ax9 )
 {
 typedef _Callable_fun < _Rx ( * const ) ( _Farg0, _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ) > _Callable;
 typedef _Bind10 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8, _Ax9 ) ) );
 }
#line 400 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xxbind1"
template < class _Ret,
 class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9,
 class _Rx >
 _Bind < _Ret,
  _Bind10 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ), _Farg0 >,
   _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ), _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8, _Arg9 _Ax9 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ), _Farg0 >
  _Callable;
 typedef _Bind10 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8, _Ax9 ) ) );
 }

template < class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9,
 class _Rx >
 _Bind < _Notforced,
  _Bind10 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ), _Farg0 >,
   _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ), _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8, _Arg9 _Ax9 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ), _Farg0 >
  _Callable;
 typedef _Bind10 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8, _Ax9 ) ) );
 }

template < class _Ret,
 class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9,
 class _Rx >
 _Bind < _Ret,
  _Bind10 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ) const,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ) const, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8, _Arg9 _Ax9 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ) const, _Farg0 >
  _Callable;
 typedef _Bind10 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8, _Ax9 ) ) );
 }

template < class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9,
 class _Rx >
 _Bind < _Notforced,
  _Bind10 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ) const,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ) const, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8, _Arg9 _Ax9 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ) const, _Farg0 >
  _Callable;
 typedef _Bind10 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8, _Ax9 ) ) );
 }

template < class _Ret,
 class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9,
 class _Rx >
 _Bind < _Ret,
  _Bind10 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ) volatile,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > >
  bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ) volatile, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8, _Arg9 _Ax9 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ) volatile, _Farg0 >
  _Callable;
 typedef _Bind10 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8, _Ax9 ) ) );
 }

template < class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9,
 class _Rx >
 _Bind < _Notforced,
  _Bind10 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ) volatile,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ) volatile, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8, _Arg9 _Ax9 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ) volatile, _Farg0 >
  _Callable;
 typedef _Bind10 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8, _Ax9 ) ) );
 }

template < class _Ret,
 class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9,
 class _Rx >
 _Bind < _Ret,
  _Bind10 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ) const volatile,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > >
   bind ( _Rx ( _Farg0 :: * const _Val ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 )
    const volatile, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8, _Arg9 _Ax9 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ) const volatile,
  _Farg0 > _Callable;
 typedef _Bind10 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > _MyBind;
 return ( _Bind < _Ret, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8, _Ax9 ) ) );
 }

template < class _Farg0, class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8, class _Farg9,
 class _Arg0, class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8, class _Arg9,
 class _Rx >
 _Bind < _Notforced,
  _Bind10 < _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ) const volatile,
   _Farg0 >, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > >
  bind ( _Rx ( _Farg0 :: * const _Val ) (
   _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ) const volatile, _Arg0 _Ax0, _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8, _Arg9 _Ax9 )
 {
 typedef _Callable_pmf < _Rx ( _Farg0 :: * const ) ( _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8, _Farg9 ) const volatile,
  _Farg0 > _Callable;
 typedef _Bind10 < _Callable, _Arg0, _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8, _Arg9 > _MyBind;
 return ( _Bind < _Notforced, _MyBind > ( _MyBind ( _Val, _Ax0, _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8, _Ax9 ) ) );
 }
#line 1244 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\functional"
}

template<class _Fty> 
class _Move_operation_category< tr1::function< _Fty> >  { 


public: typedef _Swap_move_tag _Move_cat; 
}; 
}
#line 1255 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\functional"
namespace std { 
namespace tr1 { 

template < class _Kty >
 class hash
  : public unary_function < _Kty, size_t >
 {
public :
 size_t operator ( ) ( const _Kty & _Keyval ) const
  {
  ldiv_t _Qrem = ldiv ( ( long ) ( size_t ) _Keyval, 127773 );

  _Qrem . rem = 16807 * _Qrem . rem - 2836 * _Qrem . quot;
  if ( _Qrem . rem < 0 )
   _Qrem . rem += 2147483647;
  return ( ( size_t ) _Qrem . rem );
  }
 };


template<> class hash< basic_string< char, char_traits< char> , allocator< char> > >  : public unary_function< basic_string< char, char_traits< char> , allocator< char> > , unsigned>  { 



public: typedef string _Kty; 

size_t operator()(const _Kty &_Keyval) const 
{ 
auto size_t _Val = (2166136261U); 
auto size_t _First = (0); 
auto size_t _Last = _Keyval.size(); 
auto size_t _Stride = ((1) + _Last / (10)); 

if (_Stride < _Last) { 
_Last -= _Stride; }  
for (; _First < _Last; _First += _Stride) { 
_Val = (16777619U * _Val) ^ ((unsigned)(_Keyval[_First])); }  
return _Val; 
} 
}; 


template<> class hash< basic_string< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> > >  : public unary_function< basic_string< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> > , unsigned>  { 



public: typedef wstring _Kty; 

size_t operator()(const _Kty &_Keyval) const 
{ 
auto size_t _Val = (2166136261U); 
auto size_t _First = (0); 
auto size_t _Last = _Keyval.size(); 
auto size_t _Stride = ((1) + _Last / (10)); 

if (_Stride < _Last) { 
_Last -= _Stride; }  
for (; _First < _Last; _First += _Stride) { 
_Val = (16777619U * _Val) ^ ((unsigned)(_Keyval[_First])); }  
return _Val; 
} 
}; 

}
}


#pragma warning(default: 4100 4180 4244)
#pragma warning(pop)
#pragma pack ( pop )
#line 11 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\list"
#pragma pack ( push, 8 )
#line 14 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\list"
namespace std { 


template < class _Ty,
 class _Alloc >
 class _List_nod
  : public _Container_base_aux_alloc_real < _Alloc >
 {
protected :
 struct _Node;
 friend struct _Node;
 typedef _Node * _Nodeptr;





#pragma warning(push)
#pragma warning(disable:4512)
 struct _Node
  {
  _Node ( )
   {
   }

  _Nodeptr _Next;
  _Nodeptr _Prev;
  _Ty _Myval;
  };
#pragma warning(pop)

 _List_nod ( _Alloc _Al )
  : _Container_base_aux_alloc_real < _Alloc > ( _Al ), _Alnod ( _Al )
  {
  }

 typename _Alloc :: template rebind < _Node > :: other
  _Alnod;
 };


template < class _Ty,
 class _Alloc >
 class _List_ptr
  : public _List_nod < _Ty, _Alloc >
 {
protected :
 typedef _List_nod < _Ty, _Alloc > _Mybase;
 typedef typename _Mybase :: _Node _Node;
 typedef typename _Mybase :: _Nodeptr _Nodeptr;

 _List_ptr ( _Alloc _Al )
  : _List_nod < _Ty, _Alloc > ( _Al ), _Alptr ( _Al )
  {
  }

 typename _Alloc :: template rebind < _Nodeptr > :: other
  _Alptr;
 };


template < class _Ty,
 class _Alloc >
 class _List_val
  : public _List_ptr < _Ty, _Alloc >
 {
public :
 typedef typename _Alloc :: template rebind < _Ty > :: other _Alty;

 _List_val ( _Alloc _Al = _Alloc ( ) )
  : _List_ptr < _Ty, _Alloc > ( _Al ), _Alval ( _Al )
  {
  }

 _Alty _Alval;
 };


template < class _Ty,
 class _Ax = allocator < _Ty > >
 class list
  : public _List_val < _Ty, _Ax >
 {
public :
 typedef list < _Ty, _Ax > _Myt;
 typedef _List_val < _Ty, _Ax > _Mybase;
 typedef typename _Mybase :: _Alty _Alloc;

protected :
 typedef typename _Mybase :: _Node _Node;
 typedef typename _Mybase :: _Nodeptr _Nodeptr;

 typedef typename _Alloc :: template rebind < _Nodeptr > :: other
  _Nodeptr_alloc;
 typedef typename _Nodeptr_alloc :: reference _Nodepref;


 typedef typename _Alloc :: reference _Vref;

 static _Nodepref _Nextnode ( _Nodeptr _Pnode )
  {
  return ( ( _Nodepref ) ( * _Pnode ) . _Next );
  }

 static _Nodepref _Prevnode ( _Nodeptr _Pnode )
  {
  return ( ( _Nodepref ) ( * _Pnode ) . _Prev );
  }

 static _Vref _Myval ( _Nodeptr _Pnode )
  {
  return ( ( _Vref ) ( * _Pnode ) . _Myval );
  }

public :
 typedef _Alloc allocator_type;
 typedef typename _Alloc :: size_type size_type;
 typedef typename _Alloc :: difference_type _Dift;
 typedef _Dift difference_type;
 typedef typename _Alloc :: pointer _Tptr;
 typedef typename _Alloc :: const_pointer _Ctptr;
 typedef _Tptr pointer;
 typedef _Ctptr const_pointer;
 typedef typename _Alloc :: reference _Reft;
 typedef _Reft reference;
 typedef typename _Alloc :: const_reference const_reference;
 typedef typename _Alloc :: value_type value_type;


 template < bool _Secure_validation > class _Const_iterator;
 friend class _Const_iterator < true >;

 friend class _Const_iterator < false >;


 template < bool _Secure_validation >
 class _Const_iterator
  : public _Bidit < _Ty, _Dift, _Ctptr, const_reference >
  {
 public :
  typedef _Const_iterator < _Secure_validation > _Myt_iter;
  typedef bidirectional_iterator_tag iterator_category;
  typedef _Ty value_type;
  typedef _Dift difference_type;
  typedef _Ctptr pointer;
  typedef const_reference reference;

  _Const_iterator ( )
   : _Ptr ( 0 )
   {
   }









  _Const_iterator ( _Nodeptr _Pnode, const _Myt * _Plist )
   : _Ptr ( _Pnode )
   {
   { __pragma(warning(push)); __pragma(warning(disable: 4127)); if ( _Secure_validation ) { { if ( ! ( _Plist != 0 ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; } } __pragma(warning(pop)); };
   this -> _Set_container ( _Plist );
   }









 typedef typename _Secure_validation_helper < _Secure_validation > :: _Checked_iterator_category _Checked_iterator_category;
 typedef typename _If < _Secure_validation,
  _Const_iterator < false >,
  _Unchanged_checked_iterator_base_type_tag > :: _Result _Checked_iterator_base_type;

 friend _Const_iterator < false >;
 friend _Const_iterator < true >;

 _Const_iterator < false > _Checked_iterator_base ( ) const
 {
  _Const_iterator < false > _Base ( this -> _Ptr, ( ( _Myt * ) this -> _Getmycont ( ) ) );
  return _Base;
 }

 void _Checked_iterator_assign_from_base ( _Const_iterator < false > _Base )
 {
  { if ( ! ( this -> _Same_container ( _Base ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  this -> _Ptr = _Base . _Ptr;
 }


  const_reference operator * ( ) const
   {










   { __pragma(warning(push)); __pragma(warning(disable: 4127)); if ( _Secure_validation ) { { if ( ! ( this -> _Has_container ( ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; } } __pragma(warning(pop)); };
   { __pragma(warning(push)); __pragma(warning(disable: 4127)); if ( _Secure_validation ) { { if ( ! ( _Ptr != ( ( _Myt * ) ( this -> _Getmycont ( ) ) ) -> _Myhead ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; } } __pragma(warning(pop)); };


   return ( _Myval ( _Ptr ) );
   }

  _Ctptr operator -> ( ) const
   {
   return ( & * * this );
   }

  _Myt_iter & operator ++ ( )
   {










   { __pragma(warning(push)); __pragma(warning(disable: 4127)); if ( _Secure_validation ) { { if ( ! ( this -> _Has_container ( ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; } } __pragma(warning(pop)); };
   { __pragma(warning(push)); __pragma(warning(disable: 4127)); if ( _Secure_validation ) { { if ( ! ( _Ptr != ( ( _Myt * ) ( this -> _Getmycont ( ) ) ) -> _Myhead ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; } } __pragma(warning(pop)); };


   _Ptr = _Nextnode ( _Ptr );
   return ( * this );
   }

  _Myt_iter operator ++ ( int )
   {
   _Myt_iter _Tmp = * this;
   ++ * this;
   return ( _Tmp );
   }

  _Myt_iter & operator -- ( )
   {











   { __pragma(warning(push)); __pragma(warning(disable: 4127)); if ( _Secure_validation ) { { if ( ! ( this -> _Has_container ( ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; } } __pragma(warning(pop)); };
   _Ptr = _Prevnode ( _Ptr );
   { __pragma(warning(push)); __pragma(warning(disable: 4127)); if ( _Secure_validation ) { { if ( ! ( _Ptr != ( ( _Myt * ) ( this -> _Getmycont ( ) ) ) -> _Myhead ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; } } __pragma(warning(pop)); };


   return ( * this );
   }

  _Myt_iter operator -- ( int )
   {
   _Myt_iter _Tmp = * this;
   -- * this;
   return ( _Tmp );
   }

  bool operator == ( const _Myt_iter & _Right ) const
   {




   { __pragma(warning(push)); __pragma(warning(disable: 4127)); if ( _Secure_validation ) { { if ( ! ( this -> _Has_container ( ) && this -> _Same_container ( _Right ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; } } __pragma(warning(pop)); };


   return ( _Ptr == _Right . _Ptr );
   }

  bool operator != ( const _Myt_iter & _Right ) const
   {
   return ( ! ( * this == _Right ) );
   }

  _Nodeptr _Mynode ( ) const
   {
   return ( _Ptr );
   }












  _Nodeptr _Ptr;
  };

 typedef _Const_iterator < true > const_iterator;


 template < bool _Secure_validation > class _Iterator;
 friend class _Iterator < true >;

 friend class _Iterator < false >;


 template < bool _Secure_validation >
 class _Iterator
  : public _Const_iterator < _Secure_validation >
  {
 public :
  friend class list < _Ty, _Ax >;
  typedef _Iterator < _Secure_validation > _Myt_iter;
  typedef _Const_iterator < _Secure_validation > _Mybase_iter;
  typedef bidirectional_iterator_tag iterator_category;
  typedef _Ty value_type;
  typedef _Dift difference_type;
  typedef _Tptr pointer;
  typedef _Reft reference;

  _Iterator ( )
   {
   }








  _Iterator ( _Nodeptr _Pnode, const _Myt * _Plist )
   : _Mybase_iter ( _Pnode, _Plist )
   {
   }









 typedef typename _If < _Secure_validation,
  _Iterator < false >,
  _Unchanged_checked_iterator_base_type_tag > :: _Result _Checked_iterator_base_type;

 friend _Iterator < false >;
 friend _Iterator < true >;

 _Iterator < false > _Checked_iterator_base ( ) const
 {
  _Iterator < false > _Base ( this -> _Ptr, ( ( _Myt * ) this -> _Getmycont ( ) ) );
  return _Base;
 }

 void _Checked_iterator_assign_from_base ( _Iterator < false > _Base )
 {
  { if ( ! ( this -> _Same_container ( _Base ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); }; };
  this -> _Ptr = _Base . _Ptr;
 }


  reference operator * ( ) const
   {
   return ( ( reference ) * * ( _Mybase_iter * ) this );
   }

  _Tptr operator -> ( ) const
   {
   return ( & * * this );
   }

  _Myt_iter & operator ++ ( )
   {
   ++ ( * ( _Mybase_iter * ) this );
   return ( * this );
   }

  _Myt_iter operator ++ ( int )
   {
   _Myt_iter _Tmp = * this;
   ++ * this;
   return ( _Tmp );
   }

  _Myt_iter & operator -- ( )
   {
   -- ( * ( _Mybase_iter * ) this );
   return ( * this );
   }

  _Myt_iter operator -- ( int )
   {
   _Myt_iter _Tmp = * this;
   -- * this;
   return ( _Tmp );
   }
  };

 typedef _Iterator < true > iterator;

 typedef std :: reverse_iterator < iterator > reverse_iterator;
 typedef std :: reverse_iterator < const_iterator > const_reverse_iterator;

 list ( )
  : _Mybase ( ), _Myhead ( _Buynode ( ) ), _Mysize ( 0 )
  {
  }

 explicit list ( const _Alloc & _Al )
  : _Mybase ( _Al ), _Myhead ( _Buynode ( ) ), _Mysize ( 0 )
  {
  }

 explicit list ( size_type _Count )
  : _Mybase ( ), _Mysize ( 0 )
  {
  _Ty _Val = _Ty ( );
  _Myhead = _Buynode ( );
  _Construct_n ( _Count, _Val );
  }

 list ( size_type _Count, const _Ty & _Val )
  : _Mybase ( ), _Myhead ( _Buynode ( ) ), _Mysize ( 0 )
  {
  _Construct_n ( _Count, _Val );
  }

 list ( size_type _Count, const _Ty & _Val, const _Alloc & _Al )
  : _Mybase ( _Al ), _Myhead ( _Buynode ( ) ), _Mysize ( 0 )
  {
  _Construct_n ( _Count, _Val );
  }

 list ( const _Myt & _Right )
  : _Mybase ( _Right . _Alval ),
   _Myhead ( _Buynode ( ) ), _Mysize ( 0 )
  {
  try {
  insert ( begin ( ), _Right . begin ( ), _Right . end ( ) );
  } catch ( ... ) {
  _Tidy ( );
  throw;
  }
  }

 template < class _Iter >
  list ( _Iter _First, _Iter _Last )
  : _Mybase ( ), _Myhead ( _Buynode ( ) ), _Mysize ( 0 )
  {
  _Construct ( _First, _Last, _Iter_cat ( _First ) );
  }

 template < class _Iter >
  list ( _Iter _First, _Iter _Last, const _Alloc & _Al )
  : _Mybase ( _Al ), _Myhead ( _Buynode ( ) ), _Mysize ( 0 )
  {
  _Construct ( _First, _Last, _Iter_cat ( _First ) );
  }

 template < class _Iter >
  void _Construct ( _Iter _Count, _Iter _Val, _Int_iterator_tag )
  {
  _Construct_n ( ( size_type ) _Count, ( _Ty ) _Val );
  }

 template < class _Iter >
  void _Construct ( _Iter _First,
   _Iter _Last, input_iterator_tag )
  {
  try {
  insert ( begin ( ), _First, _Last );
  } catch ( ... ) {
  _Tidy ( );
  throw;
  }
  }

 void _Construct_n ( size_type _Count,
  const _Ty & _Val )
  {
  try {
  _Insert_n ( begin ( ), _Count, _Val );
  } catch ( ... ) {
  _Tidy ( );
  throw;
  }
  }

 ~ list ( )
  {
  _Tidy ( );
  }

 _Myt & operator = ( const _Myt & _Right )
  {
  if ( this != & _Right )
   assign ( _Right . begin ( ), _Right . end ( ) );
  return ( * this );
  }


 iterator begin ( )
  {
  return ( iterator ( _Nextnode ( _Myhead ), this ) );
  }

 const_iterator begin ( ) const
  {
  return ( const_iterator ( _Nextnode ( _Myhead ), this ) );
  }

 iterator end ( )
  {
  return ( iterator ( _Myhead, this ) );
  }

 const_iterator end ( ) const
  {
  return ( const_iterator ( _Myhead, this ) );
  }

 iterator _Make_iter ( const_iterator _Where ) const
  {
  return ( iterator ( _Where . _Ptr, this ) );
  }




























 reverse_iterator rbegin ( )
  {
  return ( reverse_iterator ( end ( ) ) );
  }

 const_reverse_iterator rbegin ( ) const
  {
  return ( const_reverse_iterator ( end ( ) ) );
  }

 reverse_iterator rend ( )
  {
  return ( reverse_iterator ( begin ( ) ) );
  }

 const_reverse_iterator rend ( ) const
  {
  return ( const_reverse_iterator ( begin ( ) ) );
  }

 void resize ( size_type _Newsize )
  {
  resize ( _Newsize, _Ty ( ) );
  }

 void resize ( size_type _Newsize, _Ty _Val )
  {
  if ( _Mysize < _Newsize )
   _Insert_n ( end ( ), _Newsize - _Mysize, _Val );
  else
   while ( _Newsize < _Mysize )
    pop_back ( );
  }

 size_type size ( ) const
  {
  return ( _Mysize );
  }

 size_type max_size ( ) const
  {
  return ( this -> _Alval . max_size ( ) );
  }

 bool empty ( ) const
  {
  return ( _Mysize == 0 );
  }

 allocator_type get_allocator ( ) const
  {
  return ( this -> _Alval );
  }

 reference front ( )
  {
  return ( * begin ( ) );
  }

 const_reference front ( ) const
  {
  return ( * begin ( ) );
  }

 reference back ( )
  {
  return ( * ( -- end ( ) ) );
  }

 const_reference back ( ) const
  {
  return ( * ( -- end ( ) ) );
  }

 void push_front ( const _Ty & _Val )
  {
  _Insert ( begin ( ), _Val );
  }

 void pop_front ( )
  {
  erase ( begin ( ) );
  }

 void push_back ( const _Ty & _Val )
  {
  _Insert ( end ( ), _Val );
  }

 void pop_back ( )
  {
  erase ( -- end ( ) );
  }

 template < class _Iter >
  void assign ( _Iter _First, _Iter _Last )
  {
  _Assign ( _First, _Last, _Iter_cat ( _First ) );
  }

 template < class _Iter >
  void _Assign ( _Iter _Count, _Iter _Val, _Int_iterator_tag )
  {
  _Assign_n ( ( size_type ) _Count, ( _Ty ) _Val );
  }

 template < class _Iter >
  void _Assign ( _Iter _First, _Iter _Last, input_iterator_tag )
  {
  clear ( );
  insert ( begin ( ), _First, _Last );
  }

 void assign ( size_type _Count, const _Ty & _Val )
  {
  _Assign_n ( _Count, _Val );
  }

 iterator insert ( const_iterator _Where, const _Ty & _Val )
  {
  _Insert ( _Where, _Val );
  return ( _Make_iter ( -- _Where ) );
  }

 void _Insert ( const_iterator _Where,
  const _Ty & _Val )
  {






  _Nodeptr _Pnode = _Where . _Mynode ( );
  _Nodeptr _Newnode = _Buynode ( _Pnode, _Prevnode ( _Pnode ), _Val );
  _Incsize ( 1 );
  _Prevnode ( _Pnode ) = _Newnode;
  _Nextnode ( _Prevnode ( _Newnode ) ) = _Newnode;
  }

 void insert ( const_iterator _Where, size_type _Count, const _Ty & _Val )
  {
  _Insert_n ( _Where, _Count, _Val );
  }

 template < class _Iter >
  void insert ( const_iterator _Where, _Iter _First, _Iter _Last )
  {
  _Insert ( _Where, _First, _Last, _Iter_cat ( _First ) );
  }

 template < class _Iter >
  void _Insert ( const_iterator _Where, _Iter _Count, _Iter _Val,
   _Int_iterator_tag )
  {
  _Insert_n ( _Where, ( size_type ) _Count, ( _Ty ) _Val );
  }

 template < class _Iter >
  void _Insert ( const_iterator _Where,
   _Iter _First, _Iter _Last, input_iterator_tag )
  {
  size_type _Num = 0;

  try {
  for (; _First != _Last; ++ _First, ++ _Num )
   _Insert ( _Where, * _First );
  } catch ( ... ) {
  for (; 0 < _Num; -- _Num )
   {
   const_iterator _Before = _Where;
   erase ( -- _Before );
   }
  throw;
  }
  }

 template < class _Iter >
  void _Insert ( const_iterator _Where,
   _Iter _First, _Iter _Last, forward_iterator_tag )
  {





  _Iter _Next = _First;

  try {
  for (; _First != _Last; ++ _First )
   _Insert ( _Where, * _First );
  } catch ( ... ) {
  for (; _Next != _First; ++ _Next )
   {
   const_iterator _Before = _Where;
   erase ( -- _Before );
   }
  throw;
  }
  }

 iterator erase ( const_iterator _Where )
  {








  _Nodeptr _Pnode = ( _Where ++ ) . _Mynode ( );


  if ( _Pnode != _Myhead )
   {
   _Nextnode ( _Prevnode ( _Pnode ) ) = _Nextnode ( _Pnode );
   _Prevnode ( _Nextnode ( _Pnode ) ) = _Prevnode ( _Pnode );
   this -> _Alnod . destroy ( _Pnode );
   this -> _Alnod . deallocate ( _Pnode, 1 );
   -- _Mysize;
   }
  return ( _Make_iter ( _Where ) );
  }

 iterator erase ( const_iterator _First, const_iterator _Last )
  {
  if ( _First == begin ( ) && _Last == end ( ) )
   {
   clear ( );
   return ( end ( ) );
   }
  else
   {
   while ( _First != _Last )
    _First = erase ( _First );
   return ( _Make_iter ( _Last ) );
   }
  }

 void clear ( )
  {





  _Nodeptr _Pnext;
  _Nodeptr _Pnode = _Nextnode ( _Myhead );
  _Nextnode ( _Myhead ) = _Myhead;
  _Prevnode ( _Myhead ) = _Myhead;
  _Mysize = 0;

  for (; _Pnode != _Myhead; _Pnode = _Pnext )
   {
   _Pnext = _Nextnode ( _Pnode );
   this -> _Alnod . destroy ( _Pnode );
   this -> _Alnod . deallocate ( _Pnode, 1 );
   }
  }

 void swap ( _Myt & _Right )
  {
  if ( this == & _Right )
   ;
  else if ( this -> _Alval == _Right . _Alval )
   {





   this -> _Swap_aux ( _Right );

   std :: swap ( _Myhead, _Right . _Myhead );
   std :: swap ( _Mysize, _Right . _Mysize );
   }
  else
   {
   this -> _Swap_aux ( _Right );

   iterator _Where = begin ( );
   splice ( _Where, _Right );
   _Right . splice ( _Right . begin ( ), * this, _Where, end ( ) );
   }
  }



 void splice ( const_iterator _Where, _Myt & _Right )
  {
  if ( this != & _Right && ! _Right . empty ( ) )
   {
   _Splice ( _Where, _Right, _Right . begin ( ), _Right . end ( ),
    _Right . _Mysize );
   }
  }

 void splice ( const_iterator _Where, _Myt & _Right, const_iterator _First )
  {







  if ( _First != _Right . end ( ) )


   {
   const_iterator _Last = _First;
   ++ _Last;
   if ( this != & _Right
    || ( _Where != _First && _Where != _Last ) )
    _Splice ( _Where, _Right, _First, _Last, 1 );
   }
  }

 void splice ( const_iterator _Where,
  _Myt & _Right, const_iterator _First, const_iterator _Last )
  {
  if ( _First != _Last && ( this != & _Right || _Where != _Last ) )
   {
   size_type _Count = 0;
   if ( this == & _Right )
    ;
   else if ( _First == _Right . begin ( ) && _Last == _Right . end ( ) )
    _Count = _Right . _Mysize;
   else
    {
    const_iterator _Next = _First;

    for (; _Next != _Last; ++ _Next, ++ _Count )
     if ( _Next == _Right . end ( ) )
     if ( _First == _Right . end ( ) )
      throw length_error ( "list<T> bad splice" );
    }
   _Splice ( _Where, _Right, _First, _Last, _Count );
   }
  }

 void remove ( const _Ty & _Val_arg )
  {






  const _Ty _Val = _Val_arg;
  iterator _Last = end ( );
  for ( iterator _First = begin ( ); _First != _Last; )
   if ( * _First == _Val )
    _First = erase ( _First );
   else
    ++ _First;
  }

 template < class _Pr1 >
  void remove_if ( _Pr1 _Pred )
  {
  iterator _Last = end ( );
  for ( iterator _First = begin ( ); _First != _Last; )
   if ( _Pred ( * _First ) )
    _First = erase ( _First );
   else
    ++ _First;
  }

 void unique ( )
  {
  if ( 2 <= _Mysize )
   {
   iterator _First = begin ( );
   iterator _After = _First;
   for ( ++ _After; _After != end ( ); )
    if ( * _First == * _After )
     _After = erase ( _After );
    else
     _First = _After ++;
   }
  }

 template < class _Pr2 >
  void unique ( _Pr2 _Pred )
  {
  if ( 2 <= _Mysize )
   {
   iterator _First = begin ( );
   iterator _After = _First;
   for ( ++ _After; _After != end ( ); )
    if ( _Pred ( * _First, * _After ) )
     _After = erase ( _After );
    else
     _First = _After ++;
   }
  }

 void merge ( _Myt & _Right )
  {
  if ( & _Right != this )
   {
   iterator _First1 = begin ( ), _Last1 = end ( );
   iterator _First2 = _Right . begin ( ), _Last2 = _Right . end ( );
   ;
   ;

   while ( _First1 != _Last1 && _First2 != _Last2 )
    if ( ( ( * _First2 ) < ( * _First1 ) ) )
     {
     iterator _Mid2 = _First2;
     _Splice ( _First1, _Right, _First2, ++ _Mid2, 1 );
     _First2 = _Mid2;
     }
    else
     ++ _First1;

   if ( _First2 != _Last2 )
    _Splice ( _Last1, _Right, _First2, _Last2,
     _Right . _Mysize );
   }
  }

 template < class _Pr3 >
  void merge ( _Myt & _Right, _Pr3 _Pred )
  {
  if ( & _Right != this )
   {
   iterator _First1 = begin ( ), _Last1 = end ( );
   iterator _First2 = _Right . begin ( ), _Last2 = _Right . end ( );
   ;
   ;

   while ( _First1 != _Last1 && _First2 != _Last2 )
    if ( _Pred ( * _First2, * _First1 ) )
     {
     iterator _Mid2 = _First2;
     _Splice ( _First1, _Right, _First2, ++ _Mid2, 1 );
     _First2 = _Mid2;
     }
    else
     ++ _First1;

   if ( _First2 != _Last2 )
    _Splice ( _Last1, _Right, _First2, _Last2,
     _Right . _Mysize );
   }
  }

 void sort ( )
  {
  if ( 2 <= _Mysize )
   {
   const size_t _MAXBINS = 25;
   _Myt _Templist ( this -> _Alval ), _Binlist [ _MAXBINS + 1 ];
   size_t _Maxbin = 0;

   while ( ! empty ( ) )
    {
    _Templist . _Splice ( _Templist . begin ( ), * this, begin ( ),
     ++ begin ( ), 1, true );

    size_t _Bin;
    for ( _Bin = 0; _Bin < _Maxbin && ! _Binlist [ _Bin ] . empty ( );
     ++ _Bin )
     {
     _Binlist [ _Bin ] . merge ( _Templist );
     _Binlist [ _Bin ] . swap ( _Templist );
     }

    if ( _Bin == _MAXBINS )
     _Binlist [ _Bin - 1 ] . merge ( _Templist );
    else
     {
     _Binlist [ _Bin ] . swap ( _Templist );
     if ( _Bin == _Maxbin )
      ++ _Maxbin;
     }
    }

   for ( size_t _Bin = 1; _Bin < _Maxbin; ++ _Bin )
    _Binlist [ _Bin ] . merge ( _Binlist [ _Bin - 1 ] );
   splice ( begin ( ), _Binlist [ _Maxbin - 1 ] );
   }
  }

 template < class _Pr3 >
  void sort ( _Pr3 _Pred )
  {
  if ( 2 <= _Mysize )
   {
   const size_t _MAXBINS = 25;
   _Myt _Templist ( this -> _Alval ), _Binlist [ _MAXBINS + 1 ];
   size_t _Maxbin = 0;

   while ( ! empty ( ) )
    {
    _Templist . _Splice ( _Templist . begin ( ), * this, begin ( ),
     ++ begin ( ), 1, true );

    size_t _Bin;
    for ( _Bin = 0; _Bin < _Maxbin && ! _Binlist [ _Bin ] . empty ( );
     ++ _Bin )
     {
     _Binlist [ _Bin ] . merge ( _Templist, _Pred );
     _Binlist [ _Bin ] . swap ( _Templist );
     }

    if ( _Bin == _MAXBINS )
     _Binlist [ _Bin - 1 ] . merge ( _Templist, _Pred );
    else
     {
     _Binlist [ _Bin ] . swap ( _Templist );
     if ( _Bin == _Maxbin )
      ++ _Maxbin;
     }
    }

   for ( size_t _Bin = 1; _Bin < _Maxbin; ++ _Bin )
    _Binlist [ _Bin ] . merge ( _Binlist [ _Bin - 1 ],
     _Pred );
   splice ( begin ( ), _Binlist [ _Maxbin - 1 ] );
   }
  }

 void reverse ( )
  {
  if ( 2 <= _Mysize )
   {
   iterator _Last = end ( );
   for ( iterator _Next = ++ begin ( ); _Next != _Last; )
    {
    iterator _Before = _Next;
    _Splice ( begin ( ), * this, _Before, ++ _Next, 1 );
    }
   }
  }

 void _Splice ( const_iterator _Where,
  _Myt & _Right, const_iterator _First, const_iterator _Last,
  size_type _Count, bool _Keep = false )
  {










        _Keep;
  if ( this -> _Alval == _Right . _Alval )
   {


   if ( this != & _Right )
    {
    _Incsize ( _Count );
    _Right . _Mysize -= _Count;
    }
   _Nextnode ( _Prevnode ( _First . _Mynode ( ) ) ) = _Last . _Mynode ( );
   _Nextnode ( _Prevnode ( _Last . _Mynode ( ) ) ) = _Where . _Mynode ( );
   _Nextnode ( _Prevnode ( _Where . _Mynode ( ) ) ) = _First . _Mynode ( );
   _Nodeptr _Pnode = _Prevnode ( _Where . _Mynode ( ) );
   _Prevnode ( _Where . _Mynode ( ) ) = _Prevnode ( _Last . _Mynode ( ) );
   _Prevnode ( _Last . _Mynode ( ) ) = _Prevnode ( _First . _Mynode ( ) );
   _Prevnode ( _First . _Mynode ( ) ) = _Pnode;
   }
  else
   {
   insert ( _Where, _First, _Last );
   _Right . erase ( _First, _Last );
   }
        }

protected :
 void _Assign_n ( size_type _Count, const _Ty & _Val )
  {
  _Ty _Tmp = _Val;
  clear ( );
  _Insert_n ( begin ( ), _Count, _Tmp );
  }

 _Nodeptr _Buynode ( )
  {
  _Nodeptr _Pnode = this -> _Alnod . allocate ( 1 );
  int _Linkcnt = 0;

  try {
  this -> _Alptr . construct ( & _Nextnode ( _Pnode ), _Pnode );
  ++ _Linkcnt;
  this -> _Alptr . construct ( & _Prevnode ( _Pnode ), _Pnode );
  } catch ( ... ) {
  if ( 0 < _Linkcnt )
   this -> _Alptr . destroy ( & _Nextnode ( _Pnode ) );
  this -> _Alnod . deallocate ( _Pnode, 1 );
  throw;
  }
  return ( _Pnode );
  }

 _Nodeptr _Buynode ( _Nodeptr _Next,
  _Nodeptr _Prev, const _Ty & _Val )
  {
  _Nodeptr _Pnode = this -> _Alnod . allocate ( 1 );
  int _Linkcnt = 0;

  try {
  this -> _Alptr . construct ( & _Nextnode ( _Pnode ), _Next );
  ++ _Linkcnt;
  this -> _Alptr . construct ( & _Prevnode ( _Pnode ), _Prev );
  ++ _Linkcnt;
  this -> _Alval . construct ( & _Myval ( _Pnode ), _Val );
  } catch ( ... ) {
  if ( 1 < _Linkcnt )
   this -> _Alptr . destroy ( & _Prevnode ( _Pnode ) );
  if ( 0 < _Linkcnt )
   this -> _Alptr . destroy ( & _Nextnode ( _Pnode ) );
  this -> _Alnod . deallocate ( _Pnode, 1 );
  throw;
  }
  return ( _Pnode );
  }

 void _Tidy ( )
  {
  clear ( );
  this -> _Alptr . destroy ( & _Nextnode ( _Myhead ) );
  this -> _Alptr . destroy ( & _Prevnode ( _Myhead ) );
  this -> _Alnod . deallocate ( _Myhead, 1 );
  _Myhead = 0;
  }

 void _Insert_n ( const_iterator _Where,
  size_type _Count, const _Ty & _Val )
  {
  size_type _Countsave = _Count;

  try {
  for (; 0 < _Count; -- _Count )
   _Insert ( _Where, _Val );
  } catch ( ... ) {
  for (; _Count < _Countsave; ++ _Count )
   {
   const_iterator _Before = _Where;
   erase ( -- _Before );
   }
  throw;
  }
  }

 void _Incsize ( size_type _Count )
  {
  if ( max_size ( ) - _Mysize < _Count )
   throw length_error ( "list<T> too long" );
  _Mysize += _Count;
  }

 static void _Xran ( )
  {
  throw out_of_range ( "invalid list<T> subscript" );
  }

 static void _Xinvarg ( )
  {
  throw invalid_argument ( "invalid list<T> argument" );
  }


















 _Nodeptr _Myhead;
 size_type _Mysize;
 };
#line 1277 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\list"
template<class _Ty, class _Ax> 
class _Move_operation_category< list< _Ty, _Ax> >  { 


public: typedef _Swap_move_tag _Move_cat; 
}; 

template < class _Ty,
 class _Alloc > inline
 void swap ( list < _Ty, _Alloc > & _Left, list < _Ty, _Alloc > & _Right )
 {
 _Left . swap ( _Right );
 }

template < class _Ty,
 class _Alloc > inline
 bool operator == ( const list < _Ty, _Alloc > & _Left,
  const list < _Ty, _Alloc > & _Right )
 {
 return ( _Left . size ( ) == _Right . size ( )
  && equal ( _Left . begin ( ), _Left . end ( ), _Right . begin ( ) ) );
 }

template < class _Ty,
 class _Alloc > inline
 bool operator != ( const list < _Ty, _Alloc > & _Left,
  const list < _Ty, _Alloc > & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }

template < class _Ty,
 class _Alloc > inline
 bool operator < ( const list < _Ty, _Alloc > & _Left,
  const list < _Ty, _Alloc > & _Right )
 {
 return ( lexicographical_compare ( _Left . begin ( ), _Left . end ( ),
  _Right . begin ( ), _Right . end ( ) ) );
 }

template < class _Ty,
 class _Alloc > inline
 bool operator > ( const list < _Ty, _Alloc > & _Left,
  const list < _Ty, _Alloc > & _Right )
 {
 return ( _Right < _Left );
 }

template < class _Ty,
 class _Alloc > inline
 bool operator <= ( const list < _Ty, _Alloc > & _Left,
  const list < _Ty, _Alloc > & _Right )
 {
 return ( ! ( _Right < _Left ) );
 }

template < class _Ty,
 class _Alloc > inline
 bool operator >= ( const list < _Ty, _Alloc > & _Left,
  const list < _Ty, _Alloc > & _Right )
 {
 return ( ! ( _Left < _Right ) );
 }

#pragma warning(default:4284)
#line 1347 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\list"
}


#pragma pack ( pop )
#line 22 "../trimesh2/include\\TriMesh.h"
using std::vector;



class TriMesh { 

protected: static bool read_helper(const char *, TriMesh *); 



public: struct Face { 
int v[3]; 
float speedInv; 
float T[3]; 
Vec< 3, float>  edgeLens; 

Face() { } 
Face(const int &v0, const int &v1, const int &v2) 
{ 
((this->v)[0]) = v0; ((this->v)[1]) = v1; ((this->v)[2]) = v2; 
} 
Face(const int *v_) 
{ 
((this->v)[0]) = v_[0]; ((this->v)[1]) = v_[1]; ((this->v)[2]) = v_[2]; 
} 
int &operator[](int i) { return (this->v)[i]; } 
const int &operator[](int i) const { return (this->v)[i]; } 
operator const int *() const { return this->v + 0; } 
operator const int *() { return this->v + 0; } 
operator int *() { return this->v + 0; } 
int indexof(int v_) const 
{ 
return (((this->v)[0]) == v_) ? 0 : ((((this->v)[1]) == v_) ? 1 : ((((this->v)[2]) == v_) ? 2 : (-1))); 


} 
}; 

struct BBox { 
point min; point max; 
point center() const { return ((0.5F) * ((this->min) + (this->max))); } 
vec size() const { return ((this->max) - (this->min)); } 
bool valid; 
BBox() : valid(false) 
{ } 
}; 

struct BSphere { 
point center; 
float r; 
bool valid; 
BSphere() : valid(false) 
{ } 
}; 


enum tstrip_rep { TSTRIP_LENGTH, TSTRIP_TERM}; 
enum __cuda_GRID_INVALID { GRID_INVALID = (-1)}; 


std::vector< Vec< 3, float> , std::allocator< Vec< 3, float> > >  vertices; 
std::vector< Face, std::allocator< Face> >  faces; 


std::vector< int, std::allocator< int> >  tstrips; 


std::vector< int, std::allocator< int> >  grid; 
int grid_width; int grid_height; 


std::vector< Color, std::allocator< Color> >  colors; 
std::vector< float, std::allocator< float> >  confidences; 
std::vector< unsigned, std::allocator< unsigned> >  flags; 
unsigned flag_curr; 


std::vector< Vec< 3, float> , std::allocator< Vec< 3, float> > >  normals; 
std::vector< Vec< 3, float> , std::allocator< Vec< 3, float> > >  pdir1; std::vector< Vec< 3, float> , std::allocator< Vec< 3, float> > >  pdir2; 
std::vector< float, std::allocator< float> >  curv1; std::vector< float, std::allocator< float> >  curv2; 
std::vector< Vec< 4, float> , std::allocator< Vec< 4, float> > >  dcurv; 
std::vector< Vec< 3, float> , std::allocator< Vec< 3, float> > >  cornerareas; 
std::vector< float, std::allocator< float> >  pointareas; 
std::vector< float, std::allocator< float> >  vertT; 


BBox bbox; 
BSphere bsphere; 

std::vector< float, std::allocator< float> >  noiseOnVert; 

std::vector< std::vector< Face, std::allocator< Face> > , std::allocator< std::vector< Face, std::allocator< Face> > > >  faceVirtualFaces; 



std::vector< std::vector< int, std::allocator< int> > , std::allocator< std::vector< int, std::allocator< int> > > >  neighbors; 

std::vector< std::vector< int *, std::allocator< int *> > , std::allocator< std::vector< int *, std::allocator< int *> > > >  NonObtuseNeighborFaces; 


std::vector< std::vector< int, std::allocator< int> > , std::allocator< std::vector< int, std::allocator< int> > > >  adjacentfaces; 



std::vector< Face, std::allocator< Face> >  across_edge; 


void need_tstrips(); 
void convert_strips(tstrip_rep); 
void unpack_tstrips(); 
void need_noise(); 
void need_speed(); 
void triangulate_grid(); 
void need_faces(); 
void need_faceedges(); 
void need_normals(); 
void need_pointareas(); 
void need_curvatures(); 
void need_dcurv(); 
void need_bbox(); 
void need_bsphere(); 
void need_neighbors(); 
void need_adjacentfaces(); 
void need_across_edge(); 
void need_face_virtual_faces(); 


static TriMesh *read(const char *); 
void write(const char *); 



float feature_size(); 



bool is_bdy(int v) 
{ 
if ((this->neighbors).empty()) { this->need_neighbors(); }  
if ((this->adjacentfaces).empty()) { this->need_adjacentfaces(); }  
return (this->neighbors)[(v)].size() != (this->adjacentfaces)[(v)].size(); 
} 


vec trinorm(int f) 
{ 
if ((this->faces).empty()) { this->need_faces(); }  
return ::trinorm((this->vertices)[((this->faces)[(f)][0])], (this->vertices)[((this->faces)[(f)][1])], (this->vertices)[((this->faces)[(f)][2])]); 

} 


bool IsNonObtuse(int v, Face f) 
{ 
auto int iV = f.indexof(v); 

auto point A = ((this->vertices)[(v)]); 
auto point B = ((this->vertices)[(f[((iV + 1) % 3)])]); 
auto point C = ((this->vertices)[(f[((iV + 2) % 3)])]); 

auto float a = dist(B, C); 
auto float b = dist(A, C); 
auto float c = dist(A, B); 

auto float angA = ((0.0)); 

if (((a > (0)) && (b > (0))) && (c > (0))) 
{ 
angA = acos(((b * b + c * c) - a * a) / (((2) * b) * c)); 
}  

return angA < ((3.1415926535897931) / ((2.0F))); 

} 


void SplitFace(std::vector< Face, std::allocator< Face> >  &acFaces, int v, Face cf, int nfAdj) 
{ 
#line 209
auto int iV = cf.indexof(v); 
auto int v1 = v; 
auto int v2 = (cf[((iV + 1) % 3)]); 
auto int v4 = (cf[((iV + 2) % 3)]); 
iV = (this->faces)[(nfAdj)].indexof(v2); 
auto int v3 = ((this->faces)[(nfAdj)][((iV + 1) % 3)]); 


auto Face f1(v1, v3, v4); 
#line 223
auto Face f2(v1, v2, v3); 
#line 229
if (this->IsNonObtuse(v, f1)) 
{ 
switch (1) 
{ 


case 2: 
(f1.speedInv) = ((abs((this->curv1)[(f1[0])] + (this->curv2)[(f1[0])]) + abs((this->curv1)[(f1[1])] + (this->curv2)[(f1[1])])) + abs((this->curv1)[(f1[2])] + (this->curv2)[(f1[2])])) / (6); 
break;
case 1: 
(f1.speedInv) = ((1.0)); 
break;
case 3: 
(f1.speedInv) = (((this->noiseOnVert)[(f1[0])] + (this->noiseOnVert)[(f1[1])]) + (this->noiseOnVert)[(f1[2])]) / (3); 
break;
default: 
(f1.speedInv) = ((1.0)); 
break;

}  

auto point edge01 = (((this->vertices)[(f1[1])] - (this->vertices)[(f1[0])])); 
auto point edge12 = (((this->vertices)[(f1[2])] - (this->vertices)[(f1[1])])); 
auto point edge20 = (((this->vertices)[(f1[0])] - (this->vertices)[(f1[2])])); 
(f1.edgeLens)[0] = sqrt((edge01[0] * edge01[0] + edge01[1] * edge01[1]) + edge01[2] * edge01[2]); 
(f1.edgeLens)[1] = sqrt((edge12[0] * edge12[0] + edge12[1] * edge12[1]) + edge12[2] * edge12[2]); 
(f1.edgeLens)[2] = sqrt((edge20[0] * edge20[0] + edge20[1] * edge20[1]) + edge20[2] * edge20[2]); 
acFaces.push_back(f1); 
} else 

{ 
auto int nfAdj_new = ((this->across_edge)[(nfAdj)][(this->faces)[(nfAdj)].indexof(v2)]); 
if (nfAdj_new > (-1)) { 
this->SplitFace(acFaces, v, f1, nfAdj_new); } else { 

printf("NO cross edge!!! Maybe a hole!!\n"); }  


}  

if (this->IsNonObtuse(v, f2)) 
{ 
switch (1) 
{ 


case 2: 
(f2.speedInv) = ((abs((this->curv1)[(f2[0])] + (this->curv2)[(f2[0])]) + abs((this->curv1)[(f2[1])] + (this->curv2)[(f2[1])])) + abs((this->curv1)[(f2[2])] + (this->curv2)[(f2[2])])) / (6); 
break;
case 1: 
(f2.speedInv) = ((1.0)); 
break;
case 3: 
(f2.speedInv) = (((this->noiseOnVert)[(f2[0])] + (this->noiseOnVert)[(f2[1])]) + (this->noiseOnVert)[(f2[2])]) / (3); 
break;
default: 
(f2.speedInv) = ((1.0)); 
break;

}  
auto point edge01 = (((this->vertices)[(f2[1])] - (this->vertices)[(f2[0])])); 
auto point edge12 = (((this->vertices)[(f2[2])] - (this->vertices)[(f2[1])])); 
auto point edge20 = (((this->vertices)[(f2[0])] - (this->vertices)[(f2[2])])); 
(f2.edgeLens)[0] = sqrt((edge01[0] * edge01[0] + edge01[1] * edge01[1]) + edge01[2] * edge01[2]); 
(f2.edgeLens)[1] = sqrt((edge12[0] * edge12[0] + edge12[1] * edge12[1]) + edge12[2] * edge12[2]); 
(f2.edgeLens)[2] = sqrt((edge20[0] * edge20[0] + edge20[1] * edge20[1]) + edge20[2] * edge20[2]); 
acFaces.push_back(f2); 
} else 

{ 
auto int nfAdj_new = ((this->across_edge)[(nfAdj)][(this->faces)[(nfAdj)].indexof(v4)]); 
if (nfAdj_new > (-1)) { 
this->SplitFace(acFaces, v, f2, nfAdj_new); } else { 

printf("NO cross edge!!! Maybe a hole!!\n"); }  
}  
} 


std::vector< Face, std::allocator< Face> >  GetOneRing(int v) 
{ 

if ((this->across_edge).empty()) { 
this->need_across_edge(); }  


auto std::vector< Face, std::allocator< Face> >  oneRingFaces; 
auto std::vector< Face, std::allocator< Face> >  t_faces; 


auto int naf = ((this->adjacentfaces)[(v)].size()); 

if (!(naf)) 
{ 
((((std::cout << ("vertex ")) << v) << (" has 0 adjacent faces...")) << (std::endl)); 
} else 

{ 
for (int af = 0; af < naf; af++) 
{ 
auto Face cf = ((this->faces)[((this->adjacentfaces)[(v)][(af)])]); 

t_faces.clear(); 
if (this->IsNonObtuse(v, cf)) 
{ 
t_faces.push_back(cf); 
} else 

{ 
auto int nfae = ((this->across_edge)[((this->adjacentfaces)[(v)][(af)])][cf.indexof(v)]); 
this->SplitFace(t_faces, v, cf, nfae); 
}  

for (int tf = 0; tf < t_faces.size(); tf++) 
{ 
oneRingFaces.push_back(t_faces[(tf)]); 
}  
}  
}  

return oneRingFaces; 
} 



void InitializeAttributes(std::vector< int, std::allocator< int> >  seeds = std::vector< int, std::allocator< int> > ()) 
{ 

auto int nv = ((this->vertices).size()); 

for (int v = 0; v < nv; v++) 
{ 
(this->vertT).push_back(((10000000.0))); 
}  




if (!seeds.empty()) 
{ 
auto int ns = (seeds.size()); 
for (int s = 0; s < ns; s++) 
{ 
(this->vertT)[(seeds[(s)])] = ((0.0)); 


}  


}  


this->need_neighbors(); 
this->need_normals(); 
this->need_adjacentfaces(); 
this->need_across_edge(); 
this->need_faces(); 
this->need_face_virtual_faces(); 


auto int nf = ((this->faces).size()); 
for (int f = 0; f < nf; f++) 
{ 
auto Face cf = ((this->faces)[(f)]); 


(((this->faces)[(f)].T)[0]) = (this->vertT)[(cf[0])]; 
(((this->faces)[(f)].T)[1]) = (this->vertT)[(cf[1])]; 
(((this->faces)[(f)].T)[2]) = (this->vertT)[(cf[2])]; 



}  
} 


static int verbose; 
static void set_verbose(int); 
static int dprintf(const char *, ...); 


TriMesh() : grid_width((-1)), grid_height((-1)), flag_curr((0)) 
{ } 
}; 
#line 30 "d:\\lab2\\fim\\meshfim_cuda_partition_color_square_modifiedb_modifieddatastucture_globalco\\trimesh2\\include\\lineqn.h"
template<class T, int N> static inline bool 
ludcmp(T a[][N], int indx[], T *d = (0)) 
{ 
auto int i; auto int j; auto int k; 
auto T vv[N]; 

if (d) { 
(*d) = 1; }  
for (i = 0; i < N; i++) { 
auto T big = (0.0); 
for (j = 0; j < N; j++) { 
auto T tmp = (fabs((a[i])[j])); 
if (tmp > big) { 
big = tmp; }  
}  
if (big == (0.0)) { 
return false; }  
(vv[i]) = (1.0) / big; 
}  
for (j = 0; j < N; j++) { 
for (i = 0; i < j; i++) { 
auto T sum = ((a[i])[j]); 
for (k = 0; k < i; k++) { 
sum -= (a[i])[k] * (a[k])[j]; }  
((a[i])[j]) = sum; 
}  
auto T big = (0.0); 
auto int imax = j; 
for (i = j; i < N; i++) { 
auto T sum = ((a[i])[j]); 
for (k = 0; k < j; k++) { 
sum -= (a[i])[k] * (a[k])[j]; }  
((a[i])[j]) = sum; 
auto T tmp = (vv[i] * fabs(sum)); 
if (tmp > big) { 
big = tmp; 
imax = i; 
}  
}  
if (imax != j) { 
for (k = 0; k < N; k++) { 
std::swap((a[imax])[k], (a[j])[k]); }  
if (d) { 
(*d) = -(*d); }  
(vv[imax]) = vv[j]; 
}  
(indx[j]) = imax; 
if ((a[j])[j] == (0.0)) { 
return false; }  
if (j != (N - 1)) { 
auto T tmp = ((1.0) / (a[j])[j]); 
for (i = j + 1; i < N; i++) { 
((a[i])[j]) *= tmp; }  
}  
}  
return true; 
} 



template<class T, int N> static inline void 
lubksb(T a[][N], int indx[], T b[]) 
{ 
auto int ii = (-1); auto int i; auto int j; 
for (i = 0; i < N; i++) { 
auto int ip = (indx[i]); 
auto T sum = (b[ip]); 
(b[ip]) = b[i]; 
if (ii != (-1)) { 
for (j = ii; j < i; j++) { 
sum -= (a[i])[j] * b[j]; }  } else { 
if (sum) { 
ii = i; }  }  
(b[i]) = sum; 
}  
for (i = N - 1; i >= 0; i--) { 
auto T sum = (b[i]); 
for (j = i + 1; j < N; j++) { 
sum -= (a[i])[j] * b[j]; }  
(b[i]) = sum / (a[i])[i]; 
}  
} 




template<class T, int N> static inline bool 
ldltdc(T A[][N], T rdiag[]) 
{ 
auto T v[(N - 1)]; 
for (int i = 0; i < N; i++) { 
for (int k = 0; k < i; k++) { 
(v[k]) = (A[i])[k] * rdiag[k]; }  
for (int j = i; j < N; j++) { 
auto T sum = ((A[i])[j]); 
for (int k = 0; k < i; k++) { 
sum -= v[k] * (A[j])[k]; }  
if (i == j) { 
if (sum <= ((T)(0))) { 
return false; }  
(rdiag[i]) = ((T)(1)) / sum; 
} else { 
((A[j])[i]) = sum; 
}  
}  
}  

return true; 
} 



template<class T, int N> static inline void 
ldltsl(T A[][N], T rdiag[], T B[], T x[]) 
{ 
auto int i; 
for (i = 0; i < N; i++) { 
auto T sum = (B[i]); 
for (int k = 0; k < i; k++) { 
sum -= (A[i])[k] * x[k]; }  
(x[i]) = sum * rdiag[i]; 
}  
for (i = N - 1; i >= 0; i--) { 
auto T sum = 0; 
for (int k = (i + 1); k < N; k++) { 
sum += (A[k])[i] * x[k]; }  
(x[i]) -= sum * rdiag[i]; 
}  
} 
#line 166
template<class T, int N> static inline void 
eigdc(T A[][N], T d[]) 
{ 

auto T e[N]; 
for (int j = 0; j < N; j++) { 
(d[j]) = (A[N - 1])[j]; 
(e[j]) = (0.0); 
}  
for (int i = (N - 1); i > 0; i--) { 
auto T scale = (0.0); 
for (int k = 0; k < i; k++) { 
scale += std::fabs(d[k]); }  
if (scale == (0.0)) { 
(e[i]) = d[i - 1]; 
for (int j = 0; j < i; j++) { 
(d[j]) = (A[i - 1])[j]; 
((A[i])[j]) = (((A[j])[i]) = (0.0)); 
}  
(d[i]) = (0.0); 
} else { 
auto T h(0); 
auto T invscale = ((T)((1.0) / scale)); 
for (int k = 0; k < i; k++) { 
(d[k]) *= invscale; 
h += sqr(d[k]); 
}  
auto T f = (d[i - 1]); 
auto T g = ((f > (0.0)) ? (-std::sqrt(h)) : (std::sqrt(h))); 
(e[i]) = scale * g; 
h -= f * g; 
(d[i - 1]) = f - g; 
for (int j = 0; j < i; j++) { 
(e[j]) = (0.0); }  
for (int j = 0; j < i; j++) { 
f = d[j]; 
((A[j])[i]) = f; 
g = e[j] + f * (A[j])[j]; 
for (int k = (j + 1); k < i; k++) { 
g += (A[k])[j] * d[k]; 
(e[k]) += (A[k])[j] * f; 
}  
(e[j]) = g; 
}  
f = (0.0); 
auto T invh = ((T)((1.0) / h)); 
for (int j = 0; j < i; j++) { 
(e[j]) *= invh; 
f += e[j] * d[j]; 
}  
auto T hh = (f / (h + h)); 
for (int j = 0; j < i; j++) { 
(e[j]) -= hh * d[j]; }  
for (int j = 0; j < i; j++) { 
f = d[j]; 
g = e[j]; 
for (int k = j; k < i; k++) { 
((A[k])[j]) -= f * e[k] + g * d[k]; }  
(d[j]) = (A[i - 1])[j]; 
((A[i])[j]) = (0.0); 
}  
(d[i]) = h; 
}  
}  

for (int i = 0; i < (N - 1); i++) { 
((A[N - 1])[i]) = (A[i])[i]; 
((A[i])[i]) = (1.0); 
auto T h = (d[i + 1]); 
if (h != (0.0)) { 
auto T invh = ((T)((1.0) / h)); 
for (int k = 0; k <= i; k++) { 
(d[k]) = (A[k])[i + 1] * invh; }  
for (int j = 0; j <= i; j++) { 
auto T g = (0.0); 
for (int k = 0; k <= i; k++) { 
g += (A[k])[i + 1] * (A[k])[j]; }  
for (int k = 0; k <= i; k++) { 
((A[k])[j]) -= g * d[k]; }  
}  
}  
for (int k = 0; k <= i; k++) { 
((A[k])[i + 1]) = (0.0); }  
}  
for (int j = 0; j < N; j++) { 
(d[j]) = (A[N - 1])[j]; 
((A[N - 1])[j]) = (0.0); 
}  
((A[N - 1])[N - 1]) = (1.0); 


for (int i = 1; i < N; i++) { 
(e[i - 1]) = e[i]; }  
(e[N - 1]) = (0.0); 
auto T f = (0.0); auto T tmp = (0.0); 
auto const T eps = (((T)(pow((2.0), -(52.0))))); 
for (int l = 0; l < N; l++) { 
tmp = std::max(tmp, std::fabs(d[l]) + std::fabs(e[l])); 
auto int m = l; 
while (m < N) { 
if (std::fabs(e[m]) <= eps * tmp) { 
break; }  
m++; 
}  
if (m > l) { 
do { 
auto T g = (d[l]); 
auto T p = ((d[l + 1] - g) / (e[l] + e[l])); 
auto T r = ((T)(hypot(p, (1.0)))); 
if (p < (0.0)) { 
r = -r; }  
(d[l]) = e[l] / (p + r); 
(d[l + 1]) = e[l] * (p + r); 
auto T dl1 = (d[l + 1]); 
auto T h = (g - d[l]); 
for (int i = (l + 2); i < N; i++) { 
(d[i]) -= h; }  
f += h; 
p = d[m]; 
auto T c = (1.0); auto T c2 = (1.0); auto T c3 = (1.0); 
auto T el1 = (e[l + 1]); auto T s = (0.0); auto T s2 = (0.0); 
for (int i = (m - 1); i >= l; i--) { 
c3 = c2; 
c2 = c; 
s2 = s; 
g = c * e[i]; 
h = c * p; 
r = ((T)(hypot(p, e[i]))); 
(e[i + 1]) = s * r; 
s = e[i] / r; 
c = p / r; 
p = c * d[i] - s * g; 
(d[i + 1]) = h + s * (c * g + s * d[i]); 
for (int k = 0; k < N; k++) { 
h = (A[k])[i + 1]; 
((A[k])[i + 1]) = s * (A[k])[i] + c * h; 
((A[k])[i]) = c * (A[k])[i] - s * h; 
}  
}  
p = ((((-s * s2) * c3) * el1) * e[l]) / dl1; 
(e[l]) = s * p; 
(d[l]) = c * p; 
} while (std::fabs(e[l]) > eps * tmp); 
}  
(d[l]) += f; 
(e[l]) = (0.0); 
}  


for (int i = 0; i < (N - 1); i++) { { 
auto int k = i; 
auto T p = (d[i]); 
for (int j = (i + 1); j < N; j++) { 
if (d[j] < p) { 
k = j; 
p = d[j]; 
}  
}  
if (k == i) { 
continue; }  
(d[k]) = d[i]; 
(d[i]) = p; 
for (int j = 0; j < N; j++) { 
p = (A[j])[i]; 
((A[j])[i]) = (A[j])[k]; 
((A[j])[k]) = p; 
}  
} }  
} 



template<class T, int N> static inline void 
eigmult(T A[][N], T 
d[], T 
b[], T 
x[]) 
{ 
auto T e[N]; 
for (int i = 0; i < N; i++) { 
(e[i]) = (0.0); 
for (int j = 0; j < N; j++) { 
(e[i]) += (A[j])[i] * b[j]; }  
(e[i]) *= d[i]; 
}  
for (int i = 0; i < N; i++) { 
(x[i]) = (0.0); 
for (int j = 0; j < N; j++) { 
(x[i]) += (A[i])[j] * e[j]; }  
}  
} 
#line 10 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\fstream"
#pragma warning(push,3)
#pragma warning(disable: 4127)
#line 9
#pragma pack ( push, 8 )
#line 14 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\fstream"
namespace std { 

extern ::_iobuf *__cdecl _Fiopen(const char *, ios_base::openmode, int); 

extern ::_iobuf *__cdecl _Fiopen(const __wchar_t *, ios_base::openmode, int); 



extern ::_iobuf *__cdecl _Fiopen(const unsigned short *, ios_base::openmode, int); 
#line 27 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\fstream"
template < class _Elem > inline
 bool _Fgetc ( _Elem & _Ch, _iobuf * _File )
 {
 return ( fread ( & _Ch, sizeof ( _Elem ), 1, _File ) == 1 );
 }

template<> inline bool _Fgetc(char &_Byte, ::_iobuf *_File) 
{ 
auto int _Meta; 
if ((_Meta = fgetc(_File)) == (-1)) { 
return false; } else 

{ 
_Byte = (char)_Meta; 
return true; 
}  
} 

template<> inline bool _Fgetc(__wchar_t &_Wchar, ::_iobuf *_File) 
{ 
auto wint_t _Meta; 
if ((_Meta = ::fgetwc(_File)) == ((wint_t)65535)) { 
return false; } else 

{ 
_Wchar = (__wchar_t)_Meta; 
return true; 
}  
} 



template < class _Elem > inline
 bool _Fputc ( _Elem _Ch, _iobuf * _File )
 {
 return ( fwrite ( & _Ch, 1, sizeof ( _Elem ), _File ) == sizeof ( _Elem ) );
 }

template<> inline bool _Fputc(char _Byte, ::_iobuf *_File) 
{ 
return fputc(_Byte, _File) != (-1); 
} 

template<> inline bool _Fputc(__wchar_t _Wchar, ::_iobuf *_File) 
{ 
return (::fputwc(_Wchar, _File)) != ((wint_t)65535); 
} 



template < class _Elem > inline
 bool _Ungetc ( const _Elem & _Ch, _iobuf * _File )
 {
 return ( false );
 }

template<> inline bool _Ungetc(const char &_Byte, ::_iobuf *_File) 
{ 
return ungetc((unsigned char)(_Byte), _File) != (-1); 
} 

template<> inline bool _Ungetc(const signed char &_Byte, ::_iobuf *_File) 
{ 
return ungetc((unsigned char)(_Byte), _File) != (-1); 
} 

template<> inline bool _Ungetc(const unsigned char &_Byte, ::_iobuf *_File) 
{ 
return ungetc(_Byte, _File) != (-1); 
} 

template<> inline bool _Ungetc(const __wchar_t &_Wchar, ::_iobuf *_File) 
{ 
return (::ungetwc(_Wchar, _File)) != ((wint_t)65535); 
} 



template < class _Elem,
 class _Traits >
 class basic_filebuf
  : public basic_streambuf < _Elem, _Traits >
 {
public :
 typedef basic_filebuf < _Elem, _Traits > _Myt;
 typedef basic_streambuf < _Elem, _Traits > _Mysb;
 typedef typename _Traits :: state_type _Myst;
 typedef codecvt < _Elem, char, typename _Traits :: state_type > _Cvt;

 virtual ~ basic_filebuf ( )
  {
  if ( _Closef )
   close ( );
  }

  basic_filebuf ( _iobuf * _File = 0 )
  : _Mysb ( )
  {
  _Init ( _File, _Newfl );
  }

 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;

  basic_filebuf ( _Uninitialized )
  : _Mysb ( _Noinit )
  {
  }

 enum _Initfl
  {
  _Newfl, _Openfl, _Closefl };

 bool is_open ( ) const
  {
  return ( _Myfile != 0 );
  }

 _Myt * open ( const char * _Filename,
  ios_base :: openmode _Mode,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  _iobuf * _File;
  if ( _Myfile != 0 || ( _File = _Fiopen ( _Filename, _Mode, _Prot ) ) == 0 )
   return ( 0 );

  _Init ( _File, _Openfl );
  _Initcvt ( ( _Cvt * ) & use_facet < _Cvt > ( _Mysb :: getloc ( ) ) );
  return ( this );
  }

 _Myt * open ( const char * _Filename, ios_base :: open_mode _Mode )
  {
  return ( open ( _Filename, ( ios_base :: openmode ) _Mode ) );
  }

 _Myt * open ( const wchar_t * _Filename,
  ios_base :: openmode _Mode,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  _iobuf * _File;
  if ( _Myfile != 0 || ( _File = _Fiopen ( _Filename, _Mode, _Prot ) ) == 0 )
   return ( 0 );

  _Init ( _File, _Openfl );
  _Initcvt ( ( _Cvt * ) & use_facet < _Cvt > ( _Mysb :: getloc ( ) ) );
  return ( this );
  }

 _Myt * open ( const wchar_t * _Filename, ios_base :: open_mode _Mode )
  {
  return ( open ( _Filename, ( ios_base :: openmode ) _Mode ) );
  }


 _Myt * open ( const unsigned short * _Filename,
  ios_base :: openmode _Mode,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  _iobuf * _File;
  if ( _Myfile != 0 || ( _File = _Fiopen ( _Filename, _Mode, _Prot ) ) == 0 )
   return ( 0 );

  _Init ( _File, _Openfl );
  _Initcvt ( ( _Cvt * ) & use_facet < _Cvt > ( _Mysb :: getloc ( ) ) );
  return ( this );
  }

 _Myt * open ( const unsigned short * _Filename, ios_base :: open_mode _Mode )
  {
  return ( open ( _Filename, ( ios_base :: openmode ) _Mode ) );
  }


 _Myt * close ( )
  {
  _Myt * _Ans = this;
  if ( _Myfile == 0 )
   _Ans = 0;
  else
   {
   if ( ! _Endwrite ( ) )
    _Ans = 0;
   if ( fclose ( _Myfile ) != 0 )
    _Ans = 0;
   }
  _Init ( 0, _Closefl );
  return ( _Ans );
  }

protected :
 virtual int_type overflow ( int_type _Meta = _Traits :: eof ( ) )
  {
  if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
   return ( _Traits :: not_eof ( _Meta ) );
  else if ( _Mysb :: pptr ( ) != 0
   && _Mysb :: pptr ( ) < _Mysb :: epptr ( ) )
   {
   * _Mysb :: _Pninc ( ) = _Traits :: to_char_type ( _Meta );
   return ( _Meta );
   }
  else if ( _Myfile == 0 )
   return ( _Traits :: eof ( ) );
  else if ( _Pcvt == 0 )
   return ( _Fputc ( _Traits :: to_char_type ( _Meta ), _Myfile )
    ? _Meta : _Traits :: eof ( ) );
  else
   {
   const int _STRING_INC = 8;
   const _Elem _Ch = _Traits :: to_char_type ( _Meta );
   const _Elem * _Src;
   char * _Dest;

   string _Str ( _STRING_INC, '\000' );
   for (;; )
    switch ( _Pcvt -> out ( _State,
     & _Ch, & _Ch + 1, _Src,
     & * _Str . begin ( ), & * _Str . begin ( ) + _Str . size ( ), _Dest ) )
    {
    case codecvt_base :: partial :
    case codecvt_base :: ok :
     {
     size_t _Count = _Dest - & * _Str . begin ( );
     if ( 0 < _Count && _Count !=
      fwrite ( & * _Str . begin ( ), 1, _Count, _Myfile ) )
      return ( _Traits :: eof ( ) );

     _Wrotesome = true;
     if ( _Src != & _Ch )
      return ( _Meta );

     if ( 0 < _Count )
      ;
     else if ( _Str . size ( ) < 4 * _STRING_INC )
      _Str . append ( _STRING_INC, '\000' );
     else
      return ( _Traits :: eof ( ) );
     break;
     }

    case codecvt_base :: noconv :
     return ( _Fputc ( _Ch, _Myfile ) ? _Meta
      : _Traits :: eof ( ) );

    default :
     return ( _Traits :: eof ( ) );
    }
   }
  }

 virtual int_type pbackfail ( int_type _Meta = _Traits :: eof ( ) )
  {
  if ( _Mysb :: gptr ( ) != 0
   && _Mysb :: eback ( ) < _Mysb :: gptr ( )
   && ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta )
   || _Traits :: eq_int_type ( _Traits :: to_int_type ( _Mysb :: gptr ( ) [ - 1 ] ),
    _Meta ) ) )
   {
   _Mysb :: _Gndec ( );
   return ( _Traits :: not_eof ( _Meta ) );
   }
  else if ( _Myfile == 0 || _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
   return ( _Traits :: eof ( ) );
  else if ( _Pcvt == 0 && _Ungetc ( _Traits :: to_char_type ( _Meta ), _Myfile ) )
   return ( _Meta );
#pragma warning(push)
#pragma warning(disable: 6237 6239)

  else if ( 1 < sizeof ( _Elem ) && _Mysb :: gptr ( ) != & _Mychar )
#pragma warning(pop)
   {
   _Mychar = _Traits :: to_char_type ( _Meta );
   _Mysb :: setg ( & _Mychar, & _Mychar, & _Mychar + 1 );
   return ( _Meta );
   }
  else
   return ( _Traits :: eof ( ) );
  }

 virtual int_type underflow ( )
  {
  int_type _Meta;
  if ( _Mysb :: gptr ( ) != 0
   && _Mysb :: gptr ( ) < _Mysb :: egptr ( ) )
   return ( _Traits :: to_int_type ( * _Mysb :: gptr ( ) ) );
  else if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta = uflow ( ) ) )
   return ( _Meta );
  else
   {
   pbackfail ( _Meta );
   return ( _Meta );
   }
  }

 virtual int_type uflow ( )
  {
  if ( _Mysb :: gptr ( ) != 0
   && _Mysb :: gptr ( ) < _Mysb :: egptr ( ) )
   return ( _Traits :: to_int_type (
    * _Mysb :: _Gninc ( ) ) );
  else if ( _Myfile == 0 )
   return ( _Traits :: eof ( ) );
  else if ( _Pcvt == 0 )
   {
   _Elem _Ch;
   return ( _Fgetc ( _Ch, _Myfile ) ? _Traits :: to_int_type ( _Ch )
    : _Traits :: eof ( ) );
   }
  else
   {
   string _Str;

   for (;; )
    {
    _Elem _Ch, * _Dest;
    const char * _Src;
    ptrdiff_t _Nleft;
    int _Meta = fgetc ( _Myfile );

    if ( _Meta == ( - 1 ) )
     return ( _Traits :: eof ( ) );

    _Str . append ( 1, ( char ) _Meta );
    switch ( _Pcvt -> in ( _State,
     & * _Str . begin ( ), & * _Str . begin ( ) + _Str . size ( ), _Src,
     & _Ch, & _Ch + 1, _Dest ) )
     {
    case codecvt_base :: partial :
    case codecvt_base :: ok :
     if ( _Dest != & _Ch )
      {
      _Nleft = ( int ) ( & * _Str . begin ( ) + _Str . size ( ) - _Src );
      for (; 0 < _Nleft; )
       ungetc ( _Src [ -- _Nleft ], _Myfile );
      return ( _Traits :: to_int_type ( _Ch ) );
      }
     else
      _Str . erase ( ( size_t ) 0,
       ( size_t ) ( _Src - & * _Str . begin ( ) ) );
     break;

    case codecvt_base :: noconv :
     if ( _Str . size ( ) < sizeof ( _Elem ) )
      break;

     :: memcpy_s ( ( & _Ch ), ( sizeof ( _Elem ) ), ( & * _Str . begin ( ) ), ( sizeof ( _Elem ) ) );

     return ( _Traits :: to_int_type ( _Ch ) );

    default :
     return ( _Traits :: eof ( ) );
     }
    }
   }
  }

 virtual pos_type seekoff ( off_type _Off,
  ios_base :: seekdir _Way,
  ios_base :: openmode =
   ( ios_base :: openmode ) ( ios_base :: in | ios_base :: out ) )
  {
  fpos_t _Fileposition;

  if ( _Mysb :: gptr ( ) == & _Mychar
   && _Way == ios_base :: cur
   && _Pcvt == 0 )
   _Off -= ( off_type ) sizeof ( _Elem );

  if ( _Myfile == 0 || ! _Endwrite ( )
   || ( _Off != 0 || _Way != ios_base :: cur )
    && fseek ( _Myfile, ( long ) _Off, _Way ) != 0
   || fgetpos ( _Myfile, & _Fileposition ) != 0 )
   return ( pos_type ( _BADOFF ) );

  if ( _Mysb :: gptr ( ) == & _Mychar )
   _Mysb :: setg ( & _Mychar, & _Mychar + 1,
    & _Mychar + 1 );
  return ( pos_type ( _State, _Fileposition ) );

  }

 virtual pos_type seekpos ( pos_type _Pos,
  ios_base :: openmode =
   ( ios_base :: openmode ) ( ios_base :: in | ios_base :: out ) )
  {
  fpos_t _Fileposition = _Pos . seekpos ( );
  off_type _Off = ( off_type ) _Pos - ( off_type ) ( ( long ) ( _Fileposition ) );

  if ( _Myfile == 0 || ! _Endwrite ( )
   || fsetpos ( _Myfile, & _Fileposition ) != 0
   || _Off != 0 && fseek ( _Myfile, ( long ) _Off, 1 ) != 0
   || fgetpos ( _Myfile, & _Fileposition ) != 0 )
   return ( pos_type ( _BADOFF ) );

  _State = _Pos . state ( );

  if ( _Mysb :: gptr ( ) == & _Mychar )
   _Mysb :: setg ( & _Mychar, & _Mychar + 1,
    & _Mychar + 1 );
  return ( pos_type ( _State, _Fileposition ) );

  }

 virtual _Mysb * setbuf ( _Elem * _Buffer, streamsize _Count )
  {
  if ( _Myfile == 0 || setvbuf ( _Myfile, ( char * ) _Buffer,
   _Buffer == 0 && _Count == 0 ? 4 : 0,
   _Count * sizeof ( _Elem ) ) != 0 )
   return ( 0 );
  else
   {
   _Init ( _Myfile, _Openfl );
   return ( this );
   }
  }

 virtual int sync ( )
  {
  return ( _Myfile == 0
   || _Traits :: eq_int_type ( _Traits :: eof ( ), overflow ( ) )
   || 0 <= fflush ( _Myfile ) ? 0 : - 1 );
  }

 virtual void imbue ( const locale & _Loc )
  {
  _Initcvt ( ( _Cvt * ) & use_facet < _Cvt > ( _Loc ) );
  }

 void _Init ( _iobuf * _File, _Initfl _Which )
  {
   static _Myst _Stinit;
  _Closef = _Which == _Openfl;
  _Wrotesome = false;

  _Mysb :: _Init ( );






#pragma warning(push)
#pragma warning(disable: 6240)

  if ( _File != 0 && sizeof ( _Elem ) == 1 )
#pragma warning(pop)
   {
   _Elem * * _Pb = ( _Elem * * ) & _File -> _base;
   _Elem * * _Pn = ( _Elem * * ) & _File -> _ptr;
   int * _Nr = ( int * ) & _File -> _cnt;
   int * _Nw = ( int * ) & _File -> _cnt;
   _Mysb :: _Init ( _Pb, _Pn, _Nr, _Pb, _Pn, _Nw );
   }

  _Myfile = _File;
  _State = _Stinit;
  _Pcvt = 0;
  }

 bool _Endwrite ( )
  {
  if ( _Pcvt == 0 || ! _Wrotesome )
   return ( true );
  else
   {
   const int _STRING_INC = 8;
   char * _Dest;
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ), overflow ( ) ) )
    return ( false );

   string _Str ( _STRING_INC, '\000' );
   for (;; )
    switch ( _Pcvt -> unshift ( _State,
     & * _Str . begin ( ), & * _Str . begin ( ) + _Str . size ( ), _Dest ) )
    {
    case codecvt_base :: ok :
     _Wrotesome = false;

    case codecvt_base :: partial :
     {
     size_t _Count = _Dest - & * _Str . begin ( );
     if ( 0 < _Count && _Count !=
      fwrite ( & * _Str . begin ( ), 1, _Count, _Myfile ) )
      return ( false );
     if ( ! _Wrotesome )
      return ( true );
     if ( _Count == 0 )
      _Str . append ( _STRING_INC, '\000' );
     break;
     }

    case codecvt_base :: noconv :
     return ( true );

    default :
     return ( false );
    }
   }
  }

 void _Initcvt ( _Cvt * _Newpcvt )
  {
  if ( _Newpcvt -> always_noconv ( ) )
   _Pcvt = 0;
  else
   {
   _Pcvt = _Newpcvt;
   _Mysb :: _Init ( );
   }
  }

private :
 _Cvt * _Pcvt;
 _Elem _Mychar;
 bool _Wrotesome;
 typename _Traits :: state_type _State;
 bool _Closef;
 _iobuf * _Myfile;
 };
#line 563 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\fstream"
template < class _Elem,
 class _Traits >
 class basic_ifstream
  : public basic_istream < _Elem, _Traits >
 {
public :
 typedef basic_ifstream < _Elem, _Traits > _Myt;
 typedef basic_filebuf < _Elem, _Traits > _Myfb;
 typedef basic_ios < _Elem, _Traits > _Myios;

  basic_ifstream ( )
  : basic_istream < _Elem, _Traits > ( & _Filebuffer )
  {
  }

 explicit basic_ifstream ( const char * _Filename,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  : basic_istream < _Elem, _Traits > ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: in, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 explicit basic_ifstream ( const wchar_t * _Filename,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  : basic_istream < _Elem, _Traits > ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: in, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }


 explicit basic_ifstream ( const unsigned short * _Filename,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  : basic_istream < _Elem, _Traits > ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: in, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }


 explicit basic_ifstream ( _iobuf * _File )
  : basic_istream < _Elem, _Traits > ( & _Filebuffer ),
   _Filebuffer ( _File )
  {
  }

 void open ( const wchar_t * _Filename,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: in, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 void open ( const wchar_t * _Filename, ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }


 void open ( const unsigned short * _Filename,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: in, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 void open ( const unsigned short * _Filename, ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }


 virtual ~ basic_ifstream ( )
  {
  }

 _Myfb * rdbuf ( ) const
  {
  return ( ( _Myfb * ) & _Filebuffer );
  }

 bool is_open ( ) const
  {
  return ( _Filebuffer . is_open ( ) );
  }

 void open ( const char * _Filename,
  ios_base :: openmode _Mode = ios_base :: in,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: in, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 void open ( const char * _Filename, ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }

 void close ( )
  {
  if ( _Filebuffer . close ( ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

private :
 _Myfb _Filebuffer;
 };
#line 690 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\fstream"
template < class _Elem,
 class _Traits >
 class basic_ofstream
  : public basic_ostream < _Elem, _Traits >
 {
public :
 typedef basic_ofstream < _Elem, _Traits > _Myt;
 typedef basic_filebuf < _Elem, _Traits > _Myfb;
 typedef basic_ios < _Elem, _Traits > _Myios;

  basic_ofstream ( )
  : basic_ostream < _Elem, _Traits > ( & _Filebuffer )
  {
  }

 explicit basic_ofstream ( const char * _Filename,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : basic_ostream < _Elem, _Traits > ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: out, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 explicit basic_ofstream ( const wchar_t * _Filename,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : basic_ostream < _Elem, _Traits > ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: out, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }


 explicit basic_ofstream ( const unsigned short * _Filename,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : basic_ostream < _Elem, _Traits > ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: out, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }


 explicit basic_ofstream ( _iobuf * _File )
  : basic_ostream < _Elem, _Traits > ( & _Filebuffer ),
   _Filebuffer ( _File )
  {
  }

 virtual ~ basic_ofstream ( )
  {
  }

 _Myfb * rdbuf ( ) const
  {
  return ( ( _Myfb * ) & _Filebuffer );
  }

 bool is_open ( ) const
  {
  return ( _Filebuffer . is_open ( ) );
  }

 void open ( const wchar_t * _Filename,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: out, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 void open ( const wchar_t * _Filename, ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }


 void open ( const unsigned short * _Filename,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: out, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 void open ( const unsigned short * _Filename, ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }


 void open ( const char * _Filename,
  ios_base :: openmode _Mode = ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: out, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 void open ( const char * _Filename, ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }

 void close ( )
  {
  if ( _Filebuffer . close ( ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

private :
 _Myfb _Filebuffer;
 };
#line 817 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\fstream"
template < class _Elem,
 class _Traits >
 class basic_fstream
  : public basic_iostream < _Elem, _Traits >
 {
public :
 typedef basic_fstream < _Elem, _Traits > _Myt;
 typedef basic_ios < _Elem, _Traits > _Myios;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;

  basic_fstream ( )
  : basic_iostream < _Elem, _Traits > ( & _Filebuffer )
  {
  }

 explicit basic_fstream ( const char * _Filename,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : basic_iostream < _Elem, _Traits > ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 explicit basic_fstream ( const wchar_t * _Filename,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : basic_iostream < _Elem, _Traits > ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }


 explicit basic_fstream ( const unsigned short * _Filename,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  : basic_iostream < _Elem, _Traits > ( & _Filebuffer )
  {
  if ( _Filebuffer . open ( _Filename, _Mode, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }


 explicit basic_fstream ( _iobuf * _File )
  : basic_iostream < _Elem, _Traits > ( & _Filebuffer ),
   _Filebuffer ( _File )
  {
  }

 void open ( const wchar_t * _Filename,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 void open ( const wchar_t * _Filename, ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }


 void open ( const unsigned short * _Filename,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 void open ( const unsigned short * _Filename, ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }


 virtual ~ basic_fstream ( )
  {
  }

 basic_filebuf < _Elem, _Traits > * rdbuf ( ) const
  {
  return ( ( basic_filebuf < _Elem, _Traits > * ) & _Filebuffer );
  }

 bool is_open ( ) const
  {
  return ( _Filebuffer . is_open ( ) );
  }

 void open ( const char * _Filename,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
  int _Prot = ( int ) ios_base :: _Openprot )
  {
  if ( _Filebuffer . open ( _Filename, _Mode, _Prot ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

 void open ( const char * _Filename, ios_base :: open_mode _Mode )
  {
  open ( _Filename, ( ios_base :: openmode ) _Mode );
  }

 void close ( )
  {
  if ( _Filebuffer . close ( ) == 0 )
   _Myios :: setstate ( ios_base :: failbit );
  }

private :
 basic_filebuf < _Elem, _Traits > _Filebuffer;
 };
#line 946 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\fstream"
}


#pragma warning(default: 4127)
#line 953 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\fstream"
#pragma warning(pop)
#line 10 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\string"
#pragma warning(push,3)
#pragma warning(disable: 4189)
#line 954 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\fstream"
#pragma pack ( pop )
#line 9 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\string"
#pragma pack ( push, 8 )
#line 14 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\string"
namespace std { 


template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > __cdecl operator + (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( basic_string < _Elem, _Traits, _Alloc > ( _Left ) += _Right );
 }

template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > __cdecl operator + (
  const _Elem * _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( basic_string < _Elem, _Traits, _Alloc > ( _Left ) += _Right );
 }

template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > __cdecl operator + (
  const _Elem _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( basic_string < _Elem, _Traits, _Alloc > ( 1, _Left ) += _Right );
 }

template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > __cdecl operator + (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const _Elem * _Right )
 {
 return ( basic_string < _Elem, _Traits, _Alloc > ( _Left ) += _Right );
 }

template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_string < _Elem, _Traits, _Alloc > __cdecl operator + (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const _Elem _Right )
 {
 return ( basic_string < _Elem, _Traits, _Alloc > ( _Left ) += _Right );
 }

template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool __cdecl operator == (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( _Left . compare ( _Right ) == 0 );
 }

template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool __cdecl operator == (
  const _Elem * _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( _Right . compare ( _Left ) == 0 );
 }

template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool __cdecl operator == (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const _Elem * _Right )
 {
 return ( _Left . compare ( _Right ) == 0 );
 }

template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool __cdecl operator != (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }

template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool __cdecl operator != (
  const _Elem * _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }

template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool __cdecl operator != (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const _Elem * _Right )
 {
 return ( ! ( _Left == _Right ) );
 }

template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool __cdecl operator < (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( _Left . compare ( _Right ) < 0 );
 }

template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool __cdecl operator < (
  const _Elem * _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( _Right . compare ( _Left ) > 0 );
 }

template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool __cdecl operator < (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const _Elem * _Right )
 {
 return ( _Left . compare ( _Right ) < 0 );
 }

template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool __cdecl operator > (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( _Right < _Left );
 }

template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool __cdecl operator > (
  const _Elem * _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( _Right < _Left );
 }

template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool __cdecl operator > (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const _Elem * _Right )
 {
 return ( _Right < _Left );
 }

template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool __cdecl operator <= (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( ! ( _Right < _Left ) );
 }

template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool __cdecl operator <= (
  const _Elem * _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( ! ( _Right < _Left ) );
 }

template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool __cdecl operator <= (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const _Elem * _Right )
 {
 return ( ! ( _Right < _Left ) );
 }

template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool __cdecl operator >= (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( ! ( _Left < _Right ) );
 }

template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool __cdecl operator >= (
  const _Elem * _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( ! ( _Left < _Right ) );
 }

template < class _Elem,
 class _Traits,
 class _Alloc > inline
 bool __cdecl operator >= (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const _Elem * _Right )
 {
 return ( ! ( _Left < _Right ) );
 }
#line 421 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\string"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_istream < _Elem, _Traits > & __cdecl operator >> (
  basic_istream < _Elem, _Traits > & _Istr,
  basic_string < _Elem, _Traits, _Alloc > & _Str )
 {
 typedef ctype < _Elem > _Ctype;
 typedef basic_istream < _Elem, _Traits > _Myis;
 typedef basic_string < _Elem, _Traits, _Alloc > _Mystr;
 typedef typename _Mystr :: size_type _Mysizt;

 ios_base :: iostate _State = ios_base :: goodbit;
 bool _Changed = false;
 const typename _Myis :: sentry _Ok ( _Istr );

 if ( _Ok )
  {
  const _Ctype & _Ctype_fac = use_facet < _Ctype > ( _Istr . getloc ( ) );
  _Str . erase ( );

  try {
  _Mysizt _Size = 0 < _Istr . width ( )
   && ( _Mysizt ) _Istr . width ( ) < _Str . max_size ( )
    ? ( _Mysizt ) _Istr . width ( ) : _Str . max_size ( );
  typename _Traits :: int_type _Meta = _Istr . rdbuf ( ) -> sgetc ( );

  for (; 0 < _Size; -- _Size, _Meta = _Istr . rdbuf ( ) -> snextc ( ) )
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
    {
    _State |= ios_base :: eofbit;
    break;
    }
   else if ( _Ctype_fac . is ( _Ctype :: space,
    _Traits :: to_char_type ( _Meta ) ) )
    break;
   else
    {
    _Str . append ( 1, _Traits :: to_char_type ( _Meta ) );
    _Changed = true;
    }
  } catch ( ... ) { ( _Istr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Istr . width ( 0 );
 if ( ! _Changed )
  _State |= ios_base :: failbit;
 _Istr . setstate ( _State );
 return ( _Istr );
 }

template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_istream < _Elem, _Traits > & __cdecl getline (
  basic_istream < _Elem, _Traits > & _Istr,
  basic_string < _Elem, _Traits, _Alloc > & _Str,
  const _Elem _Delim )
 {
 typedef basic_istream < _Elem, _Traits > _Myis;
 ios_base :: iostate _State = ios_base :: goodbit;
 bool _Changed = false;
 const typename _Myis :: sentry _Ok ( _Istr, true );

 if ( _Ok )
  {
  try {
  _Str . erase ( );
  const typename _Traits :: int_type _Metadelim =
   _Traits :: to_int_type ( _Delim );
  typename _Traits :: int_type _Meta = _Istr . rdbuf ( ) -> sgetc ( );

  for (;; _Meta = _Istr . rdbuf ( ) -> snextc ( ) )
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
    {
    _State |= ios_base :: eofbit;
    break;
    }
   else if ( _Traits :: eq_int_type ( _Meta, _Metadelim ) )
    {
    _Changed = true;
    _Istr . rdbuf ( ) -> sbumpc ( );
    break;
    }
   else if ( _Str . max_size ( ) <= _Str . size ( ) )
    {
    _State |= ios_base :: failbit;
    break;
    }
   else
    {
    _Str += _Traits :: to_char_type ( _Meta );
    _Changed = true;
    }
  } catch ( ... ) { ( _Istr ) . setstate ( ios_base :: badbit, true ); }
  }

 if ( ! _Changed )
  _State |= ios_base :: failbit;
 _Istr . setstate ( _State );
 return ( _Istr );
 }

template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_istream < _Elem, _Traits > & __cdecl getline (
  basic_istream < _Elem, _Traits > & _Istr,
  basic_string < _Elem, _Traits, _Alloc > & _Str )
 {
 return ( getline ( _Istr, _Str, _Istr . widen ( '\n' ) ) );
 }

template < class _Elem,
 class _Traits,
 class _Alloc > inline
 basic_ostream < _Elem, _Traits > & __cdecl operator << (
  basic_ostream < _Elem, _Traits > & _Ostr,
  const basic_string < _Elem, _Traits, _Alloc > & _Str )
 {
 typedef basic_ostream < _Elem, _Traits > _Myos;
 typedef basic_string < _Elem, _Traits, _Alloc > _Mystr;
 typedef typename _Mystr :: size_type _Mysizt;

 ios_base :: iostate _State = ios_base :: goodbit;
 _Mysizt _Size = _Str . size ( );
 _Mysizt _Pad = _Ostr . width ( ) <= 0 || ( _Mysizt ) _Ostr . width ( ) <= _Size
   ? 0 : ( _Mysizt ) _Ostr . width ( ) - _Size;
 const typename _Myos :: sentry _Ok ( _Ostr );

 if ( ! _Ok )
  _State |= ios_base :: badbit;
 else
  {
 try {
  if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }

  if ( _State == ios_base :: goodbit )
   for ( _Mysizt _Count = 0; _Count < _Size; ++ _Count )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Str [ _Count ] ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }

  if ( _State == ios_base :: goodbit )
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }
  _Ostr . width ( 0 );
  } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Ostr . setstate ( _State );
 return ( _Ostr );
 }
#line 631
}


#pragma warning(default: 4189)
#pragma warning(pop)
#pragma pack ( pop )
#line 37 "d:\\lab2\\fim\\meshfim_cuda_partition_color_square_modifiedb_modifieddatastucture_globalco\\trimesh2\\include\\XForm.h"
using std::swap;


template<class T> 
class XForm { 

T m[16]; 



public: XForm(const T m0 = 1, const T m1 = 0, const T m2 = 0, const T m3 = 0, const T 
m4 = 0, const T m5 = 1, const T m6 = 0, const T m7 = 0, const T 
m8 = 0, const T m9 = 0, const T m10 = 1, const T m11 = 0, const T 
m12 = 0, const T m13 = 0, const T m14 = 0, const T m15 = 1) 
{ 
((this->m)[0]) = m0; ((this->m)[1]) = m1; ((this->m)[2]) = m2; ((this->m)[3]) = m3; 
((this->m)[4]) = m4; ((this->m)[5]) = m5; ((this->m)[6]) = m6; ((this->m)[7]) = m7; 
((this->m)[8]) = m8; ((this->m)[9]) = m9; ((this->m)[10]) = m10; ((this->m)[11]) = m11; 
((this->m)[12]) = m12; ((this->m)[13]) = m13; ((this->m)[14]) = m14; ((this->m)[15]) = m15; 
} 
template<class S> explicit XForm(const S &x) 
{ for (int i = 0; i < 16; i++) { ((this->m)[i]) = x[i]; }  } 




const T operator[](int i) const 
{ return (this->m)[i]; } 
T &operator[](int i) 
{ return (this->m)[i]; } 
operator const T *() const 
{ return this->m; } 
operator const T *() 
{ return this->m; } 
operator T *() 
{ return this->m; } 


static ::XForm< T>  identity() 
{ return ::XForm< T> (); } 
static ::XForm< T>  trans(const T &tx, const T &ty, const T &tz) 
{ return ::XForm< T> (1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, tx, ty, tz, 1); } 
template<class S> static ::XForm< T>  trans(const S &t) 
{ return ::XForm< T> ::trans(t[0], t[1], t[2]); } 
static ::XForm< T>  rot(const T &angle, const T &
rx, const T &ry, const T &rz) 
{ 

auto T l = (sqrt((rx * rx + ry * ry) + rz * rz)); 
if (l == ((T)(0))) { 
return ::XForm< T> (); }  
auto T l1 = (((T)(1)) / l); auto T x = (rx * l1); auto T y = (ry * l1); auto T z = (rz * l1); 
auto T s = (sin(angle)); auto T c = (cos(angle)); 
auto T xs = (x * s); auto T ys = (y * s); auto T zs = (z * s); auto T c1 = (((T)(1)) - c); 
auto T xx = ((c1 * x) * x); auto T yy = ((c1 * y) * y); auto T zz = ((c1 * z) * z); 
auto T xy = ((c1 * x) * y); auto T xz = ((c1 * x) * z); auto T yz = ((c1 * y) * z); 
return ::XForm< T> (xx + c, xy + zs, xz - ys, 0, xy - zs, yy + c, yz + xs, 0, xz + ys, yz - xs, zz + c, 0, 0, 0, 0, 1); 



} 
template<class S> static ::XForm< T>  rot(const T &angle, const S &axis) 
{ return ::XForm< T> ::rot(angle, axis[0], axis[1], axis[2]); } 
static ::XForm< T>  scale(const T &s) 
{ return ::XForm< T> (s, 0, 0, 0, 0, s, 0, 0, 0, 0, s, 0, 0, 0, 0, 1); } 
static ::XForm< T>  scale(const T &sx, const T &sy, const T &sz) 
{ return ::XForm< T> (sx, 0, 0, 0, 0, sy, 0, 0, 0, 0, sz, 0, 0, 0, 0, 1); } 
static ::XForm< T>  scale(const T &s, const T &dx, const T &dy, const T &dz) 
{ 
auto T dlen2 = ((dx * dx + dy * dy) + dz * dz); 
auto T s1 = ((s - ((T)(1))) / dlen2); 
return ::XForm< T> (((T)(1)) + (s1 * dx) * dx, (s1 * dx) * dy, (s1 * dx) * dz, 0, (s1 * dx) * dy, ((T)(1)) + (s1 * dy) * dy, (s1 * dy) * dz, 0, (s1 * dx) * dz, (s1 * dy) * dz, ((T)(1)) + (s1 * dz) * dz, 0, 0, 0, 0, 1); 



} 
template<class S> static ::XForm< T>  scale(const T &s, const S &dir) 
{ return ::XForm< T> ::scale(s, dir[0], dir[1], dir[2]); } 


bool read(const std::string &filename) 
{ 
auto std::ifstream f(filename.c_str()); 
auto ::XForm< T>  M; 
f >> M; 
f.close(); 
if (f.good()) { 
(*this) = M; 
return true; 
}  
return false; 
} 


bool write(const std::string &filename) const 
{ 
auto std::ofstream f(filename.c_str()); 
f << (*this); 
f.close(); 
return f.good(); 
} 
}; 

typedef XForm< double>  xform; 



template<class T> static inline XForm< T>  
operator*(const XForm< T>  &xf1, const XForm< T>  &xf2) 
{ 
return XForm< T> (((xf1[0] * xf2[0] + xf1[4] * xf2[1]) + xf1[8] * xf2[2]) + xf1[12] * xf2[3], ((xf1[1] * xf2[0] + xf1[5] * xf2[1]) + xf1[9] * xf2[2]) + xf1[13] * xf2[3], ((xf1[2] * xf2[0] + xf1[6] * xf2[1]) + xf1[10] * xf2[2]) + xf1[14] * xf2[3], ((xf1[3] * xf2[0] + xf1[7] * xf2[1]) + xf1[11] * xf2[2]) + xf1[15] * xf2[3], ((xf1[0] * xf2[4] + xf1[4] * xf2[5]) + xf1[8] * xf2[6]) + xf1[12] * xf2[7], ((xf1[1] * xf2[4] + xf1[5] * xf2[5]) + xf1[9] * xf2[6]) + xf1[13] * xf2[7], ((xf1[2] * xf2[4] + xf1[6] * xf2[5]) + xf1[10] * xf2[6]) + xf1[14] * xf2[7], ((xf1[3] * xf2[4] + xf1[7] * xf2[5]) + xf1[11] * xf2[6]) + xf1[15] * xf2[7], ((xf1[0] * xf2[8] + xf1[4] * xf2[9]) + xf1[8] * xf2[10]) + xf1[12] * xf2[11], ((xf1[1] * xf2[8] + xf1[5] * xf2[9]) + xf1[9] * xf2[10]) + xf1[13] * xf2[11], ((xf1[2] * xf2[8] + xf1[6] * xf2[9]) + xf1[10] * xf2[10]) + xf1[14] * xf2[11], ((xf1[3] * xf2[8] + xf1[7] * xf2[9]) + xf1[11] * xf2[10]) + xf1[15] * xf2[11], ((xf1[0] * xf2[12] + xf1[4] * xf2[13]) + xf1[8] * xf2[14]) + xf1[12] * xf2[15], ((xf1[1] * xf2[12] + xf1[5] * xf2[13]) + xf1[9] * xf2[14]) + xf1[13] * xf2[15], ((xf1[2] * xf2[12] + xf1[6] * xf2[13]) + xf1[10] * xf2[14]) + xf1[14] * xf2[15], ((xf1[3] * xf2[12] + xf1[7] * xf2[13]) + xf1[11] * xf2[14]) + xf1[15] * xf2[15]); 
#line 165
} 




template<class T> static inline bool 
operator==(const XForm< T>  &xf1, const XForm< T>  &xf2) 
{ 
for (int i = 0; i < 16; i++) { 
if (xf1[i] != xf2[i]) { 
return false; }  }  
return true; 
} 

template<class T> static inline bool 
operator!=(const XForm< T>  &xf1, const XForm< T>  &xf2) 
{ 
for (int i = 0; i < 16; i++) { 
if (xf1[i] != xf2[i]) { 
return true; }  }  
return false; 
} 



template<class T> static inline XForm< T>  
inv(const XForm< T>  &xf) 
{ 
auto T A[4][4] = {{(xf[0]), (xf[4]), (xf[8]), (xf[12])}, {(xf[1]), (xf[5]), (xf[9]), (xf[13])}, {(xf[2]), (xf[6]), (xf[10]), (xf[14])}, {(xf[3]), (xf[7]), (xf[11]), (xf[15])}}; 



auto int ind[4]; 
ludcmp< T, 4> (A, ind); 
auto T B[4][4] = {{1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0, 1}}; 



for (int i = 0; i < 4; i++) { 
lubksb< T, 4> (A, ind, B[i]); }  
return XForm< T> ((B[0])[0], (B[0])[1], (B[0])[2], (B[0])[3], (B[1])[0], (B[1])[1], (B[1])[2], (B[1])[3], (B[2])[0], (B[2])[1], (B[2])[2], (B[2])[3], (B[3])[0], (B[3])[1], (B[3])[2], (B[3])[3]); 



} 

template<class T> static inline void 
invert(XForm< T>  &xf) 
{ 
xf = inv(xf); 
} 

template<class T> static inline XForm< T>  
rot_only(const XForm< T>  &xf) 
{ 
return XForm< T> (xf[0], xf[1], xf[2], 0, xf[4], xf[5], xf[6], 0, xf[8], xf[9], xf[10], 0, 0, 0, 0, 1); 



} 

template<class T> static inline XForm< T>  
trans_only(const XForm< T>  &xf) 
{ 
return XForm< T> (1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, xf[12], xf[13], xf[14], 1); 



} 

template<class T> static inline XForm< T>  
norm_xf(const XForm< T>  &xf) 
{ 
auto XForm< T>  M = inv(xf); 
(M[12]) = ((M[13]) = ((M[14]) = ((T)(0)))); 
swap(M[1], M[4]); 
swap(M[2], M[8]); 
swap(M[6], M[9]); 
return M; 
} 

template<class T> static inline void 
orthogonalize(XForm< T>  &xf) 
{ 
if (xf[15] == ((T)(0))) { 
(xf[15]) = ((T)(1)); }  

auto T q0 = (((xf[0] + xf[5]) + xf[10]) + xf[15]); 
auto T q1 = (xf[6] - xf[9]); 
auto T q2 = (xf[8] - xf[2]); 
auto T q3 = (xf[1] - xf[4]); 
auto T l = (sqrt(((q0 * q0 + q1 * q1) + q2 * q2) + q3 * q3)); 

auto XForm< T>  M = XForm< T> ::rot(((T)(2)) * acos(q0 / l), q1, q2, q3); 
(M[12]) = xf[12] / xf[15]; 
(M[13]) = xf[13] / xf[15]; 
(M[14]) = xf[14] / xf[15]; 

xf = M; 
} 



template<class S, class T> static inline const S 
operator*(const XForm< T>  &xf, const S &v) 
{ 
auto T h = (((xf[3] * v[0] + xf[7] * v[1]) + xf[11] * v[2]) + xf[15]); 
h = ((T)(1)) / h; 

return S((float)(h * (((xf[0] * v[0] + xf[4] * v[1]) + xf[8] * v[2]) + xf[12])), (float)(h * (((xf[1] * v[0] + xf[5] * v[1]) + xf[9] * v[2]) + xf[13])), (float)(h * (((xf[2] * v[0] + xf[6] * v[1]) + xf[10] * v[2]) + xf[14]))); 


} 


template<class T> static inline std::ostream &
operator<<(std::ostream &os, const XForm< T>  &m) 
{ 
for (int i = 0; i < 4; i++) { 
for (int j = 0; j < 4; j++) { 
os << (m[i + 4 * j]); 
if (j == 3) { 
(os << (std::endl)); } else { 

(os << (" ")); }  
}  
}  
return os; 
} 
template<class T> static inline std::istream &
operator>>(std::istream &is, XForm< T>  &m) 
{ 
for (int i = 0; i < 4; i++) { 
for (int j = 0; j < 4; j++) { 
is >> (m[i + 4 * j]); }  }  
if (!is.good()) { 
m = xform::identity(); }  

return is; 
} 


static inline std::string xfname(const std::string &filename) 
{ 
auto std::string x = filename; 
auto std::basic_string< char, std::char_traits< char> , std::allocator< char> > ::size_type dot = x.rfind(".", x.length()); 
if (dot != std::string::npos) { 
x.erase(dot); }  
(x += ((std::string)(".xf"))); 
return x; 
} 
#line 18 "../trimesh2/include\\TriMesh_algo.h"
extern void edgeflip(TriMesh *); 


extern void faceflip(TriMesh *); 


extern void umbrella(TriMesh *, float); 


extern void lmsmooth(TriMesh *, int); 


extern void remove_vertices(TriMesh *, const std::vector< bool, std::allocator< bool> >  &); 


extern void remove_unused_vertices(TriMesh *); 



extern void remove_faces(TriMesh *, const std::vector< bool, std::allocator< bool> >  &); 



extern void remove_sliver_faces(TriMesh *); 


extern void remap_verts(TriMesh *, const std::vector< int, std::allocator< int> >  &); 



extern void reorder_verts(TriMesh *); 


enum __cuda_SUBDIV_PLANAR { SUBDIV_PLANAR, SUBDIV_LOOP, SUBDIV_LOOP_ORIG, SUBDIV_LOOP_NEW, 
SUBDIV_BUTTERFLY, SUBDIV_BUTTERFLY_MODIFIED}; 
extern void subdiv(TriMesh *, int = (SUBDIV_LOOP)); 


extern void smooth_mesh(TriMesh *, float); 


extern void bilateral_smooth_mesh(TriMesh *, float, float); 


extern void diffuse_normals(TriMesh *, float); 


extern void diffuse_curv(TriMesh *, float); 


extern void diffuse_dcurv(TriMesh *, float); 


extern void diagonalize_curv(const vec &, const vec &, float, float, float, const vec &, vec &, vec &, float &, float &); 
#line 79
extern void proj_curv(const vec &, const vec &, float, float, float, const vec &, const vec &, float &, float &, float &); 
#line 85
extern void proj_dcurv(const vec &, const vec &, const Vec< 4, float> , const vec &, const vec &, Vec< 4, float>  &); 
#line 91
extern void inflate(TriMesh *, float); 


extern void apply_xform(TriMesh *, const xform &); 


extern void trans(TriMesh *, const vec &); 


extern void rot(TriMesh *, float, const vec &); 


extern void scale(TriMesh *, float); 


extern void scale(TriMesh *, float, float, float); 


extern void scale(TriMesh *, float, const vec &); 


extern void clip(TriMesh *, const TriMesh::BBox &); 


extern point point_center_of_mass(const std::vector< Vec< 3, float> , std::allocator< Vec< 3, float> > >  &); 


extern point mesh_center_of_mass(TriMesh *); 


extern void point_covariance(const std::vector< Vec< 3, float> , std::allocator< Vec< 3, float> > >  &, float [3][3]); 


extern void mesh_covariance(TriMesh *, float [3][3]); 


extern void normalize_variance(TriMesh *); 



extern void pca_rotate(TriMesh *); 


extern void pca_snap(TriMesh *); 


extern void orient(TriMesh *); 


extern void erode(TriMesh *); 


extern void noisify(TriMesh *, float); 
#line 140 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\Windows.h"
#pragma warning(disable:4514)

#pragma warning(disable:4103)
#line 145 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\Windows.h"
#pragma warning(push)
#line 147 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\Windows.h"
#pragma warning(disable:4001)
#pragma warning(disable:4201)
#pragma warning(disable:4214)
#line 29 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\excpt.h"
#pragma pack ( push, 8 )
#line 44 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\excpt.h"
extern "C" { typedef 
#line 39
enum _EXCEPTION_DISPOSITION { 
ExceptionContinueExecution, 
ExceptionContinueSearch, 
ExceptionNestedException, 
ExceptionCollidedUnwind
} EXCEPTION_DISPOSITION; }
#line 56
struct _EXCEPTION_RECORD; 
struct _CONTEXT; 

extern "C" { extern EXCEPTION_DISPOSITION __cdecl _except_handler(_EXCEPTION_RECORD *, void *, _CONTEXT *, void *); } 
#line 110 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\excpt.h"
extern "C" { extern unsigned long __cdecl _exception_code(); } 
extern "C" { extern void *__cdecl _exception_info(); } 
extern "C" { extern int __cdecl _abnormal_termination(); } 
#line 132 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\excpt.h"
#pragma pack ( pop )
#line 48 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\windef.h"
extern "C" { typedef unsigned long ULONG; }
extern "C" { typedef ULONG *PULONG; }
extern "C" { typedef unsigned short USHORT; }
extern "C" { typedef USHORT *PUSHORT; }
extern "C" { typedef unsigned char UCHAR; }
extern "C" { typedef UCHAR *PUCHAR; }
extern "C" { typedef char *PSZ; }
#line 152 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\windef.h"
extern "C" { typedef unsigned long DWORD; }
extern "C" { typedef int BOOL; }
extern "C" { typedef unsigned char BYTE; }
extern "C" { typedef unsigned short WORD; }
extern "C" { typedef float FLOAT; }
extern "C" { typedef FLOAT *PFLOAT; }
extern "C" { typedef BOOL *PBOOL; }
extern "C" { typedef BOOL *LPBOOL; }
extern "C" { typedef BYTE *PBYTE; }
extern "C" { typedef BYTE *LPBYTE; }
extern "C" { typedef int *PINT; }
extern "C" { typedef int *LPINT; }
extern "C" { typedef WORD *PWORD; }
extern "C" { typedef WORD *LPWORD; }
extern "C" { typedef long *LPLONG; }
extern "C" { typedef DWORD *PDWORD; }
extern "C" { typedef DWORD *LPDWORD; }
extern "C" { typedef void *LPVOID; }
extern "C" { typedef const void *LPCVOID; }

extern "C" { typedef int INT; }
extern "C" { typedef unsigned UINT; }
extern "C" { typedef unsigned *PUINT; }
#line 16 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\specstrings_adt.h"
extern "C" { typedef char *ValidCompNameA; }
extern "C" { typedef unsigned short *ValidCompNameW; }
extern "C" { typedef const unsigned short *ConstValidCompNameW; }
extern "C" { typedef char *SAL_ValidCompNameT; }
extern "C" { typedef const char *SAL_ConstValidCompNameT; }
#line 40 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\basetsd.h"
extern "C" { typedef unsigned long POINTER_64_INT; }
#line 76 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\basetsd.h"
extern "C" { typedef signed char INT8; }extern "C" { typedef signed char *PINT8; }
extern "C" { typedef signed short INT16; }extern "C" { typedef signed short *PINT16; }
extern "C" { typedef signed int INT32; }extern "C" { typedef signed int *PINT32; }
extern "C" { typedef signed __int64 INT64; }extern "C" { typedef signed __int64 *PINT64; }
extern "C" { typedef unsigned char UINT8; }extern "C" { typedef unsigned char *PUINT8; }
extern "C" { typedef unsigned short UINT16; }extern "C" { typedef unsigned short *PUINT16; }
extern "C" { typedef unsigned UINT32; }extern "C" { typedef unsigned *PUINT32; }
extern "C" { typedef unsigned __int64 UINT64; }extern "C" { typedef unsigned __int64 *PUINT64; }
#line 89
extern "C" { typedef signed int LONG32; }extern "C" { typedef signed int *PLONG32; }
#line 95
extern "C" { typedef unsigned ULONG32; }extern "C" { typedef unsigned *PULONG32; }
extern "C" { typedef unsigned DWORD32; }extern "C" { typedef unsigned *PDWORD32; }
#line 135 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\basetsd.h"
extern "C" { typedef int __w64 INT_PTR; }extern "C" { typedef int __w64 *PINT_PTR; }
extern "C" { typedef unsigned __w64 UINT_PTR; }extern "C" { typedef unsigned __w64 *PUINT_PTR; }

extern "C" { typedef long __w64 LONG_PTR; }extern "C" { typedef long __w64 *PLONG_PTR; }
extern "C" { typedef unsigned long __w64 ULONG_PTR; }extern "C" { typedef unsigned long __w64 *PULONG_PTR; }
#line 334 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\basetsd.h"
extern "C" { typedef unsigned short UHALF_PTR; }extern "C" { typedef unsigned short *PUHALF_PTR; }
extern "C" { typedef short HALF_PTR; }extern "C" { typedef short *PHALF_PTR; }
extern "C" { typedef long __w64 SHANDLE_PTR; }
extern "C" { typedef unsigned long __w64 HANDLE_PTR; }
#line 357
extern "C" { __inline void *__ptr64 PtrToPtr64(const void *
p) 

{ 
return (void *__ptr64 )((unsigned __int64)((ULONG_PTR)p)); 
} } 



extern "C" { __inline void *Ptr64ToPtr(const void *__ptr64 
p) 

{ 
return (void *)((ULONG_PTR)((unsigned __int64)p)); 
} } 



extern "C" { __inline void *__ptr64 HandleToHandle64(const void *
h) 

{ 
return (void *__ptr64 )((__int64)((LONG_PTR)h)); 
} } 



extern "C" { __inline void *Handle64ToHandle(const void *__ptr64 
h) 

{ 
return (void *)((ULONG_PTR)((unsigned __int64)h)); 
} } 
#line 421 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\basetsd.h"
extern "C" { typedef ULONG_PTR SIZE_T; }extern "C" { typedef ULONG_PTR *PSIZE_T; }
extern "C" { typedef LONG_PTR SSIZE_T; }extern "C" { typedef LONG_PTR *PSSIZE_T; }
#line 470 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\basetsd.h"
extern "C" { typedef ULONG_PTR DWORD_PTR; }extern "C" { typedef ULONG_PTR *PDWORD_PTR; }
#line 476
extern "C" { typedef __int64 LONG64; }extern "C" { typedef __int64 *PLONG64; }
#line 483
extern "C" { typedef unsigned __int64 ULONG64; }extern "C" { typedef unsigned __int64 *PULONG64; }
extern "C" { typedef unsigned __int64 DWORD64; }extern "C" { typedef unsigned __int64 *PDWORD64; }
#line 490
extern "C" { typedef ULONG_PTR KAFFINITY; }
extern "C" { typedef KAFFINITY *PKAFFINITY; }
#line 235 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef void *PVOID; }
extern "C" { typedef void *__ptr64 PVOID64; }
#line 276 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef char CHAR; }
extern "C" { typedef short SHORT; }
extern "C" { typedef long LONG; }

extern "C" { typedef int INT; }
#line 289 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef __wchar_t WCHAR; }
#line 295 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef WCHAR *PWCHAR; }extern "C" { typedef WCHAR *LPWCH; }extern "C" { typedef WCHAR *PWCH; }
extern "C" { typedef const WCHAR *LPCWCH; }extern "C" { typedef const WCHAR *PCWCH; }
extern "C" { typedef WCHAR *NWPSTR; }extern "C" { typedef WCHAR *LPWSTR; }extern "C" { typedef WCHAR *PWSTR; }
extern "C" { typedef PWSTR *PZPWSTR; }
extern "C" { typedef const PWSTR *PCZPWSTR; }
extern "C" { typedef WCHAR *LPUWSTR; }extern "C" { typedef WCHAR *PUWSTR; }
extern "C" { typedef const WCHAR *LPCWSTR; }extern "C" { typedef const WCHAR *PCWSTR; }
extern "C" { typedef PCWSTR *PZPCWSTR; }
extern "C" { typedef const WCHAR *LPCUWSTR; }extern "C" { typedef const WCHAR *PCUWSTR; }




extern "C" { typedef const WCHAR *LPCWCHAR; }extern "C" { typedef const WCHAR *PCWCHAR; }
extern "C" { typedef const WCHAR *LPCUWCHAR; }extern "C" { typedef const WCHAR *PCUWCHAR; }
#line 315
extern "C" { typedef unsigned long UCSCHAR; }
#line 335
extern "C" { typedef UCSCHAR *PUCSCHAR; }
extern "C" { typedef const UCSCHAR *PCUCSCHAR; }

extern "C" { typedef UCSCHAR *PUCSSTR; }
extern "C" { typedef UCSCHAR *PUUCSSTR; }

extern "C" { typedef const UCSCHAR *PCUCSSTR; }
extern "C" { typedef const UCSCHAR *PCUUCSSTR; }

extern "C" { typedef UCSCHAR *PUUCSCHAR; }
extern "C" { typedef const UCSCHAR *PCUUCSCHAR; }
#line 353 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef CHAR *PCHAR; }extern "C" { typedef CHAR *LPCH; }extern "C" { typedef CHAR *PCH; }
extern "C" { typedef const CHAR *LPCCH; }extern "C" { typedef const CHAR *PCCH; }

extern "C" { typedef CHAR *NPSTR; }extern "C" { typedef CHAR *LPSTR; }extern "C" { typedef CHAR *PSTR; }
extern "C" { typedef PSTR *PZPSTR; }
extern "C" { typedef const PSTR *PCZPSTR; }
extern "C" { typedef const CHAR *LPCSTR; }extern "C" { typedef const CHAR *PCSTR; }
extern "C" { typedef PCSTR *PZPCSTR; }
#line 384
extern "C" { typedef char TCHAR; }extern "C" { typedef char *PTCHAR; }
extern "C" { typedef unsigned char TBYTE; }extern "C" { typedef unsigned char *PTBYTE; }
#line 389 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef LPCH LPTCH; }extern "C" { typedef LPCH PTCH; }
extern "C" { typedef LPSTR PTSTR; }extern "C" { typedef LPSTR LPTSTR; }extern "C" { typedef LPSTR PUTSTR; }extern "C" { typedef LPSTR LPUTSTR; }
extern "C" { typedef LPCSTR PCTSTR; }extern "C" { typedef LPCSTR LPCTSTR; }extern "C" { typedef LPCSTR PCUTSTR; }extern "C" { typedef LPCSTR LPCUTSTR; }
#line 398 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef SHORT *PSHORT; }
extern "C" { typedef LONG *PLONG; }


extern "C" { typedef void *HANDLE; }
#line 408 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef HANDLE *PHANDLE; }
#line 414
extern "C" { typedef BYTE FCHAR; }
extern "C" { typedef WORD FSHORT; }
extern "C" { typedef DWORD FLONG; }
#line 425
extern "C" { typedef long HRESULT; }
#line 486 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef char CCHAR; }
extern "C" { typedef DWORD LCID; }
extern "C" { typedef PDWORD PLCID; }
extern "C" { typedef WORD LANGID; }
#line 516 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 513
struct _FLOAT128 { 
__int64 LowPart; 
__int64 HighPart; 
} FLOAT128; }

extern "C" { typedef FLOAT128 *PFLOAT128; }
#line 528
extern "C" { typedef __int64 LONGLONG; }
extern "C" { typedef unsigned __int64 ULONGLONG; }
#line 550 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef LONGLONG *PLONGLONG; }
extern "C" { typedef ULONGLONG *PULONGLONG; }



extern "C" { typedef LONGLONG USN; }
#line 571 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 560 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
union _LARGE_INTEGER { 
struct { 
DWORD LowPart; 
LONG HighPart; 
}; 
struct { 
DWORD LowPart; 
LONG HighPart; 
} u; 
#line 570 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
LONGLONG QuadPart; 
} LARGE_INTEGER; }

extern "C" { typedef LARGE_INTEGER *PLARGE_INTEGER; }
#line 589 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 578 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
union _ULARGE_INTEGER { 
struct { 
DWORD LowPart; 
DWORD HighPart; 
}; 
struct { 
DWORD LowPart; 
DWORD HighPart; 
} u; 
#line 588 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
ULONGLONG QuadPart; 
} ULARGE_INTEGER; }

extern "C" { typedef ULARGE_INTEGER *PULARGE_INTEGER; }
#line 603
extern "C" { typedef 
#line 600
struct _LUID { 
DWORD LowPart; 
LONG HighPart; 
} LUID; }extern "C" { typedef _LUID *PLUID; }


extern "C" { typedef ULONGLONG DWORDLONG; }
extern "C" { typedef DWORDLONG *PDWORDLONG; }
#line 654 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { __inline ULONGLONG __stdcall Int64ShllMod32(ULONGLONG, DWORD); } 
#line 661
extern "C" { __inline LONGLONG __stdcall Int64ShraMod32(LONGLONG, DWORD); } 
#line 668
extern "C" { __inline ULONGLONG __stdcall Int64ShrlMod32(ULONGLONG, DWORD); } 





#pragma warning(push)
#line 676 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
#pragma warning(disable:4035 4793)



extern "C" { __inline ULONGLONG __stdcall Int64ShllMod32(ULONGLONG 
Value, DWORD 
ShiftCount) 

{ 
__asm {
        mov     ecx, ShiftCount
        mov     eax, dword ptr [Value]
        mov     edx, dword ptr [Value+4]
        shld    edx, eax, cl
        shl     eax, cl
    }
} } 



extern "C" { __inline LONGLONG __stdcall Int64ShraMod32(LONGLONG 
Value, DWORD 
ShiftCount) 

{ 
__asm {
        mov     ecx, ShiftCount
        mov     eax, dword ptr [Value]
        mov     edx, dword ptr [Value+4]
        shrd    eax, edx, cl
        sar     edx, cl
    }
} } 



extern "C" { __inline ULONGLONG __stdcall Int64ShrlMod32(ULONGLONG 
Value, DWORD 
ShiftCount) 

{ 
__asm {
        mov     ecx, ShiftCount
        mov     eax, dword ptr [Value]
        mov     edx, dword ptr [Value+4]
        shrd    eax, edx, cl
        shr     edx, cl
    }
} } 


#pragma warning(pop)
#line 798 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { extern unsigned __cdecl _rotl(unsigned, int); } 
#line 805
extern "C" { extern unsigned __int64 __cdecl _rotl64(unsigned __int64, int); } 
#line 813
extern "C" { extern unsigned __cdecl _rotr(unsigned, int); } 
#line 820
extern "C" { extern unsigned __int64 __cdecl _rotr64(unsigned __int64, int); } 




#pragma intrinsic(_rotl)
#pragma intrinsic(_rotl64)
#pragma intrinsic(_rotr)
#pragma intrinsic(_rotr64)
#line 840 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef BYTE BOOLEAN; }
extern "C" { typedef BOOLEAN *PBOOLEAN; }
#line 850
extern "C" { typedef 
#line 847
struct _LIST_ENTRY { 
_LIST_ENTRY *Flink; 
_LIST_ENTRY *Blink; 
} LIST_ENTRY; }extern "C" { typedef _LIST_ENTRY *PLIST_ENTRY; }extern "C" { typedef _LIST_ENTRY *PRLIST_ENTRY; }
#line 859
extern "C" { typedef 
#line 857
struct _SINGLE_LIST_ENTRY { 
_SINGLE_LIST_ENTRY *Next; 
} SINGLE_LIST_ENTRY; }extern "C" { typedef _SINGLE_LIST_ENTRY *PSINGLE_LIST_ENTRY; }
#line 868
extern "C" { typedef 
#line 865
struct LIST_ENTRY32 { 
DWORD Flink; 
DWORD Blink; 
} LIST_ENTRY32; }
extern "C" { typedef LIST_ENTRY32 *PLIST_ENTRY32; }




extern "C" { typedef 
#line 871
struct LIST_ENTRY64 { 
ULONGLONG Flink; 
ULONGLONG Blink; 
} LIST_ENTRY64; }
extern "C" { typedef LIST_ENTRY64 *PLIST_ENTRY64; }
#line 27 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\guiddef.h"
extern "C" { typedef 
#define GUID_DEFINED
#line 22
struct _GUID { 
unsigned long Data1; 
unsigned short Data2; 
unsigned short Data3; 
unsigned char Data4[8]; 
} GUID; }
#line 75 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\guiddef.h"
extern "C" { typedef GUID *LPGUID; }
#line 80 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\guiddef.h"
extern "C" { typedef const GUID *LPCGUID; }
#line 86 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\guiddef.h"
extern "C" { typedef GUID IID; }
extern "C" { typedef IID *LPIID; }


extern "C" { typedef GUID CLSID; }
extern "C" { typedef CLSID *LPCLSID; }


extern "C" { typedef GUID FMTID; }
extern "C" { typedef FMTID *LPFMTID; }
#line 150 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\guiddef.h"
extern "C" { __inline int InlineIsEqualGUID(const GUID &rguid1, const GUID &rguid2) 
{ 
return ((((((unsigned long *)(&rguid1))[0]) == (((unsigned long *)(&rguid2))[0])) && ((((unsigned long *)(&rguid1))[1]) == (((unsigned long *)(&rguid2))[1]))) && ((((unsigned long *)(&rguid1))[2]) == (((unsigned long *)(&rguid2))[2]))) && ((((unsigned long *)(&rguid1))[3]) == (((unsigned long *)(&rguid2))[3])); 




} } 

extern "C" { __inline int IsEqualGUID(const GUID &rguid1, const GUID &rguid2) 
{ 
return !(memcmp((&rguid1), (&rguid2), sizeof(GUID))); 
} } 
#line 192 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\guiddef.h"
extern "C" { __inline int operator==(const GUID &guidOne, const GUID &guidOther) 
{ 
return IsEqualGUID(guidOne, guidOther); 
} } 

extern "C" { __inline int operator!=(const GUID &guidOne, const GUID &guidOther) 
{ 
return !((guidOne == guidOther)); 
} } 
#line 886 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 883
struct _OBJECTID { 
GUID Lineage; 
DWORD Uniquifier; 
} OBJECTID; }
#line 958 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
template<class T, size_t N> extern char (*RtlpNumberOf(T (&)[N]))[N]; 
#line 1772 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef ULONG_PTR KSPIN_LOCK; }
extern "C" { typedef KSPIN_LOCK *PKSPIN_LOCK; }
#line 3041
#pragma warning(push)
#line 3043 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
#pragma warning(disable:4164)


#pragma function(_enable)
#pragma function(_disable)
#line 3051 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
#pragma warning(pop)
#line 3085 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { extern BOOLEAN _bittest(const LONG *, LONG); } 
#line 3091
extern "C" { extern BOOLEAN _bittestandcomplement(LONG *, LONG); } 
#line 3097
extern "C" { extern BOOLEAN _bittestandset(LONG *, LONG); } 
#line 3103
extern "C" { extern BOOLEAN _bittestandreset(LONG *, LONG); } 
#line 3109
extern "C" { extern BOOLEAN _interlockedbittestandset(volatile LONG *, LONG); } 
#line 3115
extern "C" { extern BOOLEAN _interlockedbittestandreset(volatile LONG *, LONG); } 




#pragma intrinsic(_bittest)
#pragma intrinsic(_bittestandcomplement)
#pragma intrinsic(_bittestandset)
#pragma intrinsic(_bittestandreset)
#pragma intrinsic(_interlockedbittestandset)
#pragma intrinsic(_interlockedbittestandreset)
#line 3135
extern "C" { extern BOOLEAN _BitScanForward(DWORD *, DWORD); } 
#line 3141
extern "C" { extern BOOLEAN _BitScanReverse(DWORD *, DWORD); } 




#pragma intrinsic(_BitScanForward)
#pragma intrinsic(_BitScanReverse)
#line 3196 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { extern SHORT _InterlockedCompareExchange16(volatile SHORT *, SHORT, SHORT); } 





#pragma intrinsic(_InterlockedCompareExchange16)
#line 3207 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
#pragma warning(push)
#pragma warning(disable:4035 4793)



extern "C" { __forceinline BOOLEAN InterlockedBitTestAndComplement(volatile LONG *
Base, LONG 
Bit) 

{ 
__asm {
           mov eax, Bit
           mov ecx, Base
           lock btc [ecx], eax
           setc al
    }
#line 3222
; 
} } 
#pragma warning(pop)
#line 3238 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { extern BYTE __readfsbyte(DWORD); } 




extern "C" { extern WORD __readfsword(DWORD); } 




extern "C" { extern DWORD __readfsdword(DWORD); } 




extern "C" { extern void __writefsbyte(DWORD, BYTE); } 
#line 3259
extern "C" { extern void __writefsword(DWORD, WORD); } 
#line 3265
extern "C" { extern void __writefsdword(DWORD, DWORD); } 




#pragma intrinsic(__readfsbyte)
#pragma intrinsic(__readfsword)
#pragma intrinsic(__readfsdword)
#pragma intrinsic(__writefsbyte)
#pragma intrinsic(__writefsword)
#pragma intrinsic(__writefsdword)
#line 3284 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { extern void __incfsbyte(DWORD); } 




extern "C" { extern void __addfsbyte(DWORD, BYTE); } 
#line 3295
extern "C" { extern void __incfsword(DWORD); } 




extern "C" { extern void __addfsword(DWORD, WORD); } 
#line 3306
extern "C" { extern void __incfsdword(DWORD); } 




extern "C" { extern void __addfsdword(DWORD, DWORD); } 
#line 3332 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { extern void _mm_pause(); } 



#pragma intrinsic(_mm_pause)
#line 3358 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
#pragma warning( push )
#pragma warning( disable : 4793 )


extern "C" { __forceinline void MemoryBarrier() 


{ 
auto LONG Barrier; 
__asm {
        xchg Barrier, eax
    }
} } 
#pragma warning( pop )
#line 3397 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { extern DWORD64 __readpmc(DWORD); } 



#pragma intrinsic(__readpmc)
#line 3430 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { extern DWORD64 __rdtsc(); } 



#pragma intrinsic(__rdtsc)
#line 3459 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { extern void __int2c(); } 



#pragma intrinsic(__int2c)
#line 3490 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { __inline PVOID GetFiberData() { return *((PVOID *)((ULONG_PTR)__readfsdword(16))); } } 
extern "C" { __inline PVOID GetCurrentFiber() { return (PVOID)((ULONG_PTR)__readfsdword(16)); } } 
#line 3575 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 3565
struct _FLOATING_SAVE_AREA { 
DWORD ControlWord; 
DWORD StatusWord; 
DWORD TagWord; 
DWORD ErrorOffset; 
DWORD ErrorSelector; 
DWORD DataOffset; 
DWORD DataSelector; 
BYTE RegisterArea[80]; 
DWORD Cr0NpxState; 
} FLOATING_SAVE_AREA; }

extern "C" { typedef FLOATING_SAVE_AREA *PFLOATING_SAVE_AREA; }
#line 3673
extern "C" { typedef 
#line 3589
struct _CONTEXT { 
#line 3609
DWORD ContextFlags; 
#line 3617
DWORD Dr0; 
DWORD Dr1; 
DWORD Dr2; 
DWORD Dr3; 
DWORD Dr6; 
DWORD Dr7; 
#line 3629
FLOATING_SAVE_AREA FloatSave; 
#line 3636
DWORD SegGs; 
DWORD SegFs; 
DWORD SegEs; 
DWORD SegDs; 
#line 3646
DWORD Edi; 
DWORD Esi; 
DWORD Ebx; 
DWORD Edx; 
DWORD Ecx; 
DWORD Eax; 
#line 3658
DWORD Ebp; 
DWORD Eip; 
DWORD SegCs; 
DWORD EFlags; 
DWORD Esp; 
DWORD SegSs; 
#line 3671
BYTE ExtendedRegisters[512]; 

} CONTEXT; }



extern "C" { typedef CONTEXT *PCONTEXT; }
#line 3709 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 3686
struct _LDT_ENTRY { 
WORD LimitLow; 
WORD BaseLow; 
union { 
struct { 
BYTE BaseMid; 
BYTE Flags1; 
BYTE Flags2; 
BYTE BaseHi; 
} Bytes; 
struct { 
DWORD BaseMid:8; 
DWORD Type:5; 
DWORD Dpl:2; 
DWORD Pres:1; 
DWORD LimitHi:4; 
DWORD Sys:1; 
DWORD Reserved_0:1; 
DWORD Default_Big:1; 
DWORD Granularity:1; 
DWORD BaseHi:8; 
} Bits; 
} HighWord; 
} LDT_ENTRY; }extern "C" { typedef _LDT_ENTRY *PLDT_ENTRY; }
#line 5400 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 5390
struct _WOW64_FLOATING_SAVE_AREA { 
DWORD ControlWord; 
DWORD StatusWord; 
DWORD TagWord; 
DWORD ErrorOffset; 
DWORD ErrorSelector; 
DWORD DataOffset; 
DWORD DataSelector; 
BYTE RegisterArea[80]; 
DWORD Cr0NpxState; 
} WOW64_FLOATING_SAVE_AREA; }

extern "C" { typedef WOW64_FLOATING_SAVE_AREA *PWOW64_FLOATING_SAVE_AREA; }
#line 5498
extern "C" { typedef 
#line 5414
struct _WOW64_CONTEXT { 
#line 5434
DWORD ContextFlags; 
#line 5442
DWORD Dr0; 
DWORD Dr1; 
DWORD Dr2; 
DWORD Dr3; 
DWORD Dr6; 
DWORD Dr7; 
#line 5454
WOW64_FLOATING_SAVE_AREA FloatSave; 
#line 5461
DWORD SegGs; 
DWORD SegFs; 
DWORD SegEs; 
DWORD SegDs; 
#line 5471
DWORD Edi; 
DWORD Esi; 
DWORD Ebx; 
DWORD Edx; 
DWORD Ecx; 
DWORD Eax; 
#line 5483
DWORD Ebp; 
DWORD Eip; 
DWORD SegCs; 
DWORD EFlags; 
DWORD Esp; 
DWORD SegSs; 
#line 5496
BYTE ExtendedRegisters[512]; 

} WOW64_CONTEXT; }

extern "C" { typedef WOW64_CONTEXT *PWOW64_CONTEXT; }
#line 5516
extern "C" { typedef 
#line 5509
struct _EXCEPTION_RECORD { 
DWORD ExceptionCode; 
DWORD ExceptionFlags; 
_EXCEPTION_RECORD *ExceptionRecord; 
PVOID ExceptionAddress; 
DWORD NumberParameters; 
ULONG_PTR ExceptionInformation[15]; 
} EXCEPTION_RECORD; }

extern "C" { typedef EXCEPTION_RECORD *PEXCEPTION_RECORD; }
#line 5527
extern "C" { typedef 
#line 5520
struct _EXCEPTION_RECORD32 { 
DWORD ExceptionCode; 
DWORD ExceptionFlags; 
DWORD ExceptionRecord; 
DWORD ExceptionAddress; 
DWORD NumberParameters; 
DWORD ExceptionInformation[15]; 
} EXCEPTION_RECORD32; }extern "C" { typedef _EXCEPTION_RECORD32 *PEXCEPTION_RECORD32; }
#line 5537
extern "C" { typedef 
#line 5529
struct _EXCEPTION_RECORD64 { 
DWORD ExceptionCode; 
DWORD ExceptionFlags; 
DWORD64 ExceptionRecord; 
DWORD64 ExceptionAddress; 
DWORD NumberParameters; 
DWORD __unusedAlignment; 
DWORD64 ExceptionInformation[15]; 
} EXCEPTION_RECORD64; }extern "C" { typedef _EXCEPTION_RECORD64 *PEXCEPTION_RECORD64; }
#line 5546
extern "C" { typedef 
#line 5543
struct _EXCEPTION_POINTERS { 
PEXCEPTION_RECORD ExceptionRecord; 
PCONTEXT ContextRecord; 
} EXCEPTION_POINTERS; }extern "C" { typedef _EXCEPTION_POINTERS *PEXCEPTION_POINTERS; }
extern "C" { typedef PVOID PACCESS_TOKEN; }
extern "C" { typedef PVOID PSECURITY_DESCRIPTOR; }
extern "C" { typedef PVOID PSID; }
#line 5589
extern "C" { typedef DWORD ACCESS_MASK; }
extern "C" { typedef ACCESS_MASK *PACCESS_MASK; }
#line 5652
extern "C" { typedef 
#line 5647
struct _GENERIC_MAPPING { 
ACCESS_MASK GenericRead; 
ACCESS_MASK GenericWrite; 
ACCESS_MASK GenericExecute; 
ACCESS_MASK GenericAll; 
} GENERIC_MAPPING; }
extern "C" { typedef GENERIC_MAPPING *PGENERIC_MAPPING; }
#line 24 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\pshpack4.h"
#pragma warning(disable:4103)

#pragma pack ( push, 4 )
#line 5671 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 5668
struct _LUID_AND_ATTRIBUTES { 
LUID Luid; 
DWORD Attributes; 
} LUID_AND_ATTRIBUTES; }extern "C" { typedef _LUID_AND_ATTRIBUTES *PLUID_AND_ATTRIBUTES; }
extern "C" { typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1]; }
extern "C" { typedef LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY; }
#line 27 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack ( pop )
#line 5712 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 5710
struct _SID_IDENTIFIER_AUTHORITY { 
BYTE Value[6]; 
} SID_IDENTIFIER_AUTHORITY; }extern "C" { typedef _SID_IDENTIFIER_AUTHORITY *PSID_IDENTIFIER_AUTHORITY; }
#line 5727 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 5718 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
struct _SID { 
BYTE Revision; 
BYTE SubAuthorityCount; 
SID_IDENTIFIER_AUTHORITY IdentifierAuthority; 



DWORD SubAuthority[1]; 
#line 5727 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
} SID; }extern "C" { typedef _SID *PISID; }
#line 5752 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 5741
enum _SID_NAME_USE { 
SidTypeUser = 1, 
SidTypeGroup, 
SidTypeDomain, 
SidTypeAlias, 
SidTypeWellKnownGroup, 
SidTypeDeletedAccount, 
SidTypeInvalid, 
SidTypeUnknown, 
SidTypeComputer, 
SidTypeLabel
} SID_NAME_USE; }extern "C" { typedef _SID_NAME_USE *PSID_NAME_USE; }




extern "C" { typedef 
#line 5754
struct _SID_AND_ATTRIBUTES { 
PSID Sid; 
DWORD Attributes; 
} SID_AND_ATTRIBUTES; }extern "C" { typedef _SID_AND_ATTRIBUTES *PSID_AND_ATTRIBUTES; }

extern "C" { typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1]; }
extern "C" { typedef SID_AND_ATTRIBUTES_ARRAY *PSID_AND_ATTRIBUTES_ARRAY; }


extern "C" { typedef ULONG_PTR SID_HASH_ENTRY; }extern "C" { typedef ULONG_PTR *PSID_HASH_ENTRY; }
#line 5769
extern "C" { typedef 
#line 5765
struct _SID_AND_ATTRIBUTES_HASH { 
DWORD SidCount; 
PSID_AND_ATTRIBUTES SidAttr; 
SID_HASH_ENTRY Hash[32]; 
} SID_AND_ATTRIBUTES_HASH; }extern "C" { typedef _SID_AND_ATTRIBUTES_HASH *PSID_AND_ATTRIBUTES_HASH; }
#line 6072
extern "C" { typedef 
#line 5992
enum { 

WinNullSid, 
WinWorldSid, 
WinLocalSid, 
WinCreatorOwnerSid, 
WinCreatorGroupSid, 
WinCreatorOwnerServerSid, 
WinCreatorGroupServerSid, 
WinNtAuthoritySid, 
WinDialupSid, 
WinNetworkSid, 
WinBatchSid, 
WinInteractiveSid, 
WinServiceSid, 
WinAnonymousSid, 
WinProxySid, 
WinEnterpriseControllersSid, 
WinSelfSid, 
WinAuthenticatedUserSid, 
WinRestrictedCodeSid, 
WinTerminalServerSid, 
WinRemoteLogonIdSid, 
WinLogonIdsSid, 
WinLocalSystemSid, 
WinLocalServiceSid, 
WinNetworkServiceSid, 
WinBuiltinDomainSid, 
WinBuiltinAdministratorsSid, 
WinBuiltinUsersSid, 
WinBuiltinGuestsSid, 
WinBuiltinPowerUsersSid, 
WinBuiltinAccountOperatorsSid, 
WinBuiltinSystemOperatorsSid, 
WinBuiltinPrintOperatorsSid, 
WinBuiltinBackupOperatorsSid, 
WinBuiltinReplicatorSid, 
WinBuiltinPreWindows2000CompatibleAccessSid, 
WinBuiltinRemoteDesktopUsersSid, 
WinBuiltinNetworkConfigurationOperatorsSid, 
WinAccountAdministratorSid, 
WinAccountGuestSid, 
WinAccountKrbtgtSid, 
WinAccountDomainAdminsSid, 
WinAccountDomainUsersSid, 
WinAccountDomainGuestsSid, 
WinAccountComputersSid, 
WinAccountControllersSid, 
WinAccountCertAdminsSid, 
WinAccountSchemaAdminsSid, 
WinAccountEnterpriseAdminsSid, 
WinAccountPolicyAdminsSid, 
WinAccountRasAndIasServersSid, 
WinNTLMAuthenticationSid, 
WinDigestAuthenticationSid, 
WinSChannelAuthenticationSid, 
WinThisOrganizationSid, 
WinOtherOrganizationSid, 
WinBuiltinIncomingForestTrustBuildersSid, 
WinBuiltinPerfMonitoringUsersSid, 
WinBuiltinPerfLoggingUsersSid, 
WinBuiltinAuthorizationAccessSid, 
WinBuiltinTerminalServerLicenseServersSid, 
WinBuiltinDCOMUsersSid, 
WinBuiltinIUsersSid, 
WinIUserSid, 
WinBuiltinCryptoOperatorsSid, 
WinUntrustedLabelSid, 
WinLowLabelSid, 
WinMediumLabelSid, 
WinHighLabelSid, 
WinSystemLabelSid, 
WinWriteRestrictedCodeSid, 
WinCreatorOwnerRightsSid, 
WinCacheablePrincipalsGroupSid, 
WinNonCacheablePrincipalsGroupSid, 
WinEnterpriseReadonlyControllersSid, 
WinAccountReadonlyControllersSid, 
WinBuiltinEventLogReadersGroup

} WELL_KNOWN_SID_TYPE; }
#line 6175
extern "C" { typedef 
#line 6169
struct _ACL { 
BYTE AclRevision; 
BYTE Sbz1; 
WORD AclSize; 
WORD AceCount; 
WORD Sbz2; 
} ACL; }
extern "C" { typedef ACL *PACL; }
#line 6203
extern "C" { typedef 
#line 6199
struct _ACE_HEADER { 
BYTE AceType; 
BYTE AceFlags; 
WORD AceSize; 
} ACE_HEADER; }
extern "C" { typedef ACE_HEADER *PACE_HEADER; }
#line 6314
extern "C" { typedef 
#line 6310
struct _ACCESS_ALLOWED_ACE { 
ACE_HEADER Header; 
ACCESS_MASK Mask; 
DWORD SidStart; 
} ACCESS_ALLOWED_ACE; }

extern "C" { typedef ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE; }
#line 6322
extern "C" { typedef 
#line 6318
struct _ACCESS_DENIED_ACE { 
ACE_HEADER Header; 
ACCESS_MASK Mask; 
DWORD SidStart; 
} ACCESS_DENIED_ACE; }
extern "C" { typedef ACCESS_DENIED_ACE *PACCESS_DENIED_ACE; }
#line 6329
extern "C" { typedef 
#line 6325
struct _SYSTEM_AUDIT_ACE { 
ACE_HEADER Header; 
ACCESS_MASK Mask; 
DWORD SidStart; 
} SYSTEM_AUDIT_ACE; }
extern "C" { typedef SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE; }
#line 6336
extern "C" { typedef 
#line 6332
struct _SYSTEM_ALARM_ACE { 
ACE_HEADER Header; 
ACCESS_MASK Mask; 
DWORD SidStart; 
} SYSTEM_ALARM_ACE; }
extern "C" { typedef SYSTEM_ALARM_ACE *PSYSTEM_ALARM_ACE; }
#line 6343
extern "C" { typedef 
#line 6339
struct _SYSTEM_MANDATORY_LABEL_ACE { 
ACE_HEADER Header; 
ACCESS_MASK Mask; 
DWORD SidStart; 
} SYSTEM_MANDATORY_LABEL_ACE; }extern "C" { typedef _SYSTEM_MANDATORY_LABEL_ACE *PSYSTEM_MANDATORY_LABEL_ACE; }
#line 6362
extern "C" { typedef 
#line 6355
struct _ACCESS_ALLOWED_OBJECT_ACE { 
ACE_HEADER Header; 
ACCESS_MASK Mask; 
DWORD Flags; 
GUID ObjectType; 
GUID InheritedObjectType; 
DWORD SidStart; 
} ACCESS_ALLOWED_OBJECT_ACE; }extern "C" { typedef _ACCESS_ALLOWED_OBJECT_ACE *PACCESS_ALLOWED_OBJECT_ACE; }
#line 6371
extern "C" { typedef 
#line 6364
struct _ACCESS_DENIED_OBJECT_ACE { 
ACE_HEADER Header; 
ACCESS_MASK Mask; 
DWORD Flags; 
GUID ObjectType; 
GUID InheritedObjectType; 
DWORD SidStart; 
} ACCESS_DENIED_OBJECT_ACE; }extern "C" { typedef _ACCESS_DENIED_OBJECT_ACE *PACCESS_DENIED_OBJECT_ACE; }
#line 6380
extern "C" { typedef 
#line 6373
struct _SYSTEM_AUDIT_OBJECT_ACE { 
ACE_HEADER Header; 
ACCESS_MASK Mask; 
DWORD Flags; 
GUID ObjectType; 
GUID InheritedObjectType; 
DWORD SidStart; 
} SYSTEM_AUDIT_OBJECT_ACE; }extern "C" { typedef _SYSTEM_AUDIT_OBJECT_ACE *PSYSTEM_AUDIT_OBJECT_ACE; }
#line 6389
extern "C" { typedef 
#line 6382
struct _SYSTEM_ALARM_OBJECT_ACE { 
ACE_HEADER Header; 
ACCESS_MASK Mask; 
DWORD Flags; 
GUID ObjectType; 
GUID InheritedObjectType; 
DWORD SidStart; 
} SYSTEM_ALARM_OBJECT_ACE; }extern "C" { typedef _SYSTEM_ALARM_OBJECT_ACE *PSYSTEM_ALARM_OBJECT_ACE; }
#line 6401
extern "C" { typedef 
#line 6396
struct _ACCESS_ALLOWED_CALLBACK_ACE { 
ACE_HEADER Header; 
ACCESS_MASK Mask; 
DWORD SidStart; 

} ACCESS_ALLOWED_CALLBACK_ACE; }extern "C" { typedef _ACCESS_ALLOWED_CALLBACK_ACE *PACCESS_ALLOWED_CALLBACK_ACE; }
#line 6408
extern "C" { typedef 
#line 6403
struct _ACCESS_DENIED_CALLBACK_ACE { 
ACE_HEADER Header; 
ACCESS_MASK Mask; 
DWORD SidStart; 

} ACCESS_DENIED_CALLBACK_ACE; }extern "C" { typedef _ACCESS_DENIED_CALLBACK_ACE *PACCESS_DENIED_CALLBACK_ACE; }
#line 6415
extern "C" { typedef 
#line 6410
struct _SYSTEM_AUDIT_CALLBACK_ACE { 
ACE_HEADER Header; 
ACCESS_MASK Mask; 
DWORD SidStart; 

} SYSTEM_AUDIT_CALLBACK_ACE; }extern "C" { typedef _SYSTEM_AUDIT_CALLBACK_ACE *PSYSTEM_AUDIT_CALLBACK_ACE; }
#line 6422
extern "C" { typedef 
#line 6417
struct _SYSTEM_ALARM_CALLBACK_ACE { 
ACE_HEADER Header; 
ACCESS_MASK Mask; 
DWORD SidStart; 

} SYSTEM_ALARM_CALLBACK_ACE; }extern "C" { typedef _SYSTEM_ALARM_CALLBACK_ACE *PSYSTEM_ALARM_CALLBACK_ACE; }
#line 6432
extern "C" { typedef 
#line 6424
struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE { 
ACE_HEADER Header; 
ACCESS_MASK Mask; 
DWORD Flags; 
GUID ObjectType; 
GUID InheritedObjectType; 
DWORD SidStart; 

} ACCESS_ALLOWED_CALLBACK_OBJECT_ACE; }extern "C" { typedef _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE *PACCESS_ALLOWED_CALLBACK_OBJECT_ACE; }
#line 6442
extern "C" { typedef 
#line 6434
struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE { 
ACE_HEADER Header; 
ACCESS_MASK Mask; 
DWORD Flags; 
GUID ObjectType; 
GUID InheritedObjectType; 
DWORD SidStart; 

} ACCESS_DENIED_CALLBACK_OBJECT_ACE; }extern "C" { typedef _ACCESS_DENIED_CALLBACK_OBJECT_ACE *PACCESS_DENIED_CALLBACK_OBJECT_ACE; }
#line 6452
extern "C" { typedef 
#line 6444
struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE { 
ACE_HEADER Header; 
ACCESS_MASK Mask; 
DWORD Flags; 
GUID ObjectType; 
GUID InheritedObjectType; 
DWORD SidStart; 

} SYSTEM_AUDIT_CALLBACK_OBJECT_ACE; }extern "C" { typedef _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE *PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE; }
#line 6462
extern "C" { typedef 
#line 6454
struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE { 
ACE_HEADER Header; 
ACCESS_MASK Mask; 
DWORD Flags; 
GUID ObjectType; 
GUID InheritedObjectType; 
DWORD SidStart; 

} SYSTEM_ALARM_CALLBACK_OBJECT_ACE; }extern "C" { typedef _SYSTEM_ALARM_CALLBACK_OBJECT_ACE *PSYSTEM_ALARM_CALLBACK_OBJECT_ACE; }
#line 6481
extern "C" { typedef 
#line 6478
enum _ACL_INFORMATION_CLASS { 
AclRevisionInformation = 1, 
AclSizeInformation
} ACL_INFORMATION_CLASS; }
#line 6490
extern "C" { typedef 
#line 6488
struct _ACL_REVISION_INFORMATION { 
DWORD AclRevision; 
} ACL_REVISION_INFORMATION; }
extern "C" { typedef ACL_REVISION_INFORMATION *PACL_REVISION_INFORMATION; }
#line 6501
extern "C" { typedef 
#line 6497
struct _ACL_SIZE_INFORMATION { 
DWORD AceCount; 
DWORD AclBytesInUse; 
DWORD AclBytesFree; 
} ACL_SIZE_INFORMATION; }
extern "C" { typedef ACL_SIZE_INFORMATION *PACL_SIZE_INFORMATION; }
#line 6529
extern "C" { typedef WORD SECURITY_DESCRIPTOR_CONTROL; }extern "C" { typedef WORD *PSECURITY_DESCRIPTOR_CONTROL; }
#line 6627
extern "C" { typedef 
#line 6619
struct _SECURITY_DESCRIPTOR_RELATIVE { 
BYTE Revision; 
BYTE Sbz1; 
SECURITY_DESCRIPTOR_CONTROL Control; 
DWORD Owner; 
DWORD Group; 
DWORD Sacl; 
DWORD Dacl; 
} SECURITY_DESCRIPTOR_RELATIVE; }extern "C" { typedef _SECURITY_DESCRIPTOR_RELATIVE *PISECURITY_DESCRIPTOR_RELATIVE; }
#line 6638
extern "C" { typedef 
#line 6629
struct _SECURITY_DESCRIPTOR { 
BYTE Revision; 
BYTE Sbz1; 
SECURITY_DESCRIPTOR_CONTROL Control; 
PSID Owner; 
PSID Group; 
PACL Sacl; 
PACL Dacl; 

} SECURITY_DESCRIPTOR; }extern "C" { typedef _SECURITY_DESCRIPTOR *PISECURITY_DESCRIPTOR; }
#line 6693
extern "C" { typedef 
#line 6689
struct _OBJECT_TYPE_LIST { 
WORD Level; 
WORD Sbz; 
GUID *ObjectType; 
} OBJECT_TYPE_LIST; }extern "C" { typedef _OBJECT_TYPE_LIST *POBJECT_TYPE_LIST; }
#line 6712
extern "C" { typedef 
#line 6709
enum _AUDIT_EVENT_TYPE { 
AuditEventObjectAccess, 
AuditEventDirectoryServiceAccess
} AUDIT_EVENT_TYPE; }extern "C" { typedef _AUDIT_EVENT_TYPE *PAUDIT_EVENT_TYPE; }
#line 6768
extern "C" { typedef 
#line 6764
struct _PRIVILEGE_SET { 
DWORD PrivilegeCount; 
DWORD Control; 
LUID_AND_ATTRIBUTES Privilege[1]; 
} PRIVILEGE_SET; }extern "C" { typedef _PRIVILEGE_SET *PPRIVILEGE_SET; }
#line 6836
extern "C" { typedef 
#line 6831
enum _SECURITY_IMPERSONATION_LEVEL { 
SecurityAnonymous, 
SecurityIdentification, 
SecurityImpersonation, 
SecurityDelegation
} SECURITY_IMPERSONATION_LEVEL; }extern "C" { typedef _SECURITY_IMPERSONATION_LEVEL *PSECURITY_IMPERSONATION_LEVEL; }
#line 6901 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 6898
enum _TOKEN_TYPE { 
TokenPrimary = 1, 
TokenImpersonation
} TOKEN_TYPE; }
extern "C" { typedef TOKEN_TYPE *PTOKEN_TYPE; }
#line 6914
extern "C" { typedef 
#line 6910
enum _TOKEN_ELEVATION_TYPE { 
TokenElevationTypeDefault = 1, 
TokenElevationTypeFull, 
TokenElevationTypeLimited
} TOKEN_ELEVATION_TYPE; }extern "C" { typedef _TOKEN_ELEVATION_TYPE *PTOKEN_ELEVATION_TYPE; }
#line 6951
extern "C" { typedef 
#line 6921
enum _TOKEN_INFORMATION_CLASS { 
TokenUser = 1, 
TokenGroups, 
TokenPrivileges, 
TokenOwner, 
TokenPrimaryGroup, 
TokenDefaultDacl, 
TokenSource, 
TokenType, 
TokenImpersonationLevel, 
TokenStatistics, 
TokenRestrictedSids, 
TokenSessionId, 
TokenGroupsAndPrivileges, 
TokenSessionReference, 
TokenSandBoxInert, 
TokenAuditPolicy, 
TokenOrigin, 
TokenElevationType, 
TokenLinkedToken, 
TokenElevation, 
TokenHasRestrictions, 
TokenAccessInformation, 
TokenVirtualizationAllowed, 
TokenVirtualizationEnabled, 
TokenIntegrityLevel, 
TokenUIAccess, 
TokenMandatoryPolicy, 
TokenLogonSid, 
MaxTokenInfoClass
} TOKEN_INFORMATION_CLASS; }extern "C" { typedef _TOKEN_INFORMATION_CLASS *PTOKEN_INFORMATION_CLASS; }
#line 6960
extern "C" { typedef 
#line 6958
struct _TOKEN_USER { 
SID_AND_ATTRIBUTES User; 
} TOKEN_USER; }extern "C" { typedef _TOKEN_USER *PTOKEN_USER; }




extern "C" { typedef 
#line 6962
struct _TOKEN_GROUPS { 
DWORD GroupCount; 
SID_AND_ATTRIBUTES Groups[1]; 
} TOKEN_GROUPS; }extern "C" { typedef _TOKEN_GROUPS *PTOKEN_GROUPS; }
#line 6971
extern "C" { typedef 
#line 6968
struct _TOKEN_PRIVILEGES { 
DWORD PrivilegeCount; 
LUID_AND_ATTRIBUTES Privileges[1]; 
} TOKEN_PRIVILEGES; }extern "C" { typedef _TOKEN_PRIVILEGES *PTOKEN_PRIVILEGES; }




extern "C" { typedef 
#line 6974
struct _TOKEN_OWNER { 
PSID Owner; 
} TOKEN_OWNER; }extern "C" { typedef _TOKEN_OWNER *PTOKEN_OWNER; }




extern "C" { typedef 
#line 6979
struct _TOKEN_PRIMARY_GROUP { 
PSID PrimaryGroup; 
} TOKEN_PRIMARY_GROUP; }extern "C" { typedef _TOKEN_PRIMARY_GROUP *PTOKEN_PRIMARY_GROUP; }




extern "C" { typedef 
#line 6984
struct _TOKEN_DEFAULT_DACL { 
PACL DefaultDacl; 
} TOKEN_DEFAULT_DACL; }extern "C" { typedef _TOKEN_DEFAULT_DACL *PTOKEN_DEFAULT_DACL; }
#line 6999
extern "C" { typedef 
#line 6988
struct _TOKEN_GROUPS_AND_PRIVILEGES { 
DWORD SidCount; 
DWORD SidLength; 
PSID_AND_ATTRIBUTES Sids; 
DWORD RestrictedSidCount; 
DWORD RestrictedSidLength; 
PSID_AND_ATTRIBUTES RestrictedSids; 
DWORD PrivilegeCount; 
DWORD PrivilegeLength; 
PLUID_AND_ATTRIBUTES Privileges; 
LUID AuthenticationId; 
} TOKEN_GROUPS_AND_PRIVILEGES; }extern "C" { typedef _TOKEN_GROUPS_AND_PRIVILEGES *PTOKEN_GROUPS_AND_PRIVILEGES; }



extern "C" { typedef 
#line 7001
struct _TOKEN_LINKED_TOKEN { 
HANDLE LinkedToken; 
} TOKEN_LINKED_TOKEN; }extern "C" { typedef _TOKEN_LINKED_TOKEN *PTOKEN_LINKED_TOKEN; }



extern "C" { typedef 
#line 7005
struct _TOKEN_ELEVATION { 
DWORD TokenIsElevated; 
} TOKEN_ELEVATION; }extern "C" { typedef _TOKEN_ELEVATION *PTOKEN_ELEVATION; }



extern "C" { typedef 
#line 7009
struct _TOKEN_MANDATORY_LABEL { 
SID_AND_ATTRIBUTES Label; 
} TOKEN_MANDATORY_LABEL; }extern "C" { typedef _TOKEN_MANDATORY_LABEL *PTOKEN_MANDATORY_LABEL; }
#line 7022
extern "C" { typedef 
#line 7020
struct _TOKEN_MANDATORY_POLICY { 
DWORD Policy; 
} TOKEN_MANDATORY_POLICY; }extern "C" { typedef _TOKEN_MANDATORY_POLICY *PTOKEN_MANDATORY_POLICY; }
#line 7033
extern "C" { typedef 
#line 7024
struct _TOKEN_ACCESS_INFORMATION { 
PSID_AND_ATTRIBUTES_HASH SidHash; 
PSID_AND_ATTRIBUTES_HASH RestrictedSidHash; 
PTOKEN_PRIVILEGES Privileges; 
LUID AuthenticationId; 
TOKEN_TYPE TokenType; 
SECURITY_IMPERSONATION_LEVEL ImpersonationLevel; 
TOKEN_MANDATORY_POLICY MandatoryPolicy; 
DWORD Flags; 
} TOKEN_ACCESS_INFORMATION; }extern "C" { typedef _TOKEN_ACCESS_INFORMATION *PTOKEN_ACCESS_INFORMATION; }
#line 7043
extern "C" { typedef 
#line 7041
struct _TOKEN_AUDIT_POLICY { 
BYTE PerUserPolicy[((50 >> 1) + 1)]; 
} TOKEN_AUDIT_POLICY; }extern "C" { typedef _TOKEN_AUDIT_POLICY *PTOKEN_AUDIT_POLICY; }
#line 7050
extern "C" { typedef 
#line 7047
struct _TOKEN_SOURCE { 
CHAR SourceName[8]; 
LUID SourceIdentifier; 
} TOKEN_SOURCE; }extern "C" { typedef _TOKEN_SOURCE *PTOKEN_SOURCE; }
#line 7064
extern "C" { typedef 
#line 7053
struct _TOKEN_STATISTICS { 
LUID TokenId; 
LUID AuthenticationId; 
LARGE_INTEGER ExpirationTime; 
TOKEN_TYPE TokenType; 
SECURITY_IMPERSONATION_LEVEL ImpersonationLevel; 
DWORD DynamicCharged; 
DWORD DynamicAvailable; 
DWORD GroupCount; 
DWORD PrivilegeCount; 
LUID ModifiedId; 
} TOKEN_STATISTICS; }extern "C" { typedef _TOKEN_STATISTICS *PTOKEN_STATISTICS; }
#line 7073
extern "C" { typedef 
#line 7068
struct _TOKEN_CONTROL { 
LUID TokenId; 
LUID AuthenticationId; 
LUID ModifiedId; 
TOKEN_SOURCE TokenSource; 
} TOKEN_CONTROL; }extern "C" { typedef _TOKEN_CONTROL *PTOKEN_CONTROL; }



extern "C" { typedef 
#line 7075
struct _TOKEN_ORIGIN { 
LUID OriginatingLogonSession; 
} TOKEN_ORIGIN; }extern "C" { typedef _TOKEN_ORIGIN *PTOKEN_ORIGIN; }
#line 7087
extern "C" { typedef 
#line 7079
enum _MANDATORY_LEVEL { 
MandatoryLevelUntrusted, 
MandatoryLevelLow, 
MandatoryLevelMedium, 
MandatoryLevelHigh, 
MandatoryLevelSystem, 
MandatoryLevelSecureProcess, 
MandatoryLevelCount
} MANDATORY_LEVEL; }extern "C" { typedef _MANDATORY_LEVEL *PMANDATORY_LEVEL; }
#line 7096
extern "C" { typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE; }
extern "C" { typedef BOOLEAN *PSECURITY_CONTEXT_TRACKING_MODE; }
#line 7110
extern "C" { typedef 
#line 7105
struct _SECURITY_QUALITY_OF_SERVICE { 
DWORD Length; 
SECURITY_IMPERSONATION_LEVEL ImpersonationLevel; 
SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode; 
BOOLEAN EffectiveOnly; 
} SECURITY_QUALITY_OF_SERVICE; }extern "C" { typedef _SECURITY_QUALITY_OF_SERVICE *PSECURITY_QUALITY_OF_SERVICE; }
#line 7122
extern "C" { typedef 
#line 7117
struct _SE_IMPERSONATION_STATE { 
PACCESS_TOKEN Token; 
BOOLEAN CopyOnOpen; 
BOOLEAN EffectiveOnly; 
SECURITY_IMPERSONATION_LEVEL Level; 
} SE_IMPERSONATION_STATE; }extern "C" { typedef _SE_IMPERSONATION_STATE *PSE_IMPERSONATION_STATE; }
#line 7129
extern "C" { typedef DWORD SECURITY_INFORMATION; }extern "C" { typedef DWORD *PSECURITY_INFORMATION; }
#line 7204 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 7200
struct _JOB_SET_ARRAY { 
HANDLE JobHandle; 
DWORD MemberLevel; 
DWORD Flags; 
} JOB_SET_ARRAY; }extern "C" { typedef _JOB_SET_ARRAY *PJOB_SET_ARRAY; }
#line 7220
extern "C" { typedef 
#line 7209
struct _NT_TIB { 
struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList; 
PVOID StackBase; 
PVOID StackLimit; 
PVOID SubSystemTib; 
union { 
PVOID FiberData; 
DWORD Version; 
}; 
PVOID ArbitraryUserPointer; 
_NT_TIB *Self; 
} NT_TIB; }
extern "C" { typedef NT_TIB *PNT_TIB; }
#line 7237
extern "C" { typedef 
#line 7226
struct _NT_TIB32 { 
DWORD ExceptionList; 
DWORD StackBase; 
DWORD StackLimit; 
DWORD SubSystemTib; 
union { 
DWORD FiberData; 
DWORD Version; 
}; 
DWORD ArbitraryUserPointer; 
DWORD Self; 
} NT_TIB32; }extern "C" { typedef _NT_TIB32 *PNT_TIB32; }
#line 7250
extern "C" { typedef 
#line 7239
struct _NT_TIB64 { 
DWORD64 ExceptionList; 
DWORD64 StackBase; 
DWORD64 StackLimit; 
DWORD64 SubSystemTib; 
union { 
DWORD64 FiberData; 
DWORD Version; 
}; 
DWORD64 ArbitraryUserPointer; 
DWORD64 Self; 
} NT_TIB64; }extern "C" { typedef _NT_TIB64 *PNT_TIB64; }
#line 7267
extern "C" { typedef 
#line 7260
struct _QUOTA_LIMITS { 
SIZE_T PagedPoolLimit; 
SIZE_T NonPagedPoolLimit; 
SIZE_T MinimumWorkingSetSize; 
SIZE_T MaximumWorkingSetSize; 
SIZE_T PagefileLimit; 
LARGE_INTEGER TimeLimit; 
} QUOTA_LIMITS; }extern "C" { typedef _QUOTA_LIMITS *PQUOTA_LIMITS; }
#line 7283
extern "C" { typedef 
#line 7278
enum _PS_RATE_PHASE { 
PsRateOneSecond, 
PsRateTwoSecond, 
PsRateThreeSecond, 
PsRateMaxPhase
} PS_RATE_PHASE; }
#line 7291
extern "C" { typedef 
#line 7285
union _RATE_QUOTA_LIMIT { 
DWORD RateData; 
struct { 
DWORD RatePhase:4; 
DWORD RatePercent:28; 
}; 
} RATE_QUOTA_LIMIT; }extern "C" { typedef _RATE_QUOTA_LIMIT *PRATE_QUOTA_LIMIT; }
#line 7310 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 7297
struct _QUOTA_LIMITS_EX { 
SIZE_T PagedPoolLimit; 
SIZE_T NonPagedPoolLimit; 
SIZE_T MinimumWorkingSetSize; 
SIZE_T MaximumWorkingSetSize; 
SIZE_T PagefileLimit; 
LARGE_INTEGER TimeLimit; 
SIZE_T WorkingSetLimit; 
SIZE_T Reserved2; 
SIZE_T Reserved3; 
SIZE_T Reserved4; 
DWORD Flags; 
RATE_QUOTA_LIMIT CpuRateLimit; 
} QUOTA_LIMITS_EX; }extern "C" { typedef _QUOTA_LIMITS_EX *PQUOTA_LIMITS_EX; }
#line 7319
extern "C" { typedef 
#line 7312
struct _IO_COUNTERS { 
ULONGLONG ReadOperationCount; 
ULONGLONG WriteOperationCount; 
ULONGLONG OtherOperationCount; 
ULONGLONG ReadTransferCount; 
ULONGLONG WriteTransferCount; 
ULONGLONG OtherTransferCount; 
} IO_COUNTERS; }
extern "C" { typedef IO_COUNTERS *PIO_COUNTERS; }
#line 7332
extern "C" { typedef 
#line 7323
struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION { 
LARGE_INTEGER TotalUserTime; 
LARGE_INTEGER TotalKernelTime; 
LARGE_INTEGER ThisPeriodTotalUserTime; 
LARGE_INTEGER ThisPeriodTotalKernelTime; 
DWORD TotalPageFaultCount; 
DWORD TotalProcesses; 
DWORD ActiveProcesses; 
DWORD TotalTerminatedProcesses; 
} JOBOBJECT_BASIC_ACCOUNTING_INFORMATION; }extern "C" { typedef _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION *PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION; }
#line 7344
extern "C" { typedef 
#line 7334
struct _JOBOBJECT_BASIC_LIMIT_INFORMATION { 
LARGE_INTEGER PerProcessUserTimeLimit; 
LARGE_INTEGER PerJobUserTimeLimit; 
DWORD LimitFlags; 
SIZE_T MinimumWorkingSetSize; 
SIZE_T MaximumWorkingSetSize; 
DWORD ActiveProcessLimit; 
ULONG_PTR Affinity; 
DWORD PriorityClass; 
DWORD SchedulingClass; 
} JOBOBJECT_BASIC_LIMIT_INFORMATION; }extern "C" { typedef _JOBOBJECT_BASIC_LIMIT_INFORMATION *PJOBOBJECT_BASIC_LIMIT_INFORMATION; }
#line 7353
extern "C" { typedef 
#line 7346
struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION { 
JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation; 
IO_COUNTERS IoInfo; 
SIZE_T ProcessMemoryLimit; 
SIZE_T JobMemoryLimit; 
SIZE_T PeakProcessMemoryUsed; 
SIZE_T PeakJobMemoryUsed; 
} JOBOBJECT_EXTENDED_LIMIT_INFORMATION; }extern "C" { typedef _JOBOBJECT_EXTENDED_LIMIT_INFORMATION *PJOBOBJECT_EXTENDED_LIMIT_INFORMATION; }
#line 7359
extern "C" { typedef 
#line 7355
struct _JOBOBJECT_BASIC_PROCESS_ID_LIST { 
DWORD NumberOfAssignedProcesses; 
DWORD NumberOfProcessIdsInList; 
ULONG_PTR ProcessIdList[1]; 
} JOBOBJECT_BASIC_PROCESS_ID_LIST; }extern "C" { typedef _JOBOBJECT_BASIC_PROCESS_ID_LIST *PJOBOBJECT_BASIC_PROCESS_ID_LIST; }



extern "C" { typedef 
#line 7361
struct _JOBOBJECT_BASIC_UI_RESTRICTIONS { 
DWORD UIRestrictionsClass; 
} JOBOBJECT_BASIC_UI_RESTRICTIONS; }extern "C" { typedef _JOBOBJECT_BASIC_UI_RESTRICTIONS *PJOBOBJECT_BASIC_UI_RESTRICTIONS; }
#line 7371
extern "C" { typedef 
#line 7365
struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION { 
DWORD SecurityLimitFlags; 
HANDLE JobToken; 
PTOKEN_GROUPS SidsToDisable; 
PTOKEN_PRIVILEGES PrivilegesToDelete; 
PTOKEN_GROUPS RestrictedSids; 
} JOBOBJECT_SECURITY_LIMIT_INFORMATION; }extern "C" { typedef _JOBOBJECT_SECURITY_LIMIT_INFORMATION *PJOBOBJECT_SECURITY_LIMIT_INFORMATION; }



extern "C" { typedef 
#line 7373
struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION { 
DWORD EndOfJobTimeAction; 
} JOBOBJECT_END_OF_JOB_TIME_INFORMATION; }extern "C" { typedef _JOBOBJECT_END_OF_JOB_TIME_INFORMATION *PJOBOBJECT_END_OF_JOB_TIME_INFORMATION; }




extern "C" { typedef 
#line 7377
struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT { 
PVOID CompletionKey; 
HANDLE CompletionPort; 
} JOBOBJECT_ASSOCIATE_COMPLETION_PORT; }extern "C" { typedef _JOBOBJECT_ASSOCIATE_COMPLETION_PORT *PJOBOBJECT_ASSOCIATE_COMPLETION_PORT; }




extern "C" { typedef 
#line 7382
struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION { 
JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo; 
IO_COUNTERS IoInfo; 
} JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION; }extern "C" { typedef _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION *PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION; }



extern "C" { typedef 
#line 7387
struct _JOBOBJECT_JOBSET_INFORMATION { 
DWORD MemberLevel; 
} JOBOBJECT_JOBSET_INFORMATION; }extern "C" { typedef _JOBOBJECT_JOBSET_INFORMATION *PJOBOBJECT_JOBSET_INFORMATION; }
#line 7483
extern "C" { typedef 
#line 7471
enum _JOBOBJECTINFOCLASS { 
JobObjectBasicAccountingInformation = 1, 
JobObjectBasicLimitInformation, 
JobObjectBasicProcessIdList, 
JobObjectBasicUIRestrictions, 
JobObjectSecurityLimitInformation, 
JobObjectEndOfJobTimeInformation, 
JobObjectAssociateCompletionPortInformation, 
JobObjectBasicAndIoAccountingInformation, 
JobObjectExtendedLimitInformation, 
JobObjectJobSetInformation, 
MaxJobObjectInfoClass
} JOBOBJECTINFOCLASS; }
#line 7512
extern "C" { typedef 
#line 7507
enum _LOGICAL_PROCESSOR_RELATIONSHIP { 
RelationProcessorCore, 
RelationNumaNode, 
RelationCache, 
RelationProcessorPackage
} LOGICAL_PROCESSOR_RELATIONSHIP; }
#line 7521
extern "C" { typedef 
#line 7516
enum _PROCESSOR_CACHE_TYPE { 
CacheUnified, 
CacheInstruction, 
CacheData, 
CacheTrace
} PROCESSOR_CACHE_TYPE; }
#line 7531
extern "C" { typedef 
#line 7525
struct _CACHE_DESCRIPTOR { 
BYTE Level; 
BYTE Associativity; 
WORD LineSize; 
DWORD Size; 
PROCESSOR_CACHE_TYPE Type; 
} CACHE_DESCRIPTOR; }extern "C" { typedef _CACHE_DESCRIPTOR *PCACHE_DESCRIPTOR; }
#line 7546
extern "C" { typedef 
#line 7533
struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION { 
ULONG_PTR ProcessorMask; 
LOGICAL_PROCESSOR_RELATIONSHIP Relationship; 
union { 
struct { 
BYTE Flags; 
} ProcessorCore; 
struct { 
DWORD NodeNumber; 
} NumaNode; 
CACHE_DESCRIPTOR Cache; 
ULONGLONG Reserved[2]; 
}; 
} SYSTEM_LOGICAL_PROCESSOR_INFORMATION; }extern "C" { typedef _SYSTEM_LOGICAL_PROCESSOR_INFORMATION *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION; }
#line 7613
extern "C" { typedef 
#line 7605
struct _MEMORY_BASIC_INFORMATION { 
PVOID BaseAddress; 
PVOID AllocationBase; 
DWORD AllocationProtect; 
SIZE_T RegionSize; 
DWORD State; 
DWORD Protect; 
DWORD Type; 
} MEMORY_BASIC_INFORMATION; }extern "C" { typedef _MEMORY_BASIC_INFORMATION *PMEMORY_BASIC_INFORMATION; }
#line 7623
extern "C" { typedef 
#line 7615
struct _MEMORY_BASIC_INFORMATION32 { 
DWORD BaseAddress; 
DWORD AllocationBase; 
DWORD AllocationProtect; 
DWORD RegionSize; 
DWORD State; 
DWORD Protect; 
DWORD Type; 
} MEMORY_BASIC_INFORMATION32; }extern "C" { typedef _MEMORY_BASIC_INFORMATION32 *PMEMORY_BASIC_INFORMATION32; }
#line 7635
extern "C" { typedef 
#line 7625
struct __declspec(align(16)) _MEMORY_BASIC_INFORMATION64 { 
ULONGLONG BaseAddress; 
ULONGLONG AllocationBase; 
DWORD AllocationProtect; 
DWORD __alignment1; 
ULONGLONG RegionSize; 
DWORD State; 
DWORD Protect; 
DWORD Type; 
DWORD __alignment2; 
} MEMORY_BASIC_INFORMATION64; }extern "C" { typedef _MEMORY_BASIC_INFORMATION64 *PMEMORY_BASIC_INFORMATION64; }
#line 7810
extern "C" { typedef 
#line 7805
struct _FILE_NOTIFY_INFORMATION { 
DWORD NextEntryOffset; 
DWORD Action; 
DWORD FileNameLength; 
WCHAR FileName[1]; 
} FILE_NOTIFY_INFORMATION; }extern "C" { typedef _FILE_NOTIFY_INFORMATION *PFILE_NOTIFY_INFORMATION; }
#line 7820
extern "C" { typedef 
#line 7817
union _FILE_SEGMENT_ELEMENT { 
PVOID64 Buffer; 
ULONGLONG Alignment; 
} FILE_SEGMENT_ELEMENT; }extern "C" { typedef _FILE_SEGMENT_ELEMENT *PFILE_SEGMENT_ELEMENT; }
#line 7838
extern "C" { typedef 
#line 7830
struct _REPARSE_GUID_DATA_BUFFER { 
DWORD ReparseTag; 
WORD ReparseDataLength; 
WORD Reserved; 
GUID ReparseGuid; 
struct { 
BYTE DataBuffer[1]; 
} GenericReparseBuffer; 
} REPARSE_GUID_DATA_BUFFER; }extern "C" { typedef _REPARSE_GUID_DATA_BUFFER *PREPARSE_GUID_DATA_BUFFER; }
#line 7939
extern "C" const GUID GUID_MAX_POWER_SAVINGS; 
#line 7946
extern "C" const GUID GUID_MIN_POWER_SAVINGS; 
#line 7953
extern "C" const GUID GUID_TYPICAL_POWER_SAVINGS; 
#line 7961
extern "C" const GUID NO_SUBGROUP_GUID; 
#line 7969
extern "C" const GUID ALL_POWERSCHEMES_GUID; 
#line 8006
extern "C" const GUID GUID_POWERSCHEME_PERSONALITY; 
#line 8015
extern "C" const GUID GUID_ACTIVE_POWERSCHEME; 
#line 8029
extern "C" const GUID GUID_VIDEO_SUBGROUP; 
#line 8035
extern "C" const GUID GUID_VIDEO_POWERDOWN_TIMEOUT; 
#line 8041
extern "C" const GUID GUID_VIDEO_ADAPTIVE_POWERDOWN; 
#line 8047
extern "C" const GUID GUID_MONITOR_POWER_ON; 
#line 8057
extern "C" const GUID GUID_DISK_SUBGROUP; 
#line 8063
extern "C" const GUID GUID_DISK_POWERDOWN_TIMEOUT; 
#line 8069
extern "C" const GUID GUID_DISK_ADAPTIVE_POWERDOWN; 
#line 8081
extern "C" const GUID GUID_SLEEP_SUBGROUP; 
#line 8087
extern "C" const GUID GUID_SLEEP_IDLE_THRESHOLD; 
#line 8093
extern "C" const GUID GUID_STANDBY_TIMEOUT; 
#line 8099
extern "C" const GUID GUID_HIBERNATE_TIMEOUT; 
#line 8105
extern "C" const GUID GUID_HIBERNATE_FASTS4_POLICY; 
#line 8114
extern "C" const GUID GUID_CRITICAL_POWER_TRANSITION; 
#line 8120
extern "C" const GUID GUID_SYSTEM_AWAYMODE; 
#line 8126
extern "C" const GUID GUID_ALLOW_AWAYMODE; 
#line 8134
extern "C" const GUID GUID_ALLOW_STANDBY_STATES; 
#line 8141
extern "C" const GUID GUID_ALLOW_RTC_WAKE; 
#line 8150
extern "C" const GUID GUID_SYSTEM_BUTTON_SUBGROUP; 




extern "C" const GUID GUID_POWERBUTTON_ACTION; 
extern "C" const GUID GUID_POWERBUTTON_ACTION_FLAGS; 
#line 8162
extern "C" const GUID GUID_SLEEPBUTTON_ACTION; 
extern "C" const GUID GUID_SLEEPBUTTON_ACTION_FLAGS; 
#line 8170
extern "C" const GUID GUID_USERINTERFACEBUTTON_ACTION; 
#line 8176
extern "C" const GUID GUID_LIDCLOSE_ACTION; 
extern "C" const GUID GUID_LIDCLOSE_ACTION_FLAGS; 
extern "C" const GUID GUID_LIDOPEN_POWERSTATE; 
#line 8187
extern "C" const GUID GUID_BATTERY_SUBGROUP; 
#line 8199
extern "C" const GUID GUID_BATTERY_DISCHARGE_ACTION_0; 
extern "C" const GUID GUID_BATTERY_DISCHARGE_LEVEL_0; 
extern "C" const GUID GUID_BATTERY_DISCHARGE_FLAGS_0; 

extern "C" const GUID GUID_BATTERY_DISCHARGE_ACTION_1; 
extern "C" const GUID GUID_BATTERY_DISCHARGE_LEVEL_1; 
extern "C" const GUID GUID_BATTERY_DISCHARGE_FLAGS_1; 

extern "C" const GUID GUID_BATTERY_DISCHARGE_ACTION_2; 
extern "C" const GUID GUID_BATTERY_DISCHARGE_LEVEL_2; 
extern "C" const GUID GUID_BATTERY_DISCHARGE_FLAGS_2; 

extern "C" const GUID GUID_BATTERY_DISCHARGE_ACTION_3; 
extern "C" const GUID GUID_BATTERY_DISCHARGE_LEVEL_3; 
extern "C" const GUID GUID_BATTERY_DISCHARGE_FLAGS_3; 
#line 8222
extern "C" const GUID GUID_PROCESSOR_SETTINGS_SUBGROUP; 


extern "C" const GUID GUID_PROCESSOR_THROTTLE_POLICY; 
#line 8233
extern "C" const GUID GUID_PROCESSOR_THROTTLE_MAXIMUM; 
#line 8241
extern "C" const GUID GUID_PROCESSOR_THROTTLE_MINIMUM; 
#line 8247
extern "C" const GUID GUID_PROCESSOR_IDLESTATE_POLICY; 
#line 8253
extern "C" const GUID GUID_PROCESSOR_PERFSTATE_POLICY; 
#line 8261
extern "C" const GUID GUID_SYSTEM_COOLING_POLICY; 
#line 8273
extern "C" const GUID GUID_LOCK_CONSOLE_ON_WAKE; 
#line 8293
extern "C" const GUID GUID_ACDC_POWER_SOURCE; 
#line 8309
extern "C" const GUID GUID_LIDSWITCH_STATE_CHANGE; 
#line 8326
extern "C" const GUID GUID_BATTERY_PERCENTAGE_REMAINING; 
#line 8333
extern "C" const GUID GUID_IDLE_BACKGROUND_TASK; 
#line 8340
extern "C" const GUID GUID_BACKGROUND_TASK_NOTIFICATION; 
#line 8348
extern "C" const GUID GUID_APPLAUNCH_BUTTON; 
#line 8359
extern "C" const GUID GUID_PCIEXPRESS_SETTINGS_SUBGROUP; 
#line 8365
extern "C" const GUID GUID_PCIEXPRESS_ASPM_POLICY; 
#line 8377
extern "C" { typedef 
#line 8368
enum _SYSTEM_POWER_STATE { 
PowerSystemUnspecified, 
PowerSystemWorking, 
PowerSystemSleeping1, 
PowerSystemSleeping2, 
PowerSystemSleeping3, 
PowerSystemHibernate, 
PowerSystemShutdown, 
PowerSystemMaximum
} SYSTEM_POWER_STATE; }extern "C" { typedef _SYSTEM_POWER_STATE *PSYSTEM_POWER_STATE; }
#line 8390
extern "C" { typedef 
#line 8381
enum { 
PowerActionNone, 
PowerActionReserved, 
PowerActionSleep, 
PowerActionHibernate, 
PowerActionShutdown, 
PowerActionShutdownReset, 
PowerActionShutdownOff, 
PowerActionWarmEject
} POWER_ACTION, *PPOWER_ACTION; }
#line 8399
extern "C" { typedef 
#line 8392
enum _DEVICE_POWER_STATE { 
PowerDeviceUnspecified, 
PowerDeviceD0, 
PowerDeviceD1, 
PowerDeviceD2, 
PowerDeviceD3, 
PowerDeviceMaximum
} DEVICE_POWER_STATE; }extern "C" { typedef _DEVICE_POWER_STATE *PDEVICE_POWER_STATE; }
#line 8409
extern "C" { typedef DWORD EXECUTION_STATE; }




extern "C" { typedef 
#line 8411
enum { 
LT_DONT_CARE, 
LT_LOWEST_LATENCY
} LATENCY_TIME; }
#line 8444
extern "C" { typedef 
#line 8435
struct CM_Power_Data_s { 
DWORD PD_Size; 
DEVICE_POWER_STATE PD_MostRecentPowerState; 
DWORD PD_Capabilities; 
DWORD PD_D1Latency; 
DWORD PD_D2Latency; 
DWORD PD_D3Latency; 
DEVICE_POWER_STATE PD_PowerStateMapping[7]; 
SYSTEM_POWER_STATE PD_DeepestSystemWake; 
} CM_POWER_DATA; }extern "C" { typedef CM_Power_Data_s *PCM_POWER_DATA; }
#line 8491 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 8450
enum { 
SystemPowerPolicyAc, 
SystemPowerPolicyDc, 
VerifySystemPolicyAc, 
VerifySystemPolicyDc, 
SystemPowerCapabilities, 
SystemBatteryState, 
SystemPowerStateHandler, 
ProcessorStateHandler, 
SystemPowerPolicyCurrent, 
AdministratorPowerPolicy, 
SystemReserveHiberFile, 
ProcessorInformation, 
SystemPowerInformation, 
ProcessorStateHandler2, 
LastWakeTime, 
LastSleepTime, 
SystemExecutionState, 
SystemPowerStateNotifyHandler, 
ProcessorPowerPolicyAc, 
ProcessorPowerPolicyDc, 
VerifyProcessorPowerPolicyAc, 
VerifyProcessorPowerPolicyDc, 
ProcessorPowerPolicyCurrent, 
SystemPowerStateLogging, 
SystemPowerLoggingEntry, 
SetPowerSettingValue, 
NotifyUserPowerSetting, 
GetPowerTransitionVetoes, 
SetPowerTransitionVeto, 
SystemVideoState, 
TraceApplicationPowerMessage, 
TraceApplicationPowerMessageEnd, 
ProcessorPerfStates, 
ProcessorIdleStates, 
ProcessorThrottleStates, 
SystemWakeSource, 
SystemHiberFileInformation, 
TraceServicePowerMessage, 
ProcessorLoad, 
PowerShutdownNotification
} POWER_INFORMATION_LEVEL; }
#line 8507
extern "C" { typedef 
#line 8504
struct _PO_TRANSITION_VETO_REASON { 
DWORD ResourceId; 
DWORD ModuleNameOffset; 
} PO_TRANSITION_VETO_REASON; }extern "C" { typedef _PO_TRANSITION_VETO_REASON *PPO_TRANSITION_VETO_REASON; }



extern "C" { typedef 
#line 8509
struct _PO_TRANSITION_VETO_WINDOW { 
HANDLE Handle; 
} PO_TRANSITION_VETO_WINDOW; }extern "C" { typedef _PO_TRANSITION_VETO_WINDOW *PPO_TRANSITION_VETO_WINDOW; }



extern "C" { typedef 
#line 8513
struct _PO_TRANSITION_VETO_SERVICE { 
DWORD ServiceNameOffset; 
} PO_TRANSITION_VETO_SERVICE; }extern "C" { typedef _PO_TRANSITION_VETO_SERVICE *PPO_TRANSITION_VETO_SERVICE; }
#line 8536
extern "C" { typedef 
#line 8526
struct _PO_TRANSITION_VETO { 
DWORD Type; 
PO_TRANSITION_VETO_REASON Reason; 
DWORD ProcessId; 

union { 
PO_TRANSITION_VETO_WINDOW Window; 
PO_TRANSITION_VETO_SERVICE Service; 

}; 
} PO_TRANSITION_VETO; }extern "C" { typedef _PO_TRANSITION_VETO *PPO_TRANSITION_VETO; }




extern "C" { typedef 
#line 8538
struct _PO_TRANSITION_VETOES { 
DWORD Count; 
PO_TRANSITION_VETO Vetoes[1]; 
} PO_TRANSITION_VETOES; }extern "C" { typedef _PO_TRANSITION_VETOES *PPO_TRANSITION_VETOES; }
#line 8552
extern "C" { typedef 
#line 8547
enum { 
PoAc, 
PoDc, 
PoHot, 
PoConditionMaximum
} SYSTEM_POWER_CONDITION; }
#line 8584
extern "C" { typedef 
#line 8554
struct SET_POWER_SETTING_VALUE { 
#line 8560
DWORD Version; 
#line 8566
GUID Guid; 
#line 8573
SYSTEM_POWER_CONDITION PowerCondition; 




DWORD DataLength; 




BYTE Data[1]; 
} SET_POWER_SETTING_VALUE, *PSET_POWER_SETTING_VALUE; }
#line 8590
extern "C" { typedef 
#line 8588
struct NOTIFY_USER_POWER_SETTING { 
GUID Guid; 
} NOTIFY_USER_POWER_SETTING, *PNOTIFY_USER_POWER_SETTING; }
#line 8616
extern "C" { typedef 
#line 8597
struct _APPLICATIONLAUNCH_SETTING_VALUE { 
#line 8603
LARGE_INTEGER ActivationTime; 




DWORD Flags; 




DWORD ButtonInstanceID; 


} APPLICATIONLAUNCH_SETTING_VALUE; }extern "C" { typedef _APPLICATIONLAUNCH_SETTING_VALUE *PAPPLICATIONLAUNCH_SETTING_VALUE; }
#line 8632
extern "C" { typedef 
#line 8622
enum { 
PlatformRoleUnspecified, 
PlatformRoleDesktop, 
PlatformRoleMobile, 
PlatformRoleWorkstation, 
PlatformRoleEnterpriseServer, 
PlatformRoleSOHOServer, 
PlatformRoleAppliancePC, 
PlatformRolePerformanceServer, 
PlatformRoleMaximum
} POWER_PLATFORM_ROLE; }
#line 8641
extern "C" { typedef 
#line 8638
enum { 
DeviceWakeSourceType, 
FixedWakeSourceType
} PO_WAKE_SOURCE_TYPE, *PPO_WAKE_SOURCE_TYPE; }
#line 8647
extern "C" { typedef 
#line 8643
enum { 
FixedWakeSourcePowerButton, 
FixedWakeSourceSleepButton, 
FixedWakeSourceRtc
} PO_FIXED_WAKE_SOURCE_TYPE, *PPO_FIXED_WAKE_SOURCE_TYPE; }




extern "C" { typedef 
#line 8649
struct _PO_WAKE_SOURCE_HEADER { 
PO_WAKE_SOURCE_TYPE Type; 
DWORD Size; 
} PO_WAKE_SOURCE_HEADER; }extern "C" { typedef _PO_WAKE_SOURCE_HEADER *PPO_WAKE_SOURCE_HEADER; }




extern "C" { typedef 
#line 8654
struct _PO_WAKE_SOURCE_DEVICE { 
PO_WAKE_SOURCE_HEADER Header; 
WCHAR InstancePath[1]; 
} PO_WAKE_SOURCE_DEVICE; }extern "C" { typedef _PO_WAKE_SOURCE_DEVICE *PPO_WAKE_SOURCE_DEVICE; }




extern "C" { typedef 
#line 8659
struct _PO_WAKE_SOURCE_FIXED { 
PO_WAKE_SOURCE_HEADER Header; 
PO_FIXED_WAKE_SOURCE_TYPE FixedWakeSourceType; 
} PO_WAKE_SOURCE_FIXED; }extern "C" { typedef _PO_WAKE_SOURCE_FIXED *PPO_WAKE_SOURCE_FIXED; }




extern "C" { typedef 
#line 8664
struct _PO_WAKE_SOURCE_INFO { 
DWORD Count; 
DWORD Offsets[1]; 
} PO_WAKE_SOURCE_INFO; }extern "C" { typedef _PO_WAKE_SOURCE_INFO *PPO_WAKE_SOURCE_INFO; }




extern "C" { typedef 
#line 8669
struct _PO_WAKE_SOURCE_HISTORY { 
DWORD Count; 
DWORD Offsets[1]; 
} PO_WAKE_SOURCE_HISTORY; }extern "C" { typedef _PO_WAKE_SOURCE_HISTORY *PPO_WAKE_SOURCE_HISTORY; }
#line 8682
extern "C" { typedef 
#line 8679
struct BATTERY_REPORTING_SCALE { 
DWORD Granularity; 
DWORD Capacity; 
} BATTERY_REPORTING_SCALE, *PBATTERY_REPORTING_SCALE; }
#line 8690 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 8687
struct PPM_SIMULATED_PROCESSOR_LOAD { 
BOOLEAN Enabled; 
BYTE PercentBusy[32]; 
} PPM_SIMULATED_PROCESSOR_LOAD, *PPPM_SIMULATED_PROCESSOR_LOAD; }
#line 8696
extern "C" { typedef 
#line 8692
struct PPM_WMI_LEGACY_PERFSTATE { 
DWORD Frequency; 
DWORD Flags; 
DWORD PercentFrequency; 
} PPM_WMI_LEGACY_PERFSTATE, *PPPM_WMI_LEGACY_PERFSTATE; }
#line 8710
extern "C" { typedef 
#line 8698
struct PPM_WMI_IDLE_STATE { 
DWORD Latency; 
DWORD Power; 
DWORD TimeCheck; 
BYTE PromotePercent; 
BYTE DemotePercent; 
BYTE StateType; 
BYTE Reserved; 
DWORD StateFlags; 
DWORD Context; 
DWORD IdleHandler; 
DWORD Reserved1; 
} PPM_WMI_IDLE_STATE, *PPPM_WMI_IDLE_STATE; }
#line 8719
extern "C" { typedef 
#line 8712
struct PPM_WMI_IDLE_STATES { 
DWORD Type; 
DWORD Count; 
DWORD TargetState; 
DWORD OldState; 
DWORD64 TargetProcessors; 
PPM_WMI_IDLE_STATE State[1]; 
} PPM_WMI_IDLE_STATES, *PPPM_WMI_IDLE_STATES; }
#line 8736
extern "C" { typedef 
#line 8721
struct PPM_WMI_PERF_STATE { 
DWORD Frequency; 
DWORD Power; 
BYTE PercentFrequency; 
BYTE IncreaseLevel; 
BYTE DecreaseLevel; 
BYTE Type; 
DWORD IncreaseTime; 
DWORD DecreaseTime; 
DWORD64 Control; 
DWORD64 Status; 
DWORD HitCount; 
DWORD Reserved1; 
DWORD64 Reserved2; 
DWORD64 Reserved3; 
} PPM_WMI_PERF_STATE, *PPPM_WMI_PERF_STATE; }
#line 8760
extern "C" { typedef 
#line 8738
struct PPM_WMI_PERF_STATES { 
DWORD Count; 
DWORD MaxFrequency; 
DWORD CurrentState; 
DWORD MaxPerfState; 
DWORD MinPerfState; 
DWORD LowestPerfState; 
DWORD ThermalConstraint; 
BYTE BusyAdjThreshold; 
BYTE PolicyType; 
BYTE Type; 
BYTE Reserved; 
DWORD TimerInterval; 
DWORD64 TargetProcessors; 
DWORD PStateHandler; 
DWORD PStateContext; 
DWORD TStateHandler; 
DWORD TStateContext; 
DWORD FeedbackHandler; 
DWORD Reserved1; 
DWORD64 Reserved2; 
PPM_WMI_PERF_STATE State[1]; 
} PPM_WMI_PERF_STATES, *PPPM_WMI_PERF_STATES; }
#line 8774
extern "C" { typedef 
#line 8768
struct PPM_IDLE_STATE_ACCOUNTING { 
DWORD IdleTransitions; 
DWORD FailedTransitions; 
DWORD InvalidBucketIndex; 
DWORD64 TotalTime; 
DWORD IdleTimeBuckets[6]; 
} PPM_IDLE_STATE_ACCOUNTING, *PPPM_IDLE_STATE_ACCOUNTING; }
#line 8782
extern "C" { typedef 
#line 8776
struct PPM_IDLE_ACCOUNTING { 
DWORD StateCount; 
DWORD TotalTransitions; 
DWORD ResetCount; 
DWORD64 StartTime; 
PPM_IDLE_STATE_ACCOUNTING State[1]; 
} PPM_IDLE_ACCOUNTING, *PPPM_IDLE_ACCOUNTING; }
#line 8806
extern "C" const GUID PPM_PERFSTATE_CHANGE_GUID; 
#line 8810 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" const GUID PPM_PERFSTATE_DOMAIN_CHANGE_GUID; 
#line 8814 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" const GUID PPM_IDLESTATE_CHANGE_GUID; 
#line 8818 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" const GUID PPM_PERFSTATES_DATA_GUID; 
#line 8822 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" const GUID PPM_IDLESTATES_DATA_GUID; 
#line 8826 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" const GUID PPM_IDLE_ACCOUNTING_GUID; 
#line 8830 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" const GUID PPM_THERMALCONSTRAINT_GUID; 
#line 8834 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" const GUID PPM_PERFMON_PERFSTATE_GUID; 
#line 8838 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" const GUID PPM_THERMAL_POLICY_CHANGE_GUID; 
#line 8848 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 8842
struct PPM_PERFSTATE_EVENT { 
DWORD State; 
DWORD Status; 
DWORD Latency; 
DWORD Speed; 
DWORD Processor; 
} PPM_PERFSTATE_EVENT, *PPPM_PERFSTATE_EVENT; }
#line 8855
extern "C" { typedef 
#line 8850
struct PPM_PERFSTATE_DOMAIN_EVENT { 
DWORD State; 
DWORD Latency; 
DWORD Speed; 
DWORD64 Processors; 
} PPM_PERFSTATE_DOMAIN_EVENT, *PPPM_PERFSTATE_DOMAIN_EVENT; }
#line 8861
extern "C" { typedef 
#line 8857
struct PPM_IDLESTATE_EVENT { 
DWORD NewState; 
DWORD OldState; 
DWORD64 Processors; 
} PPM_IDLESTATE_EVENT, *PPPM_IDLESTATE_EVENT; }




extern "C" { typedef 
#line 8863
struct PPM_THERMALCHANGE_EVENT { 
DWORD ThermalConstraint; 
DWORD64 Processors; 
} PPM_THERMALCHANGE_EVENT, *PPPM_THERMALCHANGE_EVENT

#pragma warning(push)
#pragma warning(disable:4121)
; }



extern "C" { typedef 
#line 8871
struct PPM_THERMAL_POLICY_EVENT { 
BYTE Mode; 
DWORD64 Processors; 
} PPM_THERMAL_POLICY_EVENT, *PPPM_THERMAL_POLICY_EVENT

#pragma warning(pop)
; }
#line 8885
extern "C" { typedef 
#line 8881
struct POWER_ACTION_POLICY { 
POWER_ACTION Action; 
DWORD Flags; 
DWORD EventCode; 
} POWER_ACTION_POLICY, *PPOWER_ACTION_POLICY; }
#line 8921
extern "C" { typedef 
#line 8915
struct SYSTEM_POWER_LEVEL { 
BOOLEAN Enable; 
BYTE Spare[3]; 
DWORD BatteryLevel; 
POWER_ACTION_POLICY PowerPolicy; 
SYSTEM_POWER_STATE MinSystemState; 
} SYSTEM_POWER_LEVEL, *PSYSTEM_POWER_LEVEL; }
#line 8979
extern "C" { typedef 
#line 8930
struct _SYSTEM_POWER_POLICY { 
DWORD Revision; 


POWER_ACTION_POLICY PowerButton; 
POWER_ACTION_POLICY SleepButton; 
POWER_ACTION_POLICY LidClose; 
SYSTEM_POWER_STATE LidOpenWake; 
DWORD Reserved; 


POWER_ACTION_POLICY Idle; 
DWORD IdleTimeout; 
BYTE IdleSensitivity; 

BYTE DynamicThrottle; 
BYTE Spare2[2]; 


SYSTEM_POWER_STATE MinSleep; 
SYSTEM_POWER_STATE MaxSleep; 
SYSTEM_POWER_STATE ReducedLatencySleep; 
DWORD WinLogonFlags; 

DWORD Spare3; 



DWORD DozeS4Timeout; 


DWORD BroadcastCapacityResolution; 
SYSTEM_POWER_LEVEL DischargePolicy[4]; 


DWORD VideoTimeout; 
BOOLEAN VideoDimDisplay; 
DWORD VideoReserved[3]; 


DWORD SpindownTimeout; 


BOOLEAN OptimizeForPower; 
BYTE FanThrottleTolerance; 
BYTE ForcedThrottle; 
BYTE MinThrottle; 
POWER_ACTION_POLICY OverThrottled; 

} SYSTEM_POWER_POLICY; }extern "C" { typedef _SYSTEM_POWER_POLICY *PSYSTEM_POWER_POLICY; }
#line 8995
extern "C" { typedef 
#line 8990
struct PROCESSOR_IDLESTATE_INFO { 
DWORD TimeCheck; 
BYTE DemotePercent; 
BYTE PromotePercent; 
BYTE Spare[2]; 
} PROCESSOR_IDLESTATE_INFO, *PPROCESSOR_IDLESTATE_INFO; }
#line 9010
extern "C" { typedef 
#line 8997
struct PROCESSOR_IDLESTATE_POLICY { 
WORD Revision; 
union { 
WORD AsWORD; 
struct { 
WORD AllowScaling:1; 
WORD Disabled:1; 
WORD Reserved:14; 
}; 
} Flags; 

DWORD PolicyCount; 
PROCESSOR_IDLESTATE_INFO Policy[3]; 
} PROCESSOR_IDLESTATE_POLICY, *PPROCESSOR_IDLESTATE_POLICY; }
#line 9042
extern "C" { typedef 
#line 9025
struct _PROCESSOR_POWER_POLICY_INFO { 


DWORD TimeCheck; 
DWORD DemoteLimit; 
DWORD PromoteLimit; 


BYTE DemotePercent; 
BYTE PromotePercent; 
BYTE Spare[2]; 


DWORD AllowDemotion:1; 
DWORD AllowPromotion:1; 
DWORD Reserved:30; 

} PROCESSOR_POWER_POLICY_INFO; }extern "C" { typedef _PROCESSOR_POWER_POLICY_INFO *PPROCESSOR_POWER_POLICY_INFO; }
#line 9062
extern "C" { typedef 
#line 9045
struct _PROCESSOR_POWER_POLICY { 
DWORD Revision; 


BYTE DynamicThrottle; 
BYTE Spare[3]; 


DWORD DisableCStates:1; 
DWORD Reserved:31; 




DWORD PolicyCount; 
PROCESSOR_POWER_POLICY_INFO Policy[3]; 

} PROCESSOR_POWER_POLICY; }extern "C" { typedef _PROCESSOR_POWER_POLICY *PPROCESSOR_POWER_POLICY; }
#line 9096
extern "C" { typedef 
#line 9073
struct PROCESSOR_PERFSTATE_POLICY { 
DWORD Revision; 
BYTE MaxThrottle; 
BYTE MinThrottle; 
BYTE BusyAdjThreshold; 
union { 
BYTE Spare; 
union { 
BYTE AsBYTE; 
struct { 
BYTE NoDomainAccounting:1; 
BYTE IncreasePolicy:2; 
BYTE DecreasePolicy:2; 
BYTE Reserved:3; 
}; 
} Flags; 
}; 

DWORD TimeCheck; 
DWORD IncreaseTime; 
DWORD DecreaseTime; 
DWORD IncreasePercent; 
DWORD DecreasePercent; 
} PROCESSOR_PERFSTATE_POLICY, *PPROCESSOR_PERFSTATE_POLICY; }
#line 9112
extern "C" { typedef 
#line 9099
struct _ADMINISTRATOR_POWER_POLICY { 


SYSTEM_POWER_STATE MinSleep; 
SYSTEM_POWER_STATE MaxSleep; 


DWORD MinVideoTimeout; 
DWORD MaxVideoTimeout; 


DWORD MinSpindownTimeout; 
DWORD MaxSpindownTimeout; 
} ADMINISTRATOR_POWER_POLICY; }extern "C" { typedef _ADMINISTRATOR_POWER_POLICY *PADMINISTRATOR_POWER_POLICY; }
#line 9162 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 9117 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
struct SYSTEM_POWER_CAPABILITIES { 

BOOLEAN PowerButtonPresent; 
BOOLEAN SleepButtonPresent; 
BOOLEAN LidPresent; 
BOOLEAN SystemS1; 
BOOLEAN SystemS2; 
BOOLEAN SystemS3; 
BOOLEAN SystemS4; 
BOOLEAN SystemS5; 
BOOLEAN HiberFilePresent; 
BOOLEAN FullWake; 
BOOLEAN VideoDimPresent; 
BOOLEAN ApmPresent; 
BOOLEAN UpsPresent; 


BOOLEAN ThermalControl; 
BOOLEAN ProcessorThrottle; 
BYTE ProcessorMinThrottle; 
#line 9142 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
BYTE ProcessorMaxThrottle; 
BOOLEAN FastSystemS4; 
BYTE spare2[3]; 
#line 9148 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
BOOLEAN DiskSpinDown; 
BYTE spare3[8]; 


BOOLEAN SystemBatteriesPresent; 
BOOLEAN BatteriesAreShortTerm; 
BATTERY_REPORTING_SCALE BatteryScale[3]; 


SYSTEM_POWER_STATE AcOnLineWake; 
SYSTEM_POWER_STATE SoftLidWake; 
SYSTEM_POWER_STATE RtcWake; 
SYSTEM_POWER_STATE MinDeviceWakeState; 
SYSTEM_POWER_STATE DefaultLowLatencyWake; 
} SYSTEM_POWER_CAPABILITIES, *PSYSTEM_POWER_CAPABILITIES; }
#line 9178
extern "C" { typedef 
#line 9164
struct SYSTEM_BATTERY_STATE { 
BOOLEAN AcOnLine; 
BOOLEAN BatteryPresent; 
BOOLEAN Charging; 
BOOLEAN Discharging; 
BOOLEAN Spare1[4]; 

DWORD MaxCapacity; 
DWORD RemainingCapacity; 
DWORD Rate; 
DWORD EstimatedTime; 

DWORD DefaultAlert1; 
DWORD DefaultAlert2; 
} SYSTEM_BATTERY_STATE, *PSYSTEM_BATTERY_STATE
#line 24 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\pshpack4.h"
#pragma warning(disable:4103)
#line 24 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\pshpack2.h"
#pragma warning(disable:4103)
; }
#line 26 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\pshpack4.h"
#pragma pack ( push, 4 )
#line 26 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\pshpack2.h"
#pragma pack ( push, 2 )
#line 9229 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 9209
struct _IMAGE_DOS_HEADER { 
WORD e_magic; 
WORD e_cblp; 
WORD e_cp; 
WORD e_crlc; 
WORD e_cparhdr; 
WORD e_minalloc; 
WORD e_maxalloc; 
WORD e_ss; 
WORD e_sp; 
WORD e_csum; 
WORD e_ip; 
WORD e_cs; 
WORD e_lfarlc; 
WORD e_ovno; 
WORD e_res[4]; 
WORD e_oemid; 
WORD e_oeminfo; 
WORD e_res2[10]; 
LONG e_lfanew; 
} IMAGE_DOS_HEADER; }extern "C" { typedef _IMAGE_DOS_HEADER *PIMAGE_DOS_HEADER; }
#line 9262
extern "C" { typedef 
#line 9231
struct _IMAGE_OS2_HEADER { 
WORD ne_magic; 
CHAR ne_ver; 
CHAR ne_rev; 
WORD ne_enttab; 
WORD ne_cbenttab; 
LONG ne_crc; 
WORD ne_flags; 
WORD ne_autodata; 
WORD ne_heap; 
WORD ne_stack; 
LONG ne_csip; 
LONG ne_sssp; 
WORD ne_cseg; 
WORD ne_cmod; 
WORD ne_cbnrestab; 
WORD ne_segtab; 
WORD ne_rsrctab; 
WORD ne_restab; 
WORD ne_modtab; 
WORD ne_imptab; 
LONG ne_nrestab; 
WORD ne_cmovent; 
WORD ne_align; 
WORD ne_cres; 
BYTE ne_exetyp; 
BYTE ne_flagsothers; 
WORD ne_pretthunks; 
WORD ne_psegrefbytes; 
WORD ne_swaparea; 
WORD ne_expver; 
} IMAGE_OS2_HEADER; }extern "C" { typedef _IMAGE_OS2_HEADER *PIMAGE_OS2_HEADER; }
#line 9316
extern "C" { typedef 
#line 9264
struct _IMAGE_VXD_HEADER { 
WORD e32_magic; 
BYTE e32_border; 
BYTE e32_worder; 
DWORD e32_level; 
WORD e32_cpu; 
WORD e32_os; 
DWORD e32_ver; 
DWORD e32_mflags; 
DWORD e32_mpages; 
DWORD e32_startobj; 
DWORD e32_eip; 
DWORD e32_stackobj; 
DWORD e32_esp; 
DWORD e32_pagesize; 
DWORD e32_lastpagesize; 
DWORD e32_fixupsize; 
DWORD e32_fixupsum; 
DWORD e32_ldrsize; 
DWORD e32_ldrsum; 
DWORD e32_objtab; 
DWORD e32_objcnt; 
DWORD e32_objmap; 
DWORD e32_itermap; 
DWORD e32_rsrctab; 
DWORD e32_rsrccnt; 
DWORD e32_restab; 
DWORD e32_enttab; 
DWORD e32_dirtab; 
DWORD e32_dircnt; 
DWORD e32_fpagetab; 
DWORD e32_frectab; 
DWORD e32_impmod; 
DWORD e32_impmodcnt; 
DWORD e32_impproc; 
DWORD e32_pagesum; 
DWORD e32_datapage; 
DWORD e32_preload; 
DWORD e32_nrestab; 
DWORD e32_cbnrestab; 
DWORD e32_nressum; 
DWORD e32_autodata; 
DWORD e32_debuginfo; 
DWORD e32_debuglen; 
DWORD e32_instpreload; 
DWORD e32_instdemand; 
DWORD e32_heapsize; 
BYTE e32_res3[12]; 
DWORD e32_winresoff; 
DWORD e32_winreslen; 
WORD e32_devid; 
WORD e32_ddkver; 
} IMAGE_VXD_HEADER; }extern "C" { typedef _IMAGE_VXD_HEADER *PIMAGE_VXD_HEADER; }
#line 27 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack ( pop )
#line 9334 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 9326
struct _IMAGE_FILE_HEADER { 
WORD Machine; 
WORD NumberOfSections; 
DWORD TimeDateStamp; 
DWORD PointerToSymbolTable; 
DWORD NumberOfSymbols; 
WORD SizeOfOptionalHeader; 
WORD Characteristics; 
} IMAGE_FILE_HEADER; }extern "C" { typedef _IMAGE_FILE_HEADER *PIMAGE_FILE_HEADER; }
#line 9391
extern "C" { typedef 
#line 9388
struct _IMAGE_DATA_DIRECTORY { 
DWORD VirtualAddress; 
DWORD Size; 
} IMAGE_DATA_DIRECTORY; }extern "C" { typedef _IMAGE_DATA_DIRECTORY *PIMAGE_DATA_DIRECTORY; }
#line 9440
extern "C" { typedef 
#line 9399
struct _IMAGE_OPTIONAL_HEADER { 




WORD Magic; 
BYTE MajorLinkerVersion; 
BYTE MinorLinkerVersion; 
DWORD SizeOfCode; 
DWORD SizeOfInitializedData; 
DWORD SizeOfUninitializedData; 
DWORD AddressOfEntryPoint; 
DWORD BaseOfCode; 
DWORD BaseOfData; 
#line 9418
DWORD ImageBase; 
DWORD SectionAlignment; 
DWORD FileAlignment; 
WORD MajorOperatingSystemVersion; 
WORD MinorOperatingSystemVersion; 
WORD MajorImageVersion; 
WORD MinorImageVersion; 
WORD MajorSubsystemVersion; 
WORD MinorSubsystemVersion; 
DWORD Win32VersionValue; 
DWORD SizeOfImage; 
DWORD SizeOfHeaders; 
DWORD CheckSum; 
WORD Subsystem; 
WORD DllCharacteristics; 
DWORD SizeOfStackReserve; 
DWORD SizeOfStackCommit; 
DWORD SizeOfHeapReserve; 
DWORD SizeOfHeapCommit; 
DWORD LoaderFlags; 
DWORD NumberOfRvaAndSizes; 
IMAGE_DATA_DIRECTORY DataDirectory[16]; 
} IMAGE_OPTIONAL_HEADER32; }extern "C" { typedef _IMAGE_OPTIONAL_HEADER *PIMAGE_OPTIONAL_HEADER32; }
#line 9456
extern "C" { typedef 
#line 9442
struct _IMAGE_ROM_OPTIONAL_HEADER { 
WORD Magic; 
BYTE MajorLinkerVersion; 
BYTE MinorLinkerVersion; 
DWORD SizeOfCode; 
DWORD SizeOfInitializedData; 
DWORD SizeOfUninitializedData; 
DWORD AddressOfEntryPoint; 
DWORD BaseOfCode; 
DWORD BaseOfData; 
DWORD BaseOfBss; 
DWORD GprMask; 
DWORD CprMask[4]; 
DWORD GpValue; 
} IMAGE_ROM_OPTIONAL_HEADER; }extern "C" { typedef _IMAGE_ROM_OPTIONAL_HEADER *PIMAGE_ROM_OPTIONAL_HEADER; }
#line 9489
extern "C" { typedef 
#line 9458
struct _IMAGE_OPTIONAL_HEADER64 { 
WORD Magic; 
BYTE MajorLinkerVersion; 
BYTE MinorLinkerVersion; 
DWORD SizeOfCode; 
DWORD SizeOfInitializedData; 
DWORD SizeOfUninitializedData; 
DWORD AddressOfEntryPoint; 
DWORD BaseOfCode; 
ULONGLONG ImageBase; 
DWORD SectionAlignment; 
DWORD FileAlignment; 
WORD MajorOperatingSystemVersion; 
WORD MinorOperatingSystemVersion; 
WORD MajorImageVersion; 
WORD MinorImageVersion; 
WORD MajorSubsystemVersion; 
WORD MinorSubsystemVersion; 
DWORD Win32VersionValue; 
DWORD SizeOfImage; 
DWORD SizeOfHeaders; 
DWORD CheckSum; 
WORD Subsystem; 
WORD DllCharacteristics; 
ULONGLONG SizeOfStackReserve; 
ULONGLONG SizeOfStackCommit; 
ULONGLONG SizeOfHeapReserve; 
ULONGLONG SizeOfHeapCommit; 
DWORD LoaderFlags; 
DWORD NumberOfRvaAndSizes; 
IMAGE_DATA_DIRECTORY DataDirectory[16]; 
} IMAGE_OPTIONAL_HEADER64; }extern "C" { typedef _IMAGE_OPTIONAL_HEADER64 *PIMAGE_OPTIONAL_HEADER64; }
#line 9500
extern "C" { typedef IMAGE_OPTIONAL_HEADER32 IMAGE_OPTIONAL_HEADER; }
extern "C" { typedef PIMAGE_OPTIONAL_HEADER32 PIMAGE_OPTIONAL_HEADER; }
#line 9509 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 9505
struct _IMAGE_NT_HEADERS64 { 
DWORD Signature; 
IMAGE_FILE_HEADER FileHeader; 
IMAGE_OPTIONAL_HEADER64 OptionalHeader; 
} IMAGE_NT_HEADERS64; }extern "C" { typedef _IMAGE_NT_HEADERS64 *PIMAGE_NT_HEADERS64; }
#line 9515
extern "C" { typedef 
#line 9511
struct _IMAGE_NT_HEADERS { 
DWORD Signature; 
IMAGE_FILE_HEADER FileHeader; 
IMAGE_OPTIONAL_HEADER32 OptionalHeader; 
} IMAGE_NT_HEADERS32; }extern "C" { typedef _IMAGE_NT_HEADERS *PIMAGE_NT_HEADERS32; }




extern "C" { typedef 
#line 9517
struct _IMAGE_ROM_HEADERS { 
IMAGE_FILE_HEADER FileHeader; 
IMAGE_ROM_OPTIONAL_HEADER OptionalHeader; 
} IMAGE_ROM_HEADERS; }extern "C" { typedef _IMAGE_ROM_HEADERS *PIMAGE_ROM_HEADERS; }
#line 9526
extern "C" { typedef IMAGE_NT_HEADERS32 IMAGE_NT_HEADERS; }
extern "C" { typedef PIMAGE_NT_HEADERS32 PIMAGE_NT_HEADERS; }
#line 9603 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 9595
struct ANON_OBJECT_HEADER { 
WORD Sig1; 
WORD Sig2; 
WORD Version; 
WORD Machine; 
DWORD TimeDateStamp; 
CLSID ClassID; 
DWORD SizeOfData; 
} ANON_OBJECT_HEADER; }
#line 9616
extern "C" { typedef 
#line 9605
struct ANON_OBJECT_HEADER_V2 { 
WORD Sig1; 
WORD Sig2; 
WORD Version; 
WORD Machine; 
DWORD TimeDateStamp; 
CLSID ClassID; 
DWORD SizeOfData; 
DWORD Flags; 
DWORD MetaDataSize; 
DWORD MetaDataOffset; 
} ANON_OBJECT_HEADER_V2; }
#line 9637
extern "C" { typedef 
#line 9623
struct _IMAGE_SECTION_HEADER { 
BYTE Name[8]; 
union { 
DWORD PhysicalAddress; 
DWORD VirtualSize; 
} Misc; 
DWORD VirtualAddress; 
DWORD SizeOfRawData; 
DWORD PointerToRawData; 
DWORD PointerToRelocations; 
DWORD PointerToLinenumbers; 
WORD NumberOfRelocations; 
WORD NumberOfLinenumbers; 
DWORD Characteristics; 
} IMAGE_SECTION_HEADER; }extern "C" { typedef _IMAGE_SECTION_HEADER *PIMAGE_SECTION_HEADER; }
#line 24 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\pshpack2.h"
#pragma warning(disable:4103)

#pragma pack ( push, 2 )
#line 9724 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 9710
struct _IMAGE_SYMBOL { 
union { 
BYTE ShortName[8]; 
struct { 
DWORD Short; 
DWORD Long; 
} Name; 
DWORD LongName[2]; 
} N; 
DWORD Value; 
SHORT SectionNumber; 
WORD Type; 
BYTE StorageClass; 
BYTE NumberOfAuxSymbols; 
} IMAGE_SYMBOL; }
extern "C" { typedef IMAGE_SYMBOL *PIMAGE_SYMBOL; }
#line 9885 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 9853
union _IMAGE_AUX_SYMBOL { 
struct { 
DWORD TagIndex; 
union { 
struct { 
WORD Linenumber; 
WORD Size; 
} LnSz; 
DWORD TotalSize; 
} Misc; 
union { 
struct { 
DWORD PointerToLinenumber; 
DWORD PointerToNextFunction; 
} Function; 
struct { 
WORD Dimension[4]; 
} Array; 
} FcnAry; 
WORD TvIndex; 
} Sym; 
struct { 
BYTE Name[18]; 
} File; 
struct { 
DWORD Length; 
WORD NumberOfRelocations; 
WORD NumberOfLinenumbers; 
DWORD CheckSum; 
SHORT Number; 
BYTE Selection; 
} Section; 
} IMAGE_AUX_SYMBOL; }
extern "C" { typedef IMAGE_AUX_SYMBOL *PIMAGE_AUX_SYMBOL; }



extern "C" { typedef 
#line 9888
enum IMAGE_AUX_SYMBOL_TYPE { 
IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1
} IMAGE_AUX_SYMBOL_TYPE; }
#line 24 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\pshpack2.h"
#pragma warning(disable:4103)

#pragma pack ( push, 2 )
#line 9899 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 9894
struct IMAGE_AUX_SYMBOL_TOKEN_DEF { 
BYTE bAuxType; 
BYTE bReserved; 
DWORD SymbolTableIndex; 
BYTE rgbReserved[12]; 
} IMAGE_AUX_SYMBOL_TOKEN_DEF; }

extern "C" { typedef IMAGE_AUX_SYMBOL_TOKEN_DEF *PIMAGE_AUX_SYMBOL_TOKEN_DEF; }
#line 27 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack ( pop )
#line 9932 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 9925
struct _IMAGE_RELOCATION { 
union { 
DWORD VirtualAddress; 
DWORD RelocCount; 
}; 
DWORD SymbolTableIndex; 
WORD Type; 
} IMAGE_RELOCATION; }
extern "C" { typedef IMAGE_RELOCATION *PIMAGE_RELOCATION; }
#line 10302
extern "C" { typedef 
#line 10296
struct _IMAGE_LINENUMBER { 
union { 
DWORD SymbolTableIndex; 
DWORD VirtualAddress; 
} Type; 
WORD Linenumber; 
} IMAGE_LINENUMBER; }
extern "C" { typedef IMAGE_LINENUMBER *PIMAGE_LINENUMBER; }
#line 27 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack ( pop )
#line 10317 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 10313
struct _IMAGE_BASE_RELOCATION { 
DWORD VirtualAddress; 
DWORD SizeOfBlock; 

} IMAGE_BASE_RELOCATION; }
extern "C" { typedef IMAGE_BASE_RELOCATION *PIMAGE_BASE_RELOCATION; }
#line 10354
extern "C" { typedef 
#line 10346
struct _IMAGE_ARCHIVE_MEMBER_HEADER { 
BYTE Name[16]; 
BYTE Date[12]; 
BYTE UserID[6]; 
BYTE GroupID[6]; 
BYTE Mode[8]; 
BYTE Size[10]; 
BYTE EndHeader[2]; 
} IMAGE_ARCHIVE_MEMBER_HEADER; }extern "C" { typedef _IMAGE_ARCHIVE_MEMBER_HEADER *PIMAGE_ARCHIVE_MEMBER_HEADER; }
#line 10378
extern "C" { typedef 
#line 10366
struct _IMAGE_EXPORT_DIRECTORY { 
DWORD Characteristics; 
DWORD TimeDateStamp; 
WORD MajorVersion; 
WORD MinorVersion; 
DWORD Name; 
DWORD Base; 
DWORD NumberOfFunctions; 
DWORD NumberOfNames; 
DWORD AddressOfFunctions; 
DWORD AddressOfNames; 
DWORD AddressOfNameOrdinals; 
} IMAGE_EXPORT_DIRECTORY; }extern "C" { typedef _IMAGE_EXPORT_DIRECTORY *PIMAGE_EXPORT_DIRECTORY; }
#line 10387
extern "C" { typedef 
#line 10384
struct _IMAGE_IMPORT_BY_NAME { 
WORD Hint; 
BYTE Name[1]; 
} IMAGE_IMPORT_BY_NAME; }extern "C" { typedef _IMAGE_IMPORT_BY_NAME *PIMAGE_IMPORT_BY_NAME; }
#line 24 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\pshpack8.h"
#pragma warning(disable:4103)

#pragma pack ( push, 8 )
#line 10398 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 10391
struct _IMAGE_THUNK_DATA64 { 
union { 
ULONGLONG ForwarderString; 
ULONGLONG Function; 
ULONGLONG Ordinal; 
ULONGLONG AddressOfData; 
} u1; 
} IMAGE_THUNK_DATA64; }
extern "C" { typedef IMAGE_THUNK_DATA64 *PIMAGE_THUNK_DATA64; }
#line 27 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack ( pop )
#line 10410 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 10403
struct _IMAGE_THUNK_DATA32 { 
union { 
DWORD ForwarderString; 
DWORD Function; 
DWORD Ordinal; 
DWORD AddressOfData; 
} u1; 
} IMAGE_THUNK_DATA32; }
extern "C" { typedef IMAGE_THUNK_DATA32 *PIMAGE_THUNK_DATA32; }
#line 10425
extern "C" { typedef void (__stdcall *PIMAGE_TLS_CALLBACK)(PVOID, DWORD, PVOID); }
#line 10438
extern "C" { typedef 
#line 10431
struct _IMAGE_TLS_DIRECTORY64 { 
ULONGLONG StartAddressOfRawData; 
ULONGLONG EndAddressOfRawData; 
ULONGLONG AddressOfIndex; 
ULONGLONG AddressOfCallBacks; 
DWORD SizeOfZeroFill; 
DWORD Characteristics; 
} IMAGE_TLS_DIRECTORY64; }
extern "C" { typedef IMAGE_TLS_DIRECTORY64 *PIMAGE_TLS_DIRECTORY64; }
#line 10448
extern "C" { typedef 
#line 10441
struct _IMAGE_TLS_DIRECTORY32 { 
DWORD StartAddressOfRawData; 
DWORD EndAddressOfRawData; 
DWORD AddressOfIndex; 
DWORD AddressOfCallBacks; 
DWORD SizeOfZeroFill; 
DWORD Characteristics; 
} IMAGE_TLS_DIRECTORY32; }
extern "C" { typedef IMAGE_TLS_DIRECTORY32 *PIMAGE_TLS_DIRECTORY32; }
#line 10462
extern "C" { typedef IMAGE_THUNK_DATA32 IMAGE_THUNK_DATA; }
extern "C" { typedef PIMAGE_THUNK_DATA32 PIMAGE_THUNK_DATA; }

extern "C" { typedef IMAGE_TLS_DIRECTORY32 IMAGE_TLS_DIRECTORY; }
extern "C" { typedef PIMAGE_TLS_DIRECTORY32 PIMAGE_TLS_DIRECTORY; }
#line 10482 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 10469
struct _IMAGE_IMPORT_DESCRIPTOR { 
union { 
DWORD Characteristics; 
DWORD OriginalFirstThunk; 
}; 
DWORD TimeDateStamp; 




DWORD ForwarderChain; 
DWORD Name; 
DWORD FirstThunk; 
} IMAGE_IMPORT_DESCRIPTOR; }
extern "C" { typedef IMAGE_IMPORT_DESCRIPTOR *PIMAGE_IMPORT_DESCRIPTOR; }
#line 10494
extern "C" { typedef 
#line 10489
struct _IMAGE_BOUND_IMPORT_DESCRIPTOR { 
DWORD TimeDateStamp; 
WORD OffsetModuleName; 
WORD NumberOfModuleForwarderRefs; 

} IMAGE_BOUND_IMPORT_DESCRIPTOR; }extern "C" { typedef _IMAGE_BOUND_IMPORT_DESCRIPTOR *PIMAGE_BOUND_IMPORT_DESCRIPTOR; }
#line 10500
extern "C" { typedef 
#line 10496
struct _IMAGE_BOUND_FORWARDER_REF { 
DWORD TimeDateStamp; 
WORD OffsetModuleName; 
WORD Reserved; 
} IMAGE_BOUND_FORWARDER_REF; }extern "C" { typedef _IMAGE_BOUND_FORWARDER_REF *PIMAGE_BOUND_FORWARDER_REF; }
#line 10528
extern "C" { typedef 
#line 10520
struct _IMAGE_RESOURCE_DIRECTORY { 
DWORD Characteristics; 
DWORD TimeDateStamp; 
WORD MajorVersion; 
WORD MinorVersion; 
WORD NumberOfNamedEntries; 
WORD NumberOfIdEntries; 

} IMAGE_RESOURCE_DIRECTORY; }extern "C" { typedef _IMAGE_RESOURCE_DIRECTORY *PIMAGE_RESOURCE_DIRECTORY; }
#line 10563
extern "C" { typedef 
#line 10547
struct _IMAGE_RESOURCE_DIRECTORY_ENTRY { 
union { 
struct { 
DWORD NameOffset:31; 
DWORD NameIsString:1; 
}; 
DWORD Name; 
WORD Id; 
}; 
union { 
DWORD OffsetToData; 
struct { 
DWORD OffsetToDirectory:31; 
DWORD DataIsDirectory:1; 
}; 
}; 
} IMAGE_RESOURCE_DIRECTORY_ENTRY; }extern "C" { typedef _IMAGE_RESOURCE_DIRECTORY_ENTRY *PIMAGE_RESOURCE_DIRECTORY_ENTRY; }
#line 10577
extern "C" { typedef 
#line 10574
struct _IMAGE_RESOURCE_DIRECTORY_STRING { 
WORD Length; 
CHAR NameString[1]; 
} IMAGE_RESOURCE_DIRECTORY_STRING; }extern "C" { typedef _IMAGE_RESOURCE_DIRECTORY_STRING *PIMAGE_RESOURCE_DIRECTORY_STRING; }
#line 10583
extern "C" { typedef 
#line 10580
struct _IMAGE_RESOURCE_DIR_STRING_U { 
WORD Length; 
WCHAR NameString[1]; 
} IMAGE_RESOURCE_DIR_STRING_U; }extern "C" { typedef _IMAGE_RESOURCE_DIR_STRING_U *PIMAGE_RESOURCE_DIR_STRING_U; }
#line 10600
extern "C" { typedef 
#line 10595
struct _IMAGE_RESOURCE_DATA_ENTRY { 
DWORD OffsetToData; 
DWORD Size; 
DWORD CodePage; 
DWORD Reserved; 
} IMAGE_RESOURCE_DATA_ENTRY; }extern "C" { typedef _IMAGE_RESOURCE_DATA_ENTRY *PIMAGE_RESOURCE_DATA_ENTRY; }
#line 10627
extern "C" { typedef 
#line 10606
struct IMAGE_LOAD_CONFIG_DIRECTORY32 { 
DWORD Size; 
DWORD TimeDateStamp; 
WORD MajorVersion; 
WORD MinorVersion; 
DWORD GlobalFlagsClear; 
DWORD GlobalFlagsSet; 
DWORD CriticalSectionDefaultTimeout; 
DWORD DeCommitFreeBlockThreshold; 
DWORD DeCommitTotalFreeThreshold; 
DWORD LockPrefixTable; 
DWORD MaximumAllocationSize; 
DWORD VirtualMemoryThreshold; 
DWORD ProcessHeapFlags; 
DWORD ProcessAffinityMask; 
WORD CSDVersion; 
WORD Reserved1; 
DWORD EditList; 
DWORD SecurityCookie; 
DWORD SEHandlerTable; 
DWORD SEHandlerCount; 
} IMAGE_LOAD_CONFIG_DIRECTORY32, *PIMAGE_LOAD_CONFIG_DIRECTORY32; }
#line 10650
extern "C" { typedef 
#line 10629
struct IMAGE_LOAD_CONFIG_DIRECTORY64 { 
DWORD Size; 
DWORD TimeDateStamp; 
WORD MajorVersion; 
WORD MinorVersion; 
DWORD GlobalFlagsClear; 
DWORD GlobalFlagsSet; 
DWORD CriticalSectionDefaultTimeout; 
ULONGLONG DeCommitFreeBlockThreshold; 
ULONGLONG DeCommitTotalFreeThreshold; 
ULONGLONG LockPrefixTable; 
ULONGLONG MaximumAllocationSize; 
ULONGLONG VirtualMemoryThreshold; 
ULONGLONG ProcessAffinityMask; 
DWORD ProcessHeapFlags; 
WORD CSDVersion; 
WORD Reserved1; 
ULONGLONG EditList; 
ULONGLONG SecurityCookie; 
ULONGLONG SEHandlerTable; 
ULONGLONG SEHandlerCount; 
} IMAGE_LOAD_CONFIG_DIRECTORY64, *PIMAGE_LOAD_CONFIG_DIRECTORY64; }
#line 10656
extern "C" { typedef IMAGE_LOAD_CONFIG_DIRECTORY32 IMAGE_LOAD_CONFIG_DIRECTORY; }
extern "C" { typedef PIMAGE_LOAD_CONFIG_DIRECTORY32 PIMAGE_LOAD_CONFIG_DIRECTORY; }
#line 10675 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 10669
struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY { 
DWORD FuncStart; 
DWORD PrologLen:8; 
DWORD FuncLen:22; 
DWORD ThirtyTwoBit:1; 
DWORD ExceptionFlag:1; 
} IMAGE_CE_RUNTIME_FUNCTION_ENTRY; }extern "C" { typedef _IMAGE_CE_RUNTIME_FUNCTION_ENTRY *PIMAGE_CE_RUNTIME_FUNCTION_ENTRY; }
#line 10683
extern "C" { typedef 
#line 10677
struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY { 
ULONGLONG BeginAddress; 
ULONGLONG EndAddress; 
ULONGLONG ExceptionHandler; 
ULONGLONG HandlerData; 
ULONGLONG PrologEndAddress; 
} IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY; }extern "C" { typedef _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY *PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY; }
#line 10691
extern "C" { typedef 
#line 10685
struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY { 
DWORD BeginAddress; 
DWORD EndAddress; 
DWORD ExceptionHandler; 
DWORD HandlerData; 
DWORD PrologEndAddress; 
} IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY; }extern "C" { typedef _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY *PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY; }
#line 10697
extern "C" { typedef 
#line 10693
struct _IMAGE_RUNTIME_FUNCTION_ENTRY { 
DWORD BeginAddress; 
DWORD EndAddress; 
DWORD UnwindInfoAddress; 
} _IMAGE_RUNTIME_FUNCTION_ENTRY; }extern "C" { typedef _IMAGE_RUNTIME_FUNCTION_ENTRY *_PIMAGE_RUNTIME_FUNCTION_ENTRY; }

extern "C" { typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_IA64_RUNTIME_FUNCTION_ENTRY; }
extern "C" { typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY; }
#line 10716 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_RUNTIME_FUNCTION_ENTRY; }
extern "C" { typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY; }
#line 10734 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 10725
struct _IMAGE_DEBUG_DIRECTORY { 
DWORD Characteristics; 
DWORD TimeDateStamp; 
WORD MajorVersion; 
WORD MinorVersion; 
DWORD Type; 
DWORD SizeOfData; 
DWORD AddressOfRawData; 
DWORD PointerToRawData; 
} IMAGE_DEBUG_DIRECTORY; }extern "C" { typedef _IMAGE_DEBUG_DIRECTORY *PIMAGE_DEBUG_DIRECTORY; }
#line 10759
extern "C" { typedef 
#line 10750
struct _IMAGE_COFF_SYMBOLS_HEADER { 
DWORD NumberOfSymbols; 
DWORD LvaToFirstSymbol; 
DWORD NumberOfLinenumbers; 
DWORD LvaToFirstLinenumber; 
DWORD RvaToFirstByteOfCode; 
DWORD RvaToLastByteOfCode; 
DWORD RvaToFirstByteOfData; 
DWORD RvaToLastByteOfData; 
} IMAGE_COFF_SYMBOLS_HEADER; }extern "C" { typedef _IMAGE_COFF_SYMBOLS_HEADER *PIMAGE_COFF_SYMBOLS_HEADER; }
#line 10777
extern "C" { typedef 
#line 10766
struct _FPO_DATA { 
DWORD ulOffStart; 
DWORD cbProcSize; 
DWORD cdwLocals; 
WORD cdwParams; 
WORD cbProlog:8; 
WORD cbRegs:3; 
WORD fHasSEH:1; 
WORD fUseBP:1; 
WORD reserved:1; 
WORD cbFrame:2; 
} FPO_DATA; }extern "C" { typedef _FPO_DATA *PFPO_DATA; }
#line 10790
extern "C" { typedef 
#line 10783
struct _IMAGE_DEBUG_MISC { 
DWORD DataType; 
DWORD Length; 

BOOLEAN Unicode; 
BYTE Reserved[3]; 
BYTE Data[1]; 
} IMAGE_DEBUG_MISC; }extern "C" { typedef _IMAGE_DEBUG_MISC *PIMAGE_DEBUG_MISC; }
#line 10803
extern "C" { typedef 
#line 10799
struct _IMAGE_FUNCTION_ENTRY { 
DWORD StartingAddress; 
DWORD EndingAddress; 
DWORD EndOfPrologue; 
} IMAGE_FUNCTION_ENTRY; }extern "C" { typedef _IMAGE_FUNCTION_ENTRY *PIMAGE_FUNCTION_ENTRY; }
#line 10812
extern "C" { typedef 
#line 10805
struct _IMAGE_FUNCTION_ENTRY64 { 
ULONGLONG StartingAddress; 
ULONGLONG EndingAddress; 
union { 
ULONGLONG EndOfPrologue; 
ULONGLONG UnwindInfoAddress; 
}; 
} IMAGE_FUNCTION_ENTRY64; }extern "C" { typedef _IMAGE_FUNCTION_ENTRY64 *PIMAGE_FUNCTION_ENTRY64; }
#line 10848
extern "C" { typedef 
#line 10834
struct _IMAGE_SEPARATE_DEBUG_HEADER { 
WORD Signature; 
WORD Flags; 
WORD Machine; 
WORD Characteristics; 
DWORD TimeDateStamp; 
DWORD CheckSum; 
DWORD ImageBase; 
DWORD SizeOfImage; 
DWORD NumberOfSections; 
DWORD ExportedNamesSize; 
DWORD DebugDirectorySize; 
DWORD SectionAlignment; 
DWORD Reserved[2]; 
} IMAGE_SEPARATE_DEBUG_HEADER; }extern "C" { typedef _IMAGE_SEPARATE_DEBUG_HEADER *PIMAGE_SEPARATE_DEBUG_HEADER; }
#line 10862
extern "C" { typedef 
#line 10850
struct _NON_PAGED_DEBUG_INFO { 
WORD Signature; 
WORD Flags; 
DWORD Size; 
WORD Machine; 
WORD Characteristics; 
DWORD TimeDateStamp; 
DWORD CheckSum; 
DWORD SizeOfImage; 
ULONGLONG ImageBase; 


} NON_PAGED_DEBUG_INFO; }extern "C" { typedef _NON_PAGED_DEBUG_INFO *PNON_PAGED_DEBUG_INFO; }
#line 10891 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 10884
struct _ImageArchitectureHeader { 
unsigned AmaskValue:1; 

int:7; 
unsigned AmaskShift:8; 
int:16; 
DWORD FirstEntryRVA; 
} IMAGE_ARCHITECTURE_HEADER; }extern "C" { typedef _ImageArchitectureHeader *PIMAGE_ARCHITECTURE_HEADER; }




extern "C" { typedef 
#line 10893
struct _ImageArchitectureEntry { 
DWORD FixupInstRVA; 
DWORD NewInst; 
} IMAGE_ARCHITECTURE_ENTRY; }extern "C" { typedef _ImageArchitectureEntry *PIMAGE_ARCHITECTURE_ENTRY; }
#line 27 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack ( pop )
#line 10923 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 10907
struct IMPORT_OBJECT_HEADER { 
WORD Sig1; 
WORD Sig2; 
WORD Version; 
WORD Machine; 
DWORD TimeDateStamp; 
DWORD SizeOfData; 

union { 
WORD Ordinal; 
WORD Hint; 
}; 

WORD Type:2; 
WORD NameType:3; 
WORD Reserved:11; 
} IMPORT_OBJECT_HEADER; }
#line 10930
extern "C" { typedef 
#line 10925
enum IMPORT_OBJECT_TYPE { 

IMPORT_OBJECT_CODE, 
IMPORT_OBJECT_DATA, 
IMPORT_OBJECT_CONST
} IMPORT_OBJECT_TYPE; }
#line 10939
extern "C" { typedef 
#line 10932
enum IMPORT_OBJECT_NAME_TYPE { 

IMPORT_OBJECT_ORDINAL, 
IMPORT_OBJECT_NAME, 
IMPORT_OBJECT_NAME_NO_PREFIX, 
IMPORT_OBJECT_NAME_UNDECORATE

} IMPORT_OBJECT_NAME_TYPE; }
#line 10984
extern "C" { typedef 
#line 10945
enum ReplacesCorHdrNumericDefines { 


COMIMAGE_FLAGS_ILONLY = 1, 
COMIMAGE_FLAGS_32BITREQUIRED, 
COMIMAGE_FLAGS_IL_LIBRARY = 4, 
COMIMAGE_FLAGS_STRONGNAMESIGNED = 8, 
COMIMAGE_FLAGS_TRACKDEBUGDATA = 65536, 


COR_VERSION_MAJOR_V2 = 2, 
COR_VERSION_MAJOR = 2, 
COR_VERSION_MINOR = 0, 
COR_DELETED_NAME_LENGTH = 8, 
COR_VTABLEGAP_NAME_LENGTH = 8, 


NATIVE_TYPE_MAX_CB = 1, 
COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255, 


IMAGE_COR_MIH_METHODRVA = 1, 
IMAGE_COR_MIH_EHRVA, 
IMAGE_COR_MIH_BASICBLOCK = 8, 


COR_VTABLE_32BIT = 1, 
COR_VTABLE_64BIT, 
COR_VTABLE_FROM_UNMANAGED = 4, 
COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 8, 
COR_VTABLE_CALL_MOST_DERIVED = 16, 


IMAGE_COR_EATJ_THUNK_SIZE = 32, 



MAX_CLASS_NAME = 1024, 
MAX_PACKAGE_NAME = 1024
} ReplacesCorHdrNumericDefines; }
#line 11011
extern "C" { typedef 
#line 10987
struct IMAGE_COR20_HEADER { 


DWORD cb; 
WORD MajorRuntimeVersion; 
WORD MinorRuntimeVersion; 


IMAGE_DATA_DIRECTORY MetaData; 
DWORD Flags; 
DWORD EntryPointToken; 


IMAGE_DATA_DIRECTORY Resources; 
IMAGE_DATA_DIRECTORY StrongNameSignature; 


IMAGE_DATA_DIRECTORY CodeManagerTable; 
IMAGE_DATA_DIRECTORY VTableFixups; 
IMAGE_DATA_DIRECTORY ExportAddressTableJumps; 


IMAGE_DATA_DIRECTORY ManagedNativeHeader; 

} IMAGE_COR20_HEADER; }extern "C" { typedef IMAGE_COR20_HEADER *PIMAGE_COR20_HEADER; }
#line 11096 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 11089
union _SLIST_HEADER { 
ULONGLONG Alignment; 
struct { 
SINGLE_LIST_ENTRY Next; 
WORD Depth; 
WORD Sequence; 
}; 
} SLIST_HEADER; }extern "C" { typedef _SLIST_HEADER *PSLIST_HEADER; }
#line 11106 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { extern __declspec( dllimport ) void __stdcall RtlInitializeSListHead(PSLIST_HEADER); } 
#line 11113
extern "C" { extern __declspec( dllimport ) PSINGLE_LIST_ENTRY __stdcall RtlFirstEntrySList(const SLIST_HEADER *); } 
#line 11120
extern "C" { extern __declspec( dllimport ) PSINGLE_LIST_ENTRY __stdcall RtlInterlockedPopEntrySList(PSLIST_HEADER); } 
#line 11127
extern "C" { extern __declspec( dllimport ) PSINGLE_LIST_ENTRY __stdcall RtlInterlockedPushEntrySList(PSLIST_HEADER, PSINGLE_LIST_ENTRY); } 
#line 11135
extern "C" { extern __declspec( dllimport ) PSINGLE_LIST_ENTRY __stdcall RtlInterlockedFlushSList(PSLIST_HEADER); } 
#line 11142
extern "C" { extern __declspec( dllimport ) WORD __stdcall RtlQueryDepthSList(PSLIST_HEADER); } 
#line 11174
extern "C" { typedef 
#line 11172
union _RTL_RUN_ONCE { 
PVOID Ptr; 
} RTL_RUN_ONCE; }extern "C" { typedef _RTL_RUN_ONCE *PRTL_RUN_ONCE; }



extern "C" { typedef DWORD (__stdcall *PRTL_RUN_ONCE_INIT_FN)(PRTL_RUN_ONCE, PVOID, PVOID *); }
#line 11190 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { extern void RtlRunOnceInitialize(PRTL_RUN_ONCE); } 
#line 11197 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { extern DWORD RtlRunOnceExecuteOnce(PRTL_RUN_ONCE, PRTL_RUN_ONCE_INIT_FN, PVOID, PVOID *); } 
#line 11205
extern "C" { extern DWORD RtlRunOnceBeginInitialize(PRTL_RUN_ONCE, DWORD, PVOID *); } 
#line 11212
extern "C" { extern DWORD RtlRunOnceComplete(PRTL_RUN_ONCE, DWORD, PVOID); } 
#line 11235
extern "C" { __forceinline DWORD HEAP_MAKE_TAG_FLAGS(DWORD 
TagBase, DWORD 
Tag) 


{ 
__pragma( warning(push)) __pragma( warning(disable : 4548)) do { 0; } while (0, 0); __pragma( warning(pop)) 
return (DWORD)(TagBase + (Tag << 18)); 
} } 
#line 11250 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { extern __declspec( dllimport ) WORD __stdcall RtlCaptureStackBackTrace(DWORD, DWORD, PVOID *, PDWORD); } 
#line 11262 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { extern __declspec( dllimport ) void __stdcall RtlCaptureContext(PCONTEXT); } 
#line 11325 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { extern __declspec( dllimport ) SIZE_T __stdcall RtlCompareMemory(const void *, const void *, SIZE_T); } 
#line 11344 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { __forceinline PVOID RtlSecureZeroMemory(PVOID 
ptr, SIZE_T 
cnt) 

{ 
auto volatile char *vptr = ((volatile char *)ptr); 
#line 11357 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
while (cnt) { 
(*vptr) = (0); 
vptr++; 
cnt--; 
}  
#line 11365 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
return ptr; 
} } 
#line 11392 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 11388
struct _MESSAGE_RESOURCE_ENTRY { 
WORD Length; 
WORD Flags; 
BYTE Text[1]; 
} MESSAGE_RESOURCE_ENTRY; }extern "C" { typedef _MESSAGE_RESOURCE_ENTRY *PMESSAGE_RESOURCE_ENTRY; }
#line 11400
extern "C" { typedef 
#line 11396
struct _MESSAGE_RESOURCE_BLOCK { 
DWORD LowId; 
DWORD HighId; 
DWORD OffsetToEntries; 
} MESSAGE_RESOURCE_BLOCK; }extern "C" { typedef _MESSAGE_RESOURCE_BLOCK *PMESSAGE_RESOURCE_BLOCK; }




extern "C" { typedef 
#line 11402
struct _MESSAGE_RESOURCE_DATA { 
DWORD NumberOfBlocks; 
MESSAGE_RESOURCE_BLOCK Blocks[1]; 
} MESSAGE_RESOURCE_DATA; }extern "C" { typedef _MESSAGE_RESOURCE_DATA *PMESSAGE_RESOURCE_DATA; }
#line 11414
extern "C" { typedef 
#line 11407
struct _OSVERSIONINFOA { 
DWORD dwOSVersionInfoSize; 
DWORD dwMajorVersion; 
DWORD dwMinorVersion; 
DWORD dwBuildNumber; 
DWORD dwPlatformId; 
CHAR szCSDVersion[128]; 
} OSVERSIONINFOA; }extern "C" { typedef _OSVERSIONINFOA *POSVERSIONINFOA; }extern "C" { typedef _OSVERSIONINFOA *LPOSVERSIONINFOA; }
#line 11423
extern "C" { typedef 
#line 11416
struct _OSVERSIONINFOW { 
DWORD dwOSVersionInfoSize; 
DWORD dwMajorVersion; 
DWORD dwMinorVersion; 
DWORD dwBuildNumber; 
DWORD dwPlatformId; 
WCHAR szCSDVersion[128]; 
} OSVERSIONINFOW; }extern "C" { typedef _OSVERSIONINFOW *POSVERSIONINFOW; }extern "C" { typedef _OSVERSIONINFOW *LPOSVERSIONINFOW; }extern "C" { typedef _OSVERSIONINFOW RTL_OSVERSIONINFOW; }extern "C" { typedef _OSVERSIONINFOW *PRTL_OSVERSIONINFOW; }
#line 11429
extern "C" { typedef OSVERSIONINFOA OSVERSIONINFO; }
extern "C" { typedef POSVERSIONINFOA POSVERSIONINFO; }
extern "C" { typedef LPOSVERSIONINFOA LPOSVERSIONINFO; }
#line 11446 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 11434
struct _OSVERSIONINFOEXA { 
DWORD dwOSVersionInfoSize; 
DWORD dwMajorVersion; 
DWORD dwMinorVersion; 
DWORD dwBuildNumber; 
DWORD dwPlatformId; 
CHAR szCSDVersion[128]; 
WORD wServicePackMajor; 
WORD wServicePackMinor; 
WORD wSuiteMask; 
BYTE wProductType; 
BYTE wReserved; 
} OSVERSIONINFOEXA; }extern "C" { typedef _OSVERSIONINFOEXA *POSVERSIONINFOEXA; }extern "C" { typedef _OSVERSIONINFOEXA *LPOSVERSIONINFOEXA; }
#line 11459
extern "C" { typedef 
#line 11447
struct _OSVERSIONINFOEXW { 
DWORD dwOSVersionInfoSize; 
DWORD dwMajorVersion; 
DWORD dwMinorVersion; 
DWORD dwBuildNumber; 
DWORD dwPlatformId; 
WCHAR szCSDVersion[128]; 
WORD wServicePackMajor; 
WORD wServicePackMinor; 
WORD wSuiteMask; 
BYTE wProductType; 
BYTE wReserved; 
} OSVERSIONINFOEXW; }extern "C" { typedef _OSVERSIONINFOEXW *POSVERSIONINFOEXW; }extern "C" { typedef _OSVERSIONINFOEXW *LPOSVERSIONINFOEXW; }extern "C" { typedef _OSVERSIONINFOEXW RTL_OSVERSIONINFOEXW; }extern "C" { typedef _OSVERSIONINFOEXW *PRTL_OSVERSIONINFOEXW; }
#line 11465
extern "C" { typedef OSVERSIONINFOEXA OSVERSIONINFOEX; }
extern "C" { typedef POSVERSIONINFOEXA POSVERSIONINFOEX; }
extern "C" { typedef LPOSVERSIONINFOEXA LPOSVERSIONINFOEX; }
#line 11531 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { extern __declspec( dllimport ) ULONGLONG __stdcall VerSetConditionMask(ULONGLONG, DWORD, BYTE); } 
#line 11545 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { extern __declspec( dllimport ) BOOLEAN __stdcall RtlGetProductInfo(DWORD, DWORD, DWORD, DWORD, PDWORD); } 
#line 11566 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 11556
struct _RTL_CRITICAL_SECTION_DEBUG { 
WORD Type; 
WORD CreatorBackTraceIndex; 
struct _RTL_CRITICAL_SECTION *CriticalSection; 
LIST_ENTRY ProcessLocksList; 
DWORD EntryCount; 
DWORD ContentionCount; 
DWORD Flags; 
WORD CreatorBackTraceIndexHigh; 
WORD SpareWORD; 
} RTL_CRITICAL_SECTION_DEBUG; }extern "C" { typedef _RTL_CRITICAL_SECTION_DEBUG *PRTL_CRITICAL_SECTION_DEBUG; }extern "C" { typedef _RTL_CRITICAL_SECTION_DEBUG RTL_RESOURCE_DEBUG; }extern "C" { typedef _RTL_CRITICAL_SECTION_DEBUG *PRTL_RESOURCE_DEBUG; }
#line 11585
#pragma pack ( push, 8 )
#line 11600
extern "C" { typedef 
#line 11587
struct _RTL_CRITICAL_SECTION { 
PRTL_CRITICAL_SECTION_DEBUG DebugInfo; 
#line 11595
LONG LockCount; 
LONG RecursionCount; 
HANDLE OwningThread; 
HANDLE LockSemaphore; 
ULONG_PTR SpinCount; 
} RTL_CRITICAL_SECTION; }extern "C" { typedef _RTL_CRITICAL_SECTION *PRTL_CRITICAL_SECTION; }

#pragma pack ( pop )



extern "C" { typedef 
#line 11604
struct _RTL_SRWLOCK { 
PVOID Ptr; 
} RTL_SRWLOCK; }extern "C" { typedef _RTL_SRWLOCK *PRTL_SRWLOCK; }



extern "C" { typedef 
#line 11608
struct _RTL_CONDITION_VARIABLE { 
PVOID Ptr; 
} RTL_CONDITION_VARIABLE; }extern "C" { typedef _RTL_CONDITION_VARIABLE *PRTL_CONDITION_VARIABLE; }


extern "C" { typedef LONG (__stdcall *PVECTORED_EXCEPTION_HANDLER)(_EXCEPTION_POINTERS *); }
#line 11623
extern "C" { typedef 
#line 11617
enum _HEAP_INFORMATION_CLASS { 

HeapCompatibilityInformation, 
HeapEnableTerminationOnCorruption


} HEAP_INFORMATION_CLASS; }
#line 11637
extern "C" { typedef void (__stdcall *WAITORTIMERCALLBACKFUNC)(PVOID, BOOLEAN); }
extern "C" { typedef void (__stdcall *WORKERCALLBACKFUNC)(PVOID); }
extern "C" { typedef void (__stdcall *APC_CALLBACK_FUNCTION)(DWORD, PVOID, PVOID); }


extern "C" { typedef void (__stdcall *PFLS_CALLBACK_FUNCTION)(PVOID); }
#line 11661
extern "C" { typedef 
#line 11648
enum _ACTIVATION_CONTEXT_INFO_CLASS { 
ActivationContextBasicInformation = 1, 
ActivationContextDetailedInformation, 
AssemblyDetailedInformationInActivationContext, 
FileInformationInAssemblyOfAssemblyInActivationContext, 
RunlevelInformationInActivationContext, 
MaxActivationContextInfoClass, 




AssemblyDetailedInformationInActivationContxt = 3, 
FileInformationInAssemblyOfAssemblyInActivationContxt
} ACTIVATION_CONTEXT_INFO_CLASS; }
#line 11669
extern "C" { typedef 
#line 11666
struct _ACTIVATION_CONTEXT_QUERY_INDEX { 
DWORD ulAssemblyIndex; 
DWORD ulFileIndexInAssembly; 
} ACTIVATION_CONTEXT_QUERY_INDEX; }extern "C" { typedef _ACTIVATION_CONTEXT_QUERY_INDEX *PACTIVATION_CONTEXT_QUERY_INDEX; }

extern "C" { typedef const _ACTIVATION_CONTEXT_QUERY_INDEX *PCACTIVATION_CONTEXT_QUERY_INDEX; }
#line 11686
extern "C" { typedef 
#line 11679
struct _ASSEMBLY_FILE_DETAILED_INFORMATION { 
DWORD ulFlags; 
DWORD ulFilenameLength; 
DWORD ulPathLength; 

PCWSTR lpFileName; 
PCWSTR lpFilePath; 
} ASSEMBLY_FILE_DETAILED_INFORMATION; }extern "C" { typedef _ASSEMBLY_FILE_DETAILED_INFORMATION *PASSEMBLY_FILE_DETAILED_INFORMATION; }
extern "C" { typedef const ASSEMBLY_FILE_DETAILED_INFORMATION *PCASSEMBLY_FILE_DETAILED_INFORMATION; }
#line 11721
extern "C" { typedef 
#line 11698
struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION { 
DWORD ulFlags; 
DWORD ulEncodedAssemblyIdentityLength; 
DWORD ulManifestPathType; 
DWORD ulManifestPathLength; 
LARGE_INTEGER liManifestLastWriteTime; 
DWORD ulPolicyPathType; 
DWORD ulPolicyPathLength; 
LARGE_INTEGER liPolicyLastWriteTime; 
DWORD ulMetadataSatelliteRosterIndex; 

DWORD ulManifestVersionMajor; 
DWORD ulManifestVersionMinor; 
DWORD ulPolicyVersionMajor; 
DWORD ulPolicyVersionMinor; 
DWORD ulAssemblyDirectoryNameLength; 

PCWSTR lpAssemblyEncodedAssemblyIdentity; 
PCWSTR lpAssemblyManifestPath; 
PCWSTR lpAssemblyPolicyPath; 
PCWSTR lpAssemblyDirectoryName; 

DWORD ulFileCount; 
} ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION; }extern "C" { typedef _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION *PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION; }

extern "C" { typedef const _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION; }
#line 11732
extern "C" { typedef 
#line 11726
enum { 
ACTCTX_RUN_LEVEL_UNSPECIFIED, 
ACTCTX_RUN_LEVEL_AS_INVOKER, 
ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE, 
ACTCTX_RUN_LEVEL_REQUIRE_ADMIN, 
ACTCTX_RUN_LEVEL_NUMBERS
} ACTCTX_REQUESTED_RUN_LEVEL; }
#line 11738
extern "C" { typedef 
#line 11734
struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION { 
DWORD ulFlags; 
ACTCTX_REQUESTED_RUN_LEVEL RunLevel; 
DWORD UiAccess; 
} ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION; }extern "C" { typedef _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION *PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION; }

extern "C" { typedef const _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION *PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION; }
#line 11755
extern "C" { typedef 
#line 11742
struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION { 
DWORD dwFlags; 
DWORD ulFormatVersion; 
DWORD ulAssemblyCount; 
DWORD ulRootManifestPathType; 
DWORD ulRootManifestPathChars; 
DWORD ulRootConfigurationPathType; 
DWORD ulRootConfigurationPathChars; 
DWORD ulAppDirPathType; 
DWORD ulAppDirPathChars; 
PCWSTR lpRootManifestPath; 
PCWSTR lpRootConfigurationPath; 
PCWSTR lpAppDirPath; 
} ACTIVATION_CONTEXT_DETAILED_INFORMATION; }extern "C" { typedef _ACTIVATION_CONTEXT_DETAILED_INFORMATION *PACTIVATION_CONTEXT_DETAILED_INFORMATION; }

extern "C" { typedef const _ACTIVATION_CONTEXT_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_DETAILED_INFORMATION; }
#line 11830
extern "C" { typedef 
#line 11802
struct _EVENTLOGRECORD { 
DWORD Length; 
DWORD Reserved; 
DWORD RecordNumber; 
DWORD TimeGenerated; 
DWORD TimeWritten; 
DWORD EventID; 
WORD EventType; 
WORD NumStrings; 
WORD EventCategory; 
WORD ReservedFlags; 
DWORD ClosingRecordNumber; 
DWORD StringOffset; 
DWORD UserSidLength; 
DWORD UserSidOffset; 
DWORD DataLength; 
DWORD DataOffset; 
#line 11830
} EVENTLOGRECORD; }extern "C" { typedef _EVENTLOGRECORD *PEVENTLOGRECORD; }
#line 11837
#pragma warning(push)
#line 11839 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
#pragma warning(disable : 4200)





extern "C" { typedef 
#line 11840
struct _EVENTSFORLOGFILE { 
DWORD ulSize; 
WCHAR szLogicalLogFile[256]; 
DWORD ulNumRecords; 
EVENTLOGRECORD pEventLogRecords[]; 
} EVENTSFORLOGFILE; }extern "C" { typedef _EVENTSFORLOGFILE *PEVENTSFORLOGFILE; }
#line 11851
extern "C" { typedef 
#line 11847
struct _PACKEDEVENTINFO { 
DWORD ulSize; 
DWORD ulNumEventsForLogFile; 
DWORD ulOffsets[]; 
} PACKEDEVENTINFO; }extern "C" { typedef _PACKEDEVENTINFO *PPACKEDEVENTINFO; }


#pragma warning(pop)
#line 12062 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 12055
enum _CM_SERVICE_NODE_TYPE { 
DriverType = 1, 
FileSystemType, 
Win32ServiceOwnProcess = 16, 
Win32ServiceShareProcess = 32, 
AdapterType = 4, 
RecognizerType = 8
} SERVICE_NODE_TYPE; }
#line 12070
extern "C" { typedef 
#line 12064
enum _CM_SERVICE_LOAD_TYPE { 
BootLoad, 
SystemLoad, 
AutoLoad, 
DemandLoad, 
DisableLoad
} SERVICE_LOAD_TYPE; }
#line 12077
extern "C" { typedef 
#line 12072
enum _CM_ERROR_CONTROL_TYPE { 
IgnoreError, 
NormalError, 
SevereError, 
CriticalError
} SERVICE_ERROR_TYPE; }
#line 12091
extern "C" { typedef 
#line 12088
struct _TAPE_ERASE { 
DWORD Type; 
BOOLEAN Immediate; 
} TAPE_ERASE; }extern "C" { typedef _TAPE_ERASE *PTAPE_ERASE; }
#line 12107
extern "C" { typedef 
#line 12104
struct _TAPE_PREPARE { 
DWORD Operation; 
BOOLEAN Immediate; 
} TAPE_PREPARE; }extern "C" { typedef _TAPE_PREPARE *PTAPE_PREPARE; }
#line 12122
extern "C" { typedef 
#line 12118
struct _TAPE_WRITE_MARKS { 
DWORD Type; 
DWORD Count; 
BOOLEAN Immediate; 
} TAPE_WRITE_MARKS; }extern "C" { typedef _TAPE_WRITE_MARKS *PTAPE_WRITE_MARKS; }
#line 12136
extern "C" { typedef 
#line 12132
struct _TAPE_GET_POSITION { 
DWORD Type; 
DWORD Partition; 
LARGE_INTEGER Offset; 
} TAPE_GET_POSITION; }extern "C" { typedef _TAPE_GET_POSITION *PTAPE_GET_POSITION; }
#line 12158
extern "C" { typedef 
#line 12153
struct _TAPE_SET_POSITION { 
DWORD Method; 
DWORD Partition; 
LARGE_INTEGER Offset; 
BOOLEAN Immediate; 
} TAPE_SET_POSITION; }extern "C" { typedef _TAPE_SET_POSITION *PTAPE_SET_POSITION; }
#line 12258
extern "C" { typedef 
#line 12246
struct _TAPE_GET_DRIVE_PARAMETERS { 
BOOLEAN ECC; 
BOOLEAN Compression; 
BOOLEAN DataPadding; 
BOOLEAN ReportSetmarks; 
DWORD DefaultBlockSize; 
DWORD MaximumBlockSize; 
DWORD MinimumBlockSize; 
DWORD MaximumPartitionCount; 
DWORD FeaturesLow; 
DWORD FeaturesHigh; 
DWORD EOTWarningZoneSize; 
} TAPE_GET_DRIVE_PARAMETERS; }extern "C" { typedef _TAPE_GET_DRIVE_PARAMETERS *PTAPE_GET_DRIVE_PARAMETERS; }
#line 12270
extern "C" { typedef 
#line 12264
struct _TAPE_SET_DRIVE_PARAMETERS { 
BOOLEAN ECC; 
BOOLEAN Compression; 
BOOLEAN DataPadding; 
BOOLEAN ReportSetmarks; 
DWORD EOTWarningZoneSize; 
} TAPE_SET_DRIVE_PARAMETERS; }extern "C" { typedef _TAPE_SET_DRIVE_PARAMETERS *PTAPE_SET_DRIVE_PARAMETERS; }
#line 12282
extern "C" { typedef 
#line 12276
struct _TAPE_GET_MEDIA_PARAMETERS { 
LARGE_INTEGER Capacity; 
LARGE_INTEGER Remaining; 
DWORD BlockSize; 
DWORD PartitionCount; 
BOOLEAN WriteProtected; 
} TAPE_GET_MEDIA_PARAMETERS; }extern "C" { typedef _TAPE_GET_MEDIA_PARAMETERS *PTAPE_GET_MEDIA_PARAMETERS; }
#line 12290
extern "C" { typedef 
#line 12288
struct _TAPE_SET_MEDIA_PARAMETERS { 
DWORD BlockSize; 
} TAPE_SET_MEDIA_PARAMETERS; }extern "C" { typedef _TAPE_SET_MEDIA_PARAMETERS *PTAPE_SET_MEDIA_PARAMETERS; }
#line 12304
extern "C" { typedef 
#line 12300
struct _TAPE_CREATE_PARTITION { 
DWORD Method; 
DWORD Count; 
DWORD Size; 
} TAPE_CREATE_PARTITION; }extern "C" { typedef _TAPE_CREATE_PARTITION *PTAPE_CREATE_PARTITION; }
#line 12320
extern "C" { typedef 
#line 12316
struct _TAPE_WMI_OPERATIONS { 
DWORD Method; 
DWORD DataBufferSize; 
PVOID DataBuffer; 
} TAPE_WMI_OPERATIONS; }extern "C" { typedef _TAPE_WMI_OPERATIONS *PTAPE_WMI_OPERATIONS; }
#line 12333
extern "C" { typedef 
#line 12325
enum _TAPE_DRIVE_PROBLEM_TYPE { 
TapeDriveProblemNone, TapeDriveReadWriteWarning, 
TapeDriveReadWriteError, TapeDriveReadWarning, 
TapeDriveWriteWarning, TapeDriveReadError, 
TapeDriveWriteError, TapeDriveHardwareError, 
TapeDriveUnsupportedMedia, TapeDriveScsiConnectionError, 
TapeDriveTimetoClean, TapeDriveCleanDriveNow, 
TapeDriveMediaLifeExpired, TapeDriveSnappedTape
} TAPE_DRIVE_PROBLEM_TYPE; }
#line 27 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\ktmtypes.h"
extern "C" { typedef GUID UOW; }extern "C" { typedef GUID *PUOW; }
extern "C" { typedef GUID CRM_PROTOCOL_ID; }extern "C" { typedef GUID *PCRM_PROTOCOL_ID; }
#line 78
extern "C" { typedef ULONG NOTIFICATION_MASK; }
#line 137
extern "C" { typedef 
#line 132
struct _TRANSACTION_NOTIFICATION { 
PVOID TransactionKey; 
ULONG TransactionNotification; 
LARGE_INTEGER TmVirtualClock; 
ULONG ArgumentLength; 
} TRANSACTION_NOTIFICATION; }extern "C" { typedef _TRANSACTION_NOTIFICATION *PTRANSACTION_NOTIFICATION; }




extern "C" { typedef 
#line 139
struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT { 
GUID EnlistmentId; 
::UOW UOW; 
} TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT; }extern "C" { typedef _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT *PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT; }

extern "C" { typedef ULONG SAVEPOINT_ID; }extern "C" { typedef ULONG *PSAVEPOINT_ID; }



extern "C" { typedef 
#line 146
struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT { 
SAVEPOINT_ID SavepointId; 
} TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT; }extern "C" { typedef _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT *PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT; }
#line 156
extern "C" { typedef 
#line 150
struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT { 
ULONG PropagationCookie; 
GUID UOW; 
GUID TmIdentity; 
ULONG BufferLength; 

} TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT; }extern "C" { typedef _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT *PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT; }




extern "C" { typedef 
#line 158
struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT { 
ULONG MarshalCookie; 
GUID UOW; 
} TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT; }extern "C" { typedef _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT *PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT; }

extern "C" { typedef TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT; }extern "C" { typedef TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT *PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT; }
#line 176
extern "C" { typedef 
#line 171
struct _KCRM_MARSHAL_HEADER { 
ULONG VersionMajor; 
ULONG VersionMinor; 
ULONG NumProtocols; 
ULONG Unused; 
} KCRM_MARSHAL_HEADER; }extern "C" { typedef _KCRM_MARSHAL_HEADER *PKCRM_MARSHAL_HEADER; }extern "C" { typedef _KCRM_MARSHAL_HEADER *PRKCRM_MARSHAL_HEADER; }
#line 185
extern "C" { typedef 
#line 178
struct _KCRM_TRANSACTION_BLOB { 
::UOW UOW; 
GUID TmIdentity; 
ULONG IsolationLevel; 
ULONG IsolationFlags; 
ULONG Timeout; 
WCHAR Description[64]; 
} KCRM_TRANSACTION_BLOB; }extern "C" { typedef _KCRM_TRANSACTION_BLOB *PKCRM_TRANSACTION_BLOB; }extern "C" { typedef _KCRM_TRANSACTION_BLOB *PRKCRM_TRANSACTION_BLOB; }
#line 193
extern "C" { typedef 
#line 187
struct _KCRM_PROTOCOL_BLOB { 
CRM_PROTOCOL_ID ProtocolId; 
ULONG StaticInfoLength; 
ULONG TransactionIdInfoLength; 
ULONG Unused1; 
ULONG Unused2; 
} KCRM_PROTOCOL_BLOB; }extern "C" { typedef _KCRM_PROTOCOL_BLOB *PKCRM_PROTOCOL_BLOB; }extern "C" { typedef _KCRM_PROTOCOL_BLOB *PRKCRM_PROTOCOL_BLOB; }
#line 12519 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef 
#line 12515
enum _TRANSACTION_OUTCOME { 
TransactionOutcomeUndetermined = 1, 
TransactionOutcomeCommitted, 
TransactionOutcomeAborted
} TRANSACTION_OUTCOME; }
#line 12526
extern "C" { typedef 
#line 12522
enum _TRANSACTION_STATE { 
TransactionStateNormal = 1, 
TransactionStateIndoubt, 
TransactionStateCommittedNotify
} TRANSACTION_STATE; }
#line 12533
extern "C" { typedef 
#line 12529
struct _TRANSACTION_BASIC_INFORMATION { 
GUID TransactionId; 
DWORD State; 
DWORD Outcome; 
} TRANSACTION_BASIC_INFORMATION; }extern "C" { typedef _TRANSACTION_BASIC_INFORMATION *PTRANSACTION_BASIC_INFORMATION; }




extern "C" { typedef 
#line 12535
struct _TRANSACTIONMANAGER_BASIC_INFORMATION { 
GUID TmIdentity; 
LARGE_INTEGER VirtualClock; 
} TRANSACTIONMANAGER_BASIC_INFORMATION; }extern "C" { typedef _TRANSACTIONMANAGER_BASIC_INFORMATION *PTRANSACTIONMANAGER_BASIC_INFORMATION; }



extern "C" { typedef 
#line 12540
struct _TRANSACTIONMANAGER_LOG_INFORMATION { 
GUID LogIdentity; 
} TRANSACTIONMANAGER_LOG_INFORMATION; }extern "C" { typedef _TRANSACTIONMANAGER_LOG_INFORMATION *PTRANSACTIONMANAGER_LOG_INFORMATION; }
#line 12548
extern "C" { typedef 
#line 12544
struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION { 
DWORD LogPathLength; 
WCHAR LogPath[1]; 

} TRANSACTIONMANAGER_LOGPATH_INFORMATION; }extern "C" { typedef _TRANSACTIONMANAGER_LOGPATH_INFORMATION *PTRANSACTIONMANAGER_LOGPATH_INFORMATION; }
#line 12558
extern "C" { typedef 
#line 12550
struct _TRANSACTION_PROPERTIES_INFORMATION { 
DWORD IsolationLevel; 
DWORD IsolationFlags; 
LARGE_INTEGER Timeout; 
DWORD Outcome; 
DWORD DescriptionLength; 
WCHAR Description[1]; 

} TRANSACTION_PROPERTIES_INFORMATION; }extern "C" { typedef _TRANSACTION_PROPERTIES_INFORMATION *PTRANSACTION_PROPERTIES_INFORMATION; }
#line 12564
extern "C" { typedef 
#line 12562
struct _TRANSACTION_BIND_INFORMATION { 
HANDLE TmHandle; 
} TRANSACTION_BIND_INFORMATION; }extern "C" { typedef _TRANSACTION_BIND_INFORMATION *PTRANSACTION_BIND_INFORMATION; }




extern "C" { typedef 
#line 12566
struct _TRANSACTION_ENLISTMENT_PAIR { 
GUID EnlistmentId; 
GUID ResourceManagerId; 
} TRANSACTION_ENLISTMENT_PAIR; }extern "C" { typedef _TRANSACTION_ENLISTMENT_PAIR *PTRANSACTION_ENLISTMENT_PAIR; }




extern "C" { typedef 
#line 12571
struct _TRANSACTION_ENLISTMENTS_INFORMATION { 
DWORD NumberOfEnlistments; 
TRANSACTION_ENLISTMENT_PAIR EnlistmentPair[1]; 
} TRANSACTION_ENLISTMENTS_INFORMATION; }extern "C" { typedef _TRANSACTION_ENLISTMENTS_INFORMATION *PTRANSACTION_ENLISTMENTS_INFORMATION; }




extern "C" { typedef 
#line 12576
struct _TRANSACTION_FULL_INFORMATION { 

DWORD NameLength; 
} TRANSACTION_FULL_INFORMATION; }extern "C" { typedef _TRANSACTION_FULL_INFORMATION *PTRANSACTION_FULL_INFORMATION; }
#line 12586
extern "C" { typedef 
#line 12582
struct _RESOURCEMANAGER_BASIC_INFORMATION { 
GUID ResourceManagerId; 
DWORD DescriptionLength; 
WCHAR Description[1]; 
} RESOURCEMANAGER_BASIC_INFORMATION; }extern "C" { typedef _RESOURCEMANAGER_BASIC_INFORMATION *PRESOURCEMANAGER_BASIC_INFORMATION; }




extern "C" { typedef 
#line 12588
struct _RESOURCEMANAGER_COMPLETION_INFORMATION { 
HANDLE IoCompletionPortHandle; 
ULONG_PTR CompletionKey; 
} RESOURCEMANAGER_COMPLETION_INFORMATION; }extern "C" { typedef _RESOURCEMANAGER_COMPLETION_INFORMATION *PRESOURCEMANAGER_COMPLETION_INFORMATION; }
#line 12597
extern "C" { typedef 
#line 12594
struct _TRANSACTION_NAME_INFORMATION { 
DWORD NameLength; 
WCHAR Name[1]; 
} TRANSACTION_NAME_INFORMATION; }extern "C" { typedef _TRANSACTION_NAME_INFORMATION *PTRANSACTION_NAME_INFORMATION; }
#line 12614
extern "C" { typedef 
#line 12601
enum _TRANSACTION_INFORMATION_CLASS { 
TransactionBasicInformation, 
TransactionPropertiesInformation, 
TransactionEnlistmentInformation, 
TransactionFullInformation, 




TransactionBindInformation



} TRANSACTION_INFORMATION_CLASS; }
#line 12625
extern "C" { typedef 
#line 12617
enum _TRANSACTIONMANAGER_INFORMATION_CLASS { 
TransactionManagerBasicInformation, 
TransactionManagerLogInformation, 
TransactionManagerLogPathInformation, 
TransactionManagerOnlineProbeInformation



} TRANSACTIONMANAGER_INFORMATION_CLASS; }
#line 12637
extern "C" { typedef 
#line 12629
enum _RESOURCEMANAGER_INFORMATION_CLASS { 
ResourceManagerBasicInformation, 
ResourceManagerCompletionInformation, 
ResourceManagerFullInformation, 


ResourceManagerNameInformation

} RESOURCEMANAGER_INFORMATION_CLASS; }
#line 12644
extern "C" { typedef 
#line 12640
struct _ENLISTMENT_BASIC_INFORMATION { 
GUID EnlistmentId; 
GUID TransactionId; 
GUID ResourceManagerId; 
} ENLISTMENT_BASIC_INFORMATION; }extern "C" { typedef _ENLISTMENT_BASIC_INFORMATION *PENLISTMENT_BASIC_INFORMATION; }
#line 12655
extern "C" { typedef 
#line 12647
enum _ENLISTMENT_INFORMATION_CLASS { 
EnlistmentBasicInformation, 
EnlistmentRecoveryInformation, 
EnlistmentFullInformation, 


EnlistmentNameInformation

} ENLISTMENT_INFORMATION_CLASS; }



extern "C" { typedef 
#line 12657
struct _TRANSACTION_LIST_ENTRY { 
::UOW UOW; 
} TRANSACTION_LIST_ENTRY; }extern "C" { typedef _TRANSACTION_LIST_ENTRY *PTRANSACTION_LIST_ENTRY; }




extern "C" { typedef 
#line 12661
struct _TRANSACTION_LIST_INFORMATION { 
DWORD NumberOfTransactions; 
TRANSACTION_LIST_ENTRY TransactionInformation[1]; 
} TRANSACTION_LIST_INFORMATION; }extern "C" { typedef _TRANSACTION_LIST_INFORMATION *PTRANSACTION_LIST_INFORMATION; }
#line 12679
extern "C" { typedef 
#line 12671
enum _KTMOBJECT_TYPE { 

KTMOBJECT_TRANSACTION, 
KTMOBJECT_TRANSACTION_MANAGER, 
KTMOBJECT_RESOURCE_MANAGER, 
KTMOBJECT_ENLISTMENT, 
KTMOBJECT_INVALID

} KTMOBJECT_TYPE; }extern "C" { typedef _KTMOBJECT_TYPE *PKTMOBJECT_TYPE; }
#line 12709
extern "C" { typedef 
#line 12689
struct _KTMOBJECT_CURSOR { 
#line 12695
GUID LastQuery; 
#line 12701
DWORD ObjectIdCount; 
#line 12707
GUID ObjectIds[1]; 

} KTMOBJECT_CURSOR; }extern "C" { typedef _KTMOBJECT_CURSOR *PKTMOBJECT_CURSOR; }
#line 12718 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef DWORD TP_VERSION; }extern "C" { typedef DWORD *PTP_VERSION; }

extern "C" { typedef struct _TP_CALLBACK_INSTANCE TP_CALLBACK_INSTANCE; }extern "C" { typedef _TP_CALLBACK_INSTANCE *PTP_CALLBACK_INSTANCE; }

extern "C" { typedef void (__stdcall *PTP_SIMPLE_CALLBACK)(PTP_CALLBACK_INSTANCE, PVOID); }




extern "C" { typedef struct _TP_POOL TP_POOL; }extern "C" { typedef _TP_POOL *PTP_POOL; }
extern "C" { typedef struct _TP_CLEANUP_GROUP TP_CLEANUP_GROUP; }extern "C" { typedef _TP_CLEANUP_GROUP *PTP_CLEANUP_GROUP; }

extern "C" { typedef void (__stdcall *PTP_CLEANUP_GROUP_CANCEL_CALLBACK)(PVOID, PVOID); }
#line 12755
extern "C" { typedef 
#line 12740
struct _TP_CALLBACK_ENVIRON { 
TP_VERSION Version; 
PTP_POOL Pool; 
PTP_CLEANUP_GROUP CleanupGroup; 
PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback; 
PVOID RaceDll; 
struct _ACTIVATION_CONTEXT *ActivationContext; 
PTP_SIMPLE_CALLBACK FinalizationCallback; 
union { 
DWORD Flags; 
struct { 
DWORD LongFunction:1; 
DWORD Private:31; 
} s; 
} u; 
} TP_CALLBACK_ENVIRON; }extern "C" { typedef _TP_CALLBACK_ENVIRON *PTP_CALLBACK_ENVIRON; }
#line 12761
extern "C" { __forceinline void TpInitializeCallbackEnviron(PTP_CALLBACK_ENVIRON 
CallbackEnviron) 

{ 
(CallbackEnviron->Version) = (1); 
(CallbackEnviron->Pool) = (0); 
(CallbackEnviron->CleanupGroup) = (0); 
(CallbackEnviron->CleanupGroupCancelCallback) = (0); 
(CallbackEnviron->RaceDll) = (0); 
(CallbackEnviron->ActivationContext) = (0); 
(CallbackEnviron->FinalizationCallback) = (0); 
((CallbackEnviron->u).Flags) = (0); 
} } 



extern "C" { __forceinline void TpSetCallbackThreadpool(PTP_CALLBACK_ENVIRON 
CallbackEnviron, PTP_POOL 
Pool) 

{ 
(CallbackEnviron->Pool) = Pool; 
} } 



extern "C" { __forceinline void TpSetCallbackCleanupGroup(PTP_CALLBACK_ENVIRON 
CallbackEnviron, PTP_CLEANUP_GROUP 
CleanupGroup, PTP_CLEANUP_GROUP_CANCEL_CALLBACK 
CleanupGroupCancelCallback) 

{ 
(CallbackEnviron->CleanupGroup) = CleanupGroup; 
(CallbackEnviron->CleanupGroupCancelCallback) = CleanupGroupCancelCallback; 
} } 



extern "C" { __forceinline void TpSetCallbackActivationContext(PTP_CALLBACK_ENVIRON 
CallbackEnviron, _ACTIVATION_CONTEXT *
ActivationContext) 

{ 
(CallbackEnviron->ActivationContext) = ActivationContext; 
} } 



extern "C" { __forceinline void TpSetCallbackNoActivationContext(PTP_CALLBACK_ENVIRON 
CallbackEnviron) 

{ 
(CallbackEnviron->ActivationContext) = ((_ACTIVATION_CONTEXT *)((LONG_PTR)(-1))); 
} } 



extern "C" { __forceinline void TpSetCallbackLongFunction(PTP_CALLBACK_ENVIRON 
CallbackEnviron) 

{ 
(((CallbackEnviron->u).s).LongFunction) = (1); 
} } 



extern "C" { __forceinline void TpSetCallbackRaceWithDll(PTP_CALLBACK_ENVIRON 
CallbackEnviron, PVOID 
DllHandle) 

{ 
(CallbackEnviron->RaceDll) = DllHandle; 
} } 



extern "C" { __forceinline void TpSetCallbackFinalizationCallback(PTP_CALLBACK_ENVIRON 
CallbackEnviron, PTP_SIMPLE_CALLBACK 
FinalizationCallback) 

{ 
(CallbackEnviron->FinalizationCallback) = FinalizationCallback; 
} } 



extern "C" { __forceinline void TpDestroyCallbackEnviron(PTP_CALLBACK_ENVIRON 
CallbackEnviron) 

{ 
#line 12857
CallbackEnviron; 
} } 
#line 12863 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { typedef struct _TP_WORK TP_WORK; }extern "C" { typedef _TP_WORK *PTP_WORK; }

extern "C" { typedef void (__stdcall *PTP_WORK_CALLBACK)(PTP_CALLBACK_INSTANCE, PVOID, PTP_WORK); }
#line 12871
extern "C" { typedef struct _TP_TIMER TP_TIMER; }extern "C" { typedef _TP_TIMER *PTP_TIMER; }

extern "C" { typedef void (__stdcall *PTP_TIMER_CALLBACK)(PTP_CALLBACK_INSTANCE, PVOID, PTP_TIMER); }
#line 12879
extern "C" { typedef DWORD TP_WAIT_RESULT; }

extern "C" { typedef struct _TP_WAIT TP_WAIT; }extern "C" { typedef _TP_WAIT *PTP_WAIT; }

extern "C" { typedef void (__stdcall *PTP_WAIT_CALLBACK)(PTP_CALLBACK_INSTANCE, PVOID, PTP_WAIT, TP_WAIT_RESULT); }
#line 12890
extern "C" { typedef struct _TP_IO TP_IO; }extern "C" { typedef _TP_IO *PTP_IO; }
#line 12935 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnt.h"
extern "C" { __inline struct _TEB *NtCurrentTeb() { return (_TEB *)((ULONG_PTR)__readfsdword(24)); } } 
#line 183 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\windef.h"
extern "C" { typedef UINT_PTR WPARAM; }
extern "C" { typedef LONG_PTR LPARAM; }
extern "C" { typedef LONG_PTR LRESULT; }
#line 208
extern "C" { struct HWND__ { int unused; }; }extern "C" { typedef HWND__ *HWND; }
extern "C" { struct HHOOK__ { int unused; }; }extern "C" { typedef HHOOK__ *HHOOK; }
#line 215 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\windef.h"
extern "C" { typedef WORD ATOM; }

extern "C" { typedef HANDLE *SPHANDLE; }
extern "C" { typedef HANDLE *LPHANDLE; }
extern "C" { typedef HANDLE HGLOBAL; }
extern "C" { typedef HANDLE HLOCAL; }
extern "C" { typedef HANDLE GLOBALHANDLE; }
extern "C" { typedef HANDLE LOCALHANDLE; }
#line 230
extern "C" { typedef int (__stdcall *FARPROC)(void); }
extern "C" { typedef int (__stdcall *NEARPROC)(void); }
extern "C" { typedef int (__stdcall *PROC)(void); }
#line 247 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\windef.h"
extern "C" { typedef void *HGDIOBJ; }
#line 253 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\windef.h"
extern "C" { struct HKEY__ { int unused; }; }extern "C" { typedef HKEY__ *HKEY; }
extern "C" { typedef HKEY *PHKEY; }


extern "C" { struct HACCEL__ { int unused; }; }extern "C" { typedef HACCEL__ *HACCEL; }
#line 260 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\windef.h"
extern "C" { struct HBITMAP__ { int unused; }; }extern "C" { typedef HBITMAP__ *HBITMAP; }
extern "C" { struct HBRUSH__ { int unused; }; }extern "C" { typedef HBRUSH__ *HBRUSH; }
#line 264 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\windef.h"
extern "C" { struct HCOLORSPACE__ { int unused; }; }extern "C" { typedef HCOLORSPACE__ *HCOLORSPACE; }
#line 267 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\windef.h"
extern "C" { struct HDC__ { int unused; }; }extern "C" { typedef HDC__ *HDC; }
#line 269 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\windef.h"
extern "C" { struct HGLRC__ { int unused; }; }extern "C" { typedef HGLRC__ *HGLRC; }
extern "C" { struct HDESK__ { int unused; }; }extern "C" { typedef HDESK__ *HDESK; }
extern "C" { struct HENHMETAFILE__ { int unused; }; }extern "C" { typedef HENHMETAFILE__ *HENHMETAFILE; }

extern "C" { struct HFONT__ { int unused; }; }extern "C" { typedef HFONT__ *HFONT; }
#line 275 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\windef.h"
extern "C" { struct HICON__ { int unused; }; }extern "C" { typedef HICON__ *HICON; }

extern "C" { struct HMENU__ { int unused; }; }extern "C" { typedef HMENU__ *HMENU; }
#line 279 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\windef.h"
extern "C" { struct HMETAFILE__ { int unused; }; }extern "C" { typedef HMETAFILE__ *HMETAFILE; }
extern "C" { struct HINSTANCE__ { int unused; }; }extern "C" { typedef HINSTANCE__ *HINSTANCE; }
extern "C" { typedef HINSTANCE HMODULE; }

extern "C" { struct HPALETTE__ { int unused; }; }extern "C" { typedef HPALETTE__ *HPALETTE; }
extern "C" { struct HPEN__ { int unused; }; }extern "C" { typedef HPEN__ *HPEN; }
#line 286 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\windef.h"
extern "C" { struct HRGN__ { int unused; }; }extern "C" { typedef HRGN__ *HRGN; }
extern "C" { struct HRSRC__ { int unused; }; }extern "C" { typedef HRSRC__ *HRSRC; }
extern "C" { struct HSPRITE__ { int unused; }; }extern "C" { typedef HSPRITE__ *HSPRITE; }
extern "C" { struct HSTR__ { int unused; }; }extern "C" { typedef HSTR__ *HSTR; }
extern "C" { struct HTASK__ { int unused; }; }extern "C" { typedef HTASK__ *HTASK; }
extern "C" { struct HWINSTA__ { int unused; }; }extern "C" { typedef HWINSTA__ *HWINSTA; }
extern "C" { struct HKL__ { int unused; }; }extern "C" { typedef HKL__ *HKL; }


extern "C" { struct HWINEVENTHOOK__ { int unused; }; }extern "C" { typedef HWINEVENTHOOK__ *HWINEVENTHOOK; }
#line 300 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\windef.h"
extern "C" { struct HMONITOR__ { int unused; }; }extern "C" { typedef HMONITOR__ *HMONITOR; }
#line 302 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\windef.h"
extern "C" { struct HUMPD__ { int unused; }; }extern "C" { typedef HUMPD__ *HUMPD; }
#line 306 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\windef.h"
extern "C" { typedef int HFILE; }
extern "C" { typedef HICON HCURSOR; }
#line 313 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\windef.h"
extern "C" { typedef DWORD COLORREF; }
extern "C" { typedef DWORD *LPCOLORREF; }
#line 324
extern "C" { typedef 
#line 318
struct tagRECT { 

LONG left; 
LONG top; 
LONG right; 
LONG bottom; 
} RECT; }extern "C" { typedef tagRECT *PRECT; }extern "C" { typedef tagRECT *NPRECT; }extern "C" { typedef tagRECT *LPRECT; }

extern "C" { typedef const RECT *LPCRECT; }
#line 334
extern "C" { typedef 
#line 328
struct _RECTL { 

LONG left; 
LONG top; 
LONG right; 
LONG bottom; 
} RECTL; }extern "C" { typedef _RECTL *PRECTL; }extern "C" { typedef _RECTL *LPRECTL; }

extern "C" { typedef const RECTL *LPCRECTL; }
#line 342
extern "C" { typedef 
#line 338
struct tagPOINT { 

LONG x; 
LONG y; 
} POINT; }extern "C" { typedef tagPOINT *PPOINT; }extern "C" { typedef tagPOINT *NPPOINT; }extern "C" { typedef tagPOINT *LPPOINT; }
#line 348
extern "C" { typedef 
#line 344
struct _POINTL { 

LONG x; 
LONG y; 
} POINTL; }extern "C" { typedef _POINTL *PPOINTL; }
#line 354
extern "C" { typedef 
#line 350
struct tagSIZE { 

LONG cx; 
LONG cy; 
} SIZE; }extern "C" { typedef tagSIZE *PSIZE; }extern "C" { typedef tagSIZE *LPSIZE; }

extern "C" { typedef SIZE SIZEL; }
extern "C" { typedef SIZE *PSIZEL; }extern "C" { typedef SIZE *LPSIZEL; }
#line 368 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\windef.h"
extern "C" { typedef 
#line 359 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\windef.h"
struct tagPOINTS { 


SHORT x; 
SHORT y; 
#line 368 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\windef.h"
} POINTS; }extern "C" { typedef tagPOINTS *PPOINTS; }extern "C" { typedef tagPOINTS *LPPOINTS; }
#line 377
extern "C" { typedef 
#line 374
struct _FILETIME { 
DWORD dwLowDateTime; 
DWORD dwHighDateTime; 
} FILETIME; }extern "C" { typedef _FILETIME *PFILETIME; }extern "C" { typedef _FILETIME *LPFILETIME; }
#line 250 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { typedef 
#line 237
struct _OVERLAPPED { 
ULONG_PTR Internal; 
ULONG_PTR InternalHigh; 
union { 
struct { 
DWORD Offset; 
DWORD OffsetHigh; 
}; 

PVOID Pointer; 
}; 

HANDLE hEvent; 
} OVERLAPPED; }extern "C" { typedef _OVERLAPPED *LPOVERLAPPED; }
#line 257
extern "C" { typedef 
#line 252
struct _OVERLAPPED_ENTRY { 
ULONG_PTR lpCompletionKey; 
LPOVERLAPPED lpOverlapped; 
ULONG_PTR Internal; 
DWORD dwNumberOfBytesTransferred; 
} OVERLAPPED_ENTRY; }extern "C" { typedef _OVERLAPPED_ENTRY *LPOVERLAPPED_ENTRY; }
#line 263
extern "C" { typedef 
#line 259
struct _SECURITY_ATTRIBUTES { 
DWORD nLength; 
LPVOID lpSecurityDescriptor; 
BOOL bInheritHandle; 
} SECURITY_ATTRIBUTES; }extern "C" { typedef _SECURITY_ATTRIBUTES *PSECURITY_ATTRIBUTES; }extern "C" { typedef _SECURITY_ATTRIBUTES *LPSECURITY_ATTRIBUTES; }
#line 270
extern "C" { typedef 
#line 265
struct _PROCESS_INFORMATION { 
HANDLE hProcess; 
HANDLE hThread; 
DWORD dwProcessId; 
DWORD dwThreadId; 
} PROCESS_INFORMATION; }extern "C" { typedef _PROCESS_INFORMATION *PPROCESS_INFORMATION; }extern "C" { typedef _PROCESS_INFORMATION *LPPROCESS_INFORMATION; }
#line 299
extern "C" { typedef 
#line 290
struct _SYSTEMTIME { 
WORD wYear; 
WORD wMonth; 
WORD wDayOfWeek; 
WORD wDay; 
WORD wHour; 
WORD wMinute; 
WORD wSecond; 
WORD wMilliseconds; 
} SYSTEMTIME; }extern "C" { typedef _SYSTEMTIME *PSYSTEMTIME; }extern "C" { typedef _SYSTEMTIME *LPSYSTEMTIME; }


extern "C" { typedef DWORD (__stdcall *PTHREAD_START_ROUTINE)(LPVOID); }


extern "C" { typedef PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE; }


extern "C" { typedef void (__stdcall *PFIBER_START_ROUTINE)(LPVOID); }


extern "C" { typedef PFIBER_START_ROUTINE LPFIBER_START_ROUTINE; }
#line 314 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { typedef RTL_CRITICAL_SECTION CRITICAL_SECTION; }
extern "C" { typedef PRTL_CRITICAL_SECTION PCRITICAL_SECTION; }
extern "C" { typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION; }

extern "C" { typedef RTL_CRITICAL_SECTION_DEBUG CRITICAL_SECTION_DEBUG; }
extern "C" { typedef PRTL_CRITICAL_SECTION_DEBUG PCRITICAL_SECTION_DEBUG; }
extern "C" { typedef PRTL_CRITICAL_SECTION_DEBUG LPCRITICAL_SECTION_DEBUG; }
#line 328
extern "C" { typedef RTL_RUN_ONCE INIT_ONCE; }
extern "C" { typedef PRTL_RUN_ONCE PINIT_ONCE; }
extern "C" { typedef PRTL_RUN_ONCE LPINIT_ONCE; }
#line 351
extern "C" { typedef BOOL (__stdcall *PINIT_ONCE_FN)(PINIT_ONCE, PVOID, PVOID *); }
#line 360
extern "C" { extern __declspec( dllimport ) void __stdcall InitOnceInitialize(PINIT_ONCE); } 
#line 367
extern "C" { extern __declspec( dllimport ) BOOL __stdcall InitOnceExecuteOnce(PINIT_ONCE, PINIT_ONCE_FN, PVOID, LPVOID *); } 
#line 377
extern "C" { extern __declspec( dllimport ) BOOL __stdcall InitOnceBeginInitialize(LPINIT_ONCE, DWORD, PBOOL, LPVOID *); } 
#line 387
extern "C" { extern __declspec( dllimport ) BOOL __stdcall InitOnceComplete(LPINIT_ONCE, DWORD, LPVOID); } 
#line 399 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { typedef RTL_SRWLOCK SRWLOCK; }extern "C" { typedef RTL_SRWLOCK *PSRWLOCK; }
#line 406
extern "C" { extern __declspec( dllimport ) void __stdcall InitializeSRWLock(PSRWLOCK); } 
#line 413
extern "C" { extern __declspec( dllimport ) void __stdcall ReleaseSRWLockExclusive(PSRWLOCK); } 
#line 420
extern "C" { extern __declspec( dllimport ) void __stdcall ReleaseSRWLockShared(PSRWLOCK); } 
#line 427
extern "C" { extern __declspec( dllimport ) void __stdcall AcquireSRWLockExclusive(PSRWLOCK); } 
#line 434
extern "C" { extern __declspec( dllimport ) void __stdcall AcquireSRWLockShared(PSRWLOCK); } 
#line 442
extern "C" { typedef RTL_CONDITION_VARIABLE CONDITION_VARIABLE; }extern "C" { typedef RTL_CONDITION_VARIABLE *PCONDITION_VARIABLE; }




extern "C" { extern __declspec( dllimport ) void __stdcall InitializeConditionVariable(PCONDITION_VARIABLE); } 
#line 454
extern "C" { extern __declspec( dllimport ) void __stdcall WakeConditionVariable(PCONDITION_VARIABLE); } 
#line 461
extern "C" { extern __declspec( dllimport ) void __stdcall WakeAllConditionVariable(PCONDITION_VARIABLE); } 
#line 468
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SleepConditionVariableCS(PCONDITION_VARIABLE, PCRITICAL_SECTION, DWORD); } 
#line 477
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SleepConditionVariableSRW(PCONDITION_VARIABLE, PSRWLOCK, DWORD, ULONG); } 
#line 500
extern "C" { extern __declspec( dllimport ) PVOID __stdcall EncodePointer(PVOID); } 
#line 508
extern "C" { extern __declspec( dllimport ) PVOID __stdcall DecodePointer(PVOID); } 
#line 516
extern "C" { extern __declspec( dllimport ) PVOID __stdcall EncodeSystemPointer(PVOID); } 
#line 524
extern "C" { extern __declspec( dllimport ) PVOID __stdcall DecodeSystemPointer(PVOID); } 




extern "C" { typedef PLDT_ENTRY LPLDT_ENTRY; }
#line 657 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { typedef 
#line 638
struct _COMMPROP { 
WORD wPacketLength; 
WORD wPacketVersion; 
DWORD dwServiceMask; 
DWORD dwReserved1; 
DWORD dwMaxTxQueue; 
DWORD dwMaxRxQueue; 
DWORD dwMaxBaud; 
DWORD dwProvSubType; 
DWORD dwProvCapabilities; 
DWORD dwSettableParams; 
DWORD dwSettableBaud; 
WORD wSettableData; 
WORD wSettableStopParity; 
DWORD dwCurrentTxQueue; 
DWORD dwCurrentRxQueue; 
DWORD dwProvSpec1; 
DWORD dwProvSpec2; 
WCHAR wcProvChar[1]; 
} COMMPROP; }extern "C" { typedef _COMMPROP *LPCOMMPROP; }
#line 676
extern "C" { typedef 
#line 665
struct _COMSTAT { 
DWORD fCtsHold:1; 
DWORD fDsrHold:1; 
DWORD fRlsdHold:1; 
DWORD fXoffHold:1; 
DWORD fXoffSent:1; 
DWORD fEof:1; 
DWORD fTxim:1; 
DWORD fReserved:25; 
DWORD cbInQue; 
DWORD cbOutQue; 
} COMSTAT; }extern "C" { typedef _COMSTAT *LPCOMSTAT; }
#line 722
extern "C" { typedef 
#line 693
struct _DCB { 
DWORD DCBlength; 
DWORD BaudRate; 
DWORD fBinary:1; 
DWORD fParity:1; 
DWORD fOutxCtsFlow:1; 
DWORD fOutxDsrFlow:1; 
DWORD fDtrControl:2; 
DWORD fDsrSensitivity:1; 
DWORD fTXContinueOnXoff:1; 
DWORD fOutX:1; 
DWORD fInX:1; 
DWORD fErrorChar:1; 
DWORD fNull:1; 
DWORD fRtsControl:2; 
DWORD fAbortOnError:1; 
DWORD fDummy2:17; 
WORD wReserved; 
WORD XonLim; 
WORD XoffLim; 
BYTE ByteSize; 
BYTE Parity; 
BYTE StopBits; 
char XonChar; 
char XoffChar; 
char ErrorChar; 
char EofChar; 
char EvtChar; 
WORD wReserved1; 
} DCB; }extern "C" { typedef _DCB *LPDCB; }
#line 730
extern "C" { typedef 
#line 724
struct _COMMTIMEOUTS { 
DWORD ReadIntervalTimeout; 
DWORD ReadTotalTimeoutMultiplier; 
DWORD ReadTotalTimeoutConstant; 
DWORD WriteTotalTimeoutMultiplier; 
DWORD WriteTotalTimeoutConstant; 
} COMMTIMEOUTS; }extern "C" { typedef _COMMTIMEOUTS *LPCOMMTIMEOUTS; }
#line 743
extern "C" { typedef 
#line 732
struct _COMMCONFIG { 
DWORD dwSize; 
WORD wVersion; 
WORD wReserved; 
DCB dcb; 
DWORD dwProviderSubType; 

DWORD dwProviderOffset; 

DWORD dwProviderSize; 
WCHAR wcProviderData[1]; 
} COMMCONFIG; }extern "C" { typedef _COMMCONFIG *LPCOMMCONFIG; }
#line 762
extern "C" { typedef 
#line 745
struct _SYSTEM_INFO { 
union { 
DWORD dwOemId; 
struct { 
WORD wProcessorArchitecture; 
WORD wReserved; 
}; 
}; 
DWORD dwPageSize; 
LPVOID lpMinimumApplicationAddress; 
LPVOID lpMaximumApplicationAddress; 
DWORD_PTR dwActiveProcessorMask; 
DWORD dwNumberOfProcessors; 
DWORD dwProcessorType; 
DWORD dwAllocationGranularity; 
WORD wProcessorLevel; 
WORD wProcessorRevision; 
} SYSTEM_INFO; }extern "C" { typedef _SYSTEM_INFO *LPSYSTEM_INFO; }
#line 808
extern "C" { typedef 
#line 799
struct _MEMORYSTATUS { 
DWORD dwLength; 
DWORD dwMemoryLoad; 
SIZE_T dwTotalPhys; 
SIZE_T dwAvailPhys; 
SIZE_T dwTotalPageFile; 
SIZE_T dwAvailPageFile; 
SIZE_T dwTotalVirtual; 
SIZE_T dwAvailVirtual; 
} MEMORYSTATUS; }extern "C" { typedef _MEMORYSTATUS *LPMEMORYSTATUS; }
#line 930
extern "C" { typedef 
#line 927
struct _EXCEPTION_DEBUG_INFO { 
EXCEPTION_RECORD ExceptionRecord; 
DWORD dwFirstChance; 
} EXCEPTION_DEBUG_INFO; }extern "C" { typedef _EXCEPTION_DEBUG_INFO *LPEXCEPTION_DEBUG_INFO; }
#line 936
extern "C" { typedef 
#line 932
struct _CREATE_THREAD_DEBUG_INFO { 
HANDLE hThread; 
LPVOID lpThreadLocalBase; 
LPTHREAD_START_ROUTINE lpStartAddress; 
} CREATE_THREAD_DEBUG_INFO; }extern "C" { typedef _CREATE_THREAD_DEBUG_INFO *LPCREATE_THREAD_DEBUG_INFO; }
#line 949
extern "C" { typedef 
#line 938
struct _CREATE_PROCESS_DEBUG_INFO { 
HANDLE hFile; 
HANDLE hProcess; 
HANDLE hThread; 
LPVOID lpBaseOfImage; 
DWORD dwDebugInfoFileOffset; 
DWORD nDebugInfoSize; 
LPVOID lpThreadLocalBase; 
LPTHREAD_START_ROUTINE lpStartAddress; 
LPVOID lpImageName; 
WORD fUnicode; 
} CREATE_PROCESS_DEBUG_INFO; }extern "C" { typedef _CREATE_PROCESS_DEBUG_INFO *LPCREATE_PROCESS_DEBUG_INFO; }



extern "C" { typedef 
#line 951
struct _EXIT_THREAD_DEBUG_INFO { 
DWORD dwExitCode; 
} EXIT_THREAD_DEBUG_INFO; }extern "C" { typedef _EXIT_THREAD_DEBUG_INFO *LPEXIT_THREAD_DEBUG_INFO; }



extern "C" { typedef 
#line 955
struct _EXIT_PROCESS_DEBUG_INFO { 
DWORD dwExitCode; 
} EXIT_PROCESS_DEBUG_INFO; }extern "C" { typedef _EXIT_PROCESS_DEBUG_INFO *LPEXIT_PROCESS_DEBUG_INFO; }
#line 966
extern "C" { typedef 
#line 959
struct _LOAD_DLL_DEBUG_INFO { 
HANDLE hFile; 
LPVOID lpBaseOfDll; 
DWORD dwDebugInfoFileOffset; 
DWORD nDebugInfoSize; 
LPVOID lpImageName; 
WORD fUnicode; 
} LOAD_DLL_DEBUG_INFO; }extern "C" { typedef _LOAD_DLL_DEBUG_INFO *LPLOAD_DLL_DEBUG_INFO; }



extern "C" { typedef 
#line 968
struct _UNLOAD_DLL_DEBUG_INFO { 
LPVOID lpBaseOfDll; 
} UNLOAD_DLL_DEBUG_INFO; }extern "C" { typedef _UNLOAD_DLL_DEBUG_INFO *LPUNLOAD_DLL_DEBUG_INFO; }
#line 976
extern "C" { typedef 
#line 972
struct _OUTPUT_DEBUG_STRING_INFO { 
LPSTR lpDebugStringData; 
WORD fUnicode; 
WORD nDebugStringLength; 
} OUTPUT_DEBUG_STRING_INFO; }extern "C" { typedef _OUTPUT_DEBUG_STRING_INFO *LPOUTPUT_DEBUG_STRING_INFO; }




extern "C" { typedef 
#line 978
struct _RIP_INFO { 
DWORD dwError; 
DWORD dwType; 
} RIP_INFO; }extern "C" { typedef _RIP_INFO *LPRIP_INFO; }
#line 999
extern "C" { typedef 
#line 984
struct _DEBUG_EVENT { 
DWORD dwDebugEventCode; 
DWORD dwProcessId; 
DWORD dwThreadId; 
union { 
EXCEPTION_DEBUG_INFO Exception; 
CREATE_THREAD_DEBUG_INFO CreateThread; 
CREATE_PROCESS_DEBUG_INFO CreateProcessInfo; 
EXIT_THREAD_DEBUG_INFO ExitThread; 
EXIT_PROCESS_DEBUG_INFO ExitProcess; 
LOAD_DLL_DEBUG_INFO LoadDll; 
UNLOAD_DLL_DEBUG_INFO UnloadDll; 
OUTPUT_DEBUG_STRING_INFO DebugString; 
RIP_INFO RipInfo; 
} u; 
} DEBUG_EVENT; }extern "C" { typedef _DEBUG_EVENT *LPDEBUG_EVENT; }
#line 1014
extern "C" { typedef 
#line 1006
struct _JIT_DEBUG_INFO { 
DWORD dwSize; 
DWORD dwProcessorArchitecture; 
DWORD dwThreadID; 
DWORD dwReserved0; 
ULONG64 lpExceptionAddress; 
ULONG64 lpExceptionRecord; 
ULONG64 lpContextRecord; 
} JIT_DEBUG_INFO; }extern "C" { typedef _JIT_DEBUG_INFO *LPJIT_DEBUG_INFO; }

extern "C" { typedef JIT_DEBUG_INFO JIT_DEBUG_INFO32; }extern "C" { typedef JIT_DEBUG_INFO *LPJIT_DEBUG_INFO32; }
extern "C" { typedef JIT_DEBUG_INFO JIT_DEBUG_INFO64; }extern "C" { typedef JIT_DEBUG_INFO *LPJIT_DEBUG_INFO64; }


extern "C" { typedef PCONTEXT LPCONTEXT; }
extern "C" { typedef PEXCEPTION_RECORD LPEXCEPTION_RECORD; }
extern "C" { typedef PEXCEPTION_POINTERS LPEXCEPTION_POINTERS; }
#line 1249 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { typedef 
#line 1242
struct _OFSTRUCT { 
BYTE cBytes; 
BYTE fFixedDisk; 
WORD nErrCode; 
WORD Reserved1; 
WORD Reserved2; 
CHAR szPathName[128]; 
} OFSTRUCT; }extern "C" { typedef _OFSTRUCT *LPOFSTRUCT; }extern "C" { typedef _OFSTRUCT *POFSTRUCT; }
#line 2258 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) LONG __stdcall InterlockedIncrement(volatile LONG *); } 
#line 2265
extern "C" { extern __declspec( dllimport ) LONG __stdcall InterlockedDecrement(volatile LONG *); } 
#line 2272
extern "C" { extern __declspec( dllimport ) LONG __stdcall InterlockedExchange(volatile LONG *, LONG); } 
#line 2283
extern "C" { extern __declspec( dllimport ) LONG __stdcall InterlockedExchangeAdd(volatile LONG *, LONG); } 
#line 2291
extern "C" { extern __declspec( dllimport ) LONG __stdcall InterlockedCompareExchange(volatile LONG *, LONG, LONG); } 
#line 2302
extern "C" { extern __declspec( dllimport ) LONGLONG __stdcall InterlockedCompareExchange64(volatile LONGLONG *, LONGLONG, LONGLONG); } 
#line 2316 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { __forceinline LONGLONG InterlockedAnd64(volatile LONGLONG *
Destination, LONGLONG 
Value) 

{ 
auto LONGLONG Old; 

do { 
Old = *Destination; 
} while (InterlockedCompareExchange64(Destination, Old & Value, Old) != Old); 



return Old; 
} } 



extern "C" { __forceinline LONGLONG InterlockedOr64(volatile LONGLONG *
Destination, LONGLONG 
Value) 

{ 
auto LONGLONG Old; 

do { 
Old = *Destination; 
} while (InterlockedCompareExchange64(Destination, Old | Value, Old) != Old); 



return Old; 
} } 



extern "C" { __forceinline LONGLONG InterlockedXor64(volatile LONGLONG *
Destination, LONGLONG 
Value) 

{ 
auto LONGLONG Old; 

do { 
Old = *Destination; 
} while (InterlockedCompareExchange64(Destination, Old ^ Value, Old) != Old); 



return Old; 
} } 



extern "C" { __forceinline LONGLONG InterlockedIncrement64(volatile LONGLONG *
Addend) 

{ 
auto LONGLONG Old; 

do { 
Old = *Addend; 
} while (InterlockedCompareExchange64(Addend, Old + (1), Old) != Old); 



return Old + (1); 
} } 



extern "C" { __forceinline LONGLONG InterlockedDecrement64(volatile LONGLONG *
Addend) 

{ 
auto LONGLONG Old; 

do { 
Old = *Addend; 
} while (InterlockedCompareExchange64(Addend, Old - (1), Old) != Old); 



return Old - (1); 
} } 



extern "C" { __forceinline LONGLONG InterlockedExchange64(volatile LONGLONG *
Target, LONGLONG 
Value) 

{ 
auto LONGLONG Old; 

do { 
Old = *Target; 
} while (InterlockedCompareExchange64(Target, Value, Old) != Old); 



return Old; 
} } 



extern "C" { __forceinline LONGLONG InterlockedExchangeAdd64(volatile LONGLONG *
Addend, LONGLONG 
Value) 

{ 
auto LONGLONG Old; 

do { 
Old = *Addend; 
} while (InterlockedCompareExchange64(Addend, Old + Value, Old) != Old); 



return Old; 
} } 
#line 2454 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { __forceinline PVOID __cdecl __InlineInterlockedCompareExchangePointer(volatile PVOID *
Destination, PVOID 
ExChange, PVOID 
Comperand) 

{ 
return (PVOID)((LONG_PTR)InterlockedCompareExchange((volatile LONG *)Destination, (LONG)((LONG_PTR)ExChange), (LONG)((LONG_PTR)Comperand))); 
} } 
#line 2492 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) void __stdcall InitializeSListHead(PSLIST_HEADER); } 
#line 2499
extern "C" { extern __declspec( dllimport ) PSINGLE_LIST_ENTRY __stdcall InterlockedPopEntrySList(PSLIST_HEADER); } 
#line 2506
extern "C" { extern __declspec( dllimport ) PSINGLE_LIST_ENTRY __stdcall InterlockedPushEntrySList(PSLIST_HEADER, PSINGLE_LIST_ENTRY); } 
#line 2514
extern "C" { extern __declspec( dllimport ) PSINGLE_LIST_ENTRY __stdcall InterlockedFlushSList(PSLIST_HEADER); } 
#line 2521
extern "C" { extern __declspec( dllimport ) USHORT __stdcall QueryDepthSList(PSLIST_HEADER); } 
#line 2534 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FreeResource(HGLOBAL); } 
#line 2541
extern "C" { extern __declspec( dllimport ) LPVOID __stdcall LockResource(HGLOBAL); } 
#line 2560 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern int __stdcall WinMain(HINSTANCE, HINSTANCE, LPSTR, int); } 
#line 2573 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern int __stdcall wWinMain(HINSTANCE, HINSTANCE, LPWSTR, int); } 
#line 2583
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FreeLibrary(HMODULE); } 
#line 2592
extern "C" { extern __declspec( dllimport noreturn ) void __stdcall FreeLibraryAndExitThread(HMODULE, DWORD); } 
#line 2600
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DisableThreadLibraryCalls(HMODULE); } 
#line 2607
extern "C" { extern __declspec( dllimport ) FARPROC __stdcall GetProcAddress(HMODULE, LPCSTR); } 
#line 2615
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetVersion(); } 
#line 2623
extern "C" { extern __declspec( dllimport ) HGLOBAL __stdcall GlobalAlloc(UINT, SIZE_T); } 
#line 2632
extern "C" { extern __declspec( dllimport ) HGLOBAL __stdcall GlobalReAlloc(HGLOBAL, SIZE_T, UINT); } 
#line 2641
extern "C" { extern __declspec( dllimport ) SIZE_T __stdcall GlobalSize(HGLOBAL); } 
#line 2648
extern "C" { extern __declspec( dllimport ) UINT __stdcall GlobalFlags(HGLOBAL); } 
#line 2656
extern "C" { extern __declspec( dllimport ) LPVOID __stdcall GlobalLock(HGLOBAL); } 
#line 2664
extern "C" { extern __declspec( dllimport ) HGLOBAL __stdcall GlobalHandle(LPCVOID); } 
#line 2671
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GlobalUnlock(HGLOBAL); } 
#line 2679
extern "C" { extern __declspec( dllimport ) HGLOBAL __stdcall GlobalFree(HGLOBAL); } 
#line 2686
extern "C" { extern __declspec( dllimport ) SIZE_T __stdcall GlobalCompact(DWORD); } 
#line 2693
extern "C" { extern __declspec( dllimport ) void __stdcall GlobalFix(HGLOBAL); } 
#line 2700
extern "C" { extern __declspec( dllimport ) void __stdcall GlobalUnfix(HGLOBAL); } 
#line 2708
extern "C" { extern __declspec( dllimport ) LPVOID __stdcall GlobalWire(HGLOBAL); } 
#line 2715
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GlobalUnWire(HGLOBAL); } 
#line 2722
extern "C" { extern __declspec( dllimport ) void __stdcall GlobalMemoryStatus(LPMEMORYSTATUS); } 
#line 2736
extern "C" { typedef 
#line 2726
struct _MEMORYSTATUSEX { 
DWORD dwLength; 
DWORD dwMemoryLoad; 
DWORDLONG ullTotalPhys; 
DWORDLONG ullAvailPhys; 
DWORDLONG ullTotalPageFile; 
DWORDLONG ullAvailPageFile; 
DWORDLONG ullTotalVirtual; 
DWORDLONG ullAvailVirtual; 
DWORDLONG ullAvailExtendedVirtual; 
} MEMORYSTATUSEX; }extern "C" { typedef _MEMORYSTATUSEX *LPMEMORYSTATUSEX; }




extern "C" { extern __declspec( dllimport ) BOOL __stdcall GlobalMemoryStatusEx(LPMEMORYSTATUSEX); } 
#line 2749
extern "C" { extern __declspec( dllimport ) HLOCAL __stdcall LocalAlloc(UINT, SIZE_T); } 
#line 2758
extern "C" { extern __declspec( dllimport ) HLOCAL __stdcall LocalReAlloc(HLOCAL, SIZE_T, UINT); } 
#line 2768
extern "C" { extern __declspec( dllimport ) LPVOID __stdcall LocalLock(HLOCAL); } 
#line 2776
extern "C" { extern __declspec( dllimport ) HLOCAL __stdcall LocalHandle(LPCVOID); } 
#line 2783
extern "C" { extern __declspec( dllimport ) BOOL __stdcall LocalUnlock(HLOCAL); } 
#line 2790
extern "C" { extern __declspec( dllimport ) SIZE_T __stdcall LocalSize(HLOCAL); } 
#line 2797
extern "C" { extern __declspec( dllimport ) UINT __stdcall LocalFlags(HLOCAL); } 
#line 2804
extern "C" { extern __declspec( dllimport ) HLOCAL __stdcall LocalFree(HLOCAL); } 
#line 2811
extern "C" { extern __declspec( dllimport ) SIZE_T __stdcall LocalShrink(HLOCAL, UINT); } 
#line 2819
extern "C" { extern __declspec( dllimport ) SIZE_T __stdcall LocalCompact(UINT); } 
#line 2826
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FlushInstructionCache(HANDLE, LPCVOID, SIZE_T); } 
#line 2837
extern "C" { extern __declspec( dllimport ) void __stdcall FlushProcessWriteBuffers(); } 
#line 2844
extern "C" { extern __declspec( dllimport ) BOOL __stdcall QueryThreadCycleTime(HANDLE, PULONG64); } 
#line 2852
extern "C" { extern __declspec( dllimport ) BOOL __stdcall QueryProcessCycleTime(HANDLE, PULONG64); } 
#line 2860
extern "C" { extern __declspec( dllimport ) BOOL __stdcall QueryIdleProcessorCycleTime(PULONG, PULONG64); } 
#line 2871 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) LPVOID __stdcall VirtualAlloc(LPVOID, SIZE_T, DWORD, DWORD); } 
#line 2881
extern "C" { extern __declspec( dllimport ) BOOL __stdcall VirtualFree(LPVOID, SIZE_T, DWORD); } 
#line 2890
extern "C" { extern __declspec( dllimport ) BOOL __stdcall VirtualProtect(LPVOID, SIZE_T, DWORD, PDWORD); } 
#line 2900
extern "C" { extern __declspec( dllimport ) SIZE_T __stdcall VirtualQuery(LPCVOID, PMEMORY_BASIC_INFORMATION, SIZE_T); } 
#line 2910
extern "C" { extern __declspec( dllimport ) LPVOID __stdcall VirtualAllocEx(HANDLE, LPVOID, SIZE_T, DWORD, DWORD); } 
#line 2924
extern "C" { extern __declspec( dllimport ) LPVOID __stdcall VirtualAllocExNuma(HANDLE, LPVOID, SIZE_T, DWORD, DWORD, DWORD); } 
#line 2938 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetWriteWatch(DWORD, PVOID, SIZE_T, PVOID *, ULONG_PTR *, PULONG); } 
#line 2950
extern "C" { extern __declspec( dllimport ) UINT __stdcall ResetWriteWatch(LPVOID, SIZE_T); } 
#line 2958
extern "C" { extern __declspec( dllimport ) SIZE_T __stdcall GetLargePageMinimum(); } 
#line 2965
extern "C" { extern __declspec( dllimport ) UINT __stdcall EnumSystemFirmwareTables(DWORD, PVOID, DWORD); } 
#line 2974
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetSystemFirmwareTable(DWORD, DWORD, PVOID, DWORD); } 
#line 2984
extern "C" { extern __declspec( dllimport ) BOOL __stdcall VirtualFreeEx(HANDLE, LPVOID, SIZE_T, DWORD); } 
#line 2994
extern "C" { extern __declspec( dllimport ) BOOL __stdcall VirtualProtectEx(HANDLE, LPVOID, SIZE_T, DWORD, PDWORD); } 
#line 3005
extern "C" { extern __declspec( dllimport ) SIZE_T __stdcall VirtualQueryEx(HANDLE, LPCVOID, PMEMORY_BASIC_INFORMATION, SIZE_T); } 
#line 3016
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall HeapCreate(DWORD, SIZE_T, SIZE_T); } 
#line 3025
extern "C" { extern __declspec( dllimport ) BOOL __stdcall HeapDestroy(HANDLE); } 
#line 3033
extern "C" { extern __declspec( dllimport ) LPVOID __stdcall HeapAlloc(HANDLE, DWORD, SIZE_T); } 
#line 3043
extern "C" { extern __declspec( dllimport ) LPVOID __stdcall HeapReAlloc(HANDLE, DWORD, LPVOID, SIZE_T); } 
#line 3053
extern "C" { extern __declspec( dllimport ) BOOL __stdcall HeapFree(HANDLE, DWORD, LPVOID); } 
#line 3062
extern "C" { extern __declspec( dllimport ) SIZE_T __stdcall HeapSize(HANDLE, DWORD, LPCVOID); } 
#line 3071
extern "C" { extern __declspec( dllimport ) BOOL __stdcall HeapValidate(HANDLE, DWORD, LPCVOID); } 
#line 3080
extern "C" { extern __declspec( dllimport ) SIZE_T __stdcall HeapCompact(HANDLE, DWORD); } 
#line 3089
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall GetProcessHeap(); } 




extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetProcessHeaps(DWORD, PHANDLE); } 
#line 3117
extern "C" { typedef 
#line 3099
struct _PROCESS_HEAP_ENTRY { 
PVOID lpData; 
DWORD cbData; 
BYTE cbOverhead; 
BYTE iRegionIndex; 
WORD wFlags; 
union { 
struct { 
HANDLE hMem; 
DWORD dwReserved[3]; 
} Block; 
struct { 
DWORD dwCommittedSize; 
DWORD dwUnCommittedSize; 
LPVOID lpFirstBlock; 
LPVOID lpLastBlock; 
} Region; 
}; 
} PROCESS_HEAP_ENTRY; }extern "C" { typedef _PROCESS_HEAP_ENTRY *LPPROCESS_HEAP_ENTRY; }extern "C" { typedef _PROCESS_HEAP_ENTRY *PPROCESS_HEAP_ENTRY; }
#line 3128
extern "C" { extern __declspec( dllimport ) BOOL __stdcall HeapLock(HANDLE); } 
#line 3135
extern "C" { extern __declspec( dllimport ) BOOL __stdcall HeapUnlock(HANDLE); } 
#line 3143
extern "C" { extern __declspec( dllimport ) BOOL __stdcall HeapWalk(HANDLE, LPPROCESS_HEAP_ENTRY); } 
#line 3151
extern "C" { extern __declspec( dllimport ) BOOL __stdcall HeapSetInformation(HANDLE, HEAP_INFORMATION_CLASS, PVOID, SIZE_T); } 
#line 3161
extern "C" { extern __declspec( dllimport ) BOOL __stdcall HeapQueryInformation(HANDLE, HEAP_INFORMATION_CLASS, PVOID, SIZE_T, PSIZE_T); } 
#line 3188 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetBinaryTypeA(LPCSTR, LPDWORD); } 
#line 3195
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetBinaryTypeW(LPCWSTR, LPDWORD); } 
#line 3208 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetShortPathNameA(LPCSTR, LPSTR, DWORD); } 
#line 3216
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetShortPathNameW(LPCWSTR, LPWSTR, DWORD); } 
#line 3230 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetLongPathNameA(LPCSTR, LPSTR, DWORD); } 
#line 3238
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetLongPathNameW(LPCWSTR, LPWSTR, DWORD); } 
#line 3254 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetLongPathNameTransactedA(LPCSTR, LPSTR, DWORD, HANDLE); } 
#line 3263
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetLongPathNameTransactedW(LPCWSTR, LPWSTR, DWORD, HANDLE); } 
#line 3280 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetProcessAffinityMask(HANDLE, PDWORD_PTR, PDWORD_PTR); } 
#line 3289
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetProcessAffinityMask(HANDLE, DWORD_PTR); } 
#line 3299
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetProcessHandleCount(HANDLE, PDWORD); } 
#line 3309 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetProcessTimes(HANDLE, LPFILETIME, LPFILETIME, LPFILETIME, LPFILETIME); } 
#line 3320
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetProcessIoCounters(HANDLE, PIO_COUNTERS); } 
#line 3328
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetProcessWorkingSetSize(HANDLE, PSIZE_T, PSIZE_T); } 
#line 3337
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetProcessWorkingSetSizeEx(HANDLE, PSIZE_T, PSIZE_T, PDWORD); } 
#line 3347
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetProcessWorkingSetSize(HANDLE, SIZE_T, SIZE_T); } 
#line 3356
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetProcessWorkingSetSizeEx(HANDLE, SIZE_T, SIZE_T, DWORD); } 
#line 3366
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall OpenProcess(DWORD, BOOL, DWORD); } 
#line 3376
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall GetCurrentProcess(); } 
#line 3383
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetCurrentProcessId(); } 
#line 3391
extern "C" { extern __declspec( dllimport noreturn ) void __stdcall ExitProcess(UINT); } 
#line 3398
extern "C" { extern __declspec( dllimport ) BOOL __stdcall TerminateProcess(HANDLE, UINT); } 
#line 3406
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetExitCodeProcess(HANDLE, LPDWORD); } 
#line 3414
extern "C" { extern __declspec( dllimport ) void __stdcall FatalExit(int); } 
#line 3423
extern "C" { extern __declspec( dllimport ) LPCH __stdcall GetEnvironmentStrings(); } 
#line 3432
extern "C" { extern __declspec( dllimport ) LPWCH __stdcall GetEnvironmentStringsW(); } 
#line 3445 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetEnvironmentStringsA(LPCH); } 
#line 3451
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetEnvironmentStringsW(LPWCH); } 
#line 3463 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FreeEnvironmentStringsA(LPCH); } 
#line 3469
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FreeEnvironmentStringsW(LPWCH); } 
#line 3481 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) void __stdcall RaiseException(DWORD, DWORD, DWORD, const ULONG_PTR *); } 
#line 3492
extern "C" { extern __declspec( dllimport ) LONG __stdcall UnhandledExceptionFilter(_EXCEPTION_POINTERS *); } 



extern "C" { typedef LONG (__stdcall *PTOP_LEVEL_EXCEPTION_FILTER)(_EXCEPTION_POINTERS *); }


extern "C" { typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER; }




extern "C" { extern __declspec( dllimport ) LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER); } 
#line 3520
extern "C" { extern __declspec( dllimport ) LPVOID __stdcall CreateFiber(SIZE_T, LPFIBER_START_ROUTINE, LPVOID); } 
#line 3530
extern "C" { extern __declspec( dllimport ) LPVOID __stdcall CreateFiberEx(SIZE_T, SIZE_T, DWORD, LPFIBER_START_ROUTINE, LPVOID); } 
#line 3541
extern "C" { extern __declspec( dllimport ) void __stdcall DeleteFiber(LPVOID); } 
#line 3549
extern "C" { extern __declspec( dllimport ) LPVOID __stdcall ConvertThreadToFiber(LPVOID); } 
#line 3557
extern "C" { extern __declspec( dllimport ) LPVOID __stdcall ConvertThreadToFiberEx(LPVOID, DWORD); } 
#line 3567
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ConvertFiberToThread(); } 
#line 3578 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsThreadAFiber(); } 
#line 3587 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) void __stdcall SwitchToFiber(LPVOID); } 
#line 3594
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SwitchToThread(); } 
#line 3604 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateThread(LPSECURITY_ATTRIBUTES, SIZE_T, LPTHREAD_START_ROUTINE, LPVOID, DWORD, LPDWORD); } 
#line 3617
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateRemoteThread(HANDLE, LPSECURITY_ATTRIBUTES, SIZE_T, LPTHREAD_START_ROUTINE, LPVOID, DWORD, LPDWORD); } 
#line 3631
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall GetCurrentThread(); } 
#line 3638
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetCurrentThreadId(); } 
#line 3645
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetThreadStackGuarantee(PULONG); } 
#line 3652
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetProcessIdOfThread(HANDLE); } 
#line 3661
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetThreadId(HANDLE); } 
#line 3670 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetProcessId(HANDLE); } 
#line 3677
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetCurrentProcessorNumber(); } 
#line 3684
extern "C" { extern __declspec( dllimport ) DWORD_PTR __stdcall SetThreadAffinityMask(HANDLE, DWORD_PTR); } 
#line 3693
extern "C" { extern __declspec( dllimport ) DWORD __stdcall SetThreadIdealProcessor(HANDLE, DWORD); } 
#line 3702 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetProcessPriorityBoost(HANDLE, BOOL); } 
#line 3710
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetProcessPriorityBoost(HANDLE, PBOOL); } 
#line 3718
extern "C" { extern __declspec( dllimport ) BOOL __stdcall RequestWakeupLatency(LATENCY_TIME); } 
#line 3725
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsSystemResumeAutomatic(); } 
#line 3733
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall OpenThread(DWORD, BOOL, DWORD); } 
#line 3742
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetThreadPriority(HANDLE, int); } 
#line 3750
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetThreadPriorityBoost(HANDLE, BOOL); } 
#line 3758
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetThreadPriorityBoost(HANDLE, PBOOL); } 
#line 3766
extern "C" { extern __declspec( dllimport ) int __stdcall GetThreadPriority(HANDLE); } 
#line 3773
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetThreadTimes(HANDLE, LPFILETIME, LPFILETIME, LPFILETIME, LPFILETIME); } 
#line 3786
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetThreadIOPendingFlag(HANDLE, PBOOL); } 
#line 3797 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport noreturn ) void __stdcall ExitThread(DWORD); } 
#line 3804
extern "C" { extern __declspec( dllimport ) BOOL __stdcall TerminateThread(HANDLE, DWORD); } 
#line 3812
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetExitCodeThread(HANDLE, LPDWORD); } 
#line 3820
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetThreadSelectorEntry(HANDLE, DWORD, LPLDT_ENTRY); } 
#line 3829
extern "C" { extern __declspec( dllimport ) EXECUTION_STATE __stdcall SetThreadExecutionState(EXECUTION_STATE); } 
#line 3840
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetLastError(); } 
#line 3848 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) void __stdcall SetLastError(DWORD); } 
#line 3876 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetOverlappedResult(HANDLE, LPOVERLAPPED, LPDWORD, BOOL); } 
#line 3887
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateIoCompletionPort(HANDLE, HANDLE, ULONG_PTR, DWORD); } 
#line 3897
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetQueuedCompletionStatus(HANDLE, LPDWORD, PULONG_PTR, LPOVERLAPPED *, DWORD); } 
#line 3910
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetQueuedCompletionStatusEx(HANDLE, LPOVERLAPPED_ENTRY, ULONG, PULONG, DWORD, BOOL); } 
#line 3924 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PostQueuedCompletionStatus(HANDLE, DWORD, ULONG_PTR, LPOVERLAPPED); } 
#line 3952
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetFileCompletionNotificationModes(HANDLE, UCHAR); } 
#line 3960
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetFileIoOverlappedRange(HANDLE, PUCHAR, ULONG); } 
#line 3976 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetErrorMode(); } 
#line 3983
extern "C" { extern __declspec( dllimport ) UINT __stdcall SetErrorMode(UINT); } 
#line 3990
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ReadProcessMemory(HANDLE, LPCVOID, LPVOID, SIZE_T, SIZE_T *); } 
#line 4001
extern "C" { extern __declspec( dllimport ) BOOL __stdcall WriteProcessMemory(HANDLE, LPVOID, LPCVOID, SIZE_T, SIZE_T *); } 
#line 4013
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetThreadContext(HANDLE, LPCONTEXT); } 
#line 4021
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetThreadContext(HANDLE, const CONTEXT *); } 
#line 4029
extern "C" { extern __declspec( dllimport ) BOOL __stdcall Wow64GetThreadContext(HANDLE, PWOW64_CONTEXT); } 
#line 4037
extern "C" { extern __declspec( dllimport ) BOOL __stdcall Wow64SetThreadContext(HANDLE, const WOW64_CONTEXT *); } 
#line 4047 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall SuspendThread(HANDLE); } 
#line 4054
extern "C" { extern __declspec( dllimport ) DWORD __stdcall Wow64SuspendThread(HANDLE); } 
#line 4061
extern "C" { extern __declspec( dllimport ) DWORD __stdcall ResumeThread(HANDLE); } 
#line 4070
extern "C" { typedef void (__stdcall *PAPCFUNC)(ULONG_PTR); }
#line 4077
extern "C" { extern __declspec( dllimport ) DWORD __stdcall QueueUserAPC(PAPCFUNC, HANDLE, ULONG_PTR); } 
#line 4089 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsDebuggerPresent(); } 
#line 4099 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CheckRemoteDebuggerPresent(HANDLE, PBOOL); } 
#line 4109 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) void __stdcall DebugBreak(); } 
#line 4116
extern "C" { extern __declspec( dllimport ) BOOL __stdcall WaitForDebugEvent(LPDEBUG_EVENT, DWORD); } 
#line 4124
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ContinueDebugEvent(DWORD, DWORD, DWORD); } 
#line 4133
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DebugActiveProcess(DWORD); } 
#line 4140
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DebugActiveProcessStop(DWORD); } 
#line 4147
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DebugSetProcessKillOnExit(BOOL); } 
#line 4154
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DebugBreakProcess(HANDLE); } 
#line 4161
extern "C" { extern __declspec( dllimport ) void __stdcall InitializeCriticalSection(LPCRITICAL_SECTION); } 
#line 4168
extern "C" { extern __declspec( dllimport ) void __stdcall EnterCriticalSection(LPCRITICAL_SECTION); } 
#line 4175
extern "C" { extern __declspec( dllimport ) void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION); } 
#line 4185
extern "C" { extern __declspec( dllimport ) BOOL __stdcall InitializeCriticalSectionAndSpinCount(LPCRITICAL_SECTION, DWORD); } 
#line 4193
extern "C" { extern __declspec( dllimport ) BOOL __stdcall InitializeCriticalSectionEx(LPCRITICAL_SECTION, DWORD, DWORD); } 
#line 4202
extern "C" { extern __declspec( dllimport ) DWORD __stdcall SetCriticalSectionSpinCount(LPCRITICAL_SECTION, DWORD); } 
#line 4212 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall TryEnterCriticalSection(LPCRITICAL_SECTION); } 
#line 4220 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION); } 
#line 4227
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetEvent(HANDLE); } 
#line 4234
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ResetEvent(HANDLE); } 
#line 4241
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PulseEvent(HANDLE); } 
#line 4248
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ReleaseSemaphore(HANDLE, LONG, LPLONG); } 
#line 4257
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ReleaseMutex(HANDLE); } 
#line 4264
extern "C" { extern __declspec( dllimport ) DWORD __stdcall WaitForSingleObject(HANDLE, DWORD); } 
#line 4272
extern "C" { extern __declspec( dllimport ) DWORD __stdcall WaitForMultipleObjects(DWORD, const HANDLE *, BOOL, DWORD); } 
#line 4282
extern "C" { extern __declspec( dllimport ) void __stdcall Sleep(DWORD); } 
#line 4290
extern "C" { extern __declspec( dllimport ) HGLOBAL __stdcall LoadResource(HMODULE, HRSRC); } 
#line 4298
extern "C" { extern __declspec( dllimport ) DWORD __stdcall SizeofResource(HMODULE, HRSRC); } 
#line 4307
extern "C" { extern __declspec( dllimport ) ATOM __stdcall GlobalDeleteAtom(ATOM); } 
#line 4314
extern "C" { extern __declspec( dllimport ) BOOL __stdcall InitAtomTable(DWORD); } 
#line 4321
extern "C" { extern __declspec( dllimport ) ATOM __stdcall DeleteAtom(ATOM); } 
#line 4328
extern "C" { extern __declspec( dllimport ) UINT __stdcall SetHandleCount(UINT); } 
#line 4335
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetLogicalDrives(); } 
#line 4342
extern "C" { extern __declspec( dllimport ) BOOL __stdcall LockFile(HANDLE, DWORD, DWORD, DWORD, DWORD); } 
#line 4353
extern "C" { extern __declspec( dllimport ) BOOL __stdcall UnlockFile(HANDLE, DWORD, DWORD, DWORD, DWORD); } 
#line 4364
extern "C" { extern __declspec( dllimport ) BOOL __stdcall LockFileEx(HANDLE, DWORD, DWORD, DWORD, DWORD, LPOVERLAPPED); } 
#line 4379
extern "C" { extern __declspec( dllimport ) BOOL __stdcall UnlockFileEx(HANDLE, DWORD, DWORD, DWORD, LPOVERLAPPED); } 
#line 4398
extern "C" { typedef 
#line 4387
struct _BY_HANDLE_FILE_INFORMATION { 
DWORD dwFileAttributes; 
FILETIME ftCreationTime; 
FILETIME ftLastAccessTime; 
FILETIME ftLastWriteTime; 
DWORD dwVolumeSerialNumber; 
DWORD nFileSizeHigh; 
DWORD nFileSizeLow; 
DWORD nNumberOfLinks; 
DWORD nFileIndexHigh; 
DWORD nFileIndexLow; 
} BY_HANDLE_FILE_INFORMATION; }extern "C" { typedef _BY_HANDLE_FILE_INFORMATION *PBY_HANDLE_FILE_INFORMATION; }extern "C" { typedef _BY_HANDLE_FILE_INFORMATION *LPBY_HANDLE_FILE_INFORMATION; }




extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetFileInformationByHandle(HANDLE, LPBY_HANDLE_FILE_INFORMATION); } 
#line 4411
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetFileType(HANDLE); } 
#line 4418
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetFileSize(HANDLE, LPDWORD); } 
#line 4426
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetFileSizeEx(HANDLE, PLARGE_INTEGER); } 
#line 4435
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall GetStdHandle(DWORD); } 
#line 4442
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetStdHandle(DWORD, HANDLE); } 
#line 4452
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetStdHandleEx(DWORD, HANDLE, PHANDLE); } 
#line 4463 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall WriteFile(HANDLE, LPCVOID, DWORD, LPDWORD, LPOVERLAPPED); } 
#line 4474
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ReadFile(HANDLE, LPVOID, DWORD, LPDWORD, LPOVERLAPPED); } 
#line 4485
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FlushFileBuffers(HANDLE); } 
#line 4492
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DeviceIoControl(HANDLE, DWORD, LPVOID, DWORD, LPVOID, DWORD, LPDWORD, LPOVERLAPPED); } 
#line 4506
extern "C" { extern __declspec( dllimport ) BOOL __stdcall RequestDeviceWakeup(HANDLE); } 
#line 4513
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CancelDeviceWakeupRequest(HANDLE); } 
#line 4520
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetDevicePowerState(HANDLE, BOOL *); } 
#line 4528
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetMessageWaitingIndicator(HANDLE, ULONG); } 
#line 4536
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetEndOfFile(HANDLE); } 
#line 4543
extern "C" { extern __declspec( dllimport ) DWORD __stdcall SetFilePointer(HANDLE, LONG, PLONG, DWORD); } 
#line 4553
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetFilePointerEx(HANDLE, LARGE_INTEGER, PLARGE_INTEGER, DWORD); } 
#line 4563
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FindClose(HANDLE); } 
#line 4570
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetFileTime(HANDLE, LPFILETIME, LPFILETIME, LPFILETIME); } 
#line 4580
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetFileTime(HANDLE, const FILETIME *, const FILETIME *, const FILETIME *); } 
#line 4593
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetFileValidData(HANDLE, LONGLONG); } 
#line 4604 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetFileShortNameA(HANDLE, LPCSTR); } 
#line 4611
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetFileShortNameW(HANDLE, LPCWSTR); } 
#line 4624 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CloseHandle(HANDLE); } 
#line 4631
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DuplicateHandle(HANDLE, HANDLE, HANDLE, LPHANDLE, DWORD, BOOL, DWORD); } 
#line 4644
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetHandleInformation(HANDLE, LPDWORD); } 
#line 4652
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetHandleInformation(HANDLE, DWORD, DWORD); } 
#line 4666
extern "C" { extern __declspec( dllimport ) DWORD __stdcall LoadModule(LPCSTR, LPVOID); } 
#line 4675
extern "C" { extern __declspec( dllimport ) UINT __stdcall WinExec(LPCSTR, UINT); } 
#line 4683
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ClearCommBreak(HANDLE); } 
#line 4690
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ClearCommError(HANDLE, LPDWORD, LPCOMSTAT); } 
#line 4699
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetupComm(HANDLE, DWORD, DWORD); } 
#line 4708
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EscapeCommFunction(HANDLE, DWORD); } 
#line 4717
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetCommConfig(HANDLE, LPCOMMCONFIG, LPDWORD); } 
#line 4726
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetCommMask(HANDLE, LPDWORD); } 
#line 4734
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetCommProperties(HANDLE, LPCOMMPROP); } 
#line 4742
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetCommModemStatus(HANDLE, LPDWORD); } 
#line 4750
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetCommState(HANDLE, LPDCB); } 
#line 4758
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetCommTimeouts(HANDLE, LPCOMMTIMEOUTS); } 
#line 4766
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PurgeComm(HANDLE, DWORD); } 
#line 4774
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetCommBreak(HANDLE); } 
#line 4781
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetCommConfig(HANDLE, LPCOMMCONFIG, DWORD); } 
#line 4790
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetCommMask(HANDLE, DWORD); } 
#line 4798
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetCommState(HANDLE, LPDCB); } 
#line 4806
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetCommTimeouts(HANDLE, LPCOMMTIMEOUTS); } 
#line 4814
extern "C" { extern __declspec( dllimport ) BOOL __stdcall TransmitCommChar(HANDLE, char); } 
#line 4822
extern "C" { extern __declspec( dllimport ) BOOL __stdcall WaitCommEvent(HANDLE, LPDWORD, LPOVERLAPPED); } 
#line 4832
extern "C" { extern __declspec( dllimport ) DWORD __stdcall SetTapePosition(HANDLE, DWORD, DWORD, DWORD, DWORD, BOOL); } 
#line 4844
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetTapePosition(HANDLE, DWORD, LPDWORD, LPDWORD, LPDWORD); } 
#line 4855
extern "C" { extern __declspec( dllimport ) DWORD __stdcall PrepareTape(HANDLE, DWORD, BOOL); } 
#line 4864
extern "C" { extern __declspec( dllimport ) DWORD __stdcall EraseTape(HANDLE, DWORD, BOOL); } 
#line 4873
extern "C" { extern __declspec( dllimport ) DWORD __stdcall CreateTapePartition(HANDLE, DWORD, DWORD, DWORD); } 
#line 4883
extern "C" { extern __declspec( dllimport ) DWORD __stdcall WriteTapemark(HANDLE, DWORD, DWORD, BOOL); } 
#line 4893
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetTapeStatus(HANDLE); } 
#line 4900
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetTapeParameters(HANDLE, DWORD, LPDWORD, LPVOID); } 
#line 4913
extern "C" { extern __declspec( dllimport ) DWORD __stdcall SetTapeParameters(HANDLE, DWORD, LPVOID); } 
#line 4925
extern "C" { extern __declspec( dllimport ) BOOL __stdcall Beep(DWORD, DWORD); } 
#line 4933
extern "C" { extern __declspec( dllimport ) int __stdcall MulDiv(int, int, int); } 
#line 4942
extern "C" { extern __declspec( dllimport ) void __stdcall GetSystemTime(LPSYSTEMTIME); } 
#line 4949
extern "C" { extern __declspec( dllimport ) void __stdcall GetSystemTimeAsFileTime(LPFILETIME); } 
#line 4956
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetSystemTime(const SYSTEMTIME *); } 
#line 4963
extern "C" { extern __declspec( dllimport ) void __stdcall GetLocalTime(LPSYSTEMTIME); } 
#line 4970
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetLocalTime(const SYSTEMTIME *); } 
#line 4977
extern "C" { extern __declspec( dllimport ) void __stdcall GetSystemInfo(LPSYSTEM_INFO); } 
#line 4986
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetSystemFileCacheSize(SIZE_T, SIZE_T, DWORD); } 
#line 4995
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetSystemFileCacheSize(PSIZE_T, PSIZE_T, PDWORD); } 
#line 5008 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetSystemRegistryQuota(PDWORD, PDWORD); } 
#line 5015
extern "C" { extern BOOL __stdcall GetSystemTimes(LPFILETIME, LPFILETIME, LPFILETIME); } 
#line 5027 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) void __stdcall GetNativeSystemInfo(LPSYSTEM_INFO); } 
#line 5035 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsProcessorFeaturePresent(DWORD); } 
#line 5047
extern "C" { typedef 
#line 5039
struct _TIME_ZONE_INFORMATION { 
LONG Bias; 
WCHAR StandardName[32]; 
SYSTEMTIME StandardDate; 
LONG StandardBias; 
WCHAR DaylightName[32]; 
SYSTEMTIME DaylightDate; 
LONG DaylightBias; 
} TIME_ZONE_INFORMATION; }extern "C" { typedef _TIME_ZONE_INFORMATION *PTIME_ZONE_INFORMATION; }extern "C" { typedef _TIME_ZONE_INFORMATION *LPTIME_ZONE_INFORMATION; }
#line 5059
extern "C" { typedef 
#line 5049
struct _TIME_DYNAMIC_ZONE_INFORMATION { 
LONG Bias; 
WCHAR StandardName[32]; 
SYSTEMTIME StandardDate; 
LONG StandardBias; 
WCHAR DaylightName[32]; 
SYSTEMTIME DaylightDate; 
LONG DaylightBias; 
WCHAR TimeZoneKeyName[128]; 
BOOLEAN DynamicDaylightTimeDisabled; 
} DYNAMIC_TIME_ZONE_INFORMATION; }extern "C" { typedef _TIME_DYNAMIC_ZONE_INFORMATION *PDYNAMIC_TIME_ZONE_INFORMATION; }
#line 5065
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SystemTimeToTzSpecificLocalTime(const TIME_ZONE_INFORMATION *, const SYSTEMTIME *, LPSYSTEMTIME); } 
#line 5074
extern "C" { extern __declspec( dllimport ) BOOL __stdcall TzSpecificLocalTimeToSystemTime(const TIME_ZONE_INFORMATION *, const SYSTEMTIME *, LPSYSTEMTIME); } 
#line 5083
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION); } 
#line 5090
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetTimeZoneInformation(const TIME_ZONE_INFORMATION *); } 
#line 5097
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetDynamicTimeZoneInformation(PDYNAMIC_TIME_ZONE_INFORMATION); } 
#line 5104
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetDynamicTimeZoneInformation(const DYNAMIC_TIME_ZONE_INFORMATION *); } 
#line 5117
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SystemTimeToFileTime(const SYSTEMTIME *, LPFILETIME); } 
#line 5125
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FileTimeToLocalFileTime(const FILETIME *, LPFILETIME); } 
#line 5133
extern "C" { extern __declspec( dllimport ) BOOL __stdcall LocalFileTimeToFileTime(const FILETIME *, LPFILETIME); } 
#line 5141
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FileTimeToSystemTime(const FILETIME *, LPSYSTEMTIME); } 
#line 5149
extern "C" { extern __declspec( dllimport ) LONG __stdcall CompareFileTime(const FILETIME *, const FILETIME *); } 
#line 5157
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FileTimeToDosDateTime(const FILETIME *, LPWORD, LPWORD); } 
#line 5166
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DosDateTimeToFileTime(WORD, WORD, LPFILETIME); } 
#line 5175
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetTickCount(); } 
#line 5182
extern "C" { extern __declspec( dllimport ) ULONGLONG __stdcall GetTickCount64(); } 
#line 5189
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetSystemTimeAdjustment(DWORD, BOOL); } 
#line 5197
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetSystemTimeAdjustment(PDWORD, PDWORD, PBOOL); } 
#line 5207
extern "C" { extern __declspec( dllimport ) DWORD __stdcall FormatMessageA(DWORD, LPCVOID, DWORD, DWORD, LPSTR, DWORD, va_list *); } 
#line 5219
extern "C" { extern __declspec( dllimport ) DWORD __stdcall FormatMessageW(DWORD, LPCVOID, DWORD, DWORD, LPWSTR, DWORD, va_list *); } 
#line 5278 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CreatePipe(PHANDLE, PHANDLE, LPSECURITY_ATTRIBUTES, DWORD); } 
#line 5288
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ConnectNamedPipe(HANDLE, LPOVERLAPPED); } 
#line 5296
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DisconnectNamedPipe(HANDLE); } 
#line 5303
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetNamedPipeHandleState(HANDLE, LPDWORD, LPDWORD, LPDWORD); } 
#line 5313
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetNamedPipeInfo(HANDLE, LPDWORD, LPDWORD, LPDWORD, LPDWORD); } 
#line 5324
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PeekNamedPipe(HANDLE, LPVOID, DWORD, LPDWORD, LPDWORD, LPDWORD); } 
#line 5336
extern "C" { extern __declspec( dllimport ) BOOL __stdcall TransactNamedPipe(HANDLE, LPVOID, DWORD, LPVOID, DWORD, LPDWORD, LPOVERLAPPED); } 
#line 5350
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateMailslotA(LPCSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES); } 
#line 5360
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateMailslotW(LPCWSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES); } 
#line 5375 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetMailslotInfo(HANDLE, LPDWORD, LPDWORD, LPDWORD, LPDWORD); } 
#line 5386
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetMailslotInfo(HANDLE, DWORD); } 
#line 5395
extern "C" { extern __declspec( dllimport ) LPVOID __stdcall MapViewOfFile(HANDLE, DWORD, DWORD, DWORD, SIZE_T); } 
#line 5406
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FlushViewOfFile(LPCVOID, SIZE_T); } 
#line 5414
extern "C" { extern __declspec( dllimport ) BOOL __stdcall UnmapViewOfFile(LPCVOID); } 
#line 5425
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EncryptFileA(LPCSTR); } 
#line 5431
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EncryptFileW(LPCWSTR); } 
#line 5443 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DecryptFileA(LPCSTR, DWORD); } 
#line 5450
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DecryptFileW(LPCWSTR, DWORD); } 
#line 5478 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FileEncryptionStatusA(LPCSTR, LPDWORD); } 
#line 5485
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FileEncryptionStatusW(LPCWSTR, LPDWORD); } 
#line 5503 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { typedef DWORD (__stdcall *PFE_EXPORT_FUNC)(PBYTE, PVOID, ULONG); }
#line 5511
extern "C" { typedef DWORD (__stdcall *PFE_IMPORT_FUNC)(PBYTE, PVOID, PULONG); }
#line 5531
extern "C" { extern __declspec( dllimport ) DWORD __stdcall OpenEncryptedFileRawA(LPCSTR, ULONG, PVOID *); } 
#line 5539
extern "C" { extern __declspec( dllimport ) DWORD __stdcall OpenEncryptedFileRawW(LPCWSTR, ULONG, PVOID *); } 
#line 5553 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall ReadEncryptedFileRaw(PFE_EXPORT_FUNC, PVOID, PVOID); } 
#line 5562
extern "C" { extern __declspec( dllimport ) DWORD __stdcall WriteEncryptedFileRaw(PFE_IMPORT_FUNC, PVOID, PVOID); } 
#line 5571
extern "C" { extern __declspec( dllimport ) void __stdcall CloseEncryptedFileRaw(PVOID); } 
#line 5582
extern "C" { extern __declspec( dllimport ) int __stdcall lstrcmpA(LPCSTR, LPCSTR); } 
#line 5589
extern "C" { extern __declspec( dllimport ) int __stdcall lstrcmpW(LPCWSTR, LPCWSTR); } 
#line 5602 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) int __stdcall lstrcmpiA(LPCSTR, LPCSTR); } 
#line 5609
extern "C" { extern __declspec( dllimport ) int __stdcall lstrcmpiW(LPCWSTR, LPCWSTR); } 
#line 5623 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) LPSTR __stdcall lstrcpynA(LPSTR, LPCSTR, int); } 
#line 5632
extern "C" { extern __declspec( dllimport ) LPWSTR __stdcall lstrcpynW(LPWSTR, LPCWSTR, int); } 
#line 5644 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
#pragma warning(push)
#pragma warning(disable:4995)
#line 5652 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) LPSTR __stdcall lstrcpyA(LPSTR, LPCSTR); } 
#line 5660
extern "C" { extern __declspec( dllimport ) LPWSTR __stdcall lstrcpyW(LPWSTR, LPCWSTR); } 
#line 5674 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) LPSTR __stdcall lstrcatA(LPSTR, LPCSTR); } 
#line 5682
extern "C" { extern __declspec( dllimport ) LPWSTR __stdcall lstrcatW(LPWSTR, LPCWSTR); } 
#line 5693 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
#pragma warning(pop)
#line 5699 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) int __stdcall lstrlenA(LPCSTR); } 
#line 5705
extern "C" { extern __declspec( dllimport ) int __stdcall lstrlenW(LPCWSTR); } 
#line 5717 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) HFILE __stdcall OpenFile(LPCSTR, LPOFSTRUCT, UINT); } 
#line 5726
extern "C" { extern __declspec( dllimport ) HFILE __stdcall _lopen(LPCSTR, int); } 
#line 5734
extern "C" { extern __declspec( dllimport ) HFILE __stdcall _lcreat(LPCSTR, int); } 
#line 5742
extern "C" { extern __declspec( dllimport ) UINT __stdcall _lread(HFILE, LPVOID, UINT); } 
#line 5751
extern "C" { extern __declspec( dllimport ) UINT __stdcall _lwrite(HFILE, LPCCH, UINT); } 
#line 5760
extern "C" { extern __declspec( dllimport ) long __stdcall _hread(HFILE, LPVOID, long); } 
#line 5769
extern "C" { extern __declspec( dllimport ) long __stdcall _hwrite(HFILE, LPCCH, long); } 
#line 5778
extern "C" { extern __declspec( dllimport ) HFILE __stdcall _lclose(HFILE); } 
#line 5785
extern "C" { extern __declspec( dllimport ) LONG __stdcall _llseek(HFILE, LONG, int); } 
#line 5794
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsTextUnicode(const void *, int, LPINT); } 
#line 5805
extern "C" { extern __declspec( dllimport ) DWORD __stdcall FlsAlloc(PFLS_CALLBACK_FUNCTION); } 
#line 5812
extern "C" { extern __declspec( dllimport ) PVOID __stdcall FlsGetValue(DWORD); } 
#line 5819
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FlsSetValue(DWORD, PVOID); } 
#line 5827
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FlsFree(DWORD); } 
#line 5836
extern "C" { extern __declspec( dllimport ) DWORD __stdcall TlsAlloc(); } 
#line 5843
extern "C" { extern __declspec( dllimport ) LPVOID __stdcall TlsGetValue(DWORD); } 
#line 5850
extern "C" { extern __declspec( dllimport ) BOOL __stdcall TlsSetValue(DWORD, LPVOID); } 
#line 5858
extern "C" { extern __declspec( dllimport ) BOOL __stdcall TlsFree(DWORD); } 
#line 5864
extern "C" { typedef void (__stdcall *LPOVERLAPPED_COMPLETION_ROUTINE)(DWORD, DWORD, LPOVERLAPPED); }
#line 5873
extern "C" { extern __declspec( dllimport ) DWORD __stdcall SleepEx(DWORD, BOOL); } 
#line 5881
extern "C" { extern __declspec( dllimport ) DWORD __stdcall WaitForSingleObjectEx(HANDLE, DWORD, BOOL); } 
#line 5890
extern "C" { extern __declspec( dllimport ) DWORD __stdcall WaitForMultipleObjectsEx(DWORD, const HANDLE *, BOOL, DWORD, BOOL); } 
#line 5902
extern "C" { extern __declspec( dllimport ) DWORD __stdcall SignalObjectAndWait(HANDLE, HANDLE, DWORD, BOOL); } 
#line 5913 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ReadFileEx(HANDLE, LPVOID, DWORD, LPOVERLAPPED, LPOVERLAPPED_COMPLETION_ROUTINE); } 
#line 5924
extern "C" { extern __declspec( dllimport ) BOOL __stdcall WriteFileEx(HANDLE, LPCVOID, DWORD, LPOVERLAPPED, LPOVERLAPPED_COMPLETION_ROUTINE); } 
#line 5935
extern "C" { extern __declspec( dllimport ) BOOL __stdcall BackupRead(HANDLE, LPBYTE, DWORD, LPDWORD, BOOL, BOOL, LPVOID *); } 
#line 5948
extern "C" { extern __declspec( dllimport ) BOOL __stdcall BackupSeek(HANDLE, DWORD, DWORD, LPDWORD, LPDWORD, LPVOID *); } 
#line 5960
extern "C" { extern __declspec( dllimport ) BOOL __stdcall BackupWrite(HANDLE, LPBYTE, DWORD, LPDWORD, BOOL, BOOL, LPVOID *); } 
#line 5979
extern "C" { typedef 
#line 5973
struct _WIN32_STREAM_ID { 
DWORD dwStreamId; 
DWORD dwStreamAttributes; 
LARGE_INTEGER Size; 
DWORD dwStreamNameSize; 
WCHAR cStreamName[1]; 
} WIN32_STREAM_ID; }extern "C" { typedef _WIN32_STREAM_ID *LPWIN32_STREAM_ID; }
#line 6011
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ReadFileScatter(HANDLE, FILE_SEGMENT_ELEMENT [], DWORD, LPDWORD, LPOVERLAPPED); } 
#line 6022
extern "C" { extern __declspec( dllimport ) BOOL __stdcall WriteFileGather(HANDLE, FILE_SEGMENT_ELEMENT [], DWORD, LPDWORD, LPOVERLAPPED); } 
#line 6068 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { typedef 
#line 6049
struct _STARTUPINFOA { 
DWORD cb; 
LPSTR lpReserved; 
LPSTR lpDesktop; 
LPSTR lpTitle; 
DWORD dwX; 
DWORD dwY; 
DWORD dwXSize; 
DWORD dwYSize; 
DWORD dwXCountChars; 
DWORD dwYCountChars; 
DWORD dwFillAttribute; 
DWORD dwFlags; 
WORD wShowWindow; 
WORD cbReserved2; 
LPBYTE lpReserved2; 
HANDLE hStdInput; 
HANDLE hStdOutput; 
HANDLE hStdError; 
} STARTUPINFOA; }extern "C" { typedef _STARTUPINFOA *LPSTARTUPINFOA; }
#line 6088
extern "C" { typedef 
#line 6069
struct _STARTUPINFOW { 
DWORD cb; 
LPWSTR lpReserved; 
LPWSTR lpDesktop; 
LPWSTR lpTitle; 
DWORD dwX; 
DWORD dwY; 
DWORD dwXSize; 
DWORD dwYSize; 
DWORD dwXCountChars; 
DWORD dwYCountChars; 
DWORD dwFillAttribute; 
DWORD dwFlags; 
WORD wShowWindow; 
WORD cbReserved2; 
LPBYTE lpReserved2; 
HANDLE hStdInput; 
HANDLE hStdOutput; 
HANDLE hStdError; 
} STARTUPINFOW; }extern "C" { typedef _STARTUPINFOW *LPSTARTUPINFOW; }




extern "C" { typedef STARTUPINFOA STARTUPINFO; }
extern "C" { typedef LPSTARTUPINFOA LPSTARTUPINFO; }
#line 6100 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { typedef 
#line 6097
struct _STARTUPINFOEXA { 
STARTUPINFOA StartupInfo; 
struct _PROC_THREAD_ATTRIBUTE_LIST *lpAttributeList; 
} STARTUPINFOEXA; }extern "C" { typedef _STARTUPINFOEXA *LPSTARTUPINFOEXA; }



extern "C" { typedef 
#line 6101
struct _STARTUPINFOEXW { 
STARTUPINFOW StartupInfo; 
_PROC_THREAD_ATTRIBUTE_LIST *lpAttributeList; 
} STARTUPINFOEXW; }extern "C" { typedef _STARTUPINFOEXW *LPSTARTUPINFOEXW; }




extern "C" { typedef STARTUPINFOEXA STARTUPINFOEX; }
extern "C" { typedef LPSTARTUPINFOEXA LPSTARTUPINFOEX; }
#line 6131 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { typedef 
#line 6115
struct _WIN32_FIND_DATAA { 
DWORD dwFileAttributes; 
FILETIME ftCreationTime; 
FILETIME ftLastAccessTime; 
FILETIME ftLastWriteTime; 
DWORD nFileSizeHigh; 
DWORD nFileSizeLow; 
DWORD dwReserved0; 
DWORD dwReserved1; 
CHAR cFileName[260]; 
CHAR cAlternateFileName[14]; 
#line 6131
} WIN32_FIND_DATAA; }extern "C" { typedef _WIN32_FIND_DATAA *PWIN32_FIND_DATAA; }extern "C" { typedef _WIN32_FIND_DATAA *LPWIN32_FIND_DATAA; }
#line 6148
extern "C" { typedef 
#line 6132
struct _WIN32_FIND_DATAW { 
DWORD dwFileAttributes; 
FILETIME ftCreationTime; 
FILETIME ftLastAccessTime; 
FILETIME ftLastWriteTime; 
DWORD nFileSizeHigh; 
DWORD nFileSizeLow; 
DWORD dwReserved0; 
DWORD dwReserved1; 
WCHAR cFileName[260]; 
WCHAR cAlternateFileName[14]; 
#line 6148
} WIN32_FIND_DATAW; }extern "C" { typedef _WIN32_FIND_DATAW *PWIN32_FIND_DATAW; }extern "C" { typedef _WIN32_FIND_DATAW *LPWIN32_FIND_DATAW; }
#line 6154
extern "C" { typedef WIN32_FIND_DATAA WIN32_FIND_DATA; }
extern "C" { typedef PWIN32_FIND_DATAA PWIN32_FIND_DATA; }
extern "C" { typedef LPWIN32_FIND_DATAA LPWIN32_FIND_DATA; }
#line 6166 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { typedef 
#line 6159
struct _WIN32_FILE_ATTRIBUTE_DATA { 
DWORD dwFileAttributes; 
FILETIME ftCreationTime; 
FILETIME ftLastAccessTime; 
FILETIME ftLastWriteTime; 
DWORD nFileSizeHigh; 
DWORD nFileSizeLow; 
} WIN32_FILE_ATTRIBUTE_DATA; }extern "C" { typedef _WIN32_FILE_ATTRIBUTE_DATA *LPWIN32_FILE_ATTRIBUTE_DATA; }
#line 6176
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateMutexA(LPSECURITY_ATTRIBUTES, BOOL, LPCSTR); } 
#line 6185
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateMutexW(LPSECURITY_ATTRIBUTES, BOOL, LPCWSTR); } 
#line 6200 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall OpenMutexA(DWORD, BOOL, LPCSTR); } 
#line 6209
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall OpenMutexW(DWORD, BOOL, LPCWSTR); } 
#line 6224 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateEventA(LPSECURITY_ATTRIBUTES, BOOL, BOOL, LPCSTR); } 
#line 6234
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateEventW(LPSECURITY_ATTRIBUTES, BOOL, BOOL, LPCWSTR); } 
#line 6250 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall OpenEventA(DWORD, BOOL, LPCSTR); } 
#line 6259
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall OpenEventW(DWORD, BOOL, LPCWSTR); } 
#line 6274 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateSemaphoreA(LPSECURITY_ATTRIBUTES, LONG, LONG, LPCSTR); } 
#line 6284
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateSemaphoreW(LPSECURITY_ATTRIBUTES, LONG, LONG, LPCWSTR); } 
#line 6300 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall OpenSemaphoreA(DWORD, BOOL, LPCSTR); } 
#line 6309
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall OpenSemaphoreW(DWORD, BOOL, LPCWSTR); } 
#line 6323 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { typedef void (__stdcall *PTIMERAPCROUTINE)(LPVOID, DWORD, DWORD); }
#line 6333
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateWaitableTimerA(LPSECURITY_ATTRIBUTES, BOOL, LPCSTR); } 
#line 6342
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateWaitableTimerW(LPSECURITY_ATTRIBUTES, BOOL, LPCWSTR); } 
#line 6357 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall OpenWaitableTimerA(DWORD, BOOL, LPCSTR); } 
#line 6366
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall OpenWaitableTimerW(DWORD, BOOL, LPCWSTR); } 
#line 6380 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetWaitableTimer(HANDLE, const LARGE_INTEGER *, LONG, PTIMERAPCROUTINE, LPVOID, BOOL); } 
#line 6392
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CancelWaitableTimer(HANDLE); } 
#line 6404
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateMutexExA(LPSECURITY_ATTRIBUTES, LPCSTR, DWORD, DWORD); } 
#line 6414
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateMutexExW(LPSECURITY_ATTRIBUTES, LPCWSTR, DWORD, DWORD); } 
#line 6433 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateEventExA(LPSECURITY_ATTRIBUTES, LPCSTR, DWORD, DWORD); } 
#line 6443
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateEventExW(LPSECURITY_ATTRIBUTES, LPCWSTR, DWORD, DWORD); } 
#line 6459 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateSemaphoreExA(LPSECURITY_ATTRIBUTES, LONG, LONG, LPCSTR, DWORD, DWORD); } 
#line 6471
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateSemaphoreExW(LPSECURITY_ATTRIBUTES, LONG, LONG, LPCWSTR, DWORD, DWORD); } 
#line 6491 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateWaitableTimerExA(LPSECURITY_ATTRIBUTES, LPCSTR, DWORD, DWORD); } 
#line 6501
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateWaitableTimerExW(LPSECURITY_ATTRIBUTES, LPCWSTR, DWORD, DWORD); } 
#line 6521 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateFileMappingA(HANDLE, LPSECURITY_ATTRIBUTES, DWORD, DWORD, DWORD, LPCSTR); } 
#line 6533
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateFileMappingW(HANDLE, LPSECURITY_ATTRIBUTES, DWORD, DWORD, DWORD, LPCWSTR); } 
#line 6553 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateFileMappingNumaA(HANDLE, LPSECURITY_ATTRIBUTES, DWORD, DWORD, DWORD, LPCSTR, DWORD); } 
#line 6566
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateFileMappingNumaW(HANDLE, LPSECURITY_ATTRIBUTES, DWORD, DWORD, DWORD, LPCWSTR, DWORD); } 
#line 6587 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall OpenFileMappingA(DWORD, BOOL, LPCSTR); } 
#line 6596
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall OpenFileMappingW(DWORD, BOOL, LPCWSTR); } 
#line 6610 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetLogicalDriveStringsA(DWORD, LPSTR); } 
#line 6617
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetLogicalDriveStringsW(DWORD, LPWSTR); } 
#line 6632 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { typedef 
#line 6629
enum _MEMORY_RESOURCE_NOTIFICATION_TYPE { 
LowMemoryResourceNotification, 
HighMemoryResourceNotification
} MEMORY_RESOURCE_NOTIFICATION_TYPE; }
#line 6638
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateMemoryResourceNotification(MEMORY_RESOURCE_NOTIFICATION_TYPE); } 
#line 6645
extern "C" { extern __declspec( dllimport ) BOOL __stdcall QueryMemoryResourceNotification(HANDLE, PBOOL); } 
#line 6657 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) HMODULE __stdcall LoadLibraryA(LPCSTR); } 
#line 6664
extern "C" { extern __declspec( dllimport ) HMODULE __stdcall LoadLibraryW(LPCWSTR); } 
#line 6677 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) HMODULE __stdcall LoadLibraryExA(LPCSTR, HANDLE, DWORD); } 
#line 6686
extern "C" { extern __declspec( dllimport ) HMODULE __stdcall LoadLibraryExW(LPCWSTR, HANDLE, DWORD); } 
#line 6708 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetModuleFileNameA(HMODULE, LPCH, DWORD); } 
#line 6716
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetModuleFileNameW(HMODULE, LPWCH, DWORD); } 
#line 6731 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) HMODULE __stdcall GetModuleHandleA(LPCSTR); } 
#line 6738
extern "C" { extern __declspec( dllimport ) HMODULE __stdcall GetModuleHandleW(LPCWSTR); } 
#line 6757 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { typedef BOOL (__stdcall *PGET_MODULE_HANDLE_EXA)(DWORD, LPCSTR, HMODULE *); }
#line 6765
extern "C" { typedef BOOL (__stdcall *PGET_MODULE_HANDLE_EXW)(DWORD, LPCWSTR, HMODULE *); }
#line 6779 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetModuleHandleExA(DWORD, LPCSTR, HMODULE *); } 
#line 6787
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetModuleHandleExW(DWORD, LPCWSTR, HMODULE *); } 
#line 6806 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall NeedCurrentDirectoryForExePathA(LPCSTR); } 
#line 6812
extern "C" { extern __declspec( dllimport ) BOOL __stdcall NeedCurrentDirectoryForExePathW(LPCWSTR); } 
#line 6830 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall QueryFullProcessImageNameA(HANDLE, DWORD, LPSTR, PDWORD); } 
#line 6839
extern "C" { extern __declspec( dllimport ) BOOL __stdcall QueryFullProcessImageNameW(HANDLE, DWORD, LPWSTR, PDWORD); } 
#line 6867 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { typedef 
#line 6862
enum _PROC_THREAD_ATTRIBUTE_NUM { 
ProcThreadAttributeParentProcess, 
ProcThreadAttributeExtendedFlags, 
ProcThreadAttributeHandleList, 
ProcThreadAttributeMax
} PROC_THREAD_ATTRIBUTE_NUM; }
#line 6882
extern "C" { typedef _PROC_THREAD_ATTRIBUTE_LIST *PPROC_THREAD_ATTRIBUTE_LIST; }extern "C" { typedef _PROC_THREAD_ATTRIBUTE_LIST *LPPROC_THREAD_ATTRIBUTE_LIST; }
#line 6888
extern "C" { extern __declspec( dllimport ) BOOL __stdcall InitializeProcThreadAttributeList(LPPROC_THREAD_ATTRIBUTE_LIST, DWORD, DWORD, PSIZE_T); } 
#line 6898
extern "C" { extern __declspec( dllimport ) void __stdcall DeleteProcThreadAttributeList(LPPROC_THREAD_ATTRIBUTE_LIST); } 
#line 6907
extern "C" { extern __declspec( dllimport ) BOOL __stdcall UpdateProcThreadAttribute(LPPROC_THREAD_ATTRIBUTE_LIST, DWORD, DWORD_PTR, PVOID, SIZE_T, PVOID, PSIZE_T); } 
#line 6921
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CreateProcessA(LPCSTR, LPSTR, LPSECURITY_ATTRIBUTES, LPSECURITY_ATTRIBUTES, BOOL, DWORD, LPVOID, LPCSTR, LPSTARTUPINFOA, LPPROCESS_INFORMATION); } 
#line 6936
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CreateProcessW(LPCWSTR, LPWSTR, LPSECURITY_ATTRIBUTES, LPSECURITY_ATTRIBUTES, BOOL, DWORD, LPVOID, LPCWSTR, LPSTARTUPINFOW, LPPROCESS_INFORMATION); } 
#line 6959 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetProcessShutdownParameters(DWORD, DWORD); } 
#line 6967
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetProcessShutdownParameters(LPDWORD, LPDWORD); } 
#line 6975
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetProcessVersion(DWORD); } 
#line 6982
extern "C" { extern __declspec( dllimport ) void __stdcall FatalAppExitA(UINT, LPCSTR); } 
#line 6989
extern "C" { extern __declspec( dllimport ) void __stdcall FatalAppExitW(UINT, LPCWSTR); } 
#line 7002 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) void __stdcall GetStartupInfoA(LPSTARTUPINFOA); } 
#line 7008
extern "C" { extern __declspec( dllimport ) void __stdcall GetStartupInfoW(LPSTARTUPINFOW); } 
#line 7021 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) LPSTR __stdcall GetCommandLineA(); } 
#line 7028
extern "C" { extern __declspec( dllimport ) LPWSTR __stdcall GetCommandLineW(); } 
#line 7042 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetEnvironmentVariableA(LPCSTR, LPSTR, DWORD); } 
#line 7052
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetEnvironmentVariableW(LPCWSTR, LPWSTR, DWORD); } 
#line 7066 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetEnvironmentVariableA(LPCSTR, LPCSTR); } 
#line 7073
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetEnvironmentVariableW(LPCWSTR, LPCWSTR); } 
#line 7108 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall ExpandEnvironmentStringsA(LPCSTR, LPSTR, DWORD); } 
#line 7118
extern "C" { extern __declspec( dllimport ) DWORD __stdcall ExpandEnvironmentStringsW(LPCWSTR, LPWSTR, DWORD); } 
#line 7132 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetFirmwareEnvironmentVariableA(LPCSTR, LPCSTR, PVOID, DWORD); } 
#line 7141
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetFirmwareEnvironmentVariableW(LPCWSTR, LPCWSTR, PVOID, DWORD); } 
#line 7156 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetFirmwareEnvironmentVariableA(LPCSTR, LPCSTR, PVOID, DWORD); } 
#line 7165
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetFirmwareEnvironmentVariableW(LPCWSTR, LPCWSTR, PVOID, DWORD); } 
#line 7181 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) void __stdcall OutputDebugStringA(LPCSTR); } 
#line 7187
extern "C" { extern __declspec( dllimport ) void __stdcall OutputDebugStringW(LPCWSTR); } 
#line 7200 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) HRSRC __stdcall FindResourceA(HMODULE, LPCSTR, LPCSTR); } 
#line 7209
extern "C" { extern __declspec( dllimport ) HRSRC __stdcall FindResourceW(HMODULE, LPCWSTR, LPCWSTR); } 
#line 7224 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) HRSRC __stdcall FindResourceExA(HMODULE, LPCSTR, LPCSTR, WORD); } 
#line 7234
extern "C" { extern __declspec( dllimport ) HRSRC __stdcall FindResourceExW(HMODULE, LPCWSTR, LPCWSTR, WORD); } 
#line 7247 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { typedef BOOL (__stdcall *ENUMRESTYPEPROCA)(HMODULE, LPSTR, LONG_PTR); }

extern "C" { typedef BOOL (__stdcall *ENUMRESTYPEPROCW)(HMODULE, LPWSTR, LONG_PTR); }
#line 7256 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { typedef BOOL (__stdcall *ENUMRESNAMEPROCA)(HMODULE, LPCSTR, LPSTR, LONG_PTR); }

extern "C" { typedef BOOL (__stdcall *ENUMRESNAMEPROCW)(HMODULE, LPCWSTR, LPWSTR, LONG_PTR); }
#line 7265 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { typedef BOOL (__stdcall *ENUMRESLANGPROCA)(HMODULE, LPCSTR, LPCSTR, WORD, LONG_PTR); }

extern "C" { typedef BOOL (__stdcall *ENUMRESLANGPROCW)(HMODULE, LPCWSTR, LPCWSTR, WORD, LONG_PTR); }
#line 7301 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumResourceTypesA(HMODULE, ENUMRESTYPEPROCA, LONG_PTR); } 
#line 7309
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumResourceTypesW(HMODULE, ENUMRESTYPEPROCW, LONG_PTR); } 
#line 7323 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumResourceNamesA(HMODULE, LPCSTR, ENUMRESNAMEPROCA, LONG_PTR); } 
#line 7332
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumResourceNamesW(HMODULE, LPCWSTR, ENUMRESNAMEPROCW, LONG_PTR); } 
#line 7347 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumResourceLanguagesA(HMODULE, LPCSTR, LPCSTR, ENUMRESLANGPROCA, LONG_PTR); } 
#line 7357
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumResourceLanguagesW(HMODULE, LPCWSTR, LPCWSTR, ENUMRESLANGPROCW, LONG_PTR); } 
#line 7379 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumResourceTypesExA(HMODULE, ENUMRESTYPEPROCA, LONG_PTR, DWORD, LANGID); } 
#line 7389
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumResourceTypesExW(HMODULE, ENUMRESTYPEPROCW, LONG_PTR, DWORD, LANGID); } 
#line 7406 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumResourceNamesExA(HMODULE, LPCSTR, ENUMRESNAMEPROCA, LONG_PTR, DWORD, LANGID); } 
#line 7417
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumResourceNamesExW(HMODULE, LPCWSTR, ENUMRESNAMEPROCW, LONG_PTR, DWORD, LANGID); } 
#line 7434 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumResourceLanguagesExA(HMODULE, LPCSTR, LPCSTR, ENUMRESLANGPROCA, LONG_PTR, DWORD, LANGID); } 
#line 7446
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumResourceLanguagesExW(HMODULE, LPCWSTR, LPCWSTR, ENUMRESLANGPROCW, LONG_PTR, DWORD, LANGID); } 
#line 7464 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall BeginUpdateResourceA(LPCSTR, BOOL); } 
#line 7471
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall BeginUpdateResourceW(LPCWSTR, BOOL); } 
#line 7484 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall UpdateResourceA(HANDLE, LPCSTR, LPCSTR, WORD, LPVOID, DWORD); } 
#line 7495
extern "C" { extern __declspec( dllimport ) BOOL __stdcall UpdateResourceW(HANDLE, LPCWSTR, LPCWSTR, WORD, LPVOID, DWORD); } 
#line 7512 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EndUpdateResourceA(HANDLE, BOOL); } 
#line 7519
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EndUpdateResourceW(HANDLE, BOOL); } 
#line 7533 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) ATOM __stdcall GlobalAddAtomA(LPCSTR); } 
#line 7539
extern "C" { extern __declspec( dllimport ) ATOM __stdcall GlobalAddAtomW(LPCWSTR); } 
#line 7551 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) ATOM __stdcall GlobalFindAtomA(LPCSTR); } 
#line 7557
extern "C" { extern __declspec( dllimport ) ATOM __stdcall GlobalFindAtomW(LPCWSTR); } 
#line 7569 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) UINT __stdcall GlobalGetAtomNameA(ATOM, LPSTR, int); } 
#line 7577
extern "C" { extern __declspec( dllimport ) UINT __stdcall GlobalGetAtomNameW(ATOM, LPWSTR, int); } 
#line 7591 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) ATOM __stdcall AddAtomA(LPCSTR); } 
#line 7597
extern "C" { extern __declspec( dllimport ) ATOM __stdcall AddAtomW(LPCWSTR); } 
#line 7609 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) ATOM __stdcall FindAtomA(LPCSTR); } 
#line 7615
extern "C" { extern __declspec( dllimport ) ATOM __stdcall FindAtomW(LPCWSTR); } 
#line 7627 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetAtomNameA(ATOM, LPSTR, int); } 
#line 7635
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetAtomNameW(ATOM, LPWSTR, int); } 
#line 7649 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetProfileIntA(LPCSTR, LPCSTR, INT); } 
#line 7657
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetProfileIntW(LPCWSTR, LPCWSTR, INT); } 
#line 7671 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetProfileStringA(LPCSTR, LPCSTR, LPCSTR, LPSTR, DWORD); } 
#line 7681
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetProfileStringW(LPCWSTR, LPCWSTR, LPCWSTR, LPWSTR, DWORD); } 
#line 7697 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall WriteProfileStringA(LPCSTR, LPCSTR, LPCSTR); } 
#line 7705
extern "C" { extern __declspec( dllimport ) BOOL __stdcall WriteProfileStringW(LPCWSTR, LPCWSTR, LPCWSTR); } 
#line 7719 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetProfileSectionA(LPCSTR, LPSTR, DWORD); } 
#line 7727
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetProfileSectionW(LPCWSTR, LPWSTR, DWORD); } 
#line 7741 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall WriteProfileSectionA(LPCSTR, LPCSTR); } 
#line 7748
extern "C" { extern __declspec( dllimport ) BOOL __stdcall WriteProfileSectionW(LPCWSTR, LPCWSTR); } 
#line 7761 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetPrivateProfileIntA(LPCSTR, LPCSTR, INT, LPCSTR); } 
#line 7770
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetPrivateProfileIntW(LPCWSTR, LPCWSTR, INT, LPCWSTR); } 
#line 7785 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetPrivateProfileStringA(LPCSTR, LPCSTR, LPCSTR, LPSTR, DWORD, LPCSTR); } 
#line 7796
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetPrivateProfileStringW(LPCWSTR, LPCWSTR, LPCWSTR, LPWSTR, DWORD, LPCWSTR); } 
#line 7813 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall WritePrivateProfileStringA(LPCSTR, LPCSTR, LPCSTR, LPCSTR); } 
#line 7822
extern "C" { extern __declspec( dllimport ) BOOL __stdcall WritePrivateProfileStringW(LPCWSTR, LPCWSTR, LPCWSTR, LPCWSTR); } 
#line 7837 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetPrivateProfileSectionA(LPCSTR, LPSTR, DWORD, LPCSTR); } 
#line 7846
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetPrivateProfileSectionW(LPCWSTR, LPWSTR, DWORD, LPCWSTR); } 
#line 7861 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall WritePrivateProfileSectionA(LPCSTR, LPCSTR, LPCSTR); } 
#line 7869
extern "C" { extern __declspec( dllimport ) BOOL __stdcall WritePrivateProfileSectionW(LPCWSTR, LPCWSTR, LPCWSTR); } 
#line 7884 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetPrivateProfileSectionNamesA(LPSTR, DWORD, LPCSTR); } 
#line 7892
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetPrivateProfileSectionNamesW(LPWSTR, DWORD, LPCWSTR); } 
#line 7906 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetPrivateProfileStructA(LPCSTR, LPCSTR, LPVOID, UINT, LPCSTR); } 
#line 7916
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetPrivateProfileStructW(LPCWSTR, LPCWSTR, LPVOID, UINT, LPCWSTR); } 
#line 7932 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall WritePrivateProfileStructA(LPCSTR, LPCSTR, LPVOID, UINT, LPCSTR); } 
#line 7942
extern "C" { extern __declspec( dllimport ) BOOL __stdcall WritePrivateProfileStructW(LPCWSTR, LPCWSTR, LPVOID, UINT, LPCWSTR); } 
#line 7959 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetDriveTypeA(LPCSTR); } 
#line 7965
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetDriveTypeW(LPCWSTR); } 
#line 7977 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetSystemDirectoryA(LPSTR, UINT); } 
#line 7984
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetSystemDirectoryW(LPWSTR, UINT); } 
#line 7997 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetTempPathA(DWORD, LPSTR); } 
#line 8004
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetTempPathW(DWORD, LPWSTR); } 
#line 8017 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetTempFileNameA(LPCSTR, LPCSTR, UINT, LPSTR); } 
#line 8026
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetTempFileNameW(LPCWSTR, LPCWSTR, UINT, LPWSTR); } 
#line 8065 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetWindowsDirectoryA(LPSTR, UINT); } 
#line 8072
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetWindowsDirectoryW(LPWSTR, UINT); } 
#line 8085 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetSystemWindowsDirectoryA(LPSTR, UINT); } 
#line 8092
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetSystemWindowsDirectoryW(LPWSTR, UINT); } 
#line 8108 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetSystemWow64DirectoryA(LPSTR, UINT); } 
#line 8115
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetSystemWow64DirectoryW(LPWSTR, UINT); } 
#line 8128 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOLEAN __stdcall Wow64EnableWow64FsRedirection(BOOLEAN); } 
#line 8135
extern "C" { extern __declspec( dllimport ) BOOL __stdcall Wow64DisableWow64FsRedirection(PVOID *); } 
#line 8142
extern "C" { extern __declspec( dllimport ) BOOL __stdcall Wow64RevertWow64FsRedirection(PVOID); } 
#line 8150
extern "C" { typedef UINT (__stdcall *PGET_SYSTEM_WOW64_DIRECTORY_A)(LPSTR, UINT); }
extern "C" { typedef UINT (__stdcall *PGET_SYSTEM_WOW64_DIRECTORY_W)(LPWSTR, UINT); }
#line 8181 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetCurrentDirectoryA(LPCSTR); } 
#line 8187
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetCurrentDirectoryW(LPCWSTR); } 
#line 8217 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetCurrentDirectoryA(DWORD, LPSTR); } 
#line 8224
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetCurrentDirectoryW(DWORD, LPWSTR); } 
#line 8239 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetDllDirectoryA(LPCSTR); } 
#line 8245
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetDllDirectoryW(LPCWSTR); } 
#line 8257 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetDllDirectoryA(DWORD, LPSTR); } 
#line 8264
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetDllDirectoryW(DWORD, LPWSTR); } 
#line 8279 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetDiskFreeSpaceA(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD); } 
#line 8289
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetDiskFreeSpaceW(LPCWSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD); } 
#line 8305 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetDiskFreeSpaceExA(LPCSTR, PULARGE_INTEGER, PULARGE_INTEGER, PULARGE_INTEGER); } 
#line 8314
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetDiskFreeSpaceExW(LPCWSTR, PULARGE_INTEGER, PULARGE_INTEGER, PULARGE_INTEGER); } 
#line 8329 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CreateDirectoryA(LPCSTR, LPSECURITY_ATTRIBUTES); } 
#line 8336
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CreateDirectoryW(LPCWSTR, LPSECURITY_ATTRIBUTES); } 
#line 8369 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CreateDirectoryExA(LPCSTR, LPCSTR, LPSECURITY_ATTRIBUTES); } 
#line 8377
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CreateDirectoryExW(LPCWSTR, LPCWSTR, LPSECURITY_ATTRIBUTES); } 
#line 8393 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CreateDirectoryTransactedA(LPCSTR, LPCSTR, LPSECURITY_ATTRIBUTES, HANDLE); } 
#line 8402
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CreateDirectoryTransactedW(LPCWSTR, LPCWSTR, LPSECURITY_ATTRIBUTES, HANDLE); } 
#line 8419 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall RemoveDirectoryA(LPCSTR); } 
#line 8425
extern "C" { extern __declspec( dllimport ) BOOL __stdcall RemoveDirectoryW(LPCWSTR); } 
#line 8439 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall RemoveDirectoryTransactedA(LPCSTR, HANDLE); } 
#line 8446
extern "C" { extern __declspec( dllimport ) BOOL __stdcall RemoveDirectoryTransactedW(LPCWSTR, HANDLE); } 
#line 8461 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetFullPathNameA(LPCSTR, DWORD, LPSTR, LPSTR *); } 
#line 8470
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetFullPathNameW(LPCWSTR, DWORD, LPWSTR, LPWSTR *); } 
#line 8486 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetFullPathNameTransactedA(LPCSTR, DWORD, LPSTR, LPSTR *, HANDLE); } 
#line 8496
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetFullPathNameTransactedW(LPCWSTR, DWORD, LPWSTR, LPWSTR *, HANDLE); } 
#line 8520 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DefineDosDeviceA(DWORD, LPCSTR, LPCSTR); } 
#line 8528
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DefineDosDeviceW(DWORD, LPCWSTR, LPCWSTR); } 
#line 8542 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall QueryDosDeviceA(LPCSTR, LPSTR, DWORD); } 
#line 8550
extern "C" { extern __declspec( dllimport ) DWORD __stdcall QueryDosDeviceW(LPCWSTR, LPWSTR, DWORD); } 
#line 8567 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateFileA(LPCSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES, DWORD, DWORD, HANDLE); } 
#line 8580
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateFileW(LPCWSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES, DWORD, DWORD, HANDLE); } 
#line 8601 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateFileTransactedA(LPCSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES, DWORD, DWORD, HANDLE, HANDLE, PUSHORT, PVOID); } 
#line 8617
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateFileTransactedW(LPCWSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES, DWORD, DWORD, HANDLE, HANDLE, PUSHORT, PVOID); } 
#line 8644 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall ReOpenFile(HANDLE, DWORD, DWORD, DWORD); } 
#line 8656 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetFileAttributesA(LPCSTR, DWORD); } 
#line 8663
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetFileAttributesW(LPCWSTR, DWORD); } 
#line 8676 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetFileAttributesA(LPCSTR); } 
#line 8682
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetFileAttributesW(LPCWSTR); } 
#line 8696 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetFileAttributesTransactedA(LPCSTR, DWORD, HANDLE); } 
#line 8704
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetFileAttributesTransactedW(LPCWSTR, DWORD, HANDLE); } 
#line 8720 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { typedef 
#line 8717
enum _GET_FILEEX_INFO_LEVELS { 
GetFileExInfoStandard, 
GetFileExMaxInfoLevel
} GET_FILEEX_INFO_LEVELS; }
#line 8727
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetFileAttributesTransactedA(LPCSTR, GET_FILEEX_INFO_LEVELS, LPVOID, HANDLE); } 
#line 8736
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetFileAttributesTransactedW(LPCWSTR, GET_FILEEX_INFO_LEVELS, LPVOID, HANDLE); } 
#line 8753 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetFileAttributesExA(LPCSTR, GET_FILEEX_INFO_LEVELS, LPVOID); } 
#line 8761
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetFileAttributesExW(LPCWSTR, GET_FILEEX_INFO_LEVELS, LPVOID); } 
#line 8775 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetCompressedFileSizeA(LPCSTR, LPDWORD); } 
#line 8782
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetCompressedFileSizeW(LPCWSTR, LPDWORD); } 
#line 8797 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetCompressedFileSizeTransactedA(LPCSTR, LPDWORD, HANDLE); } 
#line 8805
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetCompressedFileSizeTransactedW(LPCWSTR, LPDWORD, HANDLE); } 
#line 8821 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DeleteFileA(LPCSTR); } 
#line 8827
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DeleteFileW(LPCWSTR); } 
#line 8841 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DeleteFileTransactedA(LPCSTR, HANDLE); } 
#line 8848
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DeleteFileTransactedW(LPCWSTR, HANDLE); } 
#line 8884 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CheckNameLegalDOS8Dot3A(LPCSTR, LPSTR, DWORD, PBOOL, PBOOL); } 
#line 8894
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CheckNameLegalDOS8Dot3W(LPCWSTR, LPSTR, DWORD, PBOOL, PBOOL); } 
#line 8913 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { typedef 
#line 8910
enum _FINDEX_INFO_LEVELS { 
FindExInfoStandard, 
FindExInfoMaxInfoLevel
} FINDEX_INFO_LEVELS; }
#line 8920
extern "C" { typedef 
#line 8915
enum _FINDEX_SEARCH_OPS { 
FindExSearchNameMatch, 
FindExSearchLimitToDirectories, 
FindExSearchLimitToDevices, 
FindExSearchMaxSearchOp
} FINDEX_SEARCH_OPS; }
#line 8928
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall FindFirstFileExA(LPCSTR, FINDEX_INFO_LEVELS, LPVOID, FINDEX_SEARCH_OPS, LPVOID, DWORD); } 
#line 8940
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall FindFirstFileExW(LPCWSTR, FINDEX_INFO_LEVELS, LPVOID, FINDEX_SEARCH_OPS, LPVOID, DWORD); } 
#line 8960 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall FindFirstFileTransactedA(LPCSTR, FINDEX_INFO_LEVELS, LPVOID, FINDEX_SEARCH_OPS, LPVOID, DWORD, HANDLE); } 
#line 8973
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall FindFirstFileTransactedW(LPCWSTR, FINDEX_INFO_LEVELS, LPVOID, FINDEX_SEARCH_OPS, LPVOID, DWORD, HANDLE); } 
#line 8996 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall FindFirstFileA(LPCSTR, LPWIN32_FIND_DATAA); } 
#line 9004
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall FindFirstFileW(LPCWSTR, LPWIN32_FIND_DATAW); } 
#line 9017 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FindNextFileA(HANDLE, LPWIN32_FIND_DATAA); } 
#line 9024
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FindNextFileW(HANDLE, LPWIN32_FIND_DATAW); } 
#line 9038 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall SearchPathA(LPCSTR, LPCSTR, LPCSTR, DWORD, LPSTR, LPSTR *); } 
#line 9049
extern "C" { extern __declspec( dllimport ) DWORD __stdcall SearchPathW(LPCWSTR, LPCWSTR, LPCWSTR, DWORD, LPWSTR, LPWSTR *); } 
#line 9066 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CopyFileA(LPCSTR, LPCSTR, BOOL); } 
#line 9074
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CopyFileW(LPCWSTR, LPCWSTR, BOOL); } 
#line 9110 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { typedef DWORD (__stdcall *LPPROGRESS_ROUTINE)(LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, DWORD, DWORD, HANDLE, HANDLE, LPVOID); }
#line 9125
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CopyFileExA(LPCSTR, LPCSTR, LPPROGRESS_ROUTINE, LPVOID, LPBOOL, DWORD); } 
#line 9136
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CopyFileExW(LPCWSTR, LPCWSTR, LPPROGRESS_ROUTINE, LPVOID, LPBOOL, DWORD); } 
#line 9155 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CopyFileTransactedA(LPCSTR, LPCSTR, LPPROGRESS_ROUTINE, LPVOID, LPBOOL, DWORD, HANDLE); } 
#line 9167
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CopyFileTransactedW(LPCWSTR, LPCWSTR, LPPROGRESS_ROUTINE, LPVOID, LPBOOL, DWORD, HANDLE); } 
#line 9188 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall MoveFileA(LPCSTR, LPCSTR); } 
#line 9195
extern "C" { extern __declspec( dllimport ) BOOL __stdcall MoveFileW(LPCWSTR, LPCWSTR); } 
#line 9228 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall MoveFileExA(LPCSTR, LPCSTR, DWORD); } 
#line 9236
extern "C" { extern __declspec( dllimport ) BOOL __stdcall MoveFileExW(LPCWSTR, LPCWSTR, DWORD); } 
#line 9251 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall MoveFileWithProgressA(LPCSTR, LPCSTR, LPPROGRESS_ROUTINE, LPVOID, DWORD); } 
#line 9261
extern "C" { extern __declspec( dllimport ) BOOL __stdcall MoveFileWithProgressW(LPCWSTR, LPCWSTR, LPPROGRESS_ROUTINE, LPVOID, DWORD); } 
#line 9279 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall MoveFileTransactedA(LPCSTR, LPCSTR, LPPROGRESS_ROUTINE, LPVOID, DWORD, HANDLE); } 
#line 9290
extern "C" { extern __declspec( dllimport ) BOOL __stdcall MoveFileTransactedW(LPCWSTR, LPCWSTR, LPPROGRESS_ROUTINE, LPVOID, DWORD, HANDLE); } 
#line 9320 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ReplaceFileA(LPCSTR, LPCSTR, LPCSTR, DWORD, LPVOID, LPVOID); } 
#line 9331
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ReplaceFileW(LPCWSTR, LPCWSTR, LPCWSTR, DWORD, LPVOID, LPVOID); } 
#line 9355 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CreateHardLinkA(LPCSTR, LPCSTR, LPSECURITY_ATTRIBUTES); } 
#line 9363
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CreateHardLinkW(LPCWSTR, LPCWSTR, LPSECURITY_ATTRIBUTES); } 
#line 9384 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CreateHardLinkTransactedA(LPCSTR, LPCSTR, LPSECURITY_ATTRIBUTES, HANDLE); } 
#line 9393
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CreateHardLinkTransactedW(LPCWSTR, LPCWSTR, LPSECURITY_ATTRIBUTES, HANDLE); } 
#line 9419 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { typedef 
#line 9414
enum _STREAM_INFO_LEVELS { 

FindStreamInfoStandard, 
FindStreamInfoMaxInfoLevel

} STREAM_INFO_LEVELS; }
#line 9426
extern "C" { typedef 
#line 9421
struct _WIN32_FIND_STREAM_DATA { 

LARGE_INTEGER StreamSize; 
WCHAR cStreamName[(260 + 36)]; 

} WIN32_FIND_STREAM_DATA; }extern "C" { typedef _WIN32_FIND_STREAM_DATA *PWIN32_FIND_STREAM_DATA; }




extern "C" { extern HANDLE __stdcall FindFirstStreamW(LPCWSTR, STREAM_INFO_LEVELS, LPVOID, DWORD); } 
#line 9440
extern "C" { extern BOOL __stdcall FindNextStreamW(HANDLE, LPVOID); } 
#line 9450 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern HANDLE __stdcall FindFirstFileNameW(LPCWSTR, DWORD, LPDWORD, PWCHAR); } 
#line 9459
extern "C" { extern BOOL __stdcall FindNextFileNameW(HANDLE, LPDWORD, PWCHAR); } 
#line 9467
extern "C" { extern HANDLE __stdcall FindFirstFileNameTransactedW(LPCWSTR, DWORD, LPDWORD, PWCHAR, HANDLE); } 
#line 9482 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateNamedPipeA(LPCSTR, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, LPSECURITY_ATTRIBUTES); } 
#line 9496
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateNamedPipeW(LPCWSTR, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, LPSECURITY_ATTRIBUTES); } 
#line 9515 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetNamedPipeHandleStateA(HANDLE, LPDWORD, LPDWORD, LPDWORD, LPDWORD, LPSTR, DWORD); } 
#line 9527
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetNamedPipeHandleStateW(HANDLE, LPDWORD, LPDWORD, LPDWORD, LPDWORD, LPWSTR, DWORD); } 
#line 9545 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CallNamedPipeA(LPCSTR, LPVOID, DWORD, LPVOID, DWORD, LPDWORD, DWORD); } 
#line 9557
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CallNamedPipeW(LPCWSTR, LPVOID, DWORD, LPVOID, DWORD, LPDWORD, DWORD); } 
#line 9575 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall WaitNamedPipeA(LPCSTR, DWORD); } 
#line 9582
extern "C" { extern __declspec( dllimport ) BOOL __stdcall WaitNamedPipeW(LPCWSTR, DWORD); } 
#line 9596 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { typedef 
#line 9592
enum { 
PipeAttribute, 
PipeConnectionAttribute, 
PipeHandleAttribute
} PIPE_ATTRIBUTE_TYPE; }




extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetNamedPipeAttribute(HANDLE, PIPE_ATTRIBUTE_TYPE, PSTR, PVOID, PSIZE_T); } 
#line 9612
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetNamedPipeAttribute(HANDLE, PIPE_ATTRIBUTE_TYPE, PSTR, PVOID, SIZE_T); } 
#line 9623
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetNamedPipeClientComputerNameA(HANDLE, LPSTR, ULONG); } 
#line 9631
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetNamedPipeClientComputerNameW(HANDLE, LPWSTR, ULONG); } 
#line 9645 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetNamedPipeClientProcessId(HANDLE, PULONG); } 
#line 9653
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetNamedPipeClientSessionId(HANDLE, PULONG); } 
#line 9661
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetNamedPipeServerProcessId(HANDLE, PULONG); } 
#line 9669
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetNamedPipeServerSessionId(HANDLE, PULONG); } 
#line 9677
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetVolumeLabelA(LPCSTR, LPCSTR); } 
#line 9684
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetVolumeLabelW(LPCWSTR, LPCWSTR); } 
#line 9697 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) void __stdcall SetFileApisToOEM(); } 




extern "C" { extern __declspec( dllimport ) void __stdcall SetFileApisToANSI(); } 




extern "C" { extern __declspec( dllimport ) BOOL __stdcall AreFileApisANSI(); } 




extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetVolumeInformationA(LPCSTR, LPSTR, DWORD, LPDWORD, LPDWORD, LPDWORD, LPSTR, DWORD); } 
#line 9725
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetVolumeInformationW(LPCWSTR, LPWSTR, DWORD, LPDWORD, LPDWORD, LPDWORD, LPWSTR, DWORD); } 
#line 9745 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetVolumeInformationByHandleW(HANDLE, LPWSTR, DWORD, LPDWORD, LPDWORD, LPDWORD, LPWSTR, DWORD); } 
#line 9760 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CancelSynchronousIo(HANDLE); } 
#line 9767
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CancelIoEx(HANDLE, LPOVERLAPPED); } 
#line 9775
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CancelIo(HANDLE); } 
#line 9782
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetFileBandwidthReservation(HANDLE, DWORD, DWORD, BOOL, LPDWORD, LPDWORD); } 
#line 9794
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetFileBandwidthReservation(HANDLE, LPDWORD, LPDWORD, LPBOOL, LPDWORD, LPDWORD); } 
#line 9810
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ClearEventLogA(HANDLE, LPCSTR); } 
#line 9817
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ClearEventLogW(HANDLE, LPCWSTR); } 
#line 9830 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall BackupEventLogA(HANDLE, LPCSTR); } 
#line 9837
extern "C" { extern __declspec( dllimport ) BOOL __stdcall BackupEventLogW(HANDLE, LPCWSTR); } 
#line 9850 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CloseEventLog(HANDLE); } 
#line 9857
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DeregisterEventSource(HANDLE); } 
#line 9864
extern "C" { extern __declspec( dllimport ) BOOL __stdcall NotifyChangeEventLog(HANDLE, HANDLE); } 
#line 9872
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetNumberOfEventLogRecords(HANDLE, PDWORD); } 
#line 9880
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetOldestEventLogRecord(HANDLE, PDWORD); } 
#line 9889
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall OpenEventLogA(LPCSTR, LPCSTR); } 
#line 9897
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall OpenEventLogW(LPCWSTR, LPCWSTR); } 
#line 9911 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall RegisterEventSourceA(LPCSTR, LPCSTR); } 
#line 9919
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall RegisterEventSourceW(LPCWSTR, LPCWSTR); } 
#line 9933 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall OpenBackupEventLogA(LPCSTR, LPCSTR); } 
#line 9941
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall OpenBackupEventLogW(LPCWSTR, LPCWSTR); } 
#line 9954 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ReadEventLogA(HANDLE, DWORD, DWORD, LPVOID, DWORD, DWORD *, DWORD *); } 
#line 9966
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ReadEventLogW(HANDLE, DWORD, DWORD, LPVOID, DWORD, DWORD *, DWORD *); } 
#line 9984 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ReportEventA(HANDLE, WORD, WORD, DWORD, PSID, WORD, DWORD, LPCSTR *, LPVOID); } 
#line 9998
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ReportEventW(HANDLE, WORD, WORD, DWORD, PSID, WORD, DWORD, LPCWSTR *, LPVOID); } 
#line 10022 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { typedef 
#line 10018
struct _EVENTLOG_FULL_INFORMATION { 

DWORD dwFull; 

} EVENTLOG_FULL_INFORMATION; }extern "C" { typedef _EVENTLOG_FULL_INFORMATION *LPEVENTLOG_FULL_INFORMATION; }




extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetEventLogInformation(HANDLE, DWORD, LPVOID, DWORD, LPDWORD); } 
#line 10044
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DuplicateToken(HANDLE, SECURITY_IMPERSONATION_LEVEL, PHANDLE); } 
#line 10053
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetKernelObjectSecurity(HANDLE, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR, DWORD, LPDWORD); } 
#line 10064
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ImpersonateNamedPipeClient(HANDLE); } 
#line 10071
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ImpersonateSelf(SECURITY_IMPERSONATION_LEVEL); } 
#line 10079
extern "C" { extern __declspec( dllimport ) BOOL __stdcall RevertToSelf(); } 
#line 10086
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetThreadToken(PHANDLE, HANDLE); } 
#line 10094
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AccessCheck(PSECURITY_DESCRIPTOR, HANDLE, DWORD, PGENERIC_MAPPING, PPRIVILEGE_SET, LPDWORD, LPDWORD, LPBOOL); } 
#line 10109
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AccessCheckByType(PSECURITY_DESCRIPTOR, PSID, HANDLE, DWORD, POBJECT_TYPE_LIST, DWORD, PGENERIC_MAPPING, PPRIVILEGE_SET, LPDWORD, LPDWORD, LPBOOL); } 
#line 10126
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AccessCheckByTypeResultList(PSECURITY_DESCRIPTOR, PSID, HANDLE, DWORD, POBJECT_TYPE_LIST, DWORD, PGENERIC_MAPPING, PPRIVILEGE_SET, LPDWORD, LPDWORD, LPDWORD); } 
#line 10145 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall OpenProcessToken(HANDLE, DWORD, PHANDLE); } 
#line 10155
extern "C" { extern __declspec( dllimport ) BOOL __stdcall OpenThreadToken(HANDLE, DWORD, BOOL, PHANDLE); } 
#line 10166
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetTokenInformation(HANDLE, TOKEN_INFORMATION_CLASS, LPVOID, DWORD, PDWORD); } 
#line 10178
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetTokenInformation(HANDLE, TOKEN_INFORMATION_CLASS, LPVOID, DWORD); } 
#line 10189
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AdjustTokenPrivileges(HANDLE, BOOL, PTOKEN_PRIVILEGES, DWORD, PTOKEN_PRIVILEGES, PDWORD); } 
#line 10202
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AdjustTokenGroups(HANDLE, BOOL, PTOKEN_GROUPS, DWORD, PTOKEN_GROUPS, PDWORD); } 
#line 10215
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PrivilegeCheck(HANDLE, PPRIVILEGE_SET, LPBOOL); } 
#line 10225
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AccessCheckAndAuditAlarmA(LPCSTR, LPVOID, LPSTR, LPSTR, PSECURITY_DESCRIPTOR, DWORD, PGENERIC_MAPPING, BOOL, LPDWORD, LPBOOL, LPBOOL); } 
#line 10241
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AccessCheckAndAuditAlarmW(LPCWSTR, LPVOID, LPWSTR, LPWSTR, PSECURITY_DESCRIPTOR, DWORD, PGENERIC_MAPPING, BOOL, LPDWORD, LPBOOL, LPBOOL); } 
#line 10265 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AccessCheckByTypeAndAuditAlarmA(LPCSTR, LPVOID, LPCSTR, LPCSTR, PSECURITY_DESCRIPTOR, PSID, DWORD, AUDIT_EVENT_TYPE, DWORD, POBJECT_TYPE_LIST, DWORD, PGENERIC_MAPPING, BOOL, LPDWORD, LPBOOL, LPBOOL); } 
#line 10286
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AccessCheckByTypeAndAuditAlarmW(LPCWSTR, LPVOID, LPCWSTR, LPCWSTR, PSECURITY_DESCRIPTOR, PSID, DWORD, AUDIT_EVENT_TYPE, DWORD, POBJECT_TYPE_LIST, DWORD, PGENERIC_MAPPING, BOOL, LPDWORD, LPBOOL, LPBOOL); } 
#line 10313 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AccessCheckByTypeResultListAndAuditAlarmA(LPCSTR, LPVOID, LPCSTR, LPCSTR, PSECURITY_DESCRIPTOR, PSID, DWORD, AUDIT_EVENT_TYPE, DWORD, POBJECT_TYPE_LIST, DWORD, PGENERIC_MAPPING, BOOL, LPDWORD, LPDWORD, LPBOOL); } 
#line 10334
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AccessCheckByTypeResultListAndAuditAlarmW(LPCWSTR, LPVOID, LPCWSTR, LPCWSTR, PSECURITY_DESCRIPTOR, PSID, DWORD, AUDIT_EVENT_TYPE, DWORD, POBJECT_TYPE_LIST, DWORD, PGENERIC_MAPPING, BOOL, LPDWORD, LPDWORD, LPBOOL); } 
#line 10361 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AccessCheckByTypeResultListAndAuditAlarmByHandleA(LPCSTR, LPVOID, HANDLE, LPCSTR, LPCSTR, PSECURITY_DESCRIPTOR, PSID, DWORD, AUDIT_EVENT_TYPE, DWORD, POBJECT_TYPE_LIST, DWORD, PGENERIC_MAPPING, BOOL, LPDWORD, LPDWORD, LPBOOL); } 
#line 10383
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AccessCheckByTypeResultListAndAuditAlarmByHandleW(LPCWSTR, LPVOID, HANDLE, LPCWSTR, LPCWSTR, PSECURITY_DESCRIPTOR, PSID, DWORD, AUDIT_EVENT_TYPE, DWORD, POBJECT_TYPE_LIST, DWORD, PGENERIC_MAPPING, BOOL, LPDWORD, LPDWORD, LPBOOL); } 
#line 10413 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ObjectOpenAuditAlarmA(LPCSTR, LPVOID, LPSTR, LPSTR, PSECURITY_DESCRIPTOR, HANDLE, DWORD, DWORD, PPRIVILEGE_SET, BOOL, BOOL, LPBOOL); } 
#line 10430
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ObjectOpenAuditAlarmW(LPCWSTR, LPVOID, LPWSTR, LPWSTR, PSECURITY_DESCRIPTOR, HANDLE, DWORD, DWORD, PPRIVILEGE_SET, BOOL, BOOL, LPBOOL); } 
#line 10454 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ObjectPrivilegeAuditAlarmA(LPCSTR, LPVOID, HANDLE, DWORD, PPRIVILEGE_SET, BOOL); } 
#line 10465
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ObjectPrivilegeAuditAlarmW(LPCWSTR, LPVOID, HANDLE, DWORD, PPRIVILEGE_SET, BOOL); } 
#line 10483 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ObjectCloseAuditAlarmA(LPCSTR, LPVOID, BOOL); } 
#line 10491
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ObjectCloseAuditAlarmW(LPCWSTR, LPVOID, BOOL); } 
#line 10506 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ObjectDeleteAuditAlarmA(LPCSTR, LPVOID, BOOL); } 
#line 10514
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ObjectDeleteAuditAlarmW(LPCWSTR, LPVOID, BOOL); } 
#line 10529 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PrivilegedServiceAuditAlarmA(LPCSTR, LPCSTR, HANDLE, PPRIVILEGE_SET, BOOL); } 
#line 10539
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PrivilegedServiceAuditAlarmW(LPCWSTR, LPCWSTR, HANDLE, PPRIVILEGE_SET, BOOL); } 
#line 10560 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsWellKnownSid(PSID, WELL_KNOWN_SID_TYPE); } 
#line 10568
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CreateWellKnownSid(WELL_KNOWN_SID_TYPE, PSID, PSID, DWORD *); } 
#line 10578
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EqualDomainSid(PSID, PSID, BOOL *); } 
#line 10587
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetWindowsAccountDomainSid(PSID, PSID, DWORD *); } 
#line 10598 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsValidSid(PSID); } 
#line 10606
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EqualSid(PSID, PSID); } 
#line 10615
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EqualPrefixSid(PSID, PSID); } 
#line 10624
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetSidLengthRequired(UCHAR); } 
#line 10632
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AllocateAndInitializeSid(PSID_IDENTIFIER_AUTHORITY, BYTE, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, PSID *); } 
#line 10649
extern "C" { extern __declspec( dllimport ) PVOID __stdcall FreeSid(PSID); } 
#line 10656
extern "C" { extern __declspec( dllimport ) BOOL __stdcall InitializeSid(PSID, PSID_IDENTIFIER_AUTHORITY, BYTE); } 
#line 10667
extern "C" { extern __declspec( dllimport ) PSID_IDENTIFIER_AUTHORITY __stdcall GetSidIdentifierAuthority(PSID); } 
#line 10676
extern "C" { extern __declspec( dllimport ) PDWORD __stdcall GetSidSubAuthority(PSID, DWORD); } 
#line 10686
extern "C" { extern __declspec( dllimport ) PUCHAR __stdcall GetSidSubAuthorityCount(PSID); } 
#line 10694
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetLengthSid(PSID); } 
#line 10702
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CopySid(DWORD, PSID, PSID); } 
#line 10712
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AreAllAccessesGranted(DWORD, DWORD); } 
#line 10721
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AreAnyAccessesGranted(DWORD, DWORD); } 
#line 10730
extern "C" { extern __declspec( dllimport ) void __stdcall MapGenericMask(PDWORD, PGENERIC_MAPPING); } 
#line 10739
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsValidAcl(PACL); } 
#line 10747
extern "C" { extern __declspec( dllimport ) BOOL __stdcall InitializeAcl(PACL, DWORD, DWORD); } 
#line 10757
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetAclInformation(PACL, LPVOID, DWORD, ACL_INFORMATION_CLASS); } 
#line 10768
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetAclInformation(PACL, LPVOID, DWORD, ACL_INFORMATION_CLASS); } 
#line 10779
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AddAce(PACL, DWORD, DWORD, LPVOID, DWORD); } 
#line 10791
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DeleteAce(PACL, DWORD); } 
#line 10800
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetAce(PACL, DWORD, LPVOID *); } 
#line 10810
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AddAccessAllowedAce(PACL, DWORD, DWORD, PSID); } 
#line 10821
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AddAccessAllowedAceEx(PACL, DWORD, DWORD, DWORD, PSID); } 
#line 10834 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AddMandatoryAce(PACL, DWORD, DWORD, DWORD, PSID); } 
#line 10846 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AddAccessDeniedAce(PACL, DWORD, DWORD, PSID); } 
#line 10857
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AddAccessDeniedAceEx(PACL, DWORD, DWORD, DWORD, PSID); } 
#line 10869 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AddAuditAccessAce(PACL, DWORD, DWORD, PSID, BOOL, BOOL); } 
#line 10882
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AddAuditAccessAceEx(PACL, DWORD, DWORD, DWORD, PSID, BOOL, BOOL); } 
#line 10895
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AddAccessAllowedObjectAce(PACL, DWORD, DWORD, DWORD, GUID *, GUID *, PSID); } 
#line 10908
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AddAccessDeniedObjectAce(PACL, DWORD, DWORD, DWORD, GUID *, GUID *, PSID); } 
#line 10921
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AddAuditAccessObjectAce(PACL, DWORD, DWORD, DWORD, GUID *, GUID *, PSID, BOOL, BOOL); } 
#line 10937 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FindFirstFreeAce(PACL, LPVOID *); } 
#line 10946
extern "C" { extern __declspec( dllimport ) BOOL __stdcall InitializeSecurityDescriptor(PSECURITY_DESCRIPTOR, DWORD); } 
#line 10955
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsValidSecurityDescriptor(PSECURITY_DESCRIPTOR); } 
#line 10962
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsValidRelativeSecurityDescriptor(PSECURITY_DESCRIPTOR, ULONG, SECURITY_INFORMATION); } 
#line 10971
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetSecurityDescriptorLength(PSECURITY_DESCRIPTOR); } 
#line 10979
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetSecurityDescriptorControl(PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR_CONTROL, LPDWORD); } 
#line 10989
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetSecurityDescriptorControl(PSECURITY_DESCRIPTOR, SECURITY_DESCRIPTOR_CONTROL, SECURITY_DESCRIPTOR_CONTROL); } 
#line 10999 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR, BOOL, PACL, BOOL); } 
#line 11010
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR, LPBOOL, PACL *, LPBOOL); } 
#line 11021
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetSecurityDescriptorSacl(PSECURITY_DESCRIPTOR, BOOL, PACL, BOOL); } 
#line 11032
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetSecurityDescriptorSacl(PSECURITY_DESCRIPTOR, LPBOOL, PACL *, LPBOOL); } 
#line 11043
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetSecurityDescriptorOwner(PSECURITY_DESCRIPTOR, PSID, BOOL); } 
#line 11053
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetSecurityDescriptorOwner(PSECURITY_DESCRIPTOR, PSID *, LPBOOL); } 
#line 11063
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetSecurityDescriptorGroup(PSECURITY_DESCRIPTOR, PSID, BOOL); } 
#line 11073
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetSecurityDescriptorGroup(PSECURITY_DESCRIPTOR, PSID *, LPBOOL); } 
#line 11083
extern "C" { extern __declspec( dllimport ) DWORD __stdcall SetSecurityDescriptorRMControl(PSECURITY_DESCRIPTOR, PUCHAR); } 
#line 11091
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetSecurityDescriptorRMControl(PSECURITY_DESCRIPTOR, PUCHAR); } 
#line 11099
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CreatePrivateObjectSecurity(PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR *, BOOL, HANDLE, PGENERIC_MAPPING); } 
#line 11112
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ConvertToAutoInheritPrivateObjectSecurity(PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR *, GUID *, BOOLEAN, PGENERIC_MAPPING); } 
#line 11124
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CreatePrivateObjectSecurityEx(PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR *, GUID *, BOOL, ULONG, HANDLE, PGENERIC_MAPPING); } 
#line 11138
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CreatePrivateObjectSecurityWithMultipleInheritance(PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR *, GUID **, ULONG, BOOL, ULONG, HANDLE, PGENERIC_MAPPING); } 
#line 11154 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetPrivateObjectSecurity(SECURITY_INFORMATION, PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR *, PGENERIC_MAPPING, HANDLE); } 
#line 11166
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetPrivateObjectSecurityEx(SECURITY_INFORMATION, PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR *, ULONG, PGENERIC_MAPPING, HANDLE); } 
#line 11179 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetPrivateObjectSecurity(PSECURITY_DESCRIPTOR, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR, DWORD, PDWORD); } 
#line 11191
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DestroyPrivateObjectSecurity(PSECURITY_DESCRIPTOR *); } 
#line 11199
extern "C" { extern __declspec( dllimport ) BOOL __stdcall MakeSelfRelativeSD(PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR, LPDWORD); } 
#line 11209
extern "C" { extern __declspec( dllimport ) BOOL __stdcall MakeAbsoluteSD(PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR, LPDWORD, PACL, LPDWORD, PACL, LPDWORD, PSID, LPDWORD, PSID, LPDWORD); } 
#line 11227
extern "C" { extern __declspec( dllimport ) BOOL __stdcall MakeAbsoluteSD2(PSECURITY_DESCRIPTOR, LPDWORD); } 
#line 11235
extern "C" { extern __declspec( dllimport ) void __stdcall QuerySecurityAccessMask(SECURITY_INFORMATION, LPDWORD); } 
#line 11243
extern "C" { extern __declspec( dllimport ) void __stdcall SetSecurityAccessMask(SECURITY_INFORMATION, LPDWORD); } 
#line 11251
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetFileSecurityA(LPCSTR, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR); } 
#line 11259
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetFileSecurityW(LPCWSTR, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR); } 
#line 11274 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetFileSecurityA(LPCSTR, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR, DWORD, LPDWORD); } 
#line 11284
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetFileSecurityW(LPCWSTR, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR, DWORD, LPDWORD); } 
#line 11301 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetKernelObjectSecurity(HANDLE, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR); } 
#line 11311
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall FindFirstChangeNotificationA(LPCSTR, BOOL, DWORD); } 
#line 11320
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall FindFirstChangeNotificationW(LPCWSTR, BOOL, DWORD); } 
#line 11334 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FindNextChangeNotification(HANDLE); } 
#line 11341
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FindCloseChangeNotification(HANDLE); } 
#line 11349
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ReadDirectoryChangesW(HANDLE, LPVOID, DWORD, BOOL, DWORD, LPDWORD, LPOVERLAPPED, LPOVERLAPPED_COMPLETION_ROUTINE); } 
#line 11364 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall VirtualLock(LPVOID, SIZE_T); } 
#line 11372
extern "C" { extern __declspec( dllimport ) BOOL __stdcall VirtualUnlock(LPVOID, SIZE_T); } 
#line 11381
extern "C" { extern __declspec( dllimport ) LPVOID __stdcall MapViewOfFileEx(HANDLE, DWORD, DWORD, DWORD, SIZE_T, LPVOID); } 
#line 11396
extern "C" { extern __declspec( dllimport ) LPVOID __stdcall MapViewOfFileExNuma(HANDLE, DWORD, DWORD, DWORD, SIZE_T, LPVOID, DWORD); } 
#line 11411 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetPriorityClass(HANDLE, DWORD); } 
#line 11419
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetPriorityClass(HANDLE); } 
#line 11426
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsBadReadPtr(const void *, UINT_PTR); } 
#line 11434
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsBadWritePtr(LPVOID, UINT_PTR); } 
#line 11442
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsBadHugeReadPtr(const void *, UINT_PTR); } 
#line 11450
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsBadHugeWritePtr(LPVOID, UINT_PTR); } 
#line 11458
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsBadCodePtr(FARPROC); } 
#line 11465
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsBadStringPtrA(LPCSTR, UINT_PTR); } 
#line 11472
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsBadStringPtrW(LPCWSTR, UINT_PTR); } 
#line 11485 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall LookupAccountSidA(LPCSTR, PSID, LPSTR, LPDWORD, LPSTR, LPDWORD, PSID_NAME_USE); } 
#line 11497
extern "C" { extern __declspec( dllimport ) BOOL __stdcall LookupAccountSidW(LPCWSTR, PSID, LPWSTR, LPDWORD, LPWSTR, LPDWORD, PSID_NAME_USE); } 
#line 11515 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall LookupAccountNameA(LPCSTR, LPCSTR, PSID, LPDWORD, LPSTR, LPDWORD, PSID_NAME_USE); } 
#line 11527
extern "C" { extern __declspec( dllimport ) BOOL __stdcall LookupAccountNameW(LPCWSTR, LPCWSTR, PSID, LPDWORD, LPWSTR, LPDWORD, PSID_NAME_USE); } 
#line 11545 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall LookupPrivilegeValueA(LPCSTR, LPCSTR, PLUID); } 
#line 11553
extern "C" { extern __declspec( dllimport ) BOOL __stdcall LookupPrivilegeValueW(LPCWSTR, LPCWSTR, PLUID); } 
#line 11567 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall LookupPrivilegeNameA(LPCSTR, PLUID, LPSTR, LPDWORD); } 
#line 11576
extern "C" { extern __declspec( dllimport ) BOOL __stdcall LookupPrivilegeNameW(LPCWSTR, PLUID, LPWSTR, LPDWORD); } 
#line 11591 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall LookupPrivilegeDisplayNameA(LPCSTR, LPCSTR, LPSTR, LPDWORD, LPDWORD); } 
#line 11601
extern "C" { extern __declspec( dllimport ) BOOL __stdcall LookupPrivilegeDisplayNameW(LPCWSTR, LPCWSTR, LPWSTR, LPDWORD, LPDWORD); } 
#line 11617 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AllocateLocallyUniqueId(PLUID); } 
#line 11624
extern "C" { extern __declspec( dllimport ) BOOL __stdcall BuildCommDCBA(LPCSTR, LPDCB); } 
#line 11631
extern "C" { extern __declspec( dllimport ) BOOL __stdcall BuildCommDCBW(LPCWSTR, LPDCB); } 
#line 11644 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall BuildCommDCBAndTimeoutsA(LPCSTR, LPDCB, LPCOMMTIMEOUTS); } 
#line 11652
extern "C" { extern __declspec( dllimport ) BOOL __stdcall BuildCommDCBAndTimeoutsW(LPCWSTR, LPDCB, LPCOMMTIMEOUTS); } 
#line 11666 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CommConfigDialogA(LPCSTR, HWND, LPCOMMCONFIG); } 
#line 11674
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CommConfigDialogW(LPCWSTR, HWND, LPCOMMCONFIG); } 
#line 11688 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetDefaultCommConfigA(LPCSTR, LPCOMMCONFIG, LPDWORD); } 
#line 11696
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetDefaultCommConfigW(LPCWSTR, LPCOMMCONFIG, LPDWORD); } 
#line 11710 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetDefaultCommConfigA(LPCSTR, LPCOMMCONFIG, DWORD); } 
#line 11718
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetDefaultCommConfigW(LPCWSTR, LPCOMMCONFIG, DWORD); } 
#line 11739 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetComputerNameA(LPSTR, LPDWORD); } 
#line 11747
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetComputerNameW(LPWSTR, LPDWORD); } 
#line 11760 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetComputerNameA(LPCSTR); } 
#line 11766
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetComputerNameW(LPCWSTR); } 
#line 11788 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { typedef 
#line 11778
enum _COMPUTER_NAME_FORMAT { 
ComputerNameNetBIOS, 
ComputerNameDnsHostname, 
ComputerNameDnsDomain, 
ComputerNameDnsFullyQualified, 
ComputerNamePhysicalNetBIOS, 
ComputerNamePhysicalDnsHostname, 
ComputerNamePhysicalDnsDomain, 
ComputerNamePhysicalDnsFullyQualified, 
ComputerNameMax
} COMPUTER_NAME_FORMAT; }
#line 11794
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetComputerNameExA(COMPUTER_NAME_FORMAT, LPSTR, LPDWORD); } 
#line 11803
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetComputerNameExW(COMPUTER_NAME_FORMAT, LPWSTR, LPDWORD); } 
#line 11817 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetComputerNameExA(COMPUTER_NAME_FORMAT, LPCSTR); } 
#line 11824
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetComputerNameExW(COMPUTER_NAME_FORMAT, LPCWSTR); } 
#line 11839 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DnsHostnameToComputerNameA(LPCSTR, LPSTR, LPDWORD); } 
#line 11848
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DnsHostnameToComputerNameW(LPCWSTR, LPWSTR, LPDWORD); } 
#line 11864 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetUserNameA(LPSTR, LPDWORD); } 
#line 11871
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetUserNameW(LPWSTR, LPDWORD); } 
#line 11909 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall LogonUserA(LPCSTR, LPCSTR, LPCSTR, DWORD, DWORD, PHANDLE); } 
#line 11920
extern "C" { extern __declspec( dllimport ) BOOL __stdcall LogonUserW(LPCWSTR, LPCWSTR, LPCWSTR, DWORD, DWORD, PHANDLE); } 
#line 11937 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall LogonUserExA(LPCSTR, LPCSTR, LPCSTR, DWORD, DWORD, PHANDLE, PSID *, PVOID *, LPDWORD, PQUOTA_LIMITS); } 
#line 11952
extern "C" { extern __declspec( dllimport ) BOOL __stdcall LogonUserExW(LPCWSTR, LPCWSTR, LPCWSTR, DWORD, DWORD, PHANDLE, PSID *, PVOID *, LPDWORD, PQUOTA_LIMITS); } 
#line 11979 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ImpersonateLoggedOnUser(HANDLE); } 
#line 11986
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CreateProcessAsUserA(HANDLE, LPCSTR, LPSTR, LPSECURITY_ATTRIBUTES, LPSECURITY_ATTRIBUTES, BOOL, DWORD, LPVOID, LPCSTR, LPSTARTUPINFOA, LPPROCESS_INFORMATION); } 
#line 12002
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CreateProcessAsUserW(HANDLE, LPCWSTR, LPWSTR, LPSECURITY_ATTRIBUTES, LPSECURITY_ATTRIBUTES, BOOL, DWORD, LPVOID, LPCWSTR, LPSTARTUPINFOW, LPPROCESS_INFORMATION); } 
#line 12034 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CreateProcessWithLogonW(LPCWSTR, LPCWSTR, LPCWSTR, DWORD, LPCWSTR, LPWSTR, DWORD, LPVOID, LPCWSTR, LPSTARTUPINFOW, LPPROCESS_INFORMATION); } 
#line 12051
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CreateProcessWithTokenW(HANDLE, DWORD, LPCWSTR, LPWSTR, DWORD, LPVOID, LPCWSTR, LPSTARTUPINFOW, LPPROCESS_INFORMATION); } 
#line 12068 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ImpersonateAnonymousToken(HANDLE); } 
#line 12075
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DuplicateTokenEx(HANDLE, DWORD, LPSECURITY_ATTRIBUTES, SECURITY_IMPERSONATION_LEVEL, TOKEN_TYPE, PHANDLE); } 
#line 12086
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CreateRestrictedToken(HANDLE, DWORD, DWORD, PSID_AND_ATTRIBUTES, DWORD, PLUID_AND_ATTRIBUTES, DWORD, PSID_AND_ATTRIBUTES, PHANDLE); } 
#line 12102
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsTokenRestricted(HANDLE); } 
#line 12109
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsTokenUntrusted(HANDLE); } 
#line 12116
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CheckTokenMembership(HANDLE, PSID, PBOOL); } 
#line 12128
extern "C" { typedef WAITORTIMERCALLBACKFUNC WAITORTIMERCALLBACK; }




extern "C" { extern __declspec( dllimport ) BOOL __stdcall RegisterWaitForSingleObject(PHANDLE, HANDLE, WAITORTIMERCALLBACK, PVOID, ULONG, ULONG); } 
#line 12145
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall RegisterWaitForSingleObjectEx(HANDLE, WAITORTIMERCALLBACK, PVOID, ULONG, ULONG); } 
#line 12157
extern "C" { extern __declspec( dllimport ) BOOL __stdcall UnregisterWait(HANDLE); } 
#line 12165
extern "C" { extern __declspec( dllimport ) BOOL __stdcall UnregisterWaitEx(HANDLE, HANDLE); } 
#line 12173
extern "C" { extern __declspec( dllimport ) BOOL __stdcall QueueUserWorkItem(LPTHREAD_START_ROUTINE, PVOID, ULONG); } 
#line 12182
extern "C" { extern __declspec( dllimport ) BOOL __stdcall BindIoCompletionCallback(HANDLE, LPOVERLAPPED_COMPLETION_ROUTINE, ULONG); } 
#line 12192
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateTimerQueue(); } 
#line 12199
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CreateTimerQueueTimer(PHANDLE, HANDLE, WAITORTIMERCALLBACK, PVOID, DWORD, DWORD, ULONG); } 
#line 12213
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ChangeTimerQueueTimer(HANDLE, HANDLE, ULONG, ULONG); } 
#line 12224
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DeleteTimerQueueTimer(HANDLE, HANDLE, HANDLE); } 
#line 12234
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DeleteTimerQueueEx(HANDLE, HANDLE); } 
#line 12242
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall SetTimerQueueTimer(HANDLE, WAITORTIMERCALLBACK, PVOID, DWORD, DWORD, BOOL); } 
#line 12255
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CancelTimerQueueTimer(HANDLE, HANDLE); } 
#line 12264
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DeleteTimerQueue(HANDLE); } 
#line 12270
extern "C" { typedef void (__stdcall *PTP_WIN32_IO_CALLBACK)(PTP_CALLBACK_INSTANCE, PVOID, PVOID, ULONG, ULONG_PTR, PTP_IO); }
#line 12284
extern "C" { extern __declspec( dllimport ) PTP_POOL __stdcall CreateThreadpool(PVOID); } 
#line 12291
extern "C" { extern __declspec( dllimport ) void __stdcall SetThreadpoolThreadMaximum(PTP_POOL, DWORD); } 
#line 12299
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetThreadpoolThreadMinimum(PTP_POOL, DWORD); } 
#line 12307
extern "C" { extern __declspec( dllimport ) void __stdcall CloseThreadpool(PTP_POOL); } 
#line 12316
extern "C" { extern __declspec( dllimport ) PTP_CLEANUP_GROUP __stdcall CreateThreadpoolCleanupGroup(); } 
#line 12323
extern "C" { extern __declspec( dllimport ) void __stdcall CloseThreadpoolCleanupGroupMembers(PTP_CLEANUP_GROUP, BOOL, PVOID); } 
#line 12332
extern "C" { extern __declspec( dllimport ) void __stdcall CloseThreadpoolCleanupGroup(PTP_CLEANUP_GROUP); } 
#line 12340
extern "C" { __forceinline void InitializeThreadpoolEnvironment(PTP_CALLBACK_ENVIRON 
pcbe) 

{ 
TpInitializeCallbackEnviron(pcbe); 
} } 



extern "C" { __forceinline void SetThreadpoolCallbackPool(PTP_CALLBACK_ENVIRON 
pcbe, PTP_POOL 
ptpp) 

{ 
TpSetCallbackThreadpool(pcbe, ptpp); 
} } 



extern "C" { __forceinline void SetThreadpoolCallbackCleanupGroup(PTP_CALLBACK_ENVIRON 
pcbe, PTP_CLEANUP_GROUP 
ptpcg, PTP_CLEANUP_GROUP_CANCEL_CALLBACK 
pfng) 

{ 
TpSetCallbackCleanupGroup(pcbe, ptpcg, pfng); 
} } 



extern "C" { __forceinline void SetThreadpoolCallbackRunsLong(PTP_CALLBACK_ENVIRON 
pcbe) 

{ 
TpSetCallbackLongFunction(pcbe); 
} } 



extern "C" { __forceinline void SetThreadpoolCallbackLibrary(PTP_CALLBACK_ENVIRON 
pcbe, PVOID 
mod) 

{ 
TpSetCallbackRaceWithDll(pcbe, mod); 
} } 



extern "C" { __forceinline void DestroyThreadpoolEnvironment(PTP_CALLBACK_ENVIRON 
pcbe) 

{ 
TpDestroyCallbackEnviron(pcbe); 
} } 
#line 12401 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) void __stdcall SetEventWhenCallbackReturns(PTP_CALLBACK_INSTANCE, HANDLE); } 
#line 12409
extern "C" { extern __declspec( dllimport ) void __stdcall ReleaseSemaphoreWhenCallbackReturns(PTP_CALLBACK_INSTANCE, HANDLE, DWORD); } 
#line 12418
extern "C" { extern __declspec( dllimport ) void __stdcall ReleaseMutexWhenCallbackReturns(PTP_CALLBACK_INSTANCE, HANDLE); } 
#line 12426
extern "C" { extern __declspec( dllimport ) void __stdcall LeaveCriticalSectionWhenCallbackReturns(PTP_CALLBACK_INSTANCE, PCRITICAL_SECTION); } 
#line 12434
extern "C" { extern __declspec( dllimport ) void __stdcall FreeLibraryWhenCallbackReturns(PTP_CALLBACK_INSTANCE, HMODULE); } 
#line 12442
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CallbackMayRunLong(PTP_CALLBACK_INSTANCE); } 
#line 12449
extern "C" { extern __declspec( dllimport ) void __stdcall DisassociateCurrentThreadFromCallback(PTP_CALLBACK_INSTANCE); } 
#line 12457
extern "C" { extern __declspec( dllimport ) BOOL __stdcall TrySubmitThreadpoolCallback(PTP_SIMPLE_CALLBACK, PVOID, PTP_CALLBACK_ENVIRON); } 
#line 12468
extern "C" { extern __declspec( dllimport ) PTP_WORK __stdcall CreateThreadpoolWork(PTP_WORK_CALLBACK, PVOID, PTP_CALLBACK_ENVIRON); } 
#line 12477
extern "C" { extern __declspec( dllimport ) void __stdcall SubmitThreadpoolWork(PTP_WORK); } 
#line 12484
extern "C" { extern __declspec( dllimport ) void __stdcall WaitForThreadpoolWorkCallbacks(PTP_WORK, BOOL); } 
#line 12492
extern "C" { extern __declspec( dllimport ) void __stdcall CloseThreadpoolWork(PTP_WORK); } 
#line 12501
extern "C" { extern __declspec( dllimport ) PTP_TIMER __stdcall CreateThreadpoolTimer(PTP_TIMER_CALLBACK, PVOID, PTP_CALLBACK_ENVIRON); } 
#line 12510
extern "C" { extern __declspec( dllimport ) void __stdcall SetThreadpoolTimer(PTP_TIMER, PFILETIME, DWORD, DWORD); } 
#line 12520
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsThreadpoolTimerSet(PTP_TIMER); } 
#line 12527
extern "C" { extern __declspec( dllimport ) void __stdcall WaitForThreadpoolTimerCallbacks(PTP_TIMER, BOOL); } 
#line 12535
extern "C" { extern __declspec( dllimport ) void __stdcall CloseThreadpoolTimer(PTP_TIMER); } 
#line 12544
extern "C" { extern __declspec( dllimport ) PTP_WAIT __stdcall CreateThreadpoolWait(PTP_WAIT_CALLBACK, PVOID, PTP_CALLBACK_ENVIRON); } 
#line 12553
extern "C" { extern __declspec( dllimport ) void __stdcall SetThreadpoolWait(PTP_WAIT, HANDLE, PFILETIME); } 
#line 12562
extern "C" { extern __declspec( dllimport ) void __stdcall WaitForThreadpoolWaitCallbacks(PTP_WAIT, BOOL); } 
#line 12570
extern "C" { extern __declspec( dllimport ) void __stdcall CloseThreadpoolWait(PTP_WAIT); } 
#line 12579
extern "C" { extern __declspec( dllimport ) PTP_IO __stdcall CreateThreadpoolIo(HANDLE, PTP_WIN32_IO_CALLBACK, PVOID, PTP_CALLBACK_ENVIRON); } 
#line 12589
extern "C" { extern __declspec( dllimport ) void __stdcall StartThreadpoolIo(PTP_IO); } 
#line 12596
extern "C" { extern __declspec( dllimport ) void __stdcall CancelThreadpoolIo(PTP_IO); } 
#line 12603
extern "C" { extern __declspec( dllimport ) void __stdcall WaitForThreadpoolIoCallbacks(PTP_IO, BOOL); } 
#line 12611
extern "C" { extern __declspec( dllimport ) void __stdcall CloseThreadpoolIo(PTP_IO); } 
#line 12623
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreatePrivateNamespaceA(LPSECURITY_ATTRIBUTES, LPVOID, LPCSTR); } 
#line 12632
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreatePrivateNamespaceW(LPSECURITY_ATTRIBUTES, LPVOID, LPCWSTR); } 
#line 12647 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall OpenPrivateNamespaceA(LPVOID, LPCSTR); } 
#line 12655
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall OpenPrivateNamespaceW(LPVOID, LPCWSTR); } 
#line 12671 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOLEAN __stdcall ClosePrivateNamespace(HANDLE, ULONG); } 
#line 12684
extern "C" { extern HANDLE __stdcall CreateBoundaryDescriptorA(LPCSTR, ULONG); } 
#line 12691
extern "C" { extern HANDLE __stdcall CreateBoundaryDescriptorW(LPCWSTR, ULONG); } 
#line 12704 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AddSIDToBoundaryDescriptor(HANDLE *, PSID); } 
#line 12713
extern "C" { extern __declspec( dllimport ) void __stdcall DeleteBoundaryDescriptor(HANDLE); } 
#line 12741 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { typedef 
#line 12737
struct tagHW_PROFILE_INFOA { 
DWORD dwDockInfo; 
CHAR szHwProfileGuid[39]; 
CHAR szHwProfileName[80]; 
} HW_PROFILE_INFOA; }extern "C" { typedef tagHW_PROFILE_INFOA *LPHW_PROFILE_INFOA; }




extern "C" { typedef 
#line 12742
struct tagHW_PROFILE_INFOW { 
DWORD dwDockInfo; 
WCHAR szHwProfileGuid[39]; 
WCHAR szHwProfileName[80]; 
} HW_PROFILE_INFOW; }extern "C" { typedef tagHW_PROFILE_INFOW *LPHW_PROFILE_INFOW; }




extern "C" { typedef HW_PROFILE_INFOA HW_PROFILE_INFO; }
extern "C" { typedef LPHW_PROFILE_INFOA LPHW_PROFILE_INFO; }
#line 12759 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetCurrentHwProfileA(LPHW_PROFILE_INFOA); } 
#line 12765
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetCurrentHwProfileW(LPHW_PROFILE_INFOW); } 
#line 12782 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *); } 
#line 12789
extern "C" { extern __declspec( dllimport ) BOOL __stdcall QueryPerformanceFrequency(LARGE_INTEGER *); } 
#line 12798
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA); } 
#line 12804
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetVersionExW(LPOSVERSIONINFOW); } 
#line 12818 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall VerifyVersionInfoA(LPOSVERSIONINFOEXA, DWORD, DWORDLONG); } 
#line 12826
extern "C" { extern __declspec( dllimport ) BOOL __stdcall VerifyVersionInfoW(LPOSVERSIONINFOEXW, DWORD, DWORDLONG); } 
#line 12842 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetProductInfo(DWORD, DWORD, DWORD, DWORD, PDWORD); } 
#line 22905 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winerror.h"
extern "C" { __forceinline HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (((long)x) <= (0)) ? ((HRESULT)x) : ((HRESULT)(((x & (65535)) | (7 << 16)) | (2147483648U))); } } 
#line 12893 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { typedef 
#line 12886
struct _SYSTEM_POWER_STATUS { 
BYTE ACLineStatus; 
BYTE BatteryFlag; 
BYTE BatteryLifePercent; 
BYTE Reserved1; 
DWORD BatteryLifeTime; 
DWORD BatteryFullLifeTime; 
} SYSTEM_POWER_STATUS; }extern "C" { typedef _SYSTEM_POWER_STATUS *LPSYSTEM_POWER_STATUS; }



extern "C" { extern BOOL __stdcall GetSystemPowerStatus(LPSYSTEM_POWER_STATUS); } 
#line 12903
extern "C" { extern BOOL __stdcall SetSystemPowerState(BOOL, BOOL); } 
#line 12918 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AllocateUserPhysicalPages(HANDLE, PULONG_PTR, PULONG_PTR); } 
#line 12929
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AllocateUserPhysicalPagesNuma(HANDLE, PULONG_PTR, PULONG_PTR, DWORD); } 
#line 12941 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FreeUserPhysicalPages(HANDLE, PULONG_PTR, PULONG_PTR); } 
#line 12950
extern "C" { extern __declspec( dllimport ) BOOL __stdcall MapUserPhysicalPages(PVOID, ULONG_PTR, PULONG_PTR); } 
#line 12959
extern "C" { extern __declspec( dllimport ) BOOL __stdcall MapUserPhysicalPagesScatter(PVOID *, ULONG_PTR, PULONG_PTR); } 
#line 12969
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateJobObjectA(LPSECURITY_ATTRIBUTES, LPCSTR); } 
#line 12977
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateJobObjectW(LPSECURITY_ATTRIBUTES, LPCWSTR); } 
#line 12991 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall OpenJobObjectA(DWORD, BOOL, LPCSTR); } 
#line 13000
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall OpenJobObjectW(DWORD, BOOL, LPCWSTR); } 
#line 13014 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AssignProcessToJobObject(HANDLE, HANDLE); } 
#line 13022
extern "C" { extern __declspec( dllimport ) BOOL __stdcall TerminateJobObject(HANDLE, UINT); } 
#line 13030
extern "C" { extern __declspec( dllimport ) BOOL __stdcall QueryInformationJobObject(HANDLE, JOBOBJECTINFOCLASS, LPVOID, DWORD, LPDWORD); } 
#line 13041
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetInformationJobObject(HANDLE, JOBOBJECTINFOCLASS, LPVOID, DWORD); } 
#line 13053
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsProcessInJob(HANDLE, HANDLE, PBOOL); } 
#line 13064 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CreateJobSet(ULONG, PJOB_SET_ARRAY, ULONG); } 
#line 13073
extern "C" { extern __declspec( dllimport ) PVOID __stdcall AddVectoredExceptionHandler(ULONG, PVECTORED_EXCEPTION_HANDLER); } 
#line 13081
extern "C" { extern __declspec( dllimport ) ULONG __stdcall RemoveVectoredExceptionHandler(PVOID); } 
#line 13089
extern "C" { extern __declspec( dllimport ) PVOID __stdcall AddVectoredContinueHandler(ULONG, PVECTORED_EXCEPTION_HANDLER); } 
#line 13097
extern "C" { extern __declspec( dllimport ) ULONG __stdcall RemoveVectoredContinueHandler(PVOID); } 
#line 13109
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall FindFirstVolumeA(LPSTR, DWORD); } 
#line 13117
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall FindFirstVolumeW(LPWSTR, DWORD); } 
#line 13130 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FindNextVolumeA(HANDLE, LPSTR, DWORD); } 
#line 13138
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FindNextVolumeW(HANDLE, LPWSTR, DWORD); } 
#line 13152 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FindVolumeClose(HANDLE); } 
#line 13160
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall FindFirstVolumeMountPointA(LPCSTR, LPSTR, DWORD); } 
#line 13169
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall FindFirstVolumeMountPointW(LPCWSTR, LPWSTR, DWORD); } 
#line 13183 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FindNextVolumeMountPointA(HANDLE, LPSTR, DWORD); } 
#line 13191
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FindNextVolumeMountPointW(HANDLE, LPWSTR, DWORD); } 
#line 13205 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FindVolumeMountPointClose(HANDLE); } 
#line 13212
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetVolumeMountPointA(LPCSTR, LPCSTR); } 
#line 13219
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetVolumeMountPointW(LPCWSTR, LPCWSTR); } 
#line 13232 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DeleteVolumeMountPointA(LPCSTR); } 
#line 13238
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DeleteVolumeMountPointW(LPCWSTR); } 
#line 13250 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetVolumeNameForVolumeMountPointA(LPCSTR, LPSTR, DWORD); } 
#line 13258
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetVolumeNameForVolumeMountPointW(LPCWSTR, LPWSTR, DWORD); } 
#line 13272 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetVolumePathNameA(LPCSTR, LPSTR, DWORD); } 
#line 13280
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetVolumePathNameW(LPCWSTR, LPWSTR, DWORD); } 
#line 13294 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetVolumePathNamesForVolumeNameA(LPCSTR, LPCH, DWORD, PDWORD); } 
#line 13303
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetVolumePathNamesForVolumeNameW(LPCWSTR, LPWCH, DWORD, PDWORD); } 
#line 13338 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { typedef 
#line 13328
struct tagACTCTXA { 
ULONG cbSize; 
DWORD dwFlags; 
LPCSTR lpSource; 
USHORT wProcessorArchitecture; 
LANGID wLangId; 
LPCSTR lpAssemblyDirectory; 
LPCSTR lpResourceName; 
LPCSTR lpApplicationName; 
HMODULE hModule; 
} ACTCTXA; }extern "C" { typedef tagACTCTXA *PACTCTXA; }
#line 13349
extern "C" { typedef 
#line 13339
struct tagACTCTXW { 
ULONG cbSize; 
DWORD dwFlags; 
LPCWSTR lpSource; 
USHORT wProcessorArchitecture; 
LANGID wLangId; 
LPCWSTR lpAssemblyDirectory; 
LPCWSTR lpResourceName; 
LPCWSTR lpApplicationName; 
HMODULE hModule; 
} ACTCTXW; }extern "C" { typedef tagACTCTXW *PACTCTXW; }




extern "C" { typedef ACTCTXA ACTCTX; }
extern "C" { typedef PACTCTXA PACTCTX; }
#line 13358 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { typedef const ACTCTXA *PCACTCTXA; }
extern "C" { typedef const ACTCTXW *PCACTCTXW; }



extern "C" { typedef PCACTCTXA PCACTCTX; }
#line 13372 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateActCtxA(PCACTCTXA); } 
#line 13379
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateActCtxW(PCACTCTXW); } 
#line 13391 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) void __stdcall AddRefActCtx(HANDLE); } 
#line 13399
extern "C" { extern __declspec( dllimport ) void __stdcall ReleaseActCtx(HANDLE); } 
#line 13406
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ZombifyActCtx(HANDLE); } 
#line 13414
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ActivateActCtx(HANDLE, ULONG_PTR *); } 
#line 13425
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DeactivateActCtx(DWORD, ULONG_PTR); } 
#line 13433
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetCurrentActCtx(HANDLE *); } 
#line 13448
extern "C" { typedef 
#line 13437
struct tagACTCTX_SECTION_KEYED_DATA_2600 { 
ULONG cbSize; 
ULONG ulDataFormatVersion; 
PVOID lpData; 
ULONG ulLength; 
PVOID lpSectionGlobalData; 
ULONG ulSectionGlobalDataLength; 
PVOID lpSectionBase; 
ULONG ulSectionTotalLength; 
HANDLE hActCtx; 
ULONG ulAssemblyRosterIndex; 
} ACTCTX_SECTION_KEYED_DATA_2600; }extern "C" { typedef tagACTCTX_SECTION_KEYED_DATA_2600 *PACTCTX_SECTION_KEYED_DATA_2600; }
extern "C" { typedef const ACTCTX_SECTION_KEYED_DATA_2600 *PCACTCTX_SECTION_KEYED_DATA_2600; }
#line 13457
extern "C" { typedef 
#line 13451
struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA { 
PVOID lpInformation; 
PVOID lpSectionBase; 
ULONG ulSectionLength; 
PVOID lpSectionGlobalDataBase; 
ULONG ulSectionGlobalDataLength; 
} ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA; }extern "C" { typedef tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA *PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA; }
extern "C" { typedef const ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA *PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA; }
#line 13474
extern "C" { typedef 
#line 13460
struct tagACTCTX_SECTION_KEYED_DATA { 
ULONG cbSize; 
ULONG ulDataFormatVersion; 
PVOID lpData; 
ULONG ulLength; 
PVOID lpSectionGlobalData; 
ULONG ulSectionGlobalDataLength; 
PVOID lpSectionBase; 
ULONG ulSectionTotalLength; 
HANDLE hActCtx; 
ULONG ulAssemblyRosterIndex; 

ULONG ulFlags; 
ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata; 
} ACTCTX_SECTION_KEYED_DATA; }extern "C" { typedef tagACTCTX_SECTION_KEYED_DATA *PACTCTX_SECTION_KEYED_DATA; }
extern "C" { typedef const ACTCTX_SECTION_KEYED_DATA *PCACTCTX_SECTION_KEYED_DATA; }
#line 13486
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FindActCtxSectionStringA(DWORD, const GUID *, ULONG, LPCSTR, PACTCTX_SECTION_KEYED_DATA); } 
#line 13496
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FindActCtxSectionStringW(DWORD, const GUID *, ULONG, LPCWSTR, PACTCTX_SECTION_KEYED_DATA); } 
#line 13512 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FindActCtxSectionGuid(DWORD, const GUID *, ULONG, const GUID *, PACTCTX_SECTION_KEYED_DATA); } 
#line 13527
extern "C" { typedef 
#line 13524
struct _ACTIVATION_CONTEXT_BASIC_INFORMATION { 
HANDLE hActCtx; 
DWORD dwFlags; 
} ACTIVATION_CONTEXT_BASIC_INFORMATION; }extern "C" { typedef _ACTIVATION_CONTEXT_BASIC_INFORMATION *PACTIVATION_CONTEXT_BASIC_INFORMATION; }

extern "C" { typedef const _ACTIVATION_CONTEXT_BASIC_INFORMATION *PCACTIVATION_CONTEXT_BASIC_INFORMATION; }
#line 13574 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall QueryActCtxW(DWORD, HANDLE, PVOID, ULONG, PVOID, SIZE_T, SIZE_T *); } 
#line 13584
extern "C" { typedef BOOL (__stdcall *PQUERYACTCTXW_FUNC)(DWORD, HANDLE, PVOID, ULONG, PVOID, SIZE_T, SIZE_T *); }
#line 13600 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ProcessIdToSessionId(DWORD, DWORD *); } 
#line 13610
extern "C" { extern __declspec( dllimport ) DWORD __stdcall WTSGetActiveConsoleSessionId(); } 
#line 13617
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsWow64Process(HANDLE, PBOOL); } 
#line 13627 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetLogicalProcessorInformation(PSYSTEM_LOGICAL_PROCESSOR_INFORMATION, PDWORD); } 
#line 13639
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetNumaHighestNodeNumber(PULONG); } 
#line 13646
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetNumaProcessorNode(UCHAR, PUCHAR); } 
#line 13654
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetNumaNodeProcessorMask(UCHAR, PULONGLONG); } 
#line 13662
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetNumaAvailableMemoryNode(UCHAR, PULONGLONG); } 
#line 13672
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetNumaProximityNode(ULONG, PUCHAR); } 
#line 13682 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { typedef DWORD (__stdcall *APPLICATION_RECOVERY_CALLBACK)(PVOID); }
#line 13713
extern "C" { extern __declspec( dllimport ) HRESULT __stdcall RegisterApplicationRecoveryCallback(APPLICATION_RECOVERY_CALLBACK, PVOID, DWORD, DWORD); } 
#line 13723
extern "C" { extern __declspec( dllimport ) HRESULT __stdcall UnregisterApplicationRecoveryCallback(); } 




extern "C" { extern __declspec( dllimport ) HRESULT __stdcall RegisterApplicationRestart(PCWSTR, DWORD); } 
#line 13736
extern "C" { extern __declspec( dllimport ) HRESULT __stdcall UnregisterApplicationRestart(); } 
#line 13745
extern "C" { extern __declspec( dllimport ) HRESULT __stdcall GetApplicationRecoveryCallback(HANDLE, APPLICATION_RECOVERY_CALLBACK *, PVOID *, PDWORD, PDWORD); } 
#line 13756
extern "C" { extern __declspec( dllimport ) HRESULT __stdcall GetApplicationRestartSettings(HANDLE, PWSTR, PDWORD, PDWORD); } 
#line 13766
extern "C" { extern __declspec( dllimport ) HRESULT __stdcall ApplicationRecoveryInProgress(PBOOL); } 
#line 13773
extern "C" { extern __declspec( dllimport ) void __stdcall ApplicationRecoveryFinished(BOOL); } 
#line 13793
extern "C" { typedef 
#line 13778
enum _FILE_INFO_BY_HANDLE_CLASS { 
FileBasicInfo, 
FileStandardInfo, 
FileNameInfo, 
FileRenameInfo, 
FileDispositionInfo, 
FileAllocationInfo, 
FileEndOfFileInfo, 
FileStreamInfo, 
FileCompressionInfo, 
FileAttributeTagInfo, 
FileIdBothDirectoryInfo, 
FileIdBothDirectoryRestartInfo, 
FileIoPriorityHintInfo, 
MaximumFileInfoByHandleClass
} FILE_INFO_BY_HANDLE_CLASS; }extern "C" { typedef _FILE_INFO_BY_HANDLE_CLASS *PFILE_INFO_BY_HANDLE_CLASS; }
#line 13801
extern "C" { typedef 
#line 13795
struct _FILE_BASIC_INFO { 
LARGE_INTEGER CreationTime; 
LARGE_INTEGER LastAccessTime; 
LARGE_INTEGER LastWriteTime; 
LARGE_INTEGER ChangeTime; 
DWORD FileAttributes; 
} FILE_BASIC_INFO; }extern "C" { typedef _FILE_BASIC_INFO *PFILE_BASIC_INFO; }
#line 13809
extern "C" { typedef 
#line 13803
struct _FILE_STANDARD_INFO { 
LARGE_INTEGER AllocationSize; 
LARGE_INTEGER EndOfFile; 
DWORD NumberOfLinks; 
BOOLEAN DeletePending; 
BOOLEAN Directory; 
} FILE_STANDARD_INFO; }extern "C" { typedef _FILE_STANDARD_INFO *PFILE_STANDARD_INFO; }




extern "C" { typedef 
#line 13811
struct _FILE_NAME_INFO { 
DWORD FileNameLength; 
WCHAR FileName[1]; 
} FILE_NAME_INFO; }extern "C" { typedef _FILE_NAME_INFO *PFILE_NAME_INFO; }
#line 13821
extern "C" { typedef 
#line 13816
struct _FILE_RENAME_INFO { 
BOOLEAN ReplaceIfExists; 
HANDLE RootDirectory; 
DWORD FileNameLength; 
WCHAR FileName[1]; 
} FILE_RENAME_INFO; }extern "C" { typedef _FILE_RENAME_INFO *PFILE_RENAME_INFO; }



extern "C" { typedef 
#line 13823
struct _FILE_ALLOCATION_INFO { 
LARGE_INTEGER AllocationSize; 
} FILE_ALLOCATION_INFO; }extern "C" { typedef _FILE_ALLOCATION_INFO *PFILE_ALLOCATION_INFO; }



extern "C" { typedef 
#line 13827
struct _FILE_END_OF_FILE_INFO { 
LARGE_INTEGER EndOfFile; 
} FILE_END_OF_FILE_INFO; }extern "C" { typedef _FILE_END_OF_FILE_INFO *PFILE_END_OF_FILE_INFO; }
#line 13837
extern "C" { typedef 
#line 13831
struct _FILE_STREAM_INFO { 
DWORD NextEntryOffset; 
DWORD StreamNameLength; 
LARGE_INTEGER StreamSize; 
LARGE_INTEGER StreamAllocationSize; 
WCHAR StreamName[1]; 
} FILE_STREAM_INFO; }extern "C" { typedef _FILE_STREAM_INFO *PFILE_STREAM_INFO; }
#line 13846
extern "C" { typedef 
#line 13839
struct _FILE_COMPRESSION_INFO { 
LARGE_INTEGER CompressedFileSize; 
WORD CompressionFormat; 
UCHAR CompressionUnitShift; 
UCHAR ChunkShift; 
UCHAR ClusterShift; 
UCHAR Reserved[3]; 
} FILE_COMPRESSION_INFO; }extern "C" { typedef _FILE_COMPRESSION_INFO *PFILE_COMPRESSION_INFO; }




extern "C" { typedef 
#line 13848
struct _FILE_ATTRIBUTE_TAG_INFO { 
DWORD FileAttributes; 
DWORD ReparseTag; 
} FILE_ATTRIBUTE_TAG_INFO; }extern "C" { typedef _FILE_ATTRIBUTE_TAG_INFO *PFILE_ATTRIBUTE_TAG_INFO; }



extern "C" { typedef 
#line 13853
struct _FILE_DISPOSITION_INFO { 
BOOLEAN DeleteFileA; 
} FILE_DISPOSITION_INFO; }extern "C" { typedef _FILE_DISPOSITION_INFO *PFILE_DISPOSITION_INFO; }
#line 13873
extern "C" { typedef 
#line 13857
struct _FILE_ID_BOTH_DIR_INFO { 
DWORD NextEntryOffset; 
DWORD FileIndex; 
LARGE_INTEGER CreationTime; 
LARGE_INTEGER LastAccessTime; 
LARGE_INTEGER LastWriteTime; 
LARGE_INTEGER ChangeTime; 
LARGE_INTEGER EndOfFile; 
LARGE_INTEGER AllocationSize; 
DWORD FileAttributes; 
DWORD FileNameLength; 
DWORD EaSize; 
CCHAR ShortNameLength; 
WCHAR ShortName[12]; 
LARGE_INTEGER FileId; 
WCHAR FileName[1]; 
} FILE_ID_BOTH_DIR_INFO; }extern "C" { typedef _FILE_ID_BOTH_DIR_INFO *PFILE_ID_BOTH_DIR_INFO; }
#line 13880
extern "C" { typedef 
#line 13875
enum _PRIORITY_HINT { 
IoPriorityHintVeryLow, 
IoPriorityHintLow, 
IoPriorityHintNormal, 
MaximumIoPriorityHintType
} PRIORITY_HINT; }



extern "C" { typedef 
#line 13882
struct _FILE_IO_PRIORITY_HINT_INFO { 
PRIORITY_HINT PriorityHint; 
} FILE_IO_PRIORITY_HINT_INFO; }extern "C" { typedef _FILE_IO_PRIORITY_HINT_INFO *PFILE_IO_PRIORITY_HINT_INFO; }



extern "C" { extern BOOL __stdcall SetFileInformationByHandle(HANDLE, FILE_INFO_BY_HANDLE_CLASS, LPVOID, DWORD); } 
#line 13897
extern "C" { extern BOOL __stdcall GetFileInformationByHandleEx(HANDLE, FILE_INFO_BY_HANDLE_CLASS, LPVOID, DWORD); } 
#line 13908
extern "C" { typedef 
#line 13904
enum _FILE_ID_TYPE { 
FileIdType, 
ObjectIdType, 
MaximumFileIdType
} FILE_ID_TYPE; }extern "C" { typedef _FILE_ID_TYPE *PFILE_ID_TYPE; }
#line 13917
extern "C" { typedef 
#line 13910
struct FILE_ID_DESCRIPTOR { 
DWORD dwSize; 
FILE_ID_TYPE Type; 
union { 
LARGE_INTEGER FileId; 
GUID ObjectId; 
}; 
} FILE_ID_DESCRIPTOR; }extern "C" { typedef FILE_ID_DESCRIPTOR *LPFILE_ID_DESCRIPTOR; }




extern "C" { extern HANDLE __stdcall OpenFileById(HANDLE, LPFILE_ID_DESCRIPTOR, DWORD, DWORD, LPSECURITY_ATTRIBUTES, DWORD); } 
#line 13944 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern BOOLEAN __stdcall CreateSymbolicLinkA(LPCSTR, LPCSTR, DWORD); } 
#line 13951
extern "C" { extern BOOLEAN __stdcall CreateSymbolicLinkW(LPCWSTR, LPCWSTR, DWORD); } 
#line 13964 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern BOOLEAN __stdcall CreateSymbolicLinkTransactedA(LPCSTR, LPCSTR, DWORD, HANDLE); } 
#line 13972
extern "C" { extern BOOLEAN __stdcall CreateSymbolicLinkTransactedW(LPCWSTR, LPCWSTR, DWORD, HANDLE); } 
#line 13986 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern DWORD __stdcall GetFinalPathNameByHandleA(HANDLE, LPSTR, DWORD, DWORD); } 
#line 13994
extern "C" { extern DWORD __stdcall GetFinalPathNameByHandleW(HANDLE, LPWSTR, DWORD, DWORD); } 
#line 14014 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winbase.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall QueryActCtxSettingsW(DWORD, HANDLE, PCWSTR, PCWSTR, PWSTR, SIZE_T, SIZE_T *); } 
#line 281 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 276
struct _DRAWPATRECT { 
POINT ptPosition; 
POINT ptSize; 
WORD wStyle; 
WORD wPattern; 
} DRAWPATRECT; }extern "C" { typedef _DRAWPATRECT *PDRAWPATRECT; }
#line 409 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 401
struct _PSINJECTDATA { 

DWORD DataBytes; 
WORD InjectionPoint; 
WORD PageNumber; 



} PSINJECTDATA; }extern "C" { typedef _PSINJECTDATA *PPSINJECTDATA; }
#line 482 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 477
struct _PSFEATURE_OUTPUT { 

BOOL bPageIndependent; 
BOOL bSetPageDevice; 

} PSFEATURE_OUTPUT; }extern "C" { typedef _PSFEATURE_OUTPUT *PPSFEATURE_OUTPUT; }
#line 496
extern "C" { typedef 
#line 488
struct _PSFEATURE_CUSTPAPER { 

LONG lOrientation; 
LONG lWidth; 
LONG lHeight; 
LONG lWidthOffset; 
LONG lHeightOffset; 

} PSFEATURE_CUSTPAPER; }extern "C" { typedef _PSFEATURE_CUSTPAPER *PPSFEATURE_CUSTPAPER; }
#line 555
extern "C" { typedef 
#line 547
struct tagXFORM { 

FLOAT eM11; 
FLOAT eM12; 
FLOAT eM21; 
FLOAT eM22; 
FLOAT eDx; 
FLOAT eDy; 
} XFORM; }extern "C" { typedef tagXFORM *PXFORM; }extern "C" { typedef tagXFORM *LPXFORM; }
#line 567
extern "C" { typedef 
#line 558
struct tagBITMAP { 

LONG bmType; 
LONG bmWidth; 
LONG bmHeight; 
LONG bmWidthBytes; 
WORD bmPlanes; 
WORD bmBitsPixel; 
LPVOID bmBits; 
} BITMAP; }extern "C" { typedef tagBITMAP *PBITMAP; }extern "C" { typedef tagBITMAP *NPBITMAP; }extern "C" { typedef tagBITMAP *LPBITMAP; }
#line 24 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\pshpack1.h"
#pragma warning(disable:4103)

#pragma pack ( push, 1 )
#line 574 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 570
struct tagRGBTRIPLE { 
BYTE rgbtBlue; 
BYTE rgbtGreen; 
BYTE rgbtRed; 
} RGBTRIPLE; }extern "C" { typedef tagRGBTRIPLE *PRGBTRIPLE; }extern "C" { typedef tagRGBTRIPLE *NPRGBTRIPLE; }extern "C" { typedef tagRGBTRIPLE *LPRGBTRIPLE; }
#line 27 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack ( pop )
#line 582 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 577
struct tagRGBQUAD { 
BYTE rgbBlue; 
BYTE rgbGreen; 
BYTE rgbRed; 
BYTE rgbReserved; 
} RGBQUAD; }
extern "C" { typedef RGBQUAD *LPRGBQUAD; }
#line 602
extern "C" { typedef LONG LCSCSTYPE; }


extern "C" { typedef LONG LCSGAMUTMATCH; }
#line 632
extern "C" { typedef long FXPT16DOT16; }extern "C" { typedef long *LPFXPT16DOT16; }
extern "C" { typedef long FXPT2DOT30; }extern "C" { typedef long *LPFXPT2DOT30; }
#line 643
extern "C" { typedef 
#line 638
struct tagCIEXYZ { 

FXPT2DOT30 ciexyzX; 
FXPT2DOT30 ciexyzY; 
FXPT2DOT30 ciexyzZ; 
} CIEXYZ; }
extern "C" { typedef CIEXYZ *LPCIEXYZ; }
#line 651
extern "C" { typedef 
#line 646
struct tagICEXYZTRIPLE { 

CIEXYZ ciexyzRed; 
CIEXYZ ciexyzGreen; 
CIEXYZ ciexyzBlue; 
} CIEXYZTRIPLE; }
extern "C" { typedef CIEXYZTRIPLE *LPCIEXYZTRIPLE; }
#line 670
extern "C" { typedef 
#line 659
struct tagLOGCOLORSPACEA { 
DWORD lcsSignature; 
DWORD lcsVersion; 
DWORD lcsSize; 
LCSCSTYPE lcsCSType; 
LCSGAMUTMATCH lcsIntent; 
CIEXYZTRIPLE lcsEndpoints; 
DWORD lcsGammaRed; 
DWORD lcsGammaGreen; 
DWORD lcsGammaBlue; 
CHAR lcsFilename[260]; 
} LOGCOLORSPACEA; }extern "C" { typedef tagLOGCOLORSPACEA *LPLOGCOLORSPACEA; }
#line 682
extern "C" { typedef 
#line 671
struct tagLOGCOLORSPACEW { 
DWORD lcsSignature; 
DWORD lcsVersion; 
DWORD lcsSize; 
LCSCSTYPE lcsCSType; 
LCSGAMUTMATCH lcsIntent; 
CIEXYZTRIPLE lcsEndpoints; 
DWORD lcsGammaRed; 
DWORD lcsGammaGreen; 
DWORD lcsGammaBlue; 
WCHAR lcsFilename[260]; 
} LOGCOLORSPACEW; }extern "C" { typedef tagLOGCOLORSPACEW *LPLOGCOLORSPACEW; }




extern "C" { typedef LOGCOLORSPACEA LOGCOLORSPACE; }
extern "C" { typedef LPLOGCOLORSPACEA LPLOGCOLORSPACE; }
#line 700 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 694
struct tagBITMAPCOREHEADER { 
DWORD bcSize; 
WORD bcWidth; 
WORD bcHeight; 
WORD bcPlanes; 
WORD bcBitCount; 
} BITMAPCOREHEADER; }extern "C" { typedef tagBITMAPCOREHEADER *LPBITMAPCOREHEADER; }extern "C" { typedef tagBITMAPCOREHEADER *PBITMAPCOREHEADER; }
#line 714
extern "C" { typedef 
#line 702
struct tagBITMAPINFOHEADER { 
DWORD biSize; 
LONG biWidth; 
LONG biHeight; 
WORD biPlanes; 
WORD biBitCount; 
DWORD biCompression; 
DWORD biSizeImage; 
LONG biXPelsPerMeter; 
LONG biYPelsPerMeter; 
DWORD biClrUsed; 
DWORD biClrImportant; 
} BITMAPINFOHEADER; }extern "C" { typedef tagBITMAPINFOHEADER *LPBITMAPINFOHEADER; }extern "C" { typedef tagBITMAPINFOHEADER *PBITMAPINFOHEADER; }
#line 738
extern "C" { typedef 
#line 717
struct BITMAPV4HEADER { 
DWORD bV4Size; 
LONG bV4Width; 
LONG bV4Height; 
WORD bV4Planes; 
WORD bV4BitCount; 
DWORD bV4V4Compression; 
DWORD bV4SizeImage; 
LONG bV4XPelsPerMeter; 
LONG bV4YPelsPerMeter; 
DWORD bV4ClrUsed; 
DWORD bV4ClrImportant; 
DWORD bV4RedMask; 
DWORD bV4GreenMask; 
DWORD bV4BlueMask; 
DWORD bV4AlphaMask; 
DWORD bV4CSType; 
CIEXYZTRIPLE bV4Endpoints; 
DWORD bV4GammaRed; 
DWORD bV4GammaGreen; 
DWORD bV4GammaBlue; 
} BITMAPV4HEADER, *LPBITMAPV4HEADER, *PBITMAPV4HEADER; }
#line 767 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 742
struct BITMAPV5HEADER { 
DWORD bV5Size; 
LONG bV5Width; 
LONG bV5Height; 
WORD bV5Planes; 
WORD bV5BitCount; 
DWORD bV5Compression; 
DWORD bV5SizeImage; 
LONG bV5XPelsPerMeter; 
LONG bV5YPelsPerMeter; 
DWORD bV5ClrUsed; 
DWORD bV5ClrImportant; 
DWORD bV5RedMask; 
DWORD bV5GreenMask; 
DWORD bV5BlueMask; 
DWORD bV5AlphaMask; 
DWORD bV5CSType; 
CIEXYZTRIPLE bV5Endpoints; 
DWORD bV5GammaRed; 
DWORD bV5GammaGreen; 
DWORD bV5GammaBlue; 
DWORD bV5Intent; 
DWORD bV5ProfileData; 
DWORD bV5ProfileSize; 
DWORD bV5Reserved; 
} BITMAPV5HEADER, *LPBITMAPV5HEADER, *PBITMAPV5HEADER; }
#line 787 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 784
struct tagBITMAPINFO { 
BITMAPINFOHEADER bmiHeader; 
RGBQUAD bmiColors[1]; 
} BITMAPINFO; }extern "C" { typedef tagBITMAPINFO *LPBITMAPINFO; }extern "C" { typedef tagBITMAPINFO *PBITMAPINFO; }




extern "C" { typedef 
#line 789
struct tagBITMAPCOREINFO { 
BITMAPCOREHEADER bmciHeader; 
RGBTRIPLE bmciColors[1]; 
} BITMAPCOREINFO; }extern "C" { typedef tagBITMAPCOREINFO *LPBITMAPCOREINFO; }extern "C" { typedef tagBITMAPCOREINFO *PBITMAPCOREINFO; }
#line 24 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\pshpack2.h"
#pragma warning(disable:4103)

#pragma pack ( push, 2 )
#line 801 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 795
struct tagBITMAPFILEHEADER { 
WORD bfType; 
DWORD bfSize; 
WORD bfReserved1; 
WORD bfReserved2; 
DWORD bfOffBits; 
} BITMAPFILEHEADER; }extern "C" { typedef tagBITMAPFILEHEADER *LPBITMAPFILEHEADER; }extern "C" { typedef tagBITMAPFILEHEADER *PBITMAPFILEHEADER; }
#line 27 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack ( pop )
#line 812 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 808
struct tagFONTSIGNATURE { 

DWORD fsUsb[4]; 
DWORD fsCsb[2]; 
} FONTSIGNATURE; }extern "C" { typedef tagFONTSIGNATURE *PFONTSIGNATURE; }extern "C" { typedef tagFONTSIGNATURE *LPFONTSIGNATURE; }
#line 819
extern "C" { typedef 
#line 814
struct tagCHARSETINFO { 

UINT ciCharset; 
UINT ciACP; 
FONTSIGNATURE fs; 
} CHARSETINFO; }extern "C" { typedef tagCHARSETINFO *PCHARSETINFO; }extern "C" { typedef tagCHARSETINFO *NPCHARSETINFO; }extern "C" { typedef tagCHARSETINFO *LPCHARSETINFO; }
#line 833 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 828
struct tagLOCALESIGNATURE { 

DWORD lsUsb[4]; 
DWORD lsCsbDefault[2]; 
DWORD lsCsbSupported[2]; 
} LOCALESIGNATURE; }extern "C" { typedef tagLOCALESIGNATURE *PLOCALESIGNATURE; }extern "C" { typedef tagLOCALESIGNATURE *LPLOCALESIGNATURE; }
#line 845 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 842
struct tagHANDLETABLE { 

HGDIOBJ objectHandle[1]; 
} HANDLETABLE; }extern "C" { typedef tagHANDLETABLE *PHANDLETABLE; }extern "C" { typedef tagHANDLETABLE *LPHANDLETABLE; }
#line 852
extern "C" { typedef 
#line 847
struct tagMETARECORD { 

DWORD rdSize; 
WORD rdFunction; 
WORD rdParm[1]; 
} METARECORD; }
extern "C" { typedef tagMETARECORD *PMETARECORD; }
extern "C" { typedef tagMETARECORD *LPMETARECORD; }
#line 862
extern "C" { typedef 
#line 856
struct tagMETAFILEPICT { 

LONG mm; 
LONG xExt; 
LONG yExt; 
HMETAFILE hMF; 
} METAFILEPICT; }extern "C" { typedef tagMETAFILEPICT *LPMETAFILEPICT; }
#line 24 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\pshpack2.h"
#pragma warning(disable:4103)

#pragma pack ( push, 2 )
#line 874 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 865
struct tagMETAHEADER { 

WORD mtType; 
WORD mtHeaderSize; 
WORD mtVersion; 
DWORD mtSize; 
WORD mtNoObjects; 
DWORD mtMaxRecord; 
WORD mtNoParameters; 
} METAHEADER; }
extern "C" { typedef tagMETAHEADER *PMETAHEADER; }
extern "C" { typedef tagMETAHEADER *LPMETAHEADER; }
#line 27 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack ( pop )
#line 886 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 881
struct tagENHMETARECORD { 

DWORD iType; 
DWORD nSize; 
DWORD dParm[1]; 
} ENHMETARECORD; }extern "C" { typedef tagENHMETARECORD *PENHMETARECORD; }extern "C" { typedef tagENHMETARECORD *LPENHMETARECORD; }
#line 921 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 888 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
struct tagENHMETAHEADER { 

DWORD iType; 
DWORD nSize; 

RECTL rclBounds; 
RECTL rclFrame; 
DWORD dSignature; 
DWORD nVersion; 
DWORD nBytes; 
DWORD nRecords; 
WORD nHandles; 

WORD sReserved; 
DWORD nDescription; 

DWORD offDescription; 

DWORD nPalEntries; 
SIZEL szlDevice; 
SIZEL szlMillimeters; 

DWORD cbPixelFormat; 

DWORD offPixelFormat; 

DWORD bOpenGL; 
#line 918 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
SIZEL szlMicrometers; 
#line 921 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
} ENHMETAHEADER; }extern "C" { typedef tagENHMETAHEADER *PENHMETAHEADER; }extern "C" { typedef tagENHMETAHEADER *LPENHMETAHEADER; }
#line 939 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef BYTE BCHAR; }
#line 24 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\pshpack4.h"
#pragma warning(disable:4103)

#pragma pack ( push, 4 )
#line 967 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 945
struct tagTEXTMETRICA { 

LONG tmHeight; 
LONG tmAscent; 
LONG tmDescent; 
LONG tmInternalLeading; 
LONG tmExternalLeading; 
LONG tmAveCharWidth; 
LONG tmMaxCharWidth; 
LONG tmWeight; 
LONG tmOverhang; 
LONG tmDigitizedAspectX; 
LONG tmDigitizedAspectY; 
BYTE tmFirstChar; 
BYTE tmLastChar; 
BYTE tmDefaultChar; 
BYTE tmBreakChar; 
BYTE tmItalic; 
BYTE tmUnderlined; 
BYTE tmStruckOut; 
BYTE tmPitchAndFamily; 
BYTE tmCharSet; 
} TEXTMETRICA; }extern "C" { typedef tagTEXTMETRICA *PTEXTMETRICA; }extern "C" { typedef tagTEXTMETRICA *NPTEXTMETRICA; }extern "C" { typedef tagTEXTMETRICA *LPTEXTMETRICA; }
#line 990
extern "C" { typedef 
#line 968
struct tagTEXTMETRICW { 

LONG tmHeight; 
LONG tmAscent; 
LONG tmDescent; 
LONG tmInternalLeading; 
LONG tmExternalLeading; 
LONG tmAveCharWidth; 
LONG tmMaxCharWidth; 
LONG tmWeight; 
LONG tmOverhang; 
LONG tmDigitizedAspectX; 
LONG tmDigitizedAspectY; 
WCHAR tmFirstChar; 
WCHAR tmLastChar; 
WCHAR tmDefaultChar; 
WCHAR tmBreakChar; 
BYTE tmItalic; 
BYTE tmUnderlined; 
BYTE tmStruckOut; 
BYTE tmPitchAndFamily; 
BYTE tmCharSet; 
} TEXTMETRICW; }extern "C" { typedef tagTEXTMETRICW *PTEXTMETRICW; }extern "C" { typedef tagTEXTMETRICW *NPTEXTMETRICW; }extern "C" { typedef tagTEXTMETRICW *LPTEXTMETRICW; }
#line 997
extern "C" { typedef TEXTMETRICA TEXTMETRIC; }
extern "C" { typedef PTEXTMETRICA PTEXTMETRIC; }
extern "C" { typedef NPTEXTMETRICA NPTEXTMETRIC; }
extern "C" { typedef LPTEXTMETRICA LPTEXTMETRIC; }
#line 27 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\poppack.h"
#pragma warning(disable:4103)
#line 24 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\pshpack4.h"
#pragma warning(disable:4103)
#line 29 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\poppack.h"
#pragma pack ( pop )
#line 26 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\pshpack4.h"
#pragma pack ( push, 4 )
#line 1046 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 1020
struct tagNEWTEXTMETRICA { 

LONG tmHeight; 
LONG tmAscent; 
LONG tmDescent; 
LONG tmInternalLeading; 
LONG tmExternalLeading; 
LONG tmAveCharWidth; 
LONG tmMaxCharWidth; 
LONG tmWeight; 
LONG tmOverhang; 
LONG tmDigitizedAspectX; 
LONG tmDigitizedAspectY; 
BYTE tmFirstChar; 
BYTE tmLastChar; 
BYTE tmDefaultChar; 
BYTE tmBreakChar; 
BYTE tmItalic; 
BYTE tmUnderlined; 
BYTE tmStruckOut; 
BYTE tmPitchAndFamily; 
BYTE tmCharSet; 
DWORD ntmFlags; 
UINT ntmSizeEM; 
UINT ntmCellHeight; 
UINT ntmAvgWidth; 
} NEWTEXTMETRICA; }extern "C" { typedef tagNEWTEXTMETRICA *PNEWTEXTMETRICA; }extern "C" { typedef tagNEWTEXTMETRICA *NPNEWTEXTMETRICA; }extern "C" { typedef tagNEWTEXTMETRICA *LPNEWTEXTMETRICA; }
#line 1073
extern "C" { typedef 
#line 1047
struct tagNEWTEXTMETRICW { 

LONG tmHeight; 
LONG tmAscent; 
LONG tmDescent; 
LONG tmInternalLeading; 
LONG tmExternalLeading; 
LONG tmAveCharWidth; 
LONG tmMaxCharWidth; 
LONG tmWeight; 
LONG tmOverhang; 
LONG tmDigitizedAspectX; 
LONG tmDigitizedAspectY; 
WCHAR tmFirstChar; 
WCHAR tmLastChar; 
WCHAR tmDefaultChar; 
WCHAR tmBreakChar; 
BYTE tmItalic; 
BYTE tmUnderlined; 
BYTE tmStruckOut; 
BYTE tmPitchAndFamily; 
BYTE tmCharSet; 
DWORD ntmFlags; 
UINT ntmSizeEM; 
UINT ntmCellHeight; 
UINT ntmAvgWidth; 
} NEWTEXTMETRICW; }extern "C" { typedef tagNEWTEXTMETRICW *PNEWTEXTMETRICW; }extern "C" { typedef tagNEWTEXTMETRICW *NPNEWTEXTMETRICW; }extern "C" { typedef tagNEWTEXTMETRICW *LPNEWTEXTMETRICW; }
#line 1080
extern "C" { typedef NEWTEXTMETRICA NEWTEXTMETRIC; }
extern "C" { typedef PNEWTEXTMETRICA PNEWTEXTMETRIC; }
extern "C" { typedef NPNEWTEXTMETRICA NPNEWTEXTMETRIC; }
extern "C" { typedef LPNEWTEXTMETRICA LPNEWTEXTMETRIC; }
#line 27 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack ( pop )
#line 1092 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 1088
struct tagNEWTEXTMETRICEXA { 

NEWTEXTMETRICA ntmTm; 
FONTSIGNATURE ntmFontSig; 
} NEWTEXTMETRICEXA; }




extern "C" { typedef 
#line 1093
struct tagNEWTEXTMETRICEXW { 

NEWTEXTMETRICW ntmTm; 
FONTSIGNATURE ntmFontSig; 
} NEWTEXTMETRICEXW; }



extern "C" { typedef NEWTEXTMETRICEXA NEWTEXTMETRICEX; }
#line 1116 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 1109
struct tagPELARRAY { 

LONG paXCount; 
LONG paYCount; 
LONG paXExt; 
LONG paYExt; 
BYTE paRGBs; 
} PELARRAY; }extern "C" { typedef tagPELARRAY *PPELARRAY; }extern "C" { typedef tagPELARRAY *NPPELARRAY; }extern "C" { typedef tagPELARRAY *LPPELARRAY; }
#line 1124
extern "C" { typedef 
#line 1119
struct tagLOGBRUSH { 

UINT lbStyle; 
COLORREF lbColor; 
ULONG_PTR lbHatch; 
} LOGBRUSH; }extern "C" { typedef tagLOGBRUSH *PLOGBRUSH; }extern "C" { typedef tagLOGBRUSH *NPLOGBRUSH; }extern "C" { typedef tagLOGBRUSH *LPLOGBRUSH; }
#line 1131
extern "C" { typedef 
#line 1126
struct tagLOGBRUSH32 { 

UINT lbStyle; 
COLORREF lbColor; 
ULONG lbHatch; 
} LOGBRUSH32; }extern "C" { typedef tagLOGBRUSH32 *PLOGBRUSH32; }extern "C" { typedef tagLOGBRUSH32 *NPLOGBRUSH32; }extern "C" { typedef tagLOGBRUSH32 *LPLOGBRUSH32; }

extern "C" { typedef LOGBRUSH PATTERN; }
extern "C" { typedef PATTERN *PPATTERN; }
extern "C" { typedef PATTERN *NPPATTERN; }
extern "C" { typedef PATTERN *LPPATTERN; }
#line 1144
extern "C" { typedef 
#line 1139
struct tagLOGPEN { 

UINT lopnStyle; 
POINT lopnWidth; 
COLORREF lopnColor; 
} LOGPEN; }extern "C" { typedef tagLOGPEN *PLOGPEN; }extern "C" { typedef tagLOGPEN *NPLOGPEN; }extern "C" { typedef tagLOGPEN *LPLOGPEN; }
#line 1154
extern "C" { typedef 
#line 1146
struct tagEXTLOGPEN { 
DWORD elpPenStyle; 
DWORD elpWidth; 
UINT elpBrushStyle; 
COLORREF elpColor; 
ULONG_PTR elpHatch; 
DWORD elpNumEntries; 
DWORD elpStyleEntry[1]; 
} EXTLOGPEN; }extern "C" { typedef tagEXTLOGPEN *PEXTLOGPEN; }extern "C" { typedef tagEXTLOGPEN *NPEXTLOGPEN; }extern "C" { typedef tagEXTLOGPEN *LPEXTLOGPEN; }
#line 1163
extern "C" { typedef 
#line 1158
struct tagPALETTEENTRY { 
BYTE peRed; 
BYTE peGreen; 
BYTE peBlue; 
BYTE peFlags; 
} PALETTEENTRY; }extern "C" { typedef tagPALETTEENTRY *PPALETTEENTRY; }extern "C" { typedef tagPALETTEENTRY *LPPALETTEENTRY; }
#line 1173 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 1169
struct tagLOGPALETTE { 
WORD palVersion; 
WORD palNumEntries; 
PALETTEENTRY palPalEntry[1]; 
} LOGPALETTE; }extern "C" { typedef tagLOGPALETTE *PLOGPALETTE; }extern "C" { typedef tagLOGPALETTE *NPLOGPALETTE; }extern "C" { typedef tagLOGPALETTE *LPLOGPALETTE; }
#line 1196 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 1180
struct tagLOGFONTA { 

LONG lfHeight; 
LONG lfWidth; 
LONG lfEscapement; 
LONG lfOrientation; 
LONG lfWeight; 
BYTE lfItalic; 
BYTE lfUnderline; 
BYTE lfStrikeOut; 
BYTE lfCharSet; 
BYTE lfOutPrecision; 
BYTE lfClipPrecision; 
BYTE lfQuality; 
BYTE lfPitchAndFamily; 
CHAR lfFaceName[32]; 
} LOGFONTA; }extern "C" { typedef tagLOGFONTA *PLOGFONTA; }extern "C" { typedef tagLOGFONTA *NPLOGFONTA; }extern "C" { typedef tagLOGFONTA *LPLOGFONTA; }
#line 1213
extern "C" { typedef 
#line 1197
struct tagLOGFONTW { 

LONG lfHeight; 
LONG lfWidth; 
LONG lfEscapement; 
LONG lfOrientation; 
LONG lfWeight; 
BYTE lfItalic; 
BYTE lfUnderline; 
BYTE lfStrikeOut; 
BYTE lfCharSet; 
BYTE lfOutPrecision; 
BYTE lfClipPrecision; 
BYTE lfQuality; 
BYTE lfPitchAndFamily; 
WCHAR lfFaceName[32]; 
} LOGFONTW; }extern "C" { typedef tagLOGFONTW *PLOGFONTW; }extern "C" { typedef tagLOGFONTW *NPLOGFONTW; }extern "C" { typedef tagLOGFONTW *LPLOGFONTW; }
#line 1220
extern "C" { typedef LOGFONTA LOGFONT; }
extern "C" { typedef PLOGFONTA PLOGFONT; }
extern "C" { typedef NPLOGFONTA NPLOGFONT; }
extern "C" { typedef LPLOGFONTA LPLOGFONT; }
#line 1234 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 1229
struct tagENUMLOGFONTA { 

LOGFONTA elfLogFont; 
BYTE elfFullName[64]; 
BYTE elfStyle[32]; 
} ENUMLOGFONTA; }extern "C" { typedef tagENUMLOGFONTA *LPENUMLOGFONTA; }
#line 1241
extern "C" { typedef 
#line 1236
struct tagENUMLOGFONTW { 

LOGFONTW elfLogFont; 
WCHAR elfFullName[64]; 
WCHAR elfStyle[32]; 
} ENUMLOGFONTW; }extern "C" { typedef tagENUMLOGFONTW *LPENUMLOGFONTW; }




extern "C" { typedef ENUMLOGFONTA ENUMLOGFONT; }
extern "C" { typedef LPENUMLOGFONTA LPENUMLOGFONT; }
#line 1257 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 1251
struct tagENUMLOGFONTEXA { 

LOGFONTA elfLogFont; 
BYTE elfFullName[64]; 
BYTE elfStyle[32]; 
BYTE elfScript[32]; 
} ENUMLOGFONTEXA; }extern "C" { typedef tagENUMLOGFONTEXA *LPENUMLOGFONTEXA; }
#line 1264
extern "C" { typedef 
#line 1258
struct tagENUMLOGFONTEXW { 

LOGFONTW elfLogFont; 
WCHAR elfFullName[64]; 
WCHAR elfStyle[32]; 
WCHAR elfScript[32]; 
} ENUMLOGFONTEXW; }extern "C" { typedef tagENUMLOGFONTEXW *LPENUMLOGFONTEXW; }




extern "C" { typedef ENUMLOGFONTEXA ENUMLOGFONTEX; }
extern "C" { typedef LPENUMLOGFONTEXA LPENUMLOGFONTEX; }
#line 1413 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 1401
struct tagPANOSE { 

BYTE bFamilyType; 
BYTE bSerifStyle; 
BYTE bWeight; 
BYTE bProportion; 
BYTE bContrast; 
BYTE bStrokeVariation; 
BYTE bArmStyle; 
BYTE bLetterform; 
BYTE bMidline; 
BYTE bXHeight; 
} PANOSE; }extern "C" { typedef tagPANOSE *LPPANOSE; }
#line 1538
extern "C" { typedef 
#line 1527
struct tagEXTLOGFONTA { 
LOGFONTA elfLogFont; 
BYTE elfFullName[64]; 
BYTE elfStyle[32]; 
DWORD elfVersion; 
DWORD elfStyleSize; 
DWORD elfMatch; 
DWORD elfReserved; 
BYTE elfVendorId[4]; 
DWORD elfCulture; 
PANOSE elfPanose; 
} EXTLOGFONTA; }extern "C" { typedef tagEXTLOGFONTA *PEXTLOGFONTA; }extern "C" { typedef tagEXTLOGFONTA *NPEXTLOGFONTA; }extern "C" { typedef tagEXTLOGFONTA *LPEXTLOGFONTA; }
#line 1550
extern "C" { typedef 
#line 1539
struct tagEXTLOGFONTW { 
LOGFONTW elfLogFont; 
WCHAR elfFullName[64]; 
WCHAR elfStyle[32]; 
DWORD elfVersion; 
DWORD elfStyleSize; 
DWORD elfMatch; 
DWORD elfReserved; 
BYTE elfVendorId[4]; 
DWORD elfCulture; 
PANOSE elfPanose; 
} EXTLOGFONTW; }extern "C" { typedef tagEXTLOGFONTW *PEXTLOGFONTW; }extern "C" { typedef tagEXTLOGFONTW *NPEXTLOGFONTW; }extern "C" { typedef tagEXTLOGFONTW *LPEXTLOGFONTW; }
#line 1557
extern "C" { typedef EXTLOGFONTA EXTLOGFONT; }
extern "C" { typedef PEXTLOGFONTA PEXTLOGFONT; }
extern "C" { typedef NPEXTLOGFONTA NPEXTLOGFONT; }
extern "C" { typedef LPEXTLOGFONTA LPEXTLOGFONT; }
#line 1958 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 1905 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
struct _devicemodeA { 
BYTE dmDeviceName[32]; 
WORD dmSpecVersion; 
WORD dmDriverVersion; 
WORD dmSize; 
WORD dmDriverExtra; 
DWORD dmFields; 
union { 

struct { 
short dmOrientation; 
short dmPaperSize; 
short dmPaperLength; 
short dmPaperWidth; 
short dmScale; 
short dmCopies; 
short dmDefaultSource; 
short dmPrintQuality; 
}; 

struct { 
POINTL dmPosition; 
DWORD dmDisplayOrientation; 
DWORD dmDisplayFixedOutput; 
}; 
}; 
short dmColor; 
short dmDuplex; 
short dmYResolution; 
short dmTTOption; 
short dmCollate; 
BYTE dmFormName[32]; 
WORD dmLogPixels; 
DWORD dmBitsPerPel; 
DWORD dmPelsWidth; 
DWORD dmPelsHeight; 
union { 
DWORD dmDisplayFlags; 
DWORD dmNup; 
}; 
DWORD dmDisplayFrequency; 

DWORD dmICMMethod; 
DWORD dmICMIntent; 
DWORD dmMediaType; 
DWORD dmDitherType; 
DWORD dmReserved1; 
DWORD dmReserved2; 

DWORD dmPanningWidth; 
DWORD dmPanningHeight; 
#line 1958 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
} DEVMODEA; }extern "C" { typedef _devicemodeA *PDEVMODEA; }extern "C" { typedef _devicemodeA *NPDEVMODEA; }extern "C" { typedef _devicemodeA *LPDEVMODEA; }
#line 2012 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 1959 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
struct _devicemodeW { 
WCHAR dmDeviceName[32]; 
WORD dmSpecVersion; 
WORD dmDriverVersion; 
WORD dmSize; 
WORD dmDriverExtra; 
DWORD dmFields; 
union { 

struct { 
short dmOrientation; 
short dmPaperSize; 
short dmPaperLength; 
short dmPaperWidth; 
short dmScale; 
short dmCopies; 
short dmDefaultSource; 
short dmPrintQuality; 
}; 

struct { 
POINTL dmPosition; 
DWORD dmDisplayOrientation; 
DWORD dmDisplayFixedOutput; 
}; 
}; 
short dmColor; 
short dmDuplex; 
short dmYResolution; 
short dmTTOption; 
short dmCollate; 
WCHAR dmFormName[32]; 
WORD dmLogPixels; 
DWORD dmBitsPerPel; 
DWORD dmPelsWidth; 
DWORD dmPelsHeight; 
union { 
DWORD dmDisplayFlags; 
DWORD dmNup; 
}; 
DWORD dmDisplayFrequency; 

DWORD dmICMMethod; 
DWORD dmICMIntent; 
DWORD dmMediaType; 
DWORD dmDitherType; 
DWORD dmReserved1; 
DWORD dmReserved2; 

DWORD dmPanningWidth; 
DWORD dmPanningHeight; 
#line 2012 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
} DEVMODEW; }extern "C" { typedef _devicemodeW *PDEVMODEW; }extern "C" { typedef _devicemodeW *NPDEVMODEW; }extern "C" { typedef _devicemodeW *LPDEVMODEW; }
#line 2019
extern "C" { typedef DEVMODEA DEVMODE; }
extern "C" { typedef PDEVMODEA PDEVMODE; }
extern "C" { typedef NPDEVMODEA NPDEVMODE; }
extern "C" { typedef LPDEVMODEA LPDEVMODE; }
#line 2439 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 2432
struct _DISPLAY_DEVICEA { 
DWORD cb; 
CHAR DeviceName[32]; 
CHAR DeviceString[128]; 
DWORD StateFlags; 
CHAR DeviceID[128]; 
CHAR DeviceKey[128]; 
} DISPLAY_DEVICEA; }extern "C" { typedef _DISPLAY_DEVICEA *PDISPLAY_DEVICEA; }extern "C" { typedef _DISPLAY_DEVICEA *LPDISPLAY_DEVICEA; }
#line 2447
extern "C" { typedef 
#line 2440
struct _DISPLAY_DEVICEW { 
DWORD cb; 
WCHAR DeviceName[32]; 
WCHAR DeviceString[128]; 
DWORD StateFlags; 
WCHAR DeviceID[128]; 
WCHAR DeviceKey[128]; 
} DISPLAY_DEVICEW; }extern "C" { typedef _DISPLAY_DEVICEW *PDISPLAY_DEVICEW; }extern "C" { typedef _DISPLAY_DEVICEW *LPDISPLAY_DEVICEW; }
#line 2453
extern "C" { typedef DISPLAY_DEVICEA DISPLAY_DEVICE; }
extern "C" { typedef PDISPLAY_DEVICEA PDISPLAY_DEVICE; }
extern "C" { typedef LPDISPLAY_DEVICEA LPDISPLAY_DEVICE; }
#line 2492 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 2486
struct _RGNDATAHEADER { 
DWORD dwSize; 
DWORD iType; 
DWORD nCount; 
DWORD nRgnSize; 
RECT rcBound; 
} RGNDATAHEADER; }extern "C" { typedef _RGNDATAHEADER *PRGNDATAHEADER; }




extern "C" { typedef 
#line 2494
struct _RGNDATA { 
RGNDATAHEADER rdh; 
char Buffer[1]; 
} RGNDATA; }extern "C" { typedef _RGNDATA *PRGNDATA; }extern "C" { typedef _RGNDATA *NPRGNDATA; }extern "C" { typedef _RGNDATA *LPRGNDATA; }
#line 2507
extern "C" { typedef 
#line 2503
struct _ABC { 
int abcA; 
UINT abcB; 
int abcC; 
} ABC; }extern "C" { typedef _ABC *PABC; }extern "C" { typedef _ABC *NPABC; }extern "C" { typedef _ABC *LPABC; }
#line 2513
extern "C" { typedef 
#line 2509
struct _ABCFLOAT { 
FLOAT abcfA; 
FLOAT abcfB; 
FLOAT abcfC; 
} ABCFLOAT; }extern "C" { typedef _ABCFLOAT *PABCFLOAT; }extern "C" { typedef _ABCFLOAT *NPABCFLOAT; }extern "C" { typedef _ABCFLOAT *LPABCFLOAT; }
#line 2553
extern "C" { typedef 
#line 2520
struct _OUTLINETEXTMETRICA { 
UINT otmSize; 
TEXTMETRICA otmTextMetrics; 
BYTE otmFiller; 
PANOSE otmPanoseNumber; 
UINT otmfsSelection; 
UINT otmfsType; 
int otmsCharSlopeRise; 
int otmsCharSlopeRun; 
int otmItalicAngle; 
UINT otmEMSquare; 
int otmAscent; 
int otmDescent; 
UINT otmLineGap; 
UINT otmsCapEmHeight; 
UINT otmsXHeight; 
RECT otmrcFontBox; 
int otmMacAscent; 
int otmMacDescent; 
UINT otmMacLineGap; 
UINT otmusMinimumPPEM; 
POINT otmptSubscriptSize; 
POINT otmptSubscriptOffset; 
POINT otmptSuperscriptSize; 
POINT otmptSuperscriptOffset; 
UINT otmsStrikeoutSize; 
int otmsStrikeoutPosition; 
int otmsUnderscoreSize; 
int otmsUnderscorePosition; 
PSTR otmpFamilyName; 
PSTR otmpFaceName; 
PSTR otmpStyleName; 
PSTR otmpFullName; 
} OUTLINETEXTMETRICA; }extern "C" { typedef _OUTLINETEXTMETRICA *POUTLINETEXTMETRICA; }extern "C" { typedef _OUTLINETEXTMETRICA *NPOUTLINETEXTMETRICA; }extern "C" { typedef _OUTLINETEXTMETRICA *LPOUTLINETEXTMETRICA; }
#line 2587
extern "C" { typedef 
#line 2554
struct _OUTLINETEXTMETRICW { 
UINT otmSize; 
TEXTMETRICW otmTextMetrics; 
BYTE otmFiller; 
PANOSE otmPanoseNumber; 
UINT otmfsSelection; 
UINT otmfsType; 
int otmsCharSlopeRise; 
int otmsCharSlopeRun; 
int otmItalicAngle; 
UINT otmEMSquare; 
int otmAscent; 
int otmDescent; 
UINT otmLineGap; 
UINT otmsCapEmHeight; 
UINT otmsXHeight; 
RECT otmrcFontBox; 
int otmMacAscent; 
int otmMacDescent; 
UINT otmMacLineGap; 
UINT otmusMinimumPPEM; 
POINT otmptSubscriptSize; 
POINT otmptSubscriptOffset; 
POINT otmptSuperscriptSize; 
POINT otmptSuperscriptOffset; 
UINT otmsStrikeoutSize; 
int otmsStrikeoutPosition; 
int otmsUnderscoreSize; 
int otmsUnderscorePosition; 
PSTR otmpFamilyName; 
PSTR otmpFaceName; 
PSTR otmpStyleName; 
PSTR otmpFullName; 
} OUTLINETEXTMETRICW; }extern "C" { typedef _OUTLINETEXTMETRICW *POUTLINETEXTMETRICW; }extern "C" { typedef _OUTLINETEXTMETRICW *NPOUTLINETEXTMETRICW; }extern "C" { typedef _OUTLINETEXTMETRICW *LPOUTLINETEXTMETRICW; }
#line 2594
extern "C" { typedef OUTLINETEXTMETRICA OUTLINETEXTMETRIC; }
extern "C" { typedef POUTLINETEXTMETRICA POUTLINETEXTMETRIC; }
extern "C" { typedef NPOUTLINETEXTMETRICA NPOUTLINETEXTMETRIC; }
extern "C" { typedef LPOUTLINETEXTMETRICA LPOUTLINETEXTMETRIC; }
#line 2616 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 2607
struct tagPOLYTEXTA { 

int x; 
int y; 
UINT n; 
LPCSTR lpstr; 
UINT uiFlags; 
RECT rcl; 
int *pdx; 
} POLYTEXTA; }extern "C" { typedef tagPOLYTEXTA *PPOLYTEXTA; }extern "C" { typedef tagPOLYTEXTA *NPPOLYTEXTA; }extern "C" { typedef tagPOLYTEXTA *LPPOLYTEXTA; }
#line 2626
extern "C" { typedef 
#line 2617
struct tagPOLYTEXTW { 

int x; 
int y; 
UINT n; 
LPCWSTR lpstr; 
UINT uiFlags; 
RECT rcl; 
int *pdx; 
} POLYTEXTW; }extern "C" { typedef tagPOLYTEXTW *PPOLYTEXTW; }extern "C" { typedef tagPOLYTEXTW *NPPOLYTEXTW; }extern "C" { typedef tagPOLYTEXTW *LPPOLYTEXTW; }
#line 2633
extern "C" { typedef POLYTEXTA POLYTEXT; }
extern "C" { typedef PPOLYTEXTA PPOLYTEXT; }
extern "C" { typedef NPPOLYTEXTA NPPOLYTEXT; }
extern "C" { typedef LPPOLYTEXTA LPPOLYTEXT; }
#line 2647 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 2639 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
struct _FIXED { 

WORD fract; 
short value; 
#line 2647 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
} FIXED; }
#line 2655
extern "C" { typedef 
#line 2650
struct _MAT2 { 
FIXED eM11; 
FIXED eM12; 
FIXED eM21; 
FIXED eM22; 
} MAT2; }extern "C" { typedef _MAT2 *LPMAT2; }
#line 2665
extern "C" { typedef 
#line 2659
struct _GLYPHMETRICS { 
UINT gmBlackBoxX; 
UINT gmBlackBoxY; 
POINT gmptGlyphOrigin; 
short gmCellIncX; 
short gmCellIncY; 
} GLYPHMETRICS; }extern "C" { typedef _GLYPHMETRICS *LPGLYPHMETRICS; }
#line 2695 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 2691
struct tagPOINTFX { 

FIXED x; 
FIXED y; 
} POINTFX; }extern "C" { typedef tagPOINTFX *LPPOINTFX; }
#line 2702
extern "C" { typedef 
#line 2697
struct tagTTPOLYCURVE { 

WORD wType; 
WORD cpfx; 
POINTFX apfx[1]; 
} TTPOLYCURVE; }extern "C" { typedef tagTTPOLYCURVE *LPTTPOLYCURVE; }
#line 2709
extern "C" { typedef 
#line 2704
struct tagTTPOLYGONHEADER { 

DWORD cb; 
DWORD dwType; 
POINTFX pfxStart; 
} TTPOLYGONHEADER; }extern "C" { typedef tagTTPOLYGONHEADER *LPTTPOLYGONHEADER; }
#line 2766
extern "C" { typedef 
#line 2755
struct tagGCP_RESULTSA { 

DWORD lStructSize; 
LPSTR lpOutString; 
UINT *lpOrder; 
int *lpDx; 
int *lpCaretPos; 
LPSTR lpClass; 
LPWSTR lpGlyphs; 
UINT nGlyphs; 
int nMaxFit; 
} GCP_RESULTSA; }extern "C" { typedef tagGCP_RESULTSA *LPGCP_RESULTSA; }
#line 2778
extern "C" { typedef 
#line 2767
struct tagGCP_RESULTSW { 

DWORD lStructSize; 
LPWSTR lpOutString; 
UINT *lpOrder; 
int *lpDx; 
int *lpCaretPos; 
LPSTR lpClass; 
LPWSTR lpGlyphs; 
UINT nGlyphs; 
int nMaxFit; 
} GCP_RESULTSW; }extern "C" { typedef tagGCP_RESULTSW *LPGCP_RESULTSW; }




extern "C" { typedef GCP_RESULTSA GCP_RESULTS; }
extern "C" { typedef LPGCP_RESULTSA LPGCP_RESULTS; }
#line 2792 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 2788
struct _RASTERIZER_STATUS { 
short nSize; 
short wFlags; 
short nLanguageID; 
} RASTERIZER_STATUS; }extern "C" { typedef _RASTERIZER_STATUS *LPRASTERIZER_STATUS; }
#line 2827
extern "C" { typedef 
#line 2799
struct tagPIXELFORMATDESCRIPTOR { 

WORD nSize; 
WORD nVersion; 
DWORD dwFlags; 
BYTE iPixelType; 
BYTE cColorBits; 
BYTE cRedBits; 
BYTE cRedShift; 
BYTE cGreenBits; 
BYTE cGreenShift; 
BYTE cBlueBits; 
BYTE cBlueShift; 
BYTE cAlphaBits; 
BYTE cAlphaShift; 
BYTE cAccumBits; 
BYTE cAccumRedBits; 
BYTE cAccumGreenBits; 
BYTE cAccumBlueBits; 
BYTE cAccumAlphaBits; 
BYTE cDepthBits; 
BYTE cStencilBits; 
BYTE cAuxBuffers; 
BYTE iLayerType; 
BYTE bReserved; 
DWORD dwLayerMask; 
DWORD dwVisibleMask; 
DWORD dwDamageMask; 
} PIXELFORMATDESCRIPTOR; }extern "C" { typedef tagPIXELFORMATDESCRIPTOR *PPIXELFORMATDESCRIPTOR; }extern "C" { typedef tagPIXELFORMATDESCRIPTOR *LPPIXELFORMATDESCRIPTOR; }
#line 2863
extern "C" { typedef int (__stdcall *OLDFONTENUMPROCA)(const LOGFONTA *, const TEXTMETRICA *, DWORD, LPARAM); }
extern "C" { typedef int (__stdcall *OLDFONTENUMPROCW)(const LOGFONTW *, const TEXTMETRICW *, DWORD, LPARAM); }
#line 2880 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef OLDFONTENUMPROCA FONTENUMPROCA; }
extern "C" { typedef OLDFONTENUMPROCW FONTENUMPROCW; }



extern "C" { typedef FONTENUMPROCA FONTENUMPROC; }
#line 2888 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef int (__stdcall *GOBJENUMPROC)(LPVOID, LPARAM); }
extern "C" { typedef void (__stdcall *LINEDDAPROC)(int, int, LPARAM); }
#line 2905 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) int __stdcall AddFontResourceA(LPCSTR); } 
extern "C" { extern __declspec( dllimport ) int __stdcall AddFontResourceW(LPCWSTR); } 
#line 2913 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AnimatePalette(HPALETTE, UINT, UINT, const PALETTEENTRY *); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall Arc(HDC, int, int, int, int, int, int, int, int); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall BitBlt(HDC, int, int, int, int, HDC, int, int, DWORD); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CancelDC(HDC); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall Chord(HDC, int, int, int, int, int, int, int, int); } 
extern "C" { extern __declspec( dllimport ) int __stdcall ChoosePixelFormat(HDC, const PIXELFORMATDESCRIPTOR *); } 
extern "C" { extern __declspec( dllimport ) HMETAFILE __stdcall CloseMetaFile(HDC); } 
extern "C" { extern __declspec( dllimport ) int __stdcall CombineRgn(HRGN, HRGN, HRGN, int); } 
extern "C" { extern __declspec( dllimport ) HMETAFILE __stdcall CopyMetaFileA(HMETAFILE, LPCSTR); } 
extern "C" { extern __declspec( dllimport ) HMETAFILE __stdcall CopyMetaFileW(HMETAFILE, LPCWSTR); } 
#line 2928 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) HBITMAP __stdcall CreateBitmap(int, int, UINT, UINT, const void *); } 
extern "C" { extern __declspec( dllimport ) HBITMAP __stdcall CreateBitmapIndirect(const BITMAP *); } 
extern "C" { extern __declspec( dllimport ) HBRUSH __stdcall CreateBrushIndirect(const LOGBRUSH *); } 
extern "C" { extern __declspec( dllimport ) HBITMAP __stdcall CreateCompatibleBitmap(HDC, int, int); } 
extern "C" { extern __declspec( dllimport ) HBITMAP __stdcall CreateDiscardableBitmap(HDC, int, int); } 
extern "C" { extern __declspec( dllimport ) HDC __stdcall CreateCompatibleDC(HDC); } 
extern "C" { extern __declspec( dllimport ) HDC __stdcall CreateDCA(LPCSTR, LPCSTR, LPCSTR, const DEVMODEA *); } 
extern "C" { extern __declspec( dllimport ) HDC __stdcall CreateDCW(LPCWSTR, LPCWSTR, LPCWSTR, const DEVMODEW *); } 
#line 2941 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) HBITMAP __stdcall CreateDIBitmap(HDC, const BITMAPINFOHEADER *, DWORD, const void *, const BITMAPINFO *, UINT); } 
extern "C" { extern __declspec( dllimport ) HBRUSH __stdcall CreateDIBPatternBrush(HGLOBAL, UINT); } 
extern "C" { extern __declspec( dllimport ) HBRUSH __stdcall CreateDIBPatternBrushPt(const void *, UINT); } 
extern "C" { extern __declspec( dllimport ) HRGN __stdcall CreateEllipticRgn(int, int, int, int); } 
extern "C" { extern __declspec( dllimport ) HRGN __stdcall CreateEllipticRgnIndirect(const RECT *); } 
extern "C" { extern __declspec( dllimport ) HFONT __stdcall CreateFontIndirectA(const LOGFONTA *); } 
extern "C" { extern __declspec( dllimport ) HFONT __stdcall CreateFontIndirectW(const LOGFONTW *); } 
#line 2953 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) HFONT __stdcall CreateFontA(int, int, int, int, int, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, LPCSTR); } 


extern "C" { extern __declspec( dllimport ) HFONT __stdcall CreateFontW(int, int, int, int, int, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, LPCWSTR); } 
#line 2965 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) HBRUSH __stdcall CreateHatchBrush(int, COLORREF); } 
extern "C" { extern __declspec( dllimport ) HDC __stdcall CreateICA(LPCSTR, LPCSTR, LPCSTR, const DEVMODEA *); } 
extern "C" { extern __declspec( dllimport ) HDC __stdcall CreateICW(LPCWSTR, LPCWSTR, LPCWSTR, const DEVMODEW *); } 
#line 2973 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) HDC __stdcall CreateMetaFileA(LPCSTR); } 
extern "C" { extern __declspec( dllimport ) HDC __stdcall CreateMetaFileW(LPCWSTR); } 
#line 2980 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) HPALETTE __stdcall CreatePalette(const LOGPALETTE *); } 
extern "C" { extern __declspec( dllimport ) HPEN __stdcall CreatePen(int, int, COLORREF); } 
extern "C" { extern __declspec( dllimport ) HPEN __stdcall CreatePenIndirect(const LOGPEN *); } 
extern "C" { extern __declspec( dllimport ) HRGN __stdcall CreatePolyPolygonRgn(const POINT *, const INT *, int, int); } 



extern "C" { extern __declspec( dllimport ) HBRUSH __stdcall CreatePatternBrush(HBITMAP); } 
extern "C" { extern __declspec( dllimport ) HRGN __stdcall CreateRectRgn(int, int, int, int); } 
extern "C" { extern __declspec( dllimport ) HRGN __stdcall CreateRectRgnIndirect(const RECT *); } 
extern "C" { extern __declspec( dllimport ) HRGN __stdcall CreateRoundRectRgn(int, int, int, int, int, int); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CreateScalableFontResourceA(DWORD, LPCSTR, LPCSTR, LPCSTR); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CreateScalableFontResourceW(DWORD, LPCWSTR, LPCWSTR, LPCWSTR); } 
#line 2998 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) HBRUSH __stdcall CreateSolidBrush(COLORREF); } 

extern "C" { extern __declspec( dllimport ) BOOL __stdcall DeleteDC(HDC); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DeleteMetaFile(HMETAFILE); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DeleteObject(HGDIOBJ); } 
extern "C" { extern __declspec( dllimport ) int __stdcall DescribePixelFormat(HDC, int, UINT, LPPIXELFORMATDESCRIPTOR); } 
#line 3012
extern "C" { typedef UINT (__stdcall *LPFNDEVMODE)(HWND, HMODULE, LPDEVMODE, LPSTR, LPSTR, LPDEVMODE, LPSTR, UINT); }

extern "C" { typedef DWORD (__stdcall *LPFNDEVCAPS)(LPSTR, LPSTR, UINT, LPSTR, LPDEVMODE); }
#line 3096 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) int __stdcall DeviceCapabilitiesA(LPCSTR, LPCSTR, WORD, LPSTR, const DEVMODEA *); } 
#line 3106
extern "C" { extern __declspec( dllimport ) int __stdcall DeviceCapabilitiesW(LPCWSTR, LPCWSTR, WORD, LPWSTR, const DEVMODEW *); } 
#line 3119 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) int __stdcall DrawEscape(HDC, int, int, LPCSTR); } 




extern "C" { extern __declspec( dllimport ) BOOL __stdcall Ellipse(HDC, int, int, int, int); } 


extern "C" { extern __declspec( dllimport ) int __stdcall EnumFontFamiliesExA(HDC, LPLOGFONTA, FONTENUMPROCA, LPARAM, DWORD); } 
extern "C" { extern __declspec( dllimport ) int __stdcall EnumFontFamiliesExW(HDC, LPLOGFONTW, FONTENUMPROCW, LPARAM, DWORD); } 
#line 3136 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) int __stdcall EnumFontFamiliesA(HDC, LPCSTR, FONTENUMPROCA, LPARAM); } 
extern "C" { extern __declspec( dllimport ) int __stdcall EnumFontFamiliesW(HDC, LPCWSTR, FONTENUMPROCW, LPARAM); } 
#line 3143 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) int __stdcall EnumFontsA(HDC, LPCSTR, FONTENUMPROCA, LPARAM); } 
extern "C" { extern __declspec( dllimport ) int __stdcall EnumFontsW(HDC, LPCWSTR, FONTENUMPROCW, LPARAM); } 
#line 3152 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) int __stdcall EnumObjects(HDC, int, GOBJENUMPROC, LPARAM); } 
#line 3158 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EqualRgn(HRGN, HRGN); } 
extern "C" { extern __declspec( dllimport ) int __stdcall Escape(HDC, int, int, LPCSTR, LPVOID); } 




extern "C" { extern __declspec( dllimport ) int __stdcall ExtEscape(HDC, int, int, LPCSTR, int, LPSTR); } 
#line 3170
extern "C" { extern __declspec( dllimport ) int __stdcall ExcludeClipRect(HDC, int, int, int, int); } 
extern "C" { extern __declspec( dllimport ) HRGN __stdcall ExtCreateRegion(const XFORM *, DWORD, const RGNDATA *); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ExtFloodFill(HDC, int, int, COLORREF, UINT); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FillRgn(HDC, HRGN, HBRUSH); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FloodFill(HDC, int, int, COLORREF); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FrameRgn(HDC, HRGN, HBRUSH, int, int); } 
extern "C" { extern __declspec( dllimport ) int __stdcall GetROP2(HDC); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetAspectRatioFilterEx(HDC, LPSIZE); } 
extern "C" { extern __declspec( dllimport ) COLORREF __stdcall GetBkColor(HDC); } 


extern "C" { extern __declspec( dllimport ) COLORREF __stdcall GetDCBrushColor(HDC); } 
extern "C" { extern __declspec( dllimport ) COLORREF __stdcall GetDCPenColor(HDC); } 
#line 3188 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) int __stdcall GetBkMode(HDC); } 
#line 3195
extern "C" { extern __declspec( dllimport ) LONG __stdcall GetBitmapBits(HBITMAP, LONG, LPVOID); } 
#line 3201
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetBitmapDimensionEx(HBITMAP, LPSIZE); } 
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetBoundsRect(HDC, LPRECT, UINT); } 

extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetBrushOrgEx(HDC, LPPOINT); } 

extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetCharWidthA(HDC, UINT, UINT, LPINT); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetCharWidthW(HDC, UINT, UINT, LPINT); } 
#line 3213 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetCharWidth32A(HDC, UINT, UINT, LPINT); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetCharWidth32W(HDC, UINT, UINT, LPINT); } 
#line 3220 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetCharWidthFloatA(HDC, UINT, UINT, PFLOAT); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetCharWidthFloatW(HDC, UINT, UINT, PFLOAT); } 
#line 3228 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetCharABCWidthsA(HDC, UINT, UINT, LPABC); } 



extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetCharABCWidthsW(HDC, UINT, UINT, LPABC); } 
#line 3242 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetCharABCWidthsFloatA(HDC, UINT, UINT, LPABCFLOAT); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetCharABCWidthsFloatW(HDC, UINT, UINT, LPABCFLOAT); } 
#line 3249 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) int __stdcall GetClipBox(HDC, LPRECT); } 
extern "C" { extern __declspec( dllimport ) int __stdcall GetClipRgn(HDC, HRGN); } 
extern "C" { extern __declspec( dllimport ) int __stdcall GetMetaRgn(HDC, HRGN); } 
extern "C" { extern __declspec( dllimport ) HGDIOBJ __stdcall GetCurrentObject(HDC, UINT); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetCurrentPositionEx(HDC, LPPOINT); } 
extern "C" { extern __declspec( dllimport ) int __stdcall GetDeviceCaps(HDC, int); } 
extern "C" { extern __declspec( dllimport ) int __stdcall GetDIBits(HDC, HBITMAP, UINT, UINT, LPVOID, LPBITMAPINFO, UINT); } 


extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetFontData(HDC, DWORD, DWORD, PVOID, DWORD); } 
#line 3265
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetGlyphOutlineA(HDC, UINT, UINT, LPGLYPHMETRICS, DWORD, LPVOID, const MAT2 *); } 
#line 3273
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetGlyphOutlineW(HDC, UINT, UINT, LPGLYPHMETRICS, DWORD, LPVOID, const MAT2 *); } 
#line 3287 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) int __stdcall GetGraphicsMode(HDC); } 
extern "C" { extern __declspec( dllimport ) int __stdcall GetMapMode(HDC); } 
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetMetaFileBitsEx(HMETAFILE, UINT, LPVOID); } 
extern "C" { extern __declspec( dllimport ) HMETAFILE __stdcall GetMetaFileA(LPCSTR); } 
extern "C" { extern __declspec( dllimport ) HMETAFILE __stdcall GetMetaFileW(LPCWSTR); } 
#line 3297 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) COLORREF __stdcall GetNearestColor(HDC, COLORREF); } 
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetNearestPaletteIndex(HPALETTE, COLORREF); } 
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetObjectType(HGDIOBJ); } 



extern "C" { extern __declspec( dllimport ) UINT __stdcall GetOutlineTextMetricsA(HDC, UINT, LPOUTLINETEXTMETRICA); } 


extern "C" { extern __declspec( dllimport ) UINT __stdcall GetOutlineTextMetricsW(HDC, UINT, LPOUTLINETEXTMETRICW); } 
#line 3317 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetPaletteEntries(HPALETTE, UINT, UINT, LPPALETTEENTRY); } 



extern "C" { extern __declspec( dllimport ) COLORREF __stdcall GetPixel(HDC, int, int); } 
extern "C" { extern __declspec( dllimport ) int __stdcall GetPixelFormat(HDC); } 
extern "C" { extern __declspec( dllimport ) int __stdcall GetPolyFillMode(HDC); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetRasterizerCaps(LPRASTERIZER_STATUS, UINT); } 


extern "C" { extern __declspec( dllimport ) int __stdcall GetRandomRgn(HDC, HRGN, INT); } 
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetRegionData(HRGN, DWORD, LPRGNDATA); } 


extern "C" { extern __declspec( dllimport ) int __stdcall GetRgnBox(HRGN, LPRECT); } 
extern "C" { extern __declspec( dllimport ) HGDIOBJ __stdcall GetStockObject(int); } 
extern "C" { extern __declspec( dllimport ) int __stdcall GetStretchBltMode(HDC); } 



extern "C" { extern __declspec( dllimport ) UINT __stdcall GetSystemPaletteEntries(HDC, UINT, UINT, LPPALETTEENTRY); } 
#line 3344
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetSystemPaletteUse(HDC); } 
extern "C" { extern __declspec( dllimport ) int __stdcall GetTextCharacterExtra(HDC); } 
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetTextAlign(HDC); } 
extern "C" { extern __declspec( dllimport ) COLORREF __stdcall GetTextColor(HDC); } 




extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetTextExtentPointA(HDC, LPCSTR, int, LPSIZE); } 
#line 3361
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetTextExtentPointW(HDC, LPCWSTR, int, LPSIZE); } 
#line 3376 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetTextExtentPoint32A(HDC, LPCSTR, int, LPSIZE); } 
#line 3385
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetTextExtentPoint32W(HDC, LPCWSTR, int, LPSIZE); } 
#line 3400 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetTextExtentExPointA(HDC, LPCSTR, int, int, LPINT, LPINT, LPSIZE); } 
#line 3412
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetTextExtentExPointW(HDC, LPCWSTR, int, int, LPINT, LPINT, LPSIZE); } 
#line 3428 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) int __stdcall GetTextCharset(HDC); } 
extern "C" { extern __declspec( dllimport ) int __stdcall GetTextCharsetInfo(HDC, LPFONTSIGNATURE, DWORD); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall TranslateCharsetInfo(DWORD *, LPCHARSETINFO, DWORD); } 
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetFontLanguageInfo(HDC); } 
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetCharacterPlacementA(HDC, LPCSTR, int, int, LPGCP_RESULTSA, DWORD); } 
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetCharacterPlacementW(HDC, LPCWSTR, int, int, LPGCP_RESULTSW, DWORD); } 
#line 3447 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 3443
struct tagWCRANGE { 

WCHAR wcLow; 
USHORT cGlyphs; 
} WCRANGE; }extern "C" { typedef tagWCRANGE *PWCRANGE; }extern "C" { typedef tagWCRANGE *LPWCRANGE; }
#line 3457
extern "C" { typedef 
#line 3450
struct tagGLYPHSET { 

DWORD cbThis; 
DWORD flAccel; 
DWORD cGlyphsSupported; 
DWORD cRanges; 
WCRANGE ranges[1]; 
} GLYPHSET; }extern "C" { typedef tagGLYPHSET *PGLYPHSET; }extern "C" { typedef tagGLYPHSET *LPGLYPHSET; }
#line 3467
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetFontUnicodeRanges(HDC, LPGLYPHSET); } 
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetGlyphIndicesA(HDC, LPCSTR, int, LPWORD, DWORD); } 
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetGlyphIndicesW(HDC, LPCWSTR, int, LPWORD, DWORD); } 
#line 3475 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetTextExtentPointI(HDC, LPWORD, int, LPSIZE); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetTextExtentExPointI(HDC, LPWORD, int, int, LPINT, LPINT, LPSIZE); } 
#line 3485
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetCharWidthI(HDC, UINT, UINT, LPWORD, LPINT); } 
#line 3492
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetCharABCWidthsI(HDC, UINT, UINT, LPWORD, LPABC); } 
#line 3511
extern "C" { typedef 
#line 3506
struct tagDESIGNVECTOR { 

DWORD dvReserved; 
DWORD dvNumAxes; 
LONG dvValues[16]; 
} DESIGNVECTOR; }extern "C" { typedef tagDESIGNVECTOR *PDESIGNVECTOR; }extern "C" { typedef tagDESIGNVECTOR *LPDESIGNVECTOR; }

extern "C" { extern __declspec( dllimport ) int __stdcall AddFontResourceExA(LPCSTR, DWORD, PVOID); } 
extern "C" { extern __declspec( dllimport ) int __stdcall AddFontResourceExW(LPCWSTR, DWORD, PVOID); } 
#line 3520 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall RemoveFontResourceExA(LPCSTR, DWORD, PVOID); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall RemoveFontResourceExW(LPCWSTR, DWORD, PVOID); } 
#line 3527 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall AddFontMemResourceEx(PVOID, DWORD, PVOID, DWORD *); } 




extern "C" { extern __declspec( dllimport ) BOOL __stdcall RemoveFontMemResourceEx(HANDLE); } 
#line 3547
extern "C" { typedef 
#line 3542
struct tagAXISINFOA { 

LONG axMinValue; 
LONG axMaxValue; 
BYTE axAxisName[16]; 
} AXISINFOA; }extern "C" { typedef tagAXISINFOA *PAXISINFOA; }extern "C" { typedef tagAXISINFOA *LPAXISINFOA; }
#line 3553
extern "C" { typedef 
#line 3548
struct tagAXISINFOW { 

LONG axMinValue; 
LONG axMaxValue; 
WCHAR axAxisName[16]; 
} AXISINFOW; }extern "C" { typedef tagAXISINFOW *PAXISINFOW; }extern "C" { typedef tagAXISINFOW *LPAXISINFOW; }
#line 3559
extern "C" { typedef AXISINFOA AXISINFO; }
extern "C" { typedef PAXISINFOA PAXISINFO; }
extern "C" { typedef LPAXISINFOA LPAXISINFO; }
#line 3569 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 3564
struct tagAXESLISTA { 

DWORD axlReserved; 
DWORD axlNumAxes; 
AXISINFOA axlAxisInfo[16]; 
} AXESLISTA; }extern "C" { typedef tagAXESLISTA *PAXESLISTA; }extern "C" { typedef tagAXESLISTA *LPAXESLISTA; }
#line 3575
extern "C" { typedef 
#line 3570
struct tagAXESLISTW { 

DWORD axlReserved; 
DWORD axlNumAxes; 
AXISINFOW axlAxisInfo[16]; 
} AXESLISTW; }extern "C" { typedef tagAXESLISTW *PAXESLISTW; }extern "C" { typedef tagAXESLISTW *LPAXESLISTW; }
#line 3581
extern "C" { typedef AXESLISTA AXESLIST; }
extern "C" { typedef PAXESLISTA PAXESLIST; }
extern "C" { typedef LPAXESLISTA LPAXESLIST; }
#line 3594 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 3590
struct tagENUMLOGFONTEXDVA { 

ENUMLOGFONTEXA elfEnumLogfontEx; 
DESIGNVECTOR elfDesignVector; 
} ENUMLOGFONTEXDVA; }extern "C" { typedef tagENUMLOGFONTEXDVA *PENUMLOGFONTEXDVA; }extern "C" { typedef tagENUMLOGFONTEXDVA *LPENUMLOGFONTEXDVA; }




extern "C" { typedef 
#line 3595
struct tagENUMLOGFONTEXDVW { 

ENUMLOGFONTEXW elfEnumLogfontEx; 
DESIGNVECTOR elfDesignVector; 
} ENUMLOGFONTEXDVW; }extern "C" { typedef tagENUMLOGFONTEXDVW *PENUMLOGFONTEXDVW; }extern "C" { typedef tagENUMLOGFONTEXDVW *LPENUMLOGFONTEXDVW; }
#line 3605
extern "C" { typedef ENUMLOGFONTEXDVA ENUMLOGFONTEXDV; }
extern "C" { typedef PENUMLOGFONTEXDVA PENUMLOGFONTEXDV; }
extern "C" { typedef LPENUMLOGFONTEXDVA LPENUMLOGFONTEXDV; }
#line 3610 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) HFONT __stdcall CreateFontIndirectExA(const ENUMLOGFONTEXDVA *); } 
extern "C" { extern __declspec( dllimport ) HFONT __stdcall CreateFontIndirectExW(const ENUMLOGFONTEXDVW *); } 
#line 3623 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 3619
struct tagENUMTEXTMETRICA { 

NEWTEXTMETRICEXA etmNewTextMetricEx; 
AXESLISTA etmAxesList; 
} ENUMTEXTMETRICA; }extern "C" { typedef tagENUMTEXTMETRICA *PENUMTEXTMETRICA; }extern "C" { typedef tagENUMTEXTMETRICA *LPENUMTEXTMETRICA; }




extern "C" { typedef 
#line 3624
struct tagENUMTEXTMETRICW { 

NEWTEXTMETRICEXW etmNewTextMetricEx; 
AXESLISTW etmAxesList; 
} ENUMTEXTMETRICW; }extern "C" { typedef tagENUMTEXTMETRICW *PENUMTEXTMETRICW; }extern "C" { typedef tagENUMTEXTMETRICW *LPENUMTEXTMETRICW; }
#line 3634
extern "C" { typedef ENUMTEXTMETRICA ENUMTEXTMETRIC; }
extern "C" { typedef PENUMTEXTMETRICA PENUMTEXTMETRIC; }
extern "C" { typedef LPENUMTEXTMETRICA LPENUMTEXTMETRIC; }
#line 3642 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetViewportExtEx(HDC, LPSIZE); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetViewportOrgEx(HDC, LPPOINT); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetWindowExtEx(HDC, LPSIZE); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetWindowOrgEx(HDC, LPPOINT); } 

extern "C" { extern __declspec( dllimport ) int __stdcall IntersectClipRect(HDC, int, int, int, int); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall InvertRgn(HDC, HRGN); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall LineDDA(int, int, int, int, LINEDDAPROC, LPARAM); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall LineTo(HDC, int, int); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall MaskBlt(HDC, int, int, int, int, HDC, int, int, HBITMAP, int, int, DWORD); } 

extern "C" { extern __declspec( dllimport ) BOOL __stdcall PlgBlt(HDC, const POINT *, HDC, int, int, int, int, HBITMAP, int, int); } 


extern "C" { extern __declspec( dllimport ) int __stdcall OffsetClipRgn(HDC, int, int); } 
extern "C" { extern __declspec( dllimport ) int __stdcall OffsetRgn(HRGN, int, int); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PatBlt(HDC, int, int, int, int, DWORD); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall Pie(HDC, int, int, int, int, int, int, int, int); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PlayMetaFile(HDC, HMETAFILE); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PaintRgn(HDC, HRGN); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PolyPolygon(HDC, const POINT *, const INT *, int); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PtInRegion(HRGN, int, int); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PtVisible(HDC, int, int); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall RectInRegion(HRGN, const RECT *); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall RectVisible(HDC, const RECT *); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall Rectangle(HDC, int, int, int, int); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall RestoreDC(HDC, int); } 
extern "C" { extern __declspec( dllimport ) HDC __stdcall ResetDCA(HDC, const DEVMODEA *); } 
extern "C" { extern __declspec( dllimport ) HDC __stdcall ResetDCW(HDC, const DEVMODEW *); } 
#line 3676 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) UINT __stdcall RealizePalette(HDC); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall RemoveFontResourceA(LPCSTR); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall RemoveFontResourceW(LPCWSTR); } 
#line 3684 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall RoundRect(HDC, int, int, int, int, int, int); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ResizePalette(HPALETTE, UINT); } 

extern "C" { extern __declspec( dllimport ) int __stdcall SaveDC(HDC); } 
extern "C" { extern __declspec( dllimport ) int __stdcall SelectClipRgn(HDC, HRGN); } 
extern "C" { extern __declspec( dllimport ) int __stdcall ExtSelectClipRgn(HDC, HRGN, int); } 
extern "C" { extern __declspec( dllimport ) int __stdcall SetMetaRgn(HDC); } 
extern "C" { extern __declspec( dllimport ) HGDIOBJ __stdcall SelectObject(HDC, HGDIOBJ); } 
extern "C" { extern __declspec( dllimport ) HPALETTE __stdcall SelectPalette(HDC, HPALETTE, BOOL); } 
extern "C" { extern __declspec( dllimport ) COLORREF __stdcall SetBkColor(HDC, COLORREF); } 


extern "C" { extern __declspec( dllimport ) COLORREF __stdcall SetDCBrushColor(HDC, COLORREF); } 
extern "C" { extern __declspec( dllimport ) COLORREF __stdcall SetDCPenColor(HDC, COLORREF); } 
#line 3700 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) int __stdcall SetBkMode(HDC, int); } 



extern "C" { extern __declspec( dllimport ) LONG __stdcall SetBitmapBits(HBITMAP, DWORD, const void *); } 




extern "C" { extern __declspec( dllimport ) UINT __stdcall SetBoundsRect(HDC, const RECT *, UINT); } 
extern "C" { extern __declspec( dllimport ) int __stdcall SetDIBits(HDC, HBITMAP, UINT, UINT, const void *, const BITMAPINFO *, UINT); } 
extern "C" { extern __declspec( dllimport ) int __stdcall SetDIBitsToDevice(HDC, int, int, DWORD, DWORD, int, int, UINT, UINT, const void *, const BITMAPINFO *, UINT); } 

extern "C" { extern __declspec( dllimport ) DWORD __stdcall SetMapperFlags(HDC, DWORD); } 
extern "C" { extern __declspec( dllimport ) int __stdcall SetGraphicsMode(HDC, int); } 
extern "C" { extern __declspec( dllimport ) int __stdcall SetMapMode(HDC, int); } 


extern "C" { extern __declspec( dllimport ) DWORD __stdcall SetLayout(HDC, DWORD); } 
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetLayout(HDC); } 
#line 3722 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) HMETAFILE __stdcall SetMetaFileBitsEx(UINT, const BYTE *); } 
extern "C" { extern __declspec( dllimport ) UINT __stdcall SetPaletteEntries(HPALETTE, UINT, UINT, const PALETTEENTRY *); } 



extern "C" { extern __declspec( dllimport ) COLORREF __stdcall SetPixel(HDC, int, int, COLORREF); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetPixelV(HDC, int, int, COLORREF); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetPixelFormat(HDC, int, const PIXELFORMATDESCRIPTOR *); } 
extern "C" { extern __declspec( dllimport ) int __stdcall SetPolyFillMode(HDC, int); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall StretchBlt(HDC, int, int, int, int, HDC, int, int, int, int, DWORD); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetRectRgn(HRGN, int, int, int, int); } 
extern "C" { extern __declspec( dllimport ) int __stdcall StretchDIBits(HDC, int, int, int, int, int, int, int, int, const void *, const BITMAPINFO *, UINT, DWORD); } 

extern "C" { extern __declspec( dllimport ) int __stdcall SetROP2(HDC, int); } 
extern "C" { extern __declspec( dllimport ) int __stdcall SetStretchBltMode(HDC, int); } 
extern "C" { extern __declspec( dllimport ) UINT __stdcall SetSystemPaletteUse(HDC, UINT); } 
extern "C" { extern __declspec( dllimport ) int __stdcall SetTextCharacterExtra(HDC, int); } 
extern "C" { extern __declspec( dllimport ) COLORREF __stdcall SetTextColor(HDC, COLORREF); } 
extern "C" { extern __declspec( dllimport ) UINT __stdcall SetTextAlign(HDC, UINT); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetTextJustification(HDC, int, int); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall UpdateColors(HDC); } 
#line 3780
extern "C" { typedef USHORT COLOR16; }
#line 3790
extern "C" { typedef 
#line 3782
struct _TRIVERTEX { 

LONG x; 
LONG y; 
COLOR16 Red; 
COLOR16 Green; 
COLOR16 Blue; 
COLOR16 Alpha; 
} TRIVERTEX; }extern "C" { typedef _TRIVERTEX *PTRIVERTEX; }extern "C" { typedef _TRIVERTEX *LPTRIVERTEX; }
#line 3797
extern "C" { typedef 
#line 3792
struct _GRADIENT_TRIANGLE { 

ULONG Vertex1; 
ULONG Vertex2; 
ULONG Vertex3; 
} GRADIENT_TRIANGLE; }extern "C" { typedef _GRADIENT_TRIANGLE *PGRADIENT_TRIANGLE; }extern "C" { typedef _GRADIENT_TRIANGLE *LPGRADIENT_TRIANGLE; }
#line 3803
extern "C" { typedef 
#line 3799
struct _GRADIENT_RECT { 

ULONG UpperLeft; 
ULONG LowerRight; 
} GRADIENT_RECT; }extern "C" { typedef _GRADIENT_RECT *PGRADIENT_RECT; }extern "C" { typedef _GRADIENT_RECT *LPGRADIENT_RECT; }
#line 3811
extern "C" { typedef 
#line 3805
struct _BLENDFUNCTION { 

BYTE BlendOp; 
BYTE BlendFlags; 
BYTE SourceConstantAlpha; 
BYTE AlphaFormat; 
} BLENDFUNCTION; }extern "C" { typedef _BLENDFUNCTION *PBLENDFUNCTION; }
#line 3826
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AlphaBlend(HDC, int, int, int, int, HDC, int, int, int, int, BLENDFUNCTION); } 

extern "C" { extern __declspec( dllimport ) BOOL __stdcall TransparentBlt(HDC, int, int, int, int, HDC, int, int, int, int, UINT); } 
#line 3844
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GradientFill(HDC, PTRIVERTEX, ULONG, PVOID, ULONG, ULONG); } 
#line 3858 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GdiAlphaBlend(HDC, int, int, int, int, HDC, int, int, int, int, BLENDFUNCTION); } 

extern "C" { extern __declspec( dllimport ) BOOL __stdcall GdiTransparentBlt(HDC, int, int, int, int, HDC, int, int, int, int, UINT); } 


extern "C" { extern __declspec( dllimport ) BOOL __stdcall GdiGradientFill(HDC, PTRIVERTEX, ULONG, PVOID, ULONG, ULONG); } 
#line 3875 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PlayMetaFileRecord(HDC, LPHANDLETABLE, LPMETARECORD, UINT); } 




extern "C" { typedef int (__stdcall *MFENUMPROC)(HDC, HANDLETABLE *, METARECORD *, int, LPARAM); }
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumMetaFile(HDC, HMETAFILE, MFENUMPROC, LPARAM); } 

extern "C" { typedef int (__stdcall *ENHMFENUMPROC)(HDC, HANDLETABLE *, const ENHMETARECORD *, int, LPARAM); }



extern "C" { extern __declspec( dllimport ) HENHMETAFILE __stdcall CloseEnhMetaFile(HDC); } 
extern "C" { extern __declspec( dllimport ) HENHMETAFILE __stdcall CopyEnhMetaFileA(HENHMETAFILE, LPCSTR); } 
extern "C" { extern __declspec( dllimport ) HENHMETAFILE __stdcall CopyEnhMetaFileW(HENHMETAFILE, LPCWSTR); } 
#line 3895 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) HDC __stdcall CreateEnhMetaFileA(HDC, LPCSTR, const RECT *, LPCSTR); } 
extern "C" { extern __declspec( dllimport ) HDC __stdcall CreateEnhMetaFileW(HDC, LPCWSTR, const RECT *, LPCWSTR); } 
#line 3902 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DeleteEnhMetaFile(HENHMETAFILE); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumEnhMetaFile(HDC, HENHMETAFILE, ENHMFENUMPROC, LPVOID, const RECT *); } 

extern "C" { extern __declspec( dllimport ) HENHMETAFILE __stdcall GetEnhMetaFileA(LPCSTR); } 
extern "C" { extern __declspec( dllimport ) HENHMETAFILE __stdcall GetEnhMetaFileW(LPCWSTR); } 
#line 3912 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetEnhMetaFileBits(HENHMETAFILE, UINT, LPBYTE); } 


extern "C" { extern __declspec( dllimport ) UINT __stdcall GetEnhMetaFileDescriptionA(HENHMETAFILE, UINT, LPSTR); } 


extern "C" { extern __declspec( dllimport ) UINT __stdcall GetEnhMetaFileDescriptionW(HENHMETAFILE, UINT, LPWSTR); } 
#line 3926 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetEnhMetaFileHeader(HENHMETAFILE, UINT, LPENHMETAHEADER); } 


extern "C" { extern __declspec( dllimport ) UINT __stdcall GetEnhMetaFilePaletteEntries(HENHMETAFILE, UINT, LPPALETTEENTRY); } 



extern "C" { extern __declspec( dllimport ) UINT __stdcall GetEnhMetaFilePixelFormat(HENHMETAFILE, UINT, PIXELFORMATDESCRIPTOR *); } 


extern "C" { extern __declspec( dllimport ) UINT __stdcall GetWinMetaFileBits(HENHMETAFILE, UINT, LPBYTE, INT, HDC); } 




extern "C" { extern __declspec( dllimport ) BOOL __stdcall PlayEnhMetaFile(HDC, HENHMETAFILE, const RECT *); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PlayEnhMetaFileRecord(HDC, LPHANDLETABLE, const ENHMETARECORD *, UINT); } 




extern "C" { extern __declspec( dllimport ) HENHMETAFILE __stdcall SetEnhMetaFileBits(UINT, const BYTE *); } 


extern "C" { extern __declspec( dllimport ) HENHMETAFILE __stdcall SetWinMetaFileBits(UINT, const BYTE *, HDC, const METAFILEPICT *); } 



extern "C" { extern __declspec( dllimport ) BOOL __stdcall GdiComment(HDC, UINT, const BYTE *); } 
#line 3960 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetTextMetricsA(HDC, LPTEXTMETRICA); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetTextMetricsW(HDC, LPTEXTMETRICW); } 
#line 3998 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 3992
struct tagDIBSECTION { 
BITMAP dsBm; 
BITMAPINFOHEADER dsBmih; 
DWORD dsBitfields[3]; 
HANDLE dshSection; 
DWORD dsOffset; 
} DIBSECTION; }extern "C" { typedef tagDIBSECTION *LPDIBSECTION; }extern "C" { typedef tagDIBSECTION *PDIBSECTION; }


extern "C" { extern __declspec( dllimport ) BOOL __stdcall AngleArc(HDC, int, int, DWORD, FLOAT, FLOAT); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PolyPolyline(HDC, const POINT *, const DWORD *, DWORD); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetWorldTransform(HDC, LPXFORM); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetWorldTransform(HDC, const XFORM *); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ModifyWorldTransform(HDC, const XFORM *, DWORD); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CombineTransform(LPXFORM, const XFORM *, const XFORM *); } 
extern "C" { extern __declspec( dllimport ) HBITMAP __stdcall CreateDIBSection(HDC, const BITMAPINFO *, UINT, void **, HANDLE, DWORD); } 
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetDIBColorTable(HDC, UINT, UINT, RGBQUAD *); } 



extern "C" { extern __declspec( dllimport ) UINT __stdcall SetDIBColorTable(HDC, UINT, UINT, const RGBQUAD *); } 
#line 4065
extern "C" { typedef 
#line 4052
struct tagCOLORADJUSTMENT { 
WORD caSize; 
WORD caFlags; 
WORD caIlluminantIndex; 
WORD caRedGamma; 
WORD caGreenGamma; 
WORD caBlueGamma; 
WORD caReferenceBlack; 
WORD caReferenceWhite; 
SHORT caContrast; 
SHORT caBrightness; 
SHORT caColorfulness; 
SHORT caRedGreenTint; 
} COLORADJUSTMENT; }extern "C" { typedef tagCOLORADJUSTMENT *PCOLORADJUSTMENT; }extern "C" { typedef tagCOLORADJUSTMENT *LPCOLORADJUSTMENT; }

extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetColorAdjustment(HDC, const COLORADJUSTMENT *); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetColorAdjustment(HDC, LPCOLORADJUSTMENT); } 
extern "C" { extern __declspec( dllimport ) HPALETTE __stdcall CreateHalftonePalette(HDC); } 


extern "C" { typedef BOOL (__stdcall *ABORTPROC)(HDC, int); }
#line 4085 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 4077 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
struct _DOCINFOA { 
int cbSize; 
LPCSTR lpszDocName; 
LPCSTR lpszOutput; 

LPCSTR lpszDatatype; 
DWORD fwType; 
#line 4085 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
} DOCINFOA; }extern "C" { typedef _DOCINFOA *LPDOCINFOA; }
#line 4094 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 4086 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
struct _DOCINFOW { 
int cbSize; 
LPCWSTR lpszDocName; 
LPCWSTR lpszOutput; 

LPCWSTR lpszDatatype; 
DWORD fwType; 
#line 4094 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
} DOCINFOW; }extern "C" { typedef _DOCINFOW *LPDOCINFOW; }




extern "C" { typedef DOCINFOA DOCINFO; }
extern "C" { typedef LPDOCINFOA LPDOCINFO; }
#line 4108 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) int __stdcall StartDocA(HDC, const DOCINFOA *); } 
extern "C" { extern __declspec( dllimport ) int __stdcall StartDocW(HDC, const DOCINFOW *); } 
#line 4115 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) int __stdcall EndDoc(HDC); } 
extern "C" { extern __declspec( dllimport ) int __stdcall StartPage(HDC); } 
extern "C" { extern __declspec( dllimport ) int __stdcall EndPage(HDC); } 
extern "C" { extern __declspec( dllimport ) int __stdcall AbortDoc(HDC); } 
extern "C" { extern __declspec( dllimport ) int __stdcall SetAbortProc(HDC, ABORTPROC); } 

extern "C" { extern __declspec( dllimport ) BOOL __stdcall AbortPath(HDC); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ArcTo(HDC, int, int, int, int, int, int, int, int); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall BeginPath(HDC); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CloseFigure(HDC); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EndPath(HDC); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FillPath(HDC); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FlattenPath(HDC); } 
extern "C" { extern __declspec( dllimport ) int __stdcall GetPath(HDC, LPPOINT, LPBYTE, int); } 
extern "C" { extern __declspec( dllimport ) HRGN __stdcall PathToRegion(HDC); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PolyDraw(HDC, const POINT *, const BYTE *, int); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SelectClipPath(HDC, int); } 
extern "C" { extern __declspec( dllimport ) int __stdcall SetArcDirection(HDC, int); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetMiterLimit(HDC, FLOAT, PFLOAT); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall StrokeAndFillPath(HDC); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall StrokePath(HDC); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall WidenPath(HDC); } 
extern "C" { extern __declspec( dllimport ) HPEN __stdcall ExtCreatePen(DWORD, DWORD, const LOGBRUSH *, DWORD, const DWORD *); } 




extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetMiterLimit(HDC, PFLOAT); } 
extern "C" { extern __declspec( dllimport ) int __stdcall GetArcDirection(HDC); } 

extern "C" { extern __declspec( dllimport ) int __stdcall GetObjectA(HANDLE, int, LPVOID); } 
extern "C" { extern __declspec( dllimport ) int __stdcall GetObjectW(HANDLE, int, LPVOID); } 
#line 4175 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall MoveToEx(HDC, int, int, LPPOINT); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall TextOutA(HDC, int, int, LPCSTR, int); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall TextOutW(HDC, int, int, LPCWSTR, int); } 
#line 4183 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ExtTextOutA(HDC, int, int, UINT, const RECT *, LPCSTR, UINT, const INT *); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ExtTextOutW(HDC, int, int, UINT, const RECT *, LPCWSTR, UINT, const INT *); } 
#line 4190 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PolyTextOutA(HDC, const POLYTEXTA *, int); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PolyTextOutW(HDC, const POLYTEXTW *, int); } 
#line 4198 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) HRGN __stdcall CreatePolygonRgn(const POINT *, int, int); } 


extern "C" { extern __declspec( dllimport ) BOOL __stdcall DPtoLP(HDC, LPPOINT, int); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall LPtoDP(HDC, LPPOINT, int); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall Polygon(HDC, const POINT *, int); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall Polyline(HDC, const POINT *, int); } 

extern "C" { extern __declspec( dllimport ) BOOL __stdcall PolyBezier(HDC, const POINT *, DWORD); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PolyBezierTo(HDC, const POINT *, DWORD); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PolylineTo(HDC, const POINT *, DWORD); } 

extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetViewportExtEx(HDC, int, int, LPSIZE); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetViewportOrgEx(HDC, int, int, LPPOINT); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetWindowExtEx(HDC, int, int, LPSIZE); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetWindowOrgEx(HDC, int, int, LPPOINT); } 

extern "C" { extern __declspec( dllimport ) BOOL __stdcall OffsetViewportOrgEx(HDC, int, int, LPPOINT); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall OffsetWindowOrgEx(HDC, int, int, LPPOINT); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ScaleViewportExtEx(HDC, int, int, int, int, LPSIZE); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ScaleWindowExtEx(HDC, int, int, int, int, LPSIZE); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetBitmapDimensionEx(HBITMAP, int, int, LPSIZE); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetBrushOrgEx(HDC, int, int, LPPOINT); } 

extern "C" { extern __declspec( dllimport ) int __stdcall GetTextFaceA(HDC, int, LPSTR); } 
extern "C" { extern __declspec( dllimport ) int __stdcall GetTextFaceW(HDC, int, LPWSTR); } 
#line 4236 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 4232
struct tagKERNINGPAIR { 
WORD wFirst; 
WORD wSecond; 
int iKernAmount; 
} KERNINGPAIR; }extern "C" { typedef tagKERNINGPAIR *LPKERNINGPAIR; }

extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetKerningPairsA(HDC, DWORD, LPKERNINGPAIR); } 


extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetKerningPairsW(HDC, DWORD, LPKERNINGPAIR); } 
#line 4251 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetDCOrgEx(HDC, LPPOINT); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FixBrushOrgEx(HDC, int, int, LPPOINT); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall UnrealizeObject(HGDIOBJ); } 

extern "C" { extern __declspec( dllimport ) BOOL __stdcall GdiFlush(); } 
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GdiSetBatchLimit(DWORD); } 
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GdiGetBatchLimit(); } 
#line 4266
extern "C" { typedef int (__stdcall *ICMENUMPROCA)(LPSTR, LPARAM); }
extern "C" { typedef int (__stdcall *ICMENUMPROCW)(LPWSTR, LPARAM); }
#line 4274 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) int __stdcall SetICMMode(HDC, int); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CheckColorsInGamut(HDC, LPRGBTRIPLE, LPVOID, DWORD); } 




extern "C" { extern __declspec( dllimport ) HCOLORSPACE __stdcall GetColorSpace(HDC); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetLogColorSpaceA(HCOLORSPACE, LPLOGCOLORSPACEA, DWORD); } 


extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetLogColorSpaceW(HCOLORSPACE, LPLOGCOLORSPACEW, DWORD); } 
#line 4293 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) HCOLORSPACE __stdcall CreateColorSpaceA(LPLOGCOLORSPACEA); } 
extern "C" { extern __declspec( dllimport ) HCOLORSPACE __stdcall CreateColorSpaceW(LPLOGCOLORSPACEW); } 
#line 4300 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) HCOLORSPACE __stdcall SetColorSpace(HDC, HCOLORSPACE); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DeleteColorSpace(HCOLORSPACE); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetICMProfileA(HDC, LPDWORD, LPSTR); } 


extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetICMProfileW(HDC, LPDWORD, LPWSTR); } 
#line 4314 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetICMProfileA(HDC, LPSTR); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetICMProfileW(HDC, LPWSTR); } 
#line 4321 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetDeviceGammaRamp(HDC, LPVOID); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetDeviceGammaRamp(HDC, LPVOID); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ColorMatchToTarget(HDC, HDC, DWORD); } 
extern "C" { extern __declspec( dllimport ) int __stdcall EnumICMProfilesA(HDC, ICMENUMPROCA, LPARAM); } 
extern "C" { extern __declspec( dllimport ) int __stdcall EnumICMProfilesW(HDC, ICMENUMPROCW, LPARAM); } 
#line 4332 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall UpdateICMRegKeyA(DWORD, LPSTR, LPSTR, UINT); } 

extern "C" { extern __declspec( dllimport ) BOOL __stdcall UpdateICMRegKeyW(DWORD, LPWSTR, LPWSTR, UINT); } 
#line 4340 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
#pragma deprecated (UpdateICMRegKeyW)
#pragma deprecated (UpdateICMRegKeyA)
#line 4346 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ColorCorrectPalette(HDC, HPALETTE, DWORD, DWORD); } 
#line 4516 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 4511
struct tagEMR { 

DWORD iType; 
DWORD nSize; 

} EMR; }extern "C" { typedef tagEMR *PEMR; }
#line 4529
extern "C" { typedef 
#line 4520
struct tagEMRTEXT { 

POINTL ptlReference; 
DWORD nChars; 
DWORD offString; 
DWORD fOptions; 
RECTL rcl; 
DWORD offDx; 

} EMRTEXT; }extern "C" { typedef tagEMRTEXT *PEMRTEXT; }
#line 4536
extern "C" { typedef 
#line 4533
struct tagABORTPATH { 

EMR emr; 
} EMRABORTPATH; }extern "C" { typedef tagABORTPATH *PEMRABORTPATH; }
extern "C" { typedef tagABORTPATH EMRBEGINPATH; }extern "C" { typedef tagABORTPATH *PEMRBEGINPATH; }
extern "C" { typedef tagABORTPATH EMRENDPATH; }extern "C" { typedef tagABORTPATH *PEMRENDPATH; }
extern "C" { typedef tagABORTPATH EMRCLOSEFIGURE; }extern "C" { typedef tagABORTPATH *PEMRCLOSEFIGURE; }
extern "C" { typedef tagABORTPATH EMRFLATTENPATH; }extern "C" { typedef tagABORTPATH *PEMRFLATTENPATH; }
extern "C" { typedef tagABORTPATH EMRWIDENPATH; }extern "C" { typedef tagABORTPATH *PEMRWIDENPATH; }
extern "C" { typedef tagABORTPATH EMRSETMETARGN; }extern "C" { typedef tagABORTPATH *PEMRSETMETARGN; }
extern "C" { typedef tagABORTPATH EMRSAVEDC; }extern "C" { typedef tagABORTPATH *PEMRSAVEDC; }
extern "C" { typedef tagABORTPATH EMRREALIZEPALETTE; }extern "C" { typedef tagABORTPATH *PEMRREALIZEPALETTE; }
#line 4550
extern "C" { typedef 
#line 4546
struct tagEMRSELECTCLIPPATH { 

EMR emr; 
DWORD iMode; 
} EMRSELECTCLIPPATH; }extern "C" { typedef tagEMRSELECTCLIPPATH *PEMRSELECTCLIPPATH; }
extern "C" { typedef tagEMRSELECTCLIPPATH EMRSETBKMODE; }extern "C" { typedef tagEMRSELECTCLIPPATH *PEMRSETBKMODE; }
extern "C" { typedef tagEMRSELECTCLIPPATH EMRSETMAPMODE; }extern "C" { typedef tagEMRSELECTCLIPPATH *PEMRSETMAPMODE; }

extern "C" { typedef tagEMRSELECTCLIPPATH EMRSETLAYOUT; }extern "C" { typedef tagEMRSELECTCLIPPATH *PEMRSETLAYOUT; }
#line 4556 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef tagEMRSELECTCLIPPATH EMRSETPOLYFILLMODE; }extern "C" { typedef tagEMRSELECTCLIPPATH *PEMRSETPOLYFILLMODE; }
extern "C" { typedef tagEMRSELECTCLIPPATH EMRSETROP2; }extern "C" { typedef tagEMRSELECTCLIPPATH *PEMRSETROP2; }
extern "C" { typedef tagEMRSELECTCLIPPATH EMRSETSTRETCHBLTMODE; }extern "C" { typedef tagEMRSELECTCLIPPATH *PEMRSETSTRETCHBLTMODE; }
extern "C" { typedef tagEMRSELECTCLIPPATH EMRSETICMMODE; }extern "C" { typedef tagEMRSELECTCLIPPATH *PEMRSETICMMODE; }
extern "C" { typedef tagEMRSELECTCLIPPATH EMRSETTEXTALIGN; }extern "C" { typedef tagEMRSELECTCLIPPATH *PEMRSETTEXTALIGN; }
#line 4566
extern "C" { typedef 
#line 4562
struct tagEMRSETMITERLIMIT { 

EMR emr; 
FLOAT eMiterLimit; 
} EMRSETMITERLIMIT; }extern "C" { typedef tagEMRSETMITERLIMIT *PEMRSETMITERLIMIT; }
#line 4572
extern "C" { typedef 
#line 4568
struct tagEMRRESTOREDC { 

EMR emr; 
LONG iRelative; 
} EMRRESTOREDC; }extern "C" { typedef tagEMRRESTOREDC *PEMRRESTOREDC; }
#line 4579
extern "C" { typedef 
#line 4574
struct tagEMRSETARCDIRECTION { 

EMR emr; 
DWORD iArcDirection; 

} EMRSETARCDIRECTION; }extern "C" { typedef tagEMRSETARCDIRECTION *PEMRSETARCDIRECTION; }
#line 4585
extern "C" { typedef 
#line 4581
struct tagEMRSETMAPPERFLAGS { 

EMR emr; 
DWORD dwFlags; 
} EMRSETMAPPERFLAGS; }extern "C" { typedef tagEMRSETMAPPERFLAGS *PEMRSETMAPPERFLAGS; }
#line 4591
extern "C" { typedef 
#line 4587
struct tagEMRSETTEXTCOLOR { 

EMR emr; 
COLORREF crColor; 
} EMRSETBKCOLOR; }extern "C" { typedef tagEMRSETTEXTCOLOR *PEMRSETBKCOLOR; }
extern "C" { typedef tagEMRSETTEXTCOLOR EMRSETTEXTCOLOR; }extern "C" { typedef tagEMRSETTEXTCOLOR *PEMRSETTEXTCOLOR; }
#line 4598
extern "C" { typedef 
#line 4594
struct tagEMRSELECTOBJECT { 

EMR emr; 
DWORD ihObject; 
} EMRSELECTOBJECT; }extern "C" { typedef tagEMRSELECTOBJECT *PEMRSELECTOBJECT; }
extern "C" { typedef tagEMRSELECTOBJECT EMRDELETEOBJECT; }extern "C" { typedef tagEMRSELECTOBJECT *PEMRDELETEOBJECT; }
#line 4605
extern "C" { typedef 
#line 4601
struct tagEMRSELECTPALETTE { 

EMR emr; 
DWORD ihPal; 
} EMRSELECTPALETTE; }extern "C" { typedef tagEMRSELECTPALETTE *PEMRSELECTPALETTE; }
#line 4612
extern "C" { typedef 
#line 4607
struct tagEMRRESIZEPALETTE { 

EMR emr; 
DWORD ihPal; 
DWORD cEntries; 
} EMRRESIZEPALETTE; }extern "C" { typedef tagEMRRESIZEPALETTE *PEMRRESIZEPALETTE; }
#line 4621
extern "C" { typedef 
#line 4614
struct tagEMRSETPALETTEENTRIES { 

EMR emr; 
DWORD ihPal; 
DWORD iStart; 
DWORD cEntries; 
PALETTEENTRY aPalEntries[1]; 
} EMRSETPALETTEENTRIES; }extern "C" { typedef tagEMRSETPALETTEENTRIES *PEMRSETPALETTEENTRIES; }
#line 4627
extern "C" { typedef 
#line 4623
struct tagEMRSETCOLORADJUSTMENT { 

EMR emr; 
COLORADJUSTMENT ColorAdjustment; 
} EMRSETCOLORADJUSTMENT; }extern "C" { typedef tagEMRSETCOLORADJUSTMENT *PEMRSETCOLORADJUSTMENT; }
#line 4634
extern "C" { typedef 
#line 4629
struct tagEMRGDICOMMENT { 

EMR emr; 
DWORD cbData; 
BYTE Data[1]; 
} EMRGDICOMMENT; }extern "C" { typedef tagEMRGDICOMMENT *PEMRGDICOMMENT; }
#line 4644
extern "C" { typedef 
#line 4636
struct tagEMREOF { 

EMR emr; 
DWORD nPalEntries; 
DWORD offPalEntries; 
DWORD nSizeLast; 


} EMREOF; }extern "C" { typedef tagEMREOF *PEMREOF; }
#line 4650
extern "C" { typedef 
#line 4646
struct tagEMRLINETO { 

EMR emr; 
POINTL ptl; 
} EMRLINETO; }extern "C" { typedef tagEMRLINETO *PEMRLINETO; }
extern "C" { typedef tagEMRLINETO EMRMOVETOEX; }extern "C" { typedef tagEMRLINETO *PEMRMOVETOEX; }
#line 4657
extern "C" { typedef 
#line 4653
struct tagEMROFFSETCLIPRGN { 

EMR emr; 
POINTL ptlOffset; 
} EMROFFSETCLIPRGN; }extern "C" { typedef tagEMROFFSETCLIPRGN *PEMROFFSETCLIPRGN; }
#line 4663
extern "C" { typedef 
#line 4659
struct tagEMRFILLPATH { 

EMR emr; 
RECTL rclBounds; 
} EMRFILLPATH; }extern "C" { typedef tagEMRFILLPATH *PEMRFILLPATH; }
extern "C" { typedef tagEMRFILLPATH EMRSTROKEANDFILLPATH; }extern "C" { typedef tagEMRFILLPATH *PEMRSTROKEANDFILLPATH; }
extern "C" { typedef tagEMRFILLPATH EMRSTROKEPATH; }extern "C" { typedef tagEMRFILLPATH *PEMRSTROKEPATH; }
#line 4671
extern "C" { typedef 
#line 4667
struct tagEMREXCLUDECLIPRECT { 

EMR emr; 
RECTL rclClip; 
} EMREXCLUDECLIPRECT; }extern "C" { typedef tagEMREXCLUDECLIPRECT *PEMREXCLUDECLIPRECT; }
extern "C" { typedef tagEMREXCLUDECLIPRECT EMRINTERSECTCLIPRECT; }extern "C" { typedef tagEMREXCLUDECLIPRECT *PEMRINTERSECTCLIPRECT; }
#line 4678
extern "C" { typedef 
#line 4674
struct tagEMRSETVIEWPORTORGEX { 

EMR emr; 
POINTL ptlOrigin; 
} EMRSETVIEWPORTORGEX; }extern "C" { typedef tagEMRSETVIEWPORTORGEX *PEMRSETVIEWPORTORGEX; }
extern "C" { typedef tagEMRSETVIEWPORTORGEX EMRSETWINDOWORGEX; }extern "C" { typedef tagEMRSETVIEWPORTORGEX *PEMRSETWINDOWORGEX; }
extern "C" { typedef tagEMRSETVIEWPORTORGEX EMRSETBRUSHORGEX; }extern "C" { typedef tagEMRSETVIEWPORTORGEX *PEMRSETBRUSHORGEX; }
#line 4686
extern "C" { typedef 
#line 4682
struct tagEMRSETVIEWPORTEXTEX { 

EMR emr; 
SIZEL szlExtent; 
} EMRSETVIEWPORTEXTEX; }extern "C" { typedef tagEMRSETVIEWPORTEXTEX *PEMRSETVIEWPORTEXTEX; }
extern "C" { typedef tagEMRSETVIEWPORTEXTEX EMRSETWINDOWEXTEX; }extern "C" { typedef tagEMRSETVIEWPORTEXTEX *PEMRSETWINDOWEXTEX; }
#line 4696
extern "C" { typedef 
#line 4689
struct tagEMRSCALEVIEWPORTEXTEX { 

EMR emr; 
LONG xNum; 
LONG xDenom; 
LONG yNum; 
LONG yDenom; 
} EMRSCALEVIEWPORTEXTEX; }extern "C" { typedef tagEMRSCALEVIEWPORTEXTEX *PEMRSCALEVIEWPORTEXTEX; }
extern "C" { typedef tagEMRSCALEVIEWPORTEXTEX EMRSCALEWINDOWEXTEX; }extern "C" { typedef tagEMRSCALEVIEWPORTEXTEX *PEMRSCALEWINDOWEXTEX; }
#line 4703
extern "C" { typedef 
#line 4699
struct tagEMRSETWORLDTRANSFORM { 

EMR emr; 
XFORM xform; 
} EMRSETWORLDTRANSFORM; }extern "C" { typedef tagEMRSETWORLDTRANSFORM *PEMRSETWORLDTRANSFORM; }
#line 4710
extern "C" { typedef 
#line 4705
struct tagEMRMODIFYWORLDTRANSFORM { 

EMR emr; 
XFORM xform; 
DWORD iMode; 
} EMRMODIFYWORLDTRANSFORM; }extern "C" { typedef tagEMRMODIFYWORLDTRANSFORM *PEMRMODIFYWORLDTRANSFORM; }
#line 4717
extern "C" { typedef 
#line 4712
struct tagEMRSETPIXELV { 

EMR emr; 
POINTL ptlPixel; 
COLORREF crColor; 
} EMRSETPIXELV; }extern "C" { typedef tagEMRSETPIXELV *PEMRSETPIXELV; }
#line 4725
extern "C" { typedef 
#line 4719
struct tagEMREXTFLOODFILL { 

EMR emr; 
POINTL ptlStart; 
COLORREF crColor; 
DWORD iMode; 
} EMREXTFLOODFILL; }extern "C" { typedef tagEMREXTFLOODFILL *PEMREXTFLOODFILL; }
#line 4731
extern "C" { typedef 
#line 4727
struct tagEMRELLIPSE { 

EMR emr; 
RECTL rclBox; 
} EMRELLIPSE; }extern "C" { typedef tagEMRELLIPSE *PEMRELLIPSE; }
extern "C" { typedef tagEMRELLIPSE EMRRECTANGLE; }extern "C" { typedef tagEMRELLIPSE *PEMRRECTANGLE; }
#line 4740
extern "C" { typedef 
#line 4735
struct tagEMRROUNDRECT { 

EMR emr; 
RECTL rclBox; 
SIZEL szlCorner; 
} EMRROUNDRECT; }extern "C" { typedef tagEMRROUNDRECT *PEMRROUNDRECT; }
#line 4748
extern "C" { typedef 
#line 4742
struct tagEMRARC { 

EMR emr; 
RECTL rclBox; 
POINTL ptlStart; 
POINTL ptlEnd; 
} EMRARC; }extern "C" { typedef tagEMRARC *PEMRARC; }
extern "C" { typedef tagEMRARC EMRARCTO; }extern "C" { typedef tagEMRARC *PEMRARCTO; }
extern "C" { typedef tagEMRARC EMRCHORD; }extern "C" { typedef tagEMRARC *PEMRCHORD; }
extern "C" { typedef tagEMRARC EMRPIE; }extern "C" { typedef tagEMRARC *PEMRPIE; }
#line 4760
extern "C" { typedef 
#line 4753
struct tagEMRANGLEARC { 

EMR emr; 
POINTL ptlCenter; 
DWORD nRadius; 
FLOAT eStartAngle; 
FLOAT eSweepAngle; 
} EMRANGLEARC; }extern "C" { typedef tagEMRANGLEARC *PEMRANGLEARC; }
#line 4768
extern "C" { typedef 
#line 4762
struct tagEMRPOLYLINE { 

EMR emr; 
RECTL rclBounds; 
DWORD cptl; 
POINTL aptl[1]; 
} EMRPOLYLINE; }extern "C" { typedef tagEMRPOLYLINE *PEMRPOLYLINE; }
extern "C" { typedef tagEMRPOLYLINE EMRPOLYBEZIER; }extern "C" { typedef tagEMRPOLYLINE *PEMRPOLYBEZIER; }
extern "C" { typedef tagEMRPOLYLINE EMRPOLYGON; }extern "C" { typedef tagEMRPOLYLINE *PEMRPOLYGON; }
extern "C" { typedef tagEMRPOLYLINE EMRPOLYBEZIERTO; }extern "C" { typedef tagEMRPOLYLINE *PEMRPOLYBEZIERTO; }
extern "C" { typedef tagEMRPOLYLINE EMRPOLYLINETO; }extern "C" { typedef tagEMRPOLYLINE *PEMRPOLYLINETO; }
#line 4780
extern "C" { typedef 
#line 4774
struct tagEMRPOLYLINE16 { 

EMR emr; 
RECTL rclBounds; 
DWORD cpts; 
POINTS apts[1]; 
} EMRPOLYLINE16; }extern "C" { typedef tagEMRPOLYLINE16 *PEMRPOLYLINE16; }
extern "C" { typedef tagEMRPOLYLINE16 EMRPOLYBEZIER16; }extern "C" { typedef tagEMRPOLYLINE16 *PEMRPOLYBEZIER16; }
extern "C" { typedef tagEMRPOLYLINE16 EMRPOLYGON16; }extern "C" { typedef tagEMRPOLYLINE16 *PEMRPOLYGON16; }
extern "C" { typedef tagEMRPOLYLINE16 EMRPOLYBEZIERTO16; }extern "C" { typedef tagEMRPOLYLINE16 *PEMRPOLYBEZIERTO16; }
extern "C" { typedef tagEMRPOLYLINE16 EMRPOLYLINETO16; }extern "C" { typedef tagEMRPOLYLINE16 *PEMRPOLYLINETO16; }
#line 4793
extern "C" { typedef 
#line 4786
struct tagEMRPOLYDRAW { 

EMR emr; 
RECTL rclBounds; 
DWORD cptl; 
POINTL aptl[1]; 
BYTE abTypes[1]; 
} EMRPOLYDRAW; }extern "C" { typedef tagEMRPOLYDRAW *PEMRPOLYDRAW; }
#line 4802
extern "C" { typedef 
#line 4795
struct tagEMRPOLYDRAW16 { 

EMR emr; 
RECTL rclBounds; 
DWORD cpts; 
POINTS apts[1]; 
BYTE abTypes[1]; 
} EMRPOLYDRAW16; }extern "C" { typedef tagEMRPOLYDRAW16 *PEMRPOLYDRAW16; }
#line 4812
extern "C" { typedef 
#line 4804
struct tagEMRPOLYPOLYLINE { 

EMR emr; 
RECTL rclBounds; 
DWORD nPolys; 
DWORD cptl; 
DWORD aPolyCounts[1]; 
POINTL aptl[1]; 
} EMRPOLYPOLYLINE; }extern "C" { typedef tagEMRPOLYPOLYLINE *PEMRPOLYPOLYLINE; }
extern "C" { typedef tagEMRPOLYPOLYLINE EMRPOLYPOLYGON; }extern "C" { typedef tagEMRPOLYPOLYLINE *PEMRPOLYPOLYGON; }
#line 4823
extern "C" { typedef 
#line 4815
struct tagEMRPOLYPOLYLINE16 { 

EMR emr; 
RECTL rclBounds; 
DWORD nPolys; 
DWORD cpts; 
DWORD aPolyCounts[1]; 
POINTS apts[1]; 
} EMRPOLYPOLYLINE16; }extern "C" { typedef tagEMRPOLYPOLYLINE16 *PEMRPOLYPOLYLINE16; }
extern "C" { typedef tagEMRPOLYPOLYLINE16 EMRPOLYPOLYGON16; }extern "C" { typedef tagEMRPOLYPOLYLINE16 *PEMRPOLYPOLYGON16; }
#line 4832
extern "C" { typedef 
#line 4826
struct tagEMRINVERTRGN { 

EMR emr; 
RECTL rclBounds; 
DWORD cbRgnData; 
BYTE RgnData[1]; 
} EMRINVERTRGN; }extern "C" { typedef tagEMRINVERTRGN *PEMRINVERTRGN; }
extern "C" { typedef tagEMRINVERTRGN EMRPAINTRGN; }extern "C" { typedef tagEMRINVERTRGN *PEMRPAINTRGN; }
#line 4842
extern "C" { typedef 
#line 4835
struct tagEMRFILLRGN { 

EMR emr; 
RECTL rclBounds; 
DWORD cbRgnData; 
DWORD ihBrush; 
BYTE RgnData[1]; 
} EMRFILLRGN; }extern "C" { typedef tagEMRFILLRGN *PEMRFILLRGN; }
#line 4852
extern "C" { typedef 
#line 4844
struct tagEMRFRAMERGN { 

EMR emr; 
RECTL rclBounds; 
DWORD cbRgnData; 
DWORD ihBrush; 
SIZEL szlStroke; 
BYTE RgnData[1]; 
} EMRFRAMERGN; }extern "C" { typedef tagEMRFRAMERGN *PEMRFRAMERGN; }
#line 4860
extern "C" { typedef 
#line 4854
struct tagEMREXTSELECTCLIPRGN { 

EMR emr; 
DWORD cbRgnData; 
DWORD iMode; 
BYTE RgnData[1]; 
} EMREXTSELECTCLIPRGN; }extern "C" { typedef tagEMREXTSELECTCLIPRGN *PEMREXTSELECTCLIPRGN; }
#line 4871
extern "C" { typedef 
#line 4862
struct tagEMREXTTEXTOUTA { 

EMR emr; 
RECTL rclBounds; 
DWORD iGraphicsMode; 
FLOAT exScale; 
FLOAT eyScale; 
EMRTEXT emrtext; 

} EMREXTTEXTOUTA; }extern "C" { typedef tagEMREXTTEXTOUTA *PEMREXTTEXTOUTA; }
extern "C" { typedef tagEMREXTTEXTOUTA EMREXTTEXTOUTW; }extern "C" { typedef tagEMREXTTEXTOUTA *PEMREXTTEXTOUTW; }
#line 4884
extern "C" { typedef 
#line 4874
struct tagEMRPOLYTEXTOUTA { 

EMR emr; 
RECTL rclBounds; 
DWORD iGraphicsMode; 
FLOAT exScale; 
FLOAT eyScale; 
LONG cStrings; 
EMRTEXT aemrtext[1]; 

} EMRPOLYTEXTOUTA; }extern "C" { typedef tagEMRPOLYTEXTOUTA *PEMRPOLYTEXTOUTA; }
extern "C" { typedef tagEMRPOLYTEXTOUTA EMRPOLYTEXTOUTW; }extern "C" { typedef tagEMRPOLYTEXTOUTA *PEMRPOLYTEXTOUTW; }
#line 4906
extern "C" { typedef 
#line 4887
struct tagEMRBITBLT { 

EMR emr; 
RECTL rclBounds; 
LONG xDest; 
LONG yDest; 
LONG cxDest; 
LONG cyDest; 
DWORD dwRop; 
LONG xSrc; 
LONG ySrc; 
XFORM xformSrc; 
COLORREF crBkColorSrc; 
DWORD iUsageSrc; 

DWORD offBmiSrc; 
DWORD cbBmiSrc; 
DWORD offBitsSrc; 
DWORD cbBitsSrc; 
} EMRBITBLT; }extern "C" { typedef tagEMRBITBLT *PEMRBITBLT; }
#line 4929
extern "C" { typedef 
#line 4908
struct tagEMRSTRETCHBLT { 

EMR emr; 
RECTL rclBounds; 
LONG xDest; 
LONG yDest; 
LONG cxDest; 
LONG cyDest; 
DWORD dwRop; 
LONG xSrc; 
LONG ySrc; 
XFORM xformSrc; 
COLORREF crBkColorSrc; 
DWORD iUsageSrc; 

DWORD offBmiSrc; 
DWORD cbBmiSrc; 
DWORD offBitsSrc; 
DWORD cbBitsSrc; 
LONG cxSrc; 
LONG cySrc; 
} EMRSTRETCHBLT; }extern "C" { typedef tagEMRSTRETCHBLT *PEMRSTRETCHBLT; }
#line 4957
extern "C" { typedef 
#line 4931
struct tagEMRMASKBLT { 

EMR emr; 
RECTL rclBounds; 
LONG xDest; 
LONG yDest; 
LONG cxDest; 
LONG cyDest; 
DWORD dwRop; 
LONG xSrc; 
LONG ySrc; 
XFORM xformSrc; 
COLORREF crBkColorSrc; 
DWORD iUsageSrc; 

DWORD offBmiSrc; 
DWORD cbBmiSrc; 
DWORD offBitsSrc; 
DWORD cbBitsSrc; 
LONG xMask; 
LONG yMask; 
DWORD iUsageMask; 
DWORD offBmiMask; 
DWORD cbBmiMask; 
DWORD offBitsMask; 
DWORD cbBitsMask; 
} EMRMASKBLT; }extern "C" { typedef tagEMRMASKBLT *PEMRMASKBLT; }
#line 4983
extern "C" { typedef 
#line 4959
struct tagEMRPLGBLT { 

EMR emr; 
RECTL rclBounds; 
POINTL aptlDest[3]; 
LONG xSrc; 
LONG ySrc; 
LONG cxSrc; 
LONG cySrc; 
XFORM xformSrc; 
COLORREF crBkColorSrc; 
DWORD iUsageSrc; 

DWORD offBmiSrc; 
DWORD cbBmiSrc; 
DWORD offBitsSrc; 
DWORD cbBitsSrc; 
LONG xMask; 
LONG yMask; 
DWORD iUsageMask; 
DWORD offBmiMask; 
DWORD cbBmiMask; 
DWORD offBitsMask; 
DWORD cbBitsMask; 
} EMRPLGBLT; }extern "C" { typedef tagEMRPLGBLT *PEMRPLGBLT; }
#line 5002
extern "C" { typedef 
#line 4985
struct tagEMRSETDIBITSTODEVICE { 

EMR emr; 
RECTL rclBounds; 
LONG xDest; 
LONG yDest; 
LONG xSrc; 
LONG ySrc; 
LONG cxSrc; 
LONG cySrc; 
DWORD offBmiSrc; 
DWORD cbBmiSrc; 
DWORD offBitsSrc; 
DWORD cbBitsSrc; 
DWORD iUsageSrc; 
DWORD iStartScan; 
DWORD cScans; 
} EMRSETDIBITSTODEVICE; }extern "C" { typedef tagEMRSETDIBITSTODEVICE *PEMRSETDIBITSTODEVICE; }
#line 5022
extern "C" { typedef 
#line 5004
struct tagEMRSTRETCHDIBITS { 

EMR emr; 
RECTL rclBounds; 
LONG xDest; 
LONG yDest; 
LONG xSrc; 
LONG ySrc; 
LONG cxSrc; 
LONG cySrc; 
DWORD offBmiSrc; 
DWORD cbBmiSrc; 
DWORD offBitsSrc; 
DWORD cbBitsSrc; 
DWORD iUsageSrc; 
DWORD dwRop; 
LONG cxDest; 
LONG cyDest; 
} EMRSTRETCHDIBITS; }extern "C" { typedef tagEMRSTRETCHDIBITS *PEMRSTRETCHDIBITS; }
#line 5029
extern "C" { typedef 
#line 5024
struct tagEMREXTCREATEFONTINDIRECTW { 

EMR emr; 
DWORD ihFont; 
EXTLOGFONTW elfw; 
} EMREXTCREATEFONTINDIRECTW; }extern "C" { typedef tagEMREXTCREATEFONTINDIRECTW *PEMREXTCREATEFONTINDIRECTW; }
#line 5037
extern "C" { typedef 
#line 5031
struct tagEMRCREATEPALETTE { 

EMR emr; 
DWORD ihPal; 
LOGPALETTE lgpl; 

} EMRCREATEPALETTE; }extern "C" { typedef tagEMRCREATEPALETTE *PEMRCREATEPALETTE; }
#line 5044
extern "C" { typedef 
#line 5039
struct tagEMRCREATEPEN { 

EMR emr; 
DWORD ihPen; 
LOGPEN lopn; 
} EMRCREATEPEN; }extern "C" { typedef tagEMRCREATEPEN *PEMRCREATEPEN; }
#line 5057
extern "C" { typedef 
#line 5046
struct tagEMREXTCREATEPEN { 

EMR emr; 
DWORD ihPen; 
DWORD offBmi; 
DWORD cbBmi; 


DWORD offBits; 
DWORD cbBits; 
EXTLOGPEN elp; 
} EMREXTCREATEPEN; }extern "C" { typedef tagEMREXTCREATEPEN *PEMREXTCREATEPEN; }
#line 5065
extern "C" { typedef 
#line 5059
struct tagEMRCREATEBRUSHINDIRECT { 

EMR emr; 
DWORD ihBrush; 
LOGBRUSH32 lb; 

} EMRCREATEBRUSHINDIRECT; }extern "C" { typedef tagEMRCREATEBRUSHINDIRECT *PEMRCREATEBRUSHINDIRECT; }
#line 5076
extern "C" { typedef 
#line 5067
struct tagEMRCREATEMONOBRUSH { 

EMR emr; 
DWORD ihBrush; 
DWORD iUsage; 
DWORD offBmi; 
DWORD cbBmi; 
DWORD offBits; 
DWORD cbBits; 
} EMRCREATEMONOBRUSH; }extern "C" { typedef tagEMRCREATEMONOBRUSH *PEMRCREATEMONOBRUSH; }
#line 5089
extern "C" { typedef 
#line 5078
struct tagEMRCREATEDIBPATTERNBRUSHPT { 

EMR emr; 
DWORD ihBrush; 
DWORD iUsage; 
DWORD offBmi; 
DWORD cbBmi; 


DWORD offBits; 
DWORD cbBits; 
} EMRCREATEDIBPATTERNBRUSHPT; }extern "C" { typedef tagEMRCREATEDIBPATTERNBRUSHPT *PEMRCREATEDIBPATTERNBRUSHPT; }
#line 5098
extern "C" { typedef 
#line 5091
struct tagEMRFORMAT { 

DWORD dSignature; 
DWORD nVersion; 
DWORD cbData; 
DWORD offData; 

} EMRFORMAT; }extern "C" { typedef tagEMRFORMAT *PEMRFORMAT; }
#line 5107
extern "C" { typedef 
#line 5102
struct tagEMRGLSRECORD { 

EMR emr; 
DWORD cbData; 
BYTE Data[1]; 
} EMRGLSRECORD; }extern "C" { typedef tagEMRGLSRECORD *PEMRGLSRECORD; }
#line 5115
extern "C" { typedef 
#line 5109
struct tagEMRGLSBOUNDEDRECORD { 

EMR emr; 
RECTL rclBounds; 
DWORD cbData; 
BYTE Data[1]; 
} EMRGLSBOUNDEDRECORD; }extern "C" { typedef tagEMRGLSBOUNDEDRECORD *PEMRGLSBOUNDEDRECORD; }
#line 5121
extern "C" { typedef 
#line 5117
struct tagEMRPIXELFORMAT { 

EMR emr; 
PIXELFORMATDESCRIPTOR pfd; 
} EMRPIXELFORMAT; }extern "C" { typedef tagEMRPIXELFORMAT *PEMRPIXELFORMAT; }
#line 5128
extern "C" { typedef 
#line 5123
struct tagEMRCREATECOLORSPACE { 

EMR emr; 
DWORD ihCS; 
LOGCOLORSPACEA lcs; 
} EMRCREATECOLORSPACE; }extern "C" { typedef tagEMRCREATECOLORSPACE *PEMRCREATECOLORSPACE; }
#line 5134
extern "C" { typedef 
#line 5130
struct tagEMRSETCOLORSPACE { 

EMR emr; 
DWORD ihCS; 
} EMRSETCOLORSPACE; }extern "C" { typedef tagEMRSETCOLORSPACE *PEMRSETCOLORSPACE; }
extern "C" { typedef tagEMRSETCOLORSPACE EMRSELECTCOLORSPACE; }extern "C" { typedef tagEMRSETCOLORSPACE *PEMRSELECTCOLORSPACE; }
extern "C" { typedef tagEMRSETCOLORSPACE EMRDELETECOLORSPACE; }extern "C" { typedef tagEMRSETCOLORSPACE *PEMRDELETECOLORSPACE; }
#line 5148 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 5142
struct tagEMREXTESCAPE { 

EMR emr; 
INT iEscape; 
INT cbEscData; 
BYTE EscData[1]; 
} EMREXTESCAPE; }extern "C" { typedef tagEMREXTESCAPE *PEMREXTESCAPE; }
extern "C" { typedef tagEMREXTESCAPE EMRDRAWESCAPE; }extern "C" { typedef tagEMREXTESCAPE *PEMRDRAWESCAPE; }
#line 5158
extern "C" { typedef 
#line 5151
struct tagEMRNAMEDESCAPE { 

EMR emr; 
INT iEscape; 
INT cbDriver; 
INT cbEscData; 
BYTE EscData[1]; 
} EMRNAMEDESCAPE; }extern "C" { typedef tagEMRNAMEDESCAPE *PEMRNAMEDESCAPE; }
#line 5169
extern "C" { typedef 
#line 5162
struct tagEMRSETICMPROFILE { 

EMR emr; 
DWORD dwFlags; 
DWORD cbName; 
DWORD cbData; 
BYTE Data[1]; 
} EMRSETICMPROFILE; }extern "C" { typedef tagEMRSETICMPROFILE *PEMRSETICMPROFILE; }
extern "C" { typedef tagEMRSETICMPROFILE EMRSETICMPROFILEA; }extern "C" { typedef tagEMRSETICMPROFILE *PEMRSETICMPROFILEA; }
extern "C" { typedef tagEMRSETICMPROFILE EMRSETICMPROFILEW; }extern "C" { typedef tagEMRSETICMPROFILE *PEMRSETICMPROFILEW; }
#line 5183
extern "C" { typedef 
#line 5175
struct tagEMRCREATECOLORSPACEW { 

EMR emr; 
DWORD ihCS; 
LOGCOLORSPACEW lcs; 
DWORD dwFlags; 
DWORD cbData; 
BYTE Data[1]; 
} EMRCREATECOLORSPACEW; }extern "C" { typedef tagEMRCREATECOLORSPACEW *PEMRCREATECOLORSPACEW; }
#line 5195
extern "C" { typedef 
#line 5187
struct tagCOLORMATCHTOTARGET { 

EMR emr; 
DWORD dwAction; 
DWORD dwFlags; 
DWORD cbName; 
DWORD cbData; 
BYTE Data[1]; 
} EMRCOLORMATCHTOTARGET; }extern "C" { typedef tagCOLORMATCHTOTARGET *PEMRCOLORMATCHTOTARGET; }
#line 5204
extern "C" { typedef 
#line 5197
struct tagCOLORCORRECTPALETTE { 

EMR emr; 
DWORD ihPalette; 
DWORD nFirstEntry; 
DWORD nPalEntries; 
DWORD nReserved; 
} EMRCOLORCORRECTPALETTE; }extern "C" { typedef tagCOLORCORRECTPALETTE *PEMRCOLORCORRECTPALETTE; }
#line 5227
extern "C" { typedef 
#line 5206
struct tagEMRALPHABLEND { 

EMR emr; 
RECTL rclBounds; 
LONG xDest; 
LONG yDest; 
LONG cxDest; 
LONG cyDest; 
DWORD dwRop; 
LONG xSrc; 
LONG ySrc; 
XFORM xformSrc; 
COLORREF crBkColorSrc; 
DWORD iUsageSrc; 

DWORD offBmiSrc; 
DWORD cbBmiSrc; 
DWORD offBitsSrc; 
DWORD cbBitsSrc; 
LONG cxSrc; 
LONG cySrc; 
} EMRALPHABLEND; }extern "C" { typedef tagEMRALPHABLEND *PEMRALPHABLEND; }
#line 5237
extern "C" { typedef 
#line 5229
struct tagEMRGRADIENTFILL { 

EMR emr; 
RECTL rclBounds; 
DWORD nVer; 
DWORD nTri; 
ULONG ulMode; 
TRIVERTEX Ver[1]; 
} EMRGRADIENTFILL; }extern "C" { typedef tagEMRGRADIENTFILL *PEMRGRADIENTFILL; }
#line 5260
extern "C" { typedef 
#line 5239
struct tagEMRTRANSPARENTBLT { 

EMR emr; 
RECTL rclBounds; 
LONG xDest; 
LONG yDest; 
LONG cxDest; 
LONG cyDest; 
DWORD dwRop; 
LONG xSrc; 
LONG ySrc; 
XFORM xformSrc; 
COLORREF crBkColorSrc; 
DWORD iUsageSrc; 

DWORD offBmiSrc; 
DWORD cbBmiSrc; 
DWORD offBitsSrc; 
DWORD cbBitsSrc; 
LONG cxSrc; 
LONG cySrc; 
} EMRTRANSPARENTBLT; }extern "C" { typedef tagEMRTRANSPARENTBLT *PEMRTRANSPARENTBLT; }
#line 5279 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall wglCopyContext(HGLRC, HGLRC, UINT); } 
extern "C" { extern __declspec( dllimport ) HGLRC __stdcall wglCreateContext(HDC); } 
extern "C" { extern __declspec( dllimport ) HGLRC __stdcall wglCreateLayerContext(HDC, int); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall wglDeleteContext(HGLRC); } 
extern "C" { extern __declspec( dllimport ) HGLRC __stdcall wglGetCurrentContext(); } 
extern "C" { extern __declspec( dllimport ) HDC __stdcall wglGetCurrentDC(); } 
extern "C" { extern __declspec( dllimport ) PROC __stdcall wglGetProcAddress(LPCSTR); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall wglMakeCurrent(HDC, HGLRC); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall wglShareLists(HGLRC, HGLRC); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall wglUseFontBitmapsA(HDC, DWORD, DWORD, DWORD); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall wglUseFontBitmapsW(HDC, DWORD, DWORD, DWORD); } 
#line 5295 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SwapBuffers(HDC); } 




extern "C" { typedef 
#line 5297
struct _POINTFLOAT { 
FLOAT x; 
FLOAT y; 
} POINTFLOAT; }extern "C" { typedef _POINTFLOAT *PPOINTFLOAT; }
#line 5308
extern "C" { typedef 
#line 5302
struct _GLYPHMETRICSFLOAT { 
FLOAT gmfBlackBoxX; 
FLOAT gmfBlackBoxY; 
POINTFLOAT gmfptGlyphOrigin; 
FLOAT gmfCellIncX; 
FLOAT gmfCellIncY; 
} GLYPHMETRICSFLOAT; }extern "C" { typedef _GLYPHMETRICSFLOAT *PGLYPHMETRICSFLOAT; }extern "C" { typedef _GLYPHMETRICSFLOAT *LPGLYPHMETRICSFLOAT; }



extern "C" { extern __declspec( dllimport ) BOOL __stdcall wglUseFontOutlinesA(HDC, DWORD, DWORD, DWORD, FLOAT, FLOAT, int, LPGLYPHMETRICSFLOAT); } 

extern "C" { extern __declspec( dllimport ) BOOL __stdcall wglUseFontOutlinesW(HDC, DWORD, DWORD, DWORD, FLOAT, FLOAT, int, LPGLYPHMETRICSFLOAT); } 
#line 5348 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wingdi.h"
extern "C" { typedef 
#line 5323
struct tagLAYERPLANEDESCRIPTOR { 
WORD nSize; 
WORD nVersion; 
DWORD dwFlags; 
BYTE iPixelType; 
BYTE cColorBits; 
BYTE cRedBits; 
BYTE cRedShift; 
BYTE cGreenBits; 
BYTE cGreenShift; 
BYTE cBlueBits; 
BYTE cBlueShift; 
BYTE cAlphaBits; 
BYTE cAlphaShift; 
BYTE cAccumBits; 
BYTE cAccumRedBits; 
BYTE cAccumGreenBits; 
BYTE cAccumBlueBits; 
BYTE cAccumAlphaBits; 
BYTE cDepthBits; 
BYTE cStencilBits; 
BYTE cAuxBuffers; 
BYTE iLayerPlane; 
BYTE bReserved; 
COLORREF crTransparent; 
} LAYERPLANEDESCRIPTOR; }extern "C" { typedef tagLAYERPLANEDESCRIPTOR *PLAYERPLANEDESCRIPTOR; }extern "C" { typedef tagLAYERPLANEDESCRIPTOR *LPLAYERPLANEDESCRIPTOR; }
#line 5398
extern "C" { extern __declspec( dllimport ) BOOL __stdcall wglDescribeLayerPlane(HDC, int, int, UINT, LPLAYERPLANEDESCRIPTOR); } 

extern "C" { extern __declspec( dllimport ) int __stdcall wglSetLayerPaletteEntries(HDC, int, int, int, const COLORREF *); } 

extern "C" { extern __declspec( dllimport ) int __stdcall wglGetLayerPaletteEntries(HDC, int, int, int, COLORREF *); } 

extern "C" { extern __declspec( dllimport ) BOOL __stdcall wglRealizeLayerPalette(HDC, int, BOOL); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall wglSwapLayerBuffers(HDC, UINT); } 
#line 5413
extern "C" { typedef 
#line 5409
struct _WGLSWAP { 

HDC hdc; 
UINT uiFlags; 
} WGLSWAP; }extern "C" { typedef _WGLSWAP *PWGLSWAP; }extern "C" { typedef _WGLSWAP *LPWGLSWAP; }



extern "C" { extern __declspec( dllimport ) DWORD __stdcall wglSwapMultipleBuffers(UINT, const WGLSWAP *); } 
#line 46 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef HANDLE HDWP; }
extern "C" { typedef void MENUTEMPLATEA; }
extern "C" { typedef void MENUTEMPLATEW; }



extern "C" { typedef MENUTEMPLATEA MENUTEMPLATE; }
#line 54 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef PVOID LPMENUTEMPLATEA; }
extern "C" { typedef PVOID LPMENUTEMPLATEW; }



extern "C" { typedef LPMENUTEMPLATEA LPMENUTEMPLATE; }
#line 62 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef LRESULT (__stdcall *WNDPROC)(HWND, UINT, WPARAM, LPARAM); }



extern "C" { typedef INT_PTR (__stdcall *DLGPROC)(HWND, UINT, WPARAM, LPARAM); }
extern "C" { typedef void (__stdcall *TIMERPROC)(HWND, UINT, UINT_PTR, DWORD); }
extern "C" { typedef BOOL (__stdcall *GRAYSTRINGPROC)(HDC, LPARAM, int); }
extern "C" { typedef BOOL (__stdcall *WNDENUMPROC)(HWND, LPARAM); }
extern "C" { typedef LRESULT (__stdcall *HOOKPROC)(int, WPARAM, LPARAM); }
extern "C" { typedef void (__stdcall *SENDASYNCPROC)(HWND, UINT, ULONG_PTR, LRESULT); }

extern "C" { typedef BOOL (__stdcall *PROPENUMPROCA)(HWND, LPCSTR, HANDLE); }
extern "C" { typedef BOOL (__stdcall *PROPENUMPROCW)(HWND, LPCWSTR, HANDLE); }

extern "C" { typedef BOOL (__stdcall *PROPENUMPROCEXA)(HWND, LPSTR, HANDLE, ULONG_PTR); }
extern "C" { typedef BOOL (__stdcall *PROPENUMPROCEXW)(HWND, LPWSTR, HANDLE, ULONG_PTR); }

extern "C" { typedef int (__stdcall *EDITWORDBREAKPROCA)(LPSTR, int, int, int); }
extern "C" { typedef int (__stdcall *EDITWORDBREAKPROCW)(LPWSTR, int, int, int); }


extern "C" { typedef BOOL (__stdcall *DRAWSTATEPROC)(HDC, LPARAM, WPARAM, int, int); }
#line 117 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef PROPENUMPROCA PROPENUMPROC; }
extern "C" { typedef PROPENUMPROCEXA PROPENUMPROCEX; }
extern "C" { typedef EDITWORDBREAKPROCA EDITWORDBREAKPROC; }
#line 124 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef BOOL (__stdcall *NAMEENUMPROCA)(LPSTR, LPARAM); }
extern "C" { typedef BOOL (__stdcall *NAMEENUMPROCW)(LPWSTR, LPARAM); }

extern "C" { typedef NAMEENUMPROCA WINSTAENUMPROCA; }
extern "C" { typedef NAMEENUMPROCA DESKTOPENUMPROCA; }
extern "C" { typedef NAMEENUMPROCW WINSTAENUMPROCW; }
extern "C" { typedef NAMEENUMPROCW DESKTOPENUMPROCW; }
#line 151 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef WINSTAENUMPROCA WINSTAENUMPROC; }
extern "C" { typedef DESKTOPENUMPROCA DESKTOPENUMPROC; }
#line 214 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
#pragma warning(push)
#pragma warning(disable:4995)
#line 221 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) int __stdcall wvsprintfA(LPSTR, LPCSTR, va_list); } 
#line 228
extern "C" { extern __declspec( dllimport ) int __stdcall wvsprintfW(LPWSTR, LPCWSTR, va_list); } 
#line 241 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) int __cdecl wsprintfA(LPSTR, LPCSTR, ...); } 
#line 248
extern "C" { extern __declspec( dllimport ) int __cdecl wsprintfW(LPWSTR, LPCWSTR, ...); } 
#line 259 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
#pragma warning(pop)
#line 716 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 712
struct tagCBT_CREATEWNDA { 

struct tagCREATESTRUCTA *lpcs; 
HWND hwndInsertAfter; 
} CBT_CREATEWNDA; }extern "C" { typedef tagCBT_CREATEWNDA *LPCBT_CREATEWNDA; }
#line 724
extern "C" { typedef 
#line 720
struct tagCBT_CREATEWNDW { 

struct tagCREATESTRUCTW *lpcs; 
HWND hwndInsertAfter; 
} CBT_CREATEWNDW; }extern "C" { typedef tagCBT_CREATEWNDW *LPCBT_CREATEWNDW; }




extern "C" { typedef CBT_CREATEWNDA CBT_CREATEWND; }
extern "C" { typedef LPCBT_CREATEWNDA LPCBT_CREATEWND; }
#line 740 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 736
struct tagCBTACTIVATESTRUCT { 

BOOL fMouse; 
HWND hWndActive; 
} CBTACTIVATESTRUCT; }extern "C" { typedef tagCBTACTIVATESTRUCT *LPCBTACTIVATESTRUCT; }
#line 751
extern "C" { typedef 
#line 746
struct tagWTSSESSION_NOTIFICATION { 

DWORD cbSize; 
DWORD dwSessionId; 

} WTSSESSION_NOTIFICATION; }extern "C" { typedef tagWTSSESSION_NOTIFICATION *PWTSSESSION_NOTIFICATION; }
#line 888 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 885
struct SHELLHOOKINFO { 
HWND hwnd; 
RECT rc; 
} SHELLHOOKINFO, *LPSHELLHOOKINFO; }
#line 899
extern "C" { typedef 
#line 893
struct tagEVENTMSG { 
UINT message; 
UINT paramL; 
UINT paramH; 
DWORD time; 
HWND hwnd; 
} EVENTMSG; }extern "C" { typedef tagEVENTMSG *PEVENTMSGMSG; }extern "C" { typedef tagEVENTMSG *NPEVENTMSGMSG; }extern "C" { typedef tagEVENTMSG *LPEVENTMSGMSG; }

extern "C" { typedef tagEVENTMSG *PEVENTMSG; }extern "C" { typedef tagEVENTMSG *NPEVENTMSG; }extern "C" { typedef tagEVENTMSG *LPEVENTMSG; }
#line 911
extern "C" { typedef 
#line 906
struct tagCWPSTRUCT { 
LPARAM lParam; 
WPARAM wParam; 
UINT message; 
HWND hwnd; 
} CWPSTRUCT; }extern "C" { typedef tagCWPSTRUCT *PCWPSTRUCT; }extern "C" { typedef tagCWPSTRUCT *NPCWPSTRUCT; }extern "C" { typedef tagCWPSTRUCT *LPCWPSTRUCT; }
#line 923
extern "C" { typedef 
#line 917
struct tagCWPRETSTRUCT { 
LRESULT lResult; 
LPARAM lParam; 
WPARAM wParam; 
UINT message; 
HWND hwnd; 
} CWPRETSTRUCT; }extern "C" { typedef tagCWPRETSTRUCT *PCWPRETSTRUCT; }extern "C" { typedef tagCWPRETSTRUCT *NPCWPRETSTRUCT; }extern "C" { typedef tagCWPRETSTRUCT *LPCWPRETSTRUCT; }
#line 949 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 943
struct tagKBDLLHOOKSTRUCT { 
DWORD vkCode; 
DWORD scanCode; 
DWORD flags; 
DWORD time; 
ULONG_PTR dwExtraInfo; 
} KBDLLHOOKSTRUCT; }extern "C" { typedef tagKBDLLHOOKSTRUCT *LPKBDLLHOOKSTRUCT; }extern "C" { typedef tagKBDLLHOOKSTRUCT *PKBDLLHOOKSTRUCT; }
#line 960
extern "C" { typedef 
#line 954
struct tagMSLLHOOKSTRUCT { 
POINT pt; 
DWORD mouseData; 
DWORD flags; 
DWORD time; 
ULONG_PTR dwExtraInfo; 
} MSLLHOOKSTRUCT; }extern "C" { typedef tagMSLLHOOKSTRUCT *LPMSLLHOOKSTRUCT; }extern "C" { typedef tagMSLLHOOKSTRUCT *PMSLLHOOKSTRUCT; }
#line 974 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 967
struct tagDEBUGHOOKINFO { 

DWORD idThread; 
DWORD idThreadInstaller; 
LPARAM lParam; 
WPARAM wParam; 
int code; 
} DEBUGHOOKINFO; }extern "C" { typedef tagDEBUGHOOKINFO *PDEBUGHOOKINFO; }extern "C" { typedef tagDEBUGHOOKINFO *NPDEBUGHOOKINFO; }extern "C" { typedef tagDEBUGHOOKINFO *LPDEBUGHOOKINFO; }
#line 984
extern "C" { typedef 
#line 979
struct tagMOUSEHOOKSTRUCT { 
POINT pt; 
HWND hwnd; 
UINT wHitTestCode; 
ULONG_PTR dwExtraInfo; 
} MOUSEHOOKSTRUCT; }extern "C" { typedef tagMOUSEHOOKSTRUCT *LPMOUSEHOOKSTRUCT; }extern "C" { typedef tagMOUSEHOOKSTRUCT *PMOUSEHOOKSTRUCT; }
#line 991
extern "C" { typedef 
#line 988
struct tagMOUSEHOOKSTRUCTEX : public tagMOUSEHOOKSTRUCT { 

DWORD mouseData; 
} MOUSEHOOKSTRUCTEX; }extern "C" { typedef tagMOUSEHOOKSTRUCTEX *LPMOUSEHOOKSTRUCTEX; }extern "C" { typedef tagMOUSEHOOKSTRUCTEX *PMOUSEHOOKSTRUCTEX; }
#line 1010 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 1005
struct tagHARDWAREHOOKSTRUCT { 
HWND hwnd; 
UINT message; 
WPARAM wParam; 
LPARAM lParam; 
} HARDWAREHOOKSTRUCT; }extern "C" { typedef tagHARDWAREHOOKSTRUCT *LPHARDWAREHOOKSTRUCT; }extern "C" { typedef tagHARDWAREHOOKSTRUCT *PHARDWAREHOOKSTRUCT; }
#line 1052 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HKL __stdcall LoadKeyboardLayoutA(LPCSTR, UINT); } 
#line 1058
extern "C" { extern __declspec( dllimport ) HKL __stdcall LoadKeyboardLayoutW(LPCWSTR, UINT); } 
#line 1072 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HKL __stdcall ActivateKeyboardLayout(HKL, UINT); } 
#line 1088 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) int __stdcall ToUnicodeEx(UINT, UINT, const BYTE *, LPWSTR, int, UINT, HKL); } 
#line 1101 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall UnloadKeyboardLayout(HKL); } 
#line 1107
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetKeyboardLayoutNameA(LPSTR); } 




extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetKeyboardLayoutNameW(LPWSTR); } 
#line 1124 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) int __stdcall GetKeyboardLayoutList(int, HKL *); } 
#line 1131
extern "C" { extern __declspec( dllimport ) HKL __stdcall GetKeyboardLayout(DWORD); } 
#line 1143 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 1138
struct tagMOUSEMOVEPOINT { 
int x; 
int y; 
DWORD time; 
ULONG_PTR dwExtraInfo; 
} MOUSEMOVEPOINT; }extern "C" { typedef tagMOUSEMOVEPOINT *PMOUSEMOVEPOINT; }extern "C" { typedef tagMOUSEMOVEPOINT *LPMOUSEMOVEPOINT; }
#line 1154
extern "C" { extern __declspec( dllimport ) int __stdcall GetMouseMovePointsEx(UINT, LPMOUSEMOVEPOINT, LPMOUSEMOVEPOINT, int, DWORD); } 
#line 1188 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HDESK __stdcall CreateDesktopA(LPCSTR, LPCSTR, LPDEVMODEA, DWORD, ACCESS_MASK, LPSECURITY_ATTRIBUTES); } 
#line 1198
extern "C" { extern __declspec( dllimport ) HDESK __stdcall CreateDesktopW(LPCWSTR, LPCWSTR, LPDEVMODEW, DWORD, ACCESS_MASK, LPSECURITY_ATTRIBUTES); } 
#line 1214 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HDESK __stdcall CreateDesktopExA(LPCSTR, LPCSTR, LPDEVMODEA, DWORD, ACCESS_MASK, LPSECURITY_ATTRIBUTES, ULONG, PVOID); } 
#line 1226
extern "C" { extern __declspec( dllimport ) HDESK __stdcall CreateDesktopExW(LPCWSTR, LPCWSTR, LPDEVMODEW, DWORD, ACCESS_MASK, LPSECURITY_ATTRIBUTES, ULONG, PVOID); } 
#line 1247 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HDESK __stdcall OpenDesktopA(LPCSTR, DWORD, BOOL, ACCESS_MASK); } 
#line 1255
extern "C" { extern __declspec( dllimport ) HDESK __stdcall OpenDesktopW(LPCWSTR, DWORD, BOOL, ACCESS_MASK); } 
#line 1269 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HDESK __stdcall OpenInputDesktop(DWORD, BOOL, ACCESS_MASK); } 
#line 1278
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumDesktopsA(HWINSTA, DESKTOPENUMPROCA, LPARAM); } 
#line 1285
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumDesktopsW(HWINSTA, DESKTOPENUMPROCW, LPARAM); } 
#line 1298 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumDesktopWindows(HDESK, WNDENUMPROC, LPARAM); } 
#line 1306
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SwitchDesktop(HDESK); } 
#line 1313
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetThreadDesktop(HDESK); } 
#line 1319
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CloseDesktop(HDESK); } 
#line 1325
extern "C" { extern __declspec( dllimport ) HDESK __stdcall GetThreadDesktop(DWORD); } 
#line 1361 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HWINSTA __stdcall CreateWindowStationA(LPCSTR, DWORD, ACCESS_MASK, LPSECURITY_ATTRIBUTES); } 
#line 1369
extern "C" { extern __declspec( dllimport ) HWINSTA __stdcall CreateWindowStationW(LPCWSTR, DWORD, ACCESS_MASK, LPSECURITY_ATTRIBUTES); } 
#line 1383 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HWINSTA __stdcall OpenWindowStationA(LPCSTR, BOOL, ACCESS_MASK); } 
#line 1390
extern "C" { extern __declspec( dllimport ) HWINSTA __stdcall OpenWindowStationW(LPCWSTR, BOOL, ACCESS_MASK); } 
#line 1403 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumWindowStationsA(WINSTAENUMPROCA, LPARAM); } 
#line 1409
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumWindowStationsW(WINSTAENUMPROCW, LPARAM); } 
#line 1421 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CloseWindowStation(HWINSTA); } 
#line 1427
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetProcessWindowStation(HWINSTA); } 
#line 1433
extern "C" { extern __declspec( dllimport ) HWINSTA __stdcall GetProcessWindowStation(); } 
#line 1442 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetUserObjectSecurity(HANDLE, PSECURITY_INFORMATION, PSECURITY_DESCRIPTOR); } 
#line 1450
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetUserObjectSecurity(HANDLE, PSECURITY_INFORMATION, PSECURITY_DESCRIPTOR, DWORD, LPDWORD); } 
#line 1470 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 1466
struct tagUSEROBJECTFLAGS { 
BOOL fInherit; 
BOOL fReserved; 
DWORD dwFlags; 
} USEROBJECTFLAGS; }extern "C" { typedef tagUSEROBJECTFLAGS *PUSEROBJECTFLAGS; }




extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetUserObjectInformationA(HANDLE, int, PVOID, DWORD, LPDWORD); } 
#line 1484
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetUserObjectInformationW(HANDLE, int, PVOID, DWORD, LPDWORD); } 
#line 1499 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetUserObjectInformationA(HANDLE, int, PVOID, DWORD); } 
#line 1507
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetUserObjectInformationW(HANDLE, int, PVOID, DWORD); } 
#line 1536 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 1521
struct tagWNDCLASSEXA { 
UINT cbSize; 

UINT style; 
WNDPROC lpfnWndProc; 
int cbClsExtra; 
int cbWndExtra; 
HINSTANCE hInstance; 
HICON hIcon; 
HCURSOR hCursor; 
HBRUSH hbrBackground; 
LPCSTR lpszMenuName; 
LPCSTR lpszClassName; 

HICON hIconSm; 
} WNDCLASSEXA; }extern "C" { typedef tagWNDCLASSEXA *PWNDCLASSEXA; }extern "C" { typedef tagWNDCLASSEXA *NPWNDCLASSEXA; }extern "C" { typedef tagWNDCLASSEXA *LPWNDCLASSEXA; }
#line 1552
extern "C" { typedef 
#line 1537
struct tagWNDCLASSEXW { 
UINT cbSize; 

UINT style; 
WNDPROC lpfnWndProc; 
int cbClsExtra; 
int cbWndExtra; 
HINSTANCE hInstance; 
HICON hIcon; 
HCURSOR hCursor; 
HBRUSH hbrBackground; 
LPCWSTR lpszMenuName; 
LPCWSTR lpszClassName; 

HICON hIconSm; 
} WNDCLASSEXW; }extern "C" { typedef tagWNDCLASSEXW *PWNDCLASSEXW; }extern "C" { typedef tagWNDCLASSEXW *NPWNDCLASSEXW; }extern "C" { typedef tagWNDCLASSEXW *LPWNDCLASSEXW; }
#line 1559
extern "C" { typedef WNDCLASSEXA WNDCLASSEX; }
extern "C" { typedef PWNDCLASSEXA PWNDCLASSEX; }
extern "C" { typedef NPWNDCLASSEXA NPWNDCLASSEX; }
extern "C" { typedef LPWNDCLASSEXA LPWNDCLASSEX; }
#line 1577 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 1566
struct tagWNDCLASSA { 
UINT style; 
WNDPROC lpfnWndProc; 
int cbClsExtra; 
int cbWndExtra; 
HINSTANCE hInstance; 
HICON hIcon; 
HCURSOR hCursor; 
HBRUSH hbrBackground; 
LPCSTR lpszMenuName; 
LPCSTR lpszClassName; 
} WNDCLASSA; }extern "C" { typedef tagWNDCLASSA *PWNDCLASSA; }extern "C" { typedef tagWNDCLASSA *NPWNDCLASSA; }extern "C" { typedef tagWNDCLASSA *LPWNDCLASSA; }
#line 1589
extern "C" { typedef 
#line 1578
struct tagWNDCLASSW { 
UINT style; 
WNDPROC lpfnWndProc; 
int cbClsExtra; 
int cbWndExtra; 
HINSTANCE hInstance; 
HICON hIcon; 
HCURSOR hCursor; 
HBRUSH hbrBackground; 
LPCWSTR lpszMenuName; 
LPCWSTR lpszClassName; 
} WNDCLASSW; }extern "C" { typedef tagWNDCLASSW *PWNDCLASSW; }extern "C" { typedef tagWNDCLASSW *NPWNDCLASSW; }extern "C" { typedef tagWNDCLASSW *LPWNDCLASSW; }
#line 1596
extern "C" { typedef WNDCLASSA WNDCLASS; }
extern "C" { typedef PWNDCLASSA PWNDCLASS; }
extern "C" { typedef NPWNDCLASSA NPWNDCLASS; }
extern "C" { typedef LPWNDCLASSA LPWNDCLASS; }
#line 1605 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsHungAppWindow(HWND); } 
#line 1613
extern "C" { extern __declspec( dllimport ) void __stdcall DisableProcessWindowsGhosting(); } 
#line 1633 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 1623
struct tagMSG { 
HWND hwnd; 
UINT message; 
WPARAM wParam; 
LPARAM lParam; 
DWORD time; 
POINT pt; 



} MSG; }extern "C" { typedef tagMSG *PMSG; }extern "C" { typedef tagMSG *NPMSG; }extern "C" { typedef tagMSG *LPMSG; }
#line 1780 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 1774
struct tagMINMAXINFO { 
POINT ptReserved; 
POINT ptMaxSize; 
POINT ptMaxPosition; 
POINT ptMinTrackSize; 
POINT ptMaxTrackSize; 
} MINMAXINFO; }extern "C" { typedef tagMINMAXINFO *PMINMAXINFO; }extern "C" { typedef tagMINMAXINFO *LPMINMAXINFO; }
#line 1828 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 1824
struct tagCOPYDATASTRUCT { 
ULONG_PTR dwData; 
DWORD cbData; 
PVOID lpData; 
} COPYDATASTRUCT; }extern "C" { typedef tagCOPYDATASTRUCT *PCOPYDATASTRUCT; }
#line 1836
extern "C" { typedef 
#line 1831
struct tagMDINEXTMENU { 

HMENU hmenuIn; 
HMENU hmenuNext; 
HWND hwndNext; 
} MDINEXTMENU; }extern "C" { typedef tagMDINEXTMENU *PMDINEXTMENU; }extern "C" { typedef tagMDINEXTMENU *LPMDINEXTMENU; }
#line 2079 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 2075
struct POWERBROADCAST_SETTING { 
GUID PowerSetting; 
DWORD DataLength; 
UCHAR Data[1]; 
} POWERBROADCAST_SETTING, *PPOWERBROADCAST_SETTING; }
#line 2304 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) UINT __stdcall RegisterWindowMessageA(LPCSTR); } 




extern "C" { extern __declspec( dllimport ) UINT __stdcall RegisterWindowMessageW(LPCWSTR); } 
#line 2347 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 2339
struct tagWINDOWPOS { 
HWND hwnd; 
HWND hwndInsertAfter; 
int x; 
int y; 
int cx; 
int cy; 
UINT flags; 
} WINDOWPOS; }extern "C" { typedef tagWINDOWPOS *LPWINDOWPOS; }extern "C" { typedef tagWINDOWPOS *PWINDOWPOS; }
#line 2355
extern "C" { typedef 
#line 2352
struct tagNCCALCSIZE_PARAMS { 
RECT rgrc[3]; 
PWINDOWPOS lppos; 
} NCCALCSIZE_PARAMS; }extern "C" { typedef tagNCCALCSIZE_PARAMS *LPNCCALCSIZE_PARAMS; }
#line 2410 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 2405
struct tagTRACKMOUSEEVENT { 
DWORD cbSize; 
DWORD dwFlags; 
HWND hwndTrack; 
DWORD dwHoverTime; 
} TRACKMOUSEEVENT; }extern "C" { typedef tagTRACKMOUSEEVENT *LPTRACKMOUSEEVENT; }




extern "C" { extern __declspec( dllimport ) BOOL __stdcall TrackMouseEvent(LPTRACKMOUSEEVENT); } 
#line 2612 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DrawEdge(HDC, LPRECT, UINT, UINT); } 
#line 2669 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DrawFrameControl(HDC, LPRECT, UINT, UINT); } 
#line 2692 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DrawCaption(HWND, HDC, const RECT *, UINT); } 
#line 2705
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DrawAnimatedRects(HWND, int, const RECT *, const RECT *); } 
#line 2789 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 2779 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
struct tagACCEL { 

BYTE fVirt; 
WORD key; 
WORD cmd; 
#line 2789 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
} ACCEL; }extern "C" { typedef tagACCEL *LPACCEL; }
#line 2798
extern "C" { typedef 
#line 2791
struct tagPAINTSTRUCT { 
HDC hdc; 
BOOL fErase; 
RECT rcPaint; 
BOOL fRestore; 
BOOL fIncUpdate; 
BYTE rgbReserved[32]; 
} PAINTSTRUCT; }extern "C" { typedef tagPAINTSTRUCT *PPAINTSTRUCT; }extern "C" { typedef tagPAINTSTRUCT *NPPAINTSTRUCT; }extern "C" { typedef tagPAINTSTRUCT *LPPAINTSTRUCT; }
#line 2813
extern "C" { typedef 
#line 2800
struct tagCREATESTRUCTA { 
LPVOID lpCreateParams; 
HINSTANCE hInstance; 
HMENU hMenu; 
HWND hwndParent; 
int cy; 
int cx; 
int y; 
int x; 
LONG style; 
LPCSTR lpszName; 
LPCSTR lpszClass; 
DWORD dwExStyle; 
} CREATESTRUCTA; }extern "C" { typedef tagCREATESTRUCTA *LPCREATESTRUCTA; }
#line 2827
extern "C" { typedef 
#line 2814
struct tagCREATESTRUCTW { 
LPVOID lpCreateParams; 
HINSTANCE hInstance; 
HMENU hMenu; 
HWND hwndParent; 
int cy; 
int cx; 
int y; 
int x; 
LONG style; 
LPCWSTR lpszName; 
LPCWSTR lpszClass; 
DWORD dwExStyle; 
} CREATESTRUCTW; }extern "C" { typedef tagCREATESTRUCTW *LPCREATESTRUCTW; }




extern "C" { typedef CREATESTRUCTA CREATESTRUCT; }
extern "C" { typedef LPCREATESTRUCTA LPCREATESTRUCT; }
#line 2846 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 2836
struct tagWINDOWPLACEMENT { 
UINT length; 
UINT flags; 
UINT showCmd; 
POINT ptMinPosition; 
POINT ptMaxPosition; 
RECT rcNormalPosition; 



} WINDOWPLACEMENT; }
extern "C" { typedef WINDOWPLACEMENT *PWINDOWPLACEMENT; }extern "C" { typedef WINDOWPLACEMENT *LPWINDOWPLACEMENT; }
#line 2861 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 2856
struct tagNMHDR { 

HWND hwndFrom; 
UINT_PTR idFrom; 
UINT code; 
} NMHDR; }
extern "C" { typedef NMHDR *LPNMHDR; }
#line 2868
extern "C" { typedef 
#line 2864
struct tagSTYLESTRUCT { 

DWORD styleOld; 
DWORD styleNew; 
} STYLESTRUCT; }extern "C" { typedef tagSTYLESTRUCT *LPSTYLESTRUCT; }
#line 2921 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 2914
struct tagMEASUREITEMSTRUCT { 
UINT CtlType; 
UINT CtlID; 
UINT itemID; 
UINT itemWidth; 
UINT itemHeight; 
ULONG_PTR itemData; 
} MEASUREITEMSTRUCT; }extern "C" { typedef tagMEASUREITEMSTRUCT *PMEASUREITEMSTRUCT; }extern "C" { typedef tagMEASUREITEMSTRUCT *LPMEASUREITEMSTRUCT; }
#line 2936
extern "C" { typedef 
#line 2926
struct tagDRAWITEMSTRUCT { 
UINT CtlType; 
UINT CtlID; 
UINT itemID; 
UINT itemAction; 
UINT itemState; 
HWND hwndItem; 
HDC hDC; 
RECT rcItem; 
ULONG_PTR itemData; 
} DRAWITEMSTRUCT; }extern "C" { typedef tagDRAWITEMSTRUCT *PDRAWITEMSTRUCT; }extern "C" { typedef tagDRAWITEMSTRUCT *LPDRAWITEMSTRUCT; }
#line 2947
extern "C" { typedef 
#line 2941
struct tagDELETEITEMSTRUCT { 
UINT CtlType; 
UINT CtlID; 
UINT itemID; 
HWND hwndItem; 
ULONG_PTR itemData; 
} DELETEITEMSTRUCT; }extern "C" { typedef tagDELETEITEMSTRUCT *PDELETEITEMSTRUCT; }extern "C" { typedef tagDELETEITEMSTRUCT *LPDELETEITEMSTRUCT; }
#line 2961
extern "C" { typedef 
#line 2952
struct tagCOMPAREITEMSTRUCT { 
UINT CtlType; 
UINT CtlID; 
HWND hwndItem; 
UINT itemID1; 
ULONG_PTR itemData1; 
UINT itemID2; 
ULONG_PTR itemData2; 
DWORD dwLocaleId; 
} COMPAREITEMSTRUCT; }extern "C" { typedef tagCOMPAREITEMSTRUCT *PCOMPAREITEMSTRUCT; }extern "C" { typedef tagCOMPAREITEMSTRUCT *LPCOMPAREITEMSTRUCT; }
#line 2972
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetMessageA(LPMSG, HWND, UINT, UINT); } 
#line 2980
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetMessageW(LPMSG, HWND, UINT, UINT); } 
#line 3019 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall TranslateMessage(const MSG *); } 
#line 3025
extern "C" { extern __declspec( dllimport ) LRESULT __stdcall DispatchMessageA(const MSG *); } 




extern "C" { extern __declspec( dllimport ) LRESULT __stdcall DispatchMessageW(const MSG *); } 
#line 3059 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetMessageQueue(int); } 
#line 3065
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PeekMessageA(LPMSG, HWND, UINT, UINT, UINT); } 
#line 3074
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PeekMessageW(LPMSG, HWND, UINT, UINT, UINT); } 
#line 3106 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall RegisterHotKey(HWND, int, UINT, UINT); } 
#line 3115
extern "C" { extern __declspec( dllimport ) BOOL __stdcall UnregisterHotKey(HWND, int); } 
#line 3165 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ExitWindowsEx(UINT, DWORD); } 
#line 3172
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SwapMouseButton(BOOL); } 
#line 3178
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetMessagePos(); } 
#line 3184
extern "C" { extern __declspec( dllimport ) LONG __stdcall GetMessageTime(); } 
#line 3190
extern "C" { extern __declspec( dllimport ) LPARAM __stdcall GetMessageExtraInfo(); } 
#line 3197
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsWow64Message(); } 
#line 3205 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) LPARAM __stdcall SetMessageExtraInfo(LPARAM); } 
#line 3212 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) LRESULT __stdcall SendMessageA(HWND, UINT, WPARAM, LPARAM); } 
#line 3220
extern "C" { extern __declspec( dllimport ) LRESULT __stdcall SendMessageW(HWND, UINT, WPARAM, LPARAM); } 
#line 3260 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) LRESULT __stdcall SendMessageTimeoutA(HWND, UINT, WPARAM, LPARAM, UINT, UINT, PDWORD_PTR); } 
#line 3271
extern "C" { extern __declspec( dllimport ) LRESULT __stdcall SendMessageTimeoutW(HWND, UINT, WPARAM, LPARAM, UINT, UINT, PDWORD_PTR); } 
#line 3288 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SendNotifyMessageA(HWND, UINT, WPARAM, LPARAM); } 
#line 3296
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SendNotifyMessageW(HWND, UINT, WPARAM, LPARAM); } 
#line 3310 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SendMessageCallbackA(HWND, UINT, WPARAM, LPARAM, SENDASYNCPROC, ULONG_PTR); } 
#line 3320
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SendMessageCallbackW(HWND, UINT, WPARAM, LPARAM, SENDASYNCPROC, ULONG_PTR); } 
#line 3339 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 3334
struct BSMINFO { 
UINT cbSize; 
HDESK hdesk; 
HWND hwnd; 
LUID luid; 
} BSMINFO, *PBSMINFO; }




extern "C" { extern __declspec( dllimport ) long __stdcall BroadcastSystemMessageExA(DWORD, LPDWORD, UINT, WPARAM, LPARAM, PBSMINFO); } 
#line 3354
extern "C" { extern __declspec( dllimport ) long __stdcall BroadcastSystemMessageExW(DWORD, LPDWORD, UINT, WPARAM, LPARAM, PBSMINFO); } 
#line 3374 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) long __stdcall BroadcastSystemMessageA(DWORD, LPDWORD, UINT, WPARAM, LPARAM); } 
#line 3383
extern "C" { extern __declspec( dllimport ) long __stdcall BroadcastSystemMessageW(DWORD, LPDWORD, UINT, WPARAM, LPARAM); } 
#line 3439 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef PVOID HDEVNOTIFY; }
extern "C" { typedef HDEVNOTIFY *PHDEVNOTIFY; }
#line 3451 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HDEVNOTIFY __stdcall RegisterDeviceNotificationA(HANDLE, LPVOID, DWORD); } 
#line 3458
extern "C" { extern __declspec( dllimport ) HDEVNOTIFY __stdcall RegisterDeviceNotificationW(HANDLE, LPVOID, DWORD); } 
#line 3471 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall UnregisterDeviceNotification(HDEVNOTIFY); } 




extern "C" { typedef PVOID HPOWERNOTIFY; }
extern "C" { typedef HPOWERNOTIFY *PHPOWERNOTIFY; }




extern "C" { extern __declspec( dllimport ) HPOWERNOTIFY __stdcall RegisterPowerSettingNotification(HANDLE, LPCGUID, DWORD); } 
#line 3491
extern "C" { extern __declspec( dllimport ) BOOL __stdcall UnregisterPowerSettingNotification(HPOWERNOTIFY); } 
#line 3501 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PostMessageA(HWND, UINT, WPARAM, LPARAM); } 
#line 3509
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PostMessageW(HWND, UINT, WPARAM, LPARAM); } 
#line 3523 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PostThreadMessageA(DWORD, UINT, WPARAM, LPARAM); } 
#line 3531
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PostThreadMessageW(DWORD, UINT, WPARAM, LPARAM); } 
#line 3564 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AttachThreadInput(DWORD, DWORD, BOOL); } 
#line 3573
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ReplyMessage(LRESULT); } 
#line 3579
extern "C" { extern __declspec( dllimport ) BOOL __stdcall WaitMessage(); } 
#line 3586
extern "C" { extern __declspec( dllimport ) DWORD __stdcall WaitForInputIdle(HANDLE, DWORD); } 
#line 3598 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) LRESULT __stdcall DefWindowProcA(HWND, UINT, WPARAM, LPARAM); } 
#line 3611 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) LRESULT __stdcall DefWindowProcW(HWND, UINT, WPARAM, LPARAM); } 
#line 3625 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) void __stdcall PostQuitMessage(int); } 
#line 3633
extern "C" { extern __declspec( dllimport ) LRESULT __stdcall CallWindowProcA(WNDPROC, HWND, UINT, WPARAM, LPARAM); } 
#line 3642
extern "C" { extern __declspec( dllimport ) LRESULT __stdcall CallWindowProcW(WNDPROC, HWND, UINT, WPARAM, LPARAM); } 
#line 3685 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall InSendMessage(); } 
#line 3692
extern "C" { extern __declspec( dllimport ) DWORD __stdcall InSendMessageEx(LPVOID); } 
#line 3708 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetDoubleClickTime(); } 
#line 3714
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetDoubleClickTime(UINT); } 
#line 3720
extern "C" { extern __declspec( dllimport ) ATOM __stdcall RegisterClassA(const WNDCLASSA *); } 




extern "C" { extern __declspec( dllimport ) ATOM __stdcall RegisterClassW(const WNDCLASSW *); } 
#line 3736 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall UnregisterClassA(LPCSTR, HINSTANCE); } 
#line 3742
extern "C" { extern __declspec( dllimport ) BOOL __stdcall UnregisterClassW(LPCWSTR, HINSTANCE); } 
#line 3754 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetClassInfoA(HINSTANCE, LPCSTR, LPWNDCLASSA); } 
#line 3761
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetClassInfoW(HINSTANCE, LPCWSTR, LPWNDCLASSW); } 
#line 3775 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) ATOM __stdcall RegisterClassExA(const WNDCLASSEXA *); } 




extern "C" { extern __declspec( dllimport ) ATOM __stdcall RegisterClassExW(const WNDCLASSEXW *); } 
#line 3791 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetClassInfoExA(HINSTANCE, LPCSTR, LPWNDCLASSEXA); } 
#line 3798
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetClassInfoExW(HINSTANCE, LPCWSTR, LPWNDCLASSEXW); } 
#line 3818 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef BOOLEAN (__stdcall *PREGISTERCLASSNAMEW)(LPCWSTR); }
#line 3824 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HWND __stdcall CreateWindowExA(DWORD, LPCSTR, LPCSTR, DWORD, int, int, int, int, HWND, HMENU, HINSTANCE, LPVOID); } 
#line 3840
extern "C" { extern __declspec( dllimport ) HWND __stdcall CreateWindowExW(DWORD, LPCWSTR, LPCWSTR, DWORD, int, int, int, int, HWND, HMENU, HINSTANCE, LPVOID); } 
#line 3876 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsWindow(HWND); } 
#line 3882
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsMenu(HMENU); } 
#line 3888
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsChild(HWND, HWND); } 
#line 3895
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DestroyWindow(HWND); } 
#line 3901
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ShowWindow(HWND, int); } 
#line 3909
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AnimateWindow(HWND, DWORD, DWORD); } 
#line 3921 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall UpdateLayeredWindow(HWND, HDC, POINT *, SIZE *, HDC, POINT *, COLORREF, BLENDFUNCTION *, DWORD); } 
#line 3949
extern "C" { typedef 
#line 3937
struct tagUPDATELAYEREDWINDOWINFO { 

DWORD cbSize; 
HDC hdcDst; 
const POINT *pptDst; 
const SIZE *psize; 
HDC hdcSrc; 
const POINT *pptSrc; 
COLORREF crKey; 
const BLENDFUNCTION *pblend; 
DWORD dwFlags; 
const RECT *prcDirty; 
} UPDATELAYEREDWINDOWINFO; }extern "C" { typedef tagUPDATELAYEREDWINDOWINFO *PUPDATELAYEREDWINDOWINFO; }
#line 3958 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall UpdateLayeredWindowIndirect(HWND, const UPDATELAYEREDWINDOWINFO *); } 
#line 3968 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetLayeredWindowAttributes(HWND, COLORREF *, BYTE *, DWORD *); } 
#line 3980
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PrintWindow(HWND, HDC, UINT); } 
#line 3990 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetLayeredWindowAttributes(HWND, COLORREF, BYTE, DWORD); } 
#line 4013 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ShowWindowAsync(HWND, int); } 
#line 4021 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FlashWindow(HWND, BOOL); } 
#line 4032
extern "C" { typedef 
#line 4026
struct FLASHWINFO { 
UINT cbSize; 
HWND hwnd; 
DWORD dwFlags; 
UINT uCount; 
DWORD dwTimeout; 
} FLASHWINFO, *PFLASHWINFO; }




extern "C" { extern __declspec( dllimport ) BOOL __stdcall FlashWindowEx(PFLASHWINFO); } 
#line 4052 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ShowOwnedPopups(HWND, BOOL); } 
#line 4059
extern "C" { extern __declspec( dllimport ) BOOL __stdcall OpenIcon(HWND); } 
#line 4065
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CloseWindow(HWND); } 
#line 4071
extern "C" { extern __declspec( dllimport ) BOOL __stdcall MoveWindow(HWND, int, int, int, int, BOOL); } 
#line 4082
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetWindowPos(HWND, HWND, int, int, int, int, UINT); } 
#line 4094
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetWindowPlacement(HWND, WINDOWPLACEMENT *); } 
#line 4101
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetWindowPlacement(HWND, const WINDOWPLACEMENT *); } 
#line 4111
extern "C" { extern __declspec( dllimport ) HDWP __stdcall BeginDeferWindowPos(int); } 
#line 4117
extern "C" { extern __declspec( dllimport ) HDWP __stdcall DeferWindowPos(HDWP, HWND, HWND, int, int, int, int, UINT); } 
#line 4130
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EndDeferWindowPos(HDWP); } 
#line 4138 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsWindowVisible(HWND); } 
#line 4144
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsIconic(HWND); } 
#line 4150
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AnyPopup(); } 
#line 4156
extern "C" { extern __declspec( dllimport ) BOOL __stdcall BringWindowToTop(HWND); } 
#line 4162
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsZoomed(HWND); } 
#line 24 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\pshpack2.h"
#pragma warning(disable:4103)

#pragma pack ( push, 2 )
#line 4214 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 4206
struct DLGTEMPLATE { 
DWORD style; 
DWORD dwExtendedStyle; 
WORD cdit; 
short x; 
short y; 
short cx; 
short cy; 
} DLGTEMPLATE; }
extern "C" { typedef DLGTEMPLATE *LPDLGTEMPLATEA; }
extern "C" { typedef DLGTEMPLATE *LPDLGTEMPLATEW; }



extern "C" { typedef LPDLGTEMPLATEA LPDLGTEMPLATE; }
#line 4222 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef const DLGTEMPLATE *LPCDLGTEMPLATEA; }
extern "C" { typedef const DLGTEMPLATE *LPCDLGTEMPLATEW; }



extern "C" { typedef LPCDLGTEMPLATEA LPCDLGTEMPLATE; }
#line 4241 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 4233
struct DLGITEMTEMPLATE { 
DWORD style; 
DWORD dwExtendedStyle; 
short x; 
short y; 
short cx; 
short cy; 
WORD id; 
} DLGITEMTEMPLATE; }
extern "C" { typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEA; }
extern "C" { typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEW; }



extern "C" { typedef PDLGITEMTEMPLATEA PDLGITEMTEMPLATE; }
#line 4249 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEA; }
extern "C" { typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEW; }



extern "C" { typedef LPDLGITEMTEMPLATEA LPDLGITEMTEMPLATE; }
#line 27 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack ( pop )
#line 4263 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HWND __stdcall CreateDialogParamA(HINSTANCE, LPCSTR, HWND, DLGPROC, LPARAM); } 
#line 4272
extern "C" { extern __declspec( dllimport ) HWND __stdcall CreateDialogParamW(HINSTANCE, LPCWSTR, HWND, DLGPROC, LPARAM); } 
#line 4287 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HWND __stdcall CreateDialogIndirectParamA(HINSTANCE, LPCDLGTEMPLATEA, HWND, DLGPROC, LPARAM); } 
#line 4296
extern "C" { extern __declspec( dllimport ) HWND __stdcall CreateDialogIndirectParamW(HINSTANCE, LPCDLGTEMPLATEW, HWND, DLGPROC, LPARAM); } 
#line 4331 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) INT_PTR __stdcall DialogBoxParamA(HINSTANCE, LPCSTR, HWND, DLGPROC, LPARAM); } 
#line 4340
extern "C" { extern __declspec( dllimport ) INT_PTR __stdcall DialogBoxParamW(HINSTANCE, LPCWSTR, HWND, DLGPROC, LPARAM); } 
#line 4355 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) INT_PTR __stdcall DialogBoxIndirectParamA(HINSTANCE, LPCDLGTEMPLATEA, HWND, DLGPROC, LPARAM); } 
#line 4364
extern "C" { extern __declspec( dllimport ) INT_PTR __stdcall DialogBoxIndirectParamW(HINSTANCE, LPCDLGTEMPLATEW, HWND, DLGPROC, LPARAM); } 
#line 4399 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EndDialog(HWND, INT_PTR); } 
#line 4406
extern "C" { extern __declspec( dllimport ) HWND __stdcall GetDlgItem(HWND, int); } 
#line 4413
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetDlgItemInt(HWND, int, UINT, BOOL); } 
#line 4422
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetDlgItemInt(HWND, int, BOOL *, BOOL); } 
#line 4431
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetDlgItemTextA(HWND, int, LPCSTR); } 
#line 4438
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetDlgItemTextW(HWND, int, LPCWSTR); } 
#line 4451 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetDlgItemTextA(HWND, int, LPSTR, int); } 
#line 4459
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetDlgItemTextW(HWND, int, LPWSTR, int); } 
#line 4473 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CheckDlgButton(HWND, int, UINT); } 
#line 4481
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CheckRadioButton(HWND, int, int, int); } 
#line 4490
extern "C" { extern __declspec( dllimport ) UINT __stdcall IsDlgButtonChecked(HWND, int); } 
#line 4497
extern "C" { extern __declspec( dllimport ) LRESULT __stdcall SendDlgItemMessageA(HWND, int, UINT, WPARAM, LPARAM); } 
#line 4506
extern "C" { extern __declspec( dllimport ) LRESULT __stdcall SendDlgItemMessageW(HWND, int, UINT, WPARAM, LPARAM); } 
#line 4521 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HWND __stdcall GetNextDlgGroupItem(HWND, HWND, BOOL); } 
#line 4529
extern "C" { extern __declspec( dllimport ) HWND __stdcall GetNextDlgTabItem(HWND, HWND, BOOL); } 
#line 4537
extern "C" { extern __declspec( dllimport ) int __stdcall GetDlgCtrlID(HWND); } 
#line 4543
extern "C" { extern __declspec( dllimport ) long __stdcall GetDialogBaseUnits(); } 
#line 4553 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) LRESULT __stdcall DefDlgProcA(HWND, UINT, WPARAM, LPARAM); } 
#line 4566 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) LRESULT __stdcall DefDlgProcW(HWND, UINT, WPARAM, LPARAM); } 
#line 4593 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CallMsgFilterA(LPMSG, int); } 
#line 4599
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CallMsgFilterW(LPMSG, int); } 
#line 4619 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall OpenClipboard(HWND); } 
#line 4625
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CloseClipboard(); } 
#line 4634
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetClipboardSequenceNumber(); } 
#line 4642 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HWND __stdcall GetClipboardOwner(); } 
#line 4648
extern "C" { extern __declspec( dllimport ) HWND __stdcall SetClipboardViewer(HWND); } 
#line 4654
extern "C" { extern __declspec( dllimport ) HWND __stdcall GetClipboardViewer(); } 
#line 4660
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ChangeClipboardChain(HWND, HWND); } 
#line 4667
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall SetClipboardData(UINT, HANDLE); } 
#line 4674
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall GetClipboardData(UINT); } 
#line 4680
extern "C" { extern __declspec( dllimport ) UINT __stdcall RegisterClipboardFormatA(LPCSTR); } 




extern "C" { extern __declspec( dllimport ) UINT __stdcall RegisterClipboardFormatW(LPCWSTR); } 
#line 4696 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) int __stdcall CountClipboardFormats(); } 
#line 4702
extern "C" { extern __declspec( dllimport ) UINT __stdcall EnumClipboardFormats(UINT); } 
#line 4708
extern "C" { extern __declspec( dllimport ) int __stdcall GetClipboardFormatNameA(UINT, LPSTR, int); } 
#line 4715
extern "C" { extern __declspec( dllimport ) int __stdcall GetClipboardFormatNameW(UINT, LPWSTR, int); } 
#line 4728 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EmptyClipboard(); } 
#line 4734
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsClipboardFormatAvailable(UINT); } 
#line 4740
extern "C" { extern __declspec( dllimport ) int __stdcall GetPriorityClipboardFormat(UINT *, int); } 
#line 4747
extern "C" { extern __declspec( dllimport ) HWND __stdcall GetOpenClipboardWindow(); } 
#line 4754
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AddClipboardFormatListener(HWND); } 
#line 4760
extern "C" { extern __declspec( dllimport ) BOOL __stdcall RemoveClipboardFormatListener(HWND); } 
#line 4766
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetUpdatedClipboardFormats(PUINT, UINT, PUINT); } 
#line 4780 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CharToOemA(LPCSTR, LPSTR); } 
#line 4786
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CharToOemW(LPCWSTR, LPSTR); } 
#line 4798 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall OemToCharA(LPCSTR, LPSTR); } 
#line 4804
extern "C" { extern __declspec( dllimport ) BOOL __stdcall OemToCharW(LPCSTR, LPWSTR); } 
#line 4816 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CharToOemBuffA(LPCSTR, LPSTR, DWORD); } 
#line 4823
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CharToOemBuffW(LPCWSTR, LPSTR, DWORD); } 
#line 4836 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall OemToCharBuffA(LPCSTR, LPSTR, DWORD); } 
#line 4843
extern "C" { extern __declspec( dllimport ) BOOL __stdcall OemToCharBuffW(LPCSTR, LPWSTR, DWORD); } 
#line 4856 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) LPSTR __stdcall CharUpperA(LPSTR); } 




extern "C" { extern __declspec( dllimport ) LPWSTR __stdcall CharUpperW(LPWSTR); } 
#line 4872 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall CharUpperBuffA(LPSTR, DWORD); } 
#line 4878
extern "C" { extern __declspec( dllimport ) DWORD __stdcall CharUpperBuffW(LPWSTR, DWORD); } 
#line 4890 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) LPSTR __stdcall CharLowerA(LPSTR); } 




extern "C" { extern __declspec( dllimport ) LPWSTR __stdcall CharLowerW(LPWSTR); } 
#line 4906 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall CharLowerBuffA(LPSTR, DWORD); } 
#line 4912
extern "C" { extern __declspec( dllimport ) DWORD __stdcall CharLowerBuffW(LPWSTR, DWORD); } 
#line 4924 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) LPSTR __stdcall CharNextA(LPCSTR); } 




extern "C" { extern __declspec( dllimport ) LPWSTR __stdcall CharNextW(LPCWSTR); } 
#line 4940 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) LPSTR __stdcall CharPrevA(LPCSTR, LPCSTR); } 
#line 4946
extern "C" { extern __declspec( dllimport ) LPWSTR __stdcall CharPrevW(LPCWSTR, LPCWSTR); } 
#line 4959 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) LPSTR __stdcall CharNextExA(WORD, LPCSTR, DWORD); } 
#line 4967
extern "C" { extern __declspec( dllimport ) LPSTR __stdcall CharPrevExA(WORD, LPCSTR, LPCSTR, DWORD); } 
#line 4996 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsCharAlphaA(CHAR); } 




extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsCharAlphaW(WCHAR); } 
#line 5012 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsCharAlphaNumericA(CHAR); } 




extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsCharAlphaNumericW(WCHAR); } 
#line 5028 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsCharUpperA(CHAR); } 




extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsCharUpperW(WCHAR); } 
#line 5044 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsCharLowerA(CHAR); } 




extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsCharLowerW(WCHAR); } 
#line 5062 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HWND __stdcall SetFocus(HWND); } 
#line 5068
extern "C" { extern __declspec( dllimport ) HWND __stdcall GetActiveWindow(); } 
#line 5074
extern "C" { extern __declspec( dllimport ) HWND __stdcall GetFocus(); } 
#line 5080
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetKBCodePage(); } 
#line 5086
extern "C" { extern __declspec( dllimport ) SHORT __stdcall GetKeyState(int); } 
#line 5092
extern "C" { extern __declspec( dllimport ) SHORT __stdcall GetAsyncKeyState(int); } 
#line 5098
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetKeyboardState(PBYTE); } 
#line 5104
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetKeyboardState(LPBYTE); } 
#line 5110
extern "C" { extern __declspec( dllimport ) int __stdcall GetKeyNameTextA(LONG, LPSTR, int); } 
#line 5117
extern "C" { extern __declspec( dllimport ) int __stdcall GetKeyNameTextW(LONG, LPWSTR, int); } 
#line 5130 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) int __stdcall GetKeyboardType(int); } 
#line 5136
extern "C" { extern __declspec( dllimport ) int __stdcall ToAscii(UINT, UINT, const BYTE *, LPWORD, UINT); } 
#line 5147
extern "C" { extern __declspec( dllimport ) int __stdcall ToAsciiEx(UINT, UINT, const BYTE *, LPWORD, UINT, HKL); } 
#line 5159 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) int __stdcall ToUnicode(UINT, UINT, const BYTE *, LPWSTR, int, UINT); } 
#line 5170
extern "C" { extern __declspec( dllimport ) DWORD __stdcall OemKeyScan(WORD); } 
#line 5176
extern "C" { extern __declspec( dllimport ) SHORT __stdcall VkKeyScanA(CHAR); } 




extern "C" { extern __declspec( dllimport ) SHORT __stdcall VkKeyScanW(WCHAR); } 
#line 5193 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) SHORT __stdcall VkKeyScanExA(CHAR, HKL); } 
#line 5199
extern "C" { extern __declspec( dllimport ) SHORT __stdcall VkKeyScanExW(WCHAR, HKL); } 
#line 5218 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) void __stdcall keybd_event(BYTE, BYTE, DWORD, ULONG_PTR); } 
#line 5247 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) void __stdcall mouse_event(DWORD, DWORD, DWORD, DWORD, ULONG_PTR); } 
#line 5263
extern "C" { typedef 
#line 5256
struct tagMOUSEINPUT { 
LONG dx; 
LONG dy; 
DWORD mouseData; 
DWORD dwFlags; 
DWORD time; 
ULONG_PTR dwExtraInfo; 
} MOUSEINPUT; }extern "C" { typedef tagMOUSEINPUT *PMOUSEINPUT; }extern "C" { typedef tagMOUSEINPUT *LPMOUSEINPUT; }
#line 5271
extern "C" { typedef 
#line 5265
struct tagKEYBDINPUT { 
WORD wVk; 
WORD wScan; 
DWORD dwFlags; 
DWORD time; 
ULONG_PTR dwExtraInfo; 
} KEYBDINPUT; }extern "C" { typedef tagKEYBDINPUT *PKEYBDINPUT; }extern "C" { typedef tagKEYBDINPUT *LPKEYBDINPUT; }
#line 5277
extern "C" { typedef 
#line 5273
struct tagHARDWAREINPUT { 
DWORD uMsg; 
WORD wParamL; 
WORD wParamH; 
} HARDWAREINPUT; }extern "C" { typedef tagHARDWAREINPUT *PHARDWAREINPUT; }extern "C" { typedef tagHARDWAREINPUT *LPHARDWAREINPUT; }
#line 5292
extern "C" { typedef 
#line 5283
struct tagINPUT { 
DWORD type; 


union { 
MOUSEINPUT mi; 
KEYBDINPUT ki; 
HARDWAREINPUT hi; 
}; 
} INPUT; }extern "C" { typedef tagINPUT *PINPUT; }extern "C" { typedef tagINPUT *LPINPUT; }




extern "C" { extern __declspec( dllimport ) UINT __stdcall SendInput(UINT, LPINPUT, int); } 
#line 5308 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 5305
struct tagLASTINPUTINFO { 
UINT cbSize; 
DWORD dwTime; 
} LASTINPUTINFO; }extern "C" { typedef tagLASTINPUTINFO *PLASTINPUTINFO; }




extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetLastInputInfo(PLASTINPUTINFO); } 
#line 5320 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) UINT __stdcall MapVirtualKeyA(UINT, UINT); } 
#line 5326
extern "C" { extern __declspec( dllimport ) UINT __stdcall MapVirtualKeyW(UINT, UINT); } 
#line 5339 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) UINT __stdcall MapVirtualKeyExA(UINT, UINT, HKL); } 
#line 5346
extern "C" { extern __declspec( dllimport ) UINT __stdcall MapVirtualKeyExW(UINT, UINT, HKL); } 
#line 5368 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetInputState(); } 
#line 5374
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetQueueStatus(UINT); } 
#line 5381
extern "C" { extern __declspec( dllimport ) HWND __stdcall GetCapture(); } 
#line 5387
extern "C" { extern __declspec( dllimport ) HWND __stdcall SetCapture(HWND); } 
#line 5393
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ReleaseCapture(); } 
#line 5399
extern "C" { extern __declspec( dllimport ) DWORD __stdcall MsgWaitForMultipleObjects(DWORD, const HANDLE *, BOOL, DWORD, DWORD); } 
#line 5409
extern "C" { extern __declspec( dllimport ) DWORD __stdcall MsgWaitForMultipleObjectsEx(DWORD, const HANDLE *, DWORD, DWORD, DWORD); } 
#line 5473 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) UINT_PTR __stdcall SetTimer(HWND, UINT_PTR, UINT, TIMERPROC); } 
#line 5482
extern "C" { extern __declspec( dllimport ) BOOL __stdcall KillTimer(HWND, UINT_PTR); } 
#line 5489
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsWindowUnicode(HWND); } 
#line 5495
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnableWindow(HWND, BOOL); } 
#line 5502
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsWindowEnabled(HWND); } 
#line 5508
extern "C" { extern __declspec( dllimport ) HACCEL __stdcall LoadAcceleratorsA(HINSTANCE, LPCSTR); } 
#line 5514
extern "C" { extern __declspec( dllimport ) HACCEL __stdcall LoadAcceleratorsW(HINSTANCE, LPCWSTR); } 
#line 5526 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HACCEL __stdcall CreateAcceleratorTableA(LPACCEL, int); } 
#line 5532
extern "C" { extern __declspec( dllimport ) HACCEL __stdcall CreateAcceleratorTableW(LPACCEL, int); } 
#line 5544 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DestroyAcceleratorTable(HACCEL); } 
#line 5550
extern "C" { extern __declspec( dllimport ) int __stdcall CopyAcceleratorTableA(HACCEL, LPACCEL, int); } 
#line 5557
extern "C" { extern __declspec( dllimport ) int __stdcall CopyAcceleratorTableW(HACCEL, LPACCEL, int); } 
#line 5572 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) int __stdcall TranslateAcceleratorA(HWND, HACCEL, LPMSG); } 
#line 5579
extern "C" { extern __declspec( dllimport ) int __stdcall TranslateAcceleratorW(HWND, HACCEL, LPMSG); } 
#line 5743 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) int __stdcall GetSystemMetrics(int); } 
#line 5754 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HMENU __stdcall LoadMenuA(HINSTANCE, LPCSTR); } 
#line 5760
extern "C" { extern __declspec( dllimport ) HMENU __stdcall LoadMenuW(HINSTANCE, LPCWSTR); } 
#line 5772 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HMENU __stdcall LoadMenuIndirectA(const MENUTEMPLATEA *); } 




extern "C" { extern __declspec( dllimport ) HMENU __stdcall LoadMenuIndirectW(const MENUTEMPLATEW *); } 
#line 5788 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HMENU __stdcall GetMenu(HWND); } 
#line 5794
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetMenu(HWND, HMENU); } 
#line 5801
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ChangeMenuA(HMENU, UINT, LPCSTR, UINT, UINT); } 
#line 5810
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ChangeMenuW(HMENU, UINT, LPCWSTR, UINT, UINT); } 
#line 5825 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall HiliteMenuItem(HWND, HMENU, UINT, UINT); } 
#line 5834
extern "C" { extern __declspec( dllimport ) int __stdcall GetMenuStringA(HMENU, UINT, LPSTR, int, UINT); } 
#line 5843
extern "C" { extern __declspec( dllimport ) int __stdcall GetMenuStringW(HMENU, UINT, LPWSTR, int, UINT); } 
#line 5858 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetMenuState(HMENU, UINT, UINT); } 
#line 5866
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DrawMenuBar(HWND); } 
#line 5878 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HMENU __stdcall GetSystemMenu(HWND, BOOL); } 
#line 5886
extern "C" { extern __declspec( dllimport ) HMENU __stdcall CreateMenu(); } 
#line 5892
extern "C" { extern __declspec( dllimport ) HMENU __stdcall CreatePopupMenu(); } 
#line 5898
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DestroyMenu(HMENU); } 
#line 5904
extern "C" { extern __declspec( dllimport ) DWORD __stdcall CheckMenuItem(HMENU, UINT, UINT); } 
#line 5912
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnableMenuItem(HMENU, UINT, UINT); } 
#line 5920
extern "C" { extern __declspec( dllimport ) HMENU __stdcall GetSubMenu(HMENU, int); } 
#line 5927
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetMenuItemID(HMENU, int); } 
#line 5934
extern "C" { extern __declspec( dllimport ) int __stdcall GetMenuItemCount(HMENU); } 
#line 5940
extern "C" { extern __declspec( dllimport ) BOOL __stdcall InsertMenuA(HMENU, UINT, UINT, UINT_PTR, LPCSTR); } 
#line 5949
extern "C" { extern __declspec( dllimport ) BOOL __stdcall InsertMenuW(HMENU, UINT, UINT, UINT_PTR, LPCWSTR); } 
#line 5964 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AppendMenuA(HMENU, UINT, UINT_PTR, LPCSTR); } 
#line 5972
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AppendMenuW(HMENU, UINT, UINT_PTR, LPCWSTR); } 
#line 5986 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ModifyMenuA(HMENU, UINT, UINT, UINT_PTR, LPCSTR); } 
#line 5995
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ModifyMenuW(HMENU, UINT, UINT, UINT_PTR, LPCWSTR); } 
#line 6009 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall RemoveMenu(HMENU, UINT, UINT); } 
#line 6017
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DeleteMenu(HMENU, UINT, UINT); } 
#line 6025
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetMenuItemBitmaps(HMENU, UINT, UINT, HBITMAP, HBITMAP); } 
#line 6035
extern "C" { extern __declspec( dllimport ) LONG __stdcall GetMenuCheckMarkDimensions(); } 
#line 6041
extern "C" { extern __declspec( dllimport ) BOOL __stdcall TrackPopupMenu(HMENU, UINT, int, int, int, HWND, const RECT *); } 
#line 6061
extern "C" { typedef 
#line 6057
struct tagTPMPARAMS { 

UINT cbSize; 
RECT rcExclude; 
} TPMPARAMS; }
extern "C" { typedef TPMPARAMS *LPTPMPARAMS; }




extern "C" { extern __declspec( dllimport ) BOOL __stdcall TrackPopupMenuEx(HMENU, UINT, int, int, HWND, LPTPMPARAMS); } 
#line 6101 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 6092
struct tagMENUINFO { 

DWORD cbSize; 
DWORD fMask; 
DWORD dwStyle; 
UINT cyMax; 
HBRUSH hbrBack; 
DWORD dwContextHelpID; 
ULONG_PTR dwMenuData; 
} MENUINFO; }extern "C" { typedef tagMENUINFO *LPMENUINFO; }
extern "C" { typedef const MENUINFO *LPCMENUINFO; }




extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetMenuInfo(HMENU, LPMENUINFO); } 
#line 6114
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetMenuInfo(HMENU, LPCMENUINFO); } 
#line 6121
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EndMenu(); } 
#line 6137
extern "C" { typedef 
#line 6130
struct tagMENUGETOBJECTINFO { 

DWORD dwFlags; 
UINT uPos; 
HMENU hmenu; 
PVOID riid; 
PVOID pvObj; 
} MENUGETOBJECTINFO; }extern "C" { typedef tagMENUGETOBJECTINFO *PMENUGETOBJECTINFO; }
#line 6196 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 6180 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
struct tagMENUITEMINFOA { 

UINT cbSize; 
UINT fMask; 
UINT fType; 
UINT fState; 
UINT wID; 
HMENU hSubMenu; 
HBITMAP hbmpChecked; 
HBITMAP hbmpUnchecked; 
ULONG_PTR dwItemData; 
LPSTR dwTypeData; 
UINT cch; 

HBITMAP hbmpItem; 
#line 6196 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
} MENUITEMINFOA; }extern "C" { typedef tagMENUITEMINFOA *LPMENUITEMINFOA; }
#line 6213 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 6197 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
struct tagMENUITEMINFOW { 

UINT cbSize; 
UINT fMask; 
UINT fType; 
UINT fState; 
UINT wID; 
HMENU hSubMenu; 
HBITMAP hbmpChecked; 
HBITMAP hbmpUnchecked; 
ULONG_PTR dwItemData; 
LPWSTR dwTypeData; 
UINT cch; 

HBITMAP hbmpItem; 
#line 6213 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
} MENUITEMINFOW; }extern "C" { typedef tagMENUITEMINFOW *LPMENUITEMINFOW; }




extern "C" { typedef MENUITEMINFOA MENUITEMINFO; }
extern "C" { typedef LPMENUITEMINFOA LPMENUITEMINFO; }
#line 6221 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef const MENUITEMINFOA *LPCMENUITEMINFOA; }
extern "C" { typedef const MENUITEMINFOW *LPCMENUITEMINFOW; }



extern "C" { typedef LPCMENUITEMINFOA LPCMENUITEMINFO; }
#line 6233 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall InsertMenuItemA(HMENU, UINT, BOOL, LPCMENUITEMINFOA); } 
#line 6241
extern "C" { extern __declspec( dllimport ) BOOL __stdcall InsertMenuItemW(HMENU, UINT, BOOL, LPCMENUITEMINFOW); } 
#line 6255 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetMenuItemInfoA(HMENU, UINT, BOOL, LPMENUITEMINFOA); } 
#line 6263
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetMenuItemInfoW(HMENU, UINT, BOOL, LPMENUITEMINFOW); } 
#line 6277 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetMenuItemInfoA(HMENU, UINT, BOOL, LPCMENUITEMINFOA); } 
#line 6285
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetMenuItemInfoW(HMENU, UINT, BOOL, LPCMENUITEMINFOW); } 
#line 6303 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetMenuDefaultItem(HMENU, UINT, UINT); } 
#line 6311
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetMenuDefaultItem(HMENU, UINT, UINT); } 
#line 6319
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetMenuItemRect(HWND, HMENU, UINT, LPRECT); } 
#line 6328
extern "C" { extern __declspec( dllimport ) int __stdcall MenuItemFromPoint(HWND, HMENU, POINT); } 
#line 6383 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 6375
struct tagDROPSTRUCT { 

HWND hwndSource; 
HWND hwndSink; 
DWORD wFmt; 
ULONG_PTR dwData; 
POINT ptDrop; 
DWORD dwControlData; 
} DROPSTRUCT; }extern "C" { typedef tagDROPSTRUCT *PDROPSTRUCT; }extern "C" { typedef tagDROPSTRUCT *LPDROPSTRUCT; }
#line 6398
extern "C" { extern __declspec( dllimport ) DWORD __stdcall DragObject(HWND, HWND, UINT, ULONG_PTR, HCURSOR); } 
#line 6408
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DragDetect(HWND, POINT); } 
#line 6416 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DrawIcon(HDC, int, int, HICON); } 
#line 6465 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 6458
struct tagDRAWTEXTPARAMS { 

UINT cbSize; 
int iTabLength; 
int iLeftMargin; 
int iRightMargin; 
UINT uiLengthDrawn; 
} DRAWTEXTPARAMS; }extern "C" { typedef tagDRAWTEXTPARAMS *LPDRAWTEXTPARAMS; }
#line 6472 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) int __stdcall DrawTextA(HDC, LPCSTR, int, LPRECT, UINT); } 
#line 6481
extern "C" { extern __declspec( dllimport ) int __stdcall DrawTextW(HDC, LPCWSTR, int, LPRECT, UINT); } 
#line 6524 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) int __stdcall DrawTextExA(HDC, LPSTR, int, LPRECT, UINT, LPDRAWTEXTPARAMS); } 
#line 6534
extern "C" { extern __declspec( dllimport ) int __stdcall DrawTextExW(HDC, LPWSTR, int, LPRECT, UINT, LPDRAWTEXTPARAMS); } 
#line 6553 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GrayStringA(HDC, HBRUSH, GRAYSTRINGPROC, LPARAM, int, int, int, int, int); } 
#line 6566
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GrayStringW(HDC, HBRUSH, GRAYSTRINGPROC, LPARAM, int, int, int, int, int); } 
#line 6605 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DrawStateA(HDC, HBRUSH, DRAWSTATEPROC, LPARAM, WPARAM, int, int, int, int, UINT); } 
#line 6619
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DrawStateW(HDC, HBRUSH, DRAWSTATEPROC, LPARAM, WPARAM, int, int, int, int, UINT); } 
#line 6640 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) LONG __stdcall TabbedTextOutA(HDC, int, int, LPCSTR, int, int, const INT *, int); } 
#line 6652
extern "C" { extern __declspec( dllimport ) LONG __stdcall TabbedTextOutW(HDC, int, int, LPCWSTR, int, int, const INT *, int); } 
#line 6670 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetTabbedTextExtentA(HDC, LPCSTR, int, int, const INT *); } 
#line 6679
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetTabbedTextExtentW(HDC, LPCWSTR, int, int, const INT *); } 
#line 6694 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall UpdateWindow(HWND); } 
#line 6700
extern "C" { extern __declspec( dllimport ) HWND __stdcall SetActiveWindow(HWND); } 
#line 6706
extern "C" { extern __declspec( dllimport ) HWND __stdcall GetForegroundWindow(); } 
#line 6713
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PaintDesktop(HDC); } 
#line 6719
extern "C" { extern __declspec( dllimport ) void __stdcall SwitchToThisWindow(HWND, BOOL); } 
#line 6728 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetForegroundWindow(HWND); } 
#line 6735
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AllowSetForegroundWindow(DWORD); } 
#line 6743
extern "C" { extern __declspec( dllimport ) BOOL __stdcall LockSetForegroundWindow(UINT); } 
#line 6754 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HWND __stdcall WindowFromDC(HDC); } 
#line 6760
extern "C" { extern __declspec( dllimport ) HDC __stdcall GetDC(HWND); } 
#line 6766
extern "C" { extern __declspec( dllimport ) HDC __stdcall GetDCEx(HWND, HRGN, DWORD); } 
#line 6796 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HDC __stdcall GetWindowDC(HWND); } 
#line 6802
extern "C" { extern __declspec( dllimport ) int __stdcall ReleaseDC(HWND, HDC); } 
#line 6809
extern "C" { extern __declspec( dllimport ) HDC __stdcall BeginPaint(HWND, LPPAINTSTRUCT); } 
#line 6816
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EndPaint(HWND, const PAINTSTRUCT *); } 
#line 6823
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetUpdateRect(HWND, LPRECT, BOOL); } 
#line 6831
extern "C" { extern __declspec( dllimport ) int __stdcall GetUpdateRgn(HWND, HRGN, BOOL); } 
#line 6839
extern "C" { extern __declspec( dllimport ) int __stdcall SetWindowRgn(HWND, HRGN, BOOL); } 
#line 6848
extern "C" { extern __declspec( dllimport ) int __stdcall GetWindowRgn(HWND, HRGN); } 
#line 6857
extern "C" { extern __declspec( dllimport ) int __stdcall GetWindowRgnBox(HWND, LPRECT); } 
#line 6866 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) int __stdcall ExcludeUpdateRgn(HDC, HWND); } 
#line 6873
extern "C" { extern __declspec( dllimport ) BOOL __stdcall InvalidateRect(HWND, const RECT *, BOOL); } 
#line 6881
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ValidateRect(HWND, const RECT *); } 
#line 6888
extern "C" { extern __declspec( dllimport ) BOOL __stdcall InvalidateRgn(HWND, HRGN, BOOL); } 
#line 6896
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ValidateRgn(HWND, HRGN); } 
#line 6904
extern "C" { extern __declspec( dllimport ) BOOL __stdcall RedrawWindow(HWND, const RECT *, HRGN, UINT); } 
#line 6938
extern "C" { extern __declspec( dllimport ) BOOL __stdcall LockWindowUpdate(HWND); } 
#line 6944
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ScrollWindow(HWND, int, int, const RECT *, const RECT *); } 
#line 6954
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ScrollDC(HDC, int, int, const RECT *, const RECT *, HRGN, LPRECT); } 
#line 6966
extern "C" { extern __declspec( dllimport ) int __stdcall ScrollWindowEx(HWND, int, int, const RECT *, const RECT *, HRGN, LPRECT, UINT); } 
#line 6988 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) int __stdcall SetScrollPos(HWND, int, int, BOOL); } 
#line 6997
extern "C" { extern __declspec( dllimport ) int __stdcall GetScrollPos(HWND, int); } 
#line 7004
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetScrollRange(HWND, int, int, int, BOOL); } 
#line 7014
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetScrollRange(HWND, int, LPINT, LPINT); } 
#line 7023
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ShowScrollBar(HWND, int, BOOL); } 
#line 7031
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnableScrollBar(HWND, UINT, UINT); } 
#line 7058 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetPropA(HWND, LPCSTR, HANDLE); } 
#line 7065
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetPropW(HWND, LPCWSTR, HANDLE); } 
#line 7078 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall GetPropA(HWND, LPCSTR); } 
#line 7084
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall GetPropW(HWND, LPCWSTR); } 
#line 7096 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall RemovePropA(HWND, LPCSTR); } 
#line 7102
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall RemovePropW(HWND, LPCWSTR); } 
#line 7114 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) int __stdcall EnumPropsExA(HWND, PROPENUMPROCEXA, LPARAM); } 
#line 7121
extern "C" { extern __declspec( dllimport ) int __stdcall EnumPropsExW(HWND, PROPENUMPROCEXW, LPARAM); } 
#line 7134 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) int __stdcall EnumPropsA(HWND, PROPENUMPROCA); } 
#line 7140
extern "C" { extern __declspec( dllimport ) int __stdcall EnumPropsW(HWND, PROPENUMPROCW); } 
#line 7152 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetWindowTextA(HWND, LPCSTR); } 
#line 7158
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetWindowTextW(HWND, LPCWSTR); } 
#line 7170 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) int __stdcall GetWindowTextA(HWND, LPSTR, int); } 
#line 7177
extern "C" { extern __declspec( dllimport ) int __stdcall GetWindowTextW(HWND, LPWSTR, int); } 
#line 7190 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) int __stdcall GetWindowTextLengthA(HWND); } 




extern "C" { extern __declspec( dllimport ) int __stdcall GetWindowTextLengthW(HWND); } 
#line 7206 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetClientRect(HWND, LPRECT); } 
#line 7213
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetWindowRect(HWND, LPRECT); } 
#line 7220
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AdjustWindowRect(LPRECT, DWORD, BOOL); } 
#line 7228
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AdjustWindowRectEx(LPRECT, DWORD, BOOL, DWORD); } 
#line 7246
extern "C" { typedef 
#line 7238
struct tagHELPINFO { 

UINT cbSize; 
int iContextType; 
int iCtrlId; 
HANDLE hItemHandle; 
DWORD_PTR dwContextId; 
POINT MousePos; 
} HELPINFO; }extern "C" { typedef tagHELPINFO *LPHELPINFO; }




extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetWindowContextHelpId(HWND, DWORD); } 
#line 7258
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetWindowContextHelpId(HWND); } 
#line 7264
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetMenuContextHelpId(HMENU, DWORD); } 
#line 7271
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetMenuContextHelpId(HMENU); } 
#line 7351 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) int __stdcall MessageBoxA(HWND, LPCSTR, LPCSTR, UINT); } 
#line 7359
extern "C" { extern __declspec( dllimport ) int __stdcall MessageBoxW(HWND, LPCWSTR, LPCWSTR, UINT); } 
#line 7397 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) int __stdcall MessageBoxExA(HWND, LPCSTR, LPCSTR, UINT, WORD); } 
#line 7406
extern "C" { extern __declspec( dllimport ) int __stdcall MessageBoxExW(HWND, LPCWSTR, LPCWSTR, UINT, WORD); } 
#line 7420 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef void (__stdcall *MSGBOXCALLBACK)(LPHELPINFO); }
#line 7434
extern "C" { typedef 
#line 7422
struct tagMSGBOXPARAMSA { 

UINT cbSize; 
HWND hwndOwner; 
HINSTANCE hInstance; 
LPCSTR lpszText; 
LPCSTR lpszCaption; 
DWORD dwStyle; 
LPCSTR lpszIcon; 
DWORD_PTR dwContextHelpId; 
MSGBOXCALLBACK lpfnMsgBoxCallback; 
DWORD dwLanguageId; 
} MSGBOXPARAMSA; }extern "C" { typedef tagMSGBOXPARAMSA *PMSGBOXPARAMSA; }extern "C" { typedef tagMSGBOXPARAMSA *LPMSGBOXPARAMSA; }
#line 7447
extern "C" { typedef 
#line 7435
struct tagMSGBOXPARAMSW { 

UINT cbSize; 
HWND hwndOwner; 
HINSTANCE hInstance; 
LPCWSTR lpszText; 
LPCWSTR lpszCaption; 
DWORD dwStyle; 
LPCWSTR lpszIcon; 
DWORD_PTR dwContextHelpId; 
MSGBOXCALLBACK lpfnMsgBoxCallback; 
DWORD dwLanguageId; 
} MSGBOXPARAMSW; }extern "C" { typedef tagMSGBOXPARAMSW *PMSGBOXPARAMSW; }extern "C" { typedef tagMSGBOXPARAMSW *LPMSGBOXPARAMSW; }
#line 7453
extern "C" { typedef MSGBOXPARAMSA MSGBOXPARAMS; }
extern "C" { typedef PMSGBOXPARAMSA PMSGBOXPARAMS; }
extern "C" { typedef LPMSGBOXPARAMSA LPMSGBOXPARAMS; }
#line 7461 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) int __stdcall MessageBoxIndirectA(const MSGBOXPARAMSA *); } 




extern "C" { extern __declspec( dllimport ) int __stdcall MessageBoxIndirectW(const MSGBOXPARAMSW *); } 
#line 7479 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall MessageBeep(UINT); } 
#line 7487 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) int __stdcall ShowCursor(BOOL); } 
#line 7493
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetCursorPos(int, int); } 
#line 7501
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetPhysicalCursorPos(int, int); } 
#line 7508
extern "C" { extern __declspec( dllimport ) HCURSOR __stdcall SetCursor(HCURSOR); } 
#line 7514
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetCursorPos(LPPOINT); } 
#line 7520
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetPhysicalCursorPos(LPPOINT); } 
#line 7526
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ClipCursor(const RECT *); } 
#line 7532
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetClipCursor(LPRECT); } 
#line 7538
extern "C" { extern __declspec( dllimport ) HCURSOR __stdcall GetCursor(); } 
#line 7544
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CreateCaret(HWND, HBITMAP, int, int); } 
#line 7553
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetCaretBlinkTime(); } 
#line 7559
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetCaretBlinkTime(UINT); } 
#line 7565
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DestroyCaret(); } 
#line 7571
extern "C" { extern __declspec( dllimport ) BOOL __stdcall HideCaret(HWND); } 
#line 7577
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ShowCaret(HWND); } 
#line 7583
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetCaretPos(int, int); } 
#line 7590
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetCaretPos(LPPOINT); } 
#line 7596
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ClientToScreen(HWND, LPPOINT); } 
#line 7603
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ScreenToClient(HWND, LPPOINT); } 
#line 7611
extern "C" { extern __declspec( dllimport ) BOOL __stdcall LogicalToPhysicalPoint(HWND, LPPOINT); } 
#line 7618
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PhysicalToLogicalPoint(HWND, LPPOINT); } 
#line 7627 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) int __stdcall MapWindowPoints(HWND, HWND, LPPOINT, UINT); } 
#line 7636
extern "C" { extern __declspec( dllimport ) HWND __stdcall WindowFromPoint(POINT); } 
#line 7643
extern "C" { extern __declspec( dllimport ) HWND __stdcall WindowFromPhysicalPoint(POINT); } 
#line 7650 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HWND __stdcall ChildWindowFromPoint(HWND, POINT); } 
#line 7663
extern "C" { extern __declspec( dllimport ) HWND __stdcall ChildWindowFromPointEx(HWND, POINT, UINT); } 
#line 7735 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetSysColor(int); } 
#line 7742
extern "C" { extern __declspec( dllimport ) HBRUSH __stdcall GetSysColorBrush(int); } 
#line 7751 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetSysColors(int, const INT *, const COLORREF *); } 
#line 7761 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DrawFocusRect(HDC, const RECT *); } 
#line 7768
extern "C" { extern __declspec( dllimport ) int __stdcall FillRect(HDC, const RECT *, HBRUSH); } 
#line 7776
extern "C" { extern __declspec( dllimport ) int __stdcall FrameRect(HDC, const RECT *, HBRUSH); } 
#line 7784
extern "C" { extern __declspec( dllimport ) BOOL __stdcall InvertRect(HDC, const RECT *); } 
#line 7791
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetRect(LPRECT, int, int, int, int); } 
#line 7801
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetRectEmpty(LPRECT); } 
#line 7807
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CopyRect(LPRECT, const RECT *); } 
#line 7814
extern "C" { extern __declspec( dllimport ) BOOL __stdcall InflateRect(LPRECT, int, int); } 
#line 7822
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IntersectRect(LPRECT, const RECT *, const RECT *); } 
#line 7830
extern "C" { extern __declspec( dllimport ) BOOL __stdcall UnionRect(LPRECT, const RECT *, const RECT *); } 
#line 7838
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SubtractRect(LPRECT, const RECT *, const RECT *); } 
#line 7846
extern "C" { extern __declspec( dllimport ) BOOL __stdcall OffsetRect(LPRECT, int, int); } 
#line 7854
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsRectEmpty(const RECT *); } 
#line 7860
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EqualRect(const RECT *, const RECT *); } 
#line 7867
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PtInRect(const RECT *, POINT); } 
#line 7876
extern "C" { extern __declspec( dllimport ) WORD __stdcall GetWindowWord(HWND, int); } 
#line 7883
extern "C" { extern __declspec( dllimport ) WORD __stdcall SetWindowWord(HWND, int, WORD); } 
#line 7891
extern "C" { extern __declspec( dllimport ) LONG __stdcall GetWindowLongA(HWND, int); } 
#line 7897
extern "C" { extern __declspec( dllimport ) LONG __stdcall GetWindowLongW(HWND, int); } 
#line 7909 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) LONG __stdcall SetWindowLongA(HWND, int, LONG); } 
#line 7916
extern "C" { extern __declspec( dllimport ) LONG __stdcall SetWindowLongW(HWND, int, LONG); } 
#line 7989 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) WORD __stdcall GetClassWord(HWND, int); } 
#line 7996
extern "C" { extern __declspec( dllimport ) WORD __stdcall SetClassWord(HWND, int, WORD); } 
#line 8004
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetClassLongA(HWND, int); } 
#line 8010
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetClassLongW(HWND, int); } 
#line 8022 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall SetClassLongA(HWND, int, LONG); } 
#line 8029
extern "C" { extern __declspec( dllimport ) DWORD __stdcall SetClassLongW(HWND, int, LONG); } 
#line 8105 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetProcessDefaultLayout(DWORD *); } 
#line 8111
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetProcessDefaultLayout(DWORD); } 
#line 8118 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HWND __stdcall GetDesktopWindow(); } 
#line 8125
extern "C" { extern __declspec( dllimport ) HWND __stdcall GetParent(HWND); } 
#line 8131
extern "C" { extern __declspec( dllimport ) HWND __stdcall SetParent(HWND, HWND); } 
#line 8138
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumChildWindows(HWND, WNDENUMPROC, LPARAM); } 
#line 8146
extern "C" { extern __declspec( dllimport ) HWND __stdcall FindWindowA(LPCSTR, LPCSTR); } 
#line 8152
extern "C" { extern __declspec( dllimport ) HWND __stdcall FindWindowW(LPCWSTR, LPCWSTR); } 
#line 8165 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HWND __stdcall FindWindowExA(HWND, HWND, LPCSTR, LPCSTR); } 
#line 8173
extern "C" { extern __declspec( dllimport ) HWND __stdcall FindWindowExW(HWND, HWND, LPCWSTR, LPCWSTR); } 
#line 8187 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HWND __stdcall GetShellWindow(); } 
#line 8196 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall RegisterShellHookWindow(HWND); } 
#line 8202
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DeregisterShellHookWindow(HWND); } 
#line 8208
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumWindows(WNDENUMPROC, LPARAM); } 
#line 8215
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumThreadWindows(DWORD, WNDENUMPROC, LPARAM); } 
#line 8225
extern "C" { extern __declspec( dllimport ) int __stdcall GetClassNameA(HWND, LPSTR, int); } 
#line 8233
extern "C" { extern __declspec( dllimport ) int __stdcall GetClassNameW(HWND, LPWSTR, int); } 
#line 8271 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HWND __stdcall GetTopWindow(HWND); } 
#line 8281
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetWindowThreadProcessId(HWND, LPDWORD); } 
#line 8289
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsGUIThread(BOOL); } 
#line 8301 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HWND __stdcall GetLastActivePopup(HWND); } 
#line 8323 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HWND __stdcall GetWindow(HWND, UINT); } 
#line 8335
extern "C" { extern __declspec( dllimport ) HHOOK __stdcall SetWindowsHookA(int, HOOKPROC); } 
#line 8341
extern "C" { extern __declspec( dllimport ) HHOOK __stdcall SetWindowsHookW(int, HOOKPROC); } 
#line 8375 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall UnhookWindowsHook(int, HOOKPROC); } 
#line 8382
extern "C" { extern __declspec( dllimport ) HHOOK __stdcall SetWindowsHookExA(int, HOOKPROC, HINSTANCE, DWORD); } 
#line 8390
extern "C" { extern __declspec( dllimport ) HHOOK __stdcall SetWindowsHookExW(int, HOOKPROC, HINSTANCE, DWORD); } 
#line 8404 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall UnhookWindowsHookEx(HHOOK); } 
#line 8410
extern "C" { extern __declspec( dllimport ) LRESULT __stdcall CallNextHookEx(HHOOK, int, WPARAM, LPARAM); } 
#line 8508 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CheckMenuRadioItem(HMENU, UINT, UINT, UINT, UINT); } 
#line 8522 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 8519
struct MENUITEMTEMPLATEHEADER { 
WORD versionNumber; 
WORD offset; 
} MENUITEMTEMPLATEHEADER, *PMENUITEMTEMPLATEHEADER; }
#line 8528
extern "C" { typedef 
#line 8524
struct MENUITEMTEMPLATE { 
WORD mtOption; 
WORD mtID; 
WCHAR mtString[1]; 
} MENUITEMTEMPLATE, *PMENUITEMTEMPLATE; }
#line 8580 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HBITMAP __stdcall LoadBitmapA(HINSTANCE, LPCSTR); } 
#line 8586
extern "C" { extern __declspec( dllimport ) HBITMAP __stdcall LoadBitmapW(HINSTANCE, LPCWSTR); } 
#line 8598 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HCURSOR __stdcall LoadCursorA(HINSTANCE, LPCSTR); } 
#line 8604
extern "C" { extern __declspec( dllimport ) HCURSOR __stdcall LoadCursorW(HINSTANCE, LPCWSTR); } 
#line 8616 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HCURSOR __stdcall LoadCursorFromFileA(LPCSTR); } 




extern "C" { extern __declspec( dllimport ) HCURSOR __stdcall LoadCursorFromFileW(LPCWSTR); } 
#line 8632 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HCURSOR __stdcall CreateCursor(HINSTANCE, int, int, int, int, const void *, const void *); } 
#line 8644
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DestroyCursor(HCURSOR); } 
#line 8684 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetSystemCursor(HCURSOR, DWORD); } 
#line 8694
extern "C" { typedef 
#line 8688
struct _ICONINFO { 
BOOL fIcon; 
DWORD xHotspot; 
DWORD yHotspot; 
HBITMAP hbmMask; 
HBITMAP hbmColor; 
} ICONINFO; }
extern "C" { typedef ICONINFO *PICONINFO; }




extern "C" { extern __declspec( dllimport ) HICON __stdcall LoadIconA(HINSTANCE, LPCSTR); } 
#line 8706
extern "C" { extern __declspec( dllimport ) HICON __stdcall LoadIconW(HINSTANCE, LPCWSTR); } 
#line 8719 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) UINT __stdcall PrivateExtractIconsA(LPCSTR, int, int, int, HICON *, UINT *, UINT, UINT); } 
#line 8731
extern "C" { extern __declspec( dllimport ) UINT __stdcall PrivateExtractIconsW(LPCWSTR, int, int, int, HICON *, UINT *, UINT, UINT); } 
#line 8749 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HICON __stdcall CreateIcon(HINSTANCE, int, int, BYTE, BYTE, const BYTE *, const BYTE *); } 
#line 8761
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DestroyIcon(HICON); } 
#line 8767
extern "C" { extern __declspec( dllimport ) int __stdcall LookupIconIdFromDirectory(PBYTE, BOOL); } 
#line 8775
extern "C" { extern __declspec( dllimport ) int __stdcall LookupIconIdFromDirectoryEx(PBYTE, BOOL, int, int, UINT); } 
#line 8786 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HICON __stdcall CreateIconFromResource(PBYTE, DWORD, BOOL, DWORD); } 
#line 8796
extern "C" { extern __declspec( dllimport ) HICON __stdcall CreateIconFromResourceEx(PBYTE, DWORD, BOOL, DWORD, int, int, UINT); } 
#line 8815
extern "C" { typedef 
#line 8806
struct tagCURSORSHAPE { 

int xHotSpot; 
int yHotSpot; 
int cx; 
int cy; 
int cbWidth; 
BYTE Planes; 
BYTE BitsPixel; 
} CURSORSHAPE; }extern "C" { typedef tagCURSORSHAPE *LPCURSORSHAPE; }
#line 8841 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall LoadImageA(HINSTANCE, LPCSTR, UINT, int, int, UINT); } 
#line 8851
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall LoadImageW(HINSTANCE, LPCWSTR, UINT, int, int, UINT); } 
#line 8867 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CopyImage(HANDLE, UINT, int, int, UINT); } 
#line 8883 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DrawIconEx(HDC, int, int, HICON, int, int, UINT, HBRUSH, UINT); } 
#line 8899 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) HICON __stdcall CreateIconIndirect(PICONINFO); } 
#line 8905
extern "C" { extern __declspec( dllimport ) HICON __stdcall CopyIcon(HICON); } 
#line 8911
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetIconInfo(HICON, PICONINFO); } 
#line 8926
extern "C" { typedef 
#line 8916
struct _ICONINFOEXA { 
DWORD cbSize; 
BOOL fIcon; 
DWORD xHotspot; 
DWORD yHotspot; 
HBITMAP hbmMask; 
HBITMAP hbmColor; 
WORD wResID; 
CHAR szModName[260]; 
CHAR szResName[260]; 
} ICONINFOEXA; }extern "C" { typedef _ICONINFOEXA *PICONINFOEXA; }
#line 8937
extern "C" { typedef 
#line 8927
struct _ICONINFOEXW { 
DWORD cbSize; 
BOOL fIcon; 
DWORD xHotspot; 
DWORD yHotspot; 
HBITMAP hbmMask; 
HBITMAP hbmColor; 
WORD wResID; 
WCHAR szModName[260]; 
WCHAR szResName[260]; 
} ICONINFOEXW; }extern "C" { typedef _ICONINFOEXW *PICONINFOEXW; }




extern "C" { typedef ICONINFOEXA ICONINFOEX; }
extern "C" { typedef PICONINFOEXA PICONINFOEX; }
#line 8949 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetIconInfoExA(HICON, PICONINFOEXA); } 
#line 8955
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetIconInfoExW(HICON, PICONINFOEXW); } 
#line 9102 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) int __stdcall LoadStringA(HINSTANCE, UINT, LPSTR, int); } 
#line 9110
extern "C" { extern __declspec( dllimport ) int __stdcall LoadStringW(HINSTANCE, UINT, LPWSTR, int); } 
#line 9447 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsDialogMessageA(HWND, LPMSG); } 
#line 9453
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsDialogMessageW(HWND, LPMSG); } 
#line 9467 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall MapDialogRect(HWND, LPRECT); } 
#line 9474
extern "C" { extern __declspec( dllimport ) int __stdcall DlgDirListA(HWND, LPSTR, int, int, UINT); } 
#line 9483
extern "C" { extern __declspec( dllimport ) int __stdcall DlgDirListW(HWND, LPWSTR, int, int, UINT); } 
#line 9512 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DlgDirSelectExA(HWND, LPSTR, int, int); } 
#line 9520
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DlgDirSelectExW(HWND, LPWSTR, int, int); } 
#line 9534 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) int __stdcall DlgDirListComboBoxA(HWND, LPSTR, int, int, UINT); } 
#line 9543
extern "C" { extern __declspec( dllimport ) int __stdcall DlgDirListComboBoxW(HWND, LPWSTR, int, int, UINT); } 
#line 9558 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DlgDirSelectComboBoxExA(HWND, LPSTR, int, int); } 
#line 9566
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DlgDirSelectComboBoxExW(HWND, LPWSTR, int, int); } 
#line 9928 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 9919
struct tagSCROLLINFO { 

UINT cbSize; 
UINT fMask; 
int nMin; 
int nMax; 
UINT nPage; 
int nPos; 
int nTrackPos; 
} SCROLLINFO; }extern "C" { typedef tagSCROLLINFO *LPSCROLLINFO; }
extern "C" { typedef const SCROLLINFO *LPCSCROLLINFO; }




extern "C" { extern __declspec( dllimport ) int __stdcall SetScrollInfo(HWND, int, LPCSCROLLINFO, BOOL); } 
#line 9943
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetScrollInfo(HWND, int, LPSCROLLINFO); } 
#line 9979 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 9969
struct tagMDICREATESTRUCTA { 
LPCSTR szClass; 
LPCSTR szTitle; 
HANDLE hOwner; 
int x; 
int y; 
int cx; 
int cy; 
DWORD style; 
LPARAM lParam; 
} MDICREATESTRUCTA; }extern "C" { typedef tagMDICREATESTRUCTA *LPMDICREATESTRUCTA; }
#line 9990
extern "C" { typedef 
#line 9980
struct tagMDICREATESTRUCTW { 
LPCWSTR szClass; 
LPCWSTR szTitle; 
HANDLE hOwner; 
int x; 
int y; 
int cx; 
int cy; 
DWORD style; 
LPARAM lParam; 
} MDICREATESTRUCTW; }extern "C" { typedef tagMDICREATESTRUCTW *LPMDICREATESTRUCTW; }




extern "C" { typedef MDICREATESTRUCTA MDICREATESTRUCT; }
extern "C" { typedef LPMDICREATESTRUCTA LPMDICREATESTRUCT; }
#line 10002 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 9999
struct tagCLIENTCREATESTRUCT { 
HANDLE hWindowMenu; 
UINT idFirstChild; 
} CLIENTCREATESTRUCT; }extern "C" { typedef tagCLIENTCREATESTRUCT *LPCLIENTCREATESTRUCT; }




extern "C" { extern __declspec( dllimport ) LRESULT __stdcall DefFrameProcA(HWND, HWND, UINT, WPARAM, LPARAM); } 
#line 10016
extern "C" { extern __declspec( dllimport ) LRESULT __stdcall DefFrameProcW(HWND, HWND, UINT, WPARAM, LPARAM); } 
#line 10036 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) LRESULT __stdcall DefMDIChildProcA(HWND, UINT, WPARAM, LPARAM); } 
#line 10049 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) LRESULT __stdcall DefMDIChildProcW(HWND, UINT, WPARAM, LPARAM); } 
#line 10065 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall TranslateMDISysAccel(HWND, LPMSG); } 
#line 10074 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) UINT __stdcall ArrangeIconicWindows(HWND); } 
#line 10080
extern "C" { extern __declspec( dllimport ) HWND __stdcall CreateMDIWindowA(LPCSTR, LPCSTR, DWORD, int, int, int, int, HWND, HINSTANCE, LPARAM); } 
#line 10094
extern "C" { extern __declspec( dllimport ) HWND __stdcall CreateMDIWindowW(LPCWSTR, LPCWSTR, DWORD, int, int, int, int, HWND, HINSTANCE, LPARAM); } 
#line 10115 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) WORD __stdcall TileWindows(HWND, UINT, const RECT *, UINT, const HWND *); } 
#line 10124
extern "C" { extern __declspec( dllimport ) WORD __stdcall CascadeWindows(HWND, UINT, const RECT *, UINT, const HWND *); } 
#line 10140 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef DWORD HELPPOLY; }
#line 10149 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 10141 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
struct tagMULTIKEYHELPA { 

DWORD mkSize; 
#line 10147 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
CHAR mkKeylist; 
CHAR szKeyphrase[1]; 
} MULTIKEYHELPA; }extern "C" { typedef tagMULTIKEYHELPA *PMULTIKEYHELPA; }extern "C" { typedef tagMULTIKEYHELPA *LPMULTIKEYHELPA; }
#line 10158 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 10150 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
struct tagMULTIKEYHELPW { 

DWORD mkSize; 
#line 10156 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
WCHAR mkKeylist; 
WCHAR szKeyphrase[1]; 
} MULTIKEYHELPW; }extern "C" { typedef tagMULTIKEYHELPW *PMULTIKEYHELPW; }extern "C" { typedef tagMULTIKEYHELPW *LPMULTIKEYHELPW; }
#line 10164
extern "C" { typedef MULTIKEYHELPA MULTIKEYHELP; }
extern "C" { typedef PMULTIKEYHELPA PMULTIKEYHELP; }
extern "C" { typedef LPMULTIKEYHELPA LPMULTIKEYHELP; }
#line 10177 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 10169
struct tagHELPWININFOA { 
int wStructSize; 
int x; 
int y; 
int dx; 
int dy; 
int wMax; 
CHAR rgchMember[2]; 
} HELPWININFOA; }extern "C" { typedef tagHELPWININFOA *PHELPWININFOA; }extern "C" { typedef tagHELPWININFOA *LPHELPWININFOA; }
#line 10186
extern "C" { typedef 
#line 10178
struct tagHELPWININFOW { 
int wStructSize; 
int x; 
int y; 
int dx; 
int dy; 
int wMax; 
WCHAR rgchMember[2]; 
} HELPWININFOW; }extern "C" { typedef tagHELPWININFOW *PHELPWININFOW; }extern "C" { typedef tagHELPWININFOW *LPHELPWININFOW; }
#line 10192
extern "C" { typedef HELPWININFOA HELPWININFO; }
extern "C" { typedef PHELPWININFOA PHELPWININFO; }
extern "C" { typedef LPHELPWININFOA LPHELPWININFO; }
#line 10240 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall WinHelpA(HWND, LPCSTR, UINT, ULONG_PTR); } 
#line 10248
extern "C" { extern __declspec( dllimport ) BOOL __stdcall WinHelpW(HWND, LPCWSTR, UINT, ULONG_PTR); } 
#line 10269 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetGuiResources(HANDLE, DWORD); } 
#line 10553 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 10533 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
struct tagNONCLIENTMETRICSA { 

UINT cbSize; 
int iBorderWidth; 
int iScrollWidth; 
int iScrollHeight; 
int iCaptionWidth; 
int iCaptionHeight; 
LOGFONTA lfCaptionFont; 
int iSmCaptionWidth; 
int iSmCaptionHeight; 
LOGFONTA lfSmCaptionFont; 
int iMenuWidth; 
int iMenuHeight; 
LOGFONTA lfMenuFont; 
LOGFONTA lfStatusFont; 
LOGFONTA lfMessageFont; 

int iPaddedBorderWidth; 
#line 10553 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
} NONCLIENTMETRICSA; }extern "C" { typedef tagNONCLIENTMETRICSA *PNONCLIENTMETRICSA; }extern "C" { typedef tagNONCLIENTMETRICSA *LPNONCLIENTMETRICSA; }
#line 10574 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 10554 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
struct tagNONCLIENTMETRICSW { 

UINT cbSize; 
int iBorderWidth; 
int iScrollWidth; 
int iScrollHeight; 
int iCaptionWidth; 
int iCaptionHeight; 
LOGFONTW lfCaptionFont; 
int iSmCaptionWidth; 
int iSmCaptionHeight; 
LOGFONTW lfSmCaptionFont; 
int iMenuWidth; 
int iMenuHeight; 
LOGFONTW lfMenuFont; 
LOGFONTW lfStatusFont; 
LOGFONTW lfMessageFont; 

int iPaddedBorderWidth; 
#line 10574 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
} NONCLIENTMETRICSW; }extern "C" { typedef tagNONCLIENTMETRICSW *PNONCLIENTMETRICSW; }extern "C" { typedef tagNONCLIENTMETRICSW *LPNONCLIENTMETRICSW; }
#line 10580
extern "C" { typedef NONCLIENTMETRICSA NONCLIENTMETRICS; }
extern "C" { typedef PNONCLIENTMETRICSA PNONCLIENTMETRICS; }
extern "C" { typedef LPNONCLIENTMETRICSA LPNONCLIENTMETRICS; }
#line 10608 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 10601
struct tagMINIMIZEDMETRICS { 

UINT cbSize; 
int iWidth; 
int iHorzGap; 
int iVertGap; 
int iArrange; 
} MINIMIZEDMETRICS; }extern "C" { typedef tagMINIMIZEDMETRICS *PMINIMIZEDMETRICS; }extern "C" { typedef tagMINIMIZEDMETRICS *LPMINIMIZEDMETRICS; }
#line 10619
extern "C" { typedef 
#line 10612
struct tagICONMETRICSA { 

UINT cbSize; 
int iHorzSpacing; 
int iVertSpacing; 
int iTitleWrap; 
LOGFONTA lfFont; 
} ICONMETRICSA; }extern "C" { typedef tagICONMETRICSA *PICONMETRICSA; }extern "C" { typedef tagICONMETRICSA *LPICONMETRICSA; }
#line 10627
extern "C" { typedef 
#line 10620
struct tagICONMETRICSW { 

UINT cbSize; 
int iHorzSpacing; 
int iVertSpacing; 
int iTitleWrap; 
LOGFONTW lfFont; 
} ICONMETRICSW; }extern "C" { typedef tagICONMETRICSW *PICONMETRICSW; }extern "C" { typedef tagICONMETRICSW *LPICONMETRICSW; }
#line 10633
extern "C" { typedef ICONMETRICSA ICONMETRICS; }
extern "C" { typedef PICONMETRICSA PICONMETRICS; }
extern "C" { typedef LPICONMETRICSA LPICONMETRICS; }
#line 10644 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 10640
struct tagANIMATIONINFO { 

UINT cbSize; 
int iMinAnimate; 
} ANIMATIONINFO; }extern "C" { typedef tagANIMATIONINFO *LPANIMATIONINFO; }
#line 10655
extern "C" { typedef 
#line 10646
struct tagSERIALKEYSA { 

UINT cbSize; 
DWORD dwFlags; 
LPSTR lpszActivePort; 
LPSTR lpszPort; 
UINT iBaudRate; 
UINT iPortState; 
UINT iActive; 
} SERIALKEYSA; }extern "C" { typedef tagSERIALKEYSA *LPSERIALKEYSA; }
#line 10665
extern "C" { typedef 
#line 10656
struct tagSERIALKEYSW { 

UINT cbSize; 
DWORD dwFlags; 
LPWSTR lpszActivePort; 
LPWSTR lpszPort; 
UINT iBaudRate; 
UINT iPortState; 
UINT iActive; 
} SERIALKEYSW; }extern "C" { typedef tagSERIALKEYSW *LPSERIALKEYSW; }




extern "C" { typedef SERIALKEYSA SERIALKEYS; }
extern "C" { typedef LPSERIALKEYSA LPSERIALKEYS; }
#line 10685 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 10680
struct tagHIGHCONTRASTA { 

UINT cbSize; 
DWORD dwFlags; 
LPSTR lpszDefaultScheme; 
} HIGHCONTRASTA; }extern "C" { typedef tagHIGHCONTRASTA *LPHIGHCONTRASTA; }
#line 10691
extern "C" { typedef 
#line 10686
struct tagHIGHCONTRASTW { 

UINT cbSize; 
DWORD dwFlags; 
LPWSTR lpszDefaultScheme; 
} HIGHCONTRASTW; }extern "C" { typedef tagHIGHCONTRASTW *LPHIGHCONTRASTW; }




extern "C" { typedef HIGHCONTRASTA HIGHCONTRAST; }
extern "C" { typedef LPHIGHCONTRASTA LPHIGHCONTRAST; }
#line 41 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\tvout.h"
extern "C" { typedef 
#line 17
struct _VIDEOPARAMETERS { 
GUID Guid; 
ULONG dwOffset; 
ULONG dwCommand; 
ULONG dwFlags; 
ULONG dwMode; 
ULONG dwTVStandard; 
ULONG dwAvailableModes; 
ULONG dwAvailableTVStandard; 
ULONG dwFlickerFilter; 
ULONG dwOverScanX; 
ULONG dwOverScanY; 
ULONG dwMaxUnscaledX; 
ULONG dwMaxUnscaledY; 
ULONG dwPositionX; 
ULONG dwPositionY; 
ULONG dwBrightness; 
ULONG dwContrast; 
ULONG dwCPType; 
ULONG dwCPCommand; 
ULONG dwCPStandard; 
ULONG dwCPKey; 
ULONG bCP_APSTriggerBits; 
UCHAR bOEMCopyProtection[256]; 
} VIDEOPARAMETERS; }extern "C" { typedef _VIDEOPARAMETERS *PVIDEOPARAMETERS; }extern "C" { typedef _VIDEOPARAMETERS *LPVIDEOPARAMETERS; }
#line 10745 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) LONG __stdcall ChangeDisplaySettingsA(LPDEVMODEA, DWORD); } 
#line 10751
extern "C" { extern __declspec( dllimport ) LONG __stdcall ChangeDisplaySettingsW(LPDEVMODEW, DWORD); } 
#line 10763 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) LONG __stdcall ChangeDisplaySettingsExA(LPCSTR, LPDEVMODEA, HWND, DWORD, LPVOID); } 
#line 10772
extern "C" { extern __declspec( dllimport ) LONG __stdcall ChangeDisplaySettingsExW(LPCWSTR, LPDEVMODEW, HWND, DWORD, LPVOID); } 
#line 10790 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumDisplaySettingsA(LPCSTR, DWORD, LPDEVMODEA); } 
#line 10797
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumDisplaySettingsW(LPCWSTR, DWORD, LPDEVMODEW); } 
#line 10812 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumDisplaySettingsExA(LPCSTR, DWORD, LPDEVMODEA, DWORD); } 
#line 10820
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumDisplaySettingsExW(LPCWSTR, DWORD, LPDEVMODEW, DWORD); } 
#line 10838 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumDisplayDevicesA(LPCSTR, DWORD, PDISPLAY_DEVICEA, DWORD); } 
#line 10846
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumDisplayDevicesW(LPCWSTR, DWORD, PDISPLAY_DEVICEW, DWORD); } 
#line 10868 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SystemParametersInfoA(UINT, UINT, PVOID, UINT); } 
#line 10876
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SystemParametersInfoW(UINT, UINT, PVOID, UINT); } 
#line 10901 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 10893
struct tagFILTERKEYS { 

UINT cbSize; 
DWORD dwFlags; 
DWORD iWaitMSec; 
DWORD iDelayMSec; 
DWORD iRepeatMSec; 
DWORD iBounceMSec; 
} FILTERKEYS; }extern "C" { typedef tagFILTERKEYS *LPFILTERKEYS; }
#line 10918
extern "C" { typedef 
#line 10914
struct tagSTICKYKEYS { 

UINT cbSize; 
DWORD dwFlags; 
} STICKYKEYS; }extern "C" { typedef tagSTICKYKEYS *LPSTICKYKEYS; }
#line 10960 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 10951
struct tagMOUSEKEYS { 

UINT cbSize; 
DWORD dwFlags; 
DWORD iMaxSpeed; 
DWORD iTimeToMaxSpeed; 
DWORD iCtrlSpeed; 
DWORD dwReserved1; 
DWORD dwReserved2; 
} MOUSEKEYS; }extern "C" { typedef tagMOUSEKEYS *LPMOUSEKEYS; }
#line 10986 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 10981
struct tagACCESSTIMEOUT { 

UINT cbSize; 
DWORD dwFlags; 
DWORD iTimeOutMSec; 
} ACCESSTIMEOUT; }extern "C" { typedef tagACCESSTIMEOUT *LPACCESSTIMEOUT; }
#line 11025
extern "C" { typedef 
#line 11011
struct tagSOUNDSENTRYA { 

UINT cbSize; 
DWORD dwFlags; 
DWORD iFSTextEffect; 
DWORD iFSTextEffectMSec; 
DWORD iFSTextEffectColorBits; 
DWORD iFSGrafEffect; 
DWORD iFSGrafEffectMSec; 
DWORD iFSGrafEffectColor; 
DWORD iWindowsEffect; 
DWORD iWindowsEffectMSec; 
LPSTR lpszWindowsEffectDLL; 
DWORD iWindowsEffectOrdinal; 
} SOUNDSENTRYA; }extern "C" { typedef tagSOUNDSENTRYA *LPSOUNDSENTRYA; }
#line 11040
extern "C" { typedef 
#line 11026
struct tagSOUNDSENTRYW { 

UINT cbSize; 
DWORD dwFlags; 
DWORD iFSTextEffect; 
DWORD iFSTextEffectMSec; 
DWORD iFSTextEffectColorBits; 
DWORD iFSGrafEffect; 
DWORD iFSGrafEffectMSec; 
DWORD iFSGrafEffectColor; 
DWORD iWindowsEffect; 
DWORD iWindowsEffectMSec; 
LPWSTR lpszWindowsEffectDLL; 
DWORD iWindowsEffectOrdinal; 
} SOUNDSENTRYW; }extern "C" { typedef tagSOUNDSENTRYW *LPSOUNDSENTRYW; }




extern "C" { typedef SOUNDSENTRYA SOUNDSENTRY; }
extern "C" { typedef LPSOUNDSENTRYA LPSOUNDSENTRY; }
#line 11060 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SoundSentry(); } 
#line 11067 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 11063
struct tagTOGGLEKEYS { 

UINT cbSize; 
DWORD dwFlags; 
} TOGGLEKEYS; }extern "C" { typedef tagTOGGLEKEYS *LPTOGGLEKEYS; }
#line 11084
extern "C" { typedef 
#line 11080
struct tagAUDIODESCRIPTION { 
UINT cbSize; 
BOOL Enabled; 
LCID Locale; 
} AUDIODESCRIPTION; }extern "C" { typedef tagAUDIODESCRIPTION *LPAUDIODESCRIPTION; }
#line 11095 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) void __stdcall SetDebugErrorLevel(DWORD); } 
#line 11109
extern "C" { extern __declspec( dllimport ) void __stdcall SetLastErrorEx(DWORD, DWORD); } 
#line 11116
extern "C" { extern __declspec( dllimport ) int __stdcall InternalGetWindowText(HWND, LPWSTR, int); } 
#line 11135 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CancelShutdown(); } 
#line 11152
extern "C" { extern __declspec( dllimport ) HMONITOR __stdcall MonitorFromPoint(POINT, DWORD); } 
#line 11159
extern "C" { extern __declspec( dllimport ) HMONITOR __stdcall MonitorFromRect(LPCRECT, DWORD); } 
#line 11166
extern "C" { extern __declspec( dllimport ) HMONITOR __stdcall MonitorFromWindow(HWND, DWORD); } 
#line 11182
extern "C" { typedef 
#line 11176
struct tagMONITORINFO { 

DWORD cbSize; 
RECT rcMonitor; 
RECT rcWork; 
DWORD dwFlags; 
} MONITORINFO; }extern "C" { typedef tagMONITORINFO *LPMONITORINFO; }
#line 11188
extern "C" { typedef 
#line 11185
struct tagMONITORINFOEXA : public tagMONITORINFO { 

CHAR szDevice[32]; 
} MONITORINFOEXA; }extern "C" { typedef tagMONITORINFOEXA *LPMONITORINFOEXA; }



extern "C" { typedef 
#line 11189
struct tagMONITORINFOEXW : public tagMONITORINFO { 

WCHAR szDevice[32]; 
} MONITORINFOEXW; }extern "C" { typedef tagMONITORINFOEXW *LPMONITORINFOEXW; }




extern "C" { typedef MONITORINFOEXA MONITORINFOEX; }
extern "C" { typedef LPMONITORINFOEXA LPMONITORINFOEX; }
#line 11223 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetMonitorInfoA(HMONITOR, LPMONITORINFO); } 
#line 11229
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetMonitorInfoW(HMONITOR, LPMONITORINFO); } 
#line 11238 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef BOOL (__stdcall *MONITORENUMPROC)(HMONITOR, HDC, LPRECT, LPARAM); }




extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumDisplayMonitors(HDC, LPCRECT, MONITORENUMPROC, LPARAM); } 
#line 11259
extern "C" { extern __declspec( dllimport ) void __stdcall NotifyWinEvent(DWORD, HWND, LONG, LONG); } 
#line 11265
extern "C" { typedef void (__stdcall *WINEVENTPROC)(HWINEVENTHOOK, DWORD, HWND, LONG, LONG, DWORD, DWORD); }
#line 11277
extern "C" { extern __declspec( dllimport ) HWINEVENTHOOK __stdcall SetWinEventHook(DWORD, DWORD, HMODULE, WINEVENTPROC, DWORD, DWORD, DWORD); } 
#line 11290
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsWinEventHookInstalled(DWORD); } 
#line 11305 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall UnhookWinEvent(HWINEVENTHOOK); } 
#line 11787 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 11776
struct tagGUITHREADINFO { 

DWORD cbSize; 
DWORD flags; 
HWND hwndActive; 
HWND hwndFocus; 
HWND hwndCapture; 
HWND hwndMenuOwner; 
HWND hwndMoveSize; 
HWND hwndCaret; 
RECT rcCaret; 
} GUITHREADINFO; }extern "C" { typedef tagGUITHREADINFO *PGUITHREADINFO; }extern "C" { typedef tagGUITHREADINFO *LPGUITHREADINFO; }
#line 11805 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetGUIThreadInfo(DWORD, PGUITHREADINFO); } 
#line 11812
extern "C" { extern __declspec( dllimport ) BOOL __stdcall BlockInput(BOOL); } 
#line 11822
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetProcessDPIAware(); } 
#line 11828
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsProcessDPIAware(); } 
#line 11835 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetWindowModuleFileNameA(HWND, LPSTR, UINT); } 
#line 11842
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetWindowModuleFileNameW(HWND, LPWSTR, UINT); } 
#line 11899 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 11893
struct tagCURSORINFO { 

DWORD cbSize; 
DWORD flags; 
HCURSOR hCursor; 
POINT ptScreenPos; 
} CURSORINFO; }extern "C" { typedef tagCURSORINFO *PCURSORINFO; }extern "C" { typedef tagCURSORINFO *LPCURSORINFO; }
#line 11906
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetCursorInfo(PCURSORINFO); } 
#line 11924
extern "C" { typedef 
#line 11912
struct tagWINDOWINFO { 

DWORD cbSize; 
RECT rcWindow; 
RECT rcClient; 
DWORD dwStyle; 
DWORD dwExStyle; 
DWORD dwWindowStatus; 
UINT cxWindowBorders; 
UINT cyWindowBorders; 
ATOM atomWindowType; 
WORD wCreatorVersion; 
} WINDOWINFO; }extern "C" { typedef tagWINDOWINFO *PWINDOWINFO; }extern "C" { typedef tagWINDOWINFO *LPWINDOWINFO; }
#line 11931
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetWindowInfo(HWND, PWINDOWINFO); } 
#line 11943
extern "C" { typedef 
#line 11938
struct tagTITLEBARINFO { 

DWORD cbSize; 
RECT rcTitleBar; 
DWORD rgstate[(5 + 1)]; 
} TITLEBARINFO; }extern "C" { typedef tagTITLEBARINFO *PTITLEBARINFO; }extern "C" { typedef tagTITLEBARINFO *LPTITLEBARINFO; }




extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetTitleBarInfo(HWND, PTITLEBARINFO); } 
#line 11959
extern "C" { typedef 
#line 11953
struct tagTITLEBARINFOEX { 

DWORD cbSize; 
RECT rcTitleBar; 
DWORD rgstate[(5 + 1)]; 
RECT rgrect[(5 + 1)]; 
} TITLEBARINFOEX; }extern "C" { typedef tagTITLEBARINFOEX *PTITLEBARINFOEX; }extern "C" { typedef tagTITLEBARINFOEX *LPTITLEBARINFOEX; }
#line 11973 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 11965
struct tagMENUBARINFO { 

DWORD cbSize; 
RECT rcBar; 
HMENU hMenu; 
HWND hwndMenu; 
BOOL fBarFocused:1; 
BOOL fFocused:1; 
} MENUBARINFO; }extern "C" { typedef tagMENUBARINFO *PMENUBARINFO; }extern "C" { typedef tagMENUBARINFO *LPMENUBARINFO; }




extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetMenuBarInfo(HWND, LONG, LONG, PMENUBARINFO); } 
#line 11996
extern "C" { typedef 
#line 11987
struct tagSCROLLBARINFO { 

DWORD cbSize; 
RECT rcScrollBar; 
int dxyLineButton; 
int xyThumbTop; 
int xyThumbBottom; 
int reserved; 
DWORD rgstate[(5 + 1)]; 
} SCROLLBARINFO; }extern "C" { typedef tagSCROLLBARINFO *PSCROLLBARINFO; }extern "C" { typedef tagSCROLLBARINFO *LPSCROLLBARINFO; }




extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetScrollBarInfo(HWND, LONG, PSCROLLBARINFO); } 
#line 12018
extern "C" { typedef 
#line 12009
struct tagCOMBOBOXINFO { 

DWORD cbSize; 
RECT rcItem; 
RECT rcButton; 
DWORD stateButton; 
HWND hwndCombo; 
HWND hwndItem; 
HWND hwndList; 
} COMBOBOXINFO; }extern "C" { typedef tagCOMBOBOXINFO *PCOMBOBOXINFO; }extern "C" { typedef tagCOMBOBOXINFO *LPCOMBOBOXINFO; }




extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetComboBoxInfo(HWND, PCOMBOBOXINFO); } 
#line 12037
extern "C" { extern __declspec( dllimport ) HWND __stdcall GetAncestor(HWND, UINT); } 
#line 12051
extern "C" { extern __declspec( dllimport ) HWND __stdcall RealChildWindowFromPoint(HWND, POINT); } 
#line 12063
extern "C" { extern __declspec( dllimport ) UINT __stdcall RealGetWindowClassA(HWND, LPSTR, UINT); } 
#line 12074
extern "C" { extern __declspec( dllimport ) UINT __stdcall RealGetWindowClassW(HWND, LPWSTR, UINT); } 
#line 12098 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 12087
struct tagALTTABINFO { 

DWORD cbSize; 
int cItems; 
int cColumns; 
int cRows; 
int iColFocus; 
int iRowFocus; 
int cxItem; 
int cyItem; 
POINT ptStart; 
} ALTTABINFO; }extern "C" { typedef tagALTTABINFO *PALTTABINFO; }extern "C" { typedef tagALTTABINFO *LPALTTABINFO; }




extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetAltTabInfoA(HWND, int, PALTTABINFO, LPSTR, UINT); } 
#line 12112
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetAltTabInfoW(HWND, int, PALTTABINFO, LPWSTR, UINT); } 
#line 12131 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetListBoxInfo(HWND); } 
#line 12142 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall LockWorkStation(); } 
#line 12151 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall UserHandleGrantAccess(HANDLE, HANDLE, BOOL); } 
#line 12164 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { struct HRAWINPUT__ { int unused; }; }extern "C" { typedef HRAWINPUT__ *HRAWINPUT; }
#line 12197
extern "C" { typedef 
#line 12192
struct tagRAWINPUTHEADER { 
DWORD dwType; 
DWORD dwSize; 
HANDLE hDevice; 
WPARAM wParam; 
} RAWINPUTHEADER; }extern "C" { typedef tagRAWINPUTHEADER *PRAWINPUTHEADER; }extern "C" { typedef tagRAWINPUTHEADER *LPRAWINPUTHEADER; }
#line 12247
extern "C" { typedef 
#line 12209
struct tagRAWMOUSE { 



USHORT usFlags; 




union { 
ULONG ulButtons; 
struct { 
USHORT usButtonFlags; 
USHORT usButtonData; 
}; 
}; 
#line 12230
ULONG ulRawButtons; 




LONG lLastX; 




LONG lLastY; 




ULONG ulExtraInformation; 

} RAWMOUSE; }extern "C" { typedef tagRAWMOUSE *PRAWMOUSE; }extern "C" { typedef tagRAWMOUSE *LPRAWMOUSE; }
#line 12318 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { typedef 
#line 12292
struct tagRAWKEYBOARD { 



USHORT MakeCode; 
#line 12302
USHORT Flags; 

USHORT Reserved; 




USHORT VKey; 
UINT Message; 




ULONG ExtraInformation; 


} RAWKEYBOARD; }extern "C" { typedef tagRAWKEYBOARD *PRAWKEYBOARD; }extern "C" { typedef tagRAWKEYBOARD *LPRAWKEYBOARD; }
#line 12345
extern "C" { typedef 
#line 12341
struct tagRAWHID { 
DWORD dwSizeHid; 
DWORD dwCount; 
BYTE bRawData[1]; 
} RAWHID; }extern "C" { typedef tagRAWHID *PRAWHID; }extern "C" { typedef tagRAWHID *LPRAWHID; }
#line 12357
extern "C" { typedef 
#line 12350
struct tagRAWINPUT { 
RAWINPUTHEADER header; 
union { 
RAWMOUSE mouse; 
RAWKEYBOARD keyboard; 
RAWHID hid; 
} data; 
} RAWINPUT; }extern "C" { typedef tagRAWINPUT *PRAWINPUT; }extern "C" { typedef tagRAWINPUT *LPRAWINPUT; }
#line 12377 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetRawInputData(HRAWINPUT, UINT, LPVOID, PUINT, UINT); } 
#line 12396
extern "C" { typedef 
#line 12391
struct tagRID_DEVICE_INFO_MOUSE { 
DWORD dwId; 
DWORD dwNumberOfButtons; 
DWORD dwSampleRate; 
BOOL fHasHorizontalWheel; 
} RID_DEVICE_INFO_MOUSE; }extern "C" { typedef tagRID_DEVICE_INFO_MOUSE *PRID_DEVICE_INFO_MOUSE; }
#line 12405
extern "C" { typedef 
#line 12398
struct tagRID_DEVICE_INFO_KEYBOARD { 
DWORD dwType; 
DWORD dwSubType; 
DWORD dwKeyboardMode; 
DWORD dwNumberOfFunctionKeys; 
DWORD dwNumberOfIndicators; 
DWORD dwNumberOfKeysTotal; 
} RID_DEVICE_INFO_KEYBOARD; }extern "C" { typedef tagRID_DEVICE_INFO_KEYBOARD *PRID_DEVICE_INFO_KEYBOARD; }
#line 12417
extern "C" { typedef 
#line 12407
struct tagRID_DEVICE_INFO_HID { 
DWORD dwVendorId; 
DWORD dwProductId; 
DWORD dwVersionNumber; 




USHORT usUsagePage; 
USHORT usUsage; 
} RID_DEVICE_INFO_HID; }extern "C" { typedef tagRID_DEVICE_INFO_HID *PRID_DEVICE_INFO_HID; }
#line 12427
extern "C" { typedef 
#line 12419
struct tagRID_DEVICE_INFO { 
DWORD cbSize; 
DWORD dwType; 
union { 
RID_DEVICE_INFO_MOUSE mouse; 
RID_DEVICE_INFO_KEYBOARD keyboard; 
RID_DEVICE_INFO_HID hid; 
}; 
} RID_DEVICE_INFO; }extern "C" { typedef tagRID_DEVICE_INFO *PRID_DEVICE_INFO; }extern "C" { typedef tagRID_DEVICE_INFO *LPRID_DEVICE_INFO; }




extern "C" { extern __declspec( dllimport ) UINT __stdcall GetRawInputDeviceInfoA(HANDLE, UINT, LPVOID, PUINT); } 
#line 12440
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetRawInputDeviceInfoW(HANDLE, UINT, LPVOID, PUINT); } 
#line 12458 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetRawInputBuffer(PRAWINPUT, PUINT, UINT); } 
#line 12471
extern "C" { typedef 
#line 12466
struct tagRAWINPUTDEVICE { 
USHORT usUsagePage; 
USHORT usUsage; 
DWORD dwFlags; 
HWND hwndTarget; 
} RAWINPUTDEVICE; }extern "C" { typedef tagRAWINPUTDEVICE *PRAWINPUTDEVICE; }extern "C" { typedef tagRAWINPUTDEVICE *LPRAWINPUTDEVICE; }

extern "C" { typedef const RAWINPUTDEVICE *PCRAWINPUTDEVICE; }
#line 12503 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall RegisterRawInputDevices(PCRAWINPUTDEVICE, UINT, UINT); } 
#line 12511
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetRegisteredRawInputDevices(PRAWINPUTDEVICE, PUINT, UINT); } 
#line 12520
extern "C" { typedef 
#line 12517
struct tagRAWINPUTDEVICELIST { 
HANDLE hDevice; 
DWORD dwType; 
} RAWINPUTDEVICELIST; }extern "C" { typedef tagRAWINPUTDEVICELIST *PRAWINPUTDEVICELIST; }




extern "C" { extern __declspec( dllimport ) UINT __stdcall GetRawInputDeviceList(PRAWINPUTDEVICELIST, PUINT, UINT); } 
#line 12533
extern "C" { extern __declspec( dllimport ) LRESULT __stdcall DefRawInputProc(PRAWINPUT *, INT, UINT); } 
#line 12548 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ChangeWindowMessageFilter(UINT, DWORD); } 
#line 12559 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winuser.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ShutdownBlockReasonCreate(HWND, LPCWSTR); } 
#line 12566
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ShutdownBlockReasonQuery(HWND, LPWSTR, DWORD *); } 
#line 12574
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ShutdownBlockReasonDestroy(HWND); } 
#line 836 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { typedef DWORD LGRPID; }
#line 842
extern "C" { typedef DWORD LCTYPE; }
#line 848
extern "C" { typedef DWORD CALTYPE; }
#line 854
extern "C" { typedef DWORD CALID; }
#line 865
extern "C" { typedef 
#line 861
struct _cpinfo { 
UINT MaxCharSize; 
BYTE DefaultChar[2]; 
BYTE LeadByte[12]; 
} CPINFO; }extern "C" { typedef _cpinfo *LPCPINFO; }
#line 874
extern "C" { typedef 
#line 867
struct _cpinfoexA { 
UINT MaxCharSize; 
BYTE DefaultChar[2]; 
BYTE LeadByte[12]; 
WCHAR UnicodeDefaultChar; 
UINT CodePage; 
CHAR CodePageName[260]; 
} CPINFOEXA; }extern "C" { typedef _cpinfoexA *LPCPINFOEXA; }
#line 882
extern "C" { typedef 
#line 875
struct _cpinfoexW { 
UINT MaxCharSize; 
BYTE DefaultChar[2]; 
BYTE LeadByte[12]; 
WCHAR UnicodeDefaultChar; 
UINT CodePage; 
WCHAR CodePageName[260]; 
} CPINFOEXW; }extern "C" { typedef _cpinfoexW *LPCPINFOEXW; }




extern "C" { typedef CPINFOEXA CPINFOEX; }
extern "C" { typedef LPCPINFOEXA LPCPINFOEX; }
#line 903 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { typedef 
#line 896
struct _numberfmtA { 
UINT NumDigits; 
UINT LeadingZero; 
UINT Grouping; 
LPSTR lpDecimalSep; 
LPSTR lpThousandSep; 
UINT NegativeOrder; 
} NUMBERFMTA; }extern "C" { typedef _numberfmtA *LPNUMBERFMTA; }
#line 911
extern "C" { typedef 
#line 904
struct _numberfmtW { 
UINT NumDigits; 
UINT LeadingZero; 
UINT Grouping; 
LPWSTR lpDecimalSep; 
LPWSTR lpThousandSep; 
UINT NegativeOrder; 
} NUMBERFMTW; }extern "C" { typedef _numberfmtW *LPNUMBERFMTW; }




extern "C" { typedef NUMBERFMTA NUMBERFMT; }
extern "C" { typedef LPNUMBERFMTA LPNUMBERFMT; }
#line 934 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { typedef 
#line 925
struct _currencyfmtA { 
UINT NumDigits; 
UINT LeadingZero; 
UINT Grouping; 
LPSTR lpDecimalSep; 
LPSTR lpThousandSep; 
UINT NegativeOrder; 
UINT PositiveOrder; 
LPSTR lpCurrencySymbol; 
} CURRENCYFMTA; }extern "C" { typedef _currencyfmtA *LPCURRENCYFMTA; }
#line 944
extern "C" { typedef 
#line 935
struct _currencyfmtW { 
UINT NumDigits; 
UINT LeadingZero; 
UINT Grouping; 
LPWSTR lpDecimalSep; 
LPWSTR lpThousandSep; 
UINT NegativeOrder; 
UINT PositiveOrder; 
LPWSTR lpCurrencySymbol; 
} CURRENCYFMTW; }extern "C" { typedef _currencyfmtW *LPCURRENCYFMTW; }




extern "C" { typedef CURRENCYFMTA CURRENCYFMT; }
extern "C" { typedef LPCURRENCYFMTA LPCURRENCYFMT; }
#line 957 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
enum SYSNLS_FUNCTION { 
COMPARE_STRING = 1
}; 
extern "C" { typedef DWORD NLS_FUNCTION; }
#line 971
extern "C" { typedef 
#line 967
struct _nlsversioninfo { 
DWORD dwNLSVersionInfoSize; 
DWORD dwNLSVersion; 
DWORD dwDefinedVersion; 
} NLSVERSIONINFO; }extern "C" { typedef _nlsversioninfo *LPNLSVERSIONINFO; }
#line 979
extern "C" { typedef 
#line 973
struct _nlsversioninfoex { 
DWORD dwNLSVersionInfoSize; 
DWORD dwNLSVersion; 
DWORD dwDefinedVersion; 
DWORD dwEffectiveId; 
GUID guidCustomVersion; 
} NLSVERSIONINFOEX; }extern "C" { typedef _nlsversioninfoex *LPNLSVERSIONINFOEX; }
#line 985
extern "C" { typedef LONG GEOID; }
extern "C" { typedef DWORD GEOTYPE; }
extern "C" { typedef DWORD GEOCLASS; }
#line 995
enum SYSGEOTYPE { 
GEO_NATION = 1, 
GEO_LATITUDE, 
GEO_LONGITUDE, 
GEO_ISO2, 
GEO_ISO3, 
GEO_RFC1766, 
GEO_LCID, 
GEO_FRIENDLYNAME, 
GEO_OFFICIALNAME, 
GEO_TIMEZONES, 
GEO_OFFICIALLANGUAGES
}; 
#line 1013
enum SYSGEOCLASS { 
GEOCLASS_NATION = 16, 
GEOCLASS_REGION = 14
}; 
#line 1031
extern "C" { typedef 
#line 1023
enum _NORM_FORM { 
NormalizationOther, 
NormalizationC, 
NormalizationD, 
NormalizationKC = 5, 

NormalizationKD

} NORM_FORM; }
#line 1050 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { typedef BOOL (__stdcall *LANGUAGEGROUP_ENUMPROCA)(LGRPID, LPSTR, LPSTR, DWORD, LONG_PTR); }
extern "C" { typedef BOOL (__stdcall *LANGGROUPLOCALE_ENUMPROCA)(LGRPID, LCID, LPSTR, LONG_PTR); }
extern "C" { typedef BOOL (__stdcall *UILANGUAGE_ENUMPROCA)(LPSTR, LONG_PTR); }
extern "C" { typedef BOOL (__stdcall *LOCALE_ENUMPROCA)(LPSTR); }
extern "C" { typedef BOOL (__stdcall *CODEPAGE_ENUMPROCA)(LPSTR); }
extern "C" { typedef BOOL (__stdcall *DATEFMT_ENUMPROCA)(LPSTR); }
extern "C" { typedef BOOL (__stdcall *DATEFMT_ENUMPROCEXA)(LPSTR, CALID); }
extern "C" { typedef BOOL (__stdcall *TIMEFMT_ENUMPROCA)(LPSTR); }
extern "C" { typedef BOOL (__stdcall *CALINFO_ENUMPROCA)(LPSTR); }
extern "C" { typedef BOOL (__stdcall *CALINFO_ENUMPROCEXA)(LPSTR, CALID); }

extern "C" { typedef BOOL (__stdcall *LANGUAGEGROUP_ENUMPROCW)(LGRPID, LPWSTR, LPWSTR, DWORD, LONG_PTR); }
extern "C" { typedef BOOL (__stdcall *LANGGROUPLOCALE_ENUMPROCW)(LGRPID, LCID, LPWSTR, LONG_PTR); }
extern "C" { typedef BOOL (__stdcall *UILANGUAGE_ENUMPROCW)(LPWSTR, LONG_PTR); }
extern "C" { typedef BOOL (__stdcall *LOCALE_ENUMPROCW)(LPWSTR); }
extern "C" { typedef BOOL (__stdcall *CODEPAGE_ENUMPROCW)(LPWSTR); }
extern "C" { typedef BOOL (__stdcall *DATEFMT_ENUMPROCW)(LPWSTR); }
extern "C" { typedef BOOL (__stdcall *DATEFMT_ENUMPROCEXW)(LPWSTR, CALID); }
extern "C" { typedef BOOL (__stdcall *TIMEFMT_ENUMPROCW)(LPWSTR); }
extern "C" { typedef BOOL (__stdcall *CALINFO_ENUMPROCW)(LPWSTR); }
extern "C" { typedef BOOL (__stdcall *CALINFO_ENUMPROCEXW)(LPWSTR, CALID); }
extern "C" { typedef BOOL (__stdcall *GEO_ENUMPROC)(GEOID); }
#line 1147 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { typedef 
#line 1133
struct _FILEMUIINFO { 
DWORD dwSize; 
DWORD dwVersion; 
DWORD dwFileType; 
BYTE pChecksum[16]; 
BYTE pServiceChecksum[16]; 
DWORD dwLanguageNameOffset; 
DWORD dwTypeIDMainSize; 
DWORD dwTypeIDMainOffset; 
DWORD dwTypeNameMainOffset; 
DWORD dwTypeIDMUISize; 
DWORD dwTypeIDMUIOffset; 
DWORD dwTypeNameMUIOffset; 
BYTE abBuffer[8]; 
} FILEMUIINFO; }extern "C" { typedef _FILEMUIINFO *PFILEMUIINFO; }
#line 1216
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsValidCodePage(UINT); } 
#line 1222
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetACP(); } 




extern "C" { extern __declspec( dllimport ) UINT __stdcall GetOEMCP(); } 




extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetCPInfo(UINT, LPCPINFO); } 
#line 1239
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetCPInfoExA(UINT, DWORD, LPCPINFOEXA); } 
#line 1246
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetCPInfoExW(UINT, DWORD, LPCPINFOEXW); } 
#line 1259 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsDBCSLeadByte(BYTE); } 
#line 1265
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsDBCSLeadByteEx(UINT, BYTE); } 
#line 1272
extern "C" { extern __declspec( dllimport ) int __stdcall MultiByteToWideChar(UINT, DWORD, LPCSTR, int, LPWSTR, int); } 
#line 1283
extern "C" { extern __declspec( dllimport ) int __stdcall WideCharToMultiByte(UINT, DWORD, LPCWSTR, int, LPSTR, int, LPCSTR, LPBOOL); } 
#line 1301
extern "C" { extern __declspec( dllimport ) int __stdcall CompareStringA(LCID, DWORD, LPCSTR, int, LPCSTR, int); } 
#line 1311
extern "C" { extern __declspec( dllimport ) int __stdcall CompareStringW(LCID, DWORD, LPCWSTR, int, LPCWSTR, int); } 
#line 1357 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { extern __declspec( dllimport ) int __stdcall FindNLSString(LCID, DWORD, LPCWSTR, int, LPCWSTR, int, LPINT); } 
#line 1371 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { extern __declspec( dllimport ) int __stdcall LCMapStringA(LCID, DWORD, LPCSTR, int, LPSTR, int); } 
#line 1381
extern "C" { extern __declspec( dllimport ) int __stdcall LCMapStringW(LCID, DWORD, LPCWSTR, int, LPWSTR, int); } 
#line 1397 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { extern __declspec( dllimport ) int __stdcall GetLocaleInfoA(LCID, LCTYPE, LPSTR, int); } 
#line 1405
extern "C" { extern __declspec( dllimport ) int __stdcall GetLocaleInfoW(LCID, LCTYPE, LPWSTR, int); } 
#line 1419 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetLocaleInfoA(LCID, LCTYPE, LPCSTR); } 
#line 1426
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetLocaleInfoW(LCID, LCTYPE, LPCWSTR); } 
#line 1440 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { extern __declspec( dllimport ) int __stdcall GetCalendarInfoA(LCID, CALID, CALTYPE, LPSTR, int, LPDWORD); } 
#line 1450
extern "C" { extern __declspec( dllimport ) int __stdcall GetCalendarInfoW(LCID, CALID, CALTYPE, LPWSTR, int, LPDWORD); } 
#line 1466 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetCalendarInfoA(LCID, CALID, CALTYPE, LPCSTR); } 
#line 1474
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetCalendarInfoW(LCID, CALID, CALTYPE, LPCWSTR); } 
#line 1490 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { extern __declspec( dllimport ) int __stdcall LCIDToLocaleName(LCID, LPWSTR, int, DWORD); } 
#line 1499
extern "C" { extern __declspec( dllimport ) LCID __stdcall LocaleNameToLCID(LPCWSTR, DWORD); } 
#line 1508 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { extern __declspec( dllimport ) int __stdcall GetTimeFormatA(LCID, DWORD, const SYSTEMTIME *, LPCSTR, LPSTR, int); } 
#line 1518
extern "C" { extern __declspec( dllimport ) int __stdcall GetTimeFormatW(LCID, DWORD, const SYSTEMTIME *, LPCWSTR, LPWSTR, int); } 
#line 1536 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { extern __declspec( dllimport ) int __stdcall GetDurationFormat(LCID, DWORD, const SYSTEMTIME *, ULONGLONG, LPCWSTR, LPWSTR, int); } 
#line 1549 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { extern __declspec( dllimport ) int __stdcall GetDateFormatA(LCID, DWORD, const SYSTEMTIME *, LPCSTR, LPSTR, int); } 
#line 1559
extern "C" { extern __declspec( dllimport ) int __stdcall GetDateFormatW(LCID, DWORD, const SYSTEMTIME *, LPCWSTR, LPWSTR, int); } 
#line 1575 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { extern __declspec( dllimport ) int __stdcall GetNumberFormatA(LCID, DWORD, LPCSTR, const NUMBERFMTA *, LPSTR, int); } 
#line 1585
extern "C" { extern __declspec( dllimport ) int __stdcall GetNumberFormatW(LCID, DWORD, LPCWSTR, const NUMBERFMTW *, LPWSTR, int); } 
#line 1601 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { extern __declspec( dllimport ) int __stdcall GetCurrencyFormatA(LCID, DWORD, LPCSTR, const CURRENCYFMTA *, LPSTR, int); } 
#line 1611
extern "C" { extern __declspec( dllimport ) int __stdcall GetCurrencyFormatW(LCID, DWORD, LPCWSTR, const CURRENCYFMTW *, LPWSTR, int); } 
#line 1627 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumCalendarInfoA(CALINFO_ENUMPROCA, LCID, CALID, CALTYPE); } 
#line 1635
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumCalendarInfoW(CALINFO_ENUMPROCW, LCID, CALID, CALTYPE); } 
#line 1650 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumCalendarInfoExA(CALINFO_ENUMPROCEXA, LCID, CALID, CALTYPE); } 
#line 1658
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumCalendarInfoExW(CALINFO_ENUMPROCEXW, LCID, CALID, CALTYPE); } 
#line 1673 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumTimeFormatsA(TIMEFMT_ENUMPROCA, LCID, DWORD); } 
#line 1680
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumTimeFormatsW(TIMEFMT_ENUMPROCW, LCID, DWORD); } 
#line 1693 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumDateFormatsA(DATEFMT_ENUMPROCA, LCID, DWORD); } 
#line 1700
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumDateFormatsW(DATEFMT_ENUMPROCW, LCID, DWORD); } 
#line 1714 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumDateFormatsExA(DATEFMT_ENUMPROCEXA, LCID, DWORD); } 
#line 1721
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumDateFormatsExW(DATEFMT_ENUMPROCEXW, LCID, DWORD); } 
#line 1736 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsValidLanguageGroup(LGRPID, DWORD); } 
#line 1744 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetNLSVersion(NLS_FUNCTION, LCID, LPNLSVERSIONINFO); } 
#line 1752
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsNLSDefinedString(NLS_FUNCTION, DWORD, LPNLSVERSIONINFO, LPCWSTR, INT); } 
#line 1762
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsValidLocale(LCID, DWORD); } 
#line 1769
extern "C" { extern __declspec( dllimport ) int __stdcall GetGeoInfoA(GEOID, GEOTYPE, LPSTR, int, LANGID); } 
#line 1778
extern "C" { extern __declspec( dllimport ) int __stdcall GetGeoInfoW(GEOID, GEOTYPE, LPWSTR, int, LANGID); } 
#line 1793 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumSystemGeoID(GEOCLASS, GEOID, GEO_ENUMPROC); } 
#line 1801
extern "C" { extern __declspec( dllimport ) GEOID __stdcall GetUserGeoID(GEOCLASS); } 
#line 1807
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetUserGeoID(GEOID); } 
#line 1813
extern "C" { extern __declspec( dllimport ) LCID __stdcall ConvertDefaultLocale(LCID); } 
#line 1819
extern "C" { extern __declspec( dllimport ) LCID __stdcall GetThreadLocale(); } 




extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetThreadLocale(LCID); } 
#line 1832
extern "C" { extern __declspec( dllimport ) LANGID __stdcall GetSystemDefaultUILanguage(); } 




extern "C" { extern __declspec( dllimport ) LANGID __stdcall GetUserDefaultUILanguage(); } 
#line 1843 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { extern __declspec( dllimport ) LANGID __stdcall GetSystemDefaultLangID(); } 




extern "C" { extern __declspec( dllimport ) LANGID __stdcall GetUserDefaultLangID(); } 




extern "C" { extern __declspec( dllimport ) LCID __stdcall GetSystemDefaultLCID(); } 




extern "C" { extern __declspec( dllimport ) LCID __stdcall GetUserDefaultLCID(); } 
#line 1865
extern "C" { extern __declspec( dllimport ) LANGID __stdcall SetThreadUILanguage(LANGID); } 
#line 1873
extern "C" { extern __declspec( dllimport ) LANGID __stdcall GetThreadUILanguage(); } 
#line 1879
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetUserPreferredUILanguages(DWORD, PULONG, PWSTR, PULONG); } 
#line 1890
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetSystemPreferredUILanguages(DWORD, PULONG, PWSTR, PULONG); } 
#line 1901
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetThreadPreferredUILanguages(DWORD, PULONG, PWSTR, PULONG); } 
#line 1912
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetThreadPreferredUILanguages(DWORD, PCWSTR, PULONG); } 
#line 1922
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetFileMUIInfo(DWORD, PCWSTR, PFILEMUIINFO, DWORD *); } 
#line 1931
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetFileMUIPath(DWORD, PCWSTR, PWSTR, PULONG, PWSTR, PULONG, PULONGLONG); } 
#line 1945
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetUILanguageInfo(DWORD, PCWSTR, PWSTR, PDWORD, PDWORD); } 
#line 1957
extern "C" { extern __declspec( dllimport ) BOOL __stdcall NotifyUILanguageChange(DWORD, PCWSTR, PCWSTR, DWORD, PDWORD); } 
#line 1974 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetStringTypeExA(LCID, DWORD, LPCSTR, int, LPWORD); } 
#line 1983
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetStringTypeExW(LCID, DWORD, LPCWSTR, int, LPWORD); } 
#line 2009 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetStringTypeA(LCID, DWORD, LPCSTR, int, LPWORD); } 
#line 2019
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetStringTypeW(DWORD, LPCWSTR, int, LPWORD); } 
#line 2029
extern "C" { extern __declspec( dllimport ) int __stdcall FoldStringA(DWORD, LPCSTR, int, LPSTR, int); } 
#line 2038
extern "C" { extern __declspec( dllimport ) int __stdcall FoldStringW(DWORD, LPCWSTR, int, LPWSTR, int); } 
#line 2054 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumSystemLanguageGroupsA(LANGUAGEGROUP_ENUMPROCA, DWORD, LONG_PTR); } 
#line 2061
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumSystemLanguageGroupsW(LANGUAGEGROUP_ENUMPROCW, DWORD, LONG_PTR); } 
#line 2074 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumLanguageGroupLocalesA(LANGGROUPLOCALE_ENUMPROCA, LGRPID, DWORD, LONG_PTR); } 
#line 2082
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumLanguageGroupLocalesW(LANGGROUPLOCALE_ENUMPROCW, LGRPID, DWORD, LONG_PTR); } 
#line 2096 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumUILanguagesA(UILANGUAGE_ENUMPROCA, DWORD, LONG_PTR); } 
#line 2103
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumUILanguagesW(UILANGUAGE_ENUMPROCW, DWORD, LONG_PTR); } 
#line 2117 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumSystemLocalesA(LOCALE_ENUMPROCA, DWORD); } 
#line 2123
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumSystemLocalesW(LOCALE_ENUMPROCW, DWORD); } 
#line 2135 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumSystemCodePagesA(CODEPAGE_ENUMPROCA, DWORD); } 
#line 2141
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumSystemCodePagesW(CODEPAGE_ENUMPROCW, DWORD); } 
#line 2158 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { extern __declspec( dllimport ) int __stdcall NormalizeString(NORM_FORM, LPCWSTR, int, LPWSTR, int); } 
#line 2166
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsNormalizedString(NORM_FORM, LPCWSTR, int); } 
#line 2175
extern "C" { extern __declspec( dllimport ) int __stdcall IdnToAscii(DWORD, LPCWSTR, int, LPWSTR, int); } 
#line 2183
extern "C" { extern __declspec( dllimport ) int __stdcall IdnToNameprepUnicode(DWORD, LPCWSTR, int, LPWSTR, int); } 
#line 2191
extern "C" { extern __declspec( dllimport ) int __stdcall IdnToUnicode(DWORD, LPCWSTR, int, LPWSTR, int); } 
#line 2199
extern "C" { extern __declspec( dllimport ) BOOL __stdcall VerifyScripts(DWORD, LPCWSTR, int, LPCWSTR, int); } 
#line 2208
extern "C" { extern __declspec( dllimport ) int __stdcall GetStringScripts(DWORD, LPCWSTR, int, LPWSTR, int); } 
#line 2229 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnls.h"
extern "C" { extern __declspec( dllimport ) int __stdcall GetLocaleInfoEx(LPCWSTR, LCTYPE, LPWSTR, int); } 
#line 2239
extern "C" { extern __declspec( dllimport ) int __stdcall GetCalendarInfoEx(LPCWSTR, CALID, LPCWSTR, CALTYPE, LPWSTR, int, LPDWORD); } 
#line 2253
extern "C" { extern __declspec( dllimport ) int __stdcall GetTimeFormatEx(LPCWSTR, DWORD, const SYSTEMTIME *, LPCWSTR, LPWSTR, int); } 
#line 2265
extern "C" { extern __declspec( dllimport ) int __stdcall GetDateFormatEx(LPCWSTR, DWORD, const SYSTEMTIME *, LPCWSTR, LPWSTR, int, LPCWSTR); } 
#line 2278
extern "C" { extern __declspec( dllimport ) int __stdcall GetDurationFormatEx(LPCWSTR, DWORD, const SYSTEMTIME *, ULONGLONG, LPCWSTR, LPWSTR, int); } 
#line 2291
extern "C" { extern __declspec( dllimport ) int __stdcall GetNumberFormatEx(LPCWSTR, DWORD, LPCWSTR, const NUMBERFMTW *, LPWSTR, int); } 
#line 2303
extern "C" { extern __declspec( dllimport ) int __stdcall GetCurrencyFormatEx(LPCWSTR, DWORD, LPCWSTR, const CURRENCYFMTW *, LPWSTR, int); } 
#line 2315
extern "C" { extern __declspec( dllimport ) int __stdcall GetUserDefaultLocaleName(LPWSTR, int); } 
#line 2323
extern "C" { extern __declspec( dllimport ) int __stdcall GetSystemDefaultLocaleName(LPWSTR, int); } 
#line 2331
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetNLSVersionEx(NLS_FUNCTION, LPCWSTR, LPNLSVERSIONINFOEX); } 
#line 2340
extern "C" { extern __declspec( dllimport ) int __stdcall CompareStringEx(LPCWSTR, DWORD, LPCWSTR, int, LPCWSTR, int, LPNLSVERSIONINFO, LPVOID, LPARAM); } 
#line 2355
extern "C" { extern __declspec( dllimport ) int __stdcall FindNLSStringEx(LPCWSTR, DWORD, LPCWSTR, int, LPCWSTR, int, LPINT, LPNLSVERSIONINFO, LPVOID, LPARAM); } 
#line 2372
extern "C" { extern __declspec( dllimport ) int __stdcall LCMapStringEx(LPCWSTR, DWORD, LPCWSTR, int, LPWSTR, int, LPNLSVERSIONINFO, LPVOID, LPARAM); } 
#line 2387
extern "C" { extern __declspec( dllimport ) int __stdcall CompareStringOrdinal(LPCWSTR, int, LPCWSTR, int, BOOL); } 
#line 2398
extern "C" { extern __declspec( dllimport ) BOOL __stdcall IsValidLocaleName(LPCWSTR); } 



extern "C" { typedef BOOL (__stdcall *CALINFO_ENUMPROCEXEX)(LPWSTR, CALID, LPWSTR, LPARAM); }




extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumCalendarInfoExEx(CALINFO_ENUMPROCEXEX, LPCWSTR, CALID, LPCWSTR, CALTYPE, LPARAM); } 
#line 2416
extern "C" { typedef BOOL (__stdcall *DATEFMT_ENUMPROCEXEX)(LPWSTR, CALID, LPARAM); }




extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumDateFormatsExEx(DATEFMT_ENUMPROCEXEX, LPCWSTR, DWORD, LPARAM); } 
#line 2428
extern "C" { typedef BOOL (__stdcall *TIMEFMT_ENUMPROCEX)(LPWSTR, LPARAM); }




extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumTimeFormatsEx(TIMEFMT_ENUMPROCEX, LPCWSTR, DWORD, LPARAM); } 
#line 2440
extern "C" { typedef BOOL (__stdcall *LOCALE_ENUMPROCEX)(LPWSTR, DWORD, LPARAM); }




extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumSystemLocalesEx(LOCALE_ENUMPROCEX, DWORD, LPARAM, LPVOID); } 
#line 38 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincon.h"
extern "C" { typedef 
#line 35
struct _COORD { 
SHORT X; 
SHORT Y; 
} COORD; }extern "C" { typedef _COORD *PCOORD; }
#line 45
extern "C" { typedef 
#line 40
struct _SMALL_RECT { 
SHORT Left; 
SHORT Top; 
SHORT Right; 
SHORT Bottom; 
} SMALL_RECT; }extern "C" { typedef _SMALL_RECT *PSMALL_RECT; }
#line 57
extern "C" { typedef 
#line 47
struct _KEY_EVENT_RECORD { 
BOOL bKeyDown; 
WORD wRepeatCount; 
WORD wVirtualKeyCode; 
WORD wVirtualScanCode; 
union { 
WCHAR UnicodeChar; 
CHAR AsciiChar; 
} uChar; 
DWORD dwControlKeyState; 
} KEY_EVENT_RECORD; }extern "C" { typedef _KEY_EVENT_RECORD *PKEY_EVENT_RECORD; }
#line 85
extern "C" { typedef 
#line 80
struct _MOUSE_EVENT_RECORD { 
COORD dwMousePosition; 
DWORD dwButtonState; 
DWORD dwControlKeyState; 
DWORD dwEventFlags; 
} MOUSE_EVENT_RECORD; }extern "C" { typedef _MOUSE_EVENT_RECORD *PMOUSE_EVENT_RECORD; }
#line 110 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincon.h"
extern "C" { typedef 
#line 108
struct _WINDOW_BUFFER_SIZE_RECORD { 
COORD dwSize; 
} WINDOW_BUFFER_SIZE_RECORD; }extern "C" { typedef _WINDOW_BUFFER_SIZE_RECORD *PWINDOW_BUFFER_SIZE_RECORD; }



extern "C" { typedef 
#line 112
struct _MENU_EVENT_RECORD { 
UINT dwCommandId; 
} MENU_EVENT_RECORD; }extern "C" { typedef _MENU_EVENT_RECORD *PMENU_EVENT_RECORD; }



extern "C" { typedef 
#line 116
struct _FOCUS_EVENT_RECORD { 
BOOL bSetFocus; 
} FOCUS_EVENT_RECORD; }extern "C" { typedef _FOCUS_EVENT_RECORD *PFOCUS_EVENT_RECORD; }
#line 129
extern "C" { typedef 
#line 120
struct _INPUT_RECORD { 
WORD EventType; 
union { 
KEY_EVENT_RECORD KeyEvent; 
MOUSE_EVENT_RECORD MouseEvent; 
WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent; 
MENU_EVENT_RECORD MenuEvent; 
FOCUS_EVENT_RECORD FocusEvent; 
} Event; 
} INPUT_RECORD; }extern "C" { typedef _INPUT_RECORD *PINPUT_RECORD; }
#line 147
extern "C" { typedef 
#line 141
struct _CHAR_INFO { 
union { 
WCHAR UnicodeChar; 
CHAR AsciiChar; 
} Char; 
WORD Attributes; 
} CHAR_INFO; }extern "C" { typedef _CHAR_INFO *PCHAR_INFO; }
#line 178
extern "C" { typedef 
#line 172
struct _CONSOLE_SCREEN_BUFFER_INFO { 
COORD dwSize; 
COORD dwCursorPosition; 
WORD wAttributes; 
SMALL_RECT srWindow; 
COORD dwMaximumWindowSize; 
} CONSOLE_SCREEN_BUFFER_INFO; }extern "C" { typedef _CONSOLE_SCREEN_BUFFER_INFO *PCONSOLE_SCREEN_BUFFER_INFO; }
#line 190
extern "C" { typedef 
#line 180
struct _CONSOLE_SCREEN_BUFFER_INFOEX { 
ULONG cbSize; 
COORD dwSize; 
COORD dwCursorPosition; 
WORD wAttributes; 
SMALL_RECT srWindow; 
COORD dwMaximumWindowSize; 
WORD wPopupAttributes; 
BOOL bFullscreenSupported; 
COLORREF ColorTable[16]; 
} CONSOLE_SCREEN_BUFFER_INFOEX; }extern "C" { typedef _CONSOLE_SCREEN_BUFFER_INFOEX *PCONSOLE_SCREEN_BUFFER_INFOEX; }




extern "C" { typedef 
#line 192
struct _CONSOLE_CURSOR_INFO { 
DWORD dwSize; 
BOOL bVisible; 
} CONSOLE_CURSOR_INFO; }extern "C" { typedef _CONSOLE_CURSOR_INFO *PCONSOLE_CURSOR_INFO; }




extern "C" { typedef 
#line 197
struct _CONSOLE_FONT_INFO { 
DWORD nFont; 
COORD dwFontSize; 
} CONSOLE_FONT_INFO; }extern "C" { typedef _CONSOLE_FONT_INFO *PCONSOLE_FONT_INFO; }
#line 210
extern "C" { typedef 
#line 203
struct _CONSOLE_FONT_INFOEX { 
ULONG cbSize; 
DWORD nFont; 
COORD dwFontSize; 
UINT FontFamily; 
UINT FontWeight; 
WCHAR FaceName[32]; 
} CONSOLE_FONT_INFOEX; }extern "C" { typedef _CONSOLE_FONT_INFOEX *PCONSOLE_FONT_INFOEX; }
#line 219 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincon.h"
extern "C" { typedef 
#line 214
struct _CONSOLE_HISTORY_INFO { 
UINT cbSize; 
UINT HistoryBufferSize; 
UINT NumberOfHistoryBuffers; 
DWORD dwFlags; 
} CONSOLE_HISTORY_INFO; }extern "C" { typedef _CONSOLE_HISTORY_INFO *PCONSOLE_HISTORY_INFO; }
#line 226
extern "C" { typedef 
#line 222
struct _CONSOLE_SELECTION_INFO { 
DWORD dwFlags; 
COORD dwSelectionAnchor; 
SMALL_RECT srSelection; 
} CONSOLE_SELECTION_INFO; }extern "C" { typedef _CONSOLE_SELECTION_INFO *PCONSOLE_SELECTION_INFO; }
#line 245 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincon.h"
extern "C" { typedef BOOL (__stdcall *PHANDLER_ROUTINE)(DWORD); }
#line 285
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PeekConsoleInputA(HANDLE, PINPUT_RECORD, DWORD, LPDWORD); } 
#line 294
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PeekConsoleInputW(HANDLE, PINPUT_RECORD, DWORD, LPDWORD); } 
#line 309 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincon.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ReadConsoleInputA(HANDLE, PINPUT_RECORD, DWORD, LPDWORD); } 
#line 318
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ReadConsoleInputW(HANDLE, PINPUT_RECORD, DWORD, LPDWORD); } 
#line 333 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincon.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall WriteConsoleInputA(HANDLE, const INPUT_RECORD *, DWORD, LPDWORD); } 
#line 342
extern "C" { extern __declspec( dllimport ) BOOL __stdcall WriteConsoleInputW(HANDLE, const INPUT_RECORD *, DWORD, LPDWORD); } 
#line 357 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincon.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ReadConsoleOutputA(HANDLE, PCHAR_INFO, COORD, COORD, PSMALL_RECT); } 
#line 367
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ReadConsoleOutputW(HANDLE, PCHAR_INFO, COORD, COORD, PSMALL_RECT); } 
#line 383 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincon.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall WriteConsoleOutputA(HANDLE, const CHAR_INFO *, COORD, COORD, PSMALL_RECT); } 
#line 393
extern "C" { extern __declspec( dllimport ) BOOL __stdcall WriteConsoleOutputW(HANDLE, const CHAR_INFO *, COORD, COORD, PSMALL_RECT); } 
#line 409 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincon.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ReadConsoleOutputCharacterA(HANDLE, LPSTR, DWORD, COORD, LPDWORD); } 
#line 419
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ReadConsoleOutputCharacterW(HANDLE, LPWSTR, DWORD, COORD, LPDWORD); } 
#line 435 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincon.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ReadConsoleOutputAttribute(HANDLE, LPWORD, DWORD, COORD, LPDWORD); } 
#line 446
extern "C" { extern __declspec( dllimport ) BOOL __stdcall WriteConsoleOutputCharacterA(HANDLE, LPCSTR, DWORD, COORD, LPDWORD); } 
#line 456
extern "C" { extern __declspec( dllimport ) BOOL __stdcall WriteConsoleOutputCharacterW(HANDLE, LPCWSTR, DWORD, COORD, LPDWORD); } 
#line 472 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincon.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall WriteConsoleOutputAttribute(HANDLE, const WORD *, DWORD, COORD, LPDWORD); } 
#line 483
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FillConsoleOutputCharacterA(HANDLE, CHAR, DWORD, COORD, LPDWORD); } 
#line 493
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FillConsoleOutputCharacterW(HANDLE, WCHAR, DWORD, COORD, LPDWORD); } 
#line 509 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincon.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FillConsoleOutputAttribute(HANDLE, WORD, DWORD, COORD, LPDWORD); } 
#line 520
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetConsoleMode(HANDLE, LPDWORD); } 
#line 528
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetNumberOfConsoleInputEvents(HANDLE, LPDWORD); } 
#line 539
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetConsoleScreenBufferInfo(HANDLE, PCONSOLE_SCREEN_BUFFER_INFO); } 
#line 547
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetConsoleScreenBufferInfoEx(HANDLE, PCONSOLE_SCREEN_BUFFER_INFOEX); } 
#line 554
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetConsoleScreenBufferInfoEx(HANDLE, PCONSOLE_SCREEN_BUFFER_INFOEX); } 
#line 561
extern "C" { extern __declspec( dllimport ) COORD __stdcall GetLargestConsoleWindowSize(HANDLE); } 
#line 568
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetConsoleCursorInfo(HANDLE, PCONSOLE_CURSOR_INFO); } 
#line 578
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetCurrentConsoleFont(HANDLE, BOOL, PCONSOLE_FONT_INFO); } 
#line 588
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetCurrentConsoleFontEx(HANDLE, BOOL, PCONSOLE_FONT_INFOEX); } 
#line 596
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetCurrentConsoleFontEx(HANDLE, BOOL, PCONSOLE_FONT_INFOEX); } 
#line 605 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincon.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetConsoleHistoryInfo(PCONSOLE_HISTORY_INFO); } 
#line 611
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetConsoleHistoryInfo(PCONSOLE_HISTORY_INFO); } 
#line 617
extern "C" { extern __declspec( dllimport ) COORD __stdcall GetConsoleFontSize(HANDLE, DWORD); } 
#line 625
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetConsoleSelectionInfo(PCONSOLE_SELECTION_INFO); } 
#line 634 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincon.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetNumberOfConsoleMouseButtons(LPDWORD); } 
#line 641
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetConsoleMode(HANDLE, DWORD); } 
#line 649
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetConsoleActiveScreenBuffer(HANDLE); } 
#line 656
extern "C" { extern __declspec( dllimport ) BOOL __stdcall FlushConsoleInputBuffer(HANDLE); } 
#line 663
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetConsoleScreenBufferSize(HANDLE, COORD); } 
#line 671
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetConsoleCursorPosition(HANDLE, COORD); } 
#line 679
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetConsoleCursorInfo(HANDLE, const CONSOLE_CURSOR_INFO *); } 
#line 687
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ScrollConsoleScreenBufferA(HANDLE, const SMALL_RECT *, const SMALL_RECT *, COORD, const CHAR_INFO *); } 
#line 697
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ScrollConsoleScreenBufferW(HANDLE, const SMALL_RECT *, const SMALL_RECT *, COORD, const CHAR_INFO *); } 
#line 713 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincon.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetConsoleWindowInfo(HANDLE, BOOL, const SMALL_RECT *); } 
#line 722
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetConsoleTextAttribute(HANDLE, WORD); } 
#line 730
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetConsoleCtrlHandler(PHANDLER_ROUTINE, BOOL); } 
#line 737
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GenerateConsoleCtrlEvent(DWORD, DWORD); } 
#line 745
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AllocConsole(); } 




extern "C" { extern __declspec( dllimport ) BOOL __stdcall FreeConsole(); } 
#line 756
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AttachConsole(DWORD); } 
#line 766 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincon.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetConsoleTitleA(LPSTR, DWORD); } 
#line 773
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetConsoleTitleW(LPWSTR, DWORD); } 
#line 787 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincon.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetConsoleOriginalTitleA(LPSTR, DWORD); } 
#line 793
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetConsoleOriginalTitleW(LPWSTR, DWORD); } 
#line 806 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincon.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetConsoleTitleA(LPCSTR); } 
#line 812
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetConsoleTitleW(LPCWSTR); } 
#line 826 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincon.h"
extern "C" { typedef 
#line 821
struct _CONSOLE_READCONSOLE_CONTROL { 
ULONG nLength; 
ULONG nInitialChars; 
ULONG dwCtrlWakeupMask; 
ULONG dwControlKeyState; 
} CONSOLE_READCONSOLE_CONTROL; }extern "C" { typedef _CONSOLE_READCONSOLE_CONTROL *PCONSOLE_READCONSOLE_CONTROL; }




extern "C" { extern __declspec( dllimport ) BOOL __stdcall ReadConsoleA(HANDLE, LPVOID, DWORD, LPDWORD, PCONSOLE_READCONSOLE_CONTROL); } 
#line 842
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ReadConsoleW(HANDLE, LPVOID, DWORD, LPDWORD, PCONSOLE_READCONSOLE_CONTROL); } 
#line 859 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincon.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall WriteConsoleA(HANDLE, const void *, DWORD, LPDWORD, LPVOID); } 
#line 869
extern "C" { extern __declspec( dllimport ) BOOL __stdcall WriteConsoleW(HANDLE, const void *, DWORD, LPDWORD, LPVOID); } 
#line 888 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincon.h"
extern "C" { extern __declspec( dllimport ) HANDLE __stdcall CreateConsoleScreenBuffer(DWORD, DWORD, const SECURITY_ATTRIBUTES *, DWORD, LPVOID); } 
#line 899
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetConsoleCP(); } 




extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetConsoleCP(UINT); } 
#line 911
extern "C" { extern __declspec( dllimport ) UINT __stdcall GetConsoleOutputCP(); } 




extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetConsoleOutputCP(UINT); } 
#line 928
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetConsoleDisplayMode(LPDWORD); } 
#line 936
extern "C" { extern BOOL __stdcall SetConsoleDisplayMode(HANDLE, DWORD, PCOORD); } 
#line 944
extern "C" { extern __declspec( dllimport ) HWND __stdcall GetConsoleWindow(); } 
#line 955 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincon.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetConsoleProcessList(LPDWORD, DWORD); } 
#line 966
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AddConsoleAliasA(LPSTR, LPSTR, LPSTR); } 
#line 973
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AddConsoleAliasW(LPWSTR, LPWSTR, LPWSTR); } 
#line 986 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincon.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetConsoleAliasA(LPSTR, LPSTR, DWORD, LPSTR); } 
#line 994
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetConsoleAliasW(LPWSTR, LPWSTR, DWORD, LPWSTR); } 
#line 1008 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincon.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetConsoleAliasesLengthA(LPSTR); } 




extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetConsoleAliasesLengthW(LPWSTR); } 
#line 1024 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincon.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetConsoleAliasExesLengthA(); } 




extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetConsoleAliasExesLengthW(); } 
#line 1040 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincon.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetConsoleAliasesA(LPSTR, DWORD, LPSTR); } 
#line 1047
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetConsoleAliasesW(LPWSTR, DWORD, LPWSTR); } 
#line 1060 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincon.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetConsoleAliasExesA(LPSTR, DWORD); } 
#line 1066
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetConsoleAliasExesW(LPWSTR, DWORD); } 
#line 157 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winver.h"
extern "C" { typedef 
#line 142
struct tagVS_FIXEDFILEINFO { 

DWORD dwSignature; 
DWORD dwStrucVersion; 
DWORD dwFileVersionMS; 
DWORD dwFileVersionLS; 
DWORD dwProductVersionMS; 
DWORD dwProductVersionLS; 
DWORD dwFileFlagsMask; 
DWORD dwFileFlags; 
DWORD dwFileOS; 
DWORD dwFileType; 
DWORD dwFileSubtype; 
DWORD dwFileDateMS; 
DWORD dwFileDateLS; 
} VS_FIXEDFILEINFO; }
#line 163
extern "C" { extern DWORD __stdcall VerFindFileA(DWORD, LPCSTR, LPCSTR, LPCSTR, LPSTR, PUINT, LPSTR, PUINT); } 
#line 175
extern "C" { extern DWORD __stdcall VerFindFileW(DWORD, LPCWSTR, LPCWSTR, LPCWSTR, LPWSTR, PUINT, LPWSTR, PUINT); } 
#line 193 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winver.h"
extern "C" { extern DWORD __stdcall VerInstallFileA(DWORD, LPCSTR, LPCSTR, LPCSTR, LPCSTR, LPCSTR, LPSTR, PUINT); } 
#line 205
extern "C" { extern DWORD __stdcall VerInstallFileW(DWORD, LPCWSTR, LPCWSTR, LPCWSTR, LPCWSTR, LPCWSTR, LPWSTR, PUINT); } 
#line 224 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winver.h"
extern "C" { extern DWORD __stdcall GetFileVersionInfoSizeA(LPCSTR, LPDWORD); } 
#line 231
extern "C" { extern DWORD __stdcall GetFileVersionInfoSizeW(LPCWSTR, LPDWORD); } 
#line 244 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winver.h"
extern "C" { extern BOOL __stdcall GetFileVersionInfoA(LPCSTR, DWORD, DWORD, LPVOID); } 
#line 253
extern "C" { extern BOOL __stdcall GetFileVersionInfoW(LPCWSTR, DWORD, DWORD, LPVOID); } 
#line 265 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winver.h"
extern "C" { extern DWORD __stdcall GetFileVersionInfoSizeExA(DWORD, LPCSTR, LPDWORD); } 
extern "C" { extern DWORD __stdcall GetFileVersionInfoSizeExW(DWORD, LPCWSTR, LPDWORD); } 
#line 273 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winver.h"
extern "C" { extern BOOL __stdcall GetFileVersionInfoExA(DWORD, LPCSTR, DWORD, DWORD, LPVOID); } 




extern "C" { extern BOOL __stdcall GetFileVersionInfoExW(DWORD, LPCWSTR, DWORD, DWORD, LPVOID); } 
#line 291 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winver.h"
extern "C" { extern DWORD __stdcall VerLanguageNameA(DWORD, LPSTR, DWORD); } 
#line 298
extern "C" { extern DWORD __stdcall VerLanguageNameW(DWORD, LPWSTR, DWORD); } 
#line 311 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winver.h"
extern "C" { extern BOOL __stdcall VerQueryValueA(LPCVOID, LPCSTR, LPVOID *, PUINT); } 
#line 319
extern "C" { extern BOOL __stdcall VerQueryValueW(LPCVOID, LPCWSTR, LPVOID *, PUINT); } 
#line 65 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { typedef ACCESS_MASK REGSAM; }
#line 93
extern "C" { struct val_context { 
int valuelen; 
LPVOID value_context; 
LPVOID val_buff_ptr; 
}; }

extern "C" { typedef val_context *PVALCONTEXT; }
#line 106
extern "C" { typedef 
#line 101
struct pvalueA { 
LPSTR pv_valuename; 
int pv_valuelen; 
LPVOID pv_value_context; 
DWORD pv_type; 
} PVALUEA; }extern "C" { typedef pvalueA *PPVALUEA; }
#line 112
extern "C" { typedef 
#line 107
struct pvalueW { 
LPWSTR pv_valuename; 
int pv_valuelen; 
LPVOID pv_value_context; 
DWORD pv_type; 
} PVALUEW; }extern "C" { typedef pvalueW *PPVALUEW; }




extern "C" { typedef PVALUEA PVALUE; }
extern "C" { typedef PPVALUEA PPVALUE; }
#line 123 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { typedef DWORD __cdecl QUERYHANDLER(LPVOID, PVALCONTEXT, DWORD, LPVOID, DWORD *, DWORD); }


extern "C" { typedef QUERYHANDLER *PQUERYHANDLER; }
#line 135
extern "C" { typedef 
#line 128
struct provider_info { 
PQUERYHANDLER pi_R0_1val; 
PQUERYHANDLER pi_R0_allvals; 
PQUERYHANDLER pi_R3_1val; 
PQUERYHANDLER pi_R3_allvals; 
DWORD pi_flags; 
LPVOID pi_key_context; 
} REG_PROVIDER; }

extern "C" { typedef provider_info *PPROVIDER; }
#line 144
extern "C" { typedef 
#line 139
struct value_entA { 
LPSTR ve_valuename; 
DWORD ve_valuelen; 
DWORD_PTR ve_valueptr; 
DWORD ve_type; 
} VALENTA; }extern "C" { typedef value_entA *PVALENTA; }
#line 150
extern "C" { typedef 
#line 145
struct value_entW { 
LPWSTR ve_valuename; 
DWORD ve_valuelen; 
DWORD_PTR ve_valueptr; 
DWORD ve_type; 
} VALENTW; }extern "C" { typedef value_entW *PVALENTW; }




extern "C" { typedef VALENTA VALENT; }
extern "C" { typedef PVALENTA PVALENT; }
#line 175 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { typedef LONG LSTATUS; }




extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegCloseKey(HKEY); } 
#line 187
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegOverridePredefKey(HKEY, HKEY); } 
#line 195
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegOpenUserClassesRoot(HANDLE, DWORD, REGSAM, PHKEY); } 
#line 205
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegOpenCurrentUser(REGSAM, PHKEY); } 
#line 213
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegDisablePredefinedCache(); } 
#line 220
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegDisablePredefinedCacheEx(); } 
#line 227
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegConnectRegistryA(LPCSTR, HKEY, PHKEY); } 
#line 235
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegConnectRegistryW(LPCWSTR, HKEY, PHKEY); } 
#line 249 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegConnectRegistryExA(LPCSTR, HKEY, ULONG, PHKEY); } 
#line 258
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegConnectRegistryExW(LPCWSTR, HKEY, ULONG, PHKEY); } 
#line 273 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegCreateKeyA(HKEY, LPCSTR, PHKEY); } 
#line 281
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegCreateKeyW(HKEY, LPCWSTR, PHKEY); } 
#line 295 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegCreateKeyExA(HKEY, LPCSTR, DWORD, LPSTR, DWORD, REGSAM, const LPSECURITY_ATTRIBUTES, PHKEY, LPDWORD); } 
#line 309
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegCreateKeyExW(HKEY, LPCWSTR, DWORD, LPWSTR, DWORD, REGSAM, const LPSECURITY_ATTRIBUTES, PHKEY, LPDWORD); } 
#line 329 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegCreateKeyTransactedA(HKEY, LPCSTR, DWORD, LPSTR, DWORD, REGSAM, const LPSECURITY_ATTRIBUTES, PHKEY, LPDWORD, HANDLE, PVOID); } 
#line 345
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegCreateKeyTransactedW(HKEY, LPCWSTR, DWORD, LPWSTR, DWORD, REGSAM, const LPSECURITY_ATTRIBUTES, PHKEY, LPDWORD, HANDLE, PVOID); } 
#line 367 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegDeleteKeyA(HKEY, LPCSTR); } 
#line 374
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegDeleteKeyW(HKEY, LPCWSTR); } 
#line 387 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegDeleteKeyExA(HKEY, LPCSTR, REGSAM, DWORD); } 
#line 396
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegDeleteKeyExW(HKEY, LPCWSTR, REGSAM, DWORD); } 
#line 411 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegDeleteKeyTransactedA(HKEY, LPCSTR, REGSAM, DWORD, HANDLE, PVOID); } 
#line 422
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegDeleteKeyTransactedW(HKEY, LPCWSTR, REGSAM, DWORD, HANDLE, PVOID); } 
#line 439 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) LONG __stdcall RegDisableReflectionKey(HKEY); } 
#line 446
extern "C" { extern __declspec( dllimport ) LONG __stdcall RegEnableReflectionKey(HKEY); } 
#line 453
extern "C" { extern __declspec( dllimport ) LONG __stdcall RegQueryReflectionKey(HKEY, BOOL *); } 
#line 461
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegDeleteValueA(HKEY, LPCSTR); } 
#line 468
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegDeleteValueW(HKEY, LPCWSTR); } 
#line 481 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegEnumKeyA(HKEY, DWORD, LPSTR, DWORD); } 
#line 490
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegEnumKeyW(HKEY, DWORD, LPWSTR, DWORD); } 
#line 505 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegEnumKeyExA(HKEY, DWORD, LPSTR, LPDWORD, LPDWORD, LPSTR, LPDWORD, PFILETIME); } 
#line 518
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegEnumKeyExW(HKEY, DWORD, LPWSTR, LPDWORD, LPDWORD, LPWSTR, LPDWORD, PFILETIME); } 
#line 537 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegEnumValueA(HKEY, DWORD, LPSTR, LPDWORD, LPDWORD, LPDWORD, LPBYTE, LPDWORD); } 
#line 550
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegEnumValueW(HKEY, DWORD, LPWSTR, LPDWORD, LPDWORD, LPDWORD, LPBYTE, LPDWORD); } 
#line 569 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegFlushKey(HKEY); } 
#line 576
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegGetKeySecurity(HKEY, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR, LPDWORD); } 
#line 586
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegLoadKeyA(HKEY, LPCSTR, LPCSTR); } 
#line 594
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegLoadKeyW(HKEY, LPCWSTR, LPCWSTR); } 
#line 608 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegNotifyChangeKeyValue(HKEY, BOOL, DWORD, HANDLE, BOOL); } 
#line 619
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegOpenKeyA(HKEY, LPCSTR, PHKEY); } 
#line 627
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegOpenKeyW(HKEY, LPCWSTR, PHKEY); } 
#line 641 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegOpenKeyExA(HKEY, LPCSTR, DWORD, REGSAM, PHKEY); } 
#line 651
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegOpenKeyExW(HKEY, LPCWSTR, DWORD, REGSAM, PHKEY); } 
#line 667 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegOpenKeyTransactedA(HKEY, LPCSTR, DWORD, REGSAM, PHKEY, HANDLE, PVOID); } 
#line 679
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegOpenKeyTransactedW(HKEY, LPCWSTR, DWORD, REGSAM, PHKEY, HANDLE, PVOID); } 
#line 697 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegQueryInfoKeyA(HKEY, LPSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD, LPDWORD, LPDWORD, LPDWORD, LPDWORD, LPDWORD, PFILETIME); } 
#line 714
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegQueryInfoKeyW(HKEY, LPWSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD, LPDWORD, LPDWORD, LPDWORD, LPDWORD, LPDWORD, PFILETIME); } 
#line 737 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegQueryValueA(HKEY, LPCSTR, LPSTR, PLONG); } 
#line 746
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegQueryValueW(HKEY, LPCWSTR, LPWSTR, PLONG); } 
#line 763 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegQueryMultipleValuesA(HKEY, PVALENTA, DWORD, LPSTR, LPDWORD); } 
#line 773
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegQueryMultipleValuesW(HKEY, PVALENTW, DWORD, LPWSTR, LPDWORD); } 
#line 790 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegQueryValueExA(HKEY, LPCSTR, LPDWORD, LPDWORD, LPBYTE, LPDWORD); } 
#line 801
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegQueryValueExW(HKEY, LPCWSTR, LPDWORD, LPDWORD, LPBYTE, LPDWORD); } 
#line 818 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegReplaceKeyA(HKEY, LPCSTR, LPCSTR, LPCSTR); } 
#line 827
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegReplaceKeyW(HKEY, LPCWSTR, LPCWSTR, LPCWSTR); } 
#line 842 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegRestoreKeyA(HKEY, LPCSTR, DWORD); } 
#line 850
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegRestoreKeyW(HKEY, LPCWSTR, DWORD); } 
#line 864 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegSaveKeyA(HKEY, LPCSTR, const LPSECURITY_ATTRIBUTES); } 
#line 872
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegSaveKeyW(HKEY, LPCWSTR, const LPSECURITY_ATTRIBUTES); } 
#line 886 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegSetKeySecurity(HKEY, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR); } 
#line 895
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegSetValueA(HKEY, LPCSTR, DWORD, LPCSTR, DWORD); } 
#line 905
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegSetValueW(HKEY, LPCWSTR, DWORD, LPCWSTR, DWORD); } 
#line 922 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegSetValueExA(HKEY, LPCSTR, DWORD, DWORD, const BYTE *, DWORD); } 
#line 933
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegSetValueExW(HKEY, LPCWSTR, DWORD, DWORD, const BYTE *, DWORD); } 
#line 950 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegUnLoadKeyA(HKEY, LPCSTR); } 
#line 957
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegUnLoadKeyW(HKEY, LPCWSTR); } 
#line 975 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegDeleteKeyValueA(HKEY, LPCSTR, LPCSTR); } 
#line 983
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegDeleteKeyValueW(HKEY, LPCWSTR, LPCWSTR); } 
#line 997 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegSetKeyValueA(HKEY, LPCSTR, LPCSTR, DWORD, LPCVOID, DWORD); } 
#line 1008
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegSetKeyValueW(HKEY, LPCWSTR, LPCWSTR, DWORD, LPCVOID, DWORD); } 
#line 1025 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegDeleteTreeA(HKEY, LPCSTR); } 
#line 1032
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegDeleteTreeW(HKEY, LPCWSTR); } 
#line 1045 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegCopyTreeA(HKEY, LPCSTR, HKEY); } 
#line 1053
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegCopyTreeW(HKEY, LPCWSTR, HKEY); } 
#line 1067 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegGetValueA(HKEY, LPCSTR, LPCSTR, DWORD, LPDWORD, PVOID, LPDWORD); } 
#line 1079
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegGetValueW(HKEY, LPCWSTR, LPCWSTR, DWORD, LPDWORD, PVOID, LPDWORD); } 
#line 1097 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegLoadMUIStringA(HKEY, LPCSTR, LPSTR, DWORD, LPDWORD, DWORD, LPCSTR); } 
#line 1109
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegLoadMUIStringW(HKEY, LPCWSTR, LPWSTR, DWORD, LPDWORD, DWORD, LPCWSTR); } 
#line 1128 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegLoadAppKeyA(LPCSTR, PHKEY, REGSAM, DWORD, DWORD); } 
#line 1138
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegLoadAppKeyW(LPCWSTR, PHKEY, REGSAM, DWORD, DWORD); } 
#line 1160 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall InitiateSystemShutdownA(LPSTR, LPSTR, DWORD, BOOL, BOOL); } 
#line 1170
extern "C" { extern __declspec( dllimport ) BOOL __stdcall InitiateSystemShutdownW(LPWSTR, LPWSTR, DWORD, BOOL, BOOL); } 
#line 1187 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AbortSystemShutdownA(LPSTR); } 
#line 1193
extern "C" { extern __declspec( dllimport ) BOOL __stdcall AbortSystemShutdownW(LPWSTR); } 
#line 1228 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall InitiateSystemShutdownExA(LPSTR, LPSTR, DWORD, BOOL, BOOL, DWORD); } 
#line 1239
extern "C" { extern __declspec( dllimport ) BOOL __stdcall InitiateSystemShutdownExW(LPWSTR, LPWSTR, DWORD, BOOL, BOOL, DWORD); } 
#line 1270 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall InitiateShutdownA(LPSTR, LPSTR, DWORD, DWORD, DWORD); } 
#line 1280
extern "C" { extern __declspec( dllimport ) DWORD __stdcall InitiateShutdownW(LPWSTR, LPWSTR, DWORD, DWORD, DWORD); } 
#line 1296 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegSaveKeyExA(HKEY, LPCSTR, const LPSECURITY_ATTRIBUTES, DWORD); } 
#line 1305
extern "C" { extern __declspec( dllimport ) LSTATUS __stdcall RegSaveKeyExW(HKEY, LPCWSTR, const LPSECURITY_ATTRIBUTES, DWORD); } 
#line 1320 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winreg.h"
extern "C" { extern __declspec( dllimport ) LONG __stdcall Wow64Win32ApiEntry(DWORD, DWORD, DWORD); } 
#line 163 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnetwk.h"
extern "C" { typedef 
#line 154
struct _NETRESOURCEA { 
DWORD dwScope; 
DWORD dwType; 
DWORD dwDisplayType; 
DWORD dwUsage; 
LPSTR lpLocalName; 
LPSTR lpRemoteName; 
LPSTR lpComment; 
LPSTR lpProvider; 
} NETRESOURCEA; }extern "C" { typedef _NETRESOURCEA *LPNETRESOURCEA; }
#line 173
extern "C" { typedef 
#line 164
struct _NETRESOURCEW { 
DWORD dwScope; 
DWORD dwType; 
DWORD dwDisplayType; 
DWORD dwUsage; 
LPWSTR lpLocalName; 
LPWSTR lpRemoteName; 
LPWSTR lpComment; 
LPWSTR lpProvider; 
} NETRESOURCEW; }extern "C" { typedef _NETRESOURCEW *LPNETRESOURCEW; }




extern "C" { typedef NETRESOURCEA NETRESOURCE; }
extern "C" { typedef LPNETRESOURCEA LPNETRESOURCE; }
#line 212 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnetwk.h"
extern "C" { extern DWORD __stdcall WNetAddConnectionA(LPCSTR, LPCSTR, LPCSTR); } 
#line 218
extern "C" { extern DWORD __stdcall WNetAddConnectionW(LPCWSTR, LPCWSTR, LPCWSTR); } 
#line 230 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnetwk.h"
extern "C" { extern DWORD __stdcall WNetAddConnection2A(LPNETRESOURCEA, LPCSTR, LPCSTR, DWORD); } 
#line 237
extern "C" { extern DWORD __stdcall WNetAddConnection2W(LPNETRESOURCEW, LPCWSTR, LPCWSTR, DWORD); } 
#line 250 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnetwk.h"
extern "C" { extern DWORD __stdcall WNetAddConnection3A(HWND, LPNETRESOURCEA, LPCSTR, LPCSTR, DWORD); } 
#line 258
extern "C" { extern DWORD __stdcall WNetAddConnection3W(HWND, LPNETRESOURCEW, LPCWSTR, LPCWSTR, DWORD); } 
#line 272 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnetwk.h"
extern "C" { extern DWORD __stdcall WNetCancelConnectionA(LPCSTR, BOOL); } 




extern "C" { extern DWORD __stdcall WNetCancelConnectionW(LPCWSTR, BOOL); } 
#line 288 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnetwk.h"
extern "C" { extern DWORD __stdcall WNetCancelConnection2A(LPCSTR, DWORD, BOOL); } 
#line 294
extern "C" { extern DWORD __stdcall WNetCancelConnection2W(LPCWSTR, DWORD, BOOL); } 
#line 306 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnetwk.h"
extern "C" { extern DWORD __stdcall WNetGetConnectionA(LPCSTR, LPSTR, LPDWORD); } 
#line 312
extern "C" { extern DWORD __stdcall WNetGetConnectionW(LPCWSTR, LPWSTR, LPDWORD); } 
#line 327 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnetwk.h"
extern "C" { extern DWORD __stdcall WNetRestoreSingleConnectionW(HWND, LPCWSTR, BOOL); } 
#line 346 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnetwk.h"
extern "C" { extern DWORD __stdcall WNetUseConnectionA(HWND, LPNETRESOURCEA, LPCSTR, LPCSTR, DWORD, LPSTR, LPDWORD, LPDWORD); } 
#line 357
extern "C" { extern DWORD __stdcall WNetUseConnectionW(HWND, LPNETRESOURCEW, LPCWSTR, LPCWSTR, DWORD, LPWSTR, LPDWORD, LPDWORD); } 
#line 380 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnetwk.h"
extern "C" { extern DWORD __stdcall WNetConnectionDialog(HWND, DWORD); } 
#line 386
extern "C" { extern DWORD __stdcall WNetDisconnectDialog(HWND, DWORD); } 
#line 398
extern "C" { typedef 
#line 392
struct _CONNECTDLGSTRUCTA { 
DWORD cbStructure; 
HWND hwndOwner; 
LPNETRESOURCEA lpConnRes; 
DWORD dwFlags; 
DWORD dwDevNum; 
} CONNECTDLGSTRUCTA; }extern "C" { typedef _CONNECTDLGSTRUCTA *LPCONNECTDLGSTRUCTA; }
#line 405
extern "C" { typedef 
#line 399
struct _CONNECTDLGSTRUCTW { 
DWORD cbStructure; 
HWND hwndOwner; 
LPNETRESOURCEW lpConnRes; 
DWORD dwFlags; 
DWORD dwDevNum; 
} CONNECTDLGSTRUCTW; }extern "C" { typedef _CONNECTDLGSTRUCTW *LPCONNECTDLGSTRUCTW; }




extern "C" { typedef CONNECTDLGSTRUCTA CONNECTDLGSTRUCT; }
extern "C" { typedef LPCONNECTDLGSTRUCTA LPCONNECTDLGSTRUCT; }
#line 428 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnetwk.h"
extern "C" { extern DWORD __stdcall WNetConnectionDialog1A(LPCONNECTDLGSTRUCTA); } 



extern "C" { extern DWORD __stdcall WNetConnectionDialog1W(LPCONNECTDLGSTRUCTW); } 
#line 447 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnetwk.h"
extern "C" { typedef 
#line 441
struct _DISCDLGSTRUCTA { 
DWORD cbStructure; 
HWND hwndOwner; 
LPSTR lpLocalName; 
LPSTR lpRemoteName; 
DWORD dwFlags; 
} DISCDLGSTRUCTA; }extern "C" { typedef _DISCDLGSTRUCTA *LPDISCDLGSTRUCTA; }
#line 454
extern "C" { typedef 
#line 448
struct _DISCDLGSTRUCTW { 
DWORD cbStructure; 
HWND hwndOwner; 
LPWSTR lpLocalName; 
LPWSTR lpRemoteName; 
DWORD dwFlags; 
} DISCDLGSTRUCTW; }extern "C" { typedef _DISCDLGSTRUCTW *LPDISCDLGSTRUCTW; }




extern "C" { typedef DISCDLGSTRUCTA DISCDLGSTRUCT; }
extern "C" { typedef LPDISCDLGSTRUCTA LPDISCDLGSTRUCT; }
#line 467 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnetwk.h"
extern "C" { extern DWORD __stdcall WNetDisconnectDialog1A(LPDISCDLGSTRUCTA); } 



extern "C" { extern DWORD __stdcall WNetDisconnectDialog1W(LPDISCDLGSTRUCTW); } 
#line 486 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnetwk.h"
extern "C" { extern DWORD __stdcall WNetOpenEnumA(DWORD, DWORD, DWORD, LPNETRESOURCEA, LPHANDLE); } 
#line 494
extern "C" { extern DWORD __stdcall WNetOpenEnumW(DWORD, DWORD, DWORD, LPNETRESOURCEW, LPHANDLE); } 
#line 508 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnetwk.h"
extern "C" { extern DWORD __stdcall WNetEnumResourceA(HANDLE, LPDWORD, LPVOID, LPDWORD); } 
#line 515
extern "C" { extern DWORD __stdcall WNetEnumResourceW(HANDLE, LPDWORD, LPVOID, LPDWORD); } 
#line 528 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnetwk.h"
extern "C" { extern DWORD __stdcall WNetCloseEnum(HANDLE); } 
#line 534
extern "C" { extern DWORD __stdcall WNetGetResourceParentA(LPNETRESOURCEA, LPVOID, LPDWORD); } 
#line 540
extern "C" { extern DWORD __stdcall WNetGetResourceParentW(LPNETRESOURCEW, LPVOID, LPDWORD); } 
#line 552 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnetwk.h"
extern "C" { extern DWORD __stdcall WNetGetResourceInformationA(LPNETRESOURCEA, LPVOID, LPDWORD, LPSTR *); } 
#line 559
extern "C" { extern DWORD __stdcall WNetGetResourceInformationW(LPNETRESOURCEW, LPVOID, LPDWORD, LPWSTR *); } 
#line 581 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnetwk.h"
extern "C" { typedef 
#line 579
struct _UNIVERSAL_NAME_INFOA { 
LPSTR lpUniversalName; 
} UNIVERSAL_NAME_INFOA; }extern "C" { typedef _UNIVERSAL_NAME_INFOA *LPUNIVERSAL_NAME_INFOA; }


extern "C" { typedef 
#line 582
struct _UNIVERSAL_NAME_INFOW { 
LPWSTR lpUniversalName; 
} UNIVERSAL_NAME_INFOW; }extern "C" { typedef _UNIVERSAL_NAME_INFOW *LPUNIVERSAL_NAME_INFOW; }




extern "C" { typedef UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFO; }
extern "C" { typedef LPUNIVERSAL_NAME_INFOA LPUNIVERSAL_NAME_INFO; }
#line 597 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnetwk.h"
extern "C" { typedef 
#line 593
struct _REMOTE_NAME_INFOA { 
LPSTR lpUniversalName; 
LPSTR lpConnectionName; 
LPSTR lpRemainingPath; 
} REMOTE_NAME_INFOA; }extern "C" { typedef _REMOTE_NAME_INFOA *LPREMOTE_NAME_INFOA; }




extern "C" { typedef 
#line 598
struct _REMOTE_NAME_INFOW { 
LPWSTR lpUniversalName; 
LPWSTR lpConnectionName; 
LPWSTR lpRemainingPath; 
} REMOTE_NAME_INFOW; }extern "C" { typedef _REMOTE_NAME_INFOW *LPREMOTE_NAME_INFOW; }




extern "C" { typedef REMOTE_NAME_INFOA REMOTE_NAME_INFO; }
extern "C" { typedef LPREMOTE_NAME_INFOA LPREMOTE_NAME_INFO; }
#line 612 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnetwk.h"
extern "C" { extern DWORD __stdcall WNetGetUniversalNameA(LPCSTR, DWORD, LPVOID, LPDWORD); } 
#line 619
extern "C" { extern DWORD __stdcall WNetGetUniversalNameW(LPCWSTR, DWORD, LPVOID, LPDWORD); } 
#line 636 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnetwk.h"
extern "C" { extern DWORD __stdcall WNetGetUserA(LPCSTR, LPSTR, LPDWORD); } 
#line 642
extern "C" { extern DWORD __stdcall WNetGetUserW(LPCWSTR, LPWSTR, LPDWORD); } 
#line 669 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnetwk.h"
extern "C" { extern DWORD __stdcall WNetGetProviderNameA(DWORD, LPSTR, LPDWORD); } 
#line 675
extern "C" { extern DWORD __stdcall WNetGetProviderNameW(DWORD, LPWSTR, LPDWORD); } 
#line 695 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnetwk.h"
extern "C" { typedef 
#line 686
struct _NETINFOSTRUCT { 
DWORD cbStructure; 
DWORD dwProviderVersion; 
DWORD dwStatus; 
DWORD dwCharacteristics; 
ULONG_PTR dwHandle; 
WORD wNetType; 
DWORD dwPrinters; 
DWORD dwDrives; 
} NETINFOSTRUCT; }extern "C" { typedef _NETINFOSTRUCT *LPNETINFOSTRUCT; }
#line 702
extern "C" { extern DWORD __stdcall WNetGetNetworkInformationA(LPCSTR, LPNETINFOSTRUCT); } 




extern "C" { extern DWORD __stdcall WNetGetNetworkInformationW(LPCWSTR, LPNETINFOSTRUCT); } 
#line 724 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnetwk.h"
extern "C" { extern DWORD __stdcall WNetGetLastErrorA(LPDWORD, LPSTR, DWORD, LPSTR, DWORD); } 
#line 732
extern "C" { extern DWORD __stdcall WNetGetLastErrorW(LPDWORD, LPWSTR, DWORD, LPWSTR, DWORD); } 
#line 820 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winnetwk.h"
extern "C" { typedef 
#line 814
struct _NETCONNECTINFOSTRUCT { 
DWORD cbStructure; 
DWORD dwFlags; 
DWORD dwSpeed; 
DWORD dwDelay; 
DWORD dwOptDataSize; 
} NETCONNECTINFOSTRUCT; }extern "C" { typedef _NETCONNECTINFOSTRUCT *LPNETCONNECTINFOSTRUCT; }
#line 828
extern "C" { extern DWORD __stdcall MultinetGetConnectionPerformanceA(LPNETRESOURCEA, LPNETCONNECTINFOSTRUCT); } 




extern "C" { extern DWORD __stdcall MultinetGetConnectionPerformanceW(LPNETRESOURCEW, LPNETCONNECTINFOSTRUCT); } 
#line 59 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\dde.h"
extern "C" { typedef 
#line 50 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\dde.h"
struct DDEACK { 

unsigned short bAppReturnCode:8; 
unsigned short reserved:6; 
unsigned short fBusy:1; 
unsigned short fAck:1; 
#line 59 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\dde.h"
} DDEACK; }
#line 78 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\dde.h"
extern "C" { typedef 
#line 69 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\dde.h"
struct DDEADVISE { 

unsigned short reserved:14; 
unsigned short fDeferUpd:1; 
unsigned short fAckReq:1; 
#line 77 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\dde.h"
short cfFormat; 
} DDEADVISE; }
#line 102 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\dde.h"
extern "C" { typedef 
#line 90 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\dde.h"
struct DDEDATA { 

unsigned short unused:12; 
unsigned short fResponse:1; 
unsigned short fRelease:1; 
unsigned short reserved:1; 
unsigned short fAckReq:1; 
#line 100 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\dde.h"
short cfFormat; 
BYTE Value[1]; 
} DDEDATA; }
#line 127 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\dde.h"
extern "C" { typedef 
#line 114 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\dde.h"
struct DDEPOKE { 

unsigned short unused:13; 

unsigned short fRelease:1; 
unsigned short fReserved:2; 
#line 123 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\dde.h"
short cfFormat; 
BYTE Value[1]; 


} DDEPOKE; }
#line 149 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\dde.h"
extern "C" { typedef 
#line 139 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\dde.h"
struct DDELN { 

unsigned short unused:13; 
unsigned short fRelease:1; 
unsigned short fDeferUpd:1; 
unsigned short fAckReq:1; 
#line 148 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\dde.h"
short cfFormat; 
} DDELN; }
#line 163 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\dde.h"
extern "C" { typedef 
#line 151 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\dde.h"
struct DDEUP { 

unsigned short unused:12; 
unsigned short fAck:1; 
unsigned short fRelease:1; 
unsigned short fReserved:1; 
unsigned short fAckReq:1; 
#line 161 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\dde.h"
short cfFormat; 
BYTE rgb[1]; 
} DDEUP; }
#line 172
extern "C" { extern BOOL __stdcall DdeSetQualityOfService(HWND, const SECURITY_QUALITY_OF_SERVICE *, PSECURITY_QUALITY_OF_SERVICE); } 
#line 179
extern "C" { extern BOOL __stdcall ImpersonateDdeClientWindow(HWND, HWND); } 
#line 186
extern "C" { extern LPARAM __stdcall PackDDElParam(UINT, UINT_PTR, UINT_PTR); } 
extern "C" { extern BOOL __stdcall UnpackDDElParam(UINT, LPARAM, PUINT_PTR, PUINT_PTR); } 
extern "C" { extern BOOL __stdcall FreeDDElParam(UINT, LPARAM); } 
extern "C" { extern LPARAM __stdcall ReuseDDElParam(LPARAM, UINT, UINT, UINT_PTR, UINT_PTR); } 
#line 22 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\ddeml.h"
extern "C" { struct HCONVLIST__ { int unused; }; }extern "C" { typedef HCONVLIST__ *HCONVLIST; }
extern "C" { struct HCONV__ { int unused; }; }extern "C" { typedef HCONV__ *HCONV; }
extern "C" { struct HSZ__ { int unused; }; }extern "C" { typedef HSZ__ *HSZ; }
extern "C" { struct HDDEDATA__ { int unused; }; }extern "C" { typedef HDDEDATA__ *HDDEDATA; }
#line 33
extern "C" { typedef 
#line 30
struct tagHSZPAIR { 
HSZ hszSvc; 
HSZ hszTopic; 
} HSZPAIR; }extern "C" { typedef tagHSZPAIR *PHSZPAIR; }
#line 46
extern "C" { typedef 
#line 38
struct tagCONVCONTEXT { 
UINT cb; 
UINT wFlags; 
UINT wCountryID; 
int iCodePage; 
DWORD dwLangID; 
DWORD dwSecurity; 
SECURITY_QUALITY_OF_SERVICE qos; 
} CONVCONTEXT; }extern "C" { typedef tagCONVCONTEXT *PCONVCONTEXT; }
#line 68
extern "C" { typedef 
#line 51
struct tagCONVINFO { 
DWORD cb; 
DWORD_PTR hUser; 
HCONV hConvPartner; 
HSZ hszSvcPartner; 
HSZ hszServiceReq; 
HSZ hszTopic; 
HSZ hszItem; 
UINT wFmt; 
UINT wType; 
UINT wStatus; 
UINT wConvst; 
UINT wLastError; 
HCONVLIST hConvList; 
CONVCONTEXT ConvCtxt; 
HWND hwnd; 
HWND hwndPartner; 
} CONVINFO; }extern "C" { typedef tagCONVINFO *PCONVINFO; }
#line 199 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\ddeml.h"
extern "C" { typedef HDDEDATA __stdcall FNCALLBACK(UINT, UINT, HCONV, HSZ, HSZ, HDDEDATA, ULONG_PTR, ULONG_PTR); }

extern "C" { typedef HDDEDATA (__stdcall *PFNCALLBACK)(UINT, UINT, HCONV, HSZ, HSZ, HDDEDATA, ULONG_PTR, ULONG_PTR); }
#line 210
extern "C" { extern UINT __stdcall DdeInitializeA(LPDWORD, PFNCALLBACK, DWORD, DWORD); } 
#line 217
extern "C" { extern UINT __stdcall DdeInitializeW(LPDWORD, PFNCALLBACK, DWORD, DWORD); } 
#line 261 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\ddeml.h"
extern "C" { extern BOOL __stdcall DdeUninitialize(DWORD); } 
#line 269
extern "C" { extern HCONVLIST __stdcall DdeConnectList(DWORD, HSZ, HSZ, HCONVLIST, PCONVCONTEXT); } 
#line 278
extern "C" { extern HCONV __stdcall DdeQueryNextServer(HCONVLIST, HCONV); } 




extern "C" { extern BOOL __stdcall DdeDisconnectList(HCONVLIST); } 
#line 291
extern "C" { extern HCONV __stdcall DdeConnect(DWORD, HSZ, HSZ, PCONVCONTEXT); } 
#line 299
extern "C" { extern BOOL __stdcall DdeDisconnect(HCONV); } 




extern "C" { extern HCONV __stdcall DdeReconnect(HCONV); } 




extern "C" { extern UINT __stdcall DdeQueryConvInfo(HCONV, DWORD, PCONVINFO); } 
#line 316
extern "C" { extern BOOL __stdcall DdeSetUserHandle(HCONV, DWORD, DWORD_PTR); } 
#line 323
extern "C" { extern BOOL __stdcall DdeAbandonTransaction(DWORD, HCONV, DWORD); } 
#line 334
extern "C" { extern BOOL __stdcall DdePostAdvise(DWORD, HSZ, HSZ); } 
#line 341
extern "C" { extern BOOL __stdcall DdeEnableCallback(DWORD, HCONV, UINT); } 
#line 348
extern "C" { extern BOOL __stdcall DdeImpersonateClient(HCONV); } 
#line 359
extern "C" { extern HDDEDATA __stdcall DdeNameService(DWORD, HSZ, HSZ, UINT); } 
#line 375
extern "C" { extern HDDEDATA __stdcall DdeClientTransaction(LPBYTE, DWORD, HCONV, HSZ, UINT, UINT, DWORD, LPDWORD); } 
#line 392
extern "C" { extern HDDEDATA __stdcall DdeCreateDataHandle(DWORD, LPBYTE, DWORD, DWORD, HSZ, UINT, UINT); } 
#line 403
extern "C" { extern HDDEDATA __stdcall DdeAddData(HDDEDATA, LPBYTE, DWORD, DWORD); } 
#line 411
extern "C" { extern DWORD __stdcall DdeGetData(HDDEDATA, LPBYTE, DWORD, DWORD); } 
#line 419
extern "C" { extern LPBYTE __stdcall DdeAccessData(HDDEDATA, LPDWORD); } 
#line 425
extern "C" { extern BOOL __stdcall DdeUnaccessData(HDDEDATA); } 




extern "C" { extern BOOL __stdcall DdeFreeDataHandle(HDDEDATA); } 
#line 438
extern "C" { extern UINT __stdcall DdeGetLastError(DWORD); } 
#line 469
extern "C" { extern HSZ __stdcall DdeCreateStringHandleA(DWORD, LPCSTR, int); } 
#line 475
extern "C" { extern HSZ __stdcall DdeCreateStringHandleW(DWORD, LPCWSTR, int); } 
#line 487 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\ddeml.h"
extern "C" { extern DWORD __stdcall DdeQueryStringA(DWORD, HSZ, LPSTR, DWORD, int); } 
#line 495
extern "C" { extern DWORD __stdcall DdeQueryStringW(DWORD, HSZ, LPWSTR, DWORD, int); } 
#line 509 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\ddeml.h"
extern "C" { extern BOOL __stdcall DdeFreeStringHandle(DWORD, HSZ); } 
#line 515
extern "C" { extern BOOL __stdcall DdeKeepStringHandle(DWORD, HSZ); } 
#line 521
extern "C" { extern int __stdcall DdeCmpStringHandles(HSZ, HSZ); } 
#line 535
extern "C" { typedef 
#line 530
struct tagDDEML_MSG_HOOK_DATA { 
UINT_PTR uiLo; 
UINT_PTR uiHi; 
DWORD cbData; 
DWORD Data[8]; 
} DDEML_MSG_HOOK_DATA; }extern "C" { typedef tagDDEML_MSG_HOOK_DATA *PDDEML_MSG_HOOK_DATA; }
#line 547
extern "C" { typedef 
#line 538
struct tagMONMSGSTRUCT { 
UINT cb; 
HWND hwndTo; 
DWORD dwTime; 
HANDLE hTask; 
UINT wMsg; 
WPARAM wParam; 
LPARAM lParam; 
DDEML_MSG_HOOK_DATA dmhd; 
} MONMSGSTRUCT; }extern "C" { typedef tagMONMSGSTRUCT *PMONMSGSTRUCT; }
#line 565
extern "C" { typedef 
#line 549
struct tagMONCBSTRUCT { 
UINT cb; 
DWORD dwTime; 
HANDLE hTask; 
DWORD dwRet; 
UINT wType; 
UINT wFmt; 
HCONV hConv; 
HSZ hsz1; 
HSZ hsz2; 
HDDEDATA hData; 
ULONG_PTR dwData1; 
ULONG_PTR dwData2; 
CONVCONTEXT cc; 
DWORD cbData; 
DWORD Data[8]; 
} MONCBSTRUCT; }extern "C" { typedef tagMONCBSTRUCT *PMONCBSTRUCT; }
#line 574
extern "C" { typedef 
#line 567
struct tagMONHSZSTRUCTA { 
UINT cb; 
BOOL fsAction; 
DWORD dwTime; 
HSZ hsz; 
HANDLE hTask; 
CHAR str[1]; 
} MONHSZSTRUCTA; }extern "C" { typedef tagMONHSZSTRUCTA *PMONHSZSTRUCTA; }
#line 582
extern "C" { typedef 
#line 575
struct tagMONHSZSTRUCTW { 
UINT cb; 
BOOL fsAction; 
DWORD dwTime; 
HSZ hsz; 
HANDLE hTask; 
WCHAR str[1]; 
} MONHSZSTRUCTW; }extern "C" { typedef tagMONHSZSTRUCTW *PMONHSZSTRUCTW; }




extern "C" { typedef MONHSZSTRUCTA MONHSZSTRUCT; }
extern "C" { typedef PMONHSZSTRUCTA PMONHSZSTRUCT; }
#line 601 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\ddeml.h"
extern "C" { typedef 
#line 596
struct tagMONERRSTRUCT { 
UINT cb; 
UINT wLastError; 
DWORD dwTime; 
HANDLE hTask; 
} MONERRSTRUCT; }extern "C" { typedef tagMONERRSTRUCT *PMONERRSTRUCT; }
#line 616
extern "C" { typedef 
#line 603
struct tagMONLINKSTRUCT { 
UINT cb; 
DWORD dwTime; 
HANDLE hTask; 
BOOL fEstablished; 
BOOL fNoData; 
HSZ hszSvc; 
HSZ hszTopic; 
HSZ hszItem; 
UINT wFmt; 
BOOL fServer; 
HCONV hConvServer; 
HCONV hConvClient; 
} MONLINKSTRUCT; }extern "C" { typedef tagMONLINKSTRUCT *PMONLINKSTRUCT; }
#line 627
extern "C" { typedef 
#line 618
struct tagMONCONVSTRUCT { 
UINT cb; 
BOOL fConnect; 
DWORD dwTime; 
HANDLE hTask; 
HSZ hszSvc; 
HSZ hszTopic; 
HCONV hConvClient; 
HCONV hConvServer; 
} MONCONVSTRUCT; }extern "C" { typedef tagMONCONVSTRUCT *PMONCONVSTRUCT; }
#line 271 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\dlgs.h"
typedef 
#line 265
struct tagCRGB { 

BYTE bRed; 
BYTE bGreen; 
BYTE bBlue; 
BYTE bExtra; 
} CRGB; 
#line 47 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\lzexpand.h"
extern "C" { extern INT __stdcall LZStart(); } 
#line 53
extern "C" { extern void __stdcall LZDone(); } 
#line 59
extern "C" { extern LONG __stdcall CopyLZFile(INT, INT); } 
#line 66
extern "C" { extern LONG __stdcall LZCopy(INT, INT); } 
#line 73
extern "C" { extern INT __stdcall LZInit(INT); } 
#line 79
extern "C" { extern INT __stdcall GetExpandedNameA(LPSTR, LPSTR); } 
#line 85
extern "C" { extern INT __stdcall GetExpandedNameW(LPWSTR, LPWSTR); } 
#line 97 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\lzexpand.h"
extern "C" { extern INT __stdcall LZOpenFileA(LPSTR, LPOFSTRUCT, WORD); } 
#line 104
extern "C" { extern INT __stdcall LZOpenFileW(LPWSTR, LPOFSTRUCT, WORD); } 
#line 117 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\lzexpand.h"
extern "C" { extern LONG __stdcall LZSeek(INT, LONG, INT); } 
#line 125
extern "C" { extern INT __stdcall LZRead(INT, LPSTR, INT); } 
#line 133
extern "C" { extern void __stdcall LZClose(INT); } 
#line 24 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\pshpack1.h"
#pragma warning(disable:4103)

#pragma pack ( push, 1 )
#line 103 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef UINT MMVERSION; }
#line 107 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef UINT MMRESULT; }



extern "C" { typedef UINT *LPUINT; }
#line 146 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 116 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
struct mmtime_tag { 

UINT wType; 

union { 
DWORD ms; 
DWORD sample; 
DWORD cb; 
DWORD ticks; 



struct { 
BYTE hour; 
BYTE min; 
BYTE sec; 
BYTE frame; 
BYTE fps; 
BYTE dummy; 

BYTE pad[2]; 
#line 138 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
} smpte; 



struct { 
DWORD songptrpos; 
} midi; 
} u; 
} MMTIME; }extern "C" { typedef mmtime_tag *PMMTIME; }extern "C" { typedef mmtime_tag *NPMMTIME; }extern "C" { typedef mmtime_tag *LPMMTIME; }
#line 286 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { struct HDRVR__ { int unused; }; }extern "C" { typedef HDRVR__ *HDRVR; }
#line 303 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 298
struct DRVCONFIGINFOEX { 
DWORD dwDCISize; 
LPCWSTR lpszDCISectionName; 
LPCWSTR lpszDCIAliasName; 
DWORD dnDevNode; 
} DRVCONFIGINFOEX; }extern "C" { typedef DRVCONFIGINFOEX *PDRVCONFIGINFOEX; }extern "C" { typedef DRVCONFIGINFOEX *NPDRVCONFIGINFOEX; }extern "C" { typedef DRVCONFIGINFOEX *LPDRVCONFIGINFOEX; }
#line 340 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 336
struct tagDRVCONFIGINFO { 
DWORD dwDCISize; 
LPCWSTR lpszDCISectionName; 
LPCWSTR lpszDCIAliasName; 
} DRVCONFIGINFO; }extern "C" { typedef tagDRVCONFIGINFO *PDRVCONFIGINFO; }extern "C" { typedef tagDRVCONFIGINFO *NPDRVCONFIGINFO; }extern "C" { typedef tagDRVCONFIGINFO *LPDRVCONFIGINFO; }
#line 357 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef LRESULT (__stdcall *DRIVERPROC)(DWORD_PTR, HDRVR, UINT, LPARAM, LPARAM); }

extern "C" { extern __declspec( dllimport ) LRESULT __stdcall CloseDriver(HDRVR, LPARAM, LPARAM); } 
extern "C" { extern __declspec( dllimport ) HDRVR __stdcall OpenDriver(LPCWSTR, LPCWSTR, LPARAM); } 
extern "C" { extern __declspec( dllimport ) LRESULT __stdcall SendDriverMessage(HDRVR, UINT, LPARAM, LPARAM); } 
extern "C" { extern __declspec( dllimport ) HMODULE __stdcall DrvGetModuleHandle(HDRVR); } 
extern "C" { extern __declspec( dllimport ) HMODULE __stdcall GetDriverModuleHandle(HDRVR); } 
extern "C" { extern __declspec( dllimport ) LRESULT __stdcall DefDriverProc(DWORD_PTR, HDRVR, UINT, LPARAM, LPARAM); } 
#line 407 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef void __stdcall DRVCALLBACK(HDRVR, UINT, DWORD_PTR, DWORD_PTR, DWORD_PTR); }

extern "C" { typedef DRVCALLBACK *LPDRVCALLBACK; }

extern "C" { typedef DRVCALLBACK *PDRVCALLBACK; }
#line 441 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall sndPlaySoundA(LPCSTR, UINT); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall sndPlaySoundW(LPCWSTR, UINT); } 
#line 490 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PlaySoundA(LPCSTR, HMODULE, DWORD); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PlaySoundW(LPCWSTR, HMODULE, DWORD); } 
#line 519 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { struct HWAVE__ { int unused; }; }extern "C" { typedef HWAVE__ *HWAVE; }
extern "C" { struct HWAVEIN__ { int unused; }; }extern "C" { typedef HWAVEIN__ *HWAVEIN; }
extern "C" { struct HWAVEOUT__ { int unused; }; }extern "C" { typedef HWAVEOUT__ *HWAVEOUT; }
extern "C" { typedef HWAVEIN *LPHWAVEIN; }
extern "C" { typedef HWAVEOUT *LPHWAVEOUT; }
extern "C" { typedef DRVCALLBACK WAVECALLBACK; }
extern "C" { typedef WAVECALLBACK *LPWAVECALLBACK; }
#line 557 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 548
struct wavehdr_tag { 
LPSTR lpData; 
DWORD dwBufferLength; 
DWORD dwBytesRecorded; 
DWORD_PTR dwUser; 
DWORD dwFlags; 
DWORD dwLoops; 
wavehdr_tag *lpNext; 
DWORD_PTR reserved; 
} WAVEHDR; }extern "C" { typedef wavehdr_tag *PWAVEHDR; }extern "C" { typedef wavehdr_tag *NPWAVEHDR; }extern "C" { typedef wavehdr_tag *LPWAVEHDR; }
#line 578
extern "C" { typedef 
#line 569
struct tagWAVEOUTCAPSA { 
WORD wMid; 
WORD wPid; 
MMVERSION vDriverVersion; 
CHAR szPname[32]; 
DWORD dwFormats; 
WORD wChannels; 
WORD wReserved1; 
DWORD dwSupport; 
} WAVEOUTCAPSA; }extern "C" { typedef tagWAVEOUTCAPSA *PWAVEOUTCAPSA; }extern "C" { typedef tagWAVEOUTCAPSA *NPWAVEOUTCAPSA; }extern "C" { typedef tagWAVEOUTCAPSA *LPWAVEOUTCAPSA; }
#line 588
extern "C" { typedef 
#line 579
struct tagWAVEOUTCAPSW { 
WORD wMid; 
WORD wPid; 
MMVERSION vDriverVersion; 
WCHAR szPname[32]; 
DWORD dwFormats; 
WORD wChannels; 
WORD wReserved1; 
DWORD dwSupport; 
} WAVEOUTCAPSW; }extern "C" { typedef tagWAVEOUTCAPSW *PWAVEOUTCAPSW; }extern "C" { typedef tagWAVEOUTCAPSW *NPWAVEOUTCAPSW; }extern "C" { typedef tagWAVEOUTCAPSW *LPWAVEOUTCAPSW; }
#line 595
extern "C" { typedef WAVEOUTCAPSA WAVEOUTCAPS; }
extern "C" { typedef PWAVEOUTCAPSA PWAVEOUTCAPS; }
extern "C" { typedef NPWAVEOUTCAPSA NPWAVEOUTCAPS; }
extern "C" { typedef LPWAVEOUTCAPSA LPWAVEOUTCAPS; }
#line 612 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 600
struct tagWAVEOUTCAPS2A { 
WORD wMid; 
WORD wPid; 
MMVERSION vDriverVersion; 
CHAR szPname[32]; 
DWORD dwFormats; 
WORD wChannels; 
WORD wReserved1; 
DWORD dwSupport; 
GUID ManufacturerGuid; 
GUID ProductGuid; 
GUID NameGuid; 
} WAVEOUTCAPS2A; }extern "C" { typedef tagWAVEOUTCAPS2A *PWAVEOUTCAPS2A; }extern "C" { typedef tagWAVEOUTCAPS2A *NPWAVEOUTCAPS2A; }extern "C" { typedef tagWAVEOUTCAPS2A *LPWAVEOUTCAPS2A; }
#line 625
extern "C" { typedef 
#line 613
struct tagWAVEOUTCAPS2W { 
WORD wMid; 
WORD wPid; 
MMVERSION vDriverVersion; 
WCHAR szPname[32]; 
DWORD dwFormats; 
WORD wChannels; 
WORD wReserved1; 
DWORD dwSupport; 
GUID ManufacturerGuid; 
GUID ProductGuid; 
GUID NameGuid; 
} WAVEOUTCAPS2W; }extern "C" { typedef tagWAVEOUTCAPS2W *PWAVEOUTCAPS2W; }extern "C" { typedef tagWAVEOUTCAPS2W *NPWAVEOUTCAPS2W; }extern "C" { typedef tagWAVEOUTCAPS2W *LPWAVEOUTCAPS2W; }
#line 632
extern "C" { typedef WAVEOUTCAPS2A WAVEOUTCAPS2; }
extern "C" { typedef PWAVEOUTCAPS2A PWAVEOUTCAPS2; }
extern "C" { typedef NPWAVEOUTCAPS2A NPWAVEOUTCAPS2; }
extern "C" { typedef LPWAVEOUTCAPS2A LPWAVEOUTCAPS2; }
#line 670 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 662
struct tagWAVEINCAPSA { 
WORD wMid; 
WORD wPid; 
MMVERSION vDriverVersion; 
CHAR szPname[32]; 
DWORD dwFormats; 
WORD wChannels; 
WORD wReserved1; 
} WAVEINCAPSA; }extern "C" { typedef tagWAVEINCAPSA *PWAVEINCAPSA; }extern "C" { typedef tagWAVEINCAPSA *NPWAVEINCAPSA; }extern "C" { typedef tagWAVEINCAPSA *LPWAVEINCAPSA; }
#line 679
extern "C" { typedef 
#line 671
struct tagWAVEINCAPSW { 
WORD wMid; 
WORD wPid; 
MMVERSION vDriverVersion; 
WCHAR szPname[32]; 
DWORD dwFormats; 
WORD wChannels; 
WORD wReserved1; 
} WAVEINCAPSW; }extern "C" { typedef tagWAVEINCAPSW *PWAVEINCAPSW; }extern "C" { typedef tagWAVEINCAPSW *NPWAVEINCAPSW; }extern "C" { typedef tagWAVEINCAPSW *LPWAVEINCAPSW; }
#line 686
extern "C" { typedef WAVEINCAPSA WAVEINCAPS; }
extern "C" { typedef PWAVEINCAPSA PWAVEINCAPS; }
extern "C" { typedef NPWAVEINCAPSA NPWAVEINCAPS; }
extern "C" { typedef LPWAVEINCAPSA LPWAVEINCAPS; }
#line 702 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 691
struct tagWAVEINCAPS2A { 
WORD wMid; 
WORD wPid; 
MMVERSION vDriverVersion; 
CHAR szPname[32]; 
DWORD dwFormats; 
WORD wChannels; 
WORD wReserved1; 
GUID ManufacturerGuid; 
GUID ProductGuid; 
GUID NameGuid; 
} WAVEINCAPS2A; }extern "C" { typedef tagWAVEINCAPS2A *PWAVEINCAPS2A; }extern "C" { typedef tagWAVEINCAPS2A *NPWAVEINCAPS2A; }extern "C" { typedef tagWAVEINCAPS2A *LPWAVEINCAPS2A; }
#line 714
extern "C" { typedef 
#line 703
struct tagWAVEINCAPS2W { 
WORD wMid; 
WORD wPid; 
MMVERSION vDriverVersion; 
WCHAR szPname[32]; 
DWORD dwFormats; 
WORD wChannels; 
WORD wReserved1; 
GUID ManufacturerGuid; 
GUID ProductGuid; 
GUID NameGuid; 
} WAVEINCAPS2W; }extern "C" { typedef tagWAVEINCAPS2W *PWAVEINCAPS2W; }extern "C" { typedef tagWAVEINCAPS2W *NPWAVEINCAPS2W; }extern "C" { typedef tagWAVEINCAPS2W *LPWAVEINCAPS2W; }
#line 721
extern "C" { typedef WAVEINCAPS2A WAVEINCAPS2; }
extern "C" { typedef PWAVEINCAPS2A PWAVEINCAPS2; }
extern "C" { typedef NPWAVEINCAPS2A NPWAVEINCAPS2; }
extern "C" { typedef LPWAVEINCAPS2A LPWAVEINCAPS2; }
#line 776 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 770
struct waveformat_tag { 
WORD wFormatTag; 
WORD nChannels; 
DWORD nSamplesPerSec; 
DWORD nAvgBytesPerSec; 
WORD nBlockAlign; 
} WAVEFORMAT; }extern "C" { typedef waveformat_tag *PWAVEFORMAT; }extern "C" { typedef waveformat_tag *NPWAVEFORMAT; }extern "C" { typedef waveformat_tag *LPWAVEFORMAT; }
#line 786
extern "C" { typedef 
#line 783
struct pcmwaveformat_tag { 
WAVEFORMAT wf; 
WORD wBitsPerSample; 
} PCMWAVEFORMAT; }extern "C" { typedef pcmwaveformat_tag *PPCMWAVEFORMAT; }extern "C" { typedef pcmwaveformat_tag *NPPCMWAVEFORMAT; }extern "C" { typedef pcmwaveformat_tag *LPPCMWAVEFORMAT; }
#line 806 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 796
struct tWAVEFORMATEX { 

WORD wFormatTag; 
WORD nChannels; 
DWORD nSamplesPerSec; 
DWORD nAvgBytesPerSec; 
WORD nBlockAlign; 
WORD wBitsPerSample; 
WORD cbSize; 

} WAVEFORMATEX; }extern "C" { typedef tWAVEFORMATEX *PWAVEFORMATEX; }extern "C" { typedef tWAVEFORMATEX *NPWAVEFORMATEX; }extern "C" { typedef tWAVEFORMATEX *LPWAVEFORMATEX; }
#line 809 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef const WAVEFORMATEX *LPCWAVEFORMATEX; }


extern "C" { extern __declspec( dllimport ) UINT __stdcall waveOutGetNumDevs(); } 



extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveOutGetDevCapsA(UINT_PTR, LPWAVEOUTCAPSA, UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveOutGetDevCapsW(UINT_PTR, LPWAVEOUTCAPSW, UINT); } 
#line 829 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveOutGetVolume(HWAVEOUT, LPDWORD); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveOutSetVolume(HWAVEOUT, DWORD); } 
#line 838 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveOutGetErrorTextA(MMRESULT, LPSTR, UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveOutGetErrorTextW(MMRESULT, LPWSTR, UINT); } 
#line 850 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveOutOpen(LPHWAVEOUT, UINT, LPCWAVEFORMATEX, DWORD_PTR, DWORD_PTR, DWORD); } 


extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveOutClose(HWAVEOUT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveOutPrepareHeader(HWAVEOUT, LPWAVEHDR, UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveOutUnprepareHeader(HWAVEOUT, LPWAVEHDR, UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveOutWrite(HWAVEOUT, LPWAVEHDR, UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveOutPause(HWAVEOUT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveOutRestart(HWAVEOUT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveOutReset(HWAVEOUT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveOutBreakLoop(HWAVEOUT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveOutGetPosition(HWAVEOUT, LPMMTIME, UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveOutGetPitch(HWAVEOUT, LPDWORD); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveOutSetPitch(HWAVEOUT, DWORD); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveOutGetPlaybackRate(HWAVEOUT, LPDWORD); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveOutSetPlaybackRate(HWAVEOUT, DWORD); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveOutGetID(HWAVEOUT, LPUINT); } 



extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveOutMessage(HWAVEOUT, UINT, DWORD_PTR, DWORD_PTR); } 
#line 876 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) UINT __stdcall waveInGetNumDevs(); } 



extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveInGetDevCapsA(UINT_PTR, LPWAVEINCAPSA, UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveInGetDevCapsW(UINT_PTR, LPWAVEINCAPSW, UINT); } 
#line 894 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveInGetErrorTextA(MMRESULT, LPSTR, UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveInGetErrorTextW(MMRESULT, LPWSTR, UINT); } 
#line 906 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveInOpen(LPHWAVEIN, UINT, LPCWAVEFORMATEX, DWORD_PTR, DWORD_PTR, DWORD); } 


extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveInClose(HWAVEIN); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveInPrepareHeader(HWAVEIN, LPWAVEHDR, UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveInUnprepareHeader(HWAVEIN, LPWAVEHDR, UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveInAddBuffer(HWAVEIN, LPWAVEHDR, UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveInStart(HWAVEIN); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveInStop(HWAVEIN); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveInReset(HWAVEIN); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveInGetPosition(HWAVEIN, LPMMTIME, UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveInGetID(HWAVEIN, LPUINT); } 



extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall waveInMessage(HWAVEIN, UINT, DWORD_PTR, DWORD_PTR); } 
#line 948 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { struct HMIDI__ { int unused; }; }extern "C" { typedef HMIDI__ *HMIDI; }
extern "C" { struct HMIDIIN__ { int unused; }; }extern "C" { typedef HMIDIIN__ *HMIDIIN; }
extern "C" { struct HMIDIOUT__ { int unused; }; }extern "C" { typedef HMIDIOUT__ *HMIDIOUT; }
extern "C" { struct HMIDISTRM__ { int unused; }; }extern "C" { typedef HMIDISTRM__ *HMIDISTRM; }
extern "C" { typedef HMIDI *LPHMIDI; }
extern "C" { typedef HMIDIIN *LPHMIDIIN; }
extern "C" { typedef HMIDIOUT *LPHMIDIOUT; }
extern "C" { typedef HMIDISTRM *LPHMIDISTRM; }
extern "C" { typedef DRVCALLBACK MIDICALLBACK; }
extern "C" { typedef MIDICALLBACK *LPMIDICALLBACK; }

extern "C" { typedef WORD PATCHARRAY[128]; }
extern "C" { typedef WORD *LPPATCHARRAY; }
extern "C" { typedef WORD KEYARRAY[128]; }
extern "C" { typedef WORD *LPKEYARRAY; }
#line 1008 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 998
struct tagMIDIOUTCAPSA { 
WORD wMid; 
WORD wPid; 
MMVERSION vDriverVersion; 
CHAR szPname[32]; 
WORD wTechnology; 
WORD wVoices; 
WORD wNotes; 
WORD wChannelMask; 
DWORD dwSupport; 
} MIDIOUTCAPSA; }extern "C" { typedef tagMIDIOUTCAPSA *PMIDIOUTCAPSA; }extern "C" { typedef tagMIDIOUTCAPSA *NPMIDIOUTCAPSA; }extern "C" { typedef tagMIDIOUTCAPSA *LPMIDIOUTCAPSA; }
#line 1019
extern "C" { typedef 
#line 1009
struct tagMIDIOUTCAPSW { 
WORD wMid; 
WORD wPid; 
MMVERSION vDriverVersion; 
WCHAR szPname[32]; 
WORD wTechnology; 
WORD wVoices; 
WORD wNotes; 
WORD wChannelMask; 
DWORD dwSupport; 
} MIDIOUTCAPSW; }extern "C" { typedef tagMIDIOUTCAPSW *PMIDIOUTCAPSW; }extern "C" { typedef tagMIDIOUTCAPSW *NPMIDIOUTCAPSW; }extern "C" { typedef tagMIDIOUTCAPSW *LPMIDIOUTCAPSW; }
#line 1026
extern "C" { typedef MIDIOUTCAPSA MIDIOUTCAPS; }
extern "C" { typedef PMIDIOUTCAPSA PMIDIOUTCAPS; }
extern "C" { typedef NPMIDIOUTCAPSA NPMIDIOUTCAPS; }
extern "C" { typedef LPMIDIOUTCAPSA LPMIDIOUTCAPS; }
#line 1044 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 1031
struct tagMIDIOUTCAPS2A { 
WORD wMid; 
WORD wPid; 
MMVERSION vDriverVersion; 
CHAR szPname[32]; 
WORD wTechnology; 
WORD wVoices; 
WORD wNotes; 
WORD wChannelMask; 
DWORD dwSupport; 
GUID ManufacturerGuid; 
GUID ProductGuid; 
GUID NameGuid; 
} MIDIOUTCAPS2A; }extern "C" { typedef tagMIDIOUTCAPS2A *PMIDIOUTCAPS2A; }extern "C" { typedef tagMIDIOUTCAPS2A *NPMIDIOUTCAPS2A; }extern "C" { typedef tagMIDIOUTCAPS2A *LPMIDIOUTCAPS2A; }
#line 1058
extern "C" { typedef 
#line 1045
struct tagMIDIOUTCAPS2W { 
WORD wMid; 
WORD wPid; 
MMVERSION vDriverVersion; 
WCHAR szPname[32]; 
WORD wTechnology; 
WORD wVoices; 
WORD wNotes; 
WORD wChannelMask; 
DWORD dwSupport; 
GUID ManufacturerGuid; 
GUID ProductGuid; 
GUID NameGuid; 
} MIDIOUTCAPS2W; }extern "C" { typedef tagMIDIOUTCAPS2W *PMIDIOUTCAPS2W; }extern "C" { typedef tagMIDIOUTCAPS2W *NPMIDIOUTCAPS2W; }extern "C" { typedef tagMIDIOUTCAPS2W *LPMIDIOUTCAPS2W; }
#line 1065
extern "C" { typedef MIDIOUTCAPS2A MIDIOUTCAPS2; }
extern "C" { typedef PMIDIOUTCAPS2A PMIDIOUTCAPS2; }
extern "C" { typedef NPMIDIOUTCAPS2A NPMIDIOUTCAPS2; }
extern "C" { typedef LPMIDIOUTCAPS2A LPMIDIOUTCAPS2; }
#line 1113 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 1105 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
struct tagMIDIINCAPSA { 
WORD wMid; 
WORD wPid; 
MMVERSION vDriverVersion; 
CHAR szPname[32]; 

DWORD dwSupport; 
#line 1113 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
} MIDIINCAPSA; }extern "C" { typedef tagMIDIINCAPSA *PMIDIINCAPSA; }extern "C" { typedef tagMIDIINCAPSA *NPMIDIINCAPSA; }extern "C" { typedef tagMIDIINCAPSA *LPMIDIINCAPSA; }
#line 1122 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 1114 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
struct tagMIDIINCAPSW { 
WORD wMid; 
WORD wPid; 
MMVERSION vDriverVersion; 
WCHAR szPname[32]; 

DWORD dwSupport; 
#line 1122 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
} MIDIINCAPSW; }extern "C" { typedef tagMIDIINCAPSW *PMIDIINCAPSW; }extern "C" { typedef tagMIDIINCAPSW *NPMIDIINCAPSW; }extern "C" { typedef tagMIDIINCAPSW *LPMIDIINCAPSW; }
#line 1129
extern "C" { typedef MIDIINCAPSA MIDIINCAPS; }
extern "C" { typedef PMIDIINCAPSA PMIDIINCAPS; }
extern "C" { typedef NPMIDIINCAPSA NPMIDIINCAPS; }
extern "C" { typedef LPMIDIINCAPSA LPMIDIINCAPS; }
#line 1145 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 1134 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
struct tagMIDIINCAPS2A { 
WORD wMid; 
WORD wPid; 
MMVERSION vDriverVersion; 
CHAR szPname[32]; 

DWORD dwSupport; 
#line 1142 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
GUID ManufacturerGuid; 
GUID ProductGuid; 
GUID NameGuid; 
} MIDIINCAPS2A; }extern "C" { typedef tagMIDIINCAPS2A *PMIDIINCAPS2A; }extern "C" { typedef tagMIDIINCAPS2A *NPMIDIINCAPS2A; }extern "C" { typedef tagMIDIINCAPS2A *LPMIDIINCAPS2A; }
#line 1157 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 1146 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
struct tagMIDIINCAPS2W { 
WORD wMid; 
WORD wPid; 
MMVERSION vDriverVersion; 
WCHAR szPname[32]; 

DWORD dwSupport; 
#line 1154 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
GUID ManufacturerGuid; 
GUID ProductGuid; 
GUID NameGuid; 
} MIDIINCAPS2W; }extern "C" { typedef tagMIDIINCAPS2W *PMIDIINCAPS2W; }extern "C" { typedef tagMIDIINCAPS2W *NPMIDIINCAPS2W; }extern "C" { typedef tagMIDIINCAPS2W *LPMIDIINCAPS2W; }
#line 1164
extern "C" { typedef MIDIINCAPS2A MIDIINCAPS2; }
extern "C" { typedef PMIDIINCAPS2A PMIDIINCAPS2; }
extern "C" { typedef NPMIDIINCAPS2A NPMIDIINCAPS2; }
extern "C" { typedef LPMIDIINCAPS2A LPMIDIINCAPS2; }
#line 1196 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 1184 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
struct midihdr_tag { 
LPSTR lpData; 
DWORD dwBufferLength; 
DWORD dwBytesRecorded; 
DWORD_PTR dwUser; 
DWORD dwFlags; 
midihdr_tag *lpNext; 
DWORD_PTR reserved; 

DWORD dwOffset; 
DWORD_PTR dwReserved[8]; 
#line 1196 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
} MIDIHDR; }extern "C" { typedef midihdr_tag *PMIDIHDR; }extern "C" { typedef midihdr_tag *NPMIDIHDR; }extern "C" { typedef midihdr_tag *LPMIDIHDR; }
#line 1206
extern "C" { typedef 
#line 1200
struct midievent_tag { 

DWORD dwDeltaTime; 
DWORD dwStreamID; 
DWORD dwEvent; 
DWORD dwParms[1]; 
} MIDIEVENT; }
#line 1213
extern "C" { typedef 
#line 1208
struct midistrmbuffver_tag { 

DWORD dwVersion; 
DWORD dwMid; 
DWORD dwOEMVersion; 
} MIDISTRMBUFFVER; }
#line 1270 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 1266
struct midiproptimediv_tag { 

DWORD cbStruct; 
DWORD dwTimeDiv; 
} MIDIPROPTIMEDIV; }extern "C" { typedef midiproptimediv_tag *LPMIDIPROPTIMEDIV; }
#line 1276
extern "C" { typedef 
#line 1272
struct midiproptempo_tag { 

DWORD cbStruct; 
DWORD dwTempo; 
} MIDIPROPTEMPO; }extern "C" { typedef midiproptempo_tag *LPMIDIPROPTEMPO; }
#line 1281 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) UINT __stdcall midiOutGetNumDevs(); } 

extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiStreamOpen(LPHMIDISTRM, LPUINT, DWORD, DWORD_PTR, DWORD_PTR, DWORD); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiStreamClose(HMIDISTRM); } 

extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiStreamProperty(HMIDISTRM, LPBYTE, DWORD); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiStreamPosition(HMIDISTRM, LPMMTIME, UINT); } 

extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiStreamOut(HMIDISTRM, LPMIDIHDR, UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiStreamPause(HMIDISTRM); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiStreamRestart(HMIDISTRM); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiStreamStop(HMIDISTRM); } 


extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiConnect(HMIDI, HMIDIOUT, LPVOID); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiDisconnect(HMIDI, HMIDIOUT, LPVOID); } 
#line 1302 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiOutGetDevCapsA(UINT_PTR, LPMIDIOUTCAPSA, UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiOutGetDevCapsW(UINT_PTR, LPMIDIOUTCAPSW, UINT); } 
#line 1315 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiOutGetVolume(HMIDIOUT, LPDWORD); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiOutSetVolume(HMIDIOUT, DWORD); } 
#line 1324 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiOutGetErrorTextA(MMRESULT, LPSTR, UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiOutGetErrorTextW(MMRESULT, LPWSTR, UINT); } 
#line 1336 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiOutOpen(LPHMIDIOUT, UINT, DWORD_PTR, DWORD_PTR, DWORD); } 

extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiOutClose(HMIDIOUT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiOutPrepareHeader(HMIDIOUT, LPMIDIHDR, UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiOutUnprepareHeader(HMIDIOUT, LPMIDIHDR, UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiOutShortMsg(HMIDIOUT, DWORD); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiOutLongMsg(HMIDIOUT, LPMIDIHDR, UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiOutReset(HMIDIOUT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiOutCachePatches(HMIDIOUT, UINT, LPWORD, UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiOutCacheDrumPatches(HMIDIOUT, UINT, LPWORD, UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiOutGetID(HMIDIOUT, LPUINT); } 



extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiOutMessage(HMIDIOUT, UINT, DWORD_PTR, DWORD_PTR); } 
#line 1356 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) UINT __stdcall midiInGetNumDevs(); } 



extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiInGetDevCapsA(UINT_PTR, LPMIDIINCAPSA, UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiInGetDevCapsW(UINT_PTR, LPMIDIINCAPSW, UINT); } 
#line 1367 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiInGetErrorTextA(MMRESULT, LPSTR, UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiInGetErrorTextW(MMRESULT, LPWSTR, UINT); } 
#line 1380 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiInOpen(LPHMIDIIN, UINT, DWORD_PTR, DWORD_PTR, DWORD); } 

extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiInClose(HMIDIIN); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiInPrepareHeader(HMIDIIN, LPMIDIHDR, UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiInUnprepareHeader(HMIDIIN, LPMIDIHDR, UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiInAddBuffer(HMIDIIN, LPMIDIHDR, UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiInStart(HMIDIIN); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiInStop(HMIDIIN); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiInReset(HMIDIIN); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiInGetID(HMIDIIN, LPUINT); } 



extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall midiInMessage(HMIDIIN, UINT, DWORD_PTR, DWORD_PTR); } 
#line 1424 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 1416
struct tagAUXCAPSA { 
WORD wMid; 
WORD wPid; 
MMVERSION vDriverVersion; 
CHAR szPname[32]; 
WORD wTechnology; 
WORD wReserved1; 
DWORD dwSupport; 
} AUXCAPSA; }extern "C" { typedef tagAUXCAPSA *PAUXCAPSA; }extern "C" { typedef tagAUXCAPSA *NPAUXCAPSA; }extern "C" { typedef tagAUXCAPSA *LPAUXCAPSA; }
#line 1433
extern "C" { typedef 
#line 1425
struct tagAUXCAPSW { 
WORD wMid; 
WORD wPid; 
MMVERSION vDriverVersion; 
WCHAR szPname[32]; 
WORD wTechnology; 
WORD wReserved1; 
DWORD dwSupport; 
} AUXCAPSW; }extern "C" { typedef tagAUXCAPSW *PAUXCAPSW; }extern "C" { typedef tagAUXCAPSW *NPAUXCAPSW; }extern "C" { typedef tagAUXCAPSW *LPAUXCAPSW; }
#line 1440
extern "C" { typedef AUXCAPSA AUXCAPS; }
extern "C" { typedef PAUXCAPSA PAUXCAPS; }
extern "C" { typedef NPAUXCAPSA NPAUXCAPS; }
extern "C" { typedef LPAUXCAPSA LPAUXCAPS; }
#line 1456 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 1445
struct tagAUXCAPS2A { 
WORD wMid; 
WORD wPid; 
MMVERSION vDriverVersion; 
CHAR szPname[32]; 
WORD wTechnology; 
WORD wReserved1; 
DWORD dwSupport; 
GUID ManufacturerGuid; 
GUID ProductGuid; 
GUID NameGuid; 
} AUXCAPS2A; }extern "C" { typedef tagAUXCAPS2A *PAUXCAPS2A; }extern "C" { typedef tagAUXCAPS2A *NPAUXCAPS2A; }extern "C" { typedef tagAUXCAPS2A *LPAUXCAPS2A; }
#line 1468
extern "C" { typedef 
#line 1457
struct tagAUXCAPS2W { 
WORD wMid; 
WORD wPid; 
MMVERSION vDriverVersion; 
WCHAR szPname[32]; 
WORD wTechnology; 
WORD wReserved1; 
DWORD dwSupport; 
GUID ManufacturerGuid; 
GUID ProductGuid; 
GUID NameGuid; 
} AUXCAPS2W; }extern "C" { typedef tagAUXCAPS2W *PAUXCAPS2W; }extern "C" { typedef tagAUXCAPS2W *NPAUXCAPS2W; }extern "C" { typedef tagAUXCAPS2W *LPAUXCAPS2W; }
#line 1475
extern "C" { typedef AUXCAPS2A AUXCAPS2; }
extern "C" { typedef PAUXCAPS2A PAUXCAPS2; }
extern "C" { typedef NPAUXCAPS2A NPAUXCAPS2; }
extern "C" { typedef LPAUXCAPS2A LPAUXCAPS2; }
#line 1501 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) UINT __stdcall auxGetNumDevs(); } 


extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall auxGetDevCapsA(UINT_PTR, LPAUXCAPSA, UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall auxGetDevCapsW(UINT_PTR, LPAUXCAPSW, UINT); } 
#line 1515 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall auxSetVolume(UINT, DWORD); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall auxGetVolume(UINT, LPDWORD); } 



extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall auxOutMessage(UINT, UINT, DWORD_PTR, DWORD_PTR); } 
#line 1535 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { struct HMIXEROBJ__ { int unused; }; }extern "C" { typedef HMIXEROBJ__ *HMIXEROBJ; }
extern "C" { typedef HMIXEROBJ *LPHMIXEROBJ; }

extern "C" { struct HMIXER__ { int unused; }; }extern "C" { typedef HMIXER__ *HMIXER; }
extern "C" { typedef HMIXER *LPHMIXER; }
#line 1568
extern "C" { extern __declspec( dllimport ) UINT __stdcall mixerGetNumDevs(); } 
#line 1579
extern "C" { typedef 
#line 1572
struct tagMIXERCAPSA { 
WORD wMid; 
WORD wPid; 
MMVERSION vDriverVersion; 
CHAR szPname[32]; 
DWORD fdwSupport; 
DWORD cDestinations; 
} MIXERCAPSA; }extern "C" { typedef tagMIXERCAPSA *PMIXERCAPSA; }extern "C" { typedef tagMIXERCAPSA *LPMIXERCAPSA; }
#line 1587
extern "C" { typedef 
#line 1580
struct tagMIXERCAPSW { 
WORD wMid; 
WORD wPid; 
MMVERSION vDriverVersion; 
WCHAR szPname[32]; 
DWORD fdwSupport; 
DWORD cDestinations; 
} MIXERCAPSW; }extern "C" { typedef tagMIXERCAPSW *PMIXERCAPSW; }extern "C" { typedef tagMIXERCAPSW *LPMIXERCAPSW; }
#line 1593
extern "C" { typedef MIXERCAPSA MIXERCAPS; }
extern "C" { typedef PMIXERCAPSA PMIXERCAPS; }
extern "C" { typedef LPMIXERCAPSA LPMIXERCAPS; }
#line 1607 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 1597
struct tagMIXERCAPS2A { 
WORD wMid; 
WORD wPid; 
MMVERSION vDriverVersion; 
CHAR szPname[32]; 
DWORD fdwSupport; 
DWORD cDestinations; 
GUID ManufacturerGuid; 
GUID ProductGuid; 
GUID NameGuid; 
} MIXERCAPS2A; }extern "C" { typedef tagMIXERCAPS2A *PMIXERCAPS2A; }extern "C" { typedef tagMIXERCAPS2A *LPMIXERCAPS2A; }
#line 1618
extern "C" { typedef 
#line 1608
struct tagMIXERCAPS2W { 
WORD wMid; 
WORD wPid; 
MMVERSION vDriverVersion; 
WCHAR szPname[32]; 
DWORD fdwSupport; 
DWORD cDestinations; 
GUID ManufacturerGuid; 
GUID ProductGuid; 
GUID NameGuid; 
} MIXERCAPS2W; }extern "C" { typedef tagMIXERCAPS2W *PMIXERCAPS2W; }extern "C" { typedef tagMIXERCAPS2W *LPMIXERCAPS2W; }
#line 1624
extern "C" { typedef MIXERCAPS2A MIXERCAPS2; }
extern "C" { typedef PMIXERCAPS2A PMIXERCAPS2; }
extern "C" { typedef LPMIXERCAPS2A LPMIXERCAPS2; }
#line 1643 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall mixerGetDevCapsA(UINT_PTR, LPMIXERCAPSA, UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall mixerGetDevCapsW(UINT_PTR, LPMIXERCAPSW, UINT); } 
#line 1655 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall mixerOpen(LPHMIXER, UINT, DWORD_PTR, DWORD_PTR, DWORD); } 


extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall mixerClose(HMIXER); } 

extern "C" { extern __declspec( dllimport ) DWORD __stdcall mixerMessage(HMIXER, UINT, DWORD_PTR, DWORD_PTR); } 
#line 1685
extern "C" { typedef 
#line 1664
struct tagMIXERLINEA { 
DWORD cbStruct; 
DWORD dwDestination; 
DWORD dwSource; 
DWORD dwLineID; 
DWORD fdwLine; 
DWORD_PTR dwUser; 
DWORD dwComponentType; 
DWORD cChannels; 
DWORD cConnections; 
DWORD cControls; 
CHAR szShortName[16]; 
CHAR szName[64]; 
struct { 
DWORD dwType; 
DWORD dwDeviceID; 
WORD wMid; 
WORD wPid; 
MMVERSION vDriverVersion; 
CHAR szPname[32]; 
} Target; 
} MIXERLINEA; }extern "C" { typedef tagMIXERLINEA *PMIXERLINEA; }extern "C" { typedef tagMIXERLINEA *LPMIXERLINEA; }
#line 1707
extern "C" { typedef 
#line 1686
struct tagMIXERLINEW { 
DWORD cbStruct; 
DWORD dwDestination; 
DWORD dwSource; 
DWORD dwLineID; 
DWORD fdwLine; 
DWORD_PTR dwUser; 
DWORD dwComponentType; 
DWORD cChannels; 
DWORD cConnections; 
DWORD cControls; 
WCHAR szShortName[16]; 
WCHAR szName[64]; 
struct { 
DWORD dwType; 
DWORD dwDeviceID; 
WORD wMid; 
WORD wPid; 
MMVERSION vDriverVersion; 
WCHAR szPname[32]; 
} Target; 
} MIXERLINEW; }extern "C" { typedef tagMIXERLINEW *PMIXERLINEW; }extern "C" { typedef tagMIXERLINEW *LPMIXERLINEW; }
#line 1713
extern "C" { typedef MIXERLINEA MIXERLINE; }
extern "C" { typedef PMIXERLINEA PMIXERLINE; }
extern "C" { typedef LPMIXERLINEA LPMIXERLINE; }
#line 1798 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall mixerGetLineInfoA(HMIXEROBJ, LPMIXERLINEA, DWORD); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall mixerGetLineInfoW(HMIXEROBJ, LPMIXERLINEW, DWORD); } 
#line 1819 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall mixerGetID(HMIXEROBJ, UINT *, DWORD); } 
#line 1852
extern "C" { typedef 
#line 1828
struct tagMIXERCONTROLA { 
DWORD cbStruct; 
DWORD dwControlID; 
DWORD dwControlType; 
DWORD fdwControl; 
DWORD cMultipleItems; 
CHAR szShortName[16]; 
CHAR szName[64]; 
union { 
struct { 
LONG lMinimum; 
LONG lMaximum; 
}; 
struct { 
DWORD dwMinimum; 
DWORD dwMaximum; 
}; 
DWORD dwReserved[6]; 
} Bounds; 
union { 
DWORD cSteps; 
DWORD cbCustomData; 
DWORD dwReserved[6]; 
} Metrics; 
} MIXERCONTROLA; }extern "C" { typedef tagMIXERCONTROLA *PMIXERCONTROLA; }extern "C" { typedef tagMIXERCONTROLA *LPMIXERCONTROLA; }
#line 1877
extern "C" { typedef 
#line 1853
struct tagMIXERCONTROLW { 
DWORD cbStruct; 
DWORD dwControlID; 
DWORD dwControlType; 
DWORD fdwControl; 
DWORD cMultipleItems; 
WCHAR szShortName[16]; 
WCHAR szName[64]; 
union { 
struct { 
LONG lMinimum; 
LONG lMaximum; 
}; 
struct { 
DWORD dwMinimum; 
DWORD dwMaximum; 
}; 
DWORD dwReserved[6]; 
} Bounds; 
union { 
DWORD cSteps; 
DWORD cbCustomData; 
DWORD dwReserved[6]; 
} Metrics; 
} MIXERCONTROLW; }extern "C" { typedef tagMIXERCONTROLW *PMIXERCONTROLW; }extern "C" { typedef tagMIXERCONTROLW *LPMIXERCONTROLW; }
#line 1883
extern "C" { typedef MIXERCONTROLA MIXERCONTROL; }
extern "C" { typedef PMIXERCONTROLA PMIXERCONTROL; }
extern "C" { typedef LPMIXERCONTROLA LPMIXERCONTROL; }
#line 2014 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 2004
struct tagMIXERLINECONTROLSA { 
DWORD cbStruct; 
DWORD dwLineID; 
union { 
DWORD dwControlID; 
DWORD dwControlType; 
}; 
DWORD cControls; 
DWORD cbmxctrl; 
LPMIXERCONTROLA pamxctrl; 
} MIXERLINECONTROLSA; }extern "C" { typedef tagMIXERLINECONTROLSA *PMIXERLINECONTROLSA; }extern "C" { typedef tagMIXERLINECONTROLSA *LPMIXERLINECONTROLSA; }
#line 2025
extern "C" { typedef 
#line 2015
struct tagMIXERLINECONTROLSW { 
DWORD cbStruct; 
DWORD dwLineID; 
union { 
DWORD dwControlID; 
DWORD dwControlType; 
}; 
DWORD cControls; 
DWORD cbmxctrl; 
LPMIXERCONTROLW pamxctrl; 
} MIXERLINECONTROLSW; }extern "C" { typedef tagMIXERLINECONTROLSW *PMIXERLINECONTROLSW; }extern "C" { typedef tagMIXERLINECONTROLSW *LPMIXERLINECONTROLSW; }
#line 2031
extern "C" { typedef MIXERLINECONTROLSA MIXERLINECONTROLS; }
extern "C" { typedef PMIXERLINECONTROLSA PMIXERLINECONTROLS; }
extern "C" { typedef LPMIXERLINECONTROLSA LPMIXERLINECONTROLS; }
#line 2056 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall mixerGetLineControlsA(HMIXEROBJ, LPMIXERLINECONTROLSA, DWORD); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall mixerGetLineControlsW(HMIXEROBJ, LPMIXERLINECONTROLSW, DWORD); } 
#line 2085 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 2075
struct tMIXERCONTROLDETAILS { 
DWORD cbStruct; 
DWORD dwControlID; 
DWORD cChannels; 
union { 
HWND hwndOwner; 
DWORD cMultipleItems; 
}; 
DWORD cbDetails; 
LPVOID paDetails; 
} MIXERCONTROLDETAILS; }extern "C" { typedef tMIXERCONTROLDETAILS *PMIXERCONTROLDETAILS; }extern "C" { typedef tMIXERCONTROLDETAILS *LPMIXERCONTROLDETAILS; }
#line 2098
extern "C" { typedef 
#line 2094
struct tagMIXERCONTROLDETAILS_LISTTEXTA { 
DWORD dwParam1; 
DWORD dwParam2; 
CHAR szName[64]; 
} MIXERCONTROLDETAILS_LISTTEXTA; }extern "C" { typedef tagMIXERCONTROLDETAILS_LISTTEXTA *PMIXERCONTROLDETAILS_LISTTEXTA; }extern "C" { typedef tagMIXERCONTROLDETAILS_LISTTEXTA *LPMIXERCONTROLDETAILS_LISTTEXTA; }




extern "C" { typedef 
#line 2099
struct tagMIXERCONTROLDETAILS_LISTTEXTW { 
DWORD dwParam1; 
DWORD dwParam2; 
WCHAR szName[64]; 
} MIXERCONTROLDETAILS_LISTTEXTW; }extern "C" { typedef tagMIXERCONTROLDETAILS_LISTTEXTW *PMIXERCONTROLDETAILS_LISTTEXTW; }extern "C" { typedef tagMIXERCONTROLDETAILS_LISTTEXTW *LPMIXERCONTROLDETAILS_LISTTEXTW; }
#line 2109
extern "C" { typedef MIXERCONTROLDETAILS_LISTTEXTA MIXERCONTROLDETAILS_LISTTEXT; }
extern "C" { typedef PMIXERCONTROLDETAILS_LISTTEXTA PMIXERCONTROLDETAILS_LISTTEXT; }
extern "C" { typedef LPMIXERCONTROLDETAILS_LISTTEXTA LPMIXERCONTROLDETAILS_LISTTEXT; }
#line 2128 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 2126
struct tMIXERCONTROLDETAILS_BOOLEAN { 
LONG fValue; 
} MIXERCONTROLDETAILS_BOOLEAN; }
extern "C" { typedef tMIXERCONTROLDETAILS_BOOLEAN *PMIXERCONTROLDETAILS_BOOLEAN; }
extern "C" { typedef tMIXERCONTROLDETAILS_BOOLEAN *LPMIXERCONTROLDETAILS_BOOLEAN; }



extern "C" { typedef 
#line 2132
struct tMIXERCONTROLDETAILS_SIGNED { 
LONG lValue; 
} MIXERCONTROLDETAILS_SIGNED; }
extern "C" { typedef tMIXERCONTROLDETAILS_SIGNED *PMIXERCONTROLDETAILS_SIGNED; }
extern "C" { typedef tMIXERCONTROLDETAILS_SIGNED *LPMIXERCONTROLDETAILS_SIGNED; }




extern "C" { typedef 
#line 2139
struct tMIXERCONTROLDETAILS_UNSIGNED { 
DWORD dwValue; 
} MIXERCONTROLDETAILS_UNSIGNED; }
extern "C" { typedef tMIXERCONTROLDETAILS_UNSIGNED *PMIXERCONTROLDETAILS_UNSIGNED; }
extern "C" { typedef tMIXERCONTROLDETAILS_UNSIGNED *LPMIXERCONTROLDETAILS_UNSIGNED; }




extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall mixerGetControlDetailsA(HMIXEROBJ, LPMIXERCONTROLDETAILS, DWORD); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall mixerGetControlDetailsW(HMIXEROBJ, LPMIXERCONTROLDETAILS, DWORD); } 
#line 2166 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall mixerSetControlDetails(HMIXEROBJ, LPMIXERCONTROLDETAILS, DWORD); } 
#line 2189 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef void __stdcall TIMECALLBACK(UINT, UINT, DWORD_PTR, DWORD_PTR, DWORD_PTR); }

extern "C" { typedef TIMECALLBACK *LPTIMECALLBACK; }
#line 2215 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 2212
struct timecaps_tag { 
UINT wPeriodMin; 
UINT wPeriodMax; 
} TIMECAPS; }extern "C" { typedef timecaps_tag *PTIMECAPS; }extern "C" { typedef timecaps_tag *NPTIMECAPS; }extern "C" { typedef timecaps_tag *LPTIMECAPS; }


extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall timeGetSystemTime(LPMMTIME, UINT); } 
extern "C" { extern __declspec( dllimport ) DWORD __stdcall timeGetTime(); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall timeSetEvent(UINT, UINT, LPTIMECALLBACK, DWORD_PTR, UINT); } 

extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall timeKillEvent(UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall timeGetDevCaps(LPTIMECAPS, UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall timeBeginPeriod(UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall timeEndPeriod(UINT); } 
#line 2362 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 2335 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
struct tagJOYCAPSA { 
WORD wMid; 
WORD wPid; 
CHAR szPname[32]; 
UINT wXmin; 
UINT wXmax; 
UINT wYmin; 
UINT wYmax; 
UINT wZmin; 
UINT wZmax; 
UINT wNumButtons; 
UINT wPeriodMin; 
UINT wPeriodMax; 

UINT wRmin; 
UINT wRmax; 
UINT wUmin; 
UINT wUmax; 
UINT wVmin; 
UINT wVmax; 
UINT wCaps; 
UINT wMaxAxes; 
UINT wNumAxes; 
UINT wMaxButtons; 
CHAR szRegKey[32]; 
CHAR szOEMVxD[260]; 
#line 2362 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
} JOYCAPSA; }extern "C" { typedef tagJOYCAPSA *PJOYCAPSA; }extern "C" { typedef tagJOYCAPSA *NPJOYCAPSA; }extern "C" { typedef tagJOYCAPSA *LPJOYCAPSA; }
#line 2390 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 2363 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
struct tagJOYCAPSW { 
WORD wMid; 
WORD wPid; 
WCHAR szPname[32]; 
UINT wXmin; 
UINT wXmax; 
UINT wYmin; 
UINT wYmax; 
UINT wZmin; 
UINT wZmax; 
UINT wNumButtons; 
UINT wPeriodMin; 
UINT wPeriodMax; 

UINT wRmin; 
UINT wRmax; 
UINT wUmin; 
UINT wUmax; 
UINT wVmin; 
UINT wVmax; 
UINT wCaps; 
UINT wMaxAxes; 
UINT wNumAxes; 
UINT wMaxButtons; 
WCHAR szRegKey[32]; 
WCHAR szOEMVxD[260]; 
#line 2390 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
} JOYCAPSW; }extern "C" { typedef tagJOYCAPSW *PJOYCAPSW; }extern "C" { typedef tagJOYCAPSW *NPJOYCAPSW; }extern "C" { typedef tagJOYCAPSW *LPJOYCAPSW; }
#line 2397
extern "C" { typedef JOYCAPSA JOYCAPS; }
extern "C" { typedef PJOYCAPSA PJOYCAPS; }
extern "C" { typedef NPJOYCAPSA NPJOYCAPS; }
extern "C" { typedef LPJOYCAPSA LPJOYCAPS; }
#line 2430 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 2402
struct tagJOYCAPS2A { 
WORD wMid; 
WORD wPid; 
CHAR szPname[32]; 
UINT wXmin; 
UINT wXmax; 
UINT wYmin; 
UINT wYmax; 
UINT wZmin; 
UINT wZmax; 
UINT wNumButtons; 
UINT wPeriodMin; 
UINT wPeriodMax; 
UINT wRmin; 
UINT wRmax; 
UINT wUmin; 
UINT wUmax; 
UINT wVmin; 
UINT wVmax; 
UINT wCaps; 
UINT wMaxAxes; 
UINT wNumAxes; 
UINT wMaxButtons; 
CHAR szRegKey[32]; 
CHAR szOEMVxD[260]; 
GUID ManufacturerGuid; 
GUID ProductGuid; 
GUID NameGuid; 
} JOYCAPS2A; }extern "C" { typedef tagJOYCAPS2A *PJOYCAPS2A; }extern "C" { typedef tagJOYCAPS2A *NPJOYCAPS2A; }extern "C" { typedef tagJOYCAPS2A *LPJOYCAPS2A; }
#line 2459
extern "C" { typedef 
#line 2431
struct tagJOYCAPS2W { 
WORD wMid; 
WORD wPid; 
WCHAR szPname[32]; 
UINT wXmin; 
UINT wXmax; 
UINT wYmin; 
UINT wYmax; 
UINT wZmin; 
UINT wZmax; 
UINT wNumButtons; 
UINT wPeriodMin; 
UINT wPeriodMax; 
UINT wRmin; 
UINT wRmax; 
UINT wUmin; 
UINT wUmax; 
UINT wVmin; 
UINT wVmax; 
UINT wCaps; 
UINT wMaxAxes; 
UINT wNumAxes; 
UINT wMaxButtons; 
WCHAR szRegKey[32]; 
WCHAR szOEMVxD[260]; 
GUID ManufacturerGuid; 
GUID ProductGuid; 
GUID NameGuid; 
} JOYCAPS2W; }extern "C" { typedef tagJOYCAPS2W *PJOYCAPS2W; }extern "C" { typedef tagJOYCAPS2W *NPJOYCAPS2W; }extern "C" { typedef tagJOYCAPS2W *LPJOYCAPS2W; }
#line 2466
extern "C" { typedef JOYCAPS2A JOYCAPS2; }
extern "C" { typedef PJOYCAPS2A PJOYCAPS2; }
extern "C" { typedef NPJOYCAPS2A NPJOYCAPS2; }
extern "C" { typedef LPJOYCAPS2A LPJOYCAPS2; }
#line 2510 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 2505
struct joyinfo_tag { 
UINT wXpos; 
UINT wYpos; 
UINT wZpos; 
UINT wButtons; 
} JOYINFO; }extern "C" { typedef joyinfo_tag *PJOYINFO; }extern "C" { typedef joyinfo_tag *NPJOYINFO; }extern "C" { typedef joyinfo_tag *LPJOYINFO; }
#line 2527
extern "C" { typedef 
#line 2513
struct joyinfoex_tag { 
DWORD dwSize; 
DWORD dwFlags; 
DWORD dwXpos; 
DWORD dwYpos; 
DWORD dwZpos; 
DWORD dwRpos; 
DWORD dwUpos; 
DWORD dwVpos; 
DWORD dwButtons; 
DWORD dwButtonNumber; 
DWORD dwPOV; 
DWORD dwReserved1; 
DWORD dwReserved2; 
} JOYINFOEX; }extern "C" { typedef joyinfoex_tag *PJOYINFOEX; }extern "C" { typedef joyinfoex_tag *NPJOYINFOEX; }extern "C" { typedef joyinfoex_tag *LPJOYINFOEX; }
#line 2531 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) UINT __stdcall joyGetNumDevs(); } 


extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall joyGetDevCapsA(UINT_PTR, LPJOYCAPSA, UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall joyGetDevCapsW(UINT_PTR, LPJOYCAPSW, UINT); } 
#line 2545 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall joyGetPos(UINT, LPJOYINFO); } 


extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall joyGetPosEx(UINT, LPJOYINFOEX); } 
#line 2551 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall joyGetThreshold(UINT, LPUINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall joyReleaseCapture(UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall joySetCapture(HWND, UINT, UINT, BOOL); } 

extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall joySetThreshold(UINT, UINT); } 
#line 2590 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef DWORD FOURCC; }
extern "C" { typedef char *HPSTR; }
extern "C" { struct HMMIO__ { int unused; }; }extern "C" { typedef HMMIO__ *HMMIO; }
extern "C" { typedef LRESULT __stdcall MMIOPROC(LPSTR, UINT, LPARAM, LPARAM); }

extern "C" { typedef MMIOPROC *LPMMIOPROC; }
#line 2624
extern "C" { typedef 
#line 2599
struct _MMIOINFO { 


DWORD dwFlags; 
FOURCC fccIOProc; 
LPMMIOPROC pIOProc; 
UINT wErrorRet; 
HTASK htask; 


LONG cchBuffer; 
HPSTR pchBuffer; 
HPSTR pchNext; 
HPSTR pchEndRead; 
HPSTR pchEndWrite; 
LONG lBufOffset; 


LONG lDiskOffset; 
DWORD adwInfo[3]; 


DWORD dwReserved1; 
DWORD dwReserved2; 
HMMIO hmmio; 
} MMIOINFO; }extern "C" { typedef _MMIOINFO *PMMIOINFO; }extern "C" { typedef _MMIOINFO *NPMMIOINFO; }extern "C" { typedef _MMIOINFO *LPMMIOINFO; }
extern "C" { typedef const MMIOINFO *LPCMMIOINFO; }
#line 2635
extern "C" { typedef 
#line 2628
struct _MMCKINFO { 

FOURCC ckid; 
DWORD cksize; 
FOURCC fccType; 
DWORD dwDataOffset; 
DWORD dwFlags; 
} MMCKINFO; }extern "C" { typedef _MMCKINFO *PMMCKINFO; }extern "C" { typedef _MMCKINFO *NPMMCKINFO; }extern "C" { typedef _MMCKINFO *LPMMCKINFO; }
extern "C" { typedef const MMCKINFO *LPCMMCKINFO; }
#line 2719 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) FOURCC __stdcall mmioStringToFOURCCA(LPCSTR, UINT); } 
extern "C" { extern __declspec( dllimport ) FOURCC __stdcall mmioStringToFOURCCW(LPCWSTR, UINT); } 
#line 2726 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) LPMMIOPROC __stdcall mmioInstallIOProcA(FOURCC, LPMMIOPROC, DWORD); } 
extern "C" { extern __declspec( dllimport ) LPMMIOPROC __stdcall mmioInstallIOProcW(FOURCC, LPMMIOPROC, DWORD); } 
#line 2733 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) HMMIO __stdcall mmioOpenA(LPSTR, LPMMIOINFO, DWORD); } 
extern "C" { extern __declspec( dllimport ) HMMIO __stdcall mmioOpenW(LPWSTR, LPMMIOINFO, DWORD); } 
#line 2740 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall mmioRenameA(LPCSTR, LPCSTR, LPCMMIOINFO, DWORD); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall mmioRenameW(LPCWSTR, LPCWSTR, LPCMMIOINFO, DWORD); } 
#line 2756 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall mmioClose(HMMIO, UINT); } 
extern "C" { extern __declspec( dllimport ) LONG __stdcall mmioRead(HMMIO, HPSTR, LONG); } 
extern "C" { extern __declspec( dllimport ) LONG __stdcall mmioWrite(HMMIO, const char *, LONG); } 
extern "C" { extern __declspec( dllimport ) LONG __stdcall mmioSeek(HMMIO, LONG, int); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall mmioGetInfo(HMMIO, LPMMIOINFO, UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall mmioSetInfo(HMMIO, LPCMMIOINFO, UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall mmioSetBuffer(HMMIO, LPSTR, LONG, UINT); } 

extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall mmioFlush(HMMIO, UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall mmioAdvance(HMMIO, LPMMIOINFO, UINT); } 
extern "C" { extern __declspec( dllimport ) LRESULT __stdcall mmioSendMessage(HMMIO, UINT, LPARAM, LPARAM); } 

extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall mmioDescend(HMMIO, LPMMCKINFO, const MMCKINFO *, UINT); } 

extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall mmioAscend(HMMIO, LPMMCKINFO, UINT); } 
extern "C" { extern __declspec( dllimport ) MMRESULT __stdcall mmioCreateChunk(HMMIO, LPMMCKINFO, UINT); } 
#line 2784 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef DWORD MCIERROR; }
#line 2789 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef UINT MCIDEVICEID; }
#line 2793 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef UINT (__stdcall *YIELDPROC)(MCIDEVICEID, DWORD); }




extern "C" { extern __declspec( dllimport ) MCIERROR __stdcall mciSendCommandA(MCIDEVICEID, UINT, DWORD_PTR, DWORD_PTR); } 
extern "C" { extern __declspec( dllimport ) MCIERROR __stdcall mciSendCommandW(MCIDEVICEID, UINT, DWORD_PTR, DWORD_PTR); } 
#line 2805 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) MCIERROR __stdcall mciSendStringA(LPCSTR, LPSTR, UINT, HWND); } 
extern "C" { extern __declspec( dllimport ) MCIERROR __stdcall mciSendStringW(LPCWSTR, LPWSTR, UINT, HWND); } 
#line 2812 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) MCIDEVICEID __stdcall mciGetDeviceIDA(LPCSTR); } 
extern "C" { extern __declspec( dllimport ) MCIDEVICEID __stdcall mciGetDeviceIDW(LPCWSTR); } 
#line 2819 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) MCIDEVICEID __stdcall mciGetDeviceIDFromElementIDA(DWORD, LPCSTR); } 
extern "C" { extern __declspec( dllimport ) MCIDEVICEID __stdcall mciGetDeviceIDFromElementIDW(DWORD, LPCWSTR); } 
#line 2826 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall mciGetErrorStringA(MCIERROR, LPSTR, UINT); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall mciGetErrorStringW(MCIERROR, LPWSTR, UINT); } 
#line 2841 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall mciSetYieldProc(MCIDEVICEID, YIELDPROC, DWORD); } 



extern "C" { extern __declspec( dllimport ) HTASK __stdcall mciGetCreatorTask(MCIDEVICEID); } 
extern "C" { extern __declspec( dllimport ) YIELDPROC __stdcall mciGetYieldProc(MCIDEVICEID, LPDWORD); } 
#line 3147 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 3145
struct tagMCI_GENERIC_PARMS { 
DWORD_PTR dwCallback; 
} MCI_GENERIC_PARMS; }extern "C" { typedef tagMCI_GENERIC_PARMS *PMCI_GENERIC_PARMS; }extern "C" { typedef tagMCI_GENERIC_PARMS *LPMCI_GENERIC_PARMS; }
#line 3159
extern "C" { typedef 
#line 3153
struct tagMCI_OPEN_PARMSA { 
DWORD_PTR dwCallback; 
MCIDEVICEID wDeviceID; 
LPCSTR lpstrDeviceType; 
LPCSTR lpstrElementName; 
LPCSTR lpstrAlias; 
} MCI_OPEN_PARMSA; }extern "C" { typedef tagMCI_OPEN_PARMSA *PMCI_OPEN_PARMSA; }extern "C" { typedef tagMCI_OPEN_PARMSA *LPMCI_OPEN_PARMSA; }
#line 3166
extern "C" { typedef 
#line 3160
struct tagMCI_OPEN_PARMSW { 
DWORD_PTR dwCallback; 
MCIDEVICEID wDeviceID; 
LPCWSTR lpstrDeviceType; 
LPCWSTR lpstrElementName; 
LPCWSTR lpstrAlias; 
} MCI_OPEN_PARMSW; }extern "C" { typedef tagMCI_OPEN_PARMSW *PMCI_OPEN_PARMSW; }extern "C" { typedef tagMCI_OPEN_PARMSW *LPMCI_OPEN_PARMSW; }
#line 3172
extern "C" { typedef MCI_OPEN_PARMSA MCI_OPEN_PARMS; }
extern "C" { typedef PMCI_OPEN_PARMSA PMCI_OPEN_PARMS; }
extern "C" { typedef LPMCI_OPEN_PARMSA LPMCI_OPEN_PARMS; }
#line 3194 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 3190
struct tagMCI_PLAY_PARMS { 
DWORD_PTR dwCallback; 
DWORD dwFrom; 
DWORD dwTo; 
} MCI_PLAY_PARMS; }extern "C" { typedef tagMCI_PLAY_PARMS *PMCI_PLAY_PARMS; }extern "C" { typedef tagMCI_PLAY_PARMS *LPMCI_PLAY_PARMS; }
#line 3201
extern "C" { typedef 
#line 3198
struct tagMCI_SEEK_PARMS { 
DWORD_PTR dwCallback; 
DWORD dwTo; 
} MCI_SEEK_PARMS; }extern "C" { typedef tagMCI_SEEK_PARMS *PMCI_SEEK_PARMS; }extern "C" { typedef tagMCI_SEEK_PARMS *LPMCI_SEEK_PARMS; }
#line 3210
extern "C" { typedef 
#line 3205
struct tagMCI_STATUS_PARMS { 
DWORD_PTR dwCallback; 
DWORD_PTR dwReturn; 
DWORD dwItem; 
DWORD dwTrack; 
} MCI_STATUS_PARMS; }extern "C" { typedef tagMCI_STATUS_PARMS *PMCI_STATUS_PARMS; }extern "C" { typedef tagMCI_STATUS_PARMS *LPMCI_STATUS_PARMS; }
#line 3220
extern "C" { typedef 
#line 3216
struct tagMCI_INFO_PARMSA { 
DWORD_PTR dwCallback; 
LPSTR lpstrReturn; 
DWORD dwRetSize; 
} MCI_INFO_PARMSA; }extern "C" { typedef tagMCI_INFO_PARMSA *LPMCI_INFO_PARMSA; }




extern "C" { typedef 
#line 3221
struct tagMCI_INFO_PARMSW { 
DWORD_PTR dwCallback; 
LPWSTR lpstrReturn; 
DWORD dwRetSize; 
} MCI_INFO_PARMSW; }extern "C" { typedef tagMCI_INFO_PARMSW *LPMCI_INFO_PARMSW; }




extern "C" { typedef MCI_INFO_PARMSA MCI_INFO_PARMS; }
extern "C" { typedef LPMCI_INFO_PARMSA LPMCI_INFO_PARMS; }
#line 3248 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 3244
struct tagMCI_GETDEVCAPS_PARMS { 
DWORD_PTR dwCallback; 
DWORD dwReturn; 
DWORD dwItem; 
} MCI_GETDEVCAPS_PARMS; }extern "C" { typedef tagMCI_GETDEVCAPS_PARMS *PMCI_GETDEVCAPS_PARMS; }extern "C" { typedef tagMCI_GETDEVCAPS_PARMS *LPMCI_GETDEVCAPS_PARMS; }
#line 3260
extern "C" { typedef 
#line 3254
struct tagMCI_SYSINFO_PARMSA { 
DWORD_PTR dwCallback; 
LPSTR lpstrReturn; 
DWORD dwRetSize; 
DWORD dwNumber; 
UINT wDeviceType; 
} MCI_SYSINFO_PARMSA; }extern "C" { typedef tagMCI_SYSINFO_PARMSA *PMCI_SYSINFO_PARMSA; }extern "C" { typedef tagMCI_SYSINFO_PARMSA *LPMCI_SYSINFO_PARMSA; }
#line 3267
extern "C" { typedef 
#line 3261
struct tagMCI_SYSINFO_PARMSW { 
DWORD_PTR dwCallback; 
LPWSTR lpstrReturn; 
DWORD dwRetSize; 
DWORD dwNumber; 
UINT wDeviceType; 
} MCI_SYSINFO_PARMSW; }extern "C" { typedef tagMCI_SYSINFO_PARMSW *PMCI_SYSINFO_PARMSW; }extern "C" { typedef tagMCI_SYSINFO_PARMSW *LPMCI_SYSINFO_PARMSW; }
#line 3273
extern "C" { typedef MCI_SYSINFO_PARMSA MCI_SYSINFO_PARMS; }
extern "C" { typedef PMCI_SYSINFO_PARMSA PMCI_SYSINFO_PARMS; }
extern "C" { typedef LPMCI_SYSINFO_PARMSA LPMCI_SYSINFO_PARMS; }
#line 3294 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 3290
struct tagMCI_SET_PARMS { 
DWORD_PTR dwCallback; 
DWORD dwTimeFormat; 
DWORD dwAudio; 
} MCI_SET_PARMS; }extern "C" { typedef tagMCI_SET_PARMS *PMCI_SET_PARMS; }extern "C" { typedef tagMCI_SET_PARMS *LPMCI_SET_PARMS; }
#line 3309 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 3298 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
struct tagMCI_BREAK_PARMS { 
DWORD_PTR dwCallback; 

int nVirtKey; 
HWND hwndBreak; 
#line 3309 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
} MCI_BREAK_PARMS; }extern "C" { typedef tagMCI_BREAK_PARMS *PMCI_BREAK_PARMS; }extern "C" { typedef tagMCI_BREAK_PARMS *LPMCI_BREAK_PARMS; }
#line 3318
extern "C" { typedef 
#line 3315
struct tagMCI_SAVE_PARMSA { 
DWORD_PTR dwCallback; 
LPCSTR lpfilename; 
} MCI_SAVE_PARMSA; }extern "C" { typedef tagMCI_SAVE_PARMSA *PMCI_SAVE_PARMSA; }extern "C" { typedef tagMCI_SAVE_PARMSA *LPMCI_SAVE_PARMSA; }



extern "C" { typedef 
#line 3319
struct tagMCI_SAVE_PARMSW { 
DWORD_PTR dwCallback; 
LPCWSTR lpfilename; 
} MCI_SAVE_PARMSW; }extern "C" { typedef tagMCI_SAVE_PARMSW *PMCI_SAVE_PARMSW; }extern "C" { typedef tagMCI_SAVE_PARMSW *LPMCI_SAVE_PARMSW; }
#line 3328
extern "C" { typedef MCI_SAVE_PARMSA MCI_SAVE_PARMS; }
extern "C" { typedef PMCI_SAVE_PARMSA PMCI_SAVE_PARMS; }
extern "C" { typedef LPMCI_SAVE_PARMSA LPMCI_SAVE_PARMS; }
#line 3347 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 3344
struct tagMCI_LOAD_PARMSA { 
DWORD_PTR dwCallback; 
LPCSTR lpfilename; 
} MCI_LOAD_PARMSA; }extern "C" { typedef tagMCI_LOAD_PARMSA *PMCI_LOAD_PARMSA; }extern "C" { typedef tagMCI_LOAD_PARMSA *LPMCI_LOAD_PARMSA; }



extern "C" { typedef 
#line 3348
struct tagMCI_LOAD_PARMSW { 
DWORD_PTR dwCallback; 
LPCWSTR lpfilename; 
} MCI_LOAD_PARMSW; }extern "C" { typedef tagMCI_LOAD_PARMSW *PMCI_LOAD_PARMSW; }extern "C" { typedef tagMCI_LOAD_PARMSW *LPMCI_LOAD_PARMSW; }
#line 3357
extern "C" { typedef MCI_LOAD_PARMSA MCI_LOAD_PARMS; }
extern "C" { typedef PMCI_LOAD_PARMSA PMCI_LOAD_PARMS; }
extern "C" { typedef LPMCI_LOAD_PARMSA LPMCI_LOAD_PARMS; }
#line 3375 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 3371
struct tagMCI_RECORD_PARMS { 
DWORD_PTR dwCallback; 
DWORD dwFrom; 
DWORD dwTo; 
} MCI_RECORD_PARMS; }extern "C" { typedef tagMCI_RECORD_PARMS *LPMCI_RECORD_PARMS; }
#line 3436
extern "C" { typedef 
#line 3431
struct tagMCI_VD_PLAY_PARMS { 
DWORD_PTR dwCallback; 
DWORD dwFrom; 
DWORD dwTo; 
DWORD dwSpeed; 
} MCI_VD_PLAY_PARMS; }extern "C" { typedef tagMCI_VD_PLAY_PARMS *PMCI_VD_PLAY_PARMS; }extern "C" { typedef tagMCI_VD_PLAY_PARMS *LPMCI_VD_PLAY_PARMS; }
#line 3443
extern "C" { typedef 
#line 3440
struct tagMCI_VD_STEP_PARMS { 
DWORD_PTR dwCallback; 
DWORD dwFrames; 
} MCI_VD_STEP_PARMS; }extern "C" { typedef tagMCI_VD_STEP_PARMS *PMCI_VD_STEP_PARMS; }extern "C" { typedef tagMCI_VD_STEP_PARMS *LPMCI_VD_STEP_PARMS; }
#line 3452
extern "C" { typedef 
#line 3449
struct tagMCI_VD_ESCAPE_PARMSA { 
DWORD_PTR dwCallback; 
LPCSTR lpstrCommand; 
} MCI_VD_ESCAPE_PARMSA; }extern "C" { typedef tagMCI_VD_ESCAPE_PARMSA *PMCI_VD_ESCAPE_PARMSA; }extern "C" { typedef tagMCI_VD_ESCAPE_PARMSA *LPMCI_VD_ESCAPE_PARMSA; }



extern "C" { typedef 
#line 3453
struct tagMCI_VD_ESCAPE_PARMSW { 
DWORD_PTR dwCallback; 
LPCWSTR lpstrCommand; 
} MCI_VD_ESCAPE_PARMSW; }extern "C" { typedef tagMCI_VD_ESCAPE_PARMSW *PMCI_VD_ESCAPE_PARMSW; }extern "C" { typedef tagMCI_VD_ESCAPE_PARMSW *LPMCI_VD_ESCAPE_PARMSW; }
#line 3462
extern "C" { typedef MCI_VD_ESCAPE_PARMSA MCI_VD_ESCAPE_PARMS; }
extern "C" { typedef PMCI_VD_ESCAPE_PARMSA PMCI_VD_ESCAPE_PARMS; }
extern "C" { typedef LPMCI_VD_ESCAPE_PARMSA LPMCI_VD_ESCAPE_PARMS; }
#line 3532 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 3525
struct tagMCI_WAVE_OPEN_PARMSA { 
DWORD_PTR dwCallback; 
MCIDEVICEID wDeviceID; 
LPCSTR lpstrDeviceType; 
LPCSTR lpstrElementName; 
LPCSTR lpstrAlias; 
DWORD dwBufferSeconds; 
} MCI_WAVE_OPEN_PARMSA; }extern "C" { typedef tagMCI_WAVE_OPEN_PARMSA *PMCI_WAVE_OPEN_PARMSA; }extern "C" { typedef tagMCI_WAVE_OPEN_PARMSA *LPMCI_WAVE_OPEN_PARMSA; }
#line 3540
extern "C" { typedef 
#line 3533
struct tagMCI_WAVE_OPEN_PARMSW { 
DWORD_PTR dwCallback; 
MCIDEVICEID wDeviceID; 
LPCWSTR lpstrDeviceType; 
LPCWSTR lpstrElementName; 
LPCWSTR lpstrAlias; 
DWORD dwBufferSeconds; 
} MCI_WAVE_OPEN_PARMSW; }extern "C" { typedef tagMCI_WAVE_OPEN_PARMSW *PMCI_WAVE_OPEN_PARMSW; }extern "C" { typedef tagMCI_WAVE_OPEN_PARMSW *LPMCI_WAVE_OPEN_PARMSW; }
#line 3546
extern "C" { typedef MCI_WAVE_OPEN_PARMSA MCI_WAVE_OPEN_PARMS; }
extern "C" { typedef PMCI_WAVE_OPEN_PARMSA PMCI_WAVE_OPEN_PARMS; }
extern "C" { typedef LPMCI_WAVE_OPEN_PARMSA LPMCI_WAVE_OPEN_PARMS; }
#line 3569 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 3565
struct tagMCI_WAVE_DELETE_PARMS { 
DWORD_PTR dwCallback; 
DWORD dwFrom; 
DWORD dwTo; 
} MCI_WAVE_DELETE_PARMS; }extern "C" { typedef tagMCI_WAVE_DELETE_PARMS *PMCI_WAVE_DELETE_PARMS; }extern "C" { typedef tagMCI_WAVE_DELETE_PARMS *LPMCI_WAVE_DELETE_PARMS; }
#line 3596 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 3573 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
struct tagMCI_WAVE_SET_PARMS { 
DWORD_PTR dwCallback; 
DWORD dwTimeFormat; 
DWORD dwAudio; 

UINT wInput; 
UINT wOutput; 
#line 3586 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
WORD wFormatTag; 
WORD wReserved2; 
WORD nChannels; 
WORD wReserved3; 
DWORD nSamplesPerSec; 
DWORD nAvgBytesPerSec; 
WORD nBlockAlign; 
WORD wReserved4; 
WORD wBitsPerSample; 
WORD wReserved5; 
} MCI_WAVE_SET_PARMS; }extern "C" { typedef tagMCI_WAVE_SET_PARMS *PMCI_WAVE_SET_PARMS; }extern "C" { typedef tagMCI_WAVE_SET_PARMS *LPMCI_WAVE_SET_PARMS; }
#line 3646
extern "C" { typedef 
#line 3637
struct tagMCI_SEQ_SET_PARMS { 
DWORD_PTR dwCallback; 
DWORD dwTimeFormat; 
DWORD dwAudio; 
DWORD dwTempo; 
DWORD dwPort; 
DWORD dwSlave; 
DWORD dwMaster; 
DWORD dwOffset; 
} MCI_SEQ_SET_PARMS; }extern "C" { typedef tagMCI_SEQ_SET_PARMS *PMCI_SEQ_SET_PARMS; }extern "C" { typedef tagMCI_SEQ_SET_PARMS *LPMCI_SEQ_SET_PARMS; }
#line 3725
extern "C" { typedef 
#line 3717
struct tagMCI_ANIM_OPEN_PARMSA { 
DWORD_PTR dwCallback; 
MCIDEVICEID wDeviceID; 
LPCSTR lpstrDeviceType; 
LPCSTR lpstrElementName; 
LPCSTR lpstrAlias; 
DWORD dwStyle; 
HWND hWndParent; 
} MCI_ANIM_OPEN_PARMSA; }extern "C" { typedef tagMCI_ANIM_OPEN_PARMSA *PMCI_ANIM_OPEN_PARMSA; }extern "C" { typedef tagMCI_ANIM_OPEN_PARMSA *LPMCI_ANIM_OPEN_PARMSA; }
#line 3734
extern "C" { typedef 
#line 3726
struct tagMCI_ANIM_OPEN_PARMSW { 
DWORD_PTR dwCallback; 
MCIDEVICEID wDeviceID; 
LPCWSTR lpstrDeviceType; 
LPCWSTR lpstrElementName; 
LPCWSTR lpstrAlias; 
DWORD dwStyle; 
HWND hWndParent; 
} MCI_ANIM_OPEN_PARMSW; }extern "C" { typedef tagMCI_ANIM_OPEN_PARMSW *PMCI_ANIM_OPEN_PARMSW; }extern "C" { typedef tagMCI_ANIM_OPEN_PARMSW *LPMCI_ANIM_OPEN_PARMSW; }
#line 3740
extern "C" { typedef MCI_ANIM_OPEN_PARMSA MCI_ANIM_OPEN_PARMS; }
extern "C" { typedef PMCI_ANIM_OPEN_PARMSA PMCI_ANIM_OPEN_PARMS; }
extern "C" { typedef LPMCI_ANIM_OPEN_PARMSA LPMCI_ANIM_OPEN_PARMS; }
#line 3766 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 3761
struct tagMCI_ANIM_PLAY_PARMS { 
DWORD_PTR dwCallback; 
DWORD dwFrom; 
DWORD dwTo; 
DWORD dwSpeed; 
} MCI_ANIM_PLAY_PARMS; }extern "C" { typedef tagMCI_ANIM_PLAY_PARMS *PMCI_ANIM_PLAY_PARMS; }extern "C" { typedef tagMCI_ANIM_PLAY_PARMS *LPMCI_ANIM_PLAY_PARMS; }
#line 3773
extern "C" { typedef 
#line 3770
struct tagMCI_ANIM_STEP_PARMS { 
DWORD_PTR dwCallback; 
DWORD dwFrames; 
} MCI_ANIM_STEP_PARMS; }extern "C" { typedef tagMCI_ANIM_STEP_PARMS *PMCI_ANIM_STEP_PARMS; }extern "C" { typedef tagMCI_ANIM_STEP_PARMS *LPMCI_ANIM_STEP_PARMS; }
#line 3784
extern "C" { typedef 
#line 3779
struct tagMCI_ANIM_WINDOW_PARMSA { 
DWORD_PTR dwCallback; 
HWND hWnd; 
UINT nCmdShow; 
LPCSTR lpstrText; 
} MCI_ANIM_WINDOW_PARMSA; }extern "C" { typedef tagMCI_ANIM_WINDOW_PARMSA *PMCI_ANIM_WINDOW_PARMSA; }extern "C" { typedef tagMCI_ANIM_WINDOW_PARMSA *LPMCI_ANIM_WINDOW_PARMSA; }
#line 3790
extern "C" { typedef 
#line 3785
struct tagMCI_ANIM_WINDOW_PARMSW { 
DWORD_PTR dwCallback; 
HWND hWnd; 
UINT nCmdShow; 
LPCWSTR lpstrText; 
} MCI_ANIM_WINDOW_PARMSW; }extern "C" { typedef tagMCI_ANIM_WINDOW_PARMSW *PMCI_ANIM_WINDOW_PARMSW; }extern "C" { typedef tagMCI_ANIM_WINDOW_PARMSW *LPMCI_ANIM_WINDOW_PARMSW; }
#line 3796
extern "C" { typedef MCI_ANIM_WINDOW_PARMSA MCI_ANIM_WINDOW_PARMS; }
extern "C" { typedef PMCI_ANIM_WINDOW_PARMSA PMCI_ANIM_WINDOW_PARMS; }
extern "C" { typedef LPMCI_ANIM_WINDOW_PARMSA LPMCI_ANIM_WINDOW_PARMS; }
#line 3822 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 3814 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
struct tagMCI_ANIM_RECT_PARMS { 
DWORD_PTR dwCallback; 




RECT rc; 
#line 3822 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
} MCI_ANIM_RECT_PARMS; }
extern "C" { typedef MCI_ANIM_RECT_PARMS *PMCI_ANIM_RECT_PARMS; }
extern "C" { typedef MCI_ANIM_RECT_PARMS *LPMCI_ANIM_RECT_PARMS; }
#line 3832
extern "C" { typedef 
#line 3828
struct tagMCI_ANIM_UPDATE_PARMS { 
DWORD_PTR dwCallback; 
RECT rc; 
HDC hDC; 
} MCI_ANIM_UPDATE_PARMS; }extern "C" { typedef tagMCI_ANIM_UPDATE_PARMS *PMCI_ANIM_UPDATE_PARMS; }extern "C" { typedef tagMCI_ANIM_UPDATE_PARMS *LPMCI_ANIM_UPDATE_PARMS; }
#line 3888
extern "C" { typedef 
#line 3880
struct tagMCI_OVLY_OPEN_PARMSA { 
DWORD_PTR dwCallback; 
MCIDEVICEID wDeviceID; 
LPCSTR lpstrDeviceType; 
LPCSTR lpstrElementName; 
LPCSTR lpstrAlias; 
DWORD dwStyle; 
HWND hWndParent; 
} MCI_OVLY_OPEN_PARMSA; }extern "C" { typedef tagMCI_OVLY_OPEN_PARMSA *PMCI_OVLY_OPEN_PARMSA; }extern "C" { typedef tagMCI_OVLY_OPEN_PARMSA *LPMCI_OVLY_OPEN_PARMSA; }
#line 3897
extern "C" { typedef 
#line 3889
struct tagMCI_OVLY_OPEN_PARMSW { 
DWORD_PTR dwCallback; 
MCIDEVICEID wDeviceID; 
LPCWSTR lpstrDeviceType; 
LPCWSTR lpstrElementName; 
LPCWSTR lpstrAlias; 
DWORD dwStyle; 
HWND hWndParent; 
} MCI_OVLY_OPEN_PARMSW; }extern "C" { typedef tagMCI_OVLY_OPEN_PARMSW *PMCI_OVLY_OPEN_PARMSW; }extern "C" { typedef tagMCI_OVLY_OPEN_PARMSW *LPMCI_OVLY_OPEN_PARMSW; }
#line 3903
extern "C" { typedef MCI_OVLY_OPEN_PARMSA MCI_OVLY_OPEN_PARMS; }
extern "C" { typedef PMCI_OVLY_OPEN_PARMSA PMCI_OVLY_OPEN_PARMS; }
extern "C" { typedef LPMCI_OVLY_OPEN_PARMSA LPMCI_OVLY_OPEN_PARMS; }
#line 3931 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 3926
struct tagMCI_OVLY_WINDOW_PARMSA { 
DWORD_PTR dwCallback; 
HWND hWnd; 
UINT nCmdShow; 
LPCSTR lpstrText; 
} MCI_OVLY_WINDOW_PARMSA; }extern "C" { typedef tagMCI_OVLY_WINDOW_PARMSA *PMCI_OVLY_WINDOW_PARMSA; }extern "C" { typedef tagMCI_OVLY_WINDOW_PARMSA *LPMCI_OVLY_WINDOW_PARMSA; }
#line 3937
extern "C" { typedef 
#line 3932
struct tagMCI_OVLY_WINDOW_PARMSW { 
DWORD_PTR dwCallback; 
HWND hWnd; 
UINT nCmdShow; 
LPCWSTR lpstrText; 
} MCI_OVLY_WINDOW_PARMSW; }extern "C" { typedef tagMCI_OVLY_WINDOW_PARMSW *PMCI_OVLY_WINDOW_PARMSW; }extern "C" { typedef tagMCI_OVLY_WINDOW_PARMSW *LPMCI_OVLY_WINDOW_PARMSW; }
#line 3943
extern "C" { typedef MCI_OVLY_WINDOW_PARMSA MCI_OVLY_WINDOW_PARMS; }
extern "C" { typedef PMCI_OVLY_WINDOW_PARMSA PMCI_OVLY_WINDOW_PARMS; }
extern "C" { typedef LPMCI_OVLY_WINDOW_PARMSA LPMCI_OVLY_WINDOW_PARMS; }
#line 3968 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 3960 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
struct tagMCI_OVLY_RECT_PARMS { 
DWORD_PTR dwCallback; 




RECT rc; 
#line 3968 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
} MCI_OVLY_RECT_PARMS; }extern "C" { typedef tagMCI_OVLY_RECT_PARMS *PMCI_OVLY_RECT_PARMS; }extern "C" { typedef tagMCI_OVLY_RECT_PARMS *LPMCI_OVLY_RECT_PARMS; }
#line 3978
extern "C" { typedef 
#line 3974
struct tagMCI_OVLY_SAVE_PARMSA { 
DWORD_PTR dwCallback; 
LPCSTR lpfilename; 
RECT rc; 
} MCI_OVLY_SAVE_PARMSA; }extern "C" { typedef tagMCI_OVLY_SAVE_PARMSA *PMCI_OVLY_SAVE_PARMSA; }extern "C" { typedef tagMCI_OVLY_SAVE_PARMSA *LPMCI_OVLY_SAVE_PARMSA; }




extern "C" { typedef 
#line 3979
struct tagMCI_OVLY_SAVE_PARMSW { 
DWORD_PTR dwCallback; 
LPCWSTR lpfilename; 
RECT rc; 
} MCI_OVLY_SAVE_PARMSW; }extern "C" { typedef tagMCI_OVLY_SAVE_PARMSW *PMCI_OVLY_SAVE_PARMSW; }extern "C" { typedef tagMCI_OVLY_SAVE_PARMSW *LPMCI_OVLY_SAVE_PARMSW; }
#line 3989
extern "C" { typedef MCI_OVLY_SAVE_PARMSA MCI_OVLY_SAVE_PARMS; }
extern "C" { typedef PMCI_OVLY_SAVE_PARMSA PMCI_OVLY_SAVE_PARMS; }
extern "C" { typedef LPMCI_OVLY_SAVE_PARMSA LPMCI_OVLY_SAVE_PARMS; }
#line 4009 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mmsystem.h"
extern "C" { typedef 
#line 4005
struct tagMCI_OVLY_LOAD_PARMSA { 
DWORD_PTR dwCallback; 
LPCSTR lpfilename; 
RECT rc; 
} MCI_OVLY_LOAD_PARMSA; }extern "C" { typedef tagMCI_OVLY_LOAD_PARMSA *PMCI_OVLY_LOAD_PARMSA; }extern "C" { typedef tagMCI_OVLY_LOAD_PARMSA *LPMCI_OVLY_LOAD_PARMSA; }




extern "C" { typedef 
#line 4010
struct tagMCI_OVLY_LOAD_PARMSW { 
DWORD_PTR dwCallback; 
LPCWSTR lpfilename; 
RECT rc; 
} MCI_OVLY_LOAD_PARMSW; }extern "C" { typedef tagMCI_OVLY_LOAD_PARMSW *PMCI_OVLY_LOAD_PARMSW; }extern "C" { typedef tagMCI_OVLY_LOAD_PARMSW *LPMCI_OVLY_LOAD_PARMSW; }
#line 4020
extern "C" { typedef MCI_OVLY_LOAD_PARMSA MCI_OVLY_LOAD_PARMS; }
extern "C" { typedef PMCI_OVLY_LOAD_PARMSA PMCI_OVLY_LOAD_PARMS; }
extern "C" { typedef LPMCI_OVLY_LOAD_PARMSA LPMCI_OVLY_LOAD_PARMS; }
#line 27 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack ( pop )
#line 63 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\nb30.h"
extern "C" { typedef 
#line 40 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\nb30.h"
struct _NCB { 
UCHAR ncb_command; 
UCHAR ncb_retcode; 
UCHAR ncb_lsn; 
UCHAR ncb_num; 
PUCHAR ncb_buffer; 
WORD ncb_length; 
UCHAR ncb_callname[16]; 
UCHAR ncb_name[16]; 
UCHAR ncb_rto; 
UCHAR ncb_sto; 
void (__stdcall *ncb_post)(_NCB *); 
UCHAR ncb_lana_num; 
UCHAR ncb_cmd_cplt; 



UCHAR ncb_reserve[10]; 
#line 59 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\nb30.h"
HANDLE ncb_event; 



} NCB; }extern "C" { typedef _NCB *PNCB; }
#line 102
extern "C" { typedef 
#line 70
struct _ADAPTER_STATUS { 
UCHAR adapter_address[6]; 
UCHAR rev_major; 
UCHAR reserved0; 
UCHAR adapter_type; 
UCHAR rev_minor; 
WORD duration; 
WORD frmr_recv; 
WORD frmr_xmit; 

WORD iframe_recv_err; 

WORD xmit_aborts; 
DWORD xmit_success; 
DWORD recv_success; 

WORD iframe_xmit_err; 

WORD recv_buff_unavail; 
WORD t1_timeouts; 
WORD ti_timeouts; 
DWORD reserved1; 
WORD free_ncbs; 
WORD max_cfg_ncbs; 
WORD max_ncbs; 
WORD xmit_buf_unavail; 
WORD max_dgram_size; 
WORD pending_sess; 
WORD max_cfg_sess; 
WORD max_sess; 
WORD max_sess_pkt_size; 
WORD name_count; 
} ADAPTER_STATUS; }extern "C" { typedef _ADAPTER_STATUS *PADAPTER_STATUS; }
#line 108
extern "C" { typedef 
#line 104
struct _NAME_BUFFER { 
UCHAR name[16]; 
UCHAR name_num; 
UCHAR name_flags; 
} NAME_BUFFER; }extern "C" { typedef _NAME_BUFFER *PNAME_BUFFER; }
#line 135
extern "C" { typedef 
#line 130
struct _SESSION_HEADER { 
UCHAR sess_name; 
UCHAR num_sess; 
UCHAR rcv_dg_outstanding; 
UCHAR rcv_any_outstanding; 
} SESSION_HEADER; }extern "C" { typedef _SESSION_HEADER *PSESSION_HEADER; }
#line 144
extern "C" { typedef 
#line 137
struct _SESSION_BUFFER { 
UCHAR lsn; 
UCHAR state; 
UCHAR local_name[16]; 
UCHAR remote_name[16]; 
UCHAR rcvs_outstanding; 
UCHAR sends_outstanding; 
} SESSION_BUFFER; }extern "C" { typedef _SESSION_BUFFER *PSESSION_BUFFER; }
#line 165
extern "C" { typedef 
#line 162
struct _LANA_ENUM { 
UCHAR length; 
UCHAR lana[(254 + 1)]; 
} LANA_ENUM; }extern "C" { typedef _LANA_ENUM *PLANA_ENUM; }
#line 176
extern "C" { typedef 
#line 172
struct _FIND_NAME_HEADER { 
WORD node_count; 
UCHAR reserved; 
UCHAR unique_group; 
} FIND_NAME_HEADER; }extern "C" { typedef _FIND_NAME_HEADER *PFIND_NAME_HEADER; }
#line 185
extern "C" { typedef 
#line 178
struct _FIND_NAME_BUFFER { 
UCHAR length; 
UCHAR access_control; 
UCHAR frame_control; 
UCHAR destination_addr[6]; 
UCHAR source_addr[6]; 
UCHAR routing_info[18]; 
} FIND_NAME_BUFFER; }extern "C" { typedef _FIND_NAME_BUFFER *PFIND_NAME_BUFFER; }
#line 196
extern "C" { typedef 
#line 192
struct _ACTION_HEADER { 
ULONG transport_id; 
USHORT action_code; 
USHORT reserved; 
} ACTION_HEADER; }extern "C" { typedef _ACTION_HEADER *PACTION_HEADER; }
#line 299
extern "C" { extern UCHAR __stdcall Netbios(PNCB); } 
#line 65 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpc.h"
extern "C" { typedef void *I_RPC_HANDLE; }



extern "C" { typedef long RPC_STATUS; }
#line 52 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { typedef unsigned char *RPC_CSTR; }
#line 56 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { typedef unsigned short *RPC_WSTR; }
#line 59 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { typedef I_RPC_HANDLE RPC_BINDING_HANDLE; }
extern "C" { typedef RPC_BINDING_HANDLE handle_t; }
#line 69
extern "C" { typedef GUID UUID; }
#line 79 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { typedef 
#line 75
struct _RPC_BINDING_VECTOR { 

unsigned long Count; 
RPC_BINDING_HANDLE BindingH[1]; 
} RPC_BINDING_VECTOR; }
#line 88 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { typedef 
#line 84
struct _UUID_VECTOR { 

unsigned long Count; 
UUID *Uuid[1]; 
} UUID_VECTOR; }
#line 93 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { typedef void *RPC_IF_HANDLE; }
#line 102
extern "C" { typedef 
#line 97
struct _RPC_IF_ID { 

UUID Uuid; 
unsigned short VersMajor; 
unsigned short VersMinor; 
} RPC_IF_ID; }
#line 185 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { typedef 
#line 181
struct _RPC_PROTSEQ_VECTORA { 

unsigned Count; 
unsigned char *Protseq[1]; 
} RPC_PROTSEQ_VECTORA; }
#line 191
extern "C" { typedef 
#line 187
struct _RPC_PROTSEQ_VECTORW { 

unsigned Count; 
unsigned short *Protseq[1]; 
} RPC_PROTSEQ_VECTORW; }
#line 212 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { typedef 
#line 208
struct _RPC_POLICY { 
unsigned Length; 
unsigned long EndpointFlags; 
unsigned long NICFlags; 
} RPC_POLICY; }extern "C" { typedef _RPC_POLICY *PRPC_POLICY; }


extern "C" { typedef void __stdcall RPC_OBJECT_INQ_FN(UUID *, UUID *, RPC_STATUS *); }
#line 223
extern "C" { typedef RPC_STATUS __stdcall RPC_IF_CALLBACK_FN(RPC_IF_HANDLE, void *); }
#line 229
extern "C" { typedef void __stdcall RPC_SECURITY_CALLBACK_FN(void *); }
#line 239
extern "C" { typedef 
#line 236
struct RPC_STATS_VECTOR { 
unsigned Count; 
unsigned long Stats[1]; 
} RPC_STATS_VECTOR; }
#line 250
extern "C" { typedef 
#line 247
struct RPC_IF_ID_VECTOR { 
unsigned long Count; 
RPC_IF_ID *IfId[1]; 
} RPC_IF_ID_VECTOR; }
#line 256
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcBindingCopy(RPC_BINDING_HANDLE, RPC_BINDING_HANDLE *); } 
#line 265
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcBindingFree(RPC_BINDING_HANDLE *); } 
#line 273
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcBindingSetOption(RPC_BINDING_HANDLE, unsigned long, ULONG_PTR); } 
#line 283
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcBindingInqOption(RPC_BINDING_HANDLE, unsigned long, ULONG_PTR *); } 
#line 298
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcBindingFromStringBindingA(RPC_CSTR, RPC_BINDING_HANDLE *); } 
#line 306
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcBindingFromStringBindingW(RPC_WSTR, RPC_BINDING_HANDLE *); } 
#line 335 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcSsGetContextBinding(void *, RPC_BINDING_HANDLE *); } 
#line 344
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcBindingInqObject(RPC_BINDING_HANDLE, UUID *); } 
#line 353
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcBindingReset(RPC_BINDING_HANDLE); } 
#line 364
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcBindingSetObject(RPC_BINDING_HANDLE, UUID *); } 
#line 373
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcMgmtInqDefaultProtectLevel(unsigned long, unsigned long *); } 
#line 385
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcBindingToStringBindingA(RPC_BINDING_HANDLE, RPC_CSTR *); } 
#line 393
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcBindingToStringBindingW(RPC_BINDING_HANDLE, RPC_WSTR *); } 
#line 420 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcBindingVectorFree(RPC_BINDING_VECTOR **); } 
#line 433
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcStringBindingComposeA(RPC_CSTR, RPC_CSTR, RPC_CSTR, RPC_CSTR, RPC_CSTR, RPC_CSTR *); } 
#line 445
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcStringBindingComposeW(RPC_WSTR, RPC_WSTR, RPC_WSTR, RPC_WSTR, RPC_WSTR, RPC_WSTR *); } 
#line 483 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcStringBindingParseA(RPC_CSTR, RPC_CSTR *, RPC_CSTR *, RPC_CSTR *, RPC_CSTR *, RPC_CSTR *); } 
#line 495
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcStringBindingParseW(RPC_WSTR, RPC_WSTR *, RPC_WSTR *, RPC_WSTR *, RPC_WSTR *, RPC_WSTR *); } 
#line 535 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcStringFreeA(RPC_CSTR *); } 
#line 542
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcStringFreeW(RPC_WSTR *); } 
#line 567 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcIfInqId(RPC_IF_HANDLE, RPC_IF_ID *); } 
#line 579
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNetworkIsProtseqValidA(RPC_CSTR); } 
#line 586
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNetworkIsProtseqValidW(RPC_WSTR); } 
#line 611 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcMgmtInqComTimeout(RPC_BINDING_HANDLE, unsigned *); } 
#line 620
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcMgmtSetComTimeout(RPC_BINDING_HANDLE, unsigned); } 
#line 629
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcMgmtSetCancelTimeout(long); } 
#line 641
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNetworkInqProtseqsA(RPC_PROTSEQ_VECTORA **); } 
#line 648
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNetworkInqProtseqsW(RPC_PROTSEQ_VECTORW **); } 
#line 673 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcObjectInqType(UUID *, UUID *); } 
#line 682
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcObjectSetInqFn(RPC_OBJECT_INQ_FN *); } 
#line 690
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcObjectSetType(UUID *, UUID *); } 
#line 702
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcProtseqVectorFreeA(RPC_PROTSEQ_VECTORA **); } 
#line 709
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcProtseqVectorFreeW(RPC_PROTSEQ_VECTORW **); } 
#line 734 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcServerInqBindings(RPC_BINDING_VECTOR **); } 
#line 742
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcServerInqIf(RPC_IF_HANDLE, UUID *, void **); } 
#line 752
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcServerListen(unsigned, unsigned, unsigned); } 
#line 762
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcServerRegisterIf(RPC_IF_HANDLE, UUID *, void *); } 
#line 772
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcServerRegisterIfEx(RPC_IF_HANDLE, UUID *, void *, unsigned, unsigned, RPC_IF_CALLBACK_FN *); } 
#line 785
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcServerRegisterIf2(RPC_IF_HANDLE, UUID *, void *, unsigned, unsigned, unsigned, RPC_IF_CALLBACK_FN *); } 
#line 800
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcServerUnregisterIf(RPC_IF_HANDLE, UUID *, unsigned); } 
#line 811
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcServerUnregisterIfEx(RPC_IF_HANDLE, UUID *, int); } 
#line 822 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcServerUseAllProtseqs(unsigned, void *); } 
#line 831
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcServerUseAllProtseqsEx(unsigned, void *, PRPC_POLICY); } 
#line 841
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcServerUseAllProtseqsIf(unsigned, RPC_IF_HANDLE, void *); } 
#line 851
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcServerUseAllProtseqsIfEx(unsigned, RPC_IF_HANDLE, void *, PRPC_POLICY); } 
#line 866
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcServerUseProtseqA(RPC_CSTR, unsigned, void *); } 
#line 875
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcServerUseProtseqExA(RPC_CSTR, unsigned, void *, PRPC_POLICY); } 
#line 885
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcServerUseProtseqW(RPC_WSTR, unsigned, void *); } 
#line 894
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcServerUseProtseqExW(RPC_WSTR, unsigned, void *, PRPC_POLICY); } 
#line 939 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcServerUseProtseqEpA(RPC_CSTR, unsigned, RPC_CSTR, void *); } 
#line 949
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcServerUseProtseqEpExA(RPC_CSTR, unsigned, RPC_CSTR, void *, PRPC_POLICY); } 
#line 960
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcServerUseProtseqEpW(RPC_WSTR, unsigned, RPC_WSTR, void *); } 
#line 970
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcServerUseProtseqEpExW(RPC_WSTR, unsigned, RPC_WSTR, void *, PRPC_POLICY); } 
#line 1018 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcServerUseProtseqIfA(RPC_CSTR, unsigned, RPC_IF_HANDLE, void *); } 
#line 1028
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcServerUseProtseqIfExA(RPC_CSTR, unsigned, RPC_IF_HANDLE, void *, PRPC_POLICY); } 
#line 1039
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcServerUseProtseqIfW(RPC_WSTR, unsigned, RPC_IF_HANDLE, void *); } 
#line 1049
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcServerUseProtseqIfExW(RPC_WSTR, unsigned, RPC_IF_HANDLE, void *, PRPC_POLICY); } 
#line 1093 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { extern __declspec( dllimport ) void __stdcall RpcServerYield(); } 
#line 1101
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcMgmtStatsVectorFree(RPC_STATS_VECTOR **); } 
#line 1109
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcMgmtInqStats(RPC_BINDING_HANDLE, RPC_STATS_VECTOR **); } 
#line 1118
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcMgmtIsServerListening(RPC_BINDING_HANDLE); } 
#line 1126
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcMgmtStopServerListening(RPC_BINDING_HANDLE); } 
#line 1134
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcMgmtWaitServerListen(); } 
#line 1142
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcMgmtSetServerStackSize(unsigned long); } 
#line 1150
extern "C" { extern __declspec( dllimport ) void __stdcall RpcSsDontSerializeContext(); } 
#line 1158
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcMgmtEnableIdleCleanup(); } 
#line 1165
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcMgmtInqIfIds(RPC_BINDING_HANDLE, RPC_IF_ID_VECTOR **); } 
#line 1173
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcIfIdVectorFree(RPC_IF_ID_VECTOR **); } 
#line 1182
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcMgmtInqServerPrincNameA(RPC_BINDING_HANDLE, unsigned long, RPC_CSTR *); } 
#line 1191
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcMgmtInqServerPrincNameW(RPC_BINDING_HANDLE, unsigned long, RPC_WSTR *); } 
#line 1221 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcServerInqDefaultPrincNameA(unsigned long, RPC_CSTR *); } 
#line 1229
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcServerInqDefaultPrincNameW(unsigned long, RPC_WSTR *); } 
#line 1256 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcEpResolveBinding(RPC_BINDING_HANDLE, RPC_IF_HANDLE); } 
#line 1268
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsBindingInqEntryNameA(RPC_BINDING_HANDLE, unsigned long, RPC_CSTR *); } 
#line 1277
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsBindingInqEntryNameW(RPC_BINDING_HANDLE, unsigned long, RPC_WSTR *); } 
#line 1302 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { typedef void *RPC_AUTH_IDENTITY_HANDLE; }
extern "C" { typedef void *RPC_AUTHZ_HANDLE; }
#line 1370 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { typedef 
#line 1365
struct _RPC_SECURITY_QOS { 
unsigned long Version; 
unsigned long Capabilities; 
unsigned long IdentityTracking; 
unsigned long ImpersonationType; 
} RPC_SECURITY_QOS; }extern "C" { typedef _RPC_SECURITY_QOS *PRPC_SECURITY_QOS; }
#line 1386
extern "C" { typedef 
#line 1378
struct _SEC_WINNT_AUTH_IDENTITY_W { 
unsigned short *User; 
unsigned long UserLength; 
unsigned short *Domain; 
unsigned long DomainLength; 
unsigned short *Password; 
unsigned long PasswordLength; 
unsigned long Flags; 
} SEC_WINNT_AUTH_IDENTITY_W; }extern "C" { typedef _SEC_WINNT_AUTH_IDENTITY_W *PSEC_WINNT_AUTH_IDENTITY_W; }
#line 1400 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { typedef 
#line 1392
struct _SEC_WINNT_AUTH_IDENTITY_A { 
unsigned char *User; 
unsigned long UserLength; 
unsigned char *Domain; 
unsigned long DomainLength; 
unsigned char *Password; 
unsigned long PasswordLength; 
unsigned long Flags; 
} SEC_WINNT_AUTH_IDENTITY_A; }extern "C" { typedef _SEC_WINNT_AUTH_IDENTITY_A *PSEC_WINNT_AUTH_IDENTITY_A; }
#line 1447 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { typedef 
#line 1439
struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W { 

SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials; 
unsigned long Flags; 
unsigned long AuthenticationTarget; 
unsigned long NumberOfAuthnSchemes; 
unsigned long *AuthnSchemes; 
unsigned short *ServerCertificateSubject; 
} RPC_HTTP_TRANSPORT_CREDENTIALS_W; }extern "C" { typedef _RPC_HTTP_TRANSPORT_CREDENTIALS_W *PRPC_HTTP_TRANSPORT_CREDENTIALS_W; }
#line 1457
extern "C" { typedef 
#line 1449
struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A { 

SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials; 
unsigned long Flags; 
unsigned long AuthenticationTarget; 
unsigned long NumberOfAuthnSchemes; 
unsigned long *AuthnSchemes; 
unsigned char *ServerCertificateSubject; 
} RPC_HTTP_TRANSPORT_CREDENTIALS_A; }extern "C" { typedef _RPC_HTTP_TRANSPORT_CREDENTIALS_A *PRPC_HTTP_TRANSPORT_CREDENTIALS_A; }
#line 1472
extern "C" { typedef 
#line 1461
struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W { 

SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials; 
unsigned long Flags; 
unsigned long AuthenticationTarget; 
unsigned long NumberOfAuthnSchemes; 
unsigned long *AuthnSchemes; 
unsigned short *ServerCertificateSubject; 
SEC_WINNT_AUTH_IDENTITY_W *ProxyCredentials; 
unsigned long NumberOfProxyAuthnSchemes; 
unsigned long *ProxyAuthnSchemes; 
} RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W; }extern "C" { typedef _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W *PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_W; }
#line 1485
extern "C" { typedef 
#line 1474
struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A { 

SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials; 
unsigned long Flags; 
unsigned long AuthenticationTarget; 
unsigned long NumberOfAuthnSchemes; 
unsigned long *AuthnSchemes; 
unsigned char *ServerCertificateSubject; 
SEC_WINNT_AUTH_IDENTITY_A *ProxyCredentials; 
unsigned long NumberOfProxyAuthnSchemes; 
unsigned long *ProxyAuthnSchemes; 
} RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A; }extern "C" { typedef _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A *PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_A; }
#line 1499 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { typedef 
#line 1489
struct _RPC_SECURITY_QOS_V2_W { 
unsigned long Version; 
unsigned long Capabilities; 
unsigned long IdentityTracking; 
unsigned long ImpersonationType; 
unsigned long AdditionalSecurityInfoType; 

union { 
RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials; 
} u; 
} RPC_SECURITY_QOS_V2_W; }extern "C" { typedef _RPC_SECURITY_QOS_V2_W *PRPC_SECURITY_QOS_V2_W; }
#line 1511
extern "C" { typedef 
#line 1501
struct _RPC_SECURITY_QOS_V2_A { 
unsigned long Version; 
unsigned long Capabilities; 
unsigned long IdentityTracking; 
unsigned long ImpersonationType; 
unsigned long AdditionalSecurityInfoType; 

union { 
RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials; 
} u; 
} RPC_SECURITY_QOS_V2_A; }extern "C" { typedef _RPC_SECURITY_QOS_V2_A *PRPC_SECURITY_QOS_V2_A; }
#line 1527
extern "C" { typedef 
#line 1516
struct _RPC_SECURITY_QOS_V3_W { 
unsigned long Version; 
unsigned long Capabilities; 
unsigned long IdentityTracking; 
unsigned long ImpersonationType; 
unsigned long AdditionalSecurityInfoType; 

union { 
RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials; 
} u; 
void *Sid; 
} RPC_SECURITY_QOS_V3_W; }extern "C" { typedef _RPC_SECURITY_QOS_V3_W *PRPC_SECURITY_QOS_V3_W; }
#line 1540
extern "C" { typedef 
#line 1529
struct _RPC_SECURITY_QOS_V3_A { 
unsigned long Version; 
unsigned long Capabilities; 
unsigned long IdentityTracking; 
unsigned long ImpersonationType; 
unsigned long AdditionalSecurityInfoType; 

union { 
RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials; 
} u; 
void *Sid; 
} RPC_SECURITY_QOS_V3_A; }extern "C" { typedef _RPC_SECURITY_QOS_V3_A *PRPC_SECURITY_QOS_V3_A; }
#line 1559 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { typedef 
#line 1547
struct _RPC_SECURITY_QOS_V4_W { 
unsigned long Version; 
unsigned long Capabilities; 
unsigned long IdentityTracking; 
unsigned long ImpersonationType; 
unsigned long AdditionalSecurityInfoType; 

union { 
RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials; 
} u; 
void *Sid; 
unsigned EffectiveOnly; 
} RPC_SECURITY_QOS_V4_W; }extern "C" { typedef _RPC_SECURITY_QOS_V4_W *PRPC_SECURITY_QOS_V4_W; }
#line 1573
extern "C" { typedef 
#line 1561
struct _RPC_SECURITY_QOS_V4_A { 
unsigned long Version; 
unsigned long Capabilities; 
unsigned long IdentityTracking; 
unsigned long ImpersonationType; 
unsigned long AdditionalSecurityInfoType; 

union { 
RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials; 
} u; 
void *Sid; 
unsigned EffectiveOnly; 
} RPC_SECURITY_QOS_V4_A; }extern "C" { typedef _RPC_SECURITY_QOS_V4_A *PRPC_SECURITY_QOS_V4_A; }
#line 1662 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { typedef 
#line 1651
struct _RPC_BINDING_HANDLE_TEMPLATE_V1_W { 
unsigned long Version; 
unsigned long Flags; 
unsigned long ProtocolSequence; 
unsigned short *NetworkAddress; 
unsigned short *StringEndpoint; 

union { 
unsigned short *Reserved; 
} u1; 
UUID ObjectUuid; 
} RPC_BINDING_HANDLE_TEMPLATE_V1_W; }extern "C" { typedef _RPC_BINDING_HANDLE_TEMPLATE_V1_W *PRPC_BINDING_HANDLE_TEMPLATE_V1_W; }
#line 1675
extern "C" { typedef 
#line 1664
struct _RPC_BINDING_HANDLE_TEMPLATE_V1_A { 
unsigned long Version; 
unsigned long Flags; 
unsigned long ProtocolSequence; 
unsigned char *NetworkAddress; 
unsigned char *StringEndpoint; 

union { 
unsigned char *Reserved; 
} u1; 
UUID ObjectUuid; 
} RPC_BINDING_HANDLE_TEMPLATE_V1_A; }extern "C" { typedef _RPC_BINDING_HANDLE_TEMPLATE_V1_A *PRPC_BINDING_HANDLE_TEMPLATE_V1_A; }
#line 1684
extern "C" { typedef 
#line 1677
struct _RPC_BINDING_HANDLE_SECURITY_V1_W { 
unsigned long Version; 
unsigned short *ServerPrincName; 
unsigned long AuthnLevel; 
unsigned long AuthnSvc; 
SEC_WINNT_AUTH_IDENTITY_W *AuthIdentity; 
RPC_SECURITY_QOS *SecurityQos; 
} RPC_BINDING_HANDLE_SECURITY_V1_W; }extern "C" { typedef _RPC_BINDING_HANDLE_SECURITY_V1_W *PRPC_BINDING_HANDLE_SECURITY_V1_W; }
#line 1695
extern "C" { typedef 
#line 1688
struct _RPC_BINDING_HANDLE_SECURITY_V1_A { 
unsigned long Version; 
unsigned char *ServerPrincName; 
unsigned long AuthnLevel; 
unsigned long AuthnSvc; 
SEC_WINNT_AUTH_IDENTITY_A *AuthIdentity; 
RPC_SECURITY_QOS *SecurityQos; 
} RPC_BINDING_HANDLE_SECURITY_V1_A; }extern "C" { typedef _RPC_BINDING_HANDLE_SECURITY_V1_A *PRPC_BINDING_HANDLE_SECURITY_V1_A; }
#line 1704 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { typedef 
#line 1699
struct _RPC_BINDING_HANDLE_OPTIONS_V1 { 
unsigned long Version; 
unsigned long Flags; 
unsigned long ComTimeout; 
unsigned long CallTimeout; 
} RPC_BINDING_HANDLE_OPTIONS_V1; }extern "C" { typedef _RPC_BINDING_HANDLE_OPTIONS_V1 *PRPC_BINDING_HANDLE_OPTIONS_V1; }
#line 1733 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcBindingCreateA(RPC_BINDING_HANDLE_TEMPLATE_V1_A *, RPC_BINDING_HANDLE_SECURITY_V1_A *, RPC_BINDING_HANDLE_OPTIONS_V1 *, RPC_BINDING_HANDLE *); } 
#line 1745 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcBindingCreateW(RPC_BINDING_HANDLE_TEMPLATE_V1_W *, RPC_BINDING_HANDLE_SECURITY_V1_W *, RPC_BINDING_HANDLE_OPTIONS_V1 *, RPC_BINDING_HANDLE *); } 
#line 1761 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcBindingGetTrainingContextHandle(RPC_BINDING_HANDLE, void **); } 
#line 1769
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcServerInqBindingHandle(RPC_BINDING_HANDLE *); } 
#line 1782 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { typedef 
#line 1775
enum _RPC_HTTP_REDIRECTOR_STAGE { 

RPCHTTP_RS_REDIRECT = 1, 
RPCHTTP_RS_ACCESS_1, 
RPCHTTP_RS_SESSION, 
RPCHTTP_RS_ACCESS_2, 
RPCHTTP_RS_INTERFACE
} RPC_HTTP_REDIRECTOR_STAGE; }
#line 1787 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { typedef RPC_STATUS (__stdcall *RPC_NEW_HTTP_PROXY_CHANNEL)(RPC_HTTP_REDIRECTOR_STAGE, RPC_WSTR, RPC_WSTR, RPC_WSTR, RPC_WSTR, void *, void *, void *, void *, void *, unsigned long, RPC_WSTR *, RPC_WSTR *); }
#line 1815 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { typedef void (__stdcall *RPC_HTTP_PROXY_FREE_STRING)(RPC_WSTR); }
#line 1828 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcImpersonateClient(RPC_BINDING_HANDLE); } 
#line 1835
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcRevertToSelfEx(RPC_BINDING_HANDLE); } 
#line 1842
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcRevertToSelf(); } 
#line 1851
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcBindingInqAuthClientA(RPC_BINDING_HANDLE, RPC_AUTHZ_HANDLE *, RPC_CSTR *, unsigned long *, unsigned long *, unsigned long *); } 
#line 1863
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcBindingInqAuthClientW(RPC_BINDING_HANDLE, RPC_AUTHZ_HANDLE *, RPC_WSTR *, unsigned long *, unsigned long *, unsigned long *); } 
#line 1875
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcBindingInqAuthClientExA(RPC_BINDING_HANDLE, RPC_AUTHZ_HANDLE *, RPC_CSTR *, unsigned long *, unsigned long *, unsigned long *, unsigned long); } 
#line 1888
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcBindingInqAuthClientExW(RPC_BINDING_HANDLE, RPC_AUTHZ_HANDLE *, RPC_WSTR *, unsigned long *, unsigned long *, unsigned long *, unsigned long); } 
#line 1901
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcBindingInqAuthInfoA(RPC_BINDING_HANDLE, RPC_CSTR *, unsigned long *, unsigned long *, RPC_AUTH_IDENTITY_HANDLE *, unsigned long *); } 
#line 1913
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcBindingInqAuthInfoW(RPC_BINDING_HANDLE, RPC_WSTR *, unsigned long *, unsigned long *, RPC_AUTH_IDENTITY_HANDLE *, unsigned long *); } 
#line 1925
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcBindingSetAuthInfoA(RPC_BINDING_HANDLE, RPC_CSTR, unsigned long, unsigned long, RPC_AUTH_IDENTITY_HANDLE, unsigned long); } 
#line 1937
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcBindingSetAuthInfoExA(RPC_BINDING_HANDLE, RPC_CSTR, unsigned long, unsigned long, RPC_AUTH_IDENTITY_HANDLE, unsigned long, RPC_SECURITY_QOS *); } 
#line 1950
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcBindingSetAuthInfoW(RPC_BINDING_HANDLE, RPC_WSTR, unsigned long, unsigned long, RPC_AUTH_IDENTITY_HANDLE, unsigned long); } 
#line 1962
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcBindingSetAuthInfoExW(RPC_BINDING_HANDLE, RPC_WSTR, unsigned long, unsigned long, RPC_AUTH_IDENTITY_HANDLE, unsigned long, RPC_SECURITY_QOS *); } 
#line 1975
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcBindingInqAuthInfoExA(RPC_BINDING_HANDLE, RPC_CSTR *, unsigned long *, unsigned long *, RPC_AUTH_IDENTITY_HANDLE *, unsigned long *, unsigned long, RPC_SECURITY_QOS *); } 
#line 1989
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcBindingInqAuthInfoExW(RPC_BINDING_HANDLE, RPC_WSTR *, unsigned long *, unsigned long *, RPC_AUTH_IDENTITY_HANDLE *, unsigned long *, unsigned long, RPC_SECURITY_QOS *); } 
#line 2001
extern "C" { typedef void (__stdcall *RPC_AUTH_KEY_RETRIEVAL_FN)(void *, RPC_WSTR, unsigned long, void **, RPC_STATUS *); }
#line 2012
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcServerCompleteSecurityCallback(RPC_BINDING_HANDLE, RPC_STATUS); } 
#line 2020
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcServerRegisterAuthInfoA(RPC_CSTR, unsigned long, RPC_AUTH_KEY_RETRIEVAL_FN, void *); } 
#line 2030
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcServerRegisterAuthInfoW(RPC_WSTR, unsigned long, RPC_AUTH_KEY_RETRIEVAL_FN, void *); } 
#line 2134 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { typedef 
#line 2129
struct RPC_CLIENT_INFORMATION1 { 
unsigned char *UserName; 
unsigned char *ComputerName; 
unsigned short Privilege; 
unsigned long AuthFlags; 
} RPC_CLIENT_INFORMATION1, *PRPC_CLIENT_INFORMATION1; }
#line 2141 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcBindingServerFromClient(RPC_BINDING_HANDLE, RPC_BINDING_HANDLE *); } 
#line 2150
extern "C" { extern __declspec( dllimport noreturn ) void __stdcall RpcRaiseException(RPC_STATUS); } 
#line 2157
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcTestCancel(); } 
#line 2164
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcServerTestCancel(RPC_BINDING_HANDLE); } 
#line 2171
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcCancelThread(void *); } 
#line 2178
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcCancelThreadEx(void *, long); } 
#line 2187
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall UuidCreate(UUID *); } 
#line 2195
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall UuidCreateSequential(UUID *); } 
#line 2205
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall UuidToStringA(const UUID *, RPC_CSTR *); } 
#line 2214
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall UuidFromStringA(RPC_CSTR, UUID *); } 
#line 2223
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall UuidToStringW(const UUID *, RPC_WSTR *); } 
#line 2232
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall UuidFromStringW(RPC_WSTR, UUID *); } 
#line 2270 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { extern __declspec( dllimport ) signed int __stdcall UuidCompare(UUID *, UUID *, RPC_STATUS *); } 
#line 2279
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall UuidCreateNil(UUID *); } 
#line 2286
extern "C" { extern __declspec( dllimport ) int __stdcall UuidEqual(UUID *, UUID *, RPC_STATUS *); } 
#line 2295
extern "C" { extern __declspec( dllimport ) unsigned short __stdcall UuidHash(UUID *, RPC_STATUS *); } 
#line 2303
extern "C" { extern __declspec( dllimport ) int __stdcall UuidIsNil(UUID *, RPC_STATUS *); } 
#line 2313
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcEpRegisterNoReplaceA(RPC_IF_HANDLE, RPC_BINDING_VECTOR *, UUID_VECTOR *, RPC_CSTR); } 
#line 2323
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcEpRegisterNoReplaceW(RPC_IF_HANDLE, RPC_BINDING_VECTOR *, UUID_VECTOR *, RPC_WSTR); } 
#line 2333
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcEpRegisterA(RPC_IF_HANDLE, RPC_BINDING_VECTOR *, UUID_VECTOR *, RPC_CSTR); } 
#line 2343
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcEpRegisterW(RPC_IF_HANDLE, RPC_BINDING_VECTOR *, UUID_VECTOR *, RPC_WSTR); } 
#line 2386 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcEpUnregister(RPC_IF_HANDLE, RPC_BINDING_VECTOR *, UUID_VECTOR *); } 
#line 2399
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall DceErrorInqTextA(RPC_STATUS, RPC_CSTR); } 
#line 2407
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall DceErrorInqTextW(RPC_STATUS, RPC_WSTR); } 
#line 2430 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { typedef I_RPC_HANDLE *RPC_EP_INQ_HANDLE; }
#line 2446
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcMgmtEpEltInqBegin(RPC_BINDING_HANDLE, unsigned long, RPC_IF_ID *, unsigned long, UUID *, RPC_EP_INQ_HANDLE *); } 
#line 2458
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcMgmtEpEltInqDone(RPC_EP_INQ_HANDLE *); } 
#line 2467
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcMgmtEpEltInqNextA(RPC_EP_INQ_HANDLE, RPC_IF_ID *, RPC_BINDING_HANDLE *, UUID *, RPC_CSTR *); } 
#line 2478
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcMgmtEpEltInqNextW(RPC_EP_INQ_HANDLE, RPC_IF_ID *, RPC_BINDING_HANDLE *, UUID *, RPC_WSTR *); } 
#line 2509 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdce.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcMgmtEpUnregister(RPC_BINDING_HANDLE, RPC_IF_ID *, RPC_BINDING_HANDLE, UUID *); } 
#line 2517
extern "C" { typedef int (__stdcall *RPC_MGMT_AUTHORIZATION_FN)(RPC_BINDING_HANDLE, unsigned long, RPC_STATUS *); }
#line 2532
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcMgmtSetAuthorizationFn(RPC_MGMT_AUTHORIZATION_FN); } 
#line 2540
extern "C" { extern __declspec( dllimport ) int __stdcall RpcExceptionFilter(unsigned long); } 
#line 31 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdcep.h"
extern "C" { typedef 
#line 28
struct _RPC_VERSION { 
unsigned short MajorVersion; 
unsigned short MinorVersion; 
} RPC_VERSION; }




extern "C" { typedef 
#line 33
struct _RPC_SYNTAX_IDENTIFIER { 
GUID SyntaxGUID; 
RPC_VERSION SyntaxVersion; 
} RPC_SYNTAX_IDENTIFIER; }extern "C" { typedef _RPC_SYNTAX_IDENTIFIER *PRPC_SYNTAX_IDENTIFIER; }
#line 51
extern "C" { typedef 
#line 38
struct _RPC_MESSAGE { 

RPC_BINDING_HANDLE Handle; 
unsigned long DataRepresentation; 
void *Buffer; 
unsigned BufferLength; 
unsigned ProcNum; 
PRPC_SYNTAX_IDENTIFIER TransferSyntax; 
void *RpcInterfaceInformation; 
void *ReservedForRuntime; 
void *ManagerEpv; 
void *ImportContext; 
unsigned long RpcFlags; 
} RPC_MESSAGE; }extern "C" { typedef _RPC_MESSAGE *PRPC_MESSAGE; }



extern "C" { typedef RPC_STATUS __stdcall RPC_FORWARD_FUNCTION(UUID *, RPC_VERSION *, UUID *, unsigned char *, void **); }
#line 62
enum RPC_ADDRESS_CHANGE_TYPE { 

PROTOCOL_NOT_LOADED = 1, 
PROTOCOL_LOADED, 
PROTOCOL_ADDRESS_CHANGE
}; 


extern "C" { typedef void __stdcall RPC_ADDRESS_CHANGE_FN(void *); }
#line 135 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdcep.h"
extern "C" { typedef void (__stdcall *RPC_DISPATCH_FUNCTION)(PRPC_MESSAGE); }
#line 143
extern "C" { typedef 
#line 139
struct RPC_DISPATCH_TABLE { 
unsigned DispatchTableCount; 
RPC_DISPATCH_FUNCTION *DispatchTable; 
LONG_PTR Reserved; 
} RPC_DISPATCH_TABLE, *PRPC_DISPATCH_TABLE; }
#line 149
extern "C" { typedef 
#line 145
struct _RPC_PROTSEQ_ENDPOINT { 

unsigned char *RpcProtocolSequence; 
unsigned char *Endpoint; 
} RPC_PROTSEQ_ENDPOINT; }extern "C" { typedef _RPC_PROTSEQ_ENDPOINT *PRPC_PROTSEQ_ENDPOINT; }
#line 169
extern "C" { typedef 
#line 158
struct _RPC_SERVER_INTERFACE { 

unsigned Length; 
RPC_SYNTAX_IDENTIFIER InterfaceId; 
RPC_SYNTAX_IDENTIFIER TransferSyntax; 
PRPC_DISPATCH_TABLE DispatchTable; 
unsigned RpcProtseqEndpointCount; 
PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint; 
void *DefaultManagerEpv; 
const void *InterpreterInfo; 
unsigned Flags; 
} RPC_SERVER_INTERFACE; }extern "C" { typedef _RPC_SERVER_INTERFACE *PRPC_SERVER_INTERFACE; }
#line 182
extern "C" { typedef 
#line 171
struct _RPC_CLIENT_INTERFACE { 

unsigned Length; 
RPC_SYNTAX_IDENTIFIER InterfaceId; 
RPC_SYNTAX_IDENTIFIER TransferSyntax; 
PRPC_DISPATCH_TABLE DispatchTable; 
unsigned RpcProtseqEndpointCount; 
PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint; 
ULONG_PTR Reserved; 
const void *InterpreterInfo; 
unsigned Flags; 
} RPC_CLIENT_INTERFACE; }extern "C" { typedef _RPC_CLIENT_INTERFACE *PRPC_CLIENT_INTERFACE; }
#line 188
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcNegotiateTransferSyntax(RPC_MESSAGE *); } 
#line 196 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdcep.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcGetBuffer(RPC_MESSAGE *); } 
#line 203
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcGetBufferWithObject(RPC_MESSAGE *, UUID *); } 
#line 211
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcSendReceive(RPC_MESSAGE *); } 
#line 218
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcFreeBuffer(RPC_MESSAGE *); } 
#line 225
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcSend(PRPC_MESSAGE); } 
#line 232
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcReceive(PRPC_MESSAGE, unsigned); } 
#line 240
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcFreePipeBuffer(RPC_MESSAGE *); } 
#line 247
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcReallocPipeBuffer(PRPC_MESSAGE, unsigned); } 




extern "C" { typedef void *I_RPC_MUTEX; }




extern "C" { extern __declspec( dllimport ) void __stdcall I_RpcRequestMutex(I_RPC_MUTEX *); } 
#line 264
extern "C" { extern __declspec( dllimport ) void __stdcall I_RpcClearMutex(I_RPC_MUTEX); } 
#line 271
extern "C" { extern __declspec( dllimport ) void __stdcall I_RpcDeleteMutex(I_RPC_MUTEX); } 
#line 278
extern "C" { extern __declspec( dllimport ) void *__stdcall I_RpcAllocate(unsigned); } 
#line 285
extern "C" { extern __declspec( dllimport ) void __stdcall I_RpcFree(void *); } 
#line 292
extern "C" { extern __declspec( dllimport ) void __stdcall I_RpcPauseExecution(unsigned long); } 
#line 299
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcGetExtendedError(); } 
#line 305
extern "C" { typedef void (__stdcall *PRPC_RUNDOWN)(void *); }
#line 312
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcMonitorAssociation(RPC_BINDING_HANDLE, PRPC_RUNDOWN, void *); } 
#line 321
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcStopMonitorAssociation(RPC_BINDING_HANDLE); } 
#line 328
extern "C" { extern __declspec( dllimport ) RPC_BINDING_HANDLE __stdcall I_RpcGetCurrentCallHandle(); } 
#line 335
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcGetAssociationContext(RPC_BINDING_HANDLE, void **); } 
#line 343
extern "C" { extern __declspec( dllimport ) void *__stdcall I_RpcGetServerContextList(RPC_BINDING_HANDLE); } 
#line 350
extern "C" { extern __declspec( dllimport ) void __stdcall I_RpcSetServerContextList(RPC_BINDING_HANDLE, void *); } 
#line 358
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcNsInterfaceExported(unsigned long, unsigned short *, RPC_SERVER_INTERFACE *); } 
#line 367
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcNsInterfaceUnexported(unsigned long, unsigned short *, RPC_SERVER_INTERFACE *); } 
#line 376
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcBindingToStaticStringBindingW(RPC_BINDING_HANDLE, unsigned short **); } 
#line 384
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcBindingInqSecurityContext(RPC_BINDING_HANDLE, void **); } 
#line 393
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcBindingInqSecurityContextKeyInfo(RPC_BINDING_HANDLE, void *); } 
#line 402 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdcep.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcBindingInqWireIdForSnego(RPC_BINDING_HANDLE, RPC_CSTR); } 
#line 411
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcBindingInqMarshalledTargetInfo(RPC_BINDING_HANDLE, unsigned long *, RPC_CSTR *); } 
#line 422 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdcep.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcBindingInqLocalClientPID(RPC_BINDING_HANDLE, unsigned long *); } 
#line 430
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcBindingHandleToAsyncHandle(RPC_BINDING_HANDLE, void **); } 
#line 441 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdcep.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcNsBindingSetEntryNameW(RPC_BINDING_HANDLE, unsigned long, RPC_WSTR); } 
#line 450
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcNsBindingSetEntryNameA(RPC_BINDING_HANDLE, unsigned long, RPC_CSTR); } 
#line 459
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcServerUseProtseqEp2A(RPC_CSTR, RPC_CSTR, unsigned, RPC_CSTR, void *, void *); } 
#line 471
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcServerUseProtseqEp2W(RPC_WSTR, RPC_WSTR, unsigned, RPC_WSTR, void *, void *); } 
#line 483
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcServerUseProtseq2W(RPC_WSTR, RPC_WSTR, unsigned, void *, void *); } 
#line 494
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcServerUseProtseq2A(RPC_CSTR, RPC_CSTR, unsigned, void *, void *); } 
#line 551 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdcep.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcServerStartService(RPC_WSTR, RPC_WSTR, RPC_IF_HANDLE); } 
#line 562
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcBindingInqDynamicEndpointW(RPC_BINDING_HANDLE, RPC_WSTR *); } 
#line 570
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcBindingInqDynamicEndpointA(RPC_BINDING_HANDLE, RPC_CSTR *); } 
#line 597 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdcep.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcServerCheckClientRestriction(RPC_BINDING_HANDLE); } 
#line 610 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdcep.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcBindingInqTransportType(RPC_BINDING_HANDLE, unsigned *); } 
#line 620
extern "C" { typedef 
#line 615
struct _RPC_TRANSFER_SYNTAX { 

UUID Uuid; 
unsigned short VersMajor; 
unsigned short VersMinor; 
} RPC_TRANSFER_SYNTAX; }




extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcIfInqTransferSyntaxes(RPC_IF_HANDLE, RPC_TRANSFER_SYNTAX *, unsigned, unsigned *); } 
#line 635
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_UuidCreate(UUID *); } 
#line 642
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcBindingCopy(RPC_BINDING_HANDLE, RPC_BINDING_HANDLE *); } 
#line 650
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcBindingIsClientLocal(RPC_BINDING_HANDLE, unsigned *); } 
#line 658
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcBindingInqConnId(RPC_BINDING_HANDLE, void **, int *); } 
#line 667
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcBindingCreateNP(RPC_WSTR, RPC_WSTR, RPC_WSTR, RPC_BINDING_HANDLE *); } 
#line 677
extern "C" { extern __declspec( dllimport ) void __stdcall I_RpcSsDontSerializeContext(); } 
#line 684
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcLaunchDatagramReceiveThread(void *); } 
#line 691
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcServerRegisterForwardFunction(RPC_FORWARD_FUNCTION *); } 




extern "C" { extern RPC_ADDRESS_CHANGE_FN *__stdcall I_RpcServerInqAddressChangeFn(); } 




extern "C" { extern RPC_STATUS __stdcall I_RpcServerSetAddressChangeFn(RPC_ADDRESS_CHANGE_FN *); } 
#line 715
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcServerInqLocalConnAddress(RPC_BINDING_HANDLE, void *, unsigned long *, unsigned long *); } 
#line 725
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcServerInqRemoteConnAddress(RPC_BINDING_HANDLE, void *, unsigned long *, unsigned long *); } 
#line 735
extern "C" { extern __declspec( dllimport ) void __stdcall I_RpcSessionStrictContextHandle(); } 
#line 742
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcTurnOnEEInfoPropagation(); } 
#line 750 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdcep.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcConnectionInqSockBuffSize(unsigned long *, unsigned long *); } 
#line 758
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcConnectionSetSockBuffSize(unsigned long, unsigned long); } 
#line 765
extern "C" { typedef void (*RPCLT_PDU_FILTER_FUNC)(void *, unsigned, int); }
#line 773
extern "C" { typedef void (__cdecl *RPC_SETFILTER_FUNC)(RPCLT_PDU_FILTER_FUNC); }
#line 781
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcServerStartListening(void *); } 
#line 788
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcServerStopListening(); } 



extern "C" { typedef RPC_STATUS (*RPC_BLOCKING_FN)(void *, void *, void *); }
#line 801
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcBindingSetAsync(RPC_BINDING_HANDLE, RPC_BLOCKING_FN, unsigned long); } 
#line 810
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcSetThreadParams(int, void *, void *); } 
#line 819
extern "C" { extern __declspec( dllimport ) unsigned __stdcall I_RpcWindowProc(void *, unsigned, unsigned, unsigned long); } 
#line 829
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcServerUnregisterEndpointA(RPC_CSTR, RPC_CSTR); } 
#line 837
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcServerUnregisterEndpointW(RPC_WSTR, RPC_WSTR); } 
#line 852 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdcep.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcServerInqTransportType(unsigned *); } 
#line 859
extern "C" { extern __declspec( dllimport ) long __stdcall I_RpcMapWin32Status(RPC_STATUS); } 
#line 868
extern "C" { typedef 
#line 864
struct _RPC_C_OPT_METADATA_DESCRIPTOR { 

unsigned long BufferSize; 
char *Buffer; 
} RPC_C_OPT_METADATA_DESCRIPTOR; }
#line 894
extern "C" { typedef 
#line 870
struct _RDR_CALLOUT_STATE { 


RPC_STATUS LastError; 
void *LastEEInfo; 

RPC_HTTP_REDIRECTOR_STAGE LastCalledStage; 


unsigned short *ServerName; 
unsigned short *ServerPort; 
unsigned short *RemoteUser; 
unsigned short *AuthType; 
unsigned char ResourceTypePresent; 
unsigned char MetadataPresent; 
unsigned char SessionIdPresent; 
unsigned char InterfacePresent; 
UUID ResourceType; 
RPC_C_OPT_METADATA_DESCRIPTOR Metadata; 
UUID SessionId; 
RPC_SYNTAX_IDENTIFIER Interface; 
void *CertContext; 


} RDR_CALLOUT_STATE; }
#line 899 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdcep.h"
extern "C" { typedef RPC_STATUS (__stdcall *I_RpcProxyIsValidMachineFn)(char *, char *, unsigned long); }
#line 907
extern "C" { typedef RPC_STATUS (__stdcall *I_RpcProxyGetClientAddressFn)(void *, char *, unsigned long *); }
#line 915
extern "C" { typedef RPC_STATUS (__stdcall *I_RpcProxyGetConnectionTimeoutFn)(unsigned long *); }
#line 922
extern "C" { typedef RPC_STATUS (__stdcall *I_RpcPerformCalloutFn)(void *, RDR_CALLOUT_STATE *, RPC_HTTP_REDIRECTOR_STAGE); }
#line 930
extern "C" { typedef void (__stdcall *I_RpcFreeCalloutStateFn)(RDR_CALLOUT_STATE *); }
#line 936
extern "C" { typedef RPC_STATUS (__stdcall *I_RpcProxyGetClientSessionAndResourceUUID)(void *, int *, UUID *, int *, UUID *); }
#line 949 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdcep.h"
extern "C" { typedef RPC_STATUS (__stdcall *I_RpcProxyFilterIfFn)(void *, UUID *, unsigned short, int *); }
#line 973 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdcep.h"
extern "C" { typedef 
#line 962 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdcep.h"
struct tagI_RpcProxyCallbackInterface { 

I_RpcProxyIsValidMachineFn IsValidMachineFn; 
I_RpcProxyGetClientAddressFn GetClientAddressFn; 
I_RpcProxyGetConnectionTimeoutFn GetConnectionTimeoutFn; 
I_RpcPerformCalloutFn PerformCalloutFn; 
I_RpcFreeCalloutStateFn FreeCalloutStateFn; 
I_RpcProxyGetClientSessionAndResourceUUID GetClientSessionAndResourceUUIDFn; 

I_RpcProxyFilterIfFn ProxyFilterIfFn; 
#line 973 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdcep.h"
} I_RpcProxyCallbackInterface; }




extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcProxyNewConnection(unsigned long, unsigned short *, unsigned short *, unsigned short *, void *, RDR_CALLOUT_STATE *, I_RpcProxyCallbackInterface *); } 
#line 1015 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcdcep.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcReplyToClientWithStatus(void *, RPC_STATUS); } 
#line 1023
extern "C" { extern __declspec( dllimport ) void __stdcall I_RpcRecordCalloutFailure(RPC_STATUS, RDR_CALLOUT_STATE *, unsigned short *); } 
#line 23 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcnsi.h"
extern "C" { typedef void *RPC_NS_HANDLE; }
#line 40
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsBindingExportA(unsigned long, RPC_CSTR, RPC_IF_HANDLE, RPC_BINDING_VECTOR *, UUID_VECTOR *); } 
#line 50
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsBindingUnexportA(unsigned long, RPC_CSTR, RPC_IF_HANDLE, UUID_VECTOR *); } 
#line 60
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsBindingExportW(unsigned long, RPC_WSTR, RPC_IF_HANDLE, RPC_BINDING_VECTOR *, UUID_VECTOR *); } 
#line 69
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsBindingUnexportW(unsigned long, RPC_WSTR, RPC_IF_HANDLE, UUID_VECTOR *); } 
#line 81 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcnsi.h"
extern "C" { extern RPC_STATUS __stdcall RpcNsBindingExportPnPA(unsigned long, RPC_CSTR, RPC_IF_HANDLE, UUID_VECTOR *); } 
#line 89
extern "C" { extern RPC_STATUS __stdcall RpcNsBindingUnexportPnPA(unsigned long, RPC_CSTR, RPC_IF_HANDLE, UUID_VECTOR *); } 
#line 99
extern "C" { extern RPC_STATUS __stdcall RpcNsBindingExportPnPW(unsigned long, RPC_WSTR, RPC_IF_HANDLE, UUID_VECTOR *); } 
#line 107
extern "C" { extern RPC_STATUS __stdcall RpcNsBindingUnexportPnPW(unsigned long, RPC_WSTR, RPC_IF_HANDLE, UUID_VECTOR *); } 
#line 119 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcnsi.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsBindingLookupBeginA(unsigned long, RPC_CSTR, RPC_IF_HANDLE, UUID *, unsigned long, RPC_NS_HANDLE *); } 
#line 131
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsBindingLookupBeginW(unsigned long, RPC_WSTR, RPC_IF_HANDLE, UUID *, unsigned long, RPC_NS_HANDLE *); } 
#line 142 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcnsi.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsBindingLookupNext(RPC_NS_HANDLE, RPC_BINDING_VECTOR **); } 
#line 148
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsBindingLookupDone(RPC_NS_HANDLE *); } 
#line 155
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsGroupDeleteA(unsigned long, RPC_CSTR); } 
#line 161
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsGroupMbrAddA(unsigned long, RPC_CSTR, unsigned long, RPC_CSTR); } 
#line 169
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsGroupMbrRemoveA(unsigned long, RPC_CSTR, unsigned long, RPC_CSTR); } 
#line 177
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsGroupMbrInqBeginA(unsigned long, RPC_CSTR, unsigned long, RPC_NS_HANDLE *); } 
#line 185
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsGroupMbrInqNextA(RPC_NS_HANDLE, RPC_CSTR *); } 
#line 193
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsGroupDeleteW(unsigned long, RPC_WSTR); } 
#line 199
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsGroupMbrAddW(unsigned long, RPC_WSTR, unsigned long, RPC_WSTR); } 
#line 207
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsGroupMbrRemoveW(unsigned long, RPC_WSTR, unsigned long, RPC_WSTR); } 
#line 215
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsGroupMbrInqBeginW(unsigned long, RPC_WSTR, unsigned long, RPC_NS_HANDLE *); } 
#line 223
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsGroupMbrInqNextW(RPC_NS_HANDLE, RPC_WSTR *); } 
#line 231 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcnsi.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsGroupMbrInqDone(RPC_NS_HANDLE *); } 
#line 238
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsProfileDeleteA(unsigned long, RPC_CSTR); } 
#line 244
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsProfileEltAddA(unsigned long, RPC_CSTR, RPC_IF_ID *, unsigned long, RPC_CSTR, unsigned long, RPC_CSTR); } 
#line 255
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsProfileEltRemoveA(unsigned long, RPC_CSTR, RPC_IF_ID *, unsigned long, RPC_CSTR); } 
#line 264
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsProfileEltInqBeginA(unsigned long, RPC_CSTR, unsigned long, RPC_IF_ID *, unsigned long, unsigned long, RPC_CSTR, RPC_NS_HANDLE *); } 
#line 276
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsProfileEltInqNextA(RPC_NS_HANDLE, RPC_IF_ID *, RPC_CSTR *, unsigned long *, RPC_CSTR *); } 
#line 287
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsProfileDeleteW(unsigned long, RPC_WSTR); } 
#line 293
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsProfileEltAddW(unsigned long, RPC_WSTR, RPC_IF_ID *, unsigned long, RPC_WSTR, unsigned long, RPC_WSTR); } 
#line 304
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsProfileEltRemoveW(unsigned long, RPC_WSTR, RPC_IF_ID *, unsigned long, RPC_WSTR); } 
#line 313
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsProfileEltInqBeginW(unsigned long, RPC_WSTR, unsigned long, RPC_IF_ID *, unsigned long, unsigned long, RPC_WSTR, RPC_NS_HANDLE *); } 
#line 325
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsProfileEltInqNextW(RPC_NS_HANDLE, RPC_IF_ID *, RPC_WSTR *, unsigned long *, RPC_WSTR *); } 
#line 336 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcnsi.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsProfileEltInqDone(RPC_NS_HANDLE *); } 
#line 343
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsEntryObjectInqBeginA(unsigned long, RPC_CSTR, RPC_NS_HANDLE *); } 
#line 352
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsEntryObjectInqBeginW(unsigned long, RPC_WSTR, RPC_NS_HANDLE *); } 
#line 361 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcnsi.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsEntryObjectInqNext(RPC_NS_HANDLE, UUID *); } 
#line 367
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsEntryObjectInqDone(RPC_NS_HANDLE *); } 
#line 374
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsEntryExpandNameA(unsigned long, RPC_CSTR, RPC_CSTR *); } 
#line 381
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsMgmtBindingUnexportA(unsigned long, RPC_CSTR, RPC_IF_ID *, unsigned long, UUID_VECTOR *); } 
#line 390
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsMgmtEntryCreateA(unsigned long, RPC_CSTR); } 
#line 396
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsMgmtEntryDeleteA(unsigned long, RPC_CSTR); } 
#line 402
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsMgmtEntryInqIfIdsA(unsigned long, RPC_CSTR, RPC_IF_ID_VECTOR **); } 
#line 409
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsMgmtHandleSetExpAge(RPC_NS_HANDLE, unsigned long); } 
#line 415
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsMgmtInqExpAge(unsigned long *); } 




extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsMgmtSetExpAge(unsigned long); } 
#line 427
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsEntryExpandNameW(unsigned long, RPC_WSTR, RPC_WSTR *); } 
#line 434
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsMgmtBindingUnexportW(unsigned long, RPC_WSTR, RPC_IF_ID *, unsigned long, UUID_VECTOR *); } 
#line 443
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsMgmtEntryCreateW(unsigned long, RPC_WSTR); } 
#line 449
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsMgmtEntryDeleteW(unsigned long, RPC_WSTR); } 
#line 455
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsMgmtEntryInqIfIdsW(unsigned long, RPC_WSTR, RPC_IF_ID_VECTOR **); } 
#line 466 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcnsi.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsBindingImportBeginA(unsigned long, RPC_CSTR, RPC_IF_HANDLE, UUID *, RPC_NS_HANDLE *); } 
#line 477
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsBindingImportBeginW(unsigned long, RPC_WSTR, RPC_IF_HANDLE, UUID *, RPC_NS_HANDLE *); } 
#line 488 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcnsi.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsBindingImportNext(RPC_NS_HANDLE, RPC_BINDING_HANDLE *); } 
#line 494
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsBindingImportDone(RPC_NS_HANDLE *); } 




extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcNsBindingSelect(RPC_BINDING_VECTOR *, RPC_BINDING_HANDLE *); } 
#line 51 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcasync.h"
extern "C" { typedef 
#line 41 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcasync.h"
enum _RPC_NOTIFICATION_TYPES { 

RpcNotificationTypeNone, 
RpcNotificationTypeEvent, 

RpcNotificationTypeApc, 
RpcNotificationTypeIoc, 
RpcNotificationTypeHwnd, 
#line 50 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcasync.h"
RpcNotificationTypeCallback
} RPC_NOTIFICATION_TYPES; }
#line 61
extern "C" { typedef 
#line 55
enum _RPC_ASYNC_EVENT { 
RpcCallComplete, 
RpcSendComplete, 
RpcReceiveComplete, 
RpcClientDisconnect, 
RpcClientCancel
} RPC_ASYNC_EVENT; }
#line 74 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcasync.h"
struct _RPC_ASYNC_STATE; 


extern "C" { typedef void __stdcall RPCNOTIFICATION_ROUTINE(_RPC_ASYNC_STATE *, void *, RPC_ASYNC_EVENT); }



extern "C" { typedef RPCNOTIFICATION_ROUTINE *PFN_RPCNOTIFICATION_ROUTINE; }
#line 131 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcasync.h"
extern "C" { typedef 
#line 83 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcasync.h"
union _RPC_ASYNC_NOTIFICATION_INFO { 




struct { 
PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine; 
HANDLE hThread; 
} APC; 




struct { 
HANDLE hIOPort; 
DWORD dwNumberOfBytesTransferred; 
DWORD_PTR dwCompletionKey; 
LPOVERLAPPED lpOverlapped; 
} IOC; 




struct { 
::HWND hWnd; 
UINT Msg; 
} HWND; 
#line 117 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcasync.h"
HANDLE hEvent; 
#line 130 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcasync.h"
PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine; 
} RPC_ASYNC_NOTIFICATION_INFO; }extern "C" { typedef _RPC_ASYNC_NOTIFICATION_INFO *PRPC_ASYNC_NOTIFICATION_INFO; }
#line 147
extern "C" { typedef 
#line 133
struct _RPC_ASYNC_STATE { 
unsigned Size; 
unsigned long Signature; 
long Lock; 
unsigned long Flags; 
void *StubInfo; 
void *UserInfo; 
void *RuntimeInfo; 
RPC_ASYNC_EVENT Event; 

RPC_NOTIFICATION_TYPES NotificationType; 
RPC_ASYNC_NOTIFICATION_INFO u; 

LONG_PTR Reserved[4]; 
} RPC_ASYNC_STATE; }extern "C" { typedef _RPC_ASYNC_STATE *PRPC_ASYNC_STATE; }
#line 158
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcAsyncInitializeHandle(PRPC_ASYNC_STATE, unsigned); } 
#line 167
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcAsyncRegisterInfo(PRPC_ASYNC_STATE); } 
#line 175 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcasync.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcAsyncGetCallStatus(PRPC_ASYNC_STATE); } 
#line 182
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcAsyncCompleteCall(PRPC_ASYNC_STATE, void *); } 
#line 190
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcAsyncAbortCall(PRPC_ASYNC_STATE, unsigned long); } 
#line 198
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcAsyncCancelCall(PRPC_ASYNC_STATE, BOOL); } 
#line 213
extern "C" { typedef 
#line 204
enum tagExtendedErrorParamTypes { 

eeptAnsiString = 1, 
eeptUnicodeString, 
eeptLongVal, 
eeptShortVal, 
eeptPointerVal, 
eeptNone, 
eeptBinary
} ExtendedErrorParamTypes; }
#line 222
extern "C" { typedef 
#line 218
struct tagBinaryParam { 

void *Buffer; 
short Size; 
} BinaryParam; }
#line 236
extern "C" { typedef 
#line 224
struct tagRPC_EE_INFO_PARAM { 

ExtendedErrorParamTypes ParameterType; 

union { 
LPSTR AnsiString; 
LPWSTR UnicodeString; 
long LVal; 
short SVal; 
ULONGLONG PVal; 
BinaryParam BVal; 
} u; 
} RPC_EE_INFO_PARAM; }
#line 267 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcasync.h"
extern "C" { typedef 
#line 247 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcasync.h"
struct tagRPC_EXTENDED_ERROR_INFO { 

ULONG Version; 
LPWSTR ComputerName; 
ULONG ProcessID; 

union { 

SYSTEMTIME SystemTime; 
FILETIME FileTime; 
#line 260 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcasync.h"
} u; 
ULONG GeneratingComponent; 
ULONG Status; 
USHORT DetectionLocation; 
USHORT Flags; 
int NumberOfParameters; 
RPC_EE_INFO_PARAM Parameters[4]; 
} RPC_EXTENDED_ERROR_INFO; }
#line 274
extern "C" { typedef 
#line 269
struct tagRPC_ERROR_ENUM_HANDLE { 

ULONG Signature; 
void *CurrentPos; 
void *Head; 
} RPC_ERROR_ENUM_HANDLE; }




extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcErrorStartEnumeration(RPC_ERROR_ENUM_HANDLE *); } 
#line 286
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcErrorGetNextRecord(RPC_ERROR_ENUM_HANDLE *, BOOL, RPC_EXTENDED_ERROR_INFO *); } 
#line 295
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcErrorEndEnumeration(RPC_ERROR_ENUM_HANDLE *); } 
#line 302
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcErrorResetEnumeration(RPC_ERROR_ENUM_HANDLE *); } 
#line 309
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcErrorGetNumberOfRecords(RPC_ERROR_ENUM_HANDLE *, int *); } 
#line 317
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcErrorSaveErrorInfo(RPC_ERROR_ENUM_HANDLE *, PVOID *, size_t *); } 
#line 326
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcErrorLoadErrorInfo(PVOID, size_t, RPC_ERROR_ENUM_HANDLE *); } 
#line 335
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcErrorAddRecord(RPC_EXTENDED_ERROR_INFO *); } 
#line 342
extern "C" { extern __declspec( dllimport ) void __stdcall RpcErrorClearInformation(); } 
#line 351
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcAsyncCleanupThread(DWORD); } 
#line 358
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcGetAuthorizationContextForClient(RPC_BINDING_HANDLE, BOOL, PVOID, PLARGE_INTEGER, LUID, DWORD, PVOID, PVOID *); } 
#line 372
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcFreeAuthorizationContext(PVOID *); } 
#line 379
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcSsContextLockExclusive(RPC_BINDING_HANDLE, PVOID); } 
#line 387
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcSsContextLockShared(RPC_BINDING_HANDLE, PVOID); } 
#line 398
extern "C" { typedef 
#line 393
enum tagRpcLocalAddressFormat { 

rlafInvalid, 
rlafIPv4, 
rlafIPv6
} RpcLocalAddressFormat; }
#line 406
extern "C" { typedef 
#line 400
struct _RPC_CALL_LOCAL_ADDRESS_V1 { 

unsigned Version; 
void *Buffer; 
unsigned long BufferSize; 
RpcLocalAddressFormat AddressFormat; 
} RPC_CALL_LOCAL_ADDRESS_V1; }extern "C" { typedef _RPC_CALL_LOCAL_ADDRESS_V1 *PRPC_CALL_LOCAL_ADDRESS_V1; }
#line 435 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcasync.h"
extern "C" { typedef 
#line 424
struct tagRPC_CALL_ATTRIBUTES_V1_W { 

unsigned Version; 
unsigned long Flags; 
unsigned long ServerPrincipalNameBufferLength; 
unsigned short *ServerPrincipalName; 
unsigned long ClientPrincipalNameBufferLength; 
unsigned short *ClientPrincipalName; 
unsigned long AuthenticationLevel; 
unsigned long AuthenticationService; 
BOOL NullSession; 
} RPC_CALL_ATTRIBUTES_V1_W; }
#line 448
extern "C" { typedef 
#line 437
struct tagRPC_CALL_ATTRIBUTES_V1_A { 

unsigned Version; 
unsigned long Flags; 
unsigned long ServerPrincipalNameBufferLength; 
unsigned char *ServerPrincipalName; 
unsigned long ClientPrincipalNameBufferLength; 
unsigned char *ClientPrincipalName; 
unsigned long AuthenticationLevel; 
unsigned long AuthenticationService; 
BOOL NullSession; 
} RPC_CALL_ATTRIBUTES_V1_A; }
#line 461
extern "C" { typedef 
#line 455
enum tagRpcCallType { 

rctInvalid, 
rctNormal, 
rctTraining, 
rctGuaranteed
} RpcCallType; }
#line 469
extern "C" { typedef 
#line 463
enum tagRpcCallClientLocality { 

rcclInvalid, 
rcclLocal, 
rcclRemote, 
rcclClientUnknownLocality
} RpcCallClientLocality; }
#line 492
extern "C" { typedef 
#line 472
struct tagRPC_CALL_ATTRIBUTES_V2_W { 

unsigned Version; 
unsigned long Flags; 
unsigned long ServerPrincipalNameBufferLength; 
unsigned short *ServerPrincipalName; 
unsigned long ClientPrincipalNameBufferLength; 
unsigned short *ClientPrincipalName; 
unsigned long AuthenticationLevel; 
unsigned long AuthenticationService; 
BOOL NullSession; 
BOOL KernelModeCaller; 
unsigned long ProtocolSequence; 
RpcCallClientLocality IsClientLocal; 
HANDLE ClientPID; 
unsigned long CallStatus; 
RpcCallType CallType; 
RPC_CALL_LOCAL_ADDRESS_V1 *CallLocalAddress; 
unsigned short OpNum; 
UUID InterfaceUuid; 
} RPC_CALL_ATTRIBUTES_V2_W; }
#line 514
extern "C" { typedef 
#line 494
struct tagRPC_CALL_ATTRIBUTES_V2_A { 

unsigned Version; 
unsigned long Flags; 
unsigned long ServerPrincipalNameBufferLength; 
unsigned char *ServerPrincipalName; 
unsigned long ClientPrincipalNameBufferLength; 
unsigned char *ClientPrincipalName; 
unsigned long AuthenticationLevel; 
unsigned long AuthenticationService; 
BOOL NullSession; 
BOOL KernelModeCaller; 
unsigned long ProtocolSequence; 
unsigned long IsClientLocal; 
HANDLE ClientPID; 
unsigned long CallStatus; 
RpcCallType CallType; 
RPC_CALL_LOCAL_ADDRESS_V1 *CallLocalAddress; 
unsigned short OpNum; 
UUID InterfaceUuid; 
} RPC_CALL_ATTRIBUTES_V2_A; }
#line 520 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcasync.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcServerInqCallAttributesW(RPC_BINDING_HANDLE, void *); } 
#line 528
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcServerInqCallAttributesA(RPC_BINDING_HANDLE, void *); } 
#line 548 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcasync.h"
extern "C" { typedef RPC_CALL_ATTRIBUTES_V2_A RPC_CALL_ATTRIBUTES; }
#line 560 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcasync.h"
extern "C" { typedef 
#line 555
enum _RPC_NOTIFICATIONS { 

RpcNotificationCallNone, 
RpcNotificationClientDisconnect, 
RpcNotificationCallCancel
} RPC_NOTIFICATIONS; }
#line 567
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcServerSubscribeForNotification(RPC_BINDING_HANDLE, RPC_NOTIFICATIONS, RPC_NOTIFICATION_TYPES, RPC_ASYNC_NOTIFICATION_INFO *); } 
#line 577
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcServerUnsubscribeForNotification(RPC_BINDING_HANDLE, RPC_NOTIFICATIONS, unsigned long *); } 
#line 590 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcasync.h"
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcBindingBind(PRPC_ASYNC_STATE, RPC_BINDING_HANDLE, RPC_IF_HANDLE); } 
#line 599
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcBindingUnbind(RPC_BINDING_HANDLE); } 
#line 608
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcDiagnoseError(RPC_BINDING_HANDLE, RPC_IF_HANDLE, RPC_STATUS, RPC_ERROR_ENUM_HANDLE *, ULONG, HWND); } 
#line 623 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcasync.h"
extern "C" { extern RPC_STATUS __stdcall I_RpcAsyncSetHandle(PRPC_MESSAGE, PRPC_ASYNC_STATE); } 
#line 629
extern "C" { extern RPC_STATUS __stdcall I_RpcAsyncAbortCall(PRPC_ASYNC_STATE, unsigned long); } 
#line 637
extern "C" { extern int __stdcall I_RpcExceptionFilter(unsigned long); } 
#line 24 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\pshpack1.h"
#pragma warning(disable:4103)

#pragma pack ( push, 1 )
#line 56 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" { struct HDROP__ { int unused; }; }extern "C" { typedef HDROP__ *HDROP; }

extern "C" __declspec( dllimport ) UINT __stdcall DragQueryFileA(HDROP, UINT, LPSTR, UINT); 
extern "C" __declspec( dllimport ) UINT __stdcall DragQueryFileW(HDROP, UINT, LPWSTR, UINT); 
#line 65 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" __declspec( dllimport ) BOOL __stdcall DragQueryPoint(HDROP, LPPOINT); 
extern "C" __declspec( dllimport ) void __stdcall DragFinish(HDROP); 
extern "C" __declspec( dllimport ) void __stdcall DragAcceptFiles(HWND, BOOL); 

extern "C" __declspec( dllimport ) HINSTANCE __stdcall ShellExecuteA(HWND, LPCSTR, LPCSTR, LPCSTR, LPCSTR, INT); 

extern "C" __declspec( dllimport ) HINSTANCE __stdcall ShellExecuteW(HWND, LPCWSTR, LPCWSTR, LPCWSTR, LPCWSTR, INT); 
#line 78 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" __declspec( dllimport ) HINSTANCE __stdcall FindExecutableA(LPCSTR, LPCSTR, LPSTR); 
extern "C" __declspec( dllimport ) HINSTANCE __stdcall FindExecutableW(LPCWSTR, LPCWSTR, LPWSTR); 
#line 85 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" __declspec( dllimport ) LPWSTR *__stdcall CommandLineToArgvW(LPCWSTR, int *); 

extern "C" __declspec( dllimport ) INT __stdcall ShellAboutA(HWND, LPCSTR, LPCSTR, HICON); 
extern "C" __declspec( dllimport ) INT __stdcall ShellAboutW(HWND, LPCWSTR, LPCWSTR, HICON); 
#line 94 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" __declspec( dllimport ) HICON __stdcall DuplicateIcon(HINSTANCE, HICON); 
extern "C" __declspec( dllimport ) HICON __stdcall ExtractAssociatedIconA(HINSTANCE, LPSTR, LPWORD); 
extern "C" __declspec( dllimport ) HICON __stdcall ExtractAssociatedIconW(HINSTANCE, LPWSTR, LPWORD); 
#line 102 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" __declspec( dllimport ) HICON __stdcall ExtractAssociatedIconExA(HINSTANCE, LPSTR, LPWORD, LPWORD); 
extern "C" __declspec( dllimport ) HICON __stdcall ExtractAssociatedIconExW(HINSTANCE, LPWSTR, LPWORD, LPWORD); 
#line 109 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" __declspec( dllimport ) HICON __stdcall ExtractIconA(HINSTANCE, LPCSTR, UINT); 
extern "C" __declspec( dllimport ) HICON __stdcall ExtractIconW(HINSTANCE, LPCWSTR, UINT); 
#line 125 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" { typedef 
#line 119
struct _DRAGINFOA { 
UINT uSize; 
POINT pt; 
BOOL fNC; 
LPSTR lpFileList; 
DWORD grfKeyState; 
} DRAGINFOA; }extern "C" { typedef _DRAGINFOA *LPDRAGINFOA; }
#line 132
extern "C" { typedef 
#line 126
struct _DRAGINFOW { 
UINT uSize; 
POINT pt; 
BOOL fNC; 
LPWSTR lpFileList; 
DWORD grfKeyState; 
} DRAGINFOW; }extern "C" { typedef _DRAGINFOW *LPDRAGINFOW; }




extern "C" { typedef DRAGINFOA DRAGINFO; }
extern "C" { typedef LPDRAGINFOA LPDRAGINFO; }
#line 184 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" { typedef 
#line 176
struct _AppBarData { 

DWORD cbSize; 
HWND hWnd; 
UINT uCallbackMessage; 
UINT uEdge; 
RECT rc; 
LPARAM lParam; 
} APPBARDATA; }extern "C" { typedef _AppBarData *PAPPBARDATA; }


extern "C" __declspec( dllimport ) UINT_PTR __stdcall SHAppBarMessage(DWORD, PAPPBARDATA); 
#line 193
extern "C" __declspec( dllimport ) DWORD __stdcall DoEnvironmentSubstA(LPSTR, UINT); 
extern "C" __declspec( dllimport ) DWORD __stdcall DoEnvironmentSubstW(LPWSTR, UINT); 
#line 202 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" __declspec( dllimport ) UINT __stdcall ExtractIconExA(LPCSTR, int, HICON *, HICON *, UINT); 
extern "C" __declspec( dllimport ) UINT __stdcall ExtractIconExW(LPCWSTR, int, HICON *, HICON *, UINT); 
#line 242 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" { typedef WORD FILEOP_FLAGS; }
#line 255
extern "C" { typedef WORD PRINTEROP_FLAGS; }
#line 274
extern "C" { typedef 
#line 264
struct _SHFILEOPSTRUCTA { 

HWND hwnd; 
UINT wFunc; 
LPCSTR pFrom; 
LPCSTR pTo; 
FILEOP_FLAGS fFlags; 
BOOL fAnyOperationsAborted; 
LPVOID hNameMappings; 
LPCSTR lpszProgressTitle; 
} SHFILEOPSTRUCTA; }extern "C" { typedef _SHFILEOPSTRUCTA *LPSHFILEOPSTRUCTA; }
#line 285
extern "C" { typedef 
#line 275
struct _SHFILEOPSTRUCTW { 

HWND hwnd; 
UINT wFunc; 
LPCWSTR pFrom; 
LPCWSTR pTo; 
FILEOP_FLAGS fFlags; 
BOOL fAnyOperationsAborted; 
LPVOID hNameMappings; 
LPCWSTR lpszProgressTitle; 
} SHFILEOPSTRUCTW; }extern "C" { typedef _SHFILEOPSTRUCTW *LPSHFILEOPSTRUCTW; }




extern "C" { typedef SHFILEOPSTRUCTA SHFILEOPSTRUCT; }
extern "C" { typedef LPSHFILEOPSTRUCTA LPSHFILEOPSTRUCT; }
#line 294 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" __declspec( dllimport ) int __stdcall SHFileOperationA(LPSHFILEOPSTRUCTA); 
extern "C" __declspec( dllimport ) int __stdcall SHFileOperationW(LPSHFILEOPSTRUCTW); 
#line 301 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" __declspec( dllimport ) void __stdcall SHFreeNameMappings(HANDLE); 
#line 309
extern "C" { typedef 
#line 303
struct _SHNAMEMAPPINGA { 

LPSTR pszOldPath; 
LPSTR pszNewPath; 
int cchOldPath; 
int cchNewPath; 
} SHNAMEMAPPINGA; }extern "C" { typedef _SHNAMEMAPPINGA *LPSHNAMEMAPPINGA; }
#line 316
extern "C" { typedef 
#line 310
struct _SHNAMEMAPPINGW { 

LPWSTR pszOldPath; 
LPWSTR pszNewPath; 
int cchOldPath; 
int cchNewPath; 
} SHNAMEMAPPINGW; }extern "C" { typedef _SHNAMEMAPPINGW *LPSHNAMEMAPPINGW; }




extern "C" { typedef SHNAMEMAPPINGA SHNAMEMAPPING; }
extern "C" { typedef LPSHNAMEMAPPINGA LPSHNAMEMAPPING; }
#line 410 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
#pragma warning(push)
#pragma warning(disable:4201)
#line 438 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" { typedef 
#line 415 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
struct _SHELLEXECUTEINFOA { 

DWORD cbSize; 
ULONG fMask; 
HWND hwnd; 
LPCSTR lpVerb; 
LPCSTR lpFile; 
LPCSTR lpParameters; 
LPCSTR lpDirectory; 
int nShow; 
HINSTANCE hInstApp; 

LPVOID lpIDList; 
LPCSTR lpClass; 
HKEY hkeyClass; 
DWORD dwHotKey; 
union { 
HANDLE hIcon; 

HANDLE hMonitor; 
#line 436 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
}; 
HANDLE hProcess; 
} SHELLEXECUTEINFOA; }extern "C" { typedef _SHELLEXECUTEINFOA *LPSHELLEXECUTEINFOA; }
#line 462 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" { typedef 
#line 439 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
struct _SHELLEXECUTEINFOW { 

DWORD cbSize; 
ULONG fMask; 
HWND hwnd; 
LPCWSTR lpVerb; 
LPCWSTR lpFile; 
LPCWSTR lpParameters; 
LPCWSTR lpDirectory; 
int nShow; 
HINSTANCE hInstApp; 

LPVOID lpIDList; 
LPCWSTR lpClass; 
HKEY hkeyClass; 
DWORD dwHotKey; 
union { 
HANDLE hIcon; 

HANDLE hMonitor; 
#line 460 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
}; 
HANDLE hProcess; 
} SHELLEXECUTEINFOW; }extern "C" { typedef _SHELLEXECUTEINFOW *LPSHELLEXECUTEINFOW; }




extern "C" { typedef SHELLEXECUTEINFOA SHELLEXECUTEINFO; }
extern "C" { typedef LPSHELLEXECUTEINFOA LPSHELLEXECUTEINFO; }
#line 471 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" __declspec( dllimport ) BOOL __stdcall ShellExecuteExA(LPSHELLEXECUTEINFOA); 
extern "C" __declspec( dllimport ) BOOL __stdcall ShellExecuteExW(LPSHELLEXECUTEINFOW); 
#line 497 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" { typedef 
#line 482
struct _SHCREATEPROCESSINFOW { 

DWORD cbSize; 
ULONG fMask; 
HWND hwnd; 
LPCWSTR pszFile; 
LPCWSTR pszParameters; 
LPCWSTR pszCurrentDirectory; 
HANDLE hUserToken; 
LPSECURITY_ATTRIBUTES lpProcessAttributes; 
LPSECURITY_ATTRIBUTES lpThreadAttributes; 
BOOL bInheritHandles; 
DWORD dwCreationFlags; 
LPSTARTUPINFOW lpStartupInfo; 
LPPROCESS_INFORMATION lpProcessInformation; 
} SHCREATEPROCESSINFOW; }extern "C" { typedef _SHCREATEPROCESSINFOW *PSHCREATEPROCESSINFOW; }

extern "C" __declspec( dllimport ) BOOL __stdcall SHCreateProcessAsUserW(PSHCREATEPROCESSINFOW); 
#line 504 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" __declspec( dllimport ) HRESULT __stdcall SHEvaluateSystemCommandTemplate(PCWSTR, PWSTR *, PWSTR *, PWSTR *); 
#line 852
extern "C" { typedef 
#line 840
enum ASSOCCLASS { 

ASSOCCLASS_SHELL_KEY, 
ASSOCCLASS_PROGID_KEY, 
ASSOCCLASS_PROGID_STR, 
ASSOCCLASS_CLSID_KEY, 
ASSOCCLASS_CLSID_STR, 
ASSOCCLASS_APP_KEY, 
ASSOCCLASS_APP_STR, 
ASSOCCLASS_SYSTEM_STR, 
ASSOCCLASS_FOLDER, 
ASSOCCLASS_STAR
} ASSOCCLASS; }
#line 858
extern "C" { typedef 
#line 853
struct ASSOCIATIONELEMENT_ { 

ASSOCCLASS ac; 
HKEY hkClass; 
PCWSTR pszClass; 
} ASSOCIATIONELEMENT; }



extern "C" __declspec( dllimport ) HRESULT __stdcall AssocCreateForClasses(const ASSOCIATIONELEMENT *, ULONG, const IID &, void **); 
#line 917 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" { typedef 
#line 908 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
struct _SHQUERYRBINFO { 
DWORD cbSize; 

__int64 i64Size; 
__int64 i64NumItems; 
#line 917 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
} SHQUERYRBINFO; }extern "C" { typedef _SHQUERYRBINFO *LPSHQUERYRBINFO; }
#line 927
extern "C" __declspec( dllimport ) HRESULT __stdcall SHQueryRecycleBinA(LPCSTR, LPSHQUERYRBINFO); 
extern "C" __declspec( dllimport ) HRESULT __stdcall SHQueryRecycleBinW(LPCWSTR, LPSHQUERYRBINFO); 
#line 934 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" __declspec( dllimport ) HRESULT __stdcall SHEmptyRecycleBinA(HWND, LPCSTR, DWORD); 
extern "C" __declspec( dllimport ) HRESULT __stdcall SHEmptyRecycleBinW(HWND, LPCWSTR, DWORD); 
#line 959 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" { typedef 
#line 953
enum { 
QUNS_NOT_PRESENT = 1, 
QUNS_BUSY, 
QUNS_RUNNING_D3D_FULL_SCREEN, 
QUNS_PRESENTATION_MODE, 
QUNS_ACCEPTS_NOTIFICATIONS
} QUERY_USER_NOTIFICATION_STATE; }

extern "C" __declspec( dllimport ) HRESULT __stdcall SHQueryUserNotificationState(QUERY_USER_NOTIFICATION_STATE *); 
#line 993 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" { typedef 
#line 965 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
struct _NOTIFYICONDATAA { 
DWORD cbSize; 
HWND hWnd; 
UINT uID; 
UINT uFlags; 
UINT uCallbackMessage; 
HICON hIcon; 
#line 976 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
CHAR szTip[128]; 
DWORD dwState; 
DWORD dwStateMask; 
CHAR szInfo[256]; 
union { 
UINT uTimeout; 
UINT uVersion; 
}; 
CHAR szInfoTitle[64]; 
DWORD dwInfoFlags; 
#line 988 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
GUID guidItem; 
#line 991 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
HICON hBalloonIcon; 
#line 993 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
} NOTIFYICONDATAA; }extern "C" { typedef _NOTIFYICONDATAA *PNOTIFYICONDATAA; }
#line 1022 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" { typedef 
#line 994 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
struct _NOTIFYICONDATAW { 
DWORD cbSize; 
HWND hWnd; 
UINT uID; 
UINT uFlags; 
UINT uCallbackMessage; 
HICON hIcon; 
#line 1005 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
WCHAR szTip[128]; 
DWORD dwState; 
DWORD dwStateMask; 
WCHAR szInfo[256]; 
union { 
UINT uTimeout; 
UINT uVersion; 
}; 
WCHAR szInfoTitle[64]; 
DWORD dwInfoFlags; 
#line 1017 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
GUID guidItem; 
#line 1020 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
HICON hBalloonIcon; 
#line 1022 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
} NOTIFYICONDATAW; }extern "C" { typedef _NOTIFYICONDATAW *PNOTIFYICONDATAW; }




extern "C" { typedef NOTIFYICONDATAA NOTIFYICONDATA; }
extern "C" { typedef PNOTIFYICONDATAA PNOTIFYICONDATA; }
#line 1129 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" __declspec( dllimport ) BOOL __stdcall Shell_NotifyIconA(DWORD, PNOTIFYICONDATAA); 
extern "C" __declspec( dllimport ) BOOL __stdcall Shell_NotifyIconW(DWORD, PNOTIFYICONDATAW); 
#line 1170 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" { typedef 
#line 1163
struct _SHFILEINFOA { 

HICON hIcon; 
int iIcon; 
DWORD dwAttributes; 
CHAR szDisplayName[260]; 
CHAR szTypeName[80]; 
} SHFILEINFOA; }
#line 1178
extern "C" { typedef 
#line 1171
struct _SHFILEINFOW { 

HICON hIcon; 
int iIcon; 
DWORD dwAttributes; 
WCHAR szDisplayName[260]; 
WCHAR szTypeName[80]; 
} SHFILEINFOW; }



extern "C" { typedef SHFILEINFOA SHFILEINFO; }
#line 1214 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" __declspec( dllimport ) DWORD_PTR __stdcall SHGetFileInfoA(LPCSTR, DWORD, SHFILEINFOA *, UINT, UINT); 

extern "C" __declspec( dllimport ) DWORD_PTR __stdcall SHGetFileInfoW(LPCWSTR, DWORD, SHFILEINFOW *, UINT, UINT); 
#line 1232 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" { typedef 
#line 1225
struct _SHSTOCKICONINFO { 

DWORD cbSize; 
HICON hIcon; 
int iSysImageIndex; 
int iIcon; 
WCHAR szPath[260]; 
} SHSTOCKICONINFO; }
#line 1333
extern "C" { typedef 
#line 1246
enum SHSTOCKICONID { 

SIID_DOCNOASSOC, 
SIID_DOCASSOC, 
SIID_APPLICATION, 
SIID_FOLDER, 
SIID_FOLDEROPEN, 
SIID_DRIVE525, 
SIID_DRIVE35, 
SIID_DRIVEREMOVE, 
SIID_DRIVEFIXED, 
SIID_DRIVENET, 
SIID_DRIVENETDISABLED, 
SIID_DRIVECD, 
SIID_DRIVERAM, 
SIID_WORLD, 
SIID_SERVER = 15, 
SIID_PRINTER, 
SIID_MYNETWORK, 
SIID_FIND = 22, 
SIID_HELP, 
SIID_SHARE = 28, 
SIID_LINK, 
SIID_SLOWFILE, 
SIID_RECYCLER, 
SIID_RECYCLERFULL, 
SIID_MEDIACDAUDIO = 40, 
SIID_LOCK = 47, 
SIID_AUTOLIST = 49, 
SIID_PRINTERNET, 
SIID_SERVERSHARE, 
SIID_PRINTERFAX, 
SIID_PRINTERFAXNET, 
SIID_PRINTERFILE, 
SIID_STACK, 
SIID_MEDIASVCD, 
SIID_STUFFEDFOLDER, 
SIID_DRIVEUNKNOWN, 
SIID_DRIVEDVD, 
SIID_MEDIADVD, 
SIID_MEDIADVDRAM, 
SIID_MEDIADVDRW, 
SIID_MEDIADVDR, 
SIID_MEDIADVDROM, 
SIID_MEDIACDAUDIOPLUS, 
SIID_MEDIACDRW, 
SIID_MEDIACDR, 
SIID_MEDIACDBURN, 
SIID_MEDIABLANKCD, 
SIID_MEDIACDROM, 
SIID_AUDIOFILES, 
SIID_IMAGEFILES, 
SIID_VIDEOFILES, 
SIID_MIXEDFILES, 
SIID_FOLDERBACK, 
SIID_FOLDERFRONT, 
SIID_SHIELD, 
SIID_WARNING, 
SIID_INFO, 
SIID_ERROR, 
SIID_KEY, 
SIID_SOFTWARE, 
SIID_RENAME, 
SIID_DELETE, 
SIID_MEDIAAUDIODVD, 
SIID_MEDIAMOVIEDVD, 
SIID_MEDIAENHANCEDCD, 
SIID_MEDIAENHANCEDDVD, 
SIID_MEDIAHDDVD, 
SIID_MEDIABLURAY, 
SIID_MEDIAVCD, 
SIID_MEDIADVDPLUSR, 
SIID_MEDIADVDPLUSRW, 
SIID_DESKTOPPC, 
SIID_MOBILEPC, 
SIID_USERS, 
SIID_MEDIASMARTMEDIA, 
SIID_MEDIACOMPACTFLASH, 
SIID_DEVICECELLPHONE, 
SIID_DEVICECAMERA, 
SIID_DEVICEVIDEOCAMERA, 
SIID_DEVICEAUDIOPLAYER, 
SIID_NETWORKCONNECT, 
SIID_INTERNET, 
SIID_ZIPFILE, 
SIID_SETTINGS, 
SIID_MAX_ICONS
} SHSTOCKICONID; }




extern "C" __declspec( dllimport ) HRESULT __stdcall SHGetStockIconInfo(SHSTOCKICONID, UINT, SHSTOCKICONINFO *); 
#line 1345 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" __declspec( dllimport ) BOOL __stdcall SHGetDiskFreeSpaceExA(LPCSTR, ULARGE_INTEGER *, ULARGE_INTEGER *, ULARGE_INTEGER *); 

extern "C" __declspec( dllimport ) BOOL __stdcall SHGetDiskFreeSpaceExW(LPCWSTR, ULARGE_INTEGER *, ULARGE_INTEGER *, ULARGE_INTEGER *); 
#line 1354 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" __declspec( dllimport ) BOOL __stdcall SHGetNewLinkInfoA(LPCSTR, LPCSTR, LPSTR, BOOL *, UINT); 
extern "C" __declspec( dllimport ) BOOL __stdcall SHGetNewLinkInfoW(LPCWSTR, LPCWSTR, LPWSTR, BOOL *, UINT); 
#line 1391 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" __declspec( dllimport ) BOOL __stdcall SHInvokePrinterCommandA(HWND, UINT, LPCSTR, LPCSTR, BOOL); 
extern "C" __declspec( dllimport ) BOOL __stdcall SHInvokePrinterCommandW(HWND, UINT, LPCWSTR, LPCWSTR, BOOL); 
#line 1408 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" { typedef 
#line 1401
struct _OPEN_PRINTER_PROPS_INFOA { 

DWORD dwSize; 
LPSTR pszSheetName; 
UINT uSheetIndex; 
DWORD dwFlags; 
BOOL bModal; 
} OPEN_PRINTER_PROPS_INFOA; }extern "C" { typedef _OPEN_PRINTER_PROPS_INFOA *POPEN_PRINTER_PROPS_INFOA; }
#line 1416
extern "C" { typedef 
#line 1409
struct _OPEN_PRINTER_PROPS_INFOW { 

DWORD dwSize; 
LPWSTR pszSheetName; 
UINT uSheetIndex; 
DWORD dwFlags; 
BOOL bModal; 
} OPEN_PRINTER_PROPS_INFOW; }extern "C" { typedef _OPEN_PRINTER_PROPS_INFOW *POPEN_PRINTER_PROPS_INFOW; }




extern "C" { typedef OPEN_PRINTER_PROPS_INFOA OPEN_PRINTER_PROPS_INFO; }
extern "C" { typedef POPEN_PRINTER_PROPS_INFOA POPEN_PRINTER_PROPS_INFO; }
#line 1444 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" __declspec( dllimport ) HRESULT __stdcall SHLoadNonloadedIconOverlayIdentifiers(); 
#line 1465
extern "C" __declspec( dllimport ) HRESULT __stdcall SHIsFileAvailableOffline(LPCWSTR, LPDWORD); 
#line 1478 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" __declspec( dllimport ) HRESULT __stdcall SHSetLocalizedName(LPCWSTR, LPCWSTR, int); 
#line 1483 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" __declspec( dllimport ) HRESULT __stdcall SHRemoveLocalizedName(LPCWSTR); 

extern "C" __declspec( dllimport ) HRESULT __stdcall SHGetLocalizedName(LPCWSTR, LPWSTR, UINT, int *); 
#line 1514 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" __declspec( dllimport ) int __cdecl ShellMessageBoxA(HINSTANCE, HWND, LPCSTR, LPCSTR, UINT, ...); 
#line 1520
extern "C" __declspec( dllimport ) int __cdecl ShellMessageBoxW(HINSTANCE, HWND, LPCWSTR, LPCWSTR, UINT, ...); 
#line 1533 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" __declspec( dllimport ) BOOL __stdcall IsLFNDriveA(LPCSTR); 
extern "C" __declspec( dllimport ) BOOL __stdcall IsLFNDriveW(LPCWSTR); 
#line 1545 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" HRESULT __stdcall SHEnumerateUnreadMailAccountsA(HKEY, DWORD, LPSTR, int); 
extern "C" HRESULT __stdcall SHEnumerateUnreadMailAccountsW(HKEY, DWORD, LPWSTR, int); 
#line 1552 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" HRESULT __stdcall SHGetUnreadMailCountA(HKEY, LPCSTR, DWORD *, FILETIME *, LPSTR, int); 
extern "C" HRESULT __stdcall SHGetUnreadMailCountW(HKEY, LPCWSTR, DWORD *, FILETIME *, LPWSTR, int); 
#line 1559 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" HRESULT __stdcall SHSetUnreadMailCountA(LPCSTR, DWORD, LPCSTR); 
extern "C" HRESULT __stdcall SHSetUnreadMailCountW(LPCWSTR, DWORD, LPCWSTR); 
#line 1570 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" BOOL __stdcall SHTestTokenMembership(HANDLE, ULONG); 
#line 1576 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" __declspec( dllimport ) HRESULT __stdcall SHGetImageList(int, const IID &, void **); 
#line 1594 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" { typedef HRESULT (__stdcall *PFNCANSHAREFOLDERW)(LPCWSTR); }
extern "C" { typedef HRESULT (__stdcall *PFNSHOWSHAREFOLDERUIW)(HWND, LPCWSTR); }
#line 27 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\poppack.h"
#pragma warning(disable:4103)
#line 1608 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
#pragma warning(pop)
#line 29 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\poppack.h"
#pragma pack ( pop )
#line 1617 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" __declspec( dllimport ) BOOL __stdcall InitNetworkAddressControl(); 
#line 1635
typedef 
#line 1630
struct tagNC_ADDRESS { 

struct NET_ADDRESS_INFO_ *pAddrInfo; 
USHORT PortNumber; 
BYTE PrefixLength; 
} NC_ADDRESS; typedef tagNC_ADDRESS *PNC_ADDRESS; 
#line 1658 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\shellapi.h"
extern "C" HRESULT __stdcall SHGetDriveMedia(LPCWSTR, DWORD *); 
#line 24 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\pshpack8.h"
#pragma warning(disable:4103)

#pragma pack ( push, 8 )
#line 86 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winperf.h"
typedef 
#line 58
struct _PERF_DATA_BLOCK { 
WCHAR Signature[4]; 
DWORD LittleEndian; 
DWORD Version; 

DWORD Revision; 

DWORD TotalByteLength; 
DWORD HeaderLength; 
DWORD NumObjectTypes; 

LONG DefaultObject; 




SYSTEMTIME SystemTime; 

LARGE_INTEGER PerfTime; 

LARGE_INTEGER PerfFreq; 

LARGE_INTEGER PerfTime100nSec; 

DWORD SystemNameLength; 
DWORD SystemNameOffset; 


} PERF_DATA_BLOCK; typedef _PERF_DATA_BLOCK *PPERF_DATA_BLOCK; 
#line 165 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winperf.h"
typedef 
#line 96 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winperf.h"
struct _PERF_OBJECT_TYPE { 
DWORD TotalByteLength; 
#line 105
DWORD DefinitionLength; 
#line 113
DWORD HeaderLength; 



DWORD ObjectNameTitleIndex; 




LPWSTR ObjectNameTitle; 
#line 126 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winperf.h"
DWORD ObjectHelpTitleIndex; 




LPWSTR ObjectHelpTitle; 
#line 135 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winperf.h"
DWORD DetailLevel; 



DWORD NumCounters; 


LONG DefaultCounter; 



LONG NumInstances; 
#line 158
DWORD CodePage; 


LARGE_INTEGER PerfTime; 

LARGE_INTEGER PerfFreq; 

} PERF_OBJECT_TYPE; typedef _PERF_OBJECT_TYPE *PPERF_OBJECT_TYPE; 
#line 574 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winperf.h"
typedef 
#line 542 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winperf.h"
struct _PERF_COUNTER_DEFINITION { 
DWORD ByteLength; 
DWORD CounterNameTitleIndex; 
#line 550
LPWSTR CounterNameTitle; 
#line 554 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winperf.h"
DWORD CounterHelpTitleIndex; 
#line 560
LPWSTR CounterHelpTitle; 
#line 564 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winperf.h"
LONG DefaultScale; 


DWORD DetailLevel; 

DWORD CounterType; 
DWORD CounterSize; 
DWORD CounterOffset; 


} PERF_COUNTER_DEFINITION; typedef _PERF_COUNTER_DEFINITION *PPERF_COUNTER_DEFINITION; 
#line 614
typedef 
#line 589
struct _PERF_INSTANCE_DEFINITION { 
DWORD ByteLength; 

DWORD ParentObjectTitleIndex; 
#line 598
DWORD ParentObjectInstance; 



LONG UniqueID; 


DWORD NameOffset; 


DWORD NameLength; 
#line 614
} PERF_INSTANCE_DEFINITION; typedef _PERF_INSTANCE_DEFINITION *PPERF_INSTANCE_DEFINITION; 
#line 631
typedef 
#line 628
struct _PERF_COUNTER_BLOCK { 
DWORD ByteLength; 

} PERF_COUNTER_BLOCK; typedef _PERF_COUNTER_BLOCK *PPERF_COUNTER_BLOCK; 
#line 648
typedef DWORD __stdcall PM_OPEN_PROC(LPWSTR); 
typedef DWORD __stdcall PM_COLLECT_PROC(LPWSTR, LPVOID *, LPDWORD, LPDWORD); 
typedef DWORD __stdcall PM_CLOSE_PROC(void); 
typedef DWORD __stdcall PM_QUERY_PROC(LPDWORD, LPVOID *, LPDWORD, LPDWORD); 
#line 27 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack ( pop )
#line 44 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsock.h"
typedef unsigned char u_char; 
typedef unsigned short u_short; 
typedef unsigned u_int; 
typedef unsigned long u_long; 
#line 54
typedef UINT_PTR SOCKET; 
#line 71 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsock.h"
typedef 
#line 68
struct fd_set { 
u_int fd_count; 
SOCKET fd_array[64]; 
} fd_set; 
#line 77 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsock.h"
extern "C" { extern int __stdcall __WSAFDIsSet(SOCKET, fd_set *); } 
#line 111 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsock.h"
struct timeval { 
long tv_sec; 
long tv_usec; 
}; 
#line 167
struct hostent { 
char *h_name; 
char **h_aliases; 
short h_addrtype; 
short h_length; 
char **h_addr_list; 

}; 
#line 180
struct netent { 
char *n_name; 
char **n_aliases; 
short n_addrtype; 
u_long n_net; 
}; 

struct servent { 
char *s_name; 
char **s_aliases; 




short s_port; 
char *s_proto; 
#line 197 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsock.h"
}; 

struct protoent { 
char *p_name; 
char **p_aliases; 
short p_proto; 
}; 
#line 34 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\inaddr.h"
typedef 
#line 22
struct in_addr { 
union { 
struct { UCHAR s_b1; UCHAR s_b2; UCHAR s_b3; UCHAR s_b4; } S_un_b; 
struct { USHORT s_w1; USHORT s_w2; } S_un_w; 
ULONG S_addr; 
} S_un; 
#line 34
} IN_ADDR; typedef in_addr *PIN_ADDR; typedef in_addr *LPIN_ADDR; 
#line 312 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsock.h"
struct sockaddr_in { 
short sin_family; 
u_short sin_port; 
in_addr sin_addr; 
char sin_zero[8]; 
}; 
#line 338 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsock.h"
typedef 
#line 322 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsock.h"
struct WSAData { 
WORD wVersion; 
WORD wHighVersion; 
#line 332
char szDescription[(256 + 1)]; 
char szSystemStatus[(128 + 1)]; 
unsigned short iMaxSockets; 
unsigned short iMaxUdpDg; 
char *lpVendorInfo; 
#line 338 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsock.h"
} WSADATA; 

typedef WSADATA *LPWSADATA; 
#line 363
struct ip_mreq { 
in_addr imr_multiaddr; 
in_addr imr_interface; 
}; 
#line 485
struct sockaddr { 
u_short sa_family; 
char sa_data[14]; 
}; 
#line 494
struct sockproto { 
u_short sp_family; 
u_short sp_protocol; 
}; 
#line 531
struct linger { 
u_short l_onoff; 
u_short l_linger; 
}; 
#line 735 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsock.h"
extern "C" { extern SOCKET __stdcall accept(SOCKET, sockaddr *, int *); } 




extern "C" { extern int __stdcall bind(SOCKET, const sockaddr *, int); } 




extern "C" { extern int __stdcall closesocket(SOCKET); } 

extern "C" { extern int __stdcall connect(SOCKET, const sockaddr *, int); } 




extern "C" { extern int __stdcall ioctlsocket(SOCKET, long, u_long *); } 




extern "C" { extern int __stdcall getpeername(SOCKET, sockaddr *, int *); } 




extern "C" { extern int __stdcall getsockname(SOCKET, sockaddr *, int *); } 




extern "C" { extern int __stdcall getsockopt(SOCKET, int, int, char *, int *); } 
#line 774
extern "C" { extern u_long __stdcall htonl(u_long); } 

extern "C" { extern u_short __stdcall htons(u_short); } 

extern "C" { extern unsigned long __stdcall inet_addr(const char *); } 

extern "C" { extern char *__stdcall inet_ntoa(in_addr); } 

extern "C" { extern int __stdcall listen(SOCKET, int); } 



extern "C" { extern u_long __stdcall ntohl(u_long); } 

extern "C" { extern u_short __stdcall ntohs(u_short); } 

extern "C" { extern int __stdcall recv(SOCKET, char *, int, int); } 
#line 796
extern "C" { extern int __stdcall recvfrom(SOCKET, char *, int, int, sockaddr *, int *); } 
#line 804
extern "C" { extern int __stdcall select(int, fd_set *, fd_set *, fd_set *, const timeval *); } 
#line 811
extern "C" { extern int __stdcall send(SOCKET, const char *, int, int); } 
#line 817
extern "C" { extern int __stdcall sendto(SOCKET, const char *, int, int, const sockaddr *, int); } 
#line 825
extern "C" { extern int __stdcall setsockopt(SOCKET, int, int, const char *, int); } 
#line 832
extern "C" { extern int __stdcall shutdown(SOCKET, int); } 



extern "C" { extern SOCKET __stdcall socket(int, int, int); } 
#line 843
extern "C" { extern hostent *__stdcall gethostbyaddr(const char *, int, int); } 




extern "C" { extern hostent *__stdcall gethostbyname(const char *); } 

extern "C" { extern int __stdcall gethostname(char *, int); } 



extern "C" { extern servent *__stdcall getservbyport(int, const char *); } 



extern "C" { extern servent *__stdcall getservbyname(const char *, const char *); } 



extern "C" { extern protoent *__stdcall getprotobynumber(int); } 

extern "C" { extern protoent *__stdcall getprotobyname(const char *); } 



extern "C" { extern int __stdcall WSAStartup(WORD, LPWSADATA); } 



extern "C" { extern int __stdcall WSACleanup(); } 

extern "C" { extern void __stdcall WSASetLastError(int); } 

extern "C" { extern int __stdcall WSAGetLastError(); } 

extern "C" { extern BOOL __stdcall WSAIsBlocking(); } 

extern "C" { extern int __stdcall WSAUnhookBlockingHook(); } 

extern "C" { extern FARPROC __stdcall WSASetBlockingHook(FARPROC); } 

extern "C" { extern int __stdcall WSACancelBlockingCall(); } 

extern "C" { extern HANDLE __stdcall WSAAsyncGetServByName(HWND, u_int, const char *, const char *, char *, int); } 
#line 894
extern "C" { extern HANDLE __stdcall WSAAsyncGetServByPort(HWND, u_int, int, const char *, char *, int); } 
#line 902
extern "C" { extern HANDLE __stdcall WSAAsyncGetProtoByName(HWND, u_int, const char *, char *, int); } 
#line 909
extern "C" { extern HANDLE __stdcall WSAAsyncGetProtoByNumber(HWND, u_int, int, char *, int); } 
#line 916
extern "C" { extern HANDLE __stdcall WSAAsyncGetHostByName(HWND, u_int, const char *, char *, int); } 
#line 923
extern "C" { extern HANDLE __stdcall WSAAsyncGetHostByAddr(HWND, u_int, const char *, int, int, char *, int); } 
#line 932
extern "C" { extern int __stdcall WSACancelAsyncRequest(HANDLE); } 

extern "C" { extern int __stdcall WSAAsyncSelect(SOCKET, HWND, u_int, long); } 
#line 940
extern "C" { extern int __stdcall WSARecvEx(SOCKET, char *, int, int *); } 
#line 951
extern "C" { typedef 
#line 946
struct _TRANSMIT_FILE_BUFFERS { 
PVOID Head; 
DWORD HeadLength; 
PVOID Tail; 
DWORD TailLength; 
} TRANSMIT_FILE_BUFFERS; }extern "C" { typedef _TRANSMIT_FILE_BUFFERS *PTRANSMIT_FILE_BUFFERS; }extern "C" { typedef _TRANSMIT_FILE_BUFFERS *LPTRANSMIT_FILE_BUFFERS; }
#line 959
extern "C" { extern BOOL __stdcall TransmitFile(SOCKET, HANDLE, DWORD, DWORD, LPOVERLAPPED, LPTRANSMIT_FILE_BUFFERS, DWORD); } 
#line 971
extern "C" { extern BOOL __stdcall AcceptEx(SOCKET, SOCKET, PVOID, DWORD, DWORD, DWORD, LPDWORD, LPOVERLAPPED); } 
#line 984
extern "C" { extern void __stdcall GetAcceptExSockaddrs(PVOID, DWORD, DWORD, DWORD, sockaddr **, LPINT, sockaddr **, LPINT); } 
#line 1000 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsock.h"
typedef sockaddr SOCKADDR; 
typedef sockaddr *PSOCKADDR; 
typedef sockaddr *LPSOCKADDR; 

typedef sockaddr_in SOCKADDR_IN; 
typedef sockaddr_in *PSOCKADDR_IN; 
typedef sockaddr_in *LPSOCKADDR_IN; 

typedef linger LINGER; 
typedef linger *PLINGER; 
typedef linger *LPLINGER; 

typedef fd_set FD_SET; 
typedef fd_set *PFD_SET; 
typedef fd_set *LPFD_SET; 

typedef hostent HOSTENT; 
typedef hostent *PHOSTENT; 
typedef hostent *LPHOSTENT; 

typedef servent SERVENT; 
typedef servent *PSERVENT; 
typedef servent *LPSERVENT; 

typedef protoent PROTOENT; 
typedef protoent *PPROTOENT; 
typedef protoent *LPPROTOENT; 

typedef timeval TIMEVAL; 
typedef timeval *PTIMEVAL; 
typedef timeval *LPTIMEVAL; 
#line 21 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincrypt.h"
#pragma warning(push)
#line 23 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincrypt.h"
#pragma warning(disable:4201)
#line 237 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincrypt.h"
extern "C" { typedef unsigned ALG_ID; }
#line 316 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincrypt.h"
extern "C" { typedef ULONG_PTR HCRYPTPROV; }
extern "C" { typedef ULONG_PTR HCRYPTKEY; }
extern "C" { typedef ULONG_PTR HCRYPTHASH; }
#line 834 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincrypt.h"
extern "C" { typedef 
#line 829
struct _CMS_KEY_INFO { 
DWORD dwVersion; 
ALG_ID Algid; 
BYTE *pbOID; 
DWORD cbOID; 
} CMS_KEY_INFO; }extern "C" { typedef _CMS_KEY_INFO *PCMS_KEY_INFO; }
#line 843
extern "C" { typedef 
#line 837
struct _HMAC_Info { 
ALG_ID HashAlgid; 
BYTE *pbInnerString; 
DWORD cbInnerString; 
BYTE *pbOuterString; 
DWORD cbOuterString; 
} HMAC_INFO; }extern "C" { typedef _HMAC_Info *PHMAC_INFO; }
#line 852
extern "C" { typedef 
#line 846
struct _SCHANNEL_ALG { 
DWORD dwUse; 
ALG_ID Algid; 
DWORD cBits; 
DWORD dwFlags; 
DWORD dwReserved; 
} SCHANNEL_ALG; }extern "C" { typedef _SCHANNEL_ALG *PSCHANNEL_ALG; }
#line 866
extern "C" { typedef 
#line 861
struct _PROV_ENUMALGS { 
ALG_ID aiAlgid; 
DWORD dwBitLen; 
DWORD dwNameLen; 
CHAR szName[20]; 
} PROV_ENUMALGS; }
#line 879
extern "C" { typedef 
#line 869
struct _PROV_ENUMALGS_EX { 
ALG_ID aiAlgid; 
DWORD dwDefaultLen; 
DWORD dwMinLen; 
DWORD dwMaxLen; 
DWORD dwProtocols; 
DWORD dwNameLen; 
CHAR szName[20]; 
DWORD dwLongNameLen; 
CHAR szLongName[40]; 
} PROV_ENUMALGS_EX; }
#line 887
extern "C" { typedef 
#line 882
struct _PUBLICKEYSTRUC { 
BYTE bType; 
BYTE bVersion; 
WORD reserved; 
ALG_ID aiKeyAlg; 
} BLOBHEADER; }extern "C" { typedef _PUBLICKEYSTRUC PUBLICKEYSTRUC; }
#line 894
extern "C" { typedef 
#line 889
struct _RSAPUBKEY { 
DWORD magic; 
DWORD bitlen; 
DWORD pubexp; 

} RSAPUBKEY; }




extern "C" { typedef 
#line 896
struct _PUBKEY { 
DWORD magic; 
DWORD bitlen; 
} DHPUBKEY; }extern "C" { typedef _PUBKEY DSSPUBKEY; }extern "C" { typedef _PUBKEY KEAPUBKEY; }extern "C" { typedef _PUBKEY TEKPUBKEY; }




extern "C" { typedef 
#line 901
struct _DSSSEED { 
DWORD counter; 
BYTE seed[20]; 
} DSSSEED; }
#line 912
extern "C" { typedef 
#line 906
struct _PUBKEYVER3 { 
DWORD magic; 
DWORD bitlenP; 
DWORD bitlenQ; 
DWORD bitlenJ; 
DSSSEED DSSSeed; 
} DHPUBKEY_VER3; }extern "C" { typedef _PUBKEYVER3 DSSPUBKEY_VER3; }
#line 921
extern "C" { typedef 
#line 914
struct _PRIVKEYVER3 { 
DWORD magic; 
DWORD bitlenP; 
DWORD bitlenQ; 
DWORD bitlenJ; 
DWORD bitlenX; 
DSSSEED DSSSeed; 
} DHPRIVKEY_VER3; }extern "C" { typedef _PRIVKEYVER3 DSSPRIVKEY_VER3; }
#line 927
extern "C" { typedef 
#line 923
struct _KEY_TYPE_SUBTYPE { 
DWORD dwKeySpec; 
GUID Type; 
GUID Subtype; 
} KEY_TYPE_SUBTYPE; }extern "C" { typedef _KEY_TYPE_SUBTYPE *PKEY_TYPE_SUBTYPE; }
#line 933
extern "C" { typedef 
#line 929
struct _CERT_FORTEZZA_DATA_PROP { 
unsigned char SerialNumber[8]; 
int CertIndex; 
unsigned char CertLabel[36]; 
} CERT_FORTEZZA_DATA_PROP; }
#line 941
extern "C" { typedef 
#line 936
struct _CRYPT_RC4_KEY_STATE { 
unsigned char Key[16]; 
unsigned char SBox[256]; 
unsigned char i; 
unsigned char j; 
} CRYPT_RC4_KEY_STATE; }extern "C" { typedef _CRYPT_RC4_KEY_STATE *PCRYPT_RC4_KEY_STATE; }
#line 947
extern "C" { typedef 
#line 943
struct _CRYPT_DES_KEY_STATE { 
unsigned char Key[8]; 
unsigned char IV[8]; 
unsigned char Feedback[8]; 
} CRYPT_DES_KEY_STATE; }extern "C" { typedef _CRYPT_DES_KEY_STATE *PCRYPT_DES_KEY_STATE; }
#line 953
extern "C" { typedef 
#line 949
struct _CRYPT_3DES_KEY_STATE { 
unsigned char Key[24]; 
unsigned char IV[8]; 
unsigned char Feedback[8]; 
} CRYPT_3DES_KEY_STATE; }extern "C" { typedef _CRYPT_3DES_KEY_STATE *PCRYPT_3DES_KEY_STATE; }
#line 963 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincrypt.h"
extern "C" { typedef 
#line 957
struct _CRYPT_AES_128_KEY_STATE { 
unsigned char Key[16]; 
unsigned char IV[16]; 
unsigned char EncryptionState[11][16]; 
unsigned char DecryptionState[11][16]; 
unsigned char Feedback[16]; 
} CRYPT_AES_128_KEY_STATE; }extern "C" { typedef _CRYPT_AES_128_KEY_STATE *PCRYPT_AES_128_KEY_STATE; }
#line 971
extern "C" { typedef 
#line 965
struct _CRYPT_AES_256_KEY_STATE { 
unsigned char Key[32]; 
unsigned char IV[16]; 
unsigned char EncryptionState[15][16]; 
unsigned char DecryptionState[15][16]; 
unsigned char Feedback[16]; 
} CRYPT_AES_256_KEY_STATE; }extern "C" { typedef _CRYPT_AES_256_KEY_STATE *PCRYPT_AES_256_KEY_STATE; }
#line 982 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincrypt.h"
extern "C" { typedef 
#line 979
struct _CRYPTOAPI_BLOB { 
DWORD cbData; 
BYTE *pbData; 
} CRYPT_INTEGER_BLOB; }extern "C" { typedef _CRYPTOAPI_BLOB *PCRYPT_INTEGER_BLOB; }
extern "C" { typedef _CRYPTOAPI_BLOB CRYPT_UINT_BLOB; }extern "C" { typedef _CRYPTOAPI_BLOB *PCRYPT_UINT_BLOB; }
extern "C" { typedef _CRYPTOAPI_BLOB CRYPT_OBJID_BLOB; }extern "C" { typedef _CRYPTOAPI_BLOB *PCRYPT_OBJID_BLOB; }
extern "C" { typedef _CRYPTOAPI_BLOB CERT_NAME_BLOB; }extern "C" { typedef _CRYPTOAPI_BLOB *PCERT_NAME_BLOB; }
extern "C" { typedef _CRYPTOAPI_BLOB CERT_RDN_VALUE_BLOB; }extern "C" { typedef _CRYPTOAPI_BLOB *PCERT_RDN_VALUE_BLOB; }
extern "C" { typedef _CRYPTOAPI_BLOB CERT_BLOB; }extern "C" { typedef _CRYPTOAPI_BLOB *PCERT_BLOB; }
extern "C" { typedef _CRYPTOAPI_BLOB CRL_BLOB; }extern "C" { typedef _CRYPTOAPI_BLOB *PCRL_BLOB; }
extern "C" { typedef _CRYPTOAPI_BLOB DATA_BLOB; }extern "C" { typedef _CRYPTOAPI_BLOB *PDATA_BLOB; }
extern "C" { typedef _CRYPTOAPI_BLOB CRYPT_DATA_BLOB; }extern "C" { typedef _CRYPTOAPI_BLOB *PCRYPT_DATA_BLOB; }
extern "C" { typedef _CRYPTOAPI_BLOB CRYPT_HASH_BLOB; }extern "C" { typedef _CRYPTOAPI_BLOB *PCRYPT_HASH_BLOB; }
extern "C" { typedef _CRYPTOAPI_BLOB CRYPT_DIGEST_BLOB; }extern "C" { typedef _CRYPTOAPI_BLOB *PCRYPT_DIGEST_BLOB; }
extern "C" { typedef _CRYPTOAPI_BLOB CRYPT_DER_BLOB; }extern "C" { typedef _CRYPTOAPI_BLOB *PCRYPT_DER_BLOB; }
extern "C" { typedef _CRYPTOAPI_BLOB CRYPT_ATTR_BLOB; }extern "C" { typedef _CRYPTOAPI_BLOB *PCRYPT_ATTR_BLOB; }
#line 1004
extern "C" { typedef 
#line 998
struct _CMS_DH_KEY_INFO { 
DWORD dwVersion; 
ALG_ID Algid; 
LPSTR pszContentEncObjId; 
CRYPT_DATA_BLOB PubInfo; 
void *pReserved; 
} CMS_DH_KEY_INFO; }extern "C" { typedef _CMS_DH_KEY_INFO *PCMS_DH_KEY_INFO; }
#line 1010
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptAcquireContextA(HCRYPTPROV *, LPCSTR, LPCSTR, DWORD, DWORD); } 
#line 1020
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptAcquireContextW(HCRYPTPROV *, LPCWSTR, LPCWSTR, DWORD, DWORD); } 
#line 1093 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincrypt.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptReleaseContext(HCRYPTPROV, DWORD); } 
#line 1112 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincrypt.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptGenKey(HCRYPTPROV, ALG_ID, DWORD, HCRYPTKEY *); } 
#line 1122
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptDeriveKey(HCRYPTPROV, ALG_ID, HCRYPTHASH, DWORD, HCRYPTKEY *); } 
#line 1133
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptDestroyKey(HCRYPTKEY); } 
#line 1141
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptSetKeyParam(HCRYPTKEY, DWORD, const BYTE *, DWORD); } 
#line 1164 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincrypt.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptGetKeyParam(HCRYPTKEY, DWORD, BYTE *, DWORD *, DWORD); } 
#line 1176
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptSetHashParam(HCRYPTHASH, DWORD, const BYTE *, DWORD); } 
#line 1199 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincrypt.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptGetHashParam(HCRYPTHASH, DWORD, BYTE *, DWORD *, DWORD); } 
#line 1211
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptSetProvParam(HCRYPTPROV, DWORD, const BYTE *, DWORD); } 
#line 1234 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincrypt.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptGetProvParam(HCRYPTPROV, DWORD, BYTE *, DWORD *, DWORD); } 
#line 1245
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptGenRandom(HCRYPTPROV, DWORD, BYTE *); } 
#line 1254
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptGetUserKey(HCRYPTPROV, DWORD, HCRYPTKEY *); } 
#line 1263
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptExportKey(HCRYPTKEY, HCRYPTKEY, DWORD, DWORD, BYTE *, DWORD *); } 
#line 1275
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptImportKey(HCRYPTPROV, const BYTE *, DWORD, HCRYPTKEY, DWORD, HCRYPTKEY *); } 
#line 1287
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptEncrypt(HCRYPTKEY, HCRYPTHASH, BOOL, DWORD, BYTE *, DWORD *, DWORD); } 
#line 1300
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptDecrypt(HCRYPTKEY, HCRYPTHASH, BOOL, DWORD, BYTE *, DWORD *); } 
#line 1312
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptCreateHash(HCRYPTPROV, ALG_ID, HCRYPTKEY, DWORD, HCRYPTHASH *); } 
#line 1323
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptHashData(HCRYPTHASH, const BYTE *, DWORD, DWORD); } 
#line 1333
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptHashSessionKey(HCRYPTHASH, HCRYPTKEY, DWORD); } 
#line 1342
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptDestroyHash(HCRYPTHASH); } 
#line 1350
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptSignHashA(HCRYPTHASH, DWORD, LPCSTR, DWORD, BYTE *, DWORD *); } 
#line 1361
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptSignHashW(HCRYPTHASH, DWORD, LPCWSTR, DWORD, BYTE *, DWORD *); } 
#line 1438 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincrypt.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptVerifySignatureA(HCRYPTHASH, const BYTE *, DWORD, HCRYPTKEY, LPCSTR, DWORD); } 
#line 1449
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptVerifySignatureW(HCRYPTHASH, const BYTE *, DWORD, HCRYPTKEY, LPCWSTR, DWORD); } 
#line 1526 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincrypt.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptSetProviderA(LPCSTR, DWORD); } 
#line 1533
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptSetProviderW(LPCWSTR, DWORD); } 
#line 1570 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincrypt.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptSetProviderExA(LPCSTR, DWORD, DWORD *, DWORD); } 
#line 1579
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptSetProviderExW(LPCWSTR, DWORD, DWORD *, DWORD); } 
#line 1622 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincrypt.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptGetDefaultProviderA(DWORD, DWORD *, DWORD, LPSTR, DWORD *); } 
#line 1632
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptGetDefaultProviderW(DWORD, DWORD *, DWORD, LPWSTR, DWORD *); } 
#line 1678 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincrypt.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptEnumProviderTypesA(DWORD, DWORD *, DWORD, DWORD *, LPSTR, DWORD *); } 
#line 1689
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptEnumProviderTypesW(DWORD, DWORD *, DWORD, DWORD *, LPWSTR, DWORD *); } 
#line 1766 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincrypt.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptEnumProvidersA(DWORD, DWORD *, DWORD, DWORD *, LPSTR, DWORD *); } 
#line 1777
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptEnumProvidersW(DWORD, DWORD *, DWORD, DWORD *, LPWSTR, DWORD *); } 
#line 1853 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincrypt.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptContextAddRef(HCRYPTPROV, DWORD *, DWORD); } 
#line 1862
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptDuplicateKey(HCRYPTKEY, DWORD *, DWORD, HCRYPTKEY *); } 
#line 1872
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptDuplicateHash(HCRYPTHASH, DWORD *, DWORD, HCRYPTHASH *); } 
#line 1888
extern "C" { extern BOOL __cdecl GetEncSChannel(BYTE **, DWORD *); } 
#line 24 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\bcrypt.h"
extern "C" { typedef LONG NTSTATUS; }extern "C" { typedef LONG *PNTSTATUS; }
#line 107 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\bcrypt.h"
extern "C" { typedef 
#line 102
struct __BCRYPT_KEY_LENGTHS_STRUCT { 

ULONG dwMinLength; 
ULONG dwMaxLength; 
ULONG dwIncrement; 
} BCRYPT_KEY_LENGTHS_STRUCT; }

#pragma pack ( push, 4 )




extern "C" { typedef __declspec(align(4)) 
#line 110
struct __declspec(align(4)) _BCRYPT_OID { 

ULONG cbOID; 
PUCHAR pbOID; 
} BCRYPT_OID; }
#line 120
extern "C" { typedef __declspec(align(4)) 
#line 116
struct __declspec(align(4)) _BCRYPT_OID_LIST { 

ULONG dwOIDCount; 
BCRYPT_OID *pOIDs; 
} BCRYPT_OID_LIST; }
#pragma pack ( pop )




extern "C" { typedef 
#line 123
struct _BCRYPT_PKCS1_PADDING_INFO { 

LPCWSTR pszAlgId; 
} BCRYPT_PKCS1_PADDING_INFO; }
#line 132
extern "C" { typedef 
#line 128
struct _BCRYPT_PSS_PADDING_INFO { 

LPCWSTR pszAlgId; 
ULONG cbSalt; 
} BCRYPT_PSS_PADDING_INFO; }
#line 139
extern "C" { typedef 
#line 134
struct _BCRYPT_OAEP_PADDING_INFO { 

LPCWSTR pszAlgId; 
PUCHAR pbLabel; 
ULONG cbLabel; 
} BCRYPT_OAEP_PADDING_INFO; }
#line 205
extern "C" { typedef 
#line 201
struct _BCryptBuffer { 
ULONG cbBuffer; 
ULONG BufferType; 
PVOID pvBuffer; 
} BCryptBuffer; }extern "C" { typedef _BCryptBuffer *PBCryptBuffer; }
#line 211
extern "C" { typedef 
#line 207
struct _BCryptBufferDesc { 
ULONG ulVersion; 
ULONG cBuffers; 
PBCryptBuffer pBuffers; 
} BCryptBufferDesc; }extern "C" { typedef _BCryptBufferDesc *PBCryptBufferDesc; }
#line 218
extern "C" { typedef PVOID BCRYPT_HANDLE; }
extern "C" { typedef PVOID BCRYPT_ALG_HANDLE; }
extern "C" { typedef PVOID BCRYPT_KEY_HANDLE; }
extern "C" { typedef PVOID BCRYPT_HASH_HANDLE; }
extern "C" { typedef PVOID BCRYPT_SECRET_HANDLE; }
#line 235
extern "C" { typedef 
#line 232
struct _BCRYPT_KEY_BLOB { 

ULONG Magic; 
} BCRYPT_KEY_BLOB; }
#line 262
extern "C" { typedef 
#line 254
struct _BCRYPT_RSAKEY_BLOB { 

ULONG Magic; 
ULONG BitLength; 
ULONG cbPublicExp; 
ULONG cbModulus; 
ULONG cbPrime1; 
ULONG cbPrime2; 
} BCRYPT_RSAKEY_BLOB; }
#line 302
extern "C" { typedef 
#line 298
struct _BCRYPT_ECCKEY_BLOB { 

ULONG dwMagic; 
ULONG cbKey; 
} BCRYPT_ECCKEY_BLOB; }extern "C" { typedef _BCRYPT_ECCKEY_BLOB *PBCRYPT_ECCKEY_BLOB; }
#line 319
extern "C" { typedef 
#line 315
struct _BCRYPT_DH_KEY_BLOB { 

ULONG dwMagic; 
ULONG cbKey; 
} BCRYPT_DH_KEY_BLOB; }extern "C" { typedef _BCRYPT_DH_KEY_BLOB *PBCRYPT_DH_KEY_BLOB; }
#line 331
extern "C" { typedef 
#line 326
struct _BCRYPT_DH_PARAMETER_HEADER { 

ULONG cbLength; 
ULONG dwMagic; 
ULONG cbKeyLength; 
} BCRYPT_DH_PARAMETER_HEADER; }
#line 353
extern "C" { typedef 
#line 346
struct _BCRYPT_DSA_KEY_BLOB { 

ULONG dwMagic; 
ULONG cbKey; 
UCHAR Count[4]; 
UCHAR Seed[20]; 
UCHAR q[20]; 
} BCRYPT_DSA_KEY_BLOB; }extern "C" { typedef _BCRYPT_DSA_KEY_BLOB *PBCRYPT_DSA_KEY_BLOB; }
#line 360
extern "C" { typedef 
#line 355
struct _BCRYPT_KEY_DATA_BLOB_HEADER { 

ULONG dwMagic; 
ULONG dwVersion; 
ULONG cbKeyData; 
} BCRYPT_KEY_DATA_BLOB_HEADER; }extern "C" { typedef _BCRYPT_KEY_DATA_BLOB_HEADER *PBCRYPT_KEY_DATA_BLOB_HEADER; }
#line 379
extern "C" { typedef 
#line 371
struct _BCRYPT_DSA_PARAMETER_HEADER { 

ULONG cbLength; 
ULONG dwMagic; 
ULONG cbKeyLength; 
UCHAR Count[4]; 
UCHAR Seed[20]; 
UCHAR q[20]; 
} BCRYPT_DSA_PARAMETER_HEADER; }
#line 437
extern "C" { extern NTSTATUS __stdcall BCryptOpenAlgorithmProvider(BCRYPT_ALG_HANDLE *, LPCWSTR, LPCWSTR, ULONG); } 
#line 444
extern "C" { typedef NTSTATUS (__stdcall *BCryptOpenAlgorithmProviderFn)(BCRYPT_ALG_HANDLE *, LPCWSTR, ULONG); }
#line 467
extern "C" { typedef 
#line 461
struct _BCRYPT_ALGORITHM_IDENTIFIER { 

LPWSTR pszName; 
ULONG dwClass; 
ULONG dwFlags; 

} BCRYPT_ALGORITHM_IDENTIFIER; }




extern "C" { extern NTSTATUS __stdcall BCryptEnumAlgorithms(ULONG, ULONG *, BCRYPT_ALGORITHM_IDENTIFIER **, ULONG); } 
#line 482
extern "C" { typedef 
#line 479
struct _BCRYPT_PROVIDER_NAME { 

LPWSTR pszProviderName; 
} BCRYPT_PROVIDER_NAME; }



extern "C" { extern NTSTATUS __stdcall BCryptEnumProviders(LPCWSTR, ULONG *, BCRYPT_PROVIDER_NAME **, ULONG); } 
#line 500
extern "C" { extern NTSTATUS __stdcall BCryptGetProperty(BCRYPT_HANDLE, LPCWSTR, PUCHAR, ULONG, ULONG *, ULONG); } 
#line 511
extern "C" { extern NTSTATUS __stdcall BCryptSetProperty(BCRYPT_HANDLE, LPCWSTR, PUCHAR, ULONG, ULONG); } 
#line 521
extern "C" { extern NTSTATUS __stdcall BCryptCloseAlgorithmProvider(BCRYPT_ALG_HANDLE, ULONG); } 
#line 528
extern "C" { extern void __stdcall BCryptFreeBuffer(PVOID); } 
#line 538
extern "C" { extern NTSTATUS __stdcall BCryptGenerateSymmetricKey(BCRYPT_ALG_HANDLE, BCRYPT_KEY_HANDLE *, PUCHAR, ULONG, PUCHAR, ULONG, ULONG); } 
#line 550
extern "C" { extern NTSTATUS __stdcall BCryptGenerateKeyPair(BCRYPT_ALG_HANDLE, BCRYPT_KEY_HANDLE *, ULONG, ULONG); } 
#line 559
extern "C" { extern NTSTATUS __stdcall BCryptEncrypt(BCRYPT_KEY_HANDLE, PUCHAR, ULONG, void *, PUCHAR, ULONG, PUCHAR, ULONG, ULONG *, ULONG); } 
#line 574
extern "C" { extern NTSTATUS __stdcall BCryptDecrypt(BCRYPT_KEY_HANDLE, PUCHAR, ULONG, void *, PUCHAR, ULONG, PUCHAR, ULONG, ULONG *, ULONG); } 
#line 589
extern "C" { extern NTSTATUS __stdcall BCryptExportKey(BCRYPT_KEY_HANDLE, BCRYPT_KEY_HANDLE, LPCWSTR, PUCHAR, ULONG, ULONG *, ULONG); } 
#line 601
extern "C" { extern NTSTATUS __stdcall BCryptImportKey(BCRYPT_ALG_HANDLE, BCRYPT_KEY_HANDLE, LPCWSTR, BCRYPT_KEY_HANDLE *, PUCHAR, ULONG, PUCHAR, ULONG, ULONG); } 
#line 617
extern "C" { extern NTSTATUS __stdcall BCryptImportKeyPair(BCRYPT_ALG_HANDLE, BCRYPT_KEY_HANDLE, LPCWSTR, BCRYPT_KEY_HANDLE *, PUCHAR, ULONG, ULONG); } 
#line 629
extern "C" { extern NTSTATUS __stdcall BCryptDuplicateKey(BCRYPT_KEY_HANDLE, BCRYPT_KEY_HANDLE *, PUCHAR, ULONG, ULONG); } 
#line 639
extern "C" { extern NTSTATUS __stdcall BCryptFinalizeKeyPair(BCRYPT_KEY_HANDLE, ULONG); } 
#line 646
extern "C" { extern NTSTATUS __stdcall BCryptDestroyKey(BCRYPT_KEY_HANDLE); } 
#line 652
extern "C" { extern NTSTATUS __stdcall BCryptDestroySecret(BCRYPT_SECRET_HANDLE); } 
#line 658
extern "C" { extern NTSTATUS __stdcall BCryptSignHash(BCRYPT_KEY_HANDLE, void *, PUCHAR, ULONG, PUCHAR, ULONG, ULONG *, ULONG); } 
#line 671
extern "C" { extern NTSTATUS __stdcall BCryptVerifySignature(BCRYPT_KEY_HANDLE, void *, PUCHAR, ULONG, PUCHAR, ULONG, ULONG); } 
#line 683
extern "C" { extern NTSTATUS __stdcall BCryptSecretAgreement(BCRYPT_KEY_HANDLE, BCRYPT_KEY_HANDLE, BCRYPT_SECRET_HANDLE *, ULONG); } 
#line 692
extern "C" { extern NTSTATUS __stdcall BCryptDeriveKey(BCRYPT_SECRET_HANDLE, LPCWSTR, BCryptBufferDesc *, PUCHAR, ULONG, ULONG *, ULONG); } 
#line 708
extern "C" { extern NTSTATUS __stdcall BCryptCreateHash(BCRYPT_ALG_HANDLE, BCRYPT_HASH_HANDLE *, PUCHAR, ULONG, PUCHAR, ULONG, ULONG); } 
#line 720
extern "C" { extern NTSTATUS __stdcall BCryptHashData(BCRYPT_HASH_HANDLE, PUCHAR, ULONG, ULONG); } 
#line 729
extern "C" { extern NTSTATUS __stdcall BCryptFinishHash(BCRYPT_HASH_HANDLE, PUCHAR, ULONG, ULONG); } 
#line 738
extern "C" { extern NTSTATUS __stdcall BCryptDuplicateHash(BCRYPT_HASH_HANDLE, BCRYPT_HASH_HANDLE *, PUCHAR, ULONG, ULONG); } 
#line 748
extern "C" { extern NTSTATUS __stdcall BCryptDestroyHash(BCRYPT_HASH_HANDLE); } 
#line 761
extern "C" { extern NTSTATUS __stdcall BCryptGenRandom(BCRYPT_ALG_HANDLE, PUCHAR, ULONG, ULONG); } 
#line 776
extern "C" { typedef 
#line 771
struct _BCRYPT_INTERFACE_VERSION { 

USHORT MajorVersion; 
USHORT MinorVersion; 

} BCRYPT_INTERFACE_VERSION; }extern "C" { typedef _BCRYPT_INTERFACE_VERSION *PBCRYPT_INTERFACE_VERSION; }
#line 864
extern "C" { typedef 
#line 856
struct _CRYPT_INTERFACE_REG { 

ULONG dwInterface; 
ULONG dwFlags; 

ULONG cFunctions; 
PWSTR *rgpszFunctions; 

} CRYPT_INTERFACE_REG; }extern "C" { typedef _CRYPT_INTERFACE_REG *PCRYPT_INTERFACE_REG; }
#line 873
extern "C" { typedef 
#line 866
struct _CRYPT_IMAGE_REG { 

PWSTR pszImage; 

ULONG cInterfaces; 
PCRYPT_INTERFACE_REG *rgpInterfaces; 

} CRYPT_IMAGE_REG; }extern "C" { typedef _CRYPT_IMAGE_REG *PCRYPT_IMAGE_REG; }
#line 883
extern "C" { typedef 
#line 875
struct _CRYPT_PROVIDER_REG { 

ULONG cAliases; 
PWSTR *rgpszAliases; 

PCRYPT_IMAGE_REG pUM; 
PCRYPT_IMAGE_REG pKM; 

} CRYPT_PROVIDER_REG; }extern "C" { typedef _CRYPT_PROVIDER_REG *PCRYPT_PROVIDER_REG; }
#line 890
extern "C" { typedef 
#line 885
struct _CRYPT_PROVIDERS { 

ULONG cProviders; 
PWSTR *rgpszProviders; 

} CRYPT_PROVIDERS; }extern "C" { typedef _CRYPT_PROVIDERS *PCRYPT_PROVIDERS; }
#line 901
extern "C" { typedef 
#line 896
struct _CRYPT_CONTEXT_CONFIG { 

ULONG dwFlags; 
ULONG dwReserved; 

} CRYPT_CONTEXT_CONFIG; }extern "C" { typedef _CRYPT_CONTEXT_CONFIG *PCRYPT_CONTEXT_CONFIG; }
#line 908
extern "C" { typedef 
#line 903
struct _CRYPT_CONTEXT_FUNCTION_CONFIG { 

ULONG dwFlags; 
ULONG dwReserved; 

} CRYPT_CONTEXT_FUNCTION_CONFIG; }extern "C" { typedef _CRYPT_CONTEXT_FUNCTION_CONFIG *PCRYPT_CONTEXT_FUNCTION_CONFIG; }
#line 915
extern "C" { typedef 
#line 910
struct _CRYPT_CONTEXTS { 

ULONG cContexts; 
PWSTR *rgpszContexts; 

} CRYPT_CONTEXTS; }extern "C" { typedef _CRYPT_CONTEXTS *PCRYPT_CONTEXTS; }
#line 922
extern "C" { typedef 
#line 917
struct _CRYPT_CONTEXT_FUNCTIONS { 

ULONG cFunctions; 
PWSTR *rgpszFunctions; 

} CRYPT_CONTEXT_FUNCTIONS; }extern "C" { typedef _CRYPT_CONTEXT_FUNCTIONS *PCRYPT_CONTEXT_FUNCTIONS; }
#line 929
extern "C" { typedef 
#line 924
struct _CRYPT_CONTEXT_FUNCTION_PROVIDERS { 

ULONG cProviders; 
PWSTR *rgpszProviders; 

} CRYPT_CONTEXT_FUNCTION_PROVIDERS; }extern "C" { typedef _CRYPT_CONTEXT_FUNCTION_PROVIDERS *PCRYPT_CONTEXT_FUNCTION_PROVIDERS; }
#line 942
extern "C" { typedef 
#line 935
struct _CRYPT_PROPERTY_REF { 

PWSTR pszProperty; 

ULONG cbValue; 
PUCHAR pbValue; 

} CRYPT_PROPERTY_REF; }extern "C" { typedef _CRYPT_PROPERTY_REF *PCRYPT_PROPERTY_REF; }
#line 949
extern "C" { typedef 
#line 944
struct _CRYPT_IMAGE_REF { 

PWSTR pszImage; 
ULONG dwFlags; 

} CRYPT_IMAGE_REF; }extern "C" { typedef _CRYPT_IMAGE_REF *PCRYPT_IMAGE_REF; }
#line 963
extern "C" { typedef 
#line 951
struct _CRYPT_PROVIDER_REF { 

ULONG dwInterface; 
PWSTR pszFunction; 
PWSTR pszProvider; 

ULONG cProperties; 
PCRYPT_PROPERTY_REF *rgpProperties; 

PCRYPT_IMAGE_REF pUM; 
PCRYPT_IMAGE_REF pKM; 

} CRYPT_PROVIDER_REF; }extern "C" { typedef _CRYPT_PROVIDER_REF *PCRYPT_PROVIDER_REF; }
#line 970
extern "C" { typedef 
#line 965
struct _CRYPT_PROVIDER_REFS { 

ULONG cProviders; 
PCRYPT_PROVIDER_REF *rgpProviders; 

} CRYPT_PROVIDER_REFS; }extern "C" { typedef _CRYPT_PROVIDER_REFS *PCRYPT_PROVIDER_REFS; }
#line 981
extern "C" { extern NTSTATUS __stdcall BCryptQueryProviderRegistration(LPCWSTR, ULONG, ULONG, ULONG *, PCRYPT_PROVIDER_REG *); } 
#line 990
extern "C" { extern NTSTATUS __stdcall BCryptEnumRegisteredProviders(ULONG *, PCRYPT_PROVIDERS *); } 
#line 1000
extern "C" { extern NTSTATUS __stdcall BCryptCreateContext(ULONG, LPCWSTR, PCRYPT_CONTEXT_CONFIG); } 
#line 1007
extern "C" { extern NTSTATUS __stdcall BCryptDeleteContext(ULONG, LPCWSTR); } 
#line 1013
extern "C" { extern NTSTATUS __stdcall BCryptEnumContexts(ULONG, ULONG *, PCRYPT_CONTEXTS *); } 
#line 1020
extern "C" { extern NTSTATUS __stdcall BCryptConfigureContext(ULONG, LPCWSTR, PCRYPT_CONTEXT_CONFIG); } 
#line 1027
extern "C" { extern NTSTATUS __stdcall BCryptQueryContextConfiguration(ULONG, LPCWSTR, ULONG *, PCRYPT_CONTEXT_CONFIG *); } 
#line 1035
extern "C" { extern NTSTATUS __stdcall BCryptAddContextFunction(ULONG, LPCWSTR, ULONG, LPCWSTR, ULONG); } 
#line 1044
extern "C" { extern NTSTATUS __stdcall BCryptRemoveContextFunction(ULONG, LPCWSTR, ULONG, LPCWSTR); } 
#line 1052
extern "C" { extern NTSTATUS __stdcall BCryptEnumContextFunctions(ULONG, LPCWSTR, ULONG, ULONG *, PCRYPT_CONTEXT_FUNCTIONS *); } 
#line 1061
extern "C" { extern NTSTATUS __stdcall BCryptConfigureContextFunction(ULONG, LPCWSTR, ULONG, LPCWSTR, PCRYPT_CONTEXT_FUNCTION_CONFIG); } 
#line 1070
extern "C" { extern NTSTATUS __stdcall BCryptQueryContextFunctionConfiguration(ULONG, LPCWSTR, ULONG, LPCWSTR, ULONG *, PCRYPT_CONTEXT_FUNCTION_CONFIG *); } 
#line 1081
extern "C" { extern NTSTATUS __stdcall BCryptEnumContextFunctionProviders(ULONG, LPCWSTR, ULONG, LPCWSTR, ULONG *, PCRYPT_CONTEXT_FUNCTION_PROVIDERS *); } 
#line 1091
extern "C" { extern NTSTATUS __stdcall BCryptSetContextFunctionProperty(ULONG, LPCWSTR, ULONG, LPCWSTR, LPCWSTR, ULONG, PUCHAR); } 
#line 1102
extern "C" { extern NTSTATUS __stdcall BCryptQueryContextFunctionProperty(ULONG, LPCWSTR, ULONG, LPCWSTR, LPCWSTR, ULONG *, PUCHAR *); } 
#line 1125 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\bcrypt.h"
extern "C" { extern NTSTATUS __stdcall BCryptRegisterConfigChangeNotify(HANDLE *); } 
#line 1137 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\bcrypt.h"
extern "C" { extern NTSTATUS __stdcall BCryptUnregisterConfigChangeNotify(HANDLE); } 
#line 1146 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\bcrypt.h"
extern "C" { extern NTSTATUS __stdcall BCryptResolveProviders(LPCWSTR, ULONG, LPCWSTR, LPCWSTR, ULONG, ULONG, ULONG *, PCRYPT_PROVIDER_REFS *); } 
#line 1163
extern "C" { extern NTSTATUS __stdcall BCryptGetFipsAlgorithmMode(BOOLEAN *); } 
#line 24 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\ncrypt.h"
extern "C" { typedef LONG SECURITY_STATUS; }
#line 111 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\ncrypt.h"
extern "C" { typedef BCryptBuffer NCryptBuffer; }
extern "C" { typedef BCryptBuffer *PNCryptBuffer; }
extern "C" { typedef BCryptBufferDesc NCryptBufferDesc; }
extern "C" { typedef BCryptBufferDesc *PNCryptBufferDesc; }
#line 120
extern "C" { typedef ULONG_PTR NCRYPT_HANDLE; }
extern "C" { typedef ULONG_PTR NCRYPT_PROV_HANDLE; }
extern "C" { typedef ULONG_PTR NCRYPT_KEY_HANDLE; }
extern "C" { typedef ULONG_PTR NCRYPT_HASH_HANDLE; }
extern "C" { typedef ULONG_PTR NCRYPT_SECRET_HANDLE; }
#line 153
extern "C" { extern SECURITY_STATUS __stdcall NCryptOpenStorageProvider(NCRYPT_PROV_HANDLE *, LPCWSTR, DWORD); } 
#line 177
extern "C" { typedef 
#line 171
struct _NCryptAlgorithmName { 

LPWSTR pszName; 
DWORD dwClass; 
DWORD dwAlgOperations; 
DWORD dwFlags; 
} NCryptAlgorithmName; }




extern "C" { extern SECURITY_STATUS __stdcall NCryptEnumAlgorithms(NCRYPT_PROV_HANDLE, DWORD, DWORD *, NCryptAlgorithmName **, DWORD); } 
#line 193
extern "C" { extern SECURITY_STATUS __stdcall NCryptIsAlgSupported(NCRYPT_PROV_HANDLE, LPCWSTR, DWORD); } 
#line 209
extern "C" { typedef 
#line 203
struct NCryptKeyName { 

LPWSTR pszName; 
LPWSTR pszAlgid; 
DWORD dwLegacyKeySpec; 
DWORD dwFlags; 
} NCryptKeyName; }



extern "C" { extern SECURITY_STATUS __stdcall NCryptEnumKeys(NCRYPT_PROV_HANDLE, LPCWSTR, NCryptKeyName **, PVOID *, DWORD); } 
#line 226
extern "C" { typedef 
#line 222
struct NCryptProviderName { 

LPWSTR pszName; 
LPWSTR pszComment; 
} NCryptProviderName; }



extern "C" { extern SECURITY_STATUS __stdcall NCryptEnumStorageProviders(DWORD *, NCryptProviderName **, DWORD); } 
#line 239
extern "C" { extern SECURITY_STATUS __stdcall NCryptFreeBuffer(PVOID); } 
#line 250
extern "C" { extern SECURITY_STATUS __stdcall NCryptOpenKey(NCRYPT_PROV_HANDLE, NCRYPT_KEY_HANDLE *, LPCWSTR, DWORD, DWORD); } 
#line 265
extern "C" { extern SECURITY_STATUS __stdcall NCryptCreatePersistedKey(NCRYPT_PROV_HANDLE, NCRYPT_KEY_HANDLE *, LPCWSTR, LPCWSTR, DWORD, DWORD); } 
#line 345
extern "C" { typedef 
#line 335
struct __NCRYPT_UI_POLICY_BLOB { 

DWORD dwVersion; 
DWORD dwFlags; 
DWORD cbCreationTitle; 
DWORD cbFriendlyName; 
DWORD cbDescription; 



} NCRYPT_UI_POLICY_BLOB; }
#line 354
extern "C" { typedef 
#line 347
struct __NCRYPT_UI_POLICY { 

DWORD dwVersion; 
DWORD dwFlags; 
LPCWSTR pszCreationTitle; 
LPCWSTR pszFriendlyName; 
LPCWSTR pszDescription; 
} NCRYPT_UI_POLICY; }
#line 364
extern "C" { typedef 
#line 358
struct __NCRYPT_SUPPORTED_LENGTHS { 

DWORD dwMinLength; 
DWORD dwMaxLength; 
DWORD dwIncrement; 
DWORD dwDefaultLength; 
} NCRYPT_SUPPORTED_LENGTHS; }
#line 371
extern "C" { extern SECURITY_STATUS __stdcall NCryptGetProperty(NCRYPT_HANDLE, LPCWSTR, PBYTE, DWORD, DWORD *, DWORD); } 
#line 387
extern "C" { extern SECURITY_STATUS __stdcall NCryptSetProperty(NCRYPT_HANDLE, LPCWSTR, PBYTE, DWORD, DWORD); } 
#line 400
extern "C" { extern SECURITY_STATUS __stdcall NCryptFinalizeKey(NCRYPT_KEY_HANDLE, DWORD); } 
#line 408
extern "C" { extern SECURITY_STATUS __stdcall NCryptEncrypt(NCRYPT_KEY_HANDLE, PBYTE, DWORD, void *, PBYTE, DWORD, DWORD *, DWORD); } 
#line 422
extern "C" { extern SECURITY_STATUS __stdcall NCryptDecrypt(NCRYPT_KEY_HANDLE, PBYTE, DWORD, void *, PBYTE, DWORD, DWORD *, DWORD); } 
#line 443
extern "C" { extern SECURITY_STATUS __stdcall NCryptImportKey(NCRYPT_PROV_HANDLE, NCRYPT_KEY_HANDLE, LPCWSTR, NCryptBufferDesc *, NCRYPT_KEY_HANDLE *, PBYTE, DWORD, DWORD); } 
#line 457
extern "C" { extern SECURITY_STATUS __stdcall NCryptExportKey(NCRYPT_KEY_HANDLE, NCRYPT_KEY_HANDLE, LPCWSTR, NCryptBufferDesc *, PBYTE, DWORD, DWORD *, DWORD); } 
#line 471
extern "C" { extern SECURITY_STATUS __stdcall NCryptSignHash(NCRYPT_KEY_HANDLE, void *, PBYTE, DWORD, PBYTE, DWORD, DWORD *, DWORD); } 
#line 485
extern "C" { extern SECURITY_STATUS __stdcall NCryptVerifySignature(NCRYPT_KEY_HANDLE, void *, PBYTE, DWORD, PBYTE, DWORD, DWORD); } 
#line 498
extern "C" { extern SECURITY_STATUS __stdcall NCryptDeleteKey(NCRYPT_KEY_HANDLE, DWORD); } 
#line 506
extern "C" { extern SECURITY_STATUS __stdcall NCryptFreeObject(NCRYPT_HANDLE); } 
#line 513
extern "C" { extern BOOL __stdcall NCryptIsKeyHandle(NCRYPT_KEY_HANDLE); } 




extern "C" { extern SECURITY_STATUS __stdcall NCryptTranslateHandle(NCRYPT_PROV_HANDLE *, NCRYPT_KEY_HANDLE *, HCRYPTPROV, HCRYPTKEY, DWORD, DWORD); } 
#line 535
extern "C" { extern SECURITY_STATUS __stdcall NCryptNotifyChangeKey(NCRYPT_PROV_HANDLE, HANDLE *, DWORD); } 
#line 544
extern "C" { extern SECURITY_STATUS __stdcall NCryptSecretAgreement(NCRYPT_KEY_HANDLE, NCRYPT_KEY_HANDLE, NCRYPT_SECRET_HANDLE *, DWORD); } 
#line 554
extern "C" { extern SECURITY_STATUS __stdcall NCryptDeriveKey(NCRYPT_SECRET_HANDLE, LPCWSTR, NCryptBufferDesc *, PBYTE, DWORD, DWORD *, ULONG); } 
#line 1932 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincrypt.h"
extern "C" { typedef ULONG_PTR HCRYPTPROV_OR_NCRYPT_KEY_HANDLE; }



extern "C" { typedef ULONG_PTR HCRYPTPROV_LEGACY; }
#line 1947
extern "C" { typedef 
#line 1943
struct _CRYPT_BIT_BLOB { 
DWORD cbData; 
BYTE *pbData; 
DWORD cUnusedBits; 
} CRYPT_BIT_BLOB; }extern "C" { typedef _CRYPT_BIT_BLOB *PCRYPT_BIT_BLOB; }
#line 1958
extern "C" { typedef 
#line 1955
struct _CRYPT_ALGORITHM_IDENTIFIER { 
LPSTR pszObjId; 
CRYPT_OBJID_BLOB Parameters; 
} CRYPT_ALGORITHM_IDENTIFIER; }extern "C" { typedef _CRYPT_ALGORITHM_IDENTIFIER *PCRYPT_ALGORITHM_IDENTIFIER; }
#line 2191
extern "C" { typedef 
#line 2188
struct _CRYPT_OBJID_TABLE { 
DWORD dwAlgId; 
LPCSTR pszObjId; 
} CRYPT_OBJID_TABLE; }extern "C" { typedef _CRYPT_OBJID_TABLE *PCRYPT_OBJID_TABLE; }
#line 2200
extern "C" { typedef 
#line 2197
struct _CRYPT_HASH_INFO { 
CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm; 
CRYPT_HASH_BLOB Hash; 
} CRYPT_HASH_INFO; }extern "C" { typedef _CRYPT_HASH_INFO *PCRYPT_HASH_INFO; }
#line 2212
extern "C" { typedef 
#line 2208
struct _CERT_EXTENSION { 
LPSTR pszObjId; 
BOOL fCritical; 
CRYPT_OBJID_BLOB Value; 
} CERT_EXTENSION; }extern "C" { typedef _CERT_EXTENSION *PCERT_EXTENSION; }
#line 2224
extern "C" { typedef 
#line 2221
struct _CRYPT_ATTRIBUTE_TYPE_VALUE { 
LPSTR pszObjId; 
CRYPT_OBJID_BLOB Value; 
} CRYPT_ATTRIBUTE_TYPE_VALUE; }extern "C" { typedef _CRYPT_ATTRIBUTE_TYPE_VALUE *PCRYPT_ATTRIBUTE_TYPE_VALUE; }
#line 2237
extern "C" { typedef 
#line 2233
struct _CRYPT_ATTRIBUTE { 
LPSTR pszObjId; 
DWORD cValue; 
PCRYPT_ATTR_BLOB rgValue; 
} CRYPT_ATTRIBUTE; }extern "C" { typedef _CRYPT_ATTRIBUTE *PCRYPT_ATTRIBUTE; }




extern "C" { typedef 
#line 2239
struct _CRYPT_ATTRIBUTES { 
DWORD cAttr; 
PCRYPT_ATTRIBUTE rgAttr; 
} CRYPT_ATTRIBUTES; }extern "C" { typedef _CRYPT_ATTRIBUTES *PCRYPT_ATTRIBUTES; }
#line 2255
extern "C" { typedef 
#line 2251
struct _CERT_RDN_ATTR { 
LPSTR pszObjId; 
DWORD dwValueType; 
CERT_RDN_VALUE_BLOB Value; 
} CERT_RDN_ATTR; }extern "C" { typedef _CERT_RDN_ATTR *PCERT_RDN_ATTR; }
#line 2424
extern "C" { typedef 
#line 2421
struct _CERT_RDN { 
DWORD cRDNAttr; 
PCERT_RDN_ATTR rgRDNAttr; 
} CERT_RDN; }extern "C" { typedef _CERT_RDN *PCERT_RDN; }
#line 2433
extern "C" { typedef 
#line 2430
struct _CERT_NAME_INFO { 
DWORD cRDN; 
PCERT_RDN rgRDN; 
} CERT_NAME_INFO; }extern "C" { typedef _CERT_NAME_INFO *PCERT_NAME_INFO; }
#line 2444
extern "C" { typedef 
#line 2441
struct _CERT_NAME_VALUE { 
DWORD dwValueType; 
CERT_RDN_VALUE_BLOB Value; 
} CERT_NAME_VALUE; }extern "C" { typedef _CERT_NAME_VALUE *PCERT_NAME_VALUE; }
#line 2456
extern "C" { typedef 
#line 2453
struct _CERT_PUBLIC_KEY_INFO { 
CRYPT_ALGORITHM_IDENTIFIER Algorithm; 
CRYPT_BIT_BLOB PublicKey; 
} CERT_PUBLIC_KEY_INFO; }extern "C" { typedef _CERT_PUBLIC_KEY_INFO *PCERT_PUBLIC_KEY_INFO; }
#line 2472
extern "C" { typedef 
#line 2467
struct _CRYPT_PRIVATE_KEY_INFO { 
DWORD Version; 
CRYPT_ALGORITHM_IDENTIFIER Algorithm; 
CRYPT_DER_BLOB PrivateKey; 
PCRYPT_ATTRIBUTES pAttributes; 
} CRYPT_PRIVATE_KEY_INFO; }extern "C" { typedef _CRYPT_PRIVATE_KEY_INFO *PCRYPT_PRIVATE_KEY_INFO; }
#line 2481
extern "C" { typedef 
#line 2478
struct _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO { 
CRYPT_ALGORITHM_IDENTIFIER EncryptionAlgorithm; 
CRYPT_DATA_BLOB EncryptedPrivateKey; 
} CRYPT_ENCRYPTED_PRIVATE_KEY_INFO; }extern "C" { typedef _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO *PCRYPT_ENCRYPTED_PRIVATE_KEY_INFO; }
#line 2499
extern "C" { typedef BOOL (__stdcall *PCRYPT_DECRYPT_PRIVATE_KEY_FUNC)(CRYPT_ALGORITHM_IDENTIFIER, CRYPT_DATA_BLOB, BYTE *, DWORD *, LPVOID); }
#line 2522
extern "C" { typedef BOOL (__stdcall *PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC)(CRYPT_ALGORITHM_IDENTIFIER *, CRYPT_DATA_BLOB *, BYTE *, DWORD *, LPVOID); }
#line 2541
extern "C" { typedef BOOL (__stdcall *PCRYPT_RESOLVE_HCRYPTPROV_FUNC)(CRYPT_PRIVATE_KEY_INFO *, HCRYPTPROV *, LPVOID); }
#line 2561
extern "C" { typedef 
#line 2555
struct _CRYPT_PKCS8_IMPORT_PARAMS { 
CRYPT_DIGEST_BLOB PrivateKey; 
PCRYPT_RESOLVE_HCRYPTPROV_FUNC pResolvehCryptProvFunc; 
LPVOID pVoidResolveFunc; 
PCRYPT_DECRYPT_PRIVATE_KEY_FUNC pDecryptPrivateKeyFunc; 
LPVOID pVoidDecryptFunc; 
} CRYPT_PKCS8_IMPORT_PARAMS; }extern "C" { typedef _CRYPT_PKCS8_IMPORT_PARAMS *PCRYPT_PKCS8_IMPORT_PARAMS; }extern "C" { typedef _CRYPT_PKCS8_IMPORT_PARAMS CRYPT_PRIVATE_KEY_BLOB_AND_PARAMS; }extern "C" { typedef _CRYPT_PKCS8_IMPORT_PARAMS *PCRYPT_PRIVATE_KEY_BLOB_AND_PARAMS; }
#line 2578
extern "C" { typedef 
#line 2571
struct _CRYPT_PKCS8_EXPORT_PARAMS { 
HCRYPTPROV hCryptProv; 
DWORD dwKeySpec; 
LPSTR pszPrivateKeyObjId; 

PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC pEncryptPrivateKeyFunc; 
LPVOID pVoidEncryptFunc; 
} CRYPT_PKCS8_EXPORT_PARAMS; }extern "C" { typedef _CRYPT_PKCS8_EXPORT_PARAMS *PCRYPT_PKCS8_EXPORT_PARAMS; }
#line 2600
extern "C" { typedef 
#line 2587
struct _CERT_INFO { 
DWORD dwVersion; 
CRYPT_INTEGER_BLOB SerialNumber; 
CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm; 
CERT_NAME_BLOB Issuer; 
FILETIME NotBefore; 
FILETIME NotAfter; 
CERT_NAME_BLOB Subject; 
CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo; 
CRYPT_BIT_BLOB IssuerUniqueId; 
CRYPT_BIT_BLOB SubjectUniqueId; 
DWORD cExtension; 
PCERT_EXTENSION rgExtension; 
} CERT_INFO; }extern "C" { typedef _CERT_INFO *PCERT_INFO; }
#line 2635
extern "C" { typedef 
#line 2630
struct _CRL_ENTRY { 
CRYPT_INTEGER_BLOB SerialNumber; 
FILETIME RevocationDate; 
DWORD cExtension; 
PCERT_EXTENSION rgExtension; 
} CRL_ENTRY; }extern "C" { typedef _CRL_ENTRY *PCRL_ENTRY; }
#line 2653
extern "C" { typedef 
#line 2643
struct _CRL_INFO { 
DWORD dwVersion; 
CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm; 
CERT_NAME_BLOB Issuer; 
FILETIME ThisUpdate; 
FILETIME NextUpdate; 
DWORD cCRLEntry; 
PCRL_ENTRY rgCRLEntry; 
DWORD cExtension; 
PCERT_EXTENSION rgExtension; 
} CRL_INFO; }extern "C" { typedef _CRL_INFO *PCRL_INFO; }
#line 2674
extern "C" { typedef 
#line 2668
struct _CERT_REQUEST_INFO { 
DWORD dwVersion; 
CERT_NAME_BLOB Subject; 
CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo; 
DWORD cAttribute; 
PCRYPT_ATTRIBUTE rgAttribute; 
} CERT_REQUEST_INFO; }extern "C" { typedef _CERT_REQUEST_INFO *PCERT_REQUEST_INFO; }
#line 2688
extern "C" { typedef 
#line 2684
struct _CERT_KEYGEN_REQUEST_INFO { 
DWORD dwVersion; 
CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo; 
LPWSTR pwszChallengeString; 
} CERT_KEYGEN_REQUEST_INFO; }extern "C" { typedef _CERT_KEYGEN_REQUEST_INFO *PCERT_KEYGEN_REQUEST_INFO; }
#line 2704
extern "C" { typedef 
#line 2700
struct _CERT_SIGNED_CONTENT_INFO { 
CRYPT_DER_BLOB ToBeSigned; 
CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm; 
CRYPT_BIT_BLOB Signature; 
} CERT_SIGNED_CONTENT_INFO; }extern "C" { typedef _CERT_SIGNED_CONTENT_INFO *PCERT_SIGNED_CONTENT_INFO; }
#line 2717
extern "C" { typedef 
#line 2714
struct _CTL_USAGE { 
DWORD cUsageIdentifier; 
LPSTR *rgpszUsageIdentifier; 
} CTL_USAGE; }extern "C" { typedef _CTL_USAGE *PCTL_USAGE; }
extern "C" { typedef _CTL_USAGE CERT_ENHKEY_USAGE; }extern "C" { typedef _CTL_USAGE *PCERT_ENHKEY_USAGE; }
#line 2728
extern "C" { typedef 
#line 2724
struct _CTL_ENTRY { 
CRYPT_DATA_BLOB SubjectIdentifier; 
DWORD cAttribute; 
PCRYPT_ATTRIBUTE rgAttribute; 
} CTL_ENTRY; }extern "C" { typedef _CTL_ENTRY *PCTL_ENTRY; }
#line 2745
extern "C" { typedef 
#line 2733
struct _CTL_INFO { 
DWORD dwVersion; 
CTL_USAGE SubjectUsage; 
CRYPT_DATA_BLOB ListIdentifier; 
CRYPT_INTEGER_BLOB SequenceNumber; 
FILETIME ThisUpdate; 
FILETIME NextUpdate; 
CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm; 
DWORD cCTLEntry; 
PCTL_ENTRY rgCTLEntry; 
DWORD cExtension; 
PCERT_EXTENSION rgExtension; 
} CTL_INFO; }extern "C" { typedef _CTL_INFO *PCTL_INFO; }
#line 2766
extern "C" { typedef 
#line 2760
struct _CRYPT_TIME_STAMP_REQUEST_INFO { 
LPSTR pszTimeStampAlgorithm; 
LPSTR pszContentType; 
CRYPT_OBJID_BLOB Content; 
DWORD cAttribute; 
PCRYPT_ATTRIBUTE rgAttribute; 
} CRYPT_TIME_STAMP_REQUEST_INFO; }extern "C" { typedef _CRYPT_TIME_STAMP_REQUEST_INFO *PCRYPT_TIME_STAMP_REQUEST_INFO; }
#line 2774
extern "C" { typedef 
#line 2771
struct _CRYPT_ENROLLMENT_NAME_VALUE_PAIR { 
LPWSTR pwszName; 
LPWSTR pwszValue; 
} CRYPT_ENROLLMENT_NAME_VALUE_PAIR; }extern "C" { typedef _CRYPT_ENROLLMENT_NAME_VALUE_PAIR *PCRYPT_ENROLLMENT_NAME_VALUE_PAIR; }
#line 2783
extern "C" { typedef 
#line 2779
struct _CRYPT_CSP_PROVIDER { 
DWORD dwKeySpec; 
LPWSTR pwszProviderName; 
CRYPT_BIT_BLOB Signature; 
} CRYPT_CSP_PROVIDER; }extern "C" { typedef _CRYPT_CSP_PROVIDER *PCRYPT_CSP_PROVIDER; }
#line 2831
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptFormatObject(DWORD, DWORD, DWORD, void *, LPCSTR, const BYTE *, DWORD, void *, DWORD *); } 
#line 2911
extern "C" { typedef LPVOID (__stdcall *PFN_CRYPT_ALLOC)(size_t); }



extern "C" { typedef void (__stdcall *PFN_CRYPT_FREE)(LPVOID); }
#line 2924
extern "C" { typedef 
#line 2920
struct _CRYPT_ENCODE_PARA { 
DWORD cbSize; 
PFN_CRYPT_ALLOC pfnAlloc; 
PFN_CRYPT_FREE pfnFree; 
} CRYPT_ENCODE_PARA; }extern "C" { typedef _CRYPT_ENCODE_PARA *PCRYPT_ENCODE_PARA; }
#line 2930
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptEncodeObjectEx(DWORD, LPCSTR, const void *, DWORD, PCRYPT_ENCODE_PARA, void *, DWORD *); } 
#line 2943
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptEncodeObject(DWORD, LPCSTR, const void *, BYTE *, DWORD *); } 
#line 3010
extern "C" { typedef 
#line 3006
struct _CRYPT_DECODE_PARA { 
DWORD cbSize; 
PFN_CRYPT_ALLOC pfnAlloc; 
PFN_CRYPT_FREE pfnFree; 
} CRYPT_DECODE_PARA; }extern "C" { typedef _CRYPT_DECODE_PARA *PCRYPT_DECODE_PARA; }




extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptDecodeObjectEx(DWORD, LPCSTR, const BYTE *, DWORD, DWORD, PCRYPT_DECODE_PARA, void *, DWORD *); } 
#line 3030
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptDecodeObject(DWORD, LPCSTR, const BYTE *, DWORD, DWORD, void *, DWORD *); } 
#line 3670 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincrypt.h"
extern "C" { typedef 
#line 3667
struct _CERT_EXTENSIONS { 
DWORD cExtension; 
PCERT_EXTENSION rgExtension; 
} CERT_EXTENSIONS; }extern "C" { typedef _CERT_EXTENSIONS *PCERT_EXTENSIONS; }
#line 3838
extern "C" { typedef 
#line 3834
struct _CERT_AUTHORITY_KEY_ID_INFO { 
CRYPT_DATA_BLOB KeyId; 
CERT_NAME_BLOB CertIssuer; 
CRYPT_INTEGER_BLOB CertSerialNumber; 
} CERT_AUTHORITY_KEY_ID_INFO; }extern "C" { typedef _CERT_AUTHORITY_KEY_ID_INFO *PCERT_AUTHORITY_KEY_ID_INFO; }
#line 3849
extern "C" { typedef 
#line 3846
struct _CERT_PRIVATE_KEY_VALIDITY { 
FILETIME NotBefore; 
FILETIME NotAfter; 
} CERT_PRIVATE_KEY_VALIDITY; }extern "C" { typedef _CERT_PRIVATE_KEY_VALIDITY *PCERT_PRIVATE_KEY_VALIDITY; }
#line 3855
extern "C" { typedef 
#line 3851
struct _CERT_KEY_ATTRIBUTES_INFO { 
CRYPT_DATA_BLOB KeyId; 
CRYPT_BIT_BLOB IntendedKeyUsage; 
PCERT_PRIVATE_KEY_VALIDITY pPrivateKeyUsagePeriod; 
} CERT_KEY_ATTRIBUTES_INFO; }extern "C" { typedef _CERT_KEY_ATTRIBUTES_INFO *PCERT_KEY_ATTRIBUTES_INFO; }
#line 3881
extern "C" { typedef 
#line 3878
struct _CERT_POLICY_ID { 
DWORD cCertPolicyElementId; 
LPSTR *rgpszCertPolicyElementId; 
} CERT_POLICY_ID; }extern "C" { typedef _CERT_POLICY_ID *PCERT_POLICY_ID; }
#line 3887
extern "C" { typedef 
#line 3883
struct _CERT_KEY_USAGE_RESTRICTION_INFO { 
DWORD cCertPolicyId; 
PCERT_POLICY_ID rgCertPolicyId; 
CRYPT_BIT_BLOB RestrictedKeyUsage; 
} CERT_KEY_USAGE_RESTRICTION_INFO; }extern "C" { typedef _CERT_KEY_USAGE_RESTRICTION_INFO *PCERT_KEY_USAGE_RESTRICTION_INFO; }
#line 3905
extern "C" { typedef 
#line 3902
struct _CERT_OTHER_NAME { 
LPSTR pszObjId; 
CRYPT_OBJID_BLOB Value; 
} CERT_OTHER_NAME; }extern "C" { typedef _CERT_OTHER_NAME *PCERT_OTHER_NAME; }
#line 3920
extern "C" { typedef 
#line 3907
struct _CERT_ALT_NAME_ENTRY { 
DWORD dwAltNameChoice; 
union { 
PCERT_OTHER_NAME pOtherName; 
LPWSTR pwszRfc822Name; 
LPWSTR pwszDNSName; 

CERT_NAME_BLOB DirectoryName; 

LPWSTR pwszURL; 
CRYPT_DATA_BLOB IPAddress; 
LPSTR pszRegisteredID; 
}; 
} CERT_ALT_NAME_ENTRY; }extern "C" { typedef _CERT_ALT_NAME_ENTRY *PCERT_ALT_NAME_ENTRY; }
#line 3939
extern "C" { typedef 
#line 3936
struct _CERT_ALT_NAME_INFO { 
DWORD cAltEntry; 
PCERT_ALT_NAME_ENTRY rgAltEntry; 
} CERT_ALT_NAME_INFO; }extern "C" { typedef _CERT_ALT_NAME_INFO *PCERT_ALT_NAME_INFO; }
#line 3977
extern "C" { typedef 
#line 3971
struct _CERT_BASIC_CONSTRAINTS_INFO { 
CRYPT_BIT_BLOB SubjectType; 
BOOL fPathLenConstraint; 
DWORD dwPathLenConstraint; 
DWORD cSubtreesConstraint; 
CERT_NAME_BLOB *rgSubtreesConstraint; 
} CERT_BASIC_CONSTRAINTS_INFO; }extern "C" { typedef _CERT_BASIC_CONSTRAINTS_INFO *PCERT_BASIC_CONSTRAINTS_INFO; }
#line 3992
extern "C" { typedef 
#line 3988
struct _CERT_BASIC_CONSTRAINTS2_INFO { 
BOOL fCA; 
BOOL fPathLenConstraint; 
DWORD dwPathLenConstraint; 
} CERT_BASIC_CONSTRAINTS2_INFO; }extern "C" { typedef _CERT_BASIC_CONSTRAINTS2_INFO *PCERT_BASIC_CONSTRAINTS2_INFO; }
#line 4016
extern "C" { typedef 
#line 4013
struct _CERT_POLICY_QUALIFIER_INFO { 
LPSTR pszPolicyQualifierId; 
CRYPT_OBJID_BLOB Qualifier; 
} CERT_POLICY_QUALIFIER_INFO; }extern "C" { typedef _CERT_POLICY_QUALIFIER_INFO *PCERT_POLICY_QUALIFIER_INFO; }
#line 4022
extern "C" { typedef 
#line 4018
struct _CERT_POLICY_INFO { 
LPSTR pszPolicyIdentifier; 
DWORD cPolicyQualifier; 
CERT_POLICY_QUALIFIER_INFO *rgPolicyQualifier; 
} CERT_POLICY_INFO; }extern "C" { typedef _CERT_POLICY_INFO *PCERT_POLICY_INFO; }




extern "C" { typedef 
#line 4024
struct _CERT_POLICIES_INFO { 
DWORD cPolicyInfo; 
CERT_POLICY_INFO *rgPolicyInfo; 
} CERT_POLICIES_INFO; }extern "C" { typedef _CERT_POLICIES_INFO *PCERT_POLICIES_INFO; }
#line 4041
extern "C" { typedef 
#line 4037
struct _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE { 
LPSTR pszOrganization; 
DWORD cNoticeNumbers; 
int *rgNoticeNumbers; 
} CERT_POLICY_QUALIFIER_NOTICE_REFERENCE; }extern "C" { typedef _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE *PCERT_POLICY_QUALIFIER_NOTICE_REFERENCE; }




extern "C" { typedef 
#line 4043
struct _CERT_POLICY_QUALIFIER_USER_NOTICE { 
CERT_POLICY_QUALIFIER_NOTICE_REFERENCE *pNoticeReference; 
LPWSTR pszDisplayText; 
} CERT_POLICY_QUALIFIER_USER_NOTICE; }extern "C" { typedef _CERT_POLICY_QUALIFIER_USER_NOTICE *PCERT_POLICY_QUALIFIER_USER_NOTICE; }
#line 4058
extern "C" { typedef 
#line 4054
struct _CPS_URLS { 
LPWSTR pszURL; 
CRYPT_ALGORITHM_IDENTIFIER *pAlgorithm; 
CRYPT_DATA_BLOB *pDigest; 
} CPS_URLS; }extern "C" { typedef _CPS_URLS *PCPS_URLS; }
#line 4066
extern "C" { typedef 
#line 4060
struct _CERT_POLICY95_QUALIFIER1 { 
LPWSTR pszPracticesReference; 
LPSTR pszNoticeIdentifier; 
LPSTR pszNSINoticeIdentifier; 
DWORD cCPSURLs; 
CPS_URLS *rgCPSURLs; 
} CERT_POLICY95_QUALIFIER1; }extern "C" { typedef _CERT_POLICY95_QUALIFIER1 *PCERT_POLICY95_QUALIFIER1; }
#line 4085
extern "C" { typedef 
#line 4082
struct _CERT_POLICY_MAPPING { 
LPSTR pszIssuerDomainPolicy; 
LPSTR pszSubjectDomainPolicy; 
} CERT_POLICY_MAPPING; }extern "C" { typedef _CERT_POLICY_MAPPING *PCERT_POLICY_MAPPING; }




extern "C" { typedef 
#line 4087
struct _CERT_POLICY_MAPPINGS_INFO { 
DWORD cPolicyMapping; 
PCERT_POLICY_MAPPING rgPolicyMapping; 
} CERT_POLICY_MAPPINGS_INFO; }extern "C" { typedef _CERT_POLICY_MAPPINGS_INFO *PCERT_POLICY_MAPPINGS_INFO; }
#line 4104
extern "C" { typedef 
#line 4098
struct _CERT_POLICY_CONSTRAINTS_INFO { 
BOOL fRequireExplicitPolicy; 
DWORD dwRequireExplicitPolicySkipCerts; 

BOOL fInhibitPolicyMapping; 
DWORD dwInhibitPolicyMappingSkipCerts; 
} CERT_POLICY_CONSTRAINTS_INFO; }extern "C" { typedef _CERT_POLICY_CONSTRAINTS_INFO *PCERT_POLICY_CONSTRAINTS_INFO; }
#line 4179
extern "C" { typedef 
#line 4175
struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY { 
LPSTR pszObjId; 
DWORD cValue; 
PCRYPT_DER_BLOB rgValue; 
} CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY; }extern "C" { typedef _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY *PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY; }
#line 4192
extern "C" { typedef 
#line 4189
struct _CRYPT_CONTENT_INFO { 
LPSTR pszObjId; 
CRYPT_DER_BLOB Content; 
} CRYPT_CONTENT_INFO; }extern "C" { typedef _CRYPT_CONTENT_INFO *PCRYPT_CONTENT_INFO; }
#line 4250
extern "C" { typedef 
#line 4247
struct _CRYPT_SEQUENCE_OF_ANY { 
DWORD cValue; 
PCRYPT_DER_BLOB rgValue; 
} CRYPT_SEQUENCE_OF_ANY; }extern "C" { typedef _CRYPT_SEQUENCE_OF_ANY *PCRYPT_SEQUENCE_OF_ANY; }
#line 4269
extern "C" { typedef 
#line 4264
struct _CERT_AUTHORITY_KEY_ID2_INFO { 
CRYPT_DATA_BLOB KeyId; 
CERT_ALT_NAME_INFO AuthorityCertIssuer; 

CRYPT_INTEGER_BLOB AuthorityCertSerialNumber; 
} CERT_AUTHORITY_KEY_ID2_INFO; }extern "C" { typedef _CERT_AUTHORITY_KEY_ID2_INFO *PCERT_AUTHORITY_KEY_ID2_INFO; }
#line 4303
extern "C" { typedef 
#line 4300
struct _CERT_ACCESS_DESCRIPTION { 
LPSTR pszAccessMethod; 
CERT_ALT_NAME_ENTRY AccessLocation; 
} CERT_ACCESS_DESCRIPTION; }extern "C" { typedef _CERT_ACCESS_DESCRIPTION *PCERT_ACCESS_DESCRIPTION; }
#line 4309
extern "C" { typedef 
#line 4306
struct _CERT_AUTHORITY_INFO_ACCESS { 
DWORD cAccDescr; 
PCERT_ACCESS_DESCRIPTION rgAccDescr; 
} CERT_AUTHORITY_INFO_ACCESS; }extern "C" { typedef _CERT_AUTHORITY_INFO_ACCESS *PCERT_AUTHORITY_INFO_ACCESS; }
extern "C" { typedef _CERT_AUTHORITY_INFO_ACCESS CERT_SUBJECT_INFO_ACCESS; }extern "C" { typedef _CERT_AUTHORITY_INFO_ACCESS *PCERT_SUBJECT_INFO_ACCESS; }
#line 4368
extern "C" { typedef 
#line 4362
struct _CRL_DIST_POINT_NAME { 
DWORD dwDistPointNameChoice; 
union { 
CERT_ALT_NAME_INFO FullName; 

}; 
} CRL_DIST_POINT_NAME; }extern "C" { typedef _CRL_DIST_POINT_NAME *PCRL_DIST_POINT_NAME; }
#line 4378
extern "C" { typedef 
#line 4374
struct _CRL_DIST_POINT { 
CRL_DIST_POINT_NAME DistPointName; 
CRYPT_BIT_BLOB ReasonFlags; 
CERT_ALT_NAME_INFO CRLIssuer; 
} CRL_DIST_POINT; }extern "C" { typedef _CRL_DIST_POINT *PCRL_DIST_POINT; }
#line 4391
extern "C" { typedef 
#line 4388
struct _CRL_DIST_POINTS_INFO { 
DWORD cDistPoint; 
PCRL_DIST_POINT rgDistPoint; 
} CRL_DIST_POINTS_INFO; }extern "C" { typedef _CRL_DIST_POINTS_INFO *PCRL_DIST_POINTS_INFO; }
#line 4425
extern "C" { typedef 
#line 4419
struct _CROSS_CERT_DIST_POINTS_INFO { 

DWORD dwSyncDeltaTime; 

DWORD cDistPoint; 
PCERT_ALT_NAME_INFO rgDistPoint; 
} CROSS_CERT_DIST_POINTS_INFO; }extern "C" { typedef _CROSS_CERT_DIST_POINTS_INFO *PCROSS_CERT_DIST_POINTS_INFO; }
#line 4450
extern "C" { typedef 
#line 4447
struct _CERT_PAIR { 
CERT_BLOB Forward; 
CERT_BLOB Reverse; 
} CERT_PAIR; }extern "C" { typedef _CERT_PAIR *PCERT_PAIR; }
#line 4486
extern "C" { typedef 
#line 4480
struct _CRL_ISSUING_DIST_POINT { 
CRL_DIST_POINT_NAME DistPointName; 
BOOL fOnlyContainsUserCerts; 
BOOL fOnlyContainsCACerts; 
CRYPT_BIT_BLOB OnlySomeReasonFlags; 
BOOL fIndirectCRL; 
} CRL_ISSUING_DIST_POINT; }extern "C" { typedef _CRL_ISSUING_DIST_POINT *PCRL_ISSUING_DIST_POINT; }
#line 4516
extern "C" { typedef 
#line 4511
struct _CERT_GENERAL_SUBTREE { 
CERT_ALT_NAME_ENTRY Base; 
DWORD dwMinimum; 
BOOL fMaximum; 
DWORD dwMaximum; 
} CERT_GENERAL_SUBTREE; }extern "C" { typedef _CERT_GENERAL_SUBTREE *PCERT_GENERAL_SUBTREE; }
#line 4523
extern "C" { typedef 
#line 4518
struct _CERT_NAME_CONSTRAINTS_INFO { 
DWORD cPermittedSubtree; 
PCERT_GENERAL_SUBTREE rgPermittedSubtree; 
DWORD cExcludedSubtree; 
PCERT_GENERAL_SUBTREE rgExcludedSubtree; 
} CERT_NAME_CONSTRAINTS_INFO; }extern "C" { typedef _CERT_NAME_CONSTRAINTS_INFO *PCERT_NAME_CONSTRAINTS_INFO; }
#line 4616
extern "C" { typedef 
#line 4612
struct _CERT_DSS_PARAMETERS { 
CRYPT_UINT_BLOB p; 
CRYPT_UINT_BLOB q; 
CRYPT_UINT_BLOB g; 
} CERT_DSS_PARAMETERS; }extern "C" { typedef _CERT_DSS_PARAMETERS *PCERT_DSS_PARAMETERS; }
#line 4646
extern "C" { typedef 
#line 4643
struct _CERT_DH_PARAMETERS { 
CRYPT_UINT_BLOB p; 
CRYPT_UINT_BLOB g; 
} CERT_DH_PARAMETERS; }extern "C" { typedef _CERT_DH_PARAMETERS *PCERT_DH_PARAMETERS; }
#line 4659
extern "C" { typedef 
#line 4656
struct _CERT_ECC_SIGNATURE { 
CRYPT_UINT_BLOB r; 
CRYPT_UINT_BLOB s; 
} CERT_ECC_SIGNATURE; }extern "C" { typedef _CERT_ECC_SIGNATURE *PCERT_ECC_SIGNATURE; }
#line 4671
extern "C" { typedef 
#line 4668
struct _CERT_X942_DH_VALIDATION_PARAMS { 
CRYPT_BIT_BLOB seed; 
DWORD pgenCounter; 
} CERT_X942_DH_VALIDATION_PARAMS; }extern "C" { typedef _CERT_X942_DH_VALIDATION_PARAMS *PCERT_X942_DH_VALIDATION_PARAMS; }
#line 4679
extern "C" { typedef 
#line 4673
struct _CERT_X942_DH_PARAMETERS { 
CRYPT_UINT_BLOB p; 
CRYPT_UINT_BLOB g; 
CRYPT_UINT_BLOB q; 
CRYPT_UINT_BLOB j; 
PCERT_X942_DH_VALIDATION_PARAMS pValidationParams; 
} CERT_X942_DH_PARAMETERS; }extern "C" { typedef _CERT_X942_DH_PARAMETERS *PCERT_X942_DH_PARAMETERS; }
#line 4696
extern "C" { typedef 
#line 4691
struct _CRYPT_X942_OTHER_INFO { 
LPSTR pszContentEncryptionObjId; 
BYTE rgbCounter[4]; 
BYTE rgbKeyLength[4]; 
CRYPT_DATA_BLOB PubInfo; 
} CRYPT_X942_OTHER_INFO; }extern "C" { typedef _CRYPT_X942_OTHER_INFO *PCRYPT_X942_OTHER_INFO; }
#line 4711
extern "C" { typedef 
#line 4707
struct _CRYPT_ECC_CMS_SHARED_INFO { 
CRYPT_ALGORITHM_IDENTIFIER Algorithm; 
CRYPT_DATA_BLOB EntityUInfo; 
BYTE rgbSuppPubInfo[4]; 
} CRYPT_ECC_CMS_SHARED_INFO; }extern "C" { typedef _CRYPT_ECC_CMS_SHARED_INFO *PCRYPT_ECC_CMS_SHARED_INFO; }
#line 4724
extern "C" { typedef 
#line 4720
struct _CRYPT_RC2_CBC_PARAMETERS { 
DWORD dwVersion; 
BOOL fIV; 
BYTE rgbIV[8]; 
} CRYPT_RC2_CBC_PARAMETERS; }extern "C" { typedef _CRYPT_RC2_CBC_PARAMETERS *PCRYPT_RC2_CBC_PARAMETERS; }
#line 4747
extern "C" { typedef 
#line 4744
struct _CRYPT_SMIME_CAPABILITY { 
LPSTR pszObjId; 
CRYPT_OBJID_BLOB Parameters; 
} CRYPT_SMIME_CAPABILITY; }extern "C" { typedef _CRYPT_SMIME_CAPABILITY *PCRYPT_SMIME_CAPABILITY; }




extern "C" { typedef 
#line 4749
struct _CRYPT_SMIME_CAPABILITIES { 
DWORD cCapability; 
PCRYPT_SMIME_CAPABILITY rgCapability; 
} CRYPT_SMIME_CAPABILITIES; }extern "C" { typedef _CRYPT_SMIME_CAPABILITIES *PCRYPT_SMIME_CAPABILITIES; }
#line 4772
extern "C" { typedef 
#line 4769
struct _CERT_QC_STATEMENT { 
LPSTR pszStatementId; 
CRYPT_OBJID_BLOB StatementInfo; 
} CERT_QC_STATEMENT; }extern "C" { typedef _CERT_QC_STATEMENT *PCERT_QC_STATEMENT; }




extern "C" { typedef 
#line 4774
struct _CERT_QC_STATEMENTS_EXT_INFO { 
DWORD cStatement; 
PCERT_QC_STATEMENT rgStatement; 
} CERT_QC_STATEMENTS_EXT_INFO; }extern "C" { typedef _CERT_QC_STATEMENTS_EXT_INFO *PCERT_QC_STATEMENTS_EXT_INFO; }
#line 4824
extern "C" { typedef 
#line 4821
struct _CRYPT_MASK_GEN_ALGORITHM { 
LPSTR pszObjId; 
CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm; 
} CRYPT_MASK_GEN_ALGORITHM; }extern "C" { typedef _CRYPT_MASK_GEN_ALGORITHM *PCRYPT_MASK_GEN_ALGORITHM; }
#line 4831
extern "C" { typedef 
#line 4826
struct _CRYPT_RSA_SSA_PSS_PARAMETERS { 
CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm; 
CRYPT_MASK_GEN_ALGORITHM MaskGenAlgorithm; 
DWORD dwSaltLength; 
DWORD dwTrailerField; 
} CRYPT_RSA_SSA_PSS_PARAMETERS; }extern "C" { typedef _CRYPT_RSA_SSA_PSS_PARAMETERS *PCRYPT_RSA_SSA_PSS_PARAMETERS; }
#line 4859
extern "C" { typedef 
#line 4856
struct _CRYPT_PSOURCE_ALGORITHM { 
LPSTR pszObjId; 
CRYPT_DATA_BLOB EncodingParameters; 
} CRYPT_PSOURCE_ALGORITHM; }extern "C" { typedef _CRYPT_PSOURCE_ALGORITHM *PCRYPT_PSOURCE_ALGORITHM; }
#line 4865
extern "C" { typedef 
#line 4861
struct _CRYPT_RSAES_OAEP_PARAMETERS { 
CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm; 
CRYPT_MASK_GEN_ALGORITHM MaskGenAlgorithm; 
CRYPT_PSOURCE_ALGORITHM PSourceAlgorithm; 
} CRYPT_RSAES_OAEP_PARAMETERS; }extern "C" { typedef _CRYPT_RSAES_OAEP_PARAMETERS *PCRYPT_RSAES_OAEP_PARAMETERS; }
#line 5138
extern "C" { typedef 
#line 5135
struct _CMC_TAGGED_ATTRIBUTE { 
DWORD dwBodyPartID; 
CRYPT_ATTRIBUTE Attribute; 
} CMC_TAGGED_ATTRIBUTE; }extern "C" { typedef _CMC_TAGGED_ATTRIBUTE *PCMC_TAGGED_ATTRIBUTE; }




extern "C" { typedef 
#line 5140
struct _CMC_TAGGED_CERT_REQUEST { 
DWORD dwBodyPartID; 
CRYPT_DER_BLOB SignedCertRequest; 
} CMC_TAGGED_CERT_REQUEST; }extern "C" { typedef _CMC_TAGGED_CERT_REQUEST *PCMC_TAGGED_CERT_REQUEST; }
#line 5151
extern "C" { typedef 
#line 5145
struct _CMC_TAGGED_REQUEST { 
DWORD dwTaggedRequestChoice; 
union { 

PCMC_TAGGED_CERT_REQUEST pTaggedCertRequest; 
}; 
} CMC_TAGGED_REQUEST; }extern "C" { typedef _CMC_TAGGED_REQUEST *PCMC_TAGGED_REQUEST; }
#line 5158
extern "C" { typedef 
#line 5155
struct _CMC_TAGGED_CONTENT_INFO { 
DWORD dwBodyPartID; 
CRYPT_DER_BLOB EncodedContentInfo; 
} CMC_TAGGED_CONTENT_INFO; }extern "C" { typedef _CMC_TAGGED_CONTENT_INFO *PCMC_TAGGED_CONTENT_INFO; }
#line 5164
extern "C" { typedef 
#line 5160
struct _CMC_TAGGED_OTHER_MSG { 
DWORD dwBodyPartID; 
LPSTR pszObjId; 
CRYPT_OBJID_BLOB Value; 
} CMC_TAGGED_OTHER_MSG; }extern "C" { typedef _CMC_TAGGED_OTHER_MSG *PCMC_TAGGED_OTHER_MSG; }
#line 5177
extern "C" { typedef 
#line 5168
struct _CMC_DATA_INFO { 
DWORD cTaggedAttribute; 
PCMC_TAGGED_ATTRIBUTE rgTaggedAttribute; 
DWORD cTaggedRequest; 
PCMC_TAGGED_REQUEST rgTaggedRequest; 
DWORD cTaggedContentInfo; 
PCMC_TAGGED_CONTENT_INFO rgTaggedContentInfo; 
DWORD cTaggedOtherMsg; 
PCMC_TAGGED_OTHER_MSG rgTaggedOtherMsg; 
} CMC_DATA_INFO; }extern "C" { typedef _CMC_DATA_INFO *PCMC_DATA_INFO; }
#line 5188
extern "C" { typedef 
#line 5181
struct _CMC_RESPONSE_INFO { 
DWORD cTaggedAttribute; 
PCMC_TAGGED_ATTRIBUTE rgTaggedAttribute; 
DWORD cTaggedContentInfo; 
PCMC_TAGGED_CONTENT_INFO rgTaggedContentInfo; 
DWORD cTaggedOtherMsg; 
PCMC_TAGGED_OTHER_MSG rgTaggedOtherMsg; 
} CMC_RESPONSE_INFO; }extern "C" { typedef _CMC_RESPONSE_INFO *PCMC_RESPONSE_INFO; }
#line 5201
extern "C" { typedef 
#line 5198
struct _CMC_PEND_INFO { 
CRYPT_DATA_BLOB PendToken; 
FILETIME PendTime; 
} CMC_PEND_INFO; }extern "C" { typedef _CMC_PEND_INFO *PCMC_PEND_INFO; }
#line 5217
extern "C" { typedef 
#line 5203
struct _CMC_STATUS_INFO { 
DWORD dwStatus; 
DWORD cBodyList; 
DWORD *rgdwBodyList; 
LPWSTR pwszStatusString; 
DWORD dwOtherInfoChoice; 
union { 



DWORD dwFailInfo; 

PCMC_PEND_INFO pPendInfo; 
}; 
} CMC_STATUS_INFO; }extern "C" { typedef _CMC_STATUS_INFO *PCMC_STATUS_INFO; }
#line 5301
extern "C" { typedef 
#line 5295
struct _CMC_ADD_EXTENSIONS_INFO { 
DWORD dwCmcDataReference; 
DWORD cCertReference; 
DWORD *rgdwCertReference; 
DWORD cExtension; 
PCERT_EXTENSION rgExtension; 
} CMC_ADD_EXTENSIONS_INFO; }extern "C" { typedef _CMC_ADD_EXTENSIONS_INFO *PCMC_ADD_EXTENSIONS_INFO; }
#line 5318
extern "C" { typedef 
#line 5312
struct _CMC_ADD_ATTRIBUTES_INFO { 
DWORD dwCmcDataReference; 
DWORD cCertReference; 
DWORD *rgdwCertReference; 
DWORD cAttribute; 
PCRYPT_ATTRIBUTE rgAttribute; 
} CMC_ADD_ATTRIBUTES_INFO; }extern "C" { typedef _CMC_ADD_ATTRIBUTES_INFO *PCMC_ADD_ATTRIBUTES_INFO; }
#line 5333
extern "C" { typedef 
#line 5328
struct _CERT_TEMPLATE_EXT { 
LPSTR pszObjId; 
DWORD dwMajorVersion; 
BOOL fMinorVersion; 
DWORD dwMinorVersion; 
} CERT_TEMPLATE_EXT; }extern "C" { typedef _CERT_TEMPLATE_EXT *PCERT_TEMPLATE_EXT; }
#line 5349
extern "C" { typedef 
#line 5344
struct _CERT_HASHED_URL { 
CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm; 
CRYPT_HASH_BLOB Hash; 
LPWSTR pwszUrl; 

} CERT_HASHED_URL; }extern "C" { typedef _CERT_HASHED_URL *PCERT_HASHED_URL; }
#line 5355
extern "C" { typedef 
#line 5351
struct _CERT_LOGOTYPE_DETAILS { 
LPWSTR pwszMimeType; 
DWORD cHashedUrl; 
PCERT_HASHED_URL rgHashedUrl; 
} CERT_LOGOTYPE_DETAILS; }extern "C" { typedef _CERT_LOGOTYPE_DETAILS *PCERT_LOGOTYPE_DETAILS; }




extern "C" { typedef 
#line 5357
struct _CERT_LOGOTYPE_REFERENCE { 
DWORD cHashedUrl; 
PCERT_HASHED_URL rgHashedUrl; 
} CERT_LOGOTYPE_REFERENCE; }extern "C" { typedef _CERT_LOGOTYPE_REFERENCE *PCERT_LOGOTYPE_REFERENCE; }
#line 5384
extern "C" { typedef 
#line 5362
struct _CERT_LOGOTYPE_IMAGE_INFO { 


DWORD dwLogotypeImageInfoChoice; 

DWORD dwFileSize; 
DWORD dwXSize; 
DWORD dwYSize; 

DWORD dwLogotypeImageResolutionChoice; 
union { 




DWORD dwNumBits; 


DWORD dwTableSize; 
}; 
LPWSTR pwszLanguage; 

} CERT_LOGOTYPE_IMAGE_INFO; }extern "C" { typedef _CERT_LOGOTYPE_IMAGE_INFO *PCERT_LOGOTYPE_IMAGE_INFO; }
#line 5397
extern "C" { typedef 
#line 5393
struct _CERT_LOGOTYPE_IMAGE { 
CERT_LOGOTYPE_DETAILS LogotypeDetails; 

PCERT_LOGOTYPE_IMAGE_INFO pLogotypeImageInfo; 
} CERT_LOGOTYPE_IMAGE; }extern "C" { typedef _CERT_LOGOTYPE_IMAGE *PCERT_LOGOTYPE_IMAGE; }
#line 5408
extern "C" { typedef 
#line 5400
struct _CERT_LOGOTYPE_AUDIO_INFO { 
DWORD dwFileSize; 
DWORD dwPlayTime; 
DWORD dwChannels; 
DWORD dwSampleRate; 

LPWSTR pwszLanguage; 

} CERT_LOGOTYPE_AUDIO_INFO; }extern "C" { typedef _CERT_LOGOTYPE_AUDIO_INFO *PCERT_LOGOTYPE_AUDIO_INFO; }
#line 5414
extern "C" { typedef 
#line 5410
struct _CERT_LOGOTYPE_AUDIO { 
CERT_LOGOTYPE_DETAILS LogotypeDetails; 

PCERT_LOGOTYPE_AUDIO_INFO pLogotypeAudioInfo; 
} CERT_LOGOTYPE_AUDIO; }extern "C" { typedef _CERT_LOGOTYPE_AUDIO *PCERT_LOGOTYPE_AUDIO; }
#line 5423
extern "C" { typedef 
#line 5417
struct _CERT_LOGOTYPE_DATA { 
DWORD cLogotypeImage; 
PCERT_LOGOTYPE_IMAGE rgLogotypeImage; 

DWORD cLogotypeAudio; 
PCERT_LOGOTYPE_AUDIO rgLogotypeAudio; 
} CERT_LOGOTYPE_DATA; }extern "C" { typedef _CERT_LOGOTYPE_DATA *PCERT_LOGOTYPE_DATA; }
#line 5435
extern "C" { typedef 
#line 5426
struct _CERT_LOGOTYPE_INFO { 
DWORD dwLogotypeInfoChoice; 
union { 

PCERT_LOGOTYPE_DATA pLogotypeDirectInfo; 


PCERT_LOGOTYPE_REFERENCE pLogotypeIndirectInfo; 
}; 
} CERT_LOGOTYPE_INFO; }extern "C" { typedef _CERT_LOGOTYPE_INFO *PCERT_LOGOTYPE_INFO; }
#line 5443
extern "C" { typedef 
#line 5440
struct _CERT_OTHER_LOGOTYPE_INFO { 
LPSTR pszObjId; 
CERT_LOGOTYPE_INFO LogotypeInfo; 
} CERT_OTHER_LOGOTYPE_INFO; }extern "C" { typedef _CERT_OTHER_LOGOTYPE_INFO *PCERT_OTHER_LOGOTYPE_INFO; }
#line 5455
extern "C" { typedef 
#line 5448
struct _CERT_LOGOTYPE_EXT_INFO { 
DWORD cCommunityLogo; 
PCERT_LOGOTYPE_INFO rgCommunityLogo; 
PCERT_LOGOTYPE_INFO pIssuerLogo; 
PCERT_LOGOTYPE_INFO pSubjectLogo; 
DWORD cOtherLogo; 
PCERT_OTHER_LOGOTYPE_INFO rgOtherLogo; 
} CERT_LOGOTYPE_EXT_INFO; }extern "C" { typedef _CERT_LOGOTYPE_EXT_INFO *PCERT_LOGOTYPE_EXT_INFO; }
#line 5478
extern "C" { typedef 
#line 5467
struct _CERT_BIOMETRIC_DATA { 
DWORD dwTypeOfBiometricDataChoice; 
union { 

DWORD dwPredefined; 


LPSTR pszObjId; 
}; 

CERT_HASHED_URL HashedUrl; 
} CERT_BIOMETRIC_DATA; }extern "C" { typedef _CERT_BIOMETRIC_DATA *PCERT_BIOMETRIC_DATA; }
#line 5490
extern "C" { typedef 
#line 5487
struct _CERT_BIOMETRIC_EXT_INFO { 
DWORD cBiometricData; 
PCERT_BIOMETRIC_DATA rgBiometricData; 
} CERT_BIOMETRIC_EXT_INFO; }extern "C" { typedef _CERT_BIOMETRIC_EXT_INFO *PCERT_BIOMETRIC_EXT_INFO; }
#line 5512
extern "C" { typedef 
#line 5507
struct _OCSP_SIGNATURE_INFO { 
CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm; 
CRYPT_BIT_BLOB Signature; 
DWORD cCertEncoded; 
PCERT_BLOB rgCertEncoded; 
} OCSP_SIGNATURE_INFO; }extern "C" { typedef _OCSP_SIGNATURE_INFO *POCSP_SIGNATURE_INFO; }




extern "C" { typedef 
#line 5514
struct _OCSP_SIGNED_REQUEST_INFO { 
CRYPT_DER_BLOB ToBeSigned; 
POCSP_SIGNATURE_INFO pOptionalSignatureInfo; 
} OCSP_SIGNED_REQUEST_INFO; }extern "C" { typedef _OCSP_SIGNED_REQUEST_INFO *POCSP_SIGNED_REQUEST_INFO; }
#line 5530
extern "C" { typedef 
#line 5525
struct _OCSP_CERT_ID { 
CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm; 
CRYPT_HASH_BLOB IssuerNameHash; 
CRYPT_HASH_BLOB IssuerKeyHash; 
CRYPT_INTEGER_BLOB SerialNumber; 
} OCSP_CERT_ID; }extern "C" { typedef _OCSP_CERT_ID *POCSP_CERT_ID; }
#line 5536
extern "C" { typedef 
#line 5532
struct _OCSP_REQUEST_ENTRY { 
OCSP_CERT_ID CertId; 
DWORD cExtension; 
PCERT_EXTENSION rgExtension; 
} OCSP_REQUEST_ENTRY; }extern "C" { typedef _OCSP_REQUEST_ENTRY *POCSP_REQUEST_ENTRY; }
#line 5545
extern "C" { typedef 
#line 5538
struct _OCSP_REQUEST_INFO { 
DWORD dwVersion; 
PCERT_ALT_NAME_ENTRY pRequestorName; 
DWORD cRequestEntry; 
POCSP_REQUEST_ENTRY rgRequestEntry; 
DWORD cExtension; 
PCERT_EXTENSION rgExtension; 
} OCSP_REQUEST_INFO; }extern "C" { typedef _OCSP_REQUEST_INFO *POCSP_REQUEST_INFO; }
#line 5558
extern "C" { typedef 
#line 5554
struct _OCSP_RESPONSE_INFO { 
DWORD dwStatus; 
LPSTR pszObjId; 
CRYPT_OBJID_BLOB Value; 
} OCSP_RESPONSE_INFO; }extern "C" { typedef _OCSP_RESPONSE_INFO *POCSP_RESPONSE_INFO; }
#line 5580
extern "C" { typedef 
#line 5577
struct _OCSP_BASIC_SIGNED_RESPONSE_INFO { 
CRYPT_DER_BLOB ToBeSigned; 
OCSP_SIGNATURE_INFO SignatureInfo; 
} OCSP_BASIC_SIGNED_RESPONSE_INFO; }extern "C" { typedef _OCSP_BASIC_SIGNED_RESPONSE_INFO *POCSP_BASIC_SIGNED_RESPONSE_INFO; }
#line 5593
extern "C" { typedef 
#line 5588
struct _OCSP_BASIC_REVOKED_INFO { 
FILETIME RevocationDate; 


DWORD dwCrlReasonCode; 
} OCSP_BASIC_REVOKED_INFO; }extern "C" { typedef _OCSP_BASIC_REVOKED_INFO *POCSP_BASIC_REVOKED_INFO; }
#line 5612
extern "C" { typedef 
#line 5595
struct _OCSP_BASIC_RESPONSE_ENTRY { 
OCSP_CERT_ID CertId; 
DWORD dwCertStatus; 
union { 
#line 5604
POCSP_BASIC_REVOKED_INFO pRevokedInfo; 

}; 
FILETIME ThisUpdate; 
FILETIME NextUpdate; 

DWORD cExtension; 
PCERT_EXTENSION rgExtension; 
} OCSP_BASIC_RESPONSE_ENTRY; }extern "C" { typedef _OCSP_BASIC_RESPONSE_ENTRY *POCSP_BASIC_RESPONSE_ENTRY; }
#line 5633
extern "C" { typedef 
#line 5619
struct _OCSP_BASIC_RESPONSE_INFO { 
DWORD dwVersion; 
DWORD dwResponderIdChoice; 
union { 

CERT_NAME_BLOB ByNameResponderId; 

CRYPT_HASH_BLOB ByKeyResponderId; 
}; 
FILETIME ProducedAt; 
DWORD cResponseEntry; 
POCSP_BASIC_RESPONSE_ENTRY rgResponseEntry; 
DWORD cExtension; 
PCERT_EXTENSION rgExtension; 
} OCSP_BASIC_RESPONSE_INFO; }extern "C" { typedef _OCSP_BASIC_RESPONSE_INFO *POCSP_BASIC_RESPONSE_INFO; }
#line 5645
extern "C" { typedef void *HCRYPTOIDFUNCSET; }
extern "C" { typedef void *HCRYPTOIDFUNCADDR; }
#line 5725
extern "C" { typedef 
#line 5722
struct _CRYPT_OID_FUNC_ENTRY { 
LPCSTR pszOID; 
void *pvFuncAddr; 
} CRYPT_OID_FUNC_ENTRY; }extern "C" { typedef _CRYPT_OID_FUNC_ENTRY *PCRYPT_OID_FUNC_ENTRY; }
#line 5749
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptInstallOIDFunctionAddress(HMODULE, DWORD, LPCSTR, DWORD, const CRYPT_OID_FUNC_ENTRY [], DWORD); } 
#line 5767
extern "C" { extern __declspec( dllimport ) HCRYPTOIDFUNCSET __stdcall CryptInitOIDFunctionSet(LPCSTR, DWORD); } 
#line 5794
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptGetOIDFunctionAddress(HCRYPTOIDFUNCSET, DWORD, LPCSTR, DWORD, void **, HCRYPTOIDFUNCADDR *); } 
#line 5817
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptGetDefaultOIDDllList(HCRYPTOIDFUNCSET, DWORD, WCHAR *, DWORD *); } 
#line 5851
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptGetDefaultOIDFunctionAddress(HCRYPTOIDFUNCSET, DWORD, LPCWSTR, DWORD, void **, HCRYPTOIDFUNCADDR *); } 
#line 5875
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptFreeOIDFunctionAddress(HCRYPTOIDFUNCADDR, DWORD); } 
#line 5897
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptRegisterOIDFunction(DWORD, LPCSTR, LPCSTR, LPCWSTR, LPCSTR); } 
#line 5912
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptUnregisterOIDFunction(DWORD, LPCSTR, LPCSTR); } 
#line 5936
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptRegisterDefaultOIDFunction(DWORD, LPCSTR, DWORD, LPCWSTR); } 
#line 5953
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptUnregisterDefaultOIDFunction(DWORD, LPCSTR, LPCWSTR); } 
#line 5970
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptSetOIDFunctionValue(DWORD, LPCSTR, LPCSTR, LPCWSTR, DWORD, const BYTE *, DWORD); } 
#line 5991
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptGetOIDFunctionValue(DWORD, LPCSTR, LPCSTR, LPCWSTR, DWORD *, BYTE *, DWORD *); } 
#line 6001
extern "C" { typedef BOOL (__stdcall *PFN_CRYPT_ENUM_OID_FUNC)(DWORD, LPCSTR, LPCSTR, DWORD, const DWORD [], const LPCWSTR [], const BYTE *const [], const DWORD [], void *); }
#line 6029
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptEnumOIDFunction(DWORD, LPCSTR, LPCSTR, DWORD, void *, PFN_CRYPT_ENUM_OID_FUNC); } 
#line 6110
extern "C" { typedef 
#line 6072
struct _CRYPT_OID_INFO { 
DWORD cbSize; 
LPCSTR pszOID; 
LPCWSTR pwszName; 
DWORD dwGroupId; 
union { 
DWORD dwValue; 
ALG_ID Algid; 
DWORD dwLength; 
}; 
CRYPT_DATA_BLOB ExtraInfo; 
#line 6110
} CRYPT_OID_INFO; }extern "C" { typedef _CRYPT_OID_INFO *PCRYPT_OID_INFO; }
extern "C" { typedef const CRYPT_OID_INFO CCRYPT_OID_INFO; }extern "C" { typedef const CRYPT_OID_INFO *PCCRYPT_OID_INFO; }
#line 6206
extern "C" { extern __declspec( dllimport ) PCCRYPT_OID_INFO __stdcall CryptFindOIDInfo(DWORD, void *, DWORD); } 
#line 6264
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptRegisterOIDInfo(PCCRYPT_OID_INFO, DWORD); } 
#line 6278
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptUnregisterOIDInfo(PCCRYPT_OID_INFO); } 




extern "C" { typedef BOOL (__stdcall *PFN_CRYPT_ENUM_OID_INFO)(PCCRYPT_OID_INFO, void *); }
#line 6301
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptEnumOIDInfo(DWORD, DWORD, void *, PFN_CRYPT_ENUM_OID_INFO); } 
#line 6334
extern "C" { extern __declspec( dllimport ) LPCWSTR __stdcall CryptFindLocalizedName(LPCWSTR); } 
#line 6345
extern "C" { typedef void *HCRYPTMSG; }
#line 6385
extern "C" { typedef 
#line 6382
struct _CERT_ISSUER_SERIAL_NUMBER { 
CERT_NAME_BLOB Issuer; 
CRYPT_INTEGER_BLOB SerialNumber; 
} CERT_ISSUER_SERIAL_NUMBER; }extern "C" { typedef _CERT_ISSUER_SERIAL_NUMBER *PCERT_ISSUER_SERIAL_NUMBER; }
#line 6400
extern "C" { typedef 
#line 6390
struct _CERT_ID { 
DWORD dwIdChoice; 
union { 

CERT_ISSUER_SERIAL_NUMBER IssuerSerialNumber; 

CRYPT_HASH_BLOB KeyId; 

CRYPT_HASH_BLOB HashId; 
}; 
} CERT_ID; }extern "C" { typedef _CERT_ID *PCERT_ID; }
#line 6482
extern "C" { typedef 
#line 6455
struct _CMSG_SIGNER_ENCODE_INFO { 
DWORD cbSize; 
PCERT_INFO pCertInfo; 


union { 
HCRYPTPROV hCryptProv; 
NCRYPT_KEY_HANDLE hNCryptKey; 
}; 


DWORD dwKeySpec; 

CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm; 
void *pvHashAuxInfo; 
DWORD cAuthAttr; 
PCRYPT_ATTRIBUTE rgAuthAttr; 
DWORD cUnauthAttr; 
PCRYPT_ATTRIBUTE rgUnauthAttr; 
#line 6482
} CMSG_SIGNER_ENCODE_INFO; }extern "C" { typedef _CMSG_SIGNER_ENCODE_INFO *PCMSG_SIGNER_ENCODE_INFO; }
#line 6497
extern "C" { typedef 
#line 6484
struct _CMSG_SIGNED_ENCODE_INFO { 
DWORD cbSize; 
DWORD cSigners; 
PCMSG_SIGNER_ENCODE_INFO rgSigners; 
DWORD cCertEncoded; 
PCERT_BLOB rgCertEncoded; 
DWORD cCrlEncoded; 
PCRL_BLOB rgCrlEncoded; 
#line 6497
} CMSG_SIGNED_ENCODE_INFO; }extern "C" { typedef _CMSG_SIGNED_ENCODE_INFO *PCMSG_SIGNED_ENCODE_INFO; }
#line 6542
extern "C" { typedef struct _CMSG_RECIPIENT_ENCODE_INFO CMSG_RECIPIENT_ENCODE_INFO; }
extern "C" { typedef _CMSG_RECIPIENT_ENCODE_INFO *PCMSG_RECIPIENT_ENCODE_INFO; }
#line 6570
extern "C" { typedef 
#line 6545
struct _CMSG_ENVELOPED_ENCODE_INFO { 
DWORD cbSize; 
HCRYPTPROV_LEGACY hCryptProv; 
CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm; 
void *pvEncryptionAuxInfo; 
DWORD cRecipients; 




PCERT_INFO *rgpRecipients; 
#line 6570
} CMSG_ENVELOPED_ENCODE_INFO; }extern "C" { typedef _CMSG_ENVELOPED_ENCODE_INFO *PCMSG_ENVELOPED_ENCODE_INFO; }
#line 6602
extern "C" { typedef 
#line 6595
struct _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO { 
DWORD cbSize; 
CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm; 
void *pvKeyEncryptionAuxInfo; 
HCRYPTPROV_LEGACY hCryptProv; 
CRYPT_BIT_BLOB RecipientPublicKey; 
CERT_ID RecipientId; 
} CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO; }extern "C" { typedef _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO *PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO; }
#line 6653
extern "C" { typedef 
#line 6644
struct _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO { 
DWORD cbSize; 
CRYPT_BIT_BLOB RecipientPublicKey; 
CERT_ID RecipientId; 



FILETIME Date; 
PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr; 
} CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO; }
extern "C" { typedef _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO *PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO; }
#line 6688
extern "C" { typedef 
#line 6656
struct _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO { 
DWORD cbSize; 
CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm; 
void *pvKeyEncryptionAuxInfo; 
CRYPT_ALGORITHM_IDENTIFIER KeyWrapAlgorithm; 
void *pvKeyWrapAuxInfo; 
#line 6669
HCRYPTPROV_LEGACY hCryptProv; 
DWORD dwKeySpec; 

DWORD dwKeyChoice; 
union { 



PCRYPT_ALGORITHM_IDENTIFIER pEphemeralAlgorithm; 




PCERT_ID pSenderId; 
}; 
CRYPT_DATA_BLOB UserKeyingMaterial; 

DWORD cRecipientEncryptedKeys; 
PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO *rgpRecipientEncryptedKeys; 
} CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO; }extern "C" { typedef _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO *PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO; }
#line 6729
extern "C" { typedef 
#line 6712
struct _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO { 
DWORD cbSize; 
CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm; 
void *pvKeyEncryptionAuxInfo; 
HCRYPTPROV hCryptProv; 
DWORD dwKeyChoice; 
union { 

HCRYPTKEY hKeyEncryptionKey; 

void *pvKeyEncryptionKey; 
}; 
CRYPT_DATA_BLOB KeyId; 


FILETIME Date; 
PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr; 
} CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO; }extern "C" { typedef _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO *PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO; }
#line 6738
extern "C" { struct _CMSG_RECIPIENT_ENCODE_INFO { 
DWORD dwRecipientChoice; 
union { 

PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTrans; 

PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgree; 

PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailList; 
}; 
}; }
#line 6773
extern "C" { typedef 
#line 6770
struct _CMSG_RC2_AUX_INFO { 
DWORD cbSize; 
DWORD dwBitLen; 
} CMSG_RC2_AUX_INFO; }extern "C" { typedef _CMSG_RC2_AUX_INFO *PCMSG_RC2_AUX_INFO; }
#line 6791
extern "C" { typedef 
#line 6788
struct _CMSG_SP3_COMPATIBLE_AUX_INFO { 
DWORD cbSize; 
DWORD dwFlags; 
} CMSG_SP3_COMPATIBLE_AUX_INFO; }extern "C" { typedef _CMSG_SP3_COMPATIBLE_AUX_INFO *PCMSG_SP3_COMPATIBLE_AUX_INFO; }
#line 6813
extern "C" { typedef 
#line 6810
struct _CMSG_RC4_AUX_INFO { 
DWORD cbSize; 
DWORD dwBitLen; 
} CMSG_RC4_AUX_INFO; }extern "C" { typedef _CMSG_RC4_AUX_INFO *PCMSG_RC4_AUX_INFO; }
#line 6828
extern "C" { typedef 
#line 6824
struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO { 
DWORD cbSize; 
CMSG_SIGNED_ENCODE_INFO SignedInfo; 
CMSG_ENVELOPED_ENCODE_INFO EnvelopedInfo; 
} CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO; }extern "C" { typedef _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO *PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO; }
#line 6851
extern "C" { typedef 
#line 6846
struct _CMSG_HASHED_ENCODE_INFO { 
DWORD cbSize; 
HCRYPTPROV_LEGACY hCryptProv; 
CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm; 
void *pvHashAuxInfo; 
} CMSG_HASHED_ENCODE_INFO; }extern "C" { typedef _CMSG_HASHED_ENCODE_INFO *PCMSG_HASHED_ENCODE_INFO; }
#line 6867
extern "C" { typedef 
#line 6863
struct _CMSG_ENCRYPTED_ENCODE_INFO { 
DWORD cbSize; 
CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm; 
void *pvEncryptionAuxInfo; 
} CMSG_ENCRYPTED_ENCODE_INFO; }extern "C" { typedef _CMSG_ENCRYPTED_ENCODE_INFO *PCMSG_ENCRYPTED_ENCODE_INFO; }
#line 6884
extern "C" { typedef BOOL (__stdcall *PFN_CMSG_STREAM_OUTPUT)(const void *, BYTE *, DWORD, BOOL); }
#line 6897
extern "C" { typedef 
#line 6893
struct _CMSG_STREAM_INFO { 
DWORD cbContent; 
PFN_CMSG_STREAM_OUTPUT pfnStreamOutput; 
void *pvArg; 
} CMSG_STREAM_INFO; }extern "C" { typedef _CMSG_STREAM_INFO *PCMSG_STREAM_INFO; }
#line 6935
extern "C" { extern __declspec( dllimport ) HCRYPTMSG __stdcall CryptMsgOpenToEncode(DWORD, DWORD, DWORD, const void *, LPSTR, PCMSG_STREAM_INFO); } 
#line 6955
extern "C" { extern __declspec( dllimport ) DWORD __stdcall CryptMsgCalculateEncodedLength(DWORD, DWORD, DWORD, const void *, LPSTR, DWORD); } 
#line 6979
extern "C" { extern __declspec( dllimport ) HCRYPTMSG __stdcall CryptMsgOpenToDecode(DWORD, DWORD, DWORD, HCRYPTPROV_LEGACY, PCERT_INFO, PCMSG_STREAM_INFO); } 
#line 6994
extern "C" { extern __declspec( dllimport ) HCRYPTMSG __stdcall CryptMsgDuplicate(HCRYPTMSG); } 
#line 7006
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptMsgClose(HCRYPTMSG); } 
#line 7022
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptMsgUpdate(HCRYPTMSG, const BYTE *, DWORD, BOOL); } 
#line 7056
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptMsgGetParam(HCRYPTMSG, DWORD, DWORD, void *, DWORD *); } 
#line 7200
extern "C" { typedef 
#line 7188
struct _CMSG_SIGNER_INFO { 
DWORD dwVersion; 
CERT_NAME_BLOB Issuer; 
CRYPT_INTEGER_BLOB SerialNumber; 
CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm; 


CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm; 

CRYPT_DATA_BLOB EncryptedHash; 
CRYPT_ATTRIBUTES AuthAttrs; 
CRYPT_ATTRIBUTES UnauthAttrs; 
} CMSG_SIGNER_INFO; }extern "C" { typedef _CMSG_SIGNER_INFO *PCMSG_SIGNER_INFO; }
#line 7234
extern "C" { typedef 
#line 7223
struct _CMSG_CMS_SIGNER_INFO { 
DWORD dwVersion; 
CERT_ID SignerId; 
CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm; 


CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm; 

CRYPT_DATA_BLOB EncryptedHash; 
CRYPT_ATTRIBUTES AuthAttrs; 
CRYPT_ATTRIBUTES UnauthAttrs; 
} CMSG_CMS_SIGNER_INFO; }extern "C" { typedef _CMSG_CMS_SIGNER_INFO *PCMSG_CMS_SIGNER_INFO; }
#line 7256
extern "C" { typedef CRYPT_ATTRIBUTES CMSG_ATTR; }
extern "C" { typedef CRYPT_ATTRIBUTES *PCMSG_ATTR; }
#line 7505
extern "C" { typedef 
#line 7497
struct _CMSG_KEY_TRANS_RECIPIENT_INFO { 
DWORD dwVersion; 


CERT_ID RecipientId; 

CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm; 
CRYPT_DATA_BLOB EncryptedKey; 
} CMSG_KEY_TRANS_RECIPIENT_INFO; }extern "C" { typedef _CMSG_KEY_TRANS_RECIPIENT_INFO *PCMSG_KEY_TRANS_RECIPIENT_INFO; }
#line 7516
extern "C" { typedef 
#line 7507
struct _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO { 

CERT_ID RecipientId; 

CRYPT_DATA_BLOB EncryptedKey; 


FILETIME Date; 
PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr; 
} CMSG_RECIPIENT_ENCRYPTED_KEY_INFO; }extern "C" { typedef _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO *PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO; }
#line 7532
extern "C" { typedef 
#line 7518
struct _CMSG_KEY_AGREE_RECIPIENT_INFO { 
DWORD dwVersion; 
DWORD dwOriginatorChoice; 
union { 

CERT_ID OriginatorCertId; 

CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo; 
}; 
CRYPT_DATA_BLOB UserKeyingMaterial; 
CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm; 

DWORD cRecipientEncryptedKeys; 
PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO *rgpRecipientEncryptedKeys; 
} CMSG_KEY_AGREE_RECIPIENT_INFO; }extern "C" { typedef _CMSG_KEY_AGREE_RECIPIENT_INFO *PCMSG_KEY_AGREE_RECIPIENT_INFO; }
#line 7547
extern "C" { typedef 
#line 7538
struct _CMSG_MAIL_LIST_RECIPIENT_INFO { 
DWORD dwVersion; 
CRYPT_DATA_BLOB KeyId; 
CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm; 
CRYPT_DATA_BLOB EncryptedKey; 


FILETIME Date; 
PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr; 
} CMSG_MAIL_LIST_RECIPIENT_INFO; }extern "C" { typedef _CMSG_MAIL_LIST_RECIPIENT_INFO *PCMSG_MAIL_LIST_RECIPIENT_INFO; }
#line 7559
extern "C" { typedef 
#line 7549
struct _CMSG_CMS_RECIPIENT_INFO { 
DWORD dwRecipientChoice; 
union { 

PCMSG_KEY_TRANS_RECIPIENT_INFO pKeyTrans; 

PCMSG_KEY_AGREE_RECIPIENT_INFO pKeyAgree; 

PCMSG_MAIL_LIST_RECIPIENT_INFO pMailList; 
}; 
} CMSG_CMS_RECIPIENT_INFO; }extern "C" { typedef _CMSG_CMS_RECIPIENT_INFO *PCMSG_CMS_RECIPIENT_INFO; }
#line 7595
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptMsgControl(HCRYPTMSG, DWORD, DWORD, const void *); } 
#line 7676
extern "C" { typedef 
#line 7670
struct _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA { 
DWORD cbSize; 
HCRYPTPROV_LEGACY hCryptProv; 
DWORD dwSignerIndex; 
DWORD dwSignerType; 
void *pvSigner; 
} CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA; }extern "C" { typedef _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA *PCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA; }
#line 7727
extern "C" { typedef 
#line 7714
struct _CMSG_CTRL_DECRYPT_PARA { 
DWORD cbSize; 


union { 
HCRYPTPROV hCryptProv; 
NCRYPT_KEY_HANDLE hNCryptKey; 
}; 


DWORD dwKeySpec; 

DWORD dwRecipientIndex; 
} CMSG_CTRL_DECRYPT_PARA; }extern "C" { typedef _CMSG_CTRL_DECRYPT_PARA *PCMSG_CTRL_DECRYPT_PARA; }
#line 7767
extern "C" { typedef 
#line 7754
struct _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA { 
DWORD cbSize; 

union { 
HCRYPTPROV hCryptProv; 
NCRYPT_KEY_HANDLE hNCryptKey; 
}; 


DWORD dwKeySpec; 

PCMSG_KEY_TRANS_RECIPIENT_INFO pKeyTrans; 
DWORD dwRecipientIndex; 
} CMSG_CTRL_KEY_TRANS_DECRYPT_PARA; }extern "C" { typedef _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA *PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA; }
#line 7814
extern "C" { typedef 
#line 7798
struct _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA { 
DWORD cbSize; 


union { 
HCRYPTPROV hCryptProv; 
NCRYPT_KEY_HANDLE hNCryptKey; 
}; 


DWORD dwKeySpec; 

PCMSG_KEY_AGREE_RECIPIENT_INFO pKeyAgree; 
DWORD dwRecipientIndex; 
DWORD dwRecipientEncryptedKeyIndex; 
CRYPT_BIT_BLOB OriginatorPublicKey; 
} CMSG_CTRL_KEY_AGREE_DECRYPT_PARA; }extern "C" { typedef _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA *PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA; }
#line 7854
extern "C" { typedef 
#line 7842
struct _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA { 
DWORD cbSize; 
HCRYPTPROV hCryptProv; 
PCMSG_MAIL_LIST_RECIPIENT_INFO pMailList; 
DWORD dwRecipientIndex; 
DWORD dwKeyChoice; 
union { 

HCRYPTKEY hKeyEncryptionKey; 

void *pvKeyEncryptionKey; 
}; 
} CMSG_CTRL_MAIL_LIST_DECRYPT_PARA; }extern "C" { typedef _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA *PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA; }
#line 7908
extern "C" { typedef 
#line 7904
struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA { 
DWORD cbSize; 
DWORD dwSignerIndex; 
CRYPT_DATA_BLOB blob; 
} CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA; }extern "C" { typedef _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA *PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA; }
#line 7924
extern "C" { typedef 
#line 7920
struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA { 
DWORD cbSize; 
DWORD dwSignerIndex; 
DWORD dwUnauthAttrIndex; 
} CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA; }extern "C" { typedef _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA *PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA; }
#line 7993
extern "C" { extern BOOL __stdcall CryptMsgVerifyCountersignatureEncoded(HCRYPTPROV_LEGACY, DWORD, PBYTE, DWORD, PBYTE, DWORD, PCERT_INFO); } 
#line 8016
extern "C" { extern BOOL __stdcall CryptMsgVerifyCountersignatureEncodedEx(HCRYPTPROV_LEGACY, DWORD, PBYTE, DWORD, PBYTE, DWORD, DWORD, void *, DWORD, void *); } 
#line 8040
extern "C" { extern BOOL __stdcall CryptMsgCountersign(HCRYPTMSG, DWORD, DWORD, PCMSG_SIGNER_ENCODE_INFO); } 
#line 8055
extern "C" { extern BOOL __stdcall CryptMsgCountersignEncoded(DWORD, PBYTE, DWORD, DWORD, PCMSG_SIGNER_ENCODE_INFO, PBYTE, PDWORD); } 
#line 8072
extern "C" { typedef void *(__stdcall *PFN_CMSG_ALLOC)(size_t); }



extern "C" { typedef void (__stdcall *PFN_CMSG_FREE)(void *); }
#line 8093
extern "C" { typedef BOOL (__stdcall *PFN_CMSG_GEN_ENCRYPT_KEY)(HCRYPTPROV *, PCRYPT_ALGORITHM_IDENTIFIER, PVOID, PCERT_PUBLIC_KEY_INFO, PFN_CMSG_ALLOC, HCRYPTKEY *, PBYTE *, PDWORD); }
#line 8105
extern "C" { typedef BOOL (__stdcall *PFN_CMSG_EXPORT_ENCRYPT_KEY)(HCRYPTPROV, HCRYPTKEY, PCERT_PUBLIC_KEY_INFO, PBYTE, PDWORD); }
#line 8114
extern "C" { typedef BOOL (__stdcall *PFN_CMSG_IMPORT_ENCRYPT_KEY)(HCRYPTPROV, DWORD, PCRYPT_ALGORITHM_IDENTIFIER, PCRYPT_ALGORITHM_IDENTIFIER, PBYTE, DWORD, HCRYPTKEY *); }
#line 8170
extern "C" { typedef 
#line 8147
struct _CMSG_CONTENT_ENCRYPT_INFO { 
DWORD cbSize; 
HCRYPTPROV_LEGACY hCryptProv; 
CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm; 
void *pvEncryptionAuxInfo; 
DWORD cRecipients; 
PCMSG_RECIPIENT_ENCODE_INFO rgCmsRecipients; 
PFN_CMSG_ALLOC pfnAlloc; 
PFN_CMSG_FREE pfnFree; 
DWORD dwEncryptFlags; 
union { 

HCRYPTKEY hContentEncryptKey; 

BCRYPT_KEY_HANDLE hCNGContentEncryptKey; 
}; 
DWORD dwFlags; 

BOOL fCNG; 

BYTE *pbCNGContentEncryptKeyObject; 
BYTE *pbContentEncryptKey; 
DWORD cbContentEncryptKey; 
} CMSG_CONTENT_ENCRYPT_INFO; }extern "C" { typedef _CMSG_CONTENT_ENCRYPT_INFO *PCMSG_CONTENT_ENCRYPT_INFO; }
#line 8235
extern "C" { typedef BOOL (__stdcall *PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY)(PCMSG_CONTENT_ENCRYPT_INFO, DWORD, void *); }
#line 8258
extern "C" { typedef 
#line 8252
struct _CMSG_KEY_TRANS_ENCRYPT_INFO { 
DWORD cbSize; 
DWORD dwRecipientIndex; 
CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm; 
CRYPT_DATA_BLOB EncryptedKey; 
DWORD dwFlags; 
} CMSG_KEY_TRANS_ENCRYPT_INFO; }extern "C" { typedef _CMSG_KEY_TRANS_ENCRYPT_INFO *PCMSG_KEY_TRANS_ENCRYPT_INFO; }
#line 8293
extern "C" { typedef BOOL (__stdcall *PFN_CMSG_EXPORT_KEY_TRANS)(PCMSG_CONTENT_ENCRYPT_INFO, PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO, PCMSG_KEY_TRANS_ENCRYPT_INFO, DWORD, void *); }
#line 8316
extern "C" { typedef 
#line 8313
struct _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO { 
DWORD cbSize; 
CRYPT_DATA_BLOB EncryptedKey; 
} CMSG_KEY_AGREE_KEY_ENCRYPT_INFO; }extern "C" { typedef _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO *PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO; }
#line 8339
extern "C" { typedef 
#line 8324
struct _CMSG_KEY_AGREE_ENCRYPT_INFO { 
DWORD cbSize; 
DWORD dwRecipientIndex; 
CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm; 
CRYPT_DATA_BLOB UserKeyingMaterial; 
DWORD dwOriginatorChoice; 
union { 

CERT_ID OriginatorCertId; 

CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo; 
}; 
DWORD cKeyAgreeKeyEncryptInfo; 
PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO *rgpKeyAgreeKeyEncryptInfo; 
DWORD dwFlags; 
} CMSG_KEY_AGREE_ENCRYPT_INFO; }extern "C" { typedef _CMSG_KEY_AGREE_ENCRYPT_INFO *PCMSG_KEY_AGREE_ENCRYPT_INFO; }
#line 8400
extern "C" { typedef BOOL (__stdcall *PFN_CMSG_EXPORT_KEY_AGREE)(PCMSG_CONTENT_ENCRYPT_INFO, PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO, PCMSG_KEY_AGREE_ENCRYPT_INFO, DWORD, void *); }
#line 8425
extern "C" { typedef 
#line 8419
struct _CMSG_MAIL_LIST_ENCRYPT_INFO { 
DWORD cbSize; 
DWORD dwRecipientIndex; 
CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm; 
CRYPT_DATA_BLOB EncryptedKey; 
DWORD dwFlags; 
} CMSG_MAIL_LIST_ENCRYPT_INFO; }extern "C" { typedef _CMSG_MAIL_LIST_ENCRYPT_INFO *PCMSG_MAIL_LIST_ENCRYPT_INFO; }
#line 8461
extern "C" { typedef BOOL (__stdcall *PFN_CMSG_EXPORT_MAIL_LIST)(PCMSG_CONTENT_ENCRYPT_INFO, PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO, PCMSG_MAIL_LIST_ENCRYPT_INFO, DWORD, void *); }
#line 8490
extern "C" { typedef BOOL (__stdcall *PFN_CMSG_IMPORT_KEY_TRANS)(PCRYPT_ALGORITHM_IDENTIFIER, PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA, DWORD, void *, HCRYPTKEY *); }
#line 8500
extern "C" { typedef BOOL (__stdcall *PFN_CMSG_IMPORT_KEY_AGREE)(PCRYPT_ALGORITHM_IDENTIFIER, PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA, DWORD, void *, HCRYPTKEY *); }
#line 8510
extern "C" { typedef BOOL (__stdcall *PFN_CMSG_IMPORT_MAIL_LIST)(PCRYPT_ALGORITHM_IDENTIFIER, PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA, DWORD, void *, HCRYPTKEY *); }
#line 8544
extern "C" { typedef 
#line 8528
struct _CMSG_CNG_CONTENT_DECRYPT_INFO { 
DWORD cbSize; 
CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm; 
PFN_CMSG_ALLOC pfnAlloc; 
PFN_CMSG_FREE pfnFree; 




NCRYPT_KEY_HANDLE hNCryptKey; 

BYTE *pbContentEncryptKey; 
DWORD cbContentEncryptKey; 

BCRYPT_KEY_HANDLE hCNGContentEncryptKey; 
BYTE *pbCNGContentEncryptKeyObject; 
} CMSG_CNG_CONTENT_DECRYPT_INFO; }extern "C" { typedef _CMSG_CNG_CONTENT_DECRYPT_INFO *PCMSG_CNG_CONTENT_DECRYPT_INFO; }
#line 8564
extern "C" { typedef BOOL (__stdcall *PFN_CMSG_CNG_IMPORT_KEY_TRANS)(PCMSG_CNG_CONTENT_DECRYPT_INFO, PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA, DWORD, void *); }
#line 8589
extern "C" { typedef BOOL (__stdcall *PFN_CMSG_CNG_IMPORT_KEY_AGREE)(PCMSG_CNG_CONTENT_DECRYPT_INFO, PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA, DWORD, void *); }
#line 8614
extern "C" { typedef BOOL (__stdcall *PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY)(PCMSG_CNG_CONTENT_DECRYPT_INFO, DWORD, void *); }
#line 8695
extern "C" { typedef void *HCERTSTORE; }
#line 8713
extern "C" { typedef 
#line 8707
struct _CERT_CONTEXT { 
DWORD dwCertEncodingType; 
BYTE *pbCertEncoded; 
DWORD cbCertEncoded; 
PCERT_INFO pCertInfo; 
HCERTSTORE hCertStore; 
} CERT_CONTEXT; }extern "C" { typedef _CERT_CONTEXT *PCERT_CONTEXT; }
extern "C" { typedef const CERT_CONTEXT *PCCERT_CONTEXT; }
#line 8732
extern "C" { typedef 
#line 8726
struct _CRL_CONTEXT { 
DWORD dwCertEncodingType; 
BYTE *pbCrlEncoded; 
DWORD cbCrlEncoded; 
PCRL_INFO pCrlInfo; 
HCERTSTORE hCertStore; 
} CRL_CONTEXT; }extern "C" { typedef _CRL_CONTEXT *PCRL_CONTEXT; }
extern "C" { typedef const CRL_CONTEXT *PCCRL_CONTEXT; }
#line 8754
extern "C" { typedef 
#line 8745
struct _CTL_CONTEXT { 
DWORD dwMsgAndCertEncodingType; 
BYTE *pbCtlEncoded; 
DWORD cbCtlEncoded; 
PCTL_INFO pCtlInfo; 
HCERTSTORE hCertStore; 
HCRYPTMSG hCryptMsg; 
BYTE *pbCtlContent; 
DWORD cbCtlContent; 
} CTL_CONTEXT; }extern "C" { typedef _CTL_CONTEXT *PCTL_CONTEXT; }
extern "C" { typedef const CTL_CONTEXT *PCCTL_CONTEXT; }
#line 8910
extern "C" { typedef 
#line 8905
struct _CRYPT_KEY_PROV_PARAM { 
DWORD dwParam; 
BYTE *pbData; 
DWORD cbData; 
DWORD dwFlags; 
} CRYPT_KEY_PROV_PARAM; }extern "C" { typedef _CRYPT_KEY_PROV_PARAM *PCRYPT_KEY_PROV_PARAM; }
#line 8920
extern "C" { typedef 
#line 8912
struct _CRYPT_KEY_PROV_INFO { 
LPWSTR pwszContainerName; 
LPWSTR pwszProvName; 
DWORD dwProvType; 
DWORD dwFlags; 
DWORD cProvParam; 
PCRYPT_KEY_PROV_PARAM rgProvParam; 
DWORD dwKeySpec; 
} CRYPT_KEY_PROV_INFO; }extern "C" { typedef _CRYPT_KEY_PROV_INFO *PCRYPT_KEY_PROV_INFO; }
#line 8954
extern "C" { typedef 
#line 8945
struct _CERT_KEY_CONTEXT { 
DWORD cbSize; 
union { 
HCRYPTPROV hCryptProv; 


NCRYPT_KEY_HANDLE hNCryptKey; 
}; 
DWORD dwKeySpec; 
} CERT_KEY_CONTEXT; }extern "C" { typedef _CERT_KEY_CONTEXT *PCERT_KEY_CONTEXT; }
#line 8965
extern "C" { typedef 
#line 8962
struct _ROOT_INFO_LUID { 
DWORD LowPart; 
LONG HighPart; 
} ROOT_INFO_LUID; }extern "C" { typedef _ROOT_INFO_LUID *PROOT_INFO_LUID; }




extern "C" { typedef 
#line 8967
struct _CRYPT_SMART_CARD_ROOT_INFO { 
BYTE rgbCardID[16]; 
ROOT_INFO_LUID luid; 
} CRYPT_SMART_CARD_ROOT_INFO; }extern "C" { typedef _CRYPT_SMART_CARD_ROOT_INFO *PCRYPT_SMART_CARD_ROOT_INFO; }
#line 9081
extern "C" { typedef 
#line 9071
struct _CERT_SYSTEM_STORE_RELOCATE_PARA { 
union { 
HKEY hKeyBase; 
void *pvBase; 
}; 
union { 
void *pvSystemStore; 
LPCSTR pszSystemStore; 
LPCWSTR pwszSystemStore; 
}; 
} CERT_SYSTEM_STORE_RELOCATE_PARA; }extern "C" { typedef _CERT_SYSTEM_STORE_RELOCATE_PARA *PCERT_SYSTEM_STORE_RELOCATE_PARA; }
#line 9360
extern "C" { typedef 
#line 9357
struct _CERT_REGISTRY_STORE_CLIENT_GPT_PARA { 
HKEY hKeyBase; 
LPWSTR pwszRegPath; 
} CERT_REGISTRY_STORE_CLIENT_GPT_PARA; }extern "C" { typedef _CERT_REGISTRY_STORE_CLIENT_GPT_PARA *PCERT_REGISTRY_STORE_CLIENT_GPT_PARA; }
#line 9373
extern "C" { typedef 
#line 9370
struct _CERT_REGISTRY_STORE_ROAMING_PARA { 
HKEY hKey; 
LPWSTR pwszStoreDirectory; 
} CERT_REGISTRY_STORE_ROAMING_PARA; }extern "C" { typedef _CERT_REGISTRY_STORE_ROAMING_PARA *PCERT_REGISTRY_STORE_ROAMING_PARA; }
#line 9453
extern "C" { typedef 
#line 9449
struct _CERT_LDAP_STORE_OPENED_PARA { 
void *pvLdapSessionHandle; 

LPCWSTR pwszLdapUrl; 
} CERT_LDAP_STORE_OPENED_PARA; }extern "C" { typedef _CERT_LDAP_STORE_OPENED_PARA *PCERT_LDAP_STORE_OPENED_PARA; }
#line 9821
extern "C" { extern __declspec( dllimport ) HCERTSTORE __stdcall CertOpenStore(LPCSTR, DWORD, HCRYPTPROV_LEGACY, DWORD, const void *); } 
#line 9835
extern "C" { typedef void *HCERTSTOREPROV; }
#line 9853
extern "C" { typedef 
#line 9846
struct _CERT_STORE_PROV_INFO { 
DWORD cbSize; 
DWORD cStoreProvFunc; 
void **rgpvStoreProvFunc; 
HCERTSTOREPROV hStoreProv; 
DWORD dwStoreProvFlags; 
HCRYPTOIDFUNCADDR hStoreProvFuncAddr2; 
} CERT_STORE_PROV_INFO; }extern "C" { typedef _CERT_STORE_PROV_INFO *PCERT_STORE_PROV_INFO; }
#line 9862
extern "C" { typedef BOOL (__stdcall *PFN_CERT_DLL_OPEN_STORE_PROV_FUNC)(LPCSTR, DWORD, HCRYPTPROV_LEGACY, DWORD, const void *, HCERTSTORE, PCERT_STORE_PROV_INFO); }
#line 9928
extern "C" { typedef void (__stdcall *PFN_CERT_STORE_PROV_CLOSE)(HCERTSTOREPROV, DWORD); }
#line 9938
extern "C" { typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_READ_CERT)(HCERTSTOREPROV, PCCERT_CONTEXT, DWORD, PCCERT_CONTEXT *); }
#line 9954
extern "C" { typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_WRITE_CERT)(HCERTSTOREPROV, PCCERT_CONTEXT, DWORD); }
#line 9964
extern "C" { typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_DELETE_CERT)(HCERTSTOREPROV, PCCERT_CONTEXT, DWORD); }
#line 9978
extern "C" { typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_SET_CERT_PROPERTY)(HCERTSTOREPROV, PCCERT_CONTEXT, DWORD, DWORD, const void *); }
#line 9991
extern "C" { typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_READ_CRL)(HCERTSTOREPROV, PCCRL_CONTEXT, DWORD, PCCRL_CONTEXT *); }
#line 10005
extern "C" { typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_WRITE_CRL)(HCERTSTOREPROV, PCCRL_CONTEXT, DWORD); }
#line 10014
extern "C" { typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_DELETE_CRL)(HCERTSTOREPROV, PCCRL_CONTEXT, DWORD); }
#line 10028
extern "C" { typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_SET_CRL_PROPERTY)(HCERTSTOREPROV, PCCRL_CONTEXT, DWORD, DWORD, const void *); }
#line 10041
extern "C" { typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_READ_CTL)(HCERTSTOREPROV, PCCTL_CONTEXT, DWORD, PCCTL_CONTEXT *); }
#line 10055
extern "C" { typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_WRITE_CTL)(HCERTSTOREPROV, PCCTL_CONTEXT, DWORD); }
#line 10064
extern "C" { typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_DELETE_CTL)(HCERTSTOREPROV, PCCTL_CONTEXT, DWORD); }
#line 10078
extern "C" { typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_SET_CTL_PROPERTY)(HCERTSTOREPROV, PCCTL_CONTEXT, DWORD, DWORD, const void *); }
#line 10086
extern "C" { typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_CONTROL)(HCERTSTOREPROV, DWORD, DWORD, const void *); }
#line 10099
extern "C" { typedef 
#line 10093
struct _CERT_STORE_PROV_FIND_INFO { 
DWORD cbSize; 
DWORD dwMsgAndCertEncodingType; 
DWORD dwFindFlags; 
DWORD dwFindType; 
const void *pvFindPara; 
} CERT_STORE_PROV_FIND_INFO; }extern "C" { typedef _CERT_STORE_PROV_FIND_INFO *PCERT_STORE_PROV_FIND_INFO; }
extern "C" { typedef const CERT_STORE_PROV_FIND_INFO CCERT_STORE_PROV_FIND_INFO; }
extern "C" { typedef const CERT_STORE_PROV_FIND_INFO *PCCERT_STORE_PROV_FIND_INFO; }

extern "C" { typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FIND_CERT)(HCERTSTOREPROV, PCCERT_STORE_PROV_FIND_INFO, PCCERT_CONTEXT, DWORD, void **, PCCERT_CONTEXT *); }
#line 10112
extern "C" { typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FREE_FIND_CERT)(HCERTSTOREPROV, PCCERT_CONTEXT, void *, DWORD); }
#line 10119
extern "C" { typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_GET_CERT_PROPERTY)(HCERTSTOREPROV, PCCERT_CONTEXT, DWORD, DWORD, void *, DWORD *); }
#line 10129
extern "C" { typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FIND_CRL)(HCERTSTOREPROV, PCCERT_STORE_PROV_FIND_INFO, PCCRL_CONTEXT, DWORD, void **, PCCRL_CONTEXT *); }
#line 10138
extern "C" { typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FREE_FIND_CRL)(HCERTSTOREPROV, PCCRL_CONTEXT, void *, DWORD); }
#line 10145
extern "C" { typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_GET_CRL_PROPERTY)(HCERTSTOREPROV, PCCRL_CONTEXT, DWORD, DWORD, void *, DWORD *); }
#line 10154
extern "C" { typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FIND_CTL)(HCERTSTOREPROV, PCCERT_STORE_PROV_FIND_INFO, PCCTL_CONTEXT, DWORD, void **, PCCTL_CONTEXT *); }
#line 10163
extern "C" { typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FREE_FIND_CTL)(HCERTSTOREPROV, PCCTL_CONTEXT, void *, DWORD); }
#line 10170
extern "C" { typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_GET_CTL_PROPERTY)(HCERTSTOREPROV, PCCTL_CONTEXT, DWORD, DWORD, void *, DWORD *); }
#line 10186
extern "C" { extern __declspec( dllimport ) HCERTSTORE __stdcall CertDuplicateStore(HCERTSTORE); } 
#line 10255
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertSaveStore(HCERTSTORE, DWORD, DWORD, DWORD, void *, DWORD); } 
#line 10297
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertCloseStore(HCERTSTORE, DWORD); } 
#line 10317
extern "C" { extern __declspec( dllimport ) PCCERT_CONTEXT __stdcall CertGetSubjectCertificateFromStore(HCERTSTORE, DWORD, PCERT_INFO); } 
#line 10343
extern "C" { extern __declspec( dllimport ) PCCERT_CONTEXT __stdcall CertEnumCertificatesInStore(HCERTSTORE, PCCERT_CONTEXT); } 
#line 10375
extern "C" { extern __declspec( dllimport ) PCCERT_CONTEXT __stdcall CertFindCertificateInStore(HCERTSTORE, DWORD, DWORD, DWORD, const void *, PCCERT_CONTEXT); } 
#line 10722
extern "C" { extern __declspec( dllimport ) PCCERT_CONTEXT __stdcall CertGetIssuerCertificateFromStore(HCERTSTORE, PCCERT_CONTEXT, PCCERT_CONTEXT, DWORD *); } 
#line 10742
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertVerifySubjectCertificateContext(PCCERT_CONTEXT, PCCERT_CONTEXT, DWORD *); } 
#line 10754
extern "C" { extern __declspec( dllimport ) PCCERT_CONTEXT __stdcall CertDuplicateCertificateContext(PCCERT_CONTEXT); } 
#line 10775
extern "C" { extern __declspec( dllimport ) PCCERT_CONTEXT __stdcall CertCreateCertificateContext(DWORD, const BYTE *, DWORD); } 
#line 10790
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertFreeCertificateContext(PCCERT_CONTEXT); } 
#line 10920
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertSetCertificateContextProperty(PCCERT_CONTEXT, DWORD, DWORD, const void *); } 
#line 10997
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertGetCertificateContextProperty(PCCERT_CONTEXT, DWORD, void *, DWORD *); } 
#line 11021
extern "C" { extern __declspec( dllimport ) DWORD __stdcall CertEnumCertificateContextProperties(PCCERT_CONTEXT, DWORD); } 
#line 11046
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertCreateCTLEntryFromCertificateContextProperties(PCCERT_CONTEXT, DWORD, PCRYPT_ATTRIBUTE, DWORD, void *, PCTL_ENTRY, DWORD *); } 
#line 11074
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertSetCertificateContextPropertiesFromCTLEntry(PCCERT_CONTEXT, PCTL_ENTRY, DWORD); } 
#line 11135
extern "C" { extern __declspec( dllimport ) PCCRL_CONTEXT __stdcall CertGetCRLFromStore(HCERTSTORE, PCCERT_CONTEXT, PCCRL_CONTEXT, DWORD *); } 
#line 11161
extern "C" { extern __declspec( dllimport ) PCCRL_CONTEXT __stdcall CertEnumCRLsInStore(HCERTSTORE, PCCRL_CONTEXT); } 
#line 11192
extern "C" { extern __declspec( dllimport ) PCCRL_CONTEXT __stdcall CertFindCRLInStore(HCERTSTORE, DWORD, DWORD, DWORD, const void *, PCCRL_CONTEXT); } 
#line 11277
extern "C" { typedef 
#line 11274
struct _CRL_FIND_ISSUED_FOR_PARA { 
PCCERT_CONTEXT pSubjectCert; 
PCCERT_CONTEXT pIssuerCert; 
} CRL_FIND_ISSUED_FOR_PARA; }extern "C" { typedef _CRL_FIND_ISSUED_FOR_PARA *PCRL_FIND_ISSUED_FOR_PARA; }
#line 11286
extern "C" { extern __declspec( dllimport ) PCCRL_CONTEXT __stdcall CertDuplicateCRLContext(PCCRL_CONTEXT); } 
#line 11307
extern "C" { extern __declspec( dllimport ) PCCRL_CONTEXT __stdcall CertCreateCRLContext(DWORD, const BYTE *, DWORD); } 
#line 11322
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertFreeCRLContext(PCCRL_CONTEXT); } 
#line 11334
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertSetCRLContextProperty(PCCRL_CONTEXT, DWORD, DWORD, const void *); } 
#line 11352
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertGetCRLContextProperty(PCCRL_CONTEXT, DWORD, void *, DWORD *); } 
#line 11372
extern "C" { extern __declspec( dllimport ) DWORD __stdcall CertEnumCRLContextProperties(PCCRL_CONTEXT, DWORD); } 
#line 11393
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertFindCertificateInCRL(PCCERT_CONTEXT, PCCRL_CONTEXT, DWORD, void *, PCRL_ENTRY *); } 
#line 11416
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertIsValidCRLForCertificate(PCCERT_CONTEXT, PCCRL_CONTEXT, DWORD, void *); } 
#line 11485
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertAddEncodedCertificateToStore(HCERTSTORE, DWORD, const BYTE *, DWORD, DWORD, PCCERT_CONTEXT *); } 
#line 11555
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertAddCertificateContextToStore(HCERTSTORE, PCCERT_CONTEXT, DWORD, PCCERT_CONTEXT *); } 
#line 11610
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertAddSerializedElementToStore(HCERTSTORE, const BYTE *, DWORD, DWORD, DWORD, DWORD, DWORD *, const void **); } 
#line 11639
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertDeleteCertificateFromStore(PCCERT_CONTEXT); } 
#line 11663
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertAddEncodedCRLToStore(HCERTSTORE, DWORD, const BYTE *, DWORD, DWORD, PCCRL_CONTEXT *); } 
#line 11696
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertAddCRLContextToStore(HCERTSTORE, PCCRL_CONTEXT, DWORD, PCCRL_CONTEXT *); } 
#line 11718
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertDeleteCRLFromStore(PCCRL_CONTEXT); } 
#line 11729
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertSerializeCertificateStoreElement(PCCERT_CONTEXT, DWORD, BYTE *, DWORD *); } 
#line 11743
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertSerializeCRLStoreElement(PCCRL_CONTEXT, DWORD, BYTE *, DWORD *); } 
#line 11762
extern "C" { extern __declspec( dllimport ) PCCTL_CONTEXT __stdcall CertDuplicateCTLContext(PCCTL_CONTEXT); } 
#line 11783
extern "C" { extern __declspec( dllimport ) PCCTL_CONTEXT __stdcall CertCreateCTLContext(DWORD, const BYTE *, DWORD); } 
#line 11798
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertFreeCTLContext(PCCTL_CONTEXT); } 
#line 11810
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertSetCTLContextProperty(PCCTL_CONTEXT, DWORD, DWORD, const void *); } 
#line 11828
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertGetCTLContextProperty(PCCTL_CONTEXT, DWORD, void *, DWORD *); } 
#line 11841
extern "C" { extern __declspec( dllimport ) DWORD __stdcall CertEnumCTLContextProperties(PCCTL_CONTEXT, DWORD); } 
#line 11865
extern "C" { extern __declspec( dllimport ) PCCTL_CONTEXT __stdcall CertEnumCTLsInStore(HCERTSTORE, PCCTL_CONTEXT); } 
#line 11891
extern "C" { extern __declspec( dllimport ) PCTL_ENTRY __stdcall CertFindSubjectInCTL(DWORD, DWORD, void *, PCCTL_CONTEXT, DWORD); } 
#line 11908
extern "C" { typedef 
#line 11905
struct _CTL_ANY_SUBJECT_INFO { 
CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm; 
CRYPT_DATA_BLOB SubjectIdentifier; 
} CTL_ANY_SUBJECT_INFO; }extern "C" { typedef _CTL_ANY_SUBJECT_INFO *PCTL_ANY_SUBJECT_INFO; }
#line 11936
extern "C" { extern __declspec( dllimport ) PCCTL_CONTEXT __stdcall CertFindCTLInStore(HCERTSTORE, DWORD, DWORD, DWORD, const void *, PCCTL_CONTEXT); } 
#line 11957
extern "C" { typedef 
#line 11952
struct _CTL_FIND_USAGE_PARA { 
DWORD cbSize; 
CTL_USAGE SubjectUsage; 
CRYPT_DATA_BLOB ListIdentifier; 
PCERT_INFO pSigner; 
} CTL_FIND_USAGE_PARA; }extern "C" { typedef _CTL_FIND_USAGE_PARA *PCTL_FIND_USAGE_PARA; }
#line 11970
extern "C" { typedef 
#line 11965
struct _CTL_FIND_SUBJECT_PARA { 
DWORD cbSize; 
PCTL_FIND_USAGE_PARA pUsagePara; 
DWORD dwSubjectType; 
void *pvSubject; 
} CTL_FIND_SUBJECT_PARA; }extern "C" { typedef _CTL_FIND_SUBJECT_PARA *PCTL_FIND_SUBJECT_PARA; }
#line 12043
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertAddEncodedCTLToStore(HCERTSTORE, DWORD, const BYTE *, DWORD, DWORD, PCCTL_CONTEXT *); } 
#line 12076
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertAddCTLContextToStore(HCERTSTORE, PCCTL_CONTEXT, DWORD, PCCTL_CONTEXT *); } 
#line 12089
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertSerializeCTLStoreElement(PCCTL_CONTEXT, DWORD, BYTE *, DWORD *); } 
#line 12111
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertDeleteCTLFromStore(PCCTL_CONTEXT); } 
#line 12120
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertAddCertificateLinkToStore(HCERTSTORE, PCCERT_CONTEXT, DWORD, PCCERT_CONTEXT *); } 
#line 12131
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertAddCRLLinkToStore(HCERTSTORE, PCCRL_CONTEXT, DWORD, PCCRL_CONTEXT *); } 
#line 12142
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertAddCTLLinkToStore(HCERTSTORE, PCCTL_CONTEXT, DWORD, PCCTL_CONTEXT *); } 
#line 12152
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertAddStoreToCollection(HCERTSTORE, HCERTSTORE, DWORD, DWORD); } 
#line 12162
extern "C" { extern __declspec( dllimport ) void __stdcall CertRemoveStoreFromCollection(HCERTSTORE, HCERTSTORE); } 
#line 12171
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertControlStore(HCERTSTORE, DWORD, DWORD, const void *); } 
#line 12307
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertSetStoreProperty(HCERTSTORE, DWORD, DWORD, const void *); } 
#line 12330
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertGetStoreProperty(HCERTSTORE, DWORD, void *, DWORD *); } 
#line 12349
extern "C" { typedef BOOL (__stdcall *PFN_CERT_CREATE_CONTEXT_SORT_FUNC)(DWORD, DWORD, DWORD, void *); }
#line 12365
extern "C" { typedef 
#line 12356
struct _CERT_CREATE_CONTEXT_PARA { 
DWORD cbSize; 
PFN_CRYPT_FREE pfnFree; 
void *pvFree; 



PFN_CERT_CREATE_CONTEXT_SORT_FUNC pfnSort; 
void *pvSort; 
} CERT_CREATE_CONTEXT_PARA; }extern "C" { typedef _CERT_CREATE_CONTEXT_PARA *PCERT_CREATE_CONTEXT_PARA; }
#line 12403
extern "C" { extern __declspec( dllimport ) const void *__stdcall CertCreateContext(DWORD, DWORD, const BYTE *, DWORD, DWORD, PCERT_CREATE_CONTEXT_PARA); } 
#line 12462
extern "C" { typedef 
#line 12460
struct _CERT_SYSTEM_STORE_INFO { 
DWORD cbSize; 
} CERT_SYSTEM_STORE_INFO; }extern "C" { typedef _CERT_SYSTEM_STORE_INFO *PCERT_SYSTEM_STORE_INFO; }
#line 12514
extern "C" { typedef 
#line 12506
struct _CERT_PHYSICAL_STORE_INFO { 
DWORD cbSize; 
LPSTR pszOpenStoreProvider; 
DWORD dwOpenEncodingType; 
DWORD dwOpenFlags; 
CRYPT_DATA_BLOB OpenParameters; 
DWORD dwFlags; 
DWORD dwPriority; 
} CERT_PHYSICAL_STORE_INFO; }extern "C" { typedef _CERT_PHYSICAL_STORE_INFO *PCERT_PHYSICAL_STORE_INFO; }
#line 12555
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertRegisterSystemStore(const void *, DWORD, PCERT_SYSTEM_STORE_INFO, void *); } 
#line 12581
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertRegisterPhysicalStore(const void *, DWORD, LPCWSTR, PCERT_PHYSICAL_STORE_INFO, void *); } 
#line 12607
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertUnregisterSystemStore(const void *, DWORD); } 
#line 12630
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertUnregisterPhysicalStore(const void *, DWORD, LPCWSTR); } 
#line 12653
extern "C" { typedef BOOL (__stdcall *PFN_CERT_ENUM_SYSTEM_STORE_LOCATION)(LPCWSTR, DWORD, void *, void *); }
#line 12660
extern "C" { typedef BOOL (__stdcall *PFN_CERT_ENUM_SYSTEM_STORE)(const void *, DWORD, PCERT_SYSTEM_STORE_INFO, void *, void *); }
#line 12668
extern "C" { typedef BOOL (__stdcall *PFN_CERT_ENUM_PHYSICAL_STORE)(const void *, DWORD, LPCWSTR, PCERT_PHYSICAL_STORE_INFO, void *, void *); }
#line 12699
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertEnumSystemStoreLocation(DWORD, void *, PFN_CERT_ENUM_SYSTEM_STORE_LOCATION); } 
#line 12739
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertEnumSystemStore(DWORD, void *, void *, PFN_CERT_ENUM_SYSTEM_STORE); } 
#line 12765
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertEnumPhysicalStore(const void *, DWORD, void *, PFN_CERT_ENUM_PHYSICAL_STORE); } 
#line 12828
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertGetEnhancedKeyUsage(PCCERT_CONTEXT, DWORD, PCERT_ENHKEY_USAGE, DWORD *); } 
#line 12841
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertSetEnhancedKeyUsage(PCCERT_CONTEXT, PCERT_ENHKEY_USAGE); } 
#line 12852
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertAddEnhancedKeyUsageIdentifier(PCCERT_CONTEXT, LPCSTR); } 
#line 12865
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertRemoveEnhancedKeyUsageIdentifier(PCCERT_CONTEXT, LPCSTR); } 
#line 12881
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertGetValidUsages(DWORD, PCCERT_CONTEXT *, int *, LPSTR *, DWORD *); } 
#line 12920
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptMsgGetAndVerifySigner(HCRYPTMSG, DWORD, HCERTSTORE *, DWORD, PCCERT_CONTEXT *, DWORD *); } 
#line 12945
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptMsgSignCTL(DWORD, BYTE *, DWORD, PCMSG_SIGNED_ENCODE_INFO, DWORD, BYTE *, DWORD *); } 
#line 12974
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptMsgEncodeAndSignCTL(DWORD, PCTL_INFO, PCMSG_SIGNED_ENCODE_INFO, DWORD, BYTE *, DWORD *); } 
#line 13001
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertFindSubjectInSortedCTL(PCRYPT_DATA_BLOB, PCCTL_CONTEXT, DWORD, void *, PCRYPT_DER_BLOB); } 
#line 13025
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertEnumSubjectInSortedCTL(PCCTL_CONTEXT, void **, PCRYPT_DER_BLOB, PCRYPT_DER_BLOB); } 
#line 13044
extern "C" { typedef 
#line 13037
struct _CTL_VERIFY_USAGE_PARA { 
DWORD cbSize; 
CRYPT_DATA_BLOB ListIdentifier; 
DWORD cCtlStore; 
HCERTSTORE *rghCtlStore; 
DWORD cSignerStore; 
HCERTSTORE *rghSignerStore; 
} CTL_VERIFY_USAGE_PARA; }extern "C" { typedef _CTL_VERIFY_USAGE_PARA *PCTL_VERIFY_USAGE_PARA; }
#line 13054
extern "C" { typedef 
#line 13046
struct _CTL_VERIFY_USAGE_STATUS { 
DWORD cbSize; 
DWORD dwError; 
DWORD dwFlags; 
PCCTL_CONTEXT *ppCtl; 
DWORD dwCtlEntryIndex; 
PCCERT_CONTEXT *ppSigner; 
DWORD dwSignerIndex; 
} CTL_VERIFY_USAGE_STATUS; }extern "C" { typedef _CTL_VERIFY_USAGE_STATUS *PCTL_VERIFY_USAGE_STATUS; }
#line 13115
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertVerifyCTLUsage(DWORD, DWORD, void *, PCTL_USAGE, DWORD, PCTL_VERIFY_USAGE_PARA, PCTL_VERIFY_USAGE_STATUS); } 
#line 13143
extern "C" { typedef 
#line 13134
struct _CERT_REVOCATION_CRL_INFO { 
DWORD cbSize; 
PCCRL_CONTEXT pBaseCrlContext; 
PCCRL_CONTEXT pDeltaCrlContext; 



PCRL_ENTRY pCrlEntry; 
BOOL fDeltaCrlEntry; 
} CERT_REVOCATION_CRL_INFO; }extern "C" { typedef _CERT_REVOCATION_CRL_INFO *PCERT_REVOCATION_CRL_INFO; }
#line 13201
extern "C" { typedef 
#line 13162
struct _CERT_REVOCATION_PARA { 
DWORD cbSize; 
PCCERT_CONTEXT pIssuerCert; 
DWORD cCertStore; 
HCERTSTORE *rgCertStore; 
HCERTSTORE hCrlStore; 
LPFILETIME pftTimeToUse; 
#line 13201
} CERT_REVOCATION_PARA; }extern "C" { typedef _CERT_REVOCATION_PARA *PCERT_REVOCATION_PARA; }
#line 13234
extern "C" { typedef 
#line 13218
struct _CERT_REVOCATION_STATUS { 
DWORD cbSize; 
DWORD dwIndex; 
DWORD dwError; 
DWORD dwReason; 
#line 13232
BOOL fHasFreshnessTime; 
DWORD dwFreshnessTime; 
} CERT_REVOCATION_STATUS; }extern "C" { typedef _CERT_REVOCATION_STATUS *PCERT_REVOCATION_STATUS; }
#line 13316
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertVerifyRevocation(DWORD, DWORD, DWORD, PVOID [], DWORD, PCERT_REVOCATION_PARA, PCERT_REVOCATION_STATUS); } 
#line 13387
extern "C" { extern BOOL __stdcall CertCompareIntegerBlob(PCRYPT_INTEGER_BLOB, PCRYPT_INTEGER_BLOB); } 
#line 13403
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertCompareCertificate(DWORD, PCERT_INFO, PCERT_INFO); } 
#line 13417
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertCompareCertificateName(DWORD, PCERT_NAME_BLOB, PCERT_NAME_BLOB); } 
#line 13444
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertIsRDNAttrsInCertificateName(DWORD, DWORD, PCERT_NAME_BLOB, PCERT_RDN); } 
#line 13462
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertComparePublicKeyInfo(DWORD, PCERT_PUBLIC_KEY_INFO, PCERT_PUBLIC_KEY_INFO); } 
#line 13476
extern "C" { extern __declspec( dllimport ) DWORD __stdcall CertGetPublicKeyLength(DWORD, PCERT_PUBLIC_KEY_INFO); } 
#line 13494
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptVerifyCertificateSignature(HCRYPTPROV_LEGACY, DWORD, const BYTE *, DWORD, PCERT_PUBLIC_KEY_INFO); } 
#line 13531
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptVerifyCertificateSignatureEx(HCRYPTPROV_LEGACY, DWORD, DWORD, void *, DWORD, void *, DWORD, void *); } 
#line 13573
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptHashToBeSigned(HCRYPTPROV_LEGACY, DWORD, const BYTE *, DWORD, BYTE *, DWORD *); } 
#line 13594
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptHashCertificate(HCRYPTPROV_LEGACY, ALG_ID, DWORD, const BYTE *, DWORD, BYTE *, DWORD *); } 
#line 13610
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptHashCertificate2(LPCWSTR, DWORD, void *, const BYTE *, DWORD, BYTE *, DWORD *); } 
#line 13634
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptSignCertificate(HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, DWORD, DWORD, const BYTE *, DWORD, PCRYPT_ALGORITHM_IDENTIFIER, const void *, BYTE *, DWORD *); } 
#line 13661
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptSignAndEncodeCertificate(HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, DWORD, DWORD, LPCSTR, const void *, PCRYPT_ALGORITHM_IDENTIFIER, const void *, BYTE *, DWORD *); } 
#line 13694
extern "C" { typedef BOOL (__stdcall *PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC)(DWORD, PCRYPT_ALGORITHM_IDENTIFIER, void **, LPWSTR *); }
#line 13704
extern "C" { typedef BOOL (__stdcall *PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC)(NCRYPT_KEY_HANDLE, DWORD, PCRYPT_ALGORITHM_IDENTIFIER, void *, LPCWSTR, LPCWSTR, BYTE *, DWORD, BYTE *, DWORD *); }
#line 13721
extern "C" { typedef BOOL (__stdcall *PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC)(DWORD, PCERT_PUBLIC_KEY_INFO, PCRYPT_ALGORITHM_IDENTIFIER, void *, LPCWSTR, LPCWSTR, BYTE *, DWORD, BYTE *, DWORD); }
#line 13746
extern "C" { extern __declspec( dllimport ) LONG __stdcall CertVerifyTimeValidity(LPFILETIME, PCERT_INFO); } 
#line 13763
extern "C" { extern __declspec( dllimport ) LONG __stdcall CertVerifyCRLTimeValidity(LPFILETIME, PCRL_INFO); } 
#line 13777
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertVerifyValidityNesting(PCERT_INFO, PCERT_INFO); } 
#line 13790
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertVerifyCRLRevocation(DWORD, PCERT_INFO, DWORD, PCRL_INFO []); } 
#line 13806
extern "C" { extern __declspec( dllimport ) LPCSTR __stdcall CertAlgIdToOID(DWORD); } 
#line 13818
extern "C" { extern __declspec( dllimport ) DWORD __stdcall CertOIDToAlgId(LPCSTR); } 
#line 13830
extern "C" { extern __declspec( dllimport ) PCERT_EXTENSION __stdcall CertFindExtension(LPCSTR, DWORD, CERT_EXTENSION []); } 
#line 13844
extern "C" { extern __declspec( dllimport ) PCRYPT_ATTRIBUTE __stdcall CertFindAttribute(LPCSTR, DWORD, CRYPT_ATTRIBUTE []); } 
#line 13859
extern "C" { extern __declspec( dllimport ) PCERT_RDN_ATTR __stdcall CertFindRDNAttr(LPCSTR, PCERT_NAME_INFO); } 
#line 13875
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertGetIntendedKeyUsage(DWORD, PCERT_INFO, BYTE *, DWORD); } 
#line 13882
extern "C" { typedef void *HCRYPTDEFAULTCONTEXT; }
#line 13914
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptInstallDefaultContext(HCRYPTPROV, DWORD, const void *, DWORD, void *, HCRYPTDEFAULTCONTEXT *); } 
#line 13955
extern "C" { typedef 
#line 13952
struct _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA { 
DWORD cOID; 
LPSTR *rgpszOID; 
} CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA; }extern "C" { typedef _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA *PCRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA; }
#line 13969
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptUninstallDefaultContext(HCRYPTDEFAULTCONTEXT, DWORD, void *); } 
#line 13985
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptExportPublicKeyInfo(HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, DWORD, DWORD, PCERT_PUBLIC_KEY_INFO, DWORD *); } 
#line 14016
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptExportPublicKeyInfoEx(HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, DWORD, DWORD, LPSTR, DWORD, void *, PCERT_PUBLIC_KEY_INFO, DWORD *); } 
#line 14036
extern "C" { typedef BOOL (__stdcall *PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC)(NCRYPT_KEY_HANDLE, DWORD, LPSTR, DWORD, void *, PCERT_PUBLIC_KEY_INFO, DWORD *); }
#line 14057
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptImportPublicKeyInfo(HCRYPTPROV, DWORD, PCERT_PUBLIC_KEY_INFO, HCRYPTKEY *); } 
#line 14083
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptImportPublicKeyInfoEx(HCRYPTPROV, DWORD, PCERT_PUBLIC_KEY_INFO, ALG_ID, DWORD, void *, HCRYPTKEY *); } 
#line 14110
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptImportPublicKeyInfoEx2(DWORD, PCERT_PUBLIC_KEY_INFO, DWORD, void *, BCRYPT_KEY_HANDLE *); } 
#line 14124
extern "C" { typedef BOOL (__stdcall *PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC)(DWORD, PCERT_PUBLIC_KEY_INFO, DWORD, void *, BCRYPT_KEY_HANDLE *); }
#line 14199
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptAcquireCertificatePrivateKey(PCCERT_CONTEXT, DWORD, void *, HCRYPTPROV_OR_NCRYPT_KEY_HANDLE *, DWORD *, BOOL *); } 
#line 14246
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptFindCertificateKeyProvInfo(PCCERT_CONTEXT, DWORD, void *); } 
#line 14271
extern "C" { typedef BOOL (__stdcall *PFN_IMPORT_PRIV_KEY_FUNC)(HCRYPTPROV, CRYPT_PRIVATE_KEY_INFO *, DWORD, void *); }
#line 14301
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptImportPKCS8(CRYPT_PKCS8_IMPORT_PARAMS, DWORD, HCRYPTPROV *, void *); } 
#line 14311
extern "C" { typedef BOOL (__stdcall *PFN_EXPORT_PRIV_KEY_FUNC)(HCRYPTPROV, DWORD, LPSTR, DWORD, void *, CRYPT_PRIVATE_KEY_INFO *, DWORD *); }
#line 14332
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptExportPKCS8(HCRYPTPROV, DWORD, LPSTR, DWORD, void *, BYTE *, DWORD *); } 
#line 14367
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptExportPKCS8Ex(CRYPT_PKCS8_EXPORT_PARAMS *, DWORD, void *, BYTE *, DWORD *); } 
#line 14383
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptHashPublicKeyInfo(HCRYPTPROV_LEGACY, ALG_ID, DWORD, DWORD, PCERT_PUBLIC_KEY_INFO, BYTE *, DWORD *); } 
#line 14407
extern "C" { extern __declspec( dllimport ) DWORD __stdcall CertRDNValueToStrA(DWORD, PCERT_RDN_VALUE_BLOB, LPSTR, DWORD); } 
#line 14427
extern "C" { extern __declspec( dllimport ) DWORD __stdcall CertRDNValueToStrW(DWORD, PCERT_RDN_VALUE_BLOB, LPWSTR, DWORD); } 
#line 14535 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincrypt.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall CertNameToStrA(DWORD, PCERT_NAME_BLOB, DWORD, LPSTR, DWORD); } 
#line 14547
extern "C" { extern __declspec( dllimport ) DWORD __stdcall CertNameToStrW(DWORD, PCERT_NAME_BLOB, DWORD, LPWSTR, DWORD); } 
#line 14701 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincrypt.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertStrToNameA(DWORD, LPCSTR, DWORD, void *, BYTE *, DWORD *, LPCSTR *); } 
#line 14715
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertStrToNameW(DWORD, LPCWSTR, DWORD, void *, BYTE *, DWORD *, LPCWSTR *); } 
#line 14826 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincrypt.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall CertGetNameStringA(PCCERT_CONTEXT, DWORD, DWORD, void *, LPSTR, DWORD); } 
#line 14839
extern "C" { extern __declspec( dllimport ) DWORD __stdcall CertGetNameStringW(PCCERT_CONTEXT, DWORD, DWORD, void *, LPWSTR, DWORD); } 
#line 14925 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincrypt.h"
extern "C" { typedef PCCERT_CONTEXT (__stdcall *PFN_CRYPT_GET_SIGNER_CERTIFICATE)(void *, DWORD, PCERT_INFO, HCERTSTORE); }
#line 15006
extern "C" { typedef 
#line 14984
struct _CRYPT_SIGN_MESSAGE_PARA { 
DWORD cbSize; 
DWORD dwMsgEncodingType; 
PCCERT_CONTEXT pSigningCert; 
CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm; 
void *pvHashAuxInfo; 
DWORD cMsgCert; 
PCCERT_CONTEXT *rgpMsgCert; 
DWORD cMsgCrl; 
PCCRL_CONTEXT *rgpMsgCrl; 
DWORD cAuthAttr; 
PCRYPT_ATTRIBUTE rgAuthAttr; 
DWORD cUnauthAttr; 
PCRYPT_ATTRIBUTE rgUnauthAttr; 
DWORD dwFlags; 
DWORD dwInnerContentType; 
#line 15006
} CRYPT_SIGN_MESSAGE_PARA; }extern "C" { typedef _CRYPT_SIGN_MESSAGE_PARA *PCRYPT_SIGN_MESSAGE_PARA; }
#line 15042
extern "C" { typedef 
#line 15036
struct _CRYPT_VERIFY_MESSAGE_PARA { 
DWORD cbSize; 
DWORD dwMsgAndCertEncodingType; 
HCRYPTPROV_LEGACY hCryptProv; 
PFN_CRYPT_GET_SIGNER_CERTIFICATE pfnGetSignerCertificate; 
void *pvGetArg; 
} CRYPT_VERIFY_MESSAGE_PARA; }extern "C" { typedef _CRYPT_VERIFY_MESSAGE_PARA *PCRYPT_VERIFY_MESSAGE_PARA; }
#line 15091
extern "C" { typedef 
#line 15083
struct _CRYPT_ENCRYPT_MESSAGE_PARA { 
DWORD cbSize; 
DWORD dwMsgEncodingType; 
HCRYPTPROV_LEGACY hCryptProv; 
CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm; 
void *pvEncryptionAuxInfo; 
DWORD dwFlags; 
DWORD dwInnerContentType; 
} CRYPT_ENCRYPT_MESSAGE_PARA; }extern "C" { typedef _CRYPT_ENCRYPT_MESSAGE_PARA *PCRYPT_ENCRYPT_MESSAGE_PARA; }
#line 15131
extern "C" { typedef 
#line 15117
struct _CRYPT_DECRYPT_MESSAGE_PARA { 
DWORD cbSize; 
DWORD dwMsgAndCertEncodingType; 
DWORD cCertStore; 
HCERTSTORE *rghCertStore; 
#line 15131
} CRYPT_DECRYPT_MESSAGE_PARA; }extern "C" { typedef _CRYPT_DECRYPT_MESSAGE_PARA *PCRYPT_DECRYPT_MESSAGE_PARA; }
#line 15150
extern "C" { typedef 
#line 15144
struct _CRYPT_HASH_MESSAGE_PARA { 
DWORD cbSize; 
DWORD dwMsgEncodingType; 
HCRYPTPROV_LEGACY hCryptProv; 
CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm; 
void *pvHashAuxInfo; 
} CRYPT_HASH_MESSAGE_PARA; }extern "C" { typedef _CRYPT_HASH_MESSAGE_PARA *PCRYPT_HASH_MESSAGE_PARA; }
#line 15181
extern "C" { typedef 
#line 15164
struct _CRYPT_KEY_SIGN_MESSAGE_PARA { 
DWORD cbSize; 
DWORD dwMsgAndCertEncodingType; 


union { 
HCRYPTPROV hCryptProv; 
NCRYPT_KEY_HANDLE hNCryptKey; 
}; 


DWORD dwKeySpec; 

CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm; 
void *pvHashAuxInfo; 

CRYPT_ALGORITHM_IDENTIFIER PubKeyAlgorithm; 
} CRYPT_KEY_SIGN_MESSAGE_PARA; }extern "C" { typedef _CRYPT_KEY_SIGN_MESSAGE_PARA *PCRYPT_KEY_SIGN_MESSAGE_PARA; }
#line 15198
extern "C" { typedef 
#line 15194
struct _CRYPT_KEY_VERIFY_MESSAGE_PARA { 
DWORD cbSize; 
DWORD dwMsgEncodingType; 
HCRYPTPROV_LEGACY hCryptProv; 
} CRYPT_KEY_VERIFY_MESSAGE_PARA; }extern "C" { typedef _CRYPT_KEY_VERIFY_MESSAGE_PARA *PCRYPT_KEY_VERIFY_MESSAGE_PARA; }
#line 15210
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptSignMessage(PCRYPT_SIGN_MESSAGE_PARA, BOOL, DWORD, const BYTE *[], DWORD [], BYTE *, DWORD *); } 
#line 15259
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptVerifyMessageSignature(PCRYPT_VERIFY_MESSAGE_PARA, DWORD, const BYTE *, DWORD, BYTE *, DWORD *, PCCERT_CONTEXT *); } 
#line 15276
extern "C" { extern __declspec( dllimport ) LONG __stdcall CryptGetMessageSignerCount(DWORD, const BYTE *, DWORD); } 
#line 15289
extern "C" { extern __declspec( dllimport ) HCERTSTORE __stdcall CryptGetMessageCertificates(DWORD, HCRYPTPROV_LEGACY, DWORD, const BYTE *, DWORD); } 
#line 15305
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptVerifyDetachedMessageSignature(PCRYPT_VERIFY_MESSAGE_PARA, DWORD, const BYTE *, DWORD, DWORD, const BYTE *[], DWORD [], PCCERT_CONTEXT *); } 
#line 15322
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptEncryptMessage(PCRYPT_ENCRYPT_MESSAGE_PARA, DWORD, PCCERT_CONTEXT [], const BYTE *, DWORD, BYTE *, DWORD *); } 
#line 15349
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptDecryptMessage(PCRYPT_DECRYPT_MESSAGE_PARA, const BYTE *, DWORD, BYTE *, DWORD *, PCCERT_CONTEXT *); } 
#line 15368
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptSignAndEncryptMessage(PCRYPT_SIGN_MESSAGE_PARA, PCRYPT_ENCRYPT_MESSAGE_PARA, DWORD, PCCERT_CONTEXT [], const BYTE *, DWORD, BYTE *, DWORD *); } 
#line 15409
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptDecryptAndVerifyMessageSignature(PCRYPT_DECRYPT_MESSAGE_PARA, PCRYPT_VERIFY_MESSAGE_PARA, DWORD, const BYTE *, DWORD, BYTE *, DWORD *, PCCERT_CONTEXT *, PCCERT_CONTEXT *); } 
#line 15456
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptDecodeMessage(DWORD, PCRYPT_DECRYPT_MESSAGE_PARA, PCRYPT_VERIFY_MESSAGE_PARA, DWORD, const BYTE *, DWORD, DWORD, DWORD *, DWORD *, BYTE *, DWORD *, PCCERT_CONTEXT *, PCCERT_CONTEXT *); } 
#line 15485
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptHashMessage(PCRYPT_HASH_MESSAGE_PARA, BOOL, DWORD, const BYTE *[], DWORD [], BYTE *, DWORD *, BYTE *, DWORD *); } 
#line 15506
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptVerifyMessageHash(PCRYPT_HASH_MESSAGE_PARA, BYTE *, DWORD, BYTE *, DWORD *, BYTE *, DWORD *); } 
#line 15527
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptVerifyDetachedMessageHash(PCRYPT_HASH_MESSAGE_PARA, BYTE *, DWORD, DWORD, const BYTE *[], DWORD [], BYTE *, DWORD *); } 
#line 15547
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptSignMessageWithKey(PCRYPT_KEY_SIGN_MESSAGE_PARA, const BYTE *, DWORD, BYTE *, DWORD *); } 
#line 15571
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptVerifyMessageSignatureWithKey(PCRYPT_KEY_VERIFY_MESSAGE_PARA, PCERT_PUBLIC_KEY_INFO, const BYTE *, DWORD, BYTE *, DWORD *); } 
#line 15610
extern "C" { extern __declspec( dllimport ) HCERTSTORE __stdcall CertOpenSystemStoreA(HCRYPTPROV_LEGACY, LPCSTR); } 
#line 15617
extern "C" { extern __declspec( dllimport ) HCERTSTORE __stdcall CertOpenSystemStoreW(HCRYPTPROV_LEGACY, LPCWSTR); } 
#line 15630 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincrypt.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertAddEncodedCertificateToSystemStoreA(LPCSTR, const BYTE *, DWORD); } 
#line 15638
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertAddEncodedCertificateToSystemStoreW(LPCWSTR, const BYTE *, DWORD); } 
#line 15666 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincrypt.h"
extern "C" { typedef 
#line 15661
struct _CERT_CHAIN { 
DWORD cCerts; 
PCERT_BLOB certs; 

CRYPT_KEY_PROV_INFO keyLocatorInfo; 
} CERT_CHAIN; }extern "C" { typedef _CERT_CHAIN *PCERT_CHAIN; }
#line 15672
extern "C" { extern HRESULT __stdcall FindCertsByIssuer(PCERT_CHAIN, DWORD *, DWORD *, BYTE *, DWORD, LPCWSTR, DWORD); } 
#line 15816
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptQueryObject(DWORD, const void *, DWORD, DWORD, DWORD, DWORD *, DWORD *, DWORD *, HCERTSTORE *, HCRYPTMSG *, const void **); } 
#line 15991
extern "C" { extern __declspec( dllimport ) LPVOID __stdcall CryptMemAlloc(ULONG); } 
#line 15998
extern "C" { extern __declspec( dllimport ) LPVOID __stdcall CryptMemRealloc(LPVOID, ULONG); } 
#line 16006
extern "C" { extern __declspec( dllimport ) void __stdcall CryptMemFree(LPVOID); } 
#line 16020
extern "C" { typedef HANDLE HCRYPTASYNC; }extern "C" { typedef HANDLE *PHCRYPTASYNC; }

extern "C" { typedef void (__stdcall *PFN_CRYPT_ASYNC_PARAM_FREE_FUNC)(LPSTR, LPVOID); }
#line 16030
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptCreateAsyncHandle(DWORD, PHCRYPTASYNC); } 
#line 16038
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptSetAsyncParam(HCRYPTASYNC, LPSTR, LPVOID, PFN_CRYPT_ASYNC_PARAM_FREE_FUNC); } 
#line 16048
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptGetAsyncParam(HCRYPTASYNC, LPSTR, LPVOID *, PFN_CRYPT_ASYNC_PARAM_FREE_FUNC *); } 
#line 16058
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptCloseAsyncHandle(HCRYPTASYNC); } 
#line 16079
extern "C" { typedef 
#line 16076
struct _CRYPT_BLOB_ARRAY { 
DWORD cBlob; 
PCRYPT_DATA_BLOB rgBlob; 
} CRYPT_BLOB_ARRAY; }extern "C" { typedef _CRYPT_BLOB_ARRAY *PCRYPT_BLOB_ARRAY; }
#line 16085
extern "C" { typedef 
#line 16081
struct _CRYPT_CREDENTIALS { 
DWORD cbSize; 
LPCSTR pszCredentialsOid; 
LPVOID pvCredentials; 
} CRYPT_CREDENTIALS; }extern "C" { typedef _CRYPT_CREDENTIALS *PCRYPT_CREDENTIALS; }
#line 16100 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincrypt.h"
extern "C" { typedef 
#line 16096
struct _CRYPT_PASSWORD_CREDENTIALSA { 
DWORD cbSize; 
LPSTR pszUsername; 
LPSTR pszPassword; 
} CRYPT_PASSWORD_CREDENTIALSA; }extern "C" { typedef _CRYPT_PASSWORD_CREDENTIALSA *PCRYPT_PASSWORD_CREDENTIALSA; }




extern "C" { typedef 
#line 16101
struct _CRYPT_PASSWORD_CREDENTIALSW { 
DWORD cbSize; 
LPWSTR pszUsername; 
LPWSTR pszPassword; 
} CRYPT_PASSWORD_CREDENTIALSW; }extern "C" { typedef _CRYPT_PASSWORD_CREDENTIALSW *PCRYPT_PASSWORD_CREDENTIALSW; }




extern "C" { typedef CRYPT_PASSWORD_CREDENTIALSA CRYPT_PASSWORD_CREDENTIALS; }
extern "C" { typedef PCRYPT_PASSWORD_CREDENTIALSA PCRYPT_PASSWORD_CREDENTIALS; }
#line 16125 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincrypt.h"
extern "C" { typedef void (__stdcall *PFN_FREE_ENCODED_OBJECT_FUNC)(LPCSTR, PCRYPT_BLOB_ARRAY, LPVOID); }
#line 16312
extern "C" { typedef 
#line 16296
struct _CRYPTNET_URL_CACHE_PRE_FETCH_INFO { 
DWORD cbSize; 
DWORD dwObjectType; 
#line 16306
DWORD dwError; 
DWORD dwReserved; 

FILETIME ThisUpdateTime; 
FILETIME NextUpdateTime; 
FILETIME PublishTime; 
} CRYPTNET_URL_CACHE_PRE_FETCH_INFO; }extern "C" { typedef _CRYPTNET_URL_CACHE_PRE_FETCH_INFO *PCRYPTNET_URL_CACHE_PRE_FETCH_INFO; }
#line 16338
extern "C" { typedef 
#line 16326
struct _CRYPTNET_URL_CACHE_FLUSH_INFO { 
DWORD cbSize; 




DWORD dwExemptSeconds; 




FILETIME ExpireTime; 
} CRYPTNET_URL_CACHE_FLUSH_INFO; }extern "C" { typedef _CRYPTNET_URL_CACHE_FLUSH_INFO *PCRYPTNET_URL_CACHE_FLUSH_INFO; }
#line 16357
extern "C" { typedef 
#line 16347
struct _CRYPTNET_URL_CACHE_RESPONSE_INFO { 
DWORD cbSize; 
WORD wResponseType; 
WORD wResponseFlags; 


FILETIME LastModifiedTime; 
DWORD dwMaxAge; 
LPCWSTR pwszETag; 
DWORD dwProxyId; 
} CRYPTNET_URL_CACHE_RESPONSE_INFO; }extern "C" { typedef _CRYPTNET_URL_CACHE_RESPONSE_INFO *PCRYPTNET_URL_CACHE_RESPONSE_INFO; }
#line 16424
extern "C" { typedef 
#line 16374
struct _CRYPT_RETRIEVE_AUX_INFO { 
DWORD cbSize; 
FILETIME *pLastSyncTime; 


DWORD dwMaxUrlRetrievalByteCount; 
#line 16385
PCRYPTNET_URL_CACHE_PRE_FETCH_INFO pPreFetchInfo; 
#line 16391
PCRYPTNET_URL_CACHE_FLUSH_INFO pFlushInfo; 
#line 16397
PCRYPTNET_URL_CACHE_RESPONSE_INFO *ppResponseInfo; 



LPWSTR pwszCacheFileNamePrefix; 
#line 16407
LPFILETIME pftCacheResync; 
#line 16413
BOOL fProxyCacheRetrieval; 
#line 16423
DWORD dwHttpStatusCode; 
} CRYPT_RETRIEVE_AUX_INFO; }extern "C" { typedef _CRYPT_RETRIEVE_AUX_INFO *PCRYPT_RETRIEVE_AUX_INFO; }
#line 16431
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptRetrieveObjectByUrlA(LPCSTR, LPCSTR, DWORD, DWORD, LPVOID *, HCRYPTASYNC, PCRYPT_CREDENTIALS, LPVOID, PCRYPT_RETRIEVE_AUX_INFO); } 
#line 16446
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptRetrieveObjectByUrlW(LPCWSTR, LPCSTR, DWORD, DWORD, LPVOID *, HCRYPTASYNC, PCRYPT_CREDENTIALS, LPVOID, PCRYPT_RETRIEVE_AUX_INFO); } 
#line 16475 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincrypt.h"
extern "C" { typedef BOOL (__stdcall *PFN_CRYPT_CANCEL_RETRIEVAL)(DWORD, void *); }
#line 16491
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptInstallCancelRetrieval(PFN_CRYPT_CANCEL_RETRIEVAL, const void *, DWORD, void *); } 
#line 16502
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptUninstallCancelRetrieval(DWORD, void *); } 
#line 16511
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptCancelAsyncRetrieval(HCRYPTASYNC); } 
#line 16526
extern "C" { typedef void (__stdcall *PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC)(LPVOID, DWORD, LPCSTR, LPSTR, LPVOID); }
#line 16537
extern "C" { typedef 
#line 16534
struct _CRYPT_ASYNC_RETRIEVAL_COMPLETION { 
PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC pfnCompletion; 
LPVOID pvCompletion; 
} CRYPT_ASYNC_RETRIEVAL_COMPLETION; }extern "C" { typedef _CRYPT_ASYNC_RETRIEVAL_COMPLETION *PCRYPT_ASYNC_RETRIEVAL_COMPLETION; }
#line 16546
extern "C" { typedef BOOL (__stdcall *PFN_CANCEL_ASYNC_RETRIEVAL_FUNC)(HCRYPTASYNC); }
#line 16562
extern "C" { typedef 
#line 16559
struct _CRYPT_URL_ARRAY { 
DWORD cUrl; 
LPWSTR *rgwszUrl; 
} CRYPT_URL_ARRAY; }extern "C" { typedef _CRYPT_URL_ARRAY *PCRYPT_URL_ARRAY; }
#line 16575
extern "C" { typedef 
#line 16564
struct _CRYPT_URL_INFO { 
DWORD cbSize; 


DWORD dwSyncDeltaTime; 




DWORD cGroup; 
DWORD *rgcGroupEntry; 
} CRYPT_URL_INFO; }extern "C" { typedef _CRYPT_URL_INFO *PCRYPT_URL_INFO; }




extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptGetObjectUrl(LPCSTR, LPVOID, DWORD, PCRYPT_URL_ARRAY, DWORD *, PCRYPT_URL_INFO, DWORD *, LPVOID); } 
#line 16710
extern "C" { typedef 
#line 16707
struct _CERT_CRL_CONTEXT_PAIR { 
PCCERT_CONTEXT pCertContext; 
PCCRL_CONTEXT pCrlContext; 
} CERT_CRL_CONTEXT_PAIR; }extern "C" { typedef _CERT_CRL_CONTEXT_PAIR *PCERT_CRL_CONTEXT_PAIR; }
extern "C" { typedef const CERT_CRL_CONTEXT_PAIR *PCCERT_CRL_CONTEXT_PAIR; }
#line 16741
extern "C" { typedef 
#line 16724
struct _CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO { 
DWORD cbSize; 


int iDeltaCrlIndicator; 



LPFILETIME pftCacheResync; 


LPFILETIME pLastSyncTime; 




LPFILETIME pMaxAgeTime; 
} CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO; }
extern "C" { typedef _CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO *PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO; }
#line 16748
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptGetTimeValidObject(LPCSTR, LPVOID, PCCERT_CONTEXT, LPFILETIME, DWORD, DWORD, LPVOID *, PCRYPT_CREDENTIALS, PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO); } 
#line 16798
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptFlushTimeValidObject(LPCSTR, LPVOID, PCCERT_CONTEXT, DWORD, LPVOID); } 
#line 16865
extern "C" { typedef 
#line 16859
struct _CRYPTPROTECT_PROMPTSTRUCT { 

DWORD cbSize; 
DWORD dwPromptFlags; 
HWND hwndApp; 
LPCWSTR szPrompt; 
} CRYPTPROTECT_PROMPTSTRUCT; }extern "C" { typedef _CRYPTPROTECT_PROMPTSTRUCT *PCRYPTPROTECT_PROMPTSTRUCT; }
#line 16943
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptProtectData(DATA_BLOB *, LPCWSTR, DATA_BLOB *, PVOID, CRYPTPROTECT_PROMPTSTRUCT *, DWORD, DATA_BLOB *); } 
#line 16956
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptUnprotectData(DATA_BLOB *, LPWSTR *, DATA_BLOB *, PVOID, CRYPTPROTECT_PROMPTSTRUCT *, DWORD, DATA_BLOB *); } 
#line 16969
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptUpdateProtectedState(PSID, LPCWSTR, DWORD, DWORD *, DWORD *); } 
#line 17013
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptProtectMemory(LPVOID, DWORD, DWORD); } 
#line 17022
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptUnprotectMemory(LPVOID, DWORD, DWORD); } 
#line 17067
extern "C" { extern __declspec( dllimport ) PCCERT_CONTEXT __stdcall CertCreateSelfSignCertificate(HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, PCERT_NAME_BLOB, DWORD, PCRYPT_KEY_PROV_INFO, PCRYPT_ALGORITHM_IDENTIFIER, PSYSTEMTIME, PSYSTEMTIME, PCERT_EXTENSIONS); } 
#line 17113
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptGetKeyIdentifierProperty(const CRYPT_HASH_BLOB *, DWORD, DWORD, LPCWSTR, void *, void *, DWORD *); } 
#line 17154
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptSetKeyIdentifierProperty(const CRYPT_HASH_BLOB *, DWORD, DWORD, LPCWSTR, void *, const void *); } 
#line 17178
extern "C" { typedef BOOL (__stdcall *PFN_CRYPT_ENUM_KEYID_PROP)(const CRYPT_HASH_BLOB *, DWORD, void *, void *, DWORD, DWORD *, void **, DWORD *); }
#line 17206
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptEnumKeyIdentifierProperties(const CRYPT_HASH_BLOB *, DWORD, DWORD, LPCWSTR, void *, void *, PFN_CRYPT_ENUM_KEYID_PROP); } 
#line 17230
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptCreateKeyIdentifierFromCSP(DWORD, LPCSTR, const PUBLICKEYSTRUC *, DWORD, DWORD, void *, BYTE *, DWORD *); } 
#line 17616
extern "C" { typedef HANDLE HCERTCHAINENGINE; }
#line 17684
extern "C" { typedef 
#line 17671
struct _CERT_CHAIN_ENGINE_CONFIG { 

DWORD cbSize; 
HCERTSTORE hRestrictedRoot; 
HCERTSTORE hRestrictedTrust; 
HCERTSTORE hRestrictedOther; 
DWORD cAdditionalStore; 
HCERTSTORE *rghAdditionalStore; 
DWORD dwFlags; 
DWORD dwUrlRetrievalTimeout; 
DWORD MaximumCachedCertificates; 
DWORD CycleDetectionModulus; 

} CERT_CHAIN_ENGINE_CONFIG; }extern "C" { typedef _CERT_CHAIN_ENGINE_CONFIG *PCERT_CHAIN_ENGINE_CONFIG; }
#line 17690
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertCreateCertificateChainEngine(PCERT_CHAIN_ENGINE_CONFIG, HCERTCHAINENGINE *); } 
#line 17702
extern "C" { extern __declspec( dllimport ) void __stdcall CertFreeCertificateChainEngine(HCERTCHAINENGINE); } 
#line 17714
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertResyncCertificateChainEngine(HCERTCHAINENGINE); } 
#line 17737
extern "C" { typedef 
#line 17732
struct _CERT_TRUST_STATUS { 

DWORD dwErrorStatus; 
DWORD dwInfoStatus; 

} CERT_TRUST_STATUS; }extern "C" { typedef _CERT_TRUST_STATUS *PCERT_TRUST_STATUS; }
#line 17836
extern "C" { typedef 
#line 17821
struct _CERT_REVOCATION_INFO { 

DWORD cbSize; 
DWORD dwRevocationResult; 
LPCSTR pszRevocationOid; 
LPVOID pvOidSpecificInfo; 



BOOL fHasFreshnessTime; 
DWORD dwFreshnessTime; 


PCERT_REVOCATION_CRL_INFO pCrlInfo; 

} CERT_REVOCATION_INFO; }extern "C" { typedef _CERT_REVOCATION_INFO *PCERT_REVOCATION_INFO; }
#line 17848
extern "C" { typedef 
#line 17842
struct _CERT_TRUST_LIST_INFO { 

DWORD cbSize; 
PCTL_ENTRY pCtlEntry; 
PCCTL_CONTEXT pCtlContext; 

} CERT_TRUST_LIST_INFO; }extern "C" { typedef _CERT_TRUST_LIST_INFO *PCERT_TRUST_LIST_INFO; }
#line 17865
extern "C" { typedef 
#line 17854
struct _CERT_CHAIN_ELEMENT { 

DWORD cbSize; 
PCCERT_CONTEXT pCertContext; 
CERT_TRUST_STATUS TrustStatus; 
PCERT_REVOCATION_INFO pRevocationInfo; 

PCERT_ENHKEY_USAGE pIssuanceUsage; 
PCERT_ENHKEY_USAGE pApplicationUsage; 

LPCWSTR pwszExtendedErrorInfo; 
} CERT_CHAIN_ELEMENT; }extern "C" { typedef _CERT_CHAIN_ELEMENT *PCERT_CHAIN_ELEMENT; }
#line 17893
extern "C" { typedef 
#line 17876
struct _CERT_SIMPLE_CHAIN { 

DWORD cbSize; 
CERT_TRUST_STATUS TrustStatus; 
DWORD cElement; 
PCERT_CHAIN_ELEMENT *rgpElement; 
PCERT_TRUST_LIST_INFO pTrustListInfo; 
#line 17890
BOOL fHasRevocationFreshnessTime; 
DWORD dwRevocationFreshnessTime; 

} CERT_SIMPLE_CHAIN; }extern "C" { typedef _CERT_SIMPLE_CHAIN *PCERT_SIMPLE_CHAIN; }
#line 17905
extern "C" { typedef struct _CERT_CHAIN_CONTEXT CERT_CHAIN_CONTEXT; }extern "C" { typedef _CERT_CHAIN_CONTEXT *PCERT_CHAIN_CONTEXT; }
extern "C" { typedef const CERT_CHAIN_CONTEXT *PCCERT_CHAIN_CONTEXT; }

extern "C" { struct _CERT_CHAIN_CONTEXT { 
DWORD cbSize; 
CERT_TRUST_STATUS TrustStatus; 
DWORD cChain; 
PCERT_SIMPLE_CHAIN *rgpChain; 



DWORD cLowerQualityChainContext; 
PCCERT_CHAIN_CONTEXT *rgpLowerQualityChainContext; 
#line 17925
BOOL fHasRevocationFreshnessTime; 
DWORD dwRevocationFreshnessTime; 


DWORD dwCreateFlags; 


GUID ChainId; 
}; }
#line 17951
extern "C" { typedef 
#line 17946
struct _CERT_USAGE_MATCH { 

DWORD dwType; 
CERT_ENHKEY_USAGE Usage; 

} CERT_USAGE_MATCH; }extern "C" { typedef _CERT_USAGE_MATCH *PCERT_USAGE_MATCH; }
#line 17958
extern "C" { typedef 
#line 17953
struct _CTL_USAGE_MATCH { 

DWORD dwType; 
CTL_USAGE Usage; 

} CTL_USAGE_MATCH; }extern "C" { typedef _CTL_USAGE_MATCH *PCTL_USAGE_MATCH; }
#line 17983
extern "C" { typedef 
#line 17960
struct _CERT_CHAIN_PARA { 

DWORD cbSize; 
CERT_USAGE_MATCH RequestedUsage; 
#line 17983
} CERT_CHAIN_PARA; }extern "C" { typedef _CERT_CHAIN_PARA *PCERT_CHAIN_PARA; }
#line 18071
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertGetCertificateChain(HCERTCHAINENGINE, PCCERT_CONTEXT, LPFILETIME, HCERTSTORE, PCERT_CHAIN_PARA, DWORD, LPVOID, PCCERT_CHAIN_CONTEXT *); } 
#line 18089
extern "C" { extern __declspec( dllimport ) void __stdcall CertFreeCertificateChain(PCCERT_CHAIN_CONTEXT); } 
#line 18100
extern "C" { extern __declspec( dllimport ) PCCERT_CHAIN_CONTEXT __stdcall CertDuplicateCertificateChain(PCCERT_CHAIN_CONTEXT); } 
#line 18128
extern "C" { typedef 
#line 18122
struct _CRL_REVOCATION_INFO { 

PCRL_ENTRY pCrlEntry; 
PCCRL_CONTEXT pCrlContext; 
PCCERT_CHAIN_CONTEXT pCrlIssuerChain; 

} CRL_REVOCATION_INFO; }extern "C" { typedef _CRL_REVOCATION_INFO *PCRL_REVOCATION_INFO; }
#line 18154
extern "C" { extern __declspec( dllimport ) PCCERT_CHAIN_CONTEXT __stdcall CertFindChainInStore(HCERTSTORE, DWORD, DWORD, DWORD, const void *, PCCERT_CHAIN_CONTEXT); } 
#line 18210
extern "C" { typedef BOOL (__stdcall *PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK)(PCCERT_CONTEXT, void *); }
#line 18262
extern "C" { typedef 
#line 18215
struct _CERT_CHAIN_FIND_BY_ISSUER_PARA { 
DWORD cbSize; 


LPCSTR pszUsageIdentifier; 


DWORD dwKeySpec; 
#line 18229
DWORD dwAcquirePrivateKeyFlags; 



DWORD cIssuer; 
CERT_NAME_BLOB *rgIssuer; 




PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK pfnFindCallback; 
void *pvFindArg; 
#line 18262
} CERT_CHAIN_FIND_ISSUER_PARA; }extern "C" { typedef _CERT_CHAIN_FIND_BY_ISSUER_PARA *PCERT_CHAIN_FIND_ISSUER_PARA; }
extern "C" { typedef _CERT_CHAIN_FIND_BY_ISSUER_PARA CERT_CHAIN_FIND_BY_ISSUER_PARA; }extern "C" { typedef _CERT_CHAIN_FIND_BY_ISSUER_PARA *PCERT_CHAIN_FIND_BY_ISSUER_PARA; }
#line 18306
extern "C" { typedef 
#line 18302
struct _CERT_CHAIN_POLICY_PARA { 
DWORD cbSize; 
DWORD dwFlags; 
void *pvExtraPolicyPara; 
} CERT_CHAIN_POLICY_PARA; }extern "C" { typedef _CERT_CHAIN_POLICY_PARA *PCERT_CHAIN_POLICY_PARA; }
#line 18319
extern "C" { typedef 
#line 18313
struct _CERT_CHAIN_POLICY_STATUS { 
DWORD cbSize; 
DWORD dwError; 
LONG lChainIndex; 
LONG lElementIndex; 
void *pvExtraPolicyStatus; 
} CERT_CHAIN_POLICY_STATUS; }extern "C" { typedef _CERT_CHAIN_POLICY_STATUS *PCERT_CHAIN_POLICY_STATUS; }
#line 18383
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertVerifyCertificateChainPolicy(LPCSTR, PCCERT_CHAIN_CONTEXT, PCERT_CHAIN_POLICY_PARA, PCERT_CHAIN_POLICY_STATUS); } 
#line 18432
extern "C" { typedef 
#line 18428
struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA { 
DWORD cbSize; 
DWORD dwRegPolicySettings; 
PCMSG_SIGNER_INFO pSignerInfo; 
} AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA; }
extern "C" { typedef _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA; }




extern "C" { typedef 
#line 18435
struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS { 
DWORD cbSize; 
BOOL fCommercial; 
} AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS; }
extern "C" { typedef _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS; }
#line 18457
extern "C" { typedef 
#line 18453
struct _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA { 
DWORD cbSize; 
DWORD dwRegPolicySettings; 
BOOL fCommercial; 
} AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA; }
extern "C" { typedef _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA *PAUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA; }
#line 18486
extern "C" { typedef 
#line 18471
struct _HTTPSPolicyCallbackData { 

union { 
DWORD cbStruct; 
DWORD cbSize; 
}; 

DWORD dwAuthType; 



DWORD fdwChecks; 

WCHAR *pwszServerName; 

} HTTPSPolicyCallbackData; }extern "C" { typedef _HTTPSPolicyCallbackData *PHTTPSPolicyCallbackData; }
extern "C" { typedef _HTTPSPolicyCallbackData SSL_EXTRA_CERT_CHAIN_POLICY_PARA; }extern "C" { typedef _HTTPSPolicyCallbackData *PSSL_EXTRA_CERT_CHAIN_POLICY_PARA; }
#line 18579
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptStringToBinaryA(LPCSTR, DWORD, DWORD, BYTE *, DWORD *, DWORD *, DWORD *); } 
#line 18600
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptStringToBinaryW(LPCWSTR, DWORD, DWORD, BYTE *, DWORD *, DWORD *, DWORD *); } 
#line 18624 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincrypt.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptBinaryToStringA(const BYTE *, DWORD, DWORD, LPSTR, DWORD *); } 
#line 18640
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CryptBinaryToStringW(const BYTE *, DWORD, DWORD, LPWSTR, DWORD *); } 
#line 18734 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincrypt.h"
extern "C" { typedef 
#line 18729
struct _CRYPT_PKCS12_PBE_PARAMS { 

int iIterations; 
ULONG cbSalt; 

} CRYPT_PKCS12_PBE_PARAMS; }
#line 18762
extern "C" { extern __declspec( dllimport ) HCERTSTORE __stdcall PFXImportCertStore(CRYPT_DATA_BLOB *, LPCWSTR, DWORD); } 
#line 18790
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PFXIsPFXBlob(CRYPT_DATA_BLOB *); } 
#line 18808
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PFXVerifyPassword(CRYPT_DATA_BLOB *, LPCWSTR, DWORD); } 
#line 18842
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PFXExportCertStoreEx(HCERTSTORE, CRYPT_DATA_BLOB *, LPCWSTR, void *, DWORD); } 
#line 18869
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PFXExportCertStore(HCERTSTORE, CRYPT_DATA_BLOB *, LPCWSTR, DWORD); } 
#line 18888
extern "C" { typedef void *HCERT_SERVER_OCSP_RESPONSE; }
#line 18917
extern "C" { extern __declspec( dllimport ) HCERT_SERVER_OCSP_RESPONSE __stdcall CertOpenServerOcspResponse(PCCERT_CHAIN_CONTEXT, DWORD, LPVOID); } 
#line 18931
extern "C" { extern __declspec( dllimport ) void __stdcall CertAddRefServerOcspResponse(HCERT_SERVER_OCSP_RESPONSE); } 
#line 18944
extern "C" { extern __declspec( dllimport ) void __stdcall CertCloseServerOcspResponse(HCERT_SERVER_OCSP_RESPONSE, DWORD); } 
#line 18954
extern "C" { typedef struct _CERT_SERVER_OCSP_RESPONSE_CONTEXT CERT_SERVER_OCSP_RESPONSE_CONTEXT; }
extern "C" { typedef _CERT_SERVER_OCSP_RESPONSE_CONTEXT *PCERT_SERVER_OCSP_RESPONSE_CONTEXT; }

extern "C" { typedef const CERT_SERVER_OCSP_RESPONSE_CONTEXT *PCCERT_SERVER_OCSP_RESPONSE_CONTEXT; }

extern "C" { struct _CERT_SERVER_OCSP_RESPONSE_CONTEXT { 
DWORD cbSize; 
BYTE *pbEncodedOcspResponse; 
DWORD cbEncodedOcspResponse; 
}; }
#line 18980
extern "C" { extern __declspec( dllimport ) PCCERT_SERVER_OCSP_RESPONSE_CONTEXT __stdcall CertGetServerOcspResponseContext(HCERT_SERVER_OCSP_RESPONSE, DWORD, LPVOID); } 
#line 18994
extern "C" { extern __declspec( dllimport ) void __stdcall CertAddRefServerOcspResponseContext(PCCERT_SERVER_OCSP_RESPONSE_CONTEXT); } 
#line 19005
extern "C" { extern __declspec( dllimport ) void __stdcall CertFreeServerOcspResponseContext(PCCERT_SERVER_OCSP_RESPONSE_CONTEXT); } 
#line 19061
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CertRetrieveLogoOrBiometricInfo(PCCERT_CONTEXT, LPCSTR, DWORD, DWORD, DWORD, void *, BYTE **, DWORD *, LPWSTR *); } 
#line 19099 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wincrypt.h"
#pragma warning(pop)
#line 70 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winefs.h"
extern "C" { typedef 
#line 55
struct _CERTIFICATE_BLOB { 

DWORD dwCertEncodingType; 
#line 63
DWORD cbData; 




PBYTE pbData; 

} EFS_CERTIFICATE_BLOB; }extern "C" { typedef _CERTIFICATE_BLOB *PEFS_CERTIFICATE_BLOB; }
#line 88
extern "C" { typedef 
#line 76
struct _EFS_HASH_BLOB { 




DWORD cbData; 




PBYTE pbData; 

} EFS_HASH_BLOB; }extern "C" { typedef _EFS_HASH_BLOB *PEFS_HASH_BLOB; }
#line 110
extern "C" { typedef 
#line 98
struct _EFS_RPC_BLOB { 




DWORD cbData; 




PBYTE pbData; 

} EFS_RPC_BLOB; }extern "C" { typedef _EFS_RPC_BLOB *PEFS_RPC_BLOB; }
#line 134 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winefs.h"
extern "C" { typedef 
#line 117
struct _EFS_PIN_BLOB { 




DWORD cbPadding; 




DWORD cbData; 




PBYTE pbData; 

} EFS_PIN_BLOB; }extern "C" { typedef _EFS_PIN_BLOB *PEFS_PIN_BLOB; }
#line 149 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winefs.h"
extern "C" { typedef 
#line 142
struct _EFS_KEY_INFO { 

DWORD dwVersion; 
ULONG Entropy; 
ALG_ID Algorithm; 
ULONG KeyLength; 

} EFS_KEY_INFO; }extern "C" { typedef _EFS_KEY_INFO *PEFS_KEY_INFO; }
#line 162 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winefs.h"
extern "C" { typedef 
#line 156
struct _EFS_DECRYPTION_STATUS_INFO { 

DWORD dwDecryptionError; 
DWORD dwHashOffset; 
DWORD cbHash; 

} EFS_DECRYPTION_STATUS_INFO; }extern "C" { typedef _EFS_DECRYPTION_STATUS_INFO *PEFS_DECRYPTION_STATUS_INFO; }
#line 169
extern "C" { typedef 
#line 164
struct _EFS_ENCRYPTION_STATUS_INFO { 

BOOL bHasCurrentKey; 
DWORD dwEncryptionError; 

} EFS_ENCRYPTION_STATUS_INFO; }extern "C" { typedef _EFS_ENCRYPTION_STATUS_INFO *PEFS_ENCRYPTION_STATUS_INFO; }
#line 181 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winefs.h"
extern "C" { typedef 
#line 177
struct _ENCRYPTION_CERTIFICATE { 
DWORD cbTotalLength; 
SID *pUserSid; 
PEFS_CERTIFICATE_BLOB pCertBlob; 
} ENCRYPTION_CERTIFICATE; }extern "C" { typedef _ENCRYPTION_CERTIFICATE *PENCRYPTION_CERTIFICATE; }
#line 196
extern "C" { typedef 
#line 186
struct _ENCRYPTION_CERTIFICATE_HASH { 
DWORD cbTotalLength; 
SID *pUserSid; 
PEFS_HASH_BLOB pHash; 




LPWSTR lpDisplayInformation; 

} ENCRYPTION_CERTIFICATE_HASH; }extern "C" { typedef _ENCRYPTION_CERTIFICATE_HASH *PENCRYPTION_CERTIFICATE_HASH; }
#line 207
extern "C" { typedef 
#line 198
struct _ENCRYPTION_CERTIFICATE_HASH_LIST { 



DWORD nCert_Hash; 



PENCRYPTION_CERTIFICATE_HASH *pUsers; 
} ENCRYPTION_CERTIFICATE_HASH_LIST; }extern "C" { typedef _ENCRYPTION_CERTIFICATE_HASH_LIST *PENCRYPTION_CERTIFICATE_HASH_LIST; }
#line 220
extern "C" { typedef 
#line 211
struct _ENCRYPTION_CERTIFICATE_LIST { 



DWORD nUsers; 



PENCRYPTION_CERTIFICATE *pUsers; 
} ENCRYPTION_CERTIFICATE_LIST; }extern "C" { typedef _ENCRYPTION_CERTIFICATE_LIST *PENCRYPTION_CERTIFICATE_LIST; }
#line 237
extern "C" { typedef 
#line 230
struct _ENCRYPTED_FILE_METADATA_SIGNATURE { 

DWORD dwEfsAccessType; 
PENCRYPTION_CERTIFICATE_HASH_LIST pCertificatesAdded; 
PENCRYPTION_CERTIFICATE pEncryptionCertificate; 
PEFS_RPC_BLOB pEfsStreamSignature; 

} ENCRYPTED_FILE_METADATA_SIGNATURE; }extern "C" { typedef _ENCRYPTED_FILE_METADATA_SIGNATURE *PENCRYPTED_FILE_METADATA_SIGNATURE; }
#line 253 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winefs.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall QueryUsersOnEncryptedFile(LPCWSTR, PENCRYPTION_CERTIFICATE_HASH_LIST *); } 
#line 262
extern "C" { extern __declspec( dllimport ) DWORD __stdcall QueryRecoveryAgentsOnEncryptedFile(LPCWSTR, PENCRYPTION_CERTIFICATE_HASH_LIST *); } 
#line 271
extern "C" { extern __declspec( dllimport ) DWORD __stdcall RemoveUsersFromEncryptedFile(LPCWSTR, PENCRYPTION_CERTIFICATE_HASH_LIST); } 
#line 279
extern "C" { extern __declspec( dllimport ) DWORD __stdcall AddUsersToEncryptedFile(LPCWSTR, PENCRYPTION_CERTIFICATE_LIST); } 
#line 287
extern "C" { extern __declspec( dllimport ) DWORD __stdcall SetUserFileEncryptionKey(PENCRYPTION_CERTIFICATE); } 
#line 297
extern "C" { extern __declspec( dllimport ) DWORD __stdcall SetUserFileEncryptionKeyEx(PENCRYPTION_CERTIFICATE, DWORD, DWORD, LPVOID); } 
#line 309 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winefs.h"
extern "C" { extern __declspec( dllimport ) void __stdcall FreeEncryptionCertificateHashList(PENCRYPTION_CERTIFICATE_HASH_LIST); } 
#line 316
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EncryptionDisable(LPCWSTR, BOOL); } 
#line 330
extern "C" { extern __declspec( dllimport ) DWORD __stdcall DuplicateEncryptionInfoFile(LPCWSTR, LPCWSTR, DWORD, DWORD, const LPSECURITY_ATTRIBUTES); } 
#line 362 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winefs.h"
extern "C" { extern __declspec( dllimport ) DWORD __stdcall GetEncryptedFileMetadata(LPCWSTR, PDWORD, PBYTE *); } 
#line 371
extern "C" { extern __declspec( dllimport ) DWORD __stdcall SetEncryptedFileMetadata(LPCWSTR, PBYTE, PBYTE, PENCRYPTION_CERTIFICATE_HASH, DWORD, PENCRYPTION_CERTIFICATE_HASH_LIST); } 
#line 383
extern "C" { extern __declspec( dllimport ) void __stdcall FreeEncryptedFileMetadata(PBYTE); } 
#line 17 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wtypes.h"
#pragma warning( disable: 4049 )
#line 24 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\pshpack8.h"
#pragma warning(disable:4103)

#pragma pack ( push, 8 )
#line 33 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\rpcnsip.h"
extern "C" { typedef 
#line 28
struct RPC_IMPORT_CONTEXT_P { 
RPC_NS_HANDLE LookupContext; 
RPC_BINDING_HANDLE ProposedHandle; 
RPC_BINDING_VECTOR *Bindings; 

} RPC_IMPORT_CONTEXT_P, *PRPC_IMPORT_CONTEXT_P; }
#line 41
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcNsGetBuffer(PRPC_MESSAGE); } 
#line 48
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcNsSendReceive(PRPC_MESSAGE, RPC_BINDING_HANDLE *); } 
#line 56
extern "C" { extern __declspec( dllimport ) void __stdcall I_RpcNsRaiseException(PRPC_MESSAGE, RPC_STATUS); } 
#line 64
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_RpcReBindBuffer(PRPC_MESSAGE); } 
#line 71
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_NsServerBindSearch(); } 
#line 78
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall I_NsClientBindSearch(); } 
#line 85
extern "C" { extern __declspec( dllimport ) void __stdcall I_NsClientBindDone(); } 
#line 154 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\rpcndr.h"
extern "C" { typedef unsigned char byte; }
extern "C" { typedef byte cs_byte; }
extern "C" { typedef unsigned char boolean; }
#line 201 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\rpcndr.h"
extern "C" { extern void *__stdcall MIDL_user_allocate(size_t); } 
extern "C" { extern void __stdcall MIDL_user_free(void *); } 



extern "C" { extern void *__stdcall I_RpcDefaultAllocate(handle_t, size_t, void *(*)(size_t)); } 


extern "C" { extern void __stdcall I_RpcDefaultFree(handle_t, void *, void (*)(void *)); } 
#line 235 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\rpcndr.h"
extern "C" { typedef void *NDR_CCONTEXT; }
#line 241
extern "C" { typedef 
#line 238
struct { 
void *pad[2]; 
void *userContext; 
} *NDR_SCONTEXT; }
#line 247
extern "C" { typedef void (__stdcall *NDR_RUNDOWN)(void *); }

extern "C" { typedef void (__stdcall *NDR_NOTIFY_ROUTINE)(void); }
extern "C" { typedef void (__stdcall *NDR_NOTIFY2_ROUTINE)(boolean); }




extern "C" { typedef 
#line 252
struct _SCONTEXT_QUEUE { 
unsigned long NumberOfObjects; 
NDR_SCONTEXT *ArrayOfObjects; 
} SCONTEXT_QUEUE; }extern "C" { typedef _SCONTEXT_QUEUE *PSCONTEXT_QUEUE; }




extern "C" { extern __declspec( dllimport ) RPC_BINDING_HANDLE __stdcall NDRCContextBinding(NDR_CCONTEXT); } 
#line 267
extern "C" { extern __declspec( dllimport ) void __stdcall NDRCContextMarshall(NDR_CCONTEXT, void *); } 
#line 275
extern "C" { extern __declspec( dllimport ) void __stdcall NDRCContextUnmarshall(NDR_CCONTEXT *, RPC_BINDING_HANDLE, void *, unsigned long); } 
#line 285
extern "C" { extern __declspec( dllimport ) void __stdcall NDRCContextUnmarshall2(NDR_CCONTEXT *, RPC_BINDING_HANDLE, void *, unsigned long); } 
#line 295
extern "C" { extern __declspec( dllimport ) void __stdcall NDRSContextMarshall(NDR_SCONTEXT, void *, NDR_RUNDOWN); } 
#line 304
extern "C" { extern __declspec( dllimport ) NDR_SCONTEXT __stdcall NDRSContextUnmarshall(void *, unsigned long); } 
#line 312
extern "C" { extern __declspec( dllimport ) void __stdcall NDRSContextMarshallEx(RPC_BINDING_HANDLE, NDR_SCONTEXT, void *, NDR_RUNDOWN); } 
#line 322
extern "C" { extern __declspec( dllimport ) void __stdcall NDRSContextMarshall2(RPC_BINDING_HANDLE, NDR_SCONTEXT, void *, NDR_RUNDOWN, void *, unsigned long); } 
#line 334
extern "C" { extern __declspec( dllimport ) NDR_SCONTEXT __stdcall NDRSContextUnmarshallEx(RPC_BINDING_HANDLE, void *, unsigned long); } 
#line 343
extern "C" { extern __declspec( dllimport ) NDR_SCONTEXT __stdcall NDRSContextUnmarshall2(RPC_BINDING_HANDLE, void *, unsigned long, void *, unsigned long); } 
#line 354
extern "C" { extern __declspec( dllimport ) void __stdcall RpcSsDestroyClientContext(void **); } 
#line 427 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\rpcndr.h"
extern "C" { typedef unsigned long error_status_t; }
#line 510
struct _MIDL_STUB_MESSAGE; 
struct _MIDL_STUB_DESC; 
struct _FULL_PTR_XLAT_TABLES; 

extern "C" { typedef unsigned char *RPC_BUFPTR; }
extern "C" { typedef unsigned long RPC_LENGTH; }


extern "C" { typedef void (__stdcall *EXPR_EVAL)(_MIDL_STUB_MESSAGE *); }

extern "C" { typedef const unsigned char *PFORMAT_STRING; }
#line 537
extern "C" { typedef 
#line 526
struct ARRAY_INFO { 
long Dimension; 


unsigned long *BufferConformanceMark; 
unsigned long *BufferVarianceMark; 


unsigned long *MaxCountArray; 
unsigned long *OffsetArray; 
unsigned long *ActualCountArray; 
} ARRAY_INFO, *PARRAY_INFO; }


extern "C" { typedef struct _NDR_ASYNC_MESSAGE *PNDR_ASYNC_MESSAGE; }
extern "C" { typedef struct _NDR_CORRELATION_INFO *PNDR_CORRELATION_INFO; }
#line 547
extern "C" { typedef const unsigned char *PFORMAT_STRING; }
extern "C" { typedef struct _MIDL_SYNTAX_INFO MIDL_SYNTAX_INFO; }extern "C" { typedef _MIDL_SYNTAX_INFO *PMIDL_SYNTAX_INFO; }

struct NDR_ALLOC_ALL_NODES_CONTEXT; 
struct NDR_POINTER_QUEUE_STATE; 
struct _NDR_PROC_CONTEXT; 
#line 774 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\rpcndr.h"
extern "C" { typedef 
#line 554 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\rpcndr.h"
struct _MIDL_STUB_MESSAGE { 


PRPC_MESSAGE RpcMsg; 


unsigned char *Buffer; 
#line 566
unsigned char *BufferStart; 
unsigned char *BufferEnd; 
#line 576
unsigned char *BufferMark; 


unsigned long BufferLength; 


unsigned long MemorySize; 


unsigned char *Memory; 


unsigned char IsClient; 
unsigned char Pad; 
unsigned short uFlags2; 


int ReuseBuffer; 


NDR_ALLOC_ALL_NODES_CONTEXT *pAllocAllNodesContext; 
NDR_POINTER_QUEUE_STATE *pPointerQueueState; 
#line 604
int IgnoreEmbeddedPointers; 
#line 610
unsigned char *PointerBufferMark; 




unsigned char CorrDespIncrement; 

unsigned char uFlags; 
unsigned short UniquePtrCount; 
#line 624
ULONG_PTR MaxCount; 
#line 630
unsigned long Offset; 
#line 636
unsigned long ActualCount; 


void *(__stdcall *pfnAllocate)(size_t); 
void (__stdcall *pfnFree)(void *); 
#line 648
unsigned char *StackTop; 
#line 654
unsigned char *pPresentedType; 
unsigned char *pTransmitType; 
#line 665
handle_t SavedHandle; 




const _MIDL_STUB_DESC *StubDesc; 




_FULL_PTR_XLAT_TABLES *FullPtrXlatTables; 
unsigned long FullPtrRefId; 

unsigned long PointerLength; 

int fInDontFree:1; 
int fDontCallFreeInst:1; 
int fInOnlyParam:1; 
int fHasReturn:1; 
int fHasExtensions:1; 
int fHasNewCorrDesc:1; 
int fIsIn:1; 
int fIsOut:1; 
int fIsOicf:1; 
int fBufferValid:1; 
int fHasMemoryValidateCallback:1; 
int fInFree:1; 
int fNeedMCCP:1; 
int fUnused:3; 
int fUnused2:16; 


unsigned long dwDestContext; 
void *pvDestContext; 

NDR_SCONTEXT *SavedContextHandles; 

long ParamNumber; 

struct __declspec( novtable ) __declspec(uuid("d5f56b60-593b-101a-b569-08002b2dbf7a")) IRpcChannelBuffer *pRpcChannelBuffer; 

PARRAY_INFO pArrayInfo; 
unsigned long *SizePtrCountArray; 
unsigned long *SizePtrOffsetArray; 
unsigned long *SizePtrLengthArray; 




void *pArgQueue; 

unsigned long dwStubPhase; 

void *LowStackMark; 




PNDR_ASYNC_MESSAGE pAsyncMsg; 
PNDR_CORRELATION_INFO pCorrInfo; 
unsigned char *pCorrMemory; 

void *pMemoryList; 
#line 740
INT_PTR pCSInfo; 

unsigned char *ConformanceMark; 
unsigned char *VarianceMark; 
#line 748 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\rpcndr.h"
INT_PTR Unused; 
#line 751 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\rpcndr.h"
_NDR_PROC_CONTEXT *pContext; 
#line 763
void *ContextHandleHash; 
void *pUserMarshalList; 
INT_PTR Reserved51_3; 
INT_PTR Reserved51_4; 
INT_PTR Reserved51_5; 
#line 774 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\rpcndr.h"
} MIDL_STUB_MESSAGE; }extern "C" { typedef _MIDL_STUB_MESSAGE *PMIDL_STUB_MESSAGE; }


extern "C" { typedef _MIDL_STUB_MESSAGE MIDL_STUB_MESSAGE; }extern "C" { typedef _MIDL_STUB_MESSAGE *PMIDL_STUB_MESSAGE; }
#line 783
extern "C" { typedef void *(__stdcall *GENERIC_BINDING_ROUTINE)(void *); }


extern "C" { typedef void (__stdcall *GENERIC_UNBIND_ROUTINE)(void *, unsigned char *); }
#line 793
extern "C" { typedef 
#line 789
struct _GENERIC_BINDING_ROUTINE_PAIR { 

GENERIC_BINDING_ROUTINE pfnBind; 
GENERIC_UNBIND_ROUTINE pfnUnbind; 
} GENERIC_BINDING_ROUTINE_PAIR; }extern "C" { typedef _GENERIC_BINDING_ROUTINE_PAIR *PGENERIC_BINDING_ROUTINE_PAIR; }
#line 801
extern "C" { typedef 
#line 795
struct __GENERIC_BINDING_INFO { 

void *pObj; 
unsigned Size; 
GENERIC_BINDING_ROUTINE pfnBind; 
GENERIC_UNBIND_ROUTINE pfnUnbind; 
} GENERIC_BINDING_INFO; }extern "C" { typedef __GENERIC_BINDING_INFO *PGENERIC_BINDING_INFO; }
#line 814 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\rpcndr.h"
extern "C" { typedef void (__stdcall *XMIT_HELPER_ROUTINE)(PMIDL_STUB_MESSAGE); }
#line 823
extern "C" { typedef 
#line 817
struct _XMIT_ROUTINE_QUINTUPLE { 

XMIT_HELPER_ROUTINE pfnTranslateToXmit; 
XMIT_HELPER_ROUTINE pfnTranslateFromXmit; 
XMIT_HELPER_ROUTINE pfnFreeXmit; 
XMIT_HELPER_ROUTINE pfnFreeInst; 
} XMIT_ROUTINE_QUINTUPLE; }extern "C" { typedef _XMIT_ROUTINE_QUINTUPLE *PXMIT_ROUTINE_QUINTUPLE; }


extern "C" { typedef unsigned long (__stdcall *USER_MARSHAL_SIZING_ROUTINE)(unsigned long *, unsigned long, void *); }
#line 832
extern "C" { typedef unsigned char *(__stdcall *USER_MARSHAL_MARSHALLING_ROUTINE)(unsigned long *, unsigned char *, void *); }
#line 838
extern "C" { typedef unsigned char *(__stdcall *USER_MARSHAL_UNMARSHALLING_ROUTINE)(unsigned long *, unsigned char *, void *); }




extern "C" { typedef void (__stdcall *USER_MARSHAL_FREEING_ROUTINE)(unsigned long *, void *); }
#line 853
extern "C" { typedef 
#line 847
struct _USER_MARSHAL_ROUTINE_QUADRUPLE { 

USER_MARSHAL_SIZING_ROUTINE pfnBufferSize; 
USER_MARSHAL_MARSHALLING_ROUTINE pfnMarshall; 
USER_MARSHAL_UNMARSHALLING_ROUTINE pfnUnmarshall; 
USER_MARSHAL_FREEING_ROUTINE pfnFree; 
} USER_MARSHAL_ROUTINE_QUADRUPLE; }
#line 863
extern "C" { typedef 
#line 857
enum _USER_MARSHAL_CB_TYPE { 

USER_MARSHAL_CB_BUFFER_SIZE, 
USER_MARSHAL_CB_MARSHALL, 
USER_MARSHAL_CB_UNMARSHALL, 
USER_MARSHAL_CB_FREE
} USER_MARSHAL_CB_TYPE; }
#line 874
extern "C" { typedef 
#line 865
struct _USER_MARSHAL_CB { 

unsigned long Flags; 
PMIDL_STUB_MESSAGE pStubMsg; 
PFORMAT_STRING pReserve; 
unsigned long Signature; 
USER_MARSHAL_CB_TYPE CBType; 
PFORMAT_STRING pFormat; 
PFORMAT_STRING pTypeFormat; 
} USER_MARSHAL_CB; }
#line 888
extern "C" { typedef 
#line 884
struct _MALLOC_FREE_STRUCT { 

void *(__stdcall *pfnAllocate)(size_t); 
void (__stdcall *pfnFree)(void *); 
} MALLOC_FREE_STRUCT; }
#line 894
extern "C" { typedef 
#line 890
struct _COMM_FAULT_OFFSETS { 

short CommOffset; 
short FaultOffset; 
} COMM_FAULT_OFFSETS; }
#line 905
extern "C" { typedef 
#line 900
enum _IDL_CS_CONVERT { 

IDL_CS_NO_CONVERT, 
IDL_CS_IN_PLACE_CONVERT, 
IDL_CS_NEW_BUFFER_CONVERT
} IDL_CS_CONVERT; }


extern "C" { typedef void (__stdcall *CS_TYPE_NET_SIZE_ROUTINE)(RPC_BINDING_HANDLE, unsigned long, unsigned long, IDL_CS_CONVERT *, unsigned long *, error_status_t *); }
#line 917
extern "C" { typedef void (__stdcall *CS_TYPE_LOCAL_SIZE_ROUTINE)(RPC_BINDING_HANDLE, unsigned long, unsigned long, IDL_CS_CONVERT *, unsigned long *, error_status_t *); }
#line 926
extern "C" { typedef void (__stdcall *CS_TYPE_TO_NETCS_ROUTINE)(RPC_BINDING_HANDLE, unsigned long, void *, unsigned long, byte *, unsigned long *, error_status_t *); }
#line 936
extern "C" { typedef void (__stdcall *CS_TYPE_FROM_NETCS_ROUTINE)(RPC_BINDING_HANDLE, unsigned long, byte *, unsigned long, unsigned long, void *, unsigned long *, error_status_t *); }
#line 947
extern "C" { typedef void (__stdcall *CS_TAG_GETTING_ROUTINE)(RPC_BINDING_HANDLE, int, unsigned long *, unsigned long *, unsigned long *, error_status_t *); }
#line 956
extern "C" { extern void __stdcall RpcCsGetTags(RPC_BINDING_HANDLE, int, unsigned long *, unsigned long *, unsigned long *, error_status_t *); } 
#line 970
extern "C" { typedef 
#line 964
struct _NDR_CS_SIZE_CONVERT_ROUTINES { 

CS_TYPE_NET_SIZE_ROUTINE pfnNetSize; 
CS_TYPE_TO_NETCS_ROUTINE pfnToNetCs; 
CS_TYPE_LOCAL_SIZE_ROUTINE pfnLocalSize; 
CS_TYPE_FROM_NETCS_ROUTINE pfnFromNetCs; 
} NDR_CS_SIZE_CONVERT_ROUTINES; }
#line 976
extern "C" { typedef 
#line 972
struct _NDR_CS_ROUTINES { 

NDR_CS_SIZE_CONVERT_ROUTINES *pSizeConvertRoutines; 
CS_TAG_GETTING_ROUTINE *pTagGettingRoutines; 
} NDR_CS_ROUTINES; }
#line 982
extern "C" { typedef 
#line 978
struct _NDR_EXPR_DESC { 

const unsigned short *pOffset; 
PFORMAT_STRING pFormatExpr; 
} NDR_EXPR_DESC; }
#line 1039
extern "C" { typedef 
#line 987
struct _MIDL_STUB_DESC { 

void *RpcInterfaceInformation; 

void *(__stdcall *pfnAllocate)(size_t); 
void (__stdcall *pfnFree)(void *); 


union { 
handle_t *pAutoHandle; 
handle_t *pPrimitiveHandle; 
PGENERIC_BINDING_INFO pGenericBindingInfo; 
} IMPLICIT_HANDLE_INFO; 

const NDR_RUNDOWN *apfnNdrRundownRoutines; 
const GENERIC_BINDING_ROUTINE_PAIR *aGenericBindingRoutinePairs; 
const EXPR_EVAL *apfnExprEval; 
const XMIT_ROUTINE_QUINTUPLE *aXmitQuintuple; 

const unsigned char *pFormatTypes; 

int fCheckBounds; 


unsigned long Version; 

MALLOC_FREE_STRUCT *pMallocFreeStruct; 

long MIDLVersion; 

const COMM_FAULT_OFFSETS *CommFaultOffsets; 


const USER_MARSHAL_ROUTINE_QUADRUPLE *aUserMarshalQuadruple; 


const NDR_NOTIFY_ROUTINE *NotifyRoutineTable; 
#line 1029
ULONG_PTR mFlags; 


const NDR_CS_ROUTINES *CsRoutineTables; 

void *ProxyServerInfo; 
const NDR_EXPR_DESC *pExprInfo; 



} MIDL_STUB_DESC; }


extern "C" { typedef const MIDL_STUB_DESC *PMIDL_STUB_DESC; }

extern "C" { typedef void *PMIDL_XMIT_TYPE; }
#line 1051
#pragma warning(push)
#line 1053 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\rpcndr.h"
#pragma warning( disable:4200 )
#line 1059 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\rpcndr.h"
extern "C" { typedef 
#line 1055
struct _MIDL_FORMAT_STRING { 

short Pad; 
unsigned char Format[]; 
} MIDL_FORMAT_STRING; }


#pragma warning(pop)
#line 1071 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\rpcndr.h"
extern "C" { typedef void (__stdcall *STUB_THUNK)(PMIDL_STUB_MESSAGE); }


extern "C" { typedef long (__stdcall *SERVER_ROUTINE)(void); }
#line 1092 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\rpcndr.h"
extern "C" { typedef 
#line 1082
struct _MIDL_SERVER_INFO_ { 

PMIDL_STUB_DESC pStubDesc; 
const SERVER_ROUTINE *DispatchTable; 
PFORMAT_STRING ProcString; 
const unsigned short *FmtStringOffset; 
const STUB_THUNK *ThunkTable; 
PRPC_SYNTAX_IDENTIFIER pTransferSyntax; 
ULONG_PTR nCount; 
PMIDL_SYNTAX_INFO pSyntaxInfo; 
} MIDL_SERVER_INFO; }extern "C" { typedef _MIDL_SERVER_INFO_ *PMIDL_SERVER_INFO; }
#line 1107
extern "C" { typedef 
#line 1099
struct _MIDL_STUBLESS_PROXY_INFO { 

PMIDL_STUB_DESC pStubDesc; 
PFORMAT_STRING ProcFormatString; 
const unsigned short *FormatStringOffset; 
PRPC_SYNTAX_IDENTIFIER pTransferSyntax; 
ULONG_PTR nCount; 
PMIDL_SYNTAX_INFO pSyntaxInfo; 
} MIDL_STUBLESS_PROXY_INFO; }

extern "C" { typedef MIDL_STUBLESS_PROXY_INFO *PMIDL_STUBLESS_PROXY_INFO; }
#line 1124
extern "C" { typedef 
#line 1114
struct _MIDL_SYNTAX_INFO { 

RPC_SYNTAX_IDENTIFIER TransferSyntax; 
RPC_DISPATCH_TABLE *DispatchTable; 
PFORMAT_STRING ProcString; 
const unsigned short *FmtStringOffset; 
PFORMAT_STRING TypeString; 
const void *aUserMarshalQuadruple; 
ULONG_PTR pReserved1; 
ULONG_PTR pReserved2; 
} MIDL_SYNTAX_INFO; }extern "C" { typedef _MIDL_SYNTAX_INFO *PMIDL_SYNTAX_INFO; }

extern "C" { typedef unsigned short *PARAM_OFFSETTABLE; }extern "C" { typedef unsigned short *PPARAM_OFFSETTABLE; }
#line 1135
extern "C" { typedef 
#line 1131
union _CLIENT_CALL_RETURN { 

void *Pointer; 
LONG_PTR Simple; 
} CLIENT_CALL_RETURN; }
#line 1142
extern "C" { typedef 
#line 1139
enum { 
XLAT_SERVER = 1, 
XLAT_CLIENT
} XLAT_SIDE; }
#line 1150
extern "C" { typedef 
#line 1144
struct _FULL_PTR_XLAT_TABLES { 

void *RefIdToPointer; 
void *PointerToRefId; 
unsigned long NextRefId; 
XLAT_SIDE XlatSide; 
} FULL_PTR_XLAT_TABLES; }extern "C" { typedef _FULL_PTR_XLAT_TABLES *PFULL_PTR_XLAT_TABLES; }
#line 1157
extern "C" { extern RPC_STATUS __stdcall NdrClientGetSupportedSyntaxes(RPC_CLIENT_INTERFACE *, unsigned long *, MIDL_SYNTAX_INFO **); } 
#line 1164
extern "C" { extern RPC_STATUS __stdcall NdrServerGetSupportedSyntaxes(RPC_SERVER_INTERFACE *, unsigned long *, MIDL_SYNTAX_INFO **, unsigned long *); } 
#line 1177
extern "C" { extern __declspec( dllimport ) void __stdcall NdrSimpleTypeMarshall(PMIDL_STUB_MESSAGE, unsigned char *, unsigned char); } 
#line 1186
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrPointerMarshall(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1195
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrCsArrayMarshall(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1204
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrCsTagMarshall(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1215
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrSimpleStructMarshall(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1224
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrConformantStructMarshall(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1233
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrConformantVaryingStructMarshall(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1242
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrComplexStructMarshall(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1253
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrFixedArrayMarshall(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1262
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrConformantArrayMarshall(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1271
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrConformantVaryingArrayMarshall(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1280
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrVaryingArrayMarshall(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1289
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrComplexArrayMarshall(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1300
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrNonConformantStringMarshall(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1309
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrConformantStringMarshall(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1320
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrEncapsulatedUnionMarshall(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1329
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrNonEncapsulatedUnionMarshall(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1340
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrByteCountPointerMarshall(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1351
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrXmitOrRepAsMarshall(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1362
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrUserMarshalMarshall(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1373
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrInterfacePointerMarshall(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1384
extern "C" { extern __declspec( dllimport ) void __stdcall NdrClientContextMarshall(PMIDL_STUB_MESSAGE, NDR_CCONTEXT, int); } 
#line 1393
extern "C" { extern __declspec( dllimport ) void __stdcall NdrServerContextMarshall(PMIDL_STUB_MESSAGE, NDR_SCONTEXT, NDR_RUNDOWN); } 
#line 1402
extern "C" { extern __declspec( dllimport ) void __stdcall NdrServerContextNewMarshall(PMIDL_STUB_MESSAGE, NDR_SCONTEXT, NDR_RUNDOWN, PFORMAT_STRING); } 
#line 1416
extern "C" { extern __declspec( dllimport ) void __stdcall NdrSimpleTypeUnmarshall(PMIDL_STUB_MESSAGE, unsigned char *, unsigned char); } 
#line 1425
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrCsArrayUnmarshall(PMIDL_STUB_MESSAGE, unsigned char **, PFORMAT_STRING, unsigned char); } 
#line 1435
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrCsTagUnmarshall(PMIDL_STUB_MESSAGE, unsigned char **, PFORMAT_STRING, unsigned char); } 
#line 1444
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrRangeUnmarshall(PMIDL_STUB_MESSAGE, unsigned char **, PFORMAT_STRING, unsigned char); } 
#line 1454
extern "C" { extern __declspec( dllimport ) void __stdcall NdrCorrelationInitialize(PMIDL_STUB_MESSAGE, void *, unsigned long, unsigned long); } 
#line 1464
extern "C" { extern __declspec( dllimport ) void __stdcall NdrCorrelationPass(PMIDL_STUB_MESSAGE); } 
#line 1471
extern "C" { extern __declspec( dllimport ) void __stdcall NdrCorrelationFree(PMIDL_STUB_MESSAGE); } 
#line 1478
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrPointerUnmarshall(PMIDL_STUB_MESSAGE, unsigned char **, PFORMAT_STRING, unsigned char); } 
#line 1490
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrSimpleStructUnmarshall(PMIDL_STUB_MESSAGE, unsigned char **, PFORMAT_STRING, unsigned char); } 
#line 1500
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrConformantStructUnmarshall(PMIDL_STUB_MESSAGE, unsigned char **, PFORMAT_STRING, unsigned char); } 
#line 1510
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrConformantVaryingStructUnmarshall(PMIDL_STUB_MESSAGE, unsigned char **, PFORMAT_STRING, unsigned char); } 
#line 1520
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrComplexStructUnmarshall(PMIDL_STUB_MESSAGE, unsigned char **, PFORMAT_STRING, unsigned char); } 
#line 1532
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrFixedArrayUnmarshall(PMIDL_STUB_MESSAGE, unsigned char **, PFORMAT_STRING, unsigned char); } 
#line 1542
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrConformantArrayUnmarshall(PMIDL_STUB_MESSAGE, unsigned char **, PFORMAT_STRING, unsigned char); } 
#line 1552
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrConformantVaryingArrayUnmarshall(PMIDL_STUB_MESSAGE, unsigned char **, PFORMAT_STRING, unsigned char); } 
#line 1562
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrVaryingArrayUnmarshall(PMIDL_STUB_MESSAGE, unsigned char **, PFORMAT_STRING, unsigned char); } 
#line 1572
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrComplexArrayUnmarshall(PMIDL_STUB_MESSAGE, unsigned char **, PFORMAT_STRING, unsigned char); } 
#line 1584
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrNonConformantStringUnmarshall(PMIDL_STUB_MESSAGE, unsigned char **, PFORMAT_STRING, unsigned char); } 
#line 1594
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrConformantStringUnmarshall(PMIDL_STUB_MESSAGE, unsigned char **, PFORMAT_STRING, unsigned char); } 
#line 1606
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrEncapsulatedUnionUnmarshall(PMIDL_STUB_MESSAGE, unsigned char **, PFORMAT_STRING, unsigned char); } 
#line 1616
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrNonEncapsulatedUnionUnmarshall(PMIDL_STUB_MESSAGE, unsigned char **, PFORMAT_STRING, unsigned char); } 
#line 1628
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrByteCountPointerUnmarshall(PMIDL_STUB_MESSAGE, unsigned char **, PFORMAT_STRING, unsigned char); } 
#line 1640
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrXmitOrRepAsUnmarshall(PMIDL_STUB_MESSAGE, unsigned char **, PFORMAT_STRING, unsigned char); } 
#line 1652
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrUserMarshalUnmarshall(PMIDL_STUB_MESSAGE, unsigned char **, PFORMAT_STRING, unsigned char); } 
#line 1664
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrInterfacePointerUnmarshall(PMIDL_STUB_MESSAGE, unsigned char **, PFORMAT_STRING, unsigned char); } 
#line 1676
extern "C" { extern __declspec( dllimport ) void __stdcall NdrClientContextUnmarshall(PMIDL_STUB_MESSAGE, NDR_CCONTEXT *, RPC_BINDING_HANDLE); } 
#line 1685
extern "C" { extern __declspec( dllimport ) NDR_SCONTEXT __stdcall NdrServerContextUnmarshall(PMIDL_STUB_MESSAGE); } 
#line 1694
extern "C" { extern __declspec( dllimport ) NDR_SCONTEXT __stdcall NdrContextHandleInitialize(PMIDL_STUB_MESSAGE, PFORMAT_STRING); } 
#line 1702
extern "C" { extern __declspec( dllimport ) NDR_SCONTEXT __stdcall NdrServerContextNewUnmarshall(PMIDL_STUB_MESSAGE, PFORMAT_STRING); } 
#line 1714
extern "C" { extern __declspec( dllimport ) void __stdcall NdrPointerBufferSize(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1723
extern "C" { extern __declspec( dllimport ) void __stdcall NdrCsArrayBufferSize(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1732
extern "C" { extern __declspec( dllimport ) void __stdcall NdrCsTagBufferSize(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1743
extern "C" { extern __declspec( dllimport ) void __stdcall NdrSimpleStructBufferSize(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1752
extern "C" { extern __declspec( dllimport ) void __stdcall NdrConformantStructBufferSize(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1761
extern "C" { extern __declspec( dllimport ) void __stdcall NdrConformantVaryingStructBufferSize(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1770
extern "C" { extern __declspec( dllimport ) void __stdcall NdrComplexStructBufferSize(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1781
extern "C" { extern __declspec( dllimport ) void __stdcall NdrFixedArrayBufferSize(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1790
extern "C" { extern __declspec( dllimport ) void __stdcall NdrConformantArrayBufferSize(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1799
extern "C" { extern __declspec( dllimport ) void __stdcall NdrConformantVaryingArrayBufferSize(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1808
extern "C" { extern __declspec( dllimport ) void __stdcall NdrVaryingArrayBufferSize(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1817
extern "C" { extern __declspec( dllimport ) void __stdcall NdrComplexArrayBufferSize(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1828
extern "C" { extern __declspec( dllimport ) void __stdcall NdrConformantStringBufferSize(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1837
extern "C" { extern __declspec( dllimport ) void __stdcall NdrNonConformantStringBufferSize(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1848
extern "C" { extern __declspec( dllimport ) void __stdcall NdrEncapsulatedUnionBufferSize(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1857
extern "C" { extern __declspec( dllimport ) void __stdcall NdrNonEncapsulatedUnionBufferSize(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1868
extern "C" { extern __declspec( dllimport ) void __stdcall NdrByteCountPointerBufferSize(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1879
extern "C" { extern __declspec( dllimport ) void __stdcall NdrXmitOrRepAsBufferSize(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1890
extern "C" { extern __declspec( dllimport ) void __stdcall NdrUserMarshalBufferSize(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1901
extern "C" { extern __declspec( dllimport ) void __stdcall NdrInterfacePointerBufferSize(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1912
extern "C" { extern __declspec( dllimport ) void __stdcall NdrContextHandleSize(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 1925
extern "C" { extern __declspec( dllimport ) unsigned long __stdcall NdrPointerMemorySize(PMIDL_STUB_MESSAGE, PFORMAT_STRING); } 
#line 1933
extern "C" { extern __declspec( dllimport ) unsigned long __stdcall NdrContextHandleMemorySize(PMIDL_STUB_MESSAGE, PFORMAT_STRING); } 
#line 1944
extern "C" { extern __declspec( dllimport ) unsigned long __stdcall NdrCsArrayMemorySize(PMIDL_STUB_MESSAGE, PFORMAT_STRING); } 
#line 1952
extern "C" { extern __declspec( dllimport ) unsigned long __stdcall NdrCsTagMemorySize(PMIDL_STUB_MESSAGE, PFORMAT_STRING); } 
#line 1962
extern "C" { extern __declspec( dllimport ) unsigned long __stdcall NdrSimpleStructMemorySize(PMIDL_STUB_MESSAGE, PFORMAT_STRING); } 
#line 1970
extern "C" { extern __declspec( dllimport ) unsigned long __stdcall NdrConformantStructMemorySize(PMIDL_STUB_MESSAGE, PFORMAT_STRING); } 
#line 1978
extern "C" { extern __declspec( dllimport ) unsigned long __stdcall NdrConformantVaryingStructMemorySize(PMIDL_STUB_MESSAGE, PFORMAT_STRING); } 
#line 1986
extern "C" { extern __declspec( dllimport ) unsigned long __stdcall NdrComplexStructMemorySize(PMIDL_STUB_MESSAGE, PFORMAT_STRING); } 
#line 1996
extern "C" { extern __declspec( dllimport ) unsigned long __stdcall NdrFixedArrayMemorySize(PMIDL_STUB_MESSAGE, PFORMAT_STRING); } 
#line 2004
extern "C" { extern __declspec( dllimport ) unsigned long __stdcall NdrConformantArrayMemorySize(PMIDL_STUB_MESSAGE, PFORMAT_STRING); } 
#line 2012
extern "C" { extern __declspec( dllimport ) unsigned long __stdcall NdrConformantVaryingArrayMemorySize(PMIDL_STUB_MESSAGE, PFORMAT_STRING); } 
#line 2020
extern "C" { extern __declspec( dllimport ) unsigned long __stdcall NdrVaryingArrayMemorySize(PMIDL_STUB_MESSAGE, PFORMAT_STRING); } 
#line 2028
extern "C" { extern __declspec( dllimport ) unsigned long __stdcall NdrComplexArrayMemorySize(PMIDL_STUB_MESSAGE, PFORMAT_STRING); } 
#line 2038
extern "C" { extern __declspec( dllimport ) unsigned long __stdcall NdrConformantStringMemorySize(PMIDL_STUB_MESSAGE, PFORMAT_STRING); } 
#line 2046
extern "C" { extern __declspec( dllimport ) unsigned long __stdcall NdrNonConformantStringMemorySize(PMIDL_STUB_MESSAGE, PFORMAT_STRING); } 
#line 2056
extern "C" { extern __declspec( dllimport ) unsigned long __stdcall NdrEncapsulatedUnionMemorySize(PMIDL_STUB_MESSAGE, PFORMAT_STRING); } 
#line 2064
extern "C" { extern __declspec( dllimport ) unsigned long __stdcall NdrNonEncapsulatedUnionMemorySize(PMIDL_STUB_MESSAGE, PFORMAT_STRING); } 
#line 2074
extern "C" { extern __declspec( dllimport ) unsigned long __stdcall NdrXmitOrRepAsMemorySize(PMIDL_STUB_MESSAGE, PFORMAT_STRING); } 
#line 2084
extern "C" { extern __declspec( dllimport ) unsigned long __stdcall NdrUserMarshalMemorySize(PMIDL_STUB_MESSAGE, PFORMAT_STRING); } 
#line 2094
extern "C" { extern __declspec( dllimport ) unsigned long __stdcall NdrInterfacePointerMemorySize(PMIDL_STUB_MESSAGE, PFORMAT_STRING); } 
#line 2106
extern "C" { extern __declspec( dllimport ) void __stdcall NdrPointerFree(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 2115
extern "C" { extern __declspec( dllimport ) void __stdcall NdrCsArrayFree(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 2126
extern "C" { extern __declspec( dllimport ) void __stdcall NdrSimpleStructFree(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 2135
extern "C" { extern __declspec( dllimport ) void __stdcall NdrConformantStructFree(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 2144
extern "C" { extern __declspec( dllimport ) void __stdcall NdrConformantVaryingStructFree(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 2153
extern "C" { extern __declspec( dllimport ) void __stdcall NdrComplexStructFree(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 2164
extern "C" { extern __declspec( dllimport ) void __stdcall NdrFixedArrayFree(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 2173
extern "C" { extern __declspec( dllimport ) void __stdcall NdrConformantArrayFree(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 2182
extern "C" { extern __declspec( dllimport ) void __stdcall NdrConformantVaryingArrayFree(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 2191
extern "C" { extern __declspec( dllimport ) void __stdcall NdrVaryingArrayFree(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 2200
extern "C" { extern __declspec( dllimport ) void __stdcall NdrComplexArrayFree(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 2211
extern "C" { extern __declspec( dllimport ) void __stdcall NdrEncapsulatedUnionFree(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 2220
extern "C" { extern __declspec( dllimport ) void __stdcall NdrNonEncapsulatedUnionFree(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 2231
extern "C" { extern __declspec( dllimport ) void __stdcall NdrByteCountPointerFree(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 2242
extern "C" { extern __declspec( dllimport ) void __stdcall NdrXmitOrRepAsFree(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 2253
extern "C" { extern __declspec( dllimport ) void __stdcall NdrUserMarshalFree(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 2264
extern "C" { extern __declspec( dllimport ) void __stdcall NdrInterfacePointerFree(PMIDL_STUB_MESSAGE, unsigned char *, PFORMAT_STRING); } 
#line 2277
extern "C" { extern __declspec( dllimport ) void __stdcall NdrConvert2(PMIDL_STUB_MESSAGE, PFORMAT_STRING, long); } 
#line 2286
extern "C" { extern __declspec( dllimport ) void __stdcall NdrConvert(PMIDL_STUB_MESSAGE, PFORMAT_STRING); } 
#line 2307
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrUserMarshalSimpleTypeConvert(unsigned long *, unsigned char *, unsigned char); } 
#line 2320
extern "C" { extern __declspec( dllimport ) void __stdcall NdrClientInitializeNew(PRPC_MESSAGE, PMIDL_STUB_MESSAGE, PMIDL_STUB_DESC, unsigned); } 
#line 2330
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrServerInitializeNew(PRPC_MESSAGE, PMIDL_STUB_MESSAGE, PMIDL_STUB_DESC); } 
#line 2339
extern "C" { extern __declspec( dllimport ) void __stdcall NdrServerInitializePartial(PRPC_MESSAGE, PMIDL_STUB_MESSAGE, PMIDL_STUB_DESC, unsigned long); } 
#line 2349
extern "C" { extern __declspec( dllimport ) void __stdcall NdrClientInitialize(PRPC_MESSAGE, PMIDL_STUB_MESSAGE, PMIDL_STUB_DESC, unsigned); } 
#line 2359
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrServerInitialize(PRPC_MESSAGE, PMIDL_STUB_MESSAGE, PMIDL_STUB_DESC); } 
#line 2368
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrServerInitializeUnmarshall(PMIDL_STUB_MESSAGE, PMIDL_STUB_DESC, PRPC_MESSAGE); } 
#line 2377
extern "C" { extern __declspec( dllimport ) void __stdcall NdrServerInitializeMarshall(PRPC_MESSAGE, PMIDL_STUB_MESSAGE); } 
#line 2385
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrGetBuffer(PMIDL_STUB_MESSAGE, unsigned long, RPC_BINDING_HANDLE); } 
#line 2394
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrNsGetBuffer(PMIDL_STUB_MESSAGE, unsigned long, RPC_BINDING_HANDLE); } 
#line 2403
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrSendReceive(PMIDL_STUB_MESSAGE, unsigned char *); } 
#line 2411
extern "C" { extern __declspec( dllimport ) unsigned char *__stdcall NdrNsSendReceive(PMIDL_STUB_MESSAGE, unsigned char *, RPC_BINDING_HANDLE *); } 
#line 2420
extern "C" { extern __declspec( dllimport ) void __stdcall NdrFreeBuffer(PMIDL_STUB_MESSAGE); } 
#line 2427
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall NdrGetDcomProtocolVersion(PMIDL_STUB_MESSAGE, RPC_VERSION *); } 
#line 2439
extern "C" { extern CLIENT_CALL_RETURN __cdecl NdrClientCall2(PMIDL_STUB_DESC, PFORMAT_STRING, ...); } 
#line 2447
extern "C" { extern CLIENT_CALL_RETURN __cdecl NdrClientCall(PMIDL_STUB_DESC, PFORMAT_STRING, ...); } 
#line 2454
extern "C" { extern CLIENT_CALL_RETURN __cdecl NdrAsyncClientCall(PMIDL_STUB_DESC, PFORMAT_STRING, ...); } 
#line 2461
extern "C" { extern CLIENT_CALL_RETURN __cdecl NdrDcomAsyncClientCall(PMIDL_STUB_DESC, PFORMAT_STRING, ...); } 
#line 2473
extern "C" { typedef 
#line 2468
enum { 
STUB_UNMARSHAL, 
STUB_CALL_SERVER, 
STUB_MARSHAL, 
STUB_CALL_SERVER_NO_HRESULT
} STUB_PHASE; }
#line 2481
extern "C" { typedef 
#line 2475
enum { 
PROXY_CALCSIZE, 
PROXY_GETBUFFER, 
PROXY_MARSHAL, 
PROXY_SENDRECEIVE, 
PROXY_UNMARSHAL
} PROXY_PHASE; }

struct __declspec( novtable ) __declspec(uuid("d5f56afc-593b-101a-b569-08002b2dbf7a")) IRpcStubBuffer; 
#line 2489
extern "C" { extern __declspec( dllimport ) void __stdcall NdrAsyncServerCall(PRPC_MESSAGE); } 
#line 2497
extern "C" { extern __declspec( dllimport ) long __stdcall NdrAsyncStubCall(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, unsigned long *); } 
#line 2508
extern "C" { extern __declspec( dllimport ) long __stdcall NdrDcomAsyncStubCall(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, unsigned long *); } 
#line 2518
extern "C" { extern __declspec( dllimport ) long __stdcall NdrStubCall2(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, unsigned long *); } 
#line 2528
extern "C" { extern __declspec( dllimport ) void __stdcall NdrServerCall2(PRPC_MESSAGE); } 
#line 2535
extern "C" { extern __declspec( dllimport ) long __stdcall NdrStubCall(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, unsigned long *); } 
#line 2545
extern "C" { extern __declspec( dllimport ) void __stdcall NdrServerCall(PRPC_MESSAGE); } 
#line 2552
extern "C" { extern __declspec( dllimport ) int __stdcall NdrServerUnmarshall(IRpcChannelBuffer *, PRPC_MESSAGE, PMIDL_STUB_MESSAGE, PMIDL_STUB_DESC, PFORMAT_STRING, void *); } 
#line 2564
extern "C" { extern __declspec( dllimport ) void __stdcall NdrServerMarshall(IRpcStubBuffer *, IRpcChannelBuffer *, PMIDL_STUB_MESSAGE, PFORMAT_STRING); } 
#line 2576
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall NdrMapCommAndFaultStatus(PMIDL_STUB_MESSAGE, unsigned long *, unsigned long *, RPC_STATUS); } 
#line 2589
extern "C" { typedef void *RPC_SS_THREAD_HANDLE; }


extern "C" { typedef void *__stdcall RPC_CLIENT_ALLOC(size_t); }




extern "C" { typedef void __stdcall RPC_CLIENT_FREE(void *); }
#line 2608
extern "C" { extern __declspec( dllimport ) void *__stdcall RpcSsAllocate(size_t); } 
#line 2615
extern "C" { extern __declspec( dllimport ) void __stdcall RpcSsDisableAllocate(); } 
#line 2622
extern "C" { extern __declspec( dllimport ) void __stdcall RpcSsEnableAllocate(); } 
#line 2629
extern "C" { extern __declspec( dllimport ) void __stdcall RpcSsFree(void *); } 
#line 2636
extern "C" { extern __declspec( dllimport ) RPC_SS_THREAD_HANDLE __stdcall RpcSsGetThreadHandle(); } 
#line 2643
extern "C" { extern __declspec( dllimport ) void __stdcall RpcSsSetClientAllocFree(RPC_CLIENT_ALLOC *, RPC_CLIENT_FREE *); } 
#line 2651
extern "C" { extern __declspec( dllimport ) void __stdcall RpcSsSetThreadHandle(RPC_SS_THREAD_HANDLE); } 
#line 2658
extern "C" { extern __declspec( dllimport ) void __stdcall RpcSsSwapClientAllocFree(RPC_CLIENT_ALLOC *, RPC_CLIENT_FREE *, RPC_CLIENT_ALLOC **, RPC_CLIENT_FREE **); } 
#line 2672
extern "C" { extern __declspec( dllimport ) void *__stdcall RpcSmAllocate(size_t, RPC_STATUS *); } 
#line 2680
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcSmClientFree(void *); } 
#line 2687
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcSmDestroyClientContext(void **); } 
#line 2694
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcSmDisableAllocate(); } 
#line 2701
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcSmEnableAllocate(); } 
#line 2708
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcSmFree(void *); } 
#line 2715
extern "C" { extern __declspec( dllimport ) RPC_SS_THREAD_HANDLE __stdcall RpcSmGetThreadHandle(RPC_STATUS *); } 
#line 2722
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcSmSetClientAllocFree(RPC_CLIENT_ALLOC *, RPC_CLIENT_FREE *); } 
#line 2730
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcSmSetThreadHandle(RPC_SS_THREAD_HANDLE); } 
#line 2737
extern "C" { extern __declspec( dllimport ) RPC_STATUS __stdcall RpcSmSwapClientAllocFree(RPC_CLIENT_ALLOC *, RPC_CLIENT_FREE *, RPC_CLIENT_ALLOC **, RPC_CLIENT_FREE **); } 
#line 2751
extern "C" { extern __declspec( dllimport ) void __stdcall NdrRpcSsEnableAllocate(PMIDL_STUB_MESSAGE); } 
#line 2757
extern "C" { extern __declspec( dllimport ) void __stdcall NdrRpcSsDisableAllocate(PMIDL_STUB_MESSAGE); } 
#line 2763
extern "C" { extern __declspec( dllimport ) void __stdcall NdrRpcSmSetClientToOsf(PMIDL_STUB_MESSAGE); } 
#line 2769
extern "C" { extern __declspec( dllimport ) void *__stdcall NdrRpcSmClientAllocate(size_t); } 
#line 2776
extern "C" { extern __declspec( dllimport ) void __stdcall NdrRpcSmClientFree(void *); } 
#line 2783
extern "C" { extern __declspec( dllimport ) void *__stdcall NdrRpcSsDefaultAllocate(size_t); } 
#line 2790
extern "C" { extern __declspec( dllimport ) void __stdcall NdrRpcSsDefaultFree(void *); } 
#line 2805
extern "C" { extern __declspec( dllimport ) PFULL_PTR_XLAT_TABLES __stdcall NdrFullPointerXlatInit(unsigned long, XLAT_SIDE); } 
#line 2813
extern "C" { extern __declspec( dllimport ) void __stdcall NdrFullPointerXlatFree(PFULL_PTR_XLAT_TABLES); } 
#line 2821
extern "C" { extern __declspec( dllimport ) void *__stdcall NdrAllocate(PMIDL_STUB_MESSAGE, size_t); } 
#line 2829
extern "C" { extern __declspec( dllimport ) void __stdcall NdrClearOutParameters(PMIDL_STUB_MESSAGE, PFORMAT_STRING, void *); } 
#line 2843
extern "C" { extern __declspec( dllimport ) void *__stdcall NdrOleAllocate(size_t); } 
#line 2850
extern "C" { extern __declspec( dllimport ) void __stdcall NdrOleFree(void *); } 
#line 2909 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\rpcndr.h"
extern "C" { typedef 
#line 2901
struct _NDR_USER_MARSHAL_INFO_LEVEL1 { 

void *Buffer; 
unsigned long BufferSize; 
void *(__stdcall *pfnAllocate)(size_t); 
void (__stdcall *pfnFree)(void *); 
IRpcChannelBuffer *pRpcChannelBuffer; 
ULONG_PTR Reserved[5]; 
} NDR_USER_MARSHAL_INFO_LEVEL1; }



#pragma warning(push)
#line 2915 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\rpcndr.h"
#pragma warning(disable:4201)
#line 2924 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\rpcndr.h"
extern "C" { typedef 
#line 2918
struct _NDR_USER_MARSHAL_INFO { 

unsigned long InformationLevel; 
union { 
NDR_USER_MARSHAL_INFO_LEVEL1 Level1; 
}; 
} NDR_USER_MARSHAL_INFO; }



#pragma warning(pop)
#line 2936 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\rpcndr.h"
extern "C" { extern RPC_STATUS __stdcall NdrGetUserMarshalInfo(unsigned long *, unsigned long, NDR_USER_MARSHAL_INFO *); } 
#line 2946
extern "C" { extern RPC_STATUS __stdcall NdrCreateServerInterfaceFromStub(IRpcStubBuffer *, RPC_SERVER_INTERFACE *); } 
#line 2954
extern "C" { extern CLIENT_CALL_RETURN __cdecl NdrClientCall3(MIDL_STUBLESS_PROXY_INFO *, unsigned long, void *, ...); } 
#line 2962
extern "C" { extern CLIENT_CALL_RETURN __cdecl Ndr64AsyncClientCall(MIDL_STUBLESS_PROXY_INFO *, unsigned long, void *, ...); } 
#line 2970
extern "C" { extern CLIENT_CALL_RETURN __cdecl Ndr64DcomAsyncClientCall(MIDL_STUBLESS_PROXY_INFO *, unsigned long, void *, ...); } 
#line 2977
struct IRpcStubBuffer; 




extern "C" { extern __declspec( dllimport ) void __stdcall Ndr64AsyncServerCall(PRPC_MESSAGE); } 
#line 2989
extern "C" { extern __declspec( dllimport ) void __stdcall Ndr64AsyncServerCall64(PRPC_MESSAGE); } 
#line 2996
extern "C" { extern __declspec( dllimport ) void __stdcall Ndr64AsyncServerCallAll(PRPC_MESSAGE); } 
#line 3003
extern "C" { extern __declspec( dllimport ) long __stdcall Ndr64AsyncStubCall(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, unsigned long *); } 
#line 3014
extern "C" { extern __declspec( dllimport ) long __stdcall Ndr64DcomAsyncStubCall(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, unsigned long *); } 
#line 3024
extern "C" { extern __declspec( dllimport ) long __stdcall NdrStubCall3(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, unsigned long *); } 
#line 3034
extern "C" { extern __declspec( dllimport ) void __stdcall NdrServerCallAll(PRPC_MESSAGE); } 
#line 3041
extern "C" { extern __declspec( dllimport ) void __stdcall NdrServerCallNdr64(PRPC_MESSAGE); } 
#line 3049
extern "C" { extern __declspec( dllimport ) void __stdcall NdrServerCall3(PRPC_MESSAGE); } 
#line 3058
extern "C" { extern __declspec( dllimport ) void __stdcall NdrPartialIgnoreClientMarshall(PMIDL_STUB_MESSAGE, void *); } 
#line 3066
extern "C" { extern __declspec( dllimport ) void __stdcall NdrPartialIgnoreServerUnmarshall(PMIDL_STUB_MESSAGE, void **); } 
#line 3074
extern "C" { extern __declspec( dllimport ) void __stdcall NdrPartialIgnoreClientBufferSize(PMIDL_STUB_MESSAGE, void *); } 
#line 3082
extern "C" { extern __declspec( dllimport ) void __stdcall NdrPartialIgnoreServerInitialize(PMIDL_STUB_MESSAGE, void **, PFORMAT_STRING); } 
#line 3090
extern "C" { extern void __stdcall RpcUserFree(handle_t, void *); } 
#line 27 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack ( pop )
#line 70 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wtypes.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec; 
#line 84
extern "C" { typedef 
#line 79
struct tagRemHGLOBAL { 

long fNullHGlobal; 
unsigned long cbData; 
byte data[1]; 
} RemHGLOBAL; }
#line 93
extern "C" { typedef 
#line 86
struct tagRemHMETAFILEPICT { 

long mm; 
long xExt; 
long yExt; 
unsigned long cbData; 
byte data[1]; 
} RemHMETAFILEPICT; }
#line 99
extern "C" { typedef 
#line 95
struct tagRemHENHMETAFILE { 

unsigned long cbData; 
byte data[1]; 
} RemHENHMETAFILE; }
#line 105
extern "C" { typedef 
#line 101
struct tagRemHBITMAP { 

unsigned long cbData; 
byte data[1]; 
} RemHBITMAP; }
#line 111
extern "C" { typedef 
#line 107
struct tagRemHPALETTE { 

unsigned long cbData; 
byte data[1]; 
} RemHPALETTE; }
#line 117
extern "C" { typedef 
#line 113
struct tagRemBRUSH { 

unsigned long cbData; 
byte data[1]; 
} RemHBRUSH; }
#line 341 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wtypes.h"
extern "C" { typedef WCHAR OLECHAR; }

extern "C" { typedef OLECHAR *LPOLESTR; }

extern "C" { typedef const OLECHAR *LPCOLESTR; }
#line 380 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wtypes.h"
extern "C" { typedef unsigned char UCHAR; }

extern "C" { typedef short SHORT; }

extern "C" { typedef unsigned short USHORT; }

extern "C" { typedef DWORD ULONG; }

extern "C" { typedef double DOUBLE; }
#line 509 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wtypes.h"
extern "C" { typedef 
#line 500
struct _COAUTHIDENTITY { 

USHORT *User; 
ULONG UserLength; 
USHORT *Domain; 
ULONG DomainLength; 
USHORT *Password; 
ULONG PasswordLength; 
ULONG Flags; 
} COAUTHIDENTITY; }
#line 520
extern "C" { typedef 
#line 511
struct _COAUTHINFO { 

DWORD dwAuthnSvc; 
DWORD dwAuthzSvc; 
LPWSTR pwszServerPrincName; 
DWORD dwAuthnLevel; 
DWORD dwImpersonationLevel; 
COAUTHIDENTITY *pAuthIdentityData; 
DWORD dwCapabilities; 
} COAUTHINFO; }

extern "C" { typedef LONG SCODE; }

extern "C" { typedef SCODE *PSCODE; }
#line 563 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wtypes.h"
extern "C" { typedef 
#line 557
enum tagMEMCTX { 
MEMCTX_TASK = 1, 
MEMCTX_SHARED, 
MEMCTX_MACSYSTEM, 
MEMCTX_UNKNOWN = (-1), 
MEMCTX_SAME = (-2)
} MEMCTX; }
#line 611 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wtypes.h"
extern "C" { typedef 
#line 588
enum tagCLSCTX { 
CLSCTX_INPROC_SERVER = 1, 
CLSCTX_INPROC_HANDLER, 
CLSCTX_LOCAL_SERVER = 4, 
CLSCTX_INPROC_SERVER16 = 8, 
CLSCTX_REMOTE_SERVER = 16, 
CLSCTX_INPROC_HANDLER16 = 32, 
CLSCTX_RESERVED1 = 64, 
CLSCTX_RESERVED2 = 128, 
CLSCTX_RESERVED3 = 256, 
CLSCTX_RESERVED4 = 512, 
CLSCTX_NO_CODE_DOWNLOAD = 1024, 
CLSCTX_RESERVED5 = 2048, 
CLSCTX_NO_CUSTOM_MARSHAL = 4096, 
CLSCTX_ENABLE_CODE_DOWNLOAD = 8192, 
CLSCTX_NO_FAILURE_LOG = 16384, 
CLSCTX_DISABLE_AAA = 32768, 
CLSCTX_ENABLE_AAA = 65536, 
CLSCTX_FROM_DEFAULT_CONTEXT = 131072, 
CLSCTX_ACTIVATE_32_BIT_SERVER = 262144, 
CLSCTX_ACTIVATE_64_BIT_SERVER = 524288, 
CLSCTX_ENABLE_CLOAKING = 1048576, 
CLSCTX_PS_DLL = (-2147483647-1)
} CLSCTX; }
#line 640
extern "C" { typedef 
#line 631
enum tagMSHLFLAGS { 
MSHLFLAGS_NORMAL, 
MSHLFLAGS_TABLESTRONG, 
MSHLFLAGS_TABLEWEAK, 
MSHLFLAGS_NOPING = 4, 
MSHLFLAGS_RESERVED1 = 8, 
MSHLFLAGS_RESERVED2 = 16, 
MSHLFLAGS_RESERVED3 = 32, 
MSHLFLAGS_RESERVED4 = 64
} MSHLFLAGS; }
#line 649
extern "C" { typedef 
#line 643
enum tagMSHCTX { 
MSHCTX_LOCAL, 
MSHCTX_NOSHAREDMEM, 
MSHCTX_DIFFERENTMACHINE, 
MSHCTX_INPROC, 
MSHCTX_CROSSCTX
} MSHCTX; }
#line 657
extern "C" { typedef 
#line 652
enum tagDVASPECT { 
DVASPECT_CONTENT = 1, 
DVASPECT_THUMBNAIL, 
DVASPECT_ICON = 4, 
DVASPECT_DOCPRINT = 8
} DVASPECT; }
#line 666
extern "C" { typedef 
#line 660
enum tagSTGC { 
STGC_DEFAULT, 
STGC_OVERWRITE, 
STGC_ONLYIFCURRENT, 
STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 4, 
STGC_CONSOLIDATE = 8
} STGC; }
#line 673
extern "C" { typedef 
#line 669
enum tagSTGMOVE { 
STGMOVE_MOVE, 
STGMOVE_COPY, 
STGMOVE_SHALLOWCOPY
} STGMOVE; }
#line 680
extern "C" { typedef 
#line 676
enum tagSTATFLAG { 
STATFLAG_DEFAULT, 
STATFLAG_NONAME, 
STATFLAG_NOOPEN
} STATFLAG; }

extern "C" { typedef void *HCONTEXT; }



extern "C" { typedef DWORD LCID; }
#line 691 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wtypes.h"
extern "C" { typedef USHORT LANGID; }
#line 698 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wtypes.h"
extern "C" { typedef 
#line 694
struct _BYTE_BLOB { 

unsigned long clSize; 
byte abData[1]; 
} BYTE_BLOB; }

extern "C" { typedef BYTE_BLOB *UP_BYTE_BLOB; }
#line 706
extern "C" { typedef 
#line 702
struct _WORD_BLOB { 

unsigned long clSize; 
unsigned short asData[1]; 
} WORD_BLOB; }

extern "C" { typedef WORD_BLOB *UP_WORD_BLOB; }
#line 714
extern "C" { typedef 
#line 710
struct _DWORD_BLOB { 

unsigned long clSize; 
unsigned long alData[1]; 
} DWORD_BLOB; }

extern "C" { typedef DWORD_BLOB *UP_DWORD_BLOB; }
#line 723
extern "C" { typedef 
#line 718
struct _FLAGGED_BYTE_BLOB { 

unsigned long fFlags; 
unsigned long clSize; 
byte abData[1]; 
} FLAGGED_BYTE_BLOB; }

extern "C" { typedef FLAGGED_BYTE_BLOB *UP_FLAGGED_BYTE_BLOB; }
#line 732
extern "C" { typedef 
#line 727
struct _FLAGGED_WORD_BLOB { 

unsigned long fFlags; 
unsigned long clSize; 
unsigned short asData[1]; 
} FLAGGED_WORD_BLOB; }

extern "C" { typedef FLAGGED_WORD_BLOB *UP_FLAGGED_WORD_BLOB; }
#line 740
extern "C" { typedef 
#line 736
struct _BYTE_SIZEDARR { 

unsigned long clSize; 
byte *pData; 
} BYTE_SIZEDARR; }
#line 746
extern "C" { typedef 
#line 742
struct _SHORT_SIZEDARR { 

unsigned long clSize; 
unsigned short *pData; 
} WORD_SIZEDARR; }
#line 752
extern "C" { typedef 
#line 748
struct _LONG_SIZEDARR { 

unsigned long clSize; 
unsigned long *pData; 
} DWORD_SIZEDARR; }
#line 758
extern "C" { typedef 
#line 754
struct _HYPER_SIZEDARR { 

unsigned long clSize; 
__int64 *pData; 
} HYPER_SIZEDARR; }
#line 774
extern "C" { typedef 
#line 766
struct _userCLIPFORMAT { 

long fContext; 
union __MIDL_IWinTypes_0001 { 

DWORD dwValue; 
__wchar_t *pwszName; 
} u; 
} userCLIPFORMAT; }

extern "C" { typedef userCLIPFORMAT *wireCLIPFORMAT; }

extern "C" { typedef WORD CLIPFORMAT; }
#line 788
extern "C" { typedef 
#line 780
struct _GDI_NONREMOTE { 

long fContext; 
union __MIDL_IWinTypes_0002 { 

long hInproc; 
DWORD_BLOB *hRemote; 
} u; 
} GDI_NONREMOTE; }
#line 799
extern "C" { typedef 
#line 790
struct _userHGLOBAL { 

long fContext; 
union __MIDL_IWinTypes_0003 { 

long hInproc; 
FLAGGED_BYTE_BLOB *hRemote; 
__int64 hInproc64; 
} u; 
} userHGLOBAL; }

extern "C" { typedef userHGLOBAL *wireHGLOBAL; }
#line 812
extern "C" { typedef 
#line 803
struct _userHMETAFILE { 

long fContext; 
union __MIDL_IWinTypes_0004 { 

long hInproc; 
BYTE_BLOB *hRemote; 
__int64 hInproc64; 
} u; 
} userHMETAFILE; }
#line 820
extern "C" { typedef 
#line 814
struct _remoteMETAFILEPICT { 

long mm; 
long xExt; 
long yExt; 
userHMETAFILE *hMF; 
} remoteMETAFILEPICT; }
#line 831
extern "C" { typedef 
#line 822
struct _userHMETAFILEPICT { 

long fContext; 
union __MIDL_IWinTypes_0005 { 

long hInproc; 
remoteMETAFILEPICT *hRemote; 
__int64 hInproc64; 
} u; 
} userHMETAFILEPICT; }
#line 842
extern "C" { typedef 
#line 833
struct _userHENHMETAFILE { 

long fContext; 
union __MIDL_IWinTypes_0006 { 

long hInproc; 
BYTE_BLOB *hRemote; 
__int64 hInproc64; 
} u; 
} userHENHMETAFILE; }
#line 854
extern "C" { typedef 
#line 844
struct _userBITMAP { 

LONG bmType; 
LONG bmWidth; 
LONG bmHeight; 
LONG bmWidthBytes; 
WORD bmPlanes; 
WORD bmBitsPixel; 
ULONG cbSize; 
byte pBuffer[1]; 
} userBITMAP; }
#line 865
extern "C" { typedef 
#line 856
struct _userHBITMAP { 

long fContext; 
union __MIDL_IWinTypes_0007 { 

long hInproc; 
userBITMAP *hRemote; 
__int64 hInproc64; 
} u; 
} userHBITMAP; }
#line 876
extern "C" { typedef 
#line 867
struct _userHPALETTE { 

long fContext; 
union __MIDL_IWinTypes_0008 { 

long hInproc; 
LOGPALETTE *hRemote; 
__int64 hInproc64; 
} u; 
} userHPALETTE; }
#line 886
extern "C" { typedef 
#line 878
struct _RemotableHandle { 

long fContext; 
union __MIDL_IWinTypes_0009 { 

long hInproc; 
long hRemote; 
} u; 
} RemotableHandle; }

extern "C" { typedef RemotableHandle *wireHWND; }

extern "C" { typedef RemotableHandle *wireHMENU; }

extern "C" { typedef RemotableHandle *wireHACCEL; }

extern "C" { typedef RemotableHandle *wireHBRUSH; }

extern "C" { typedef RemotableHandle *wireHFONT; }

extern "C" { typedef RemotableHandle *wireHDC; }

extern "C" { typedef RemotableHandle *wireHICON; }

extern "C" { typedef RemotableHandle *wireHRGN; }
#line 978 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wtypes.h"
extern "C" { typedef userHBITMAP *wireHBITMAP; }

extern "C" { typedef userHPALETTE *wireHPALETTE; }

extern "C" { typedef userHENHMETAFILE *wireHENHMETAFILE; }

extern "C" { typedef userHMETAFILE *wireHMETAFILE; }

extern "C" { typedef userHMETAFILEPICT *wireHMETAFILEPICT; }
#line 1002 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wtypes.h"
extern "C" { typedef void *HMETAFILEPICT; }



extern "C" RPC_IF_HANDLE IWinTypes_v0_1_c_ifspec; 
extern "C" RPC_IF_HANDLE IWinTypes_v0_1_s_ifspec; 
#line 1015 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wtypes.h"
#pragma warning(push)
#line 1017 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wtypes.h"
#pragma warning(disable:4201)
#line 1019 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wtypes.h"
extern "C" { typedef double DATE; }
#line 1045 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wtypes.h"
extern "C" { typedef 
#line 1034 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wtypes.h"
union tagCY { 
struct { 




unsigned long Lo; 
long Hi; 
#line 1043 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wtypes.h"
}; 
LONGLONG int64; 
} CY; }
#line 1048 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wtypes.h"
extern "C" { typedef CY *LPCY; }
#line 1086 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wtypes.h"
extern "C" { typedef 
#line 1064 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wtypes.h"
struct tagDEC { 
USHORT wReserved; 
union { 
struct { 
BYTE scale; 
BYTE sign; 
}; 
USHORT signscale; 
}; 
ULONG Hi32; 
union { 
struct { 




ULONG Lo32; 
ULONG Mid32; 
#line 1083 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wtypes.h"
}; 
ULONGLONG Lo64; 
}; 
} DECIMAL; }
#line 1091 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wtypes.h"
extern "C" { typedef DECIMAL *LPDECIMAL; }



#pragma warning(pop)
#line 1100 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wtypes.h"
extern "C" { typedef FLAGGED_WORD_BLOB *wireBSTR; }

extern "C" { typedef OLECHAR *BSTR; }

extern "C" { typedef BSTR *LPBSTR; }


extern "C" { typedef short VARIANT_BOOL; }
#line 1117 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wtypes.h"
extern "C" { typedef boolean BOOLEAN; }
#line 1128
extern "C" { typedef 
#line 1124
struct tagBSTRBLOB { 

ULONG cbSize; 
BYTE *pData; 
} BSTRBLOB; }

extern "C" { typedef tagBSTRBLOB *LPBSTRBLOB; }
#line 1143 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wtypes.h"
extern "C" { typedef 
#line 1139
struct tagBLOB { 

ULONG cbSize; 
BYTE *pBlobData; 
} BLOB; }

extern "C" { typedef tagBLOB *LPBLOB; }
#line 1153 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wtypes.h"
extern "C" { typedef 
#line 1148
struct tagCLIPDATA { 

ULONG cbSize; 
long ulClipFmt; 
BYTE *pClipData; 
} CLIPDATA; }



extern "C" { typedef unsigned short VARTYPE; }
#line 1218
enum VARENUM { 
VT_EMPTY, 
VT_NULL, 
VT_I2, 
VT_I4, 
VT_R4, 
VT_R8, 
VT_CY, 
VT_DATE, 
VT_BSTR, 
VT_DISPATCH, 
VT_ERROR, 
VT_BOOL, 
VT_VARIANT, 
VT_UNKNOWN, 
VT_DECIMAL, 
VT_I1 = 16, 
VT_UI1, 
VT_UI2, 
VT_UI4, 
VT_I8, 
VT_UI8, 
VT_INT, 
VT_UINT, 
VT_VOID, 
VT_HRESULT, 
VT_PTR, 
VT_SAFEARRAY, 
VT_CARRAY, 
VT_USERDEFINED, 
VT_LPSTR, 
VT_LPWSTR, 
VT_RECORD = 36, 
VT_INT_PTR, 
VT_UINT_PTR, 
VT_FILETIME = 64, 
VT_BLOB, 
VT_STREAM, 
VT_STORAGE, 
VT_STREAMED_OBJECT, 
VT_STORED_OBJECT, 
VT_BLOB_OBJECT, 
VT_CF, 
VT_CLSID, 
VT_VERSIONED_STREAM, 
VT_BSTR_BLOB = 4095, 
VT_VECTOR, 
VT_ARRAY = 8192, 
VT_BYREF = 16384, 
VT_RESERVED = 32768, 
VT_ILLEGAL = 65535, 
VT_ILLEGALMASKED = 4095, 
VT_TYPEMASK = 4095
}; 
extern "C" { typedef ULONG PROPID; }
#line 1280
extern "C" { typedef 
#line 1276
struct _tagpropertykey { 

GUID fmtid; 
DWORD pid; 
} PROPERTYKEY; }
#line 1320 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\wtypes.h"
extern "C" { typedef 
#line 1314
struct tagCSPLATFORM { 

DWORD dwPlatformId; 
DWORD dwVersionHi; 
DWORD dwVersionLo; 
DWORD dwProcessorArch; 
} CSPLATFORM; }
#line 1329
extern "C" { typedef 
#line 1322
struct tagQUERYCONTEXT { 

DWORD dwContext; 
CSPLATFORM Platform; 
LCID Locale; 
DWORD dwVersionHi; 
DWORD dwVersionLo; 
} QUERYCONTEXT; }
#line 1340
extern "C" { typedef 
#line 1332
enum tagTYSPEC { 
TYSPEC_CLSID, 
TYSPEC_FILEEXT, 
TYSPEC_MIMETYPE, 
TYSPEC_FILENAME, 
TYSPEC_PROGID, 
TYSPEC_PACKAGENAME, 
TYSPEC_OBJECTID
} TYSPEC; }
#line 1363
extern "C" { typedef 
#line 1342
struct __MIDL___MIDL_itf_wtypes_0000_0001_0001 { 

DWORD tyspec; 
union __MIDL___MIDL_itf_wtypes_0000_0001_0005 { 

CLSID clsid; 
LPOLESTR pFileExt; 
LPOLESTR pMimeType; 
LPOLESTR pProgId; 
LPOLESTR pFileName; 

struct { 
LPOLESTR pPackageName; 
GUID PolicyId; 
} ByName; 

struct { 
GUID ObjectId; 
GUID PolicyId; 
} ByObjectId; 
} tagged_union; 
} uCLSSPEC; }



extern "C" RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec; 
#line 38 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
extern "C" const GUID GUID_DEVINTERFACE_DISK; 
extern "C" const GUID GUID_DEVINTERFACE_CDROM; 
extern "C" const GUID GUID_DEVINTERFACE_PARTITION; 
extern "C" const GUID GUID_DEVINTERFACE_TAPE; 
extern "C" const GUID GUID_DEVINTERFACE_WRITEONCEDISK; 
extern "C" const GUID GUID_DEVINTERFACE_VOLUME; 
extern "C" const GUID GUID_DEVINTERFACE_MEDIUMCHANGER; 
extern "C" const GUID GUID_DEVINTERFACE_FLOPPY; 
extern "C" const GUID GUID_DEVINTERFACE_CDCHANGER; 
extern "C" const GUID GUID_DEVINTERFACE_STORAGEPORT; 



extern "C" const GUID GUID_DEVINTERFACE_COMPORT; 
extern "C" const GUID GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR; 
#line 301 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
extern "C" { typedef 
#line 295
struct _STORAGE_HOTPLUG_INFO { 
DWORD Size; 
BOOLEAN MediaRemovable; 
BOOLEAN MediaHotplug; 
BOOLEAN DeviceHotplug; 
BOOLEAN WriteCacheEnableOverride; 
} STORAGE_HOTPLUG_INFO; }extern "C" { typedef _STORAGE_HOTPLUG_INFO *PSTORAGE_HOTPLUG_INFO; }
#line 334
extern "C" { typedef 
#line 314
struct _STORAGE_DEVICE_NUMBER { 
#line 320
DWORD DeviceType; 
#line 326
DWORD DeviceNumber; 
#line 333
DWORD PartitionNumber; 
} STORAGE_DEVICE_NUMBER; }extern "C" { typedef _STORAGE_DEVICE_NUMBER *PSTORAGE_DEVICE_NUMBER; }
#line 342
extern "C" { typedef 
#line 340
struct _STORAGE_BUS_RESET_REQUEST { 
BYTE PathId; 
} STORAGE_BUS_RESET_REQUEST; }extern "C" { typedef _STORAGE_BUS_RESET_REQUEST *PSTORAGE_BUS_RESET_REQUEST; }
#line 354
extern "C" { typedef 
#line 348
struct STORAGE_BREAK_RESERVATION_REQUEST { 
DWORD Length; 
BYTE _unused; 
BYTE PathId; 
BYTE TargetId; 
BYTE Lun; 
} STORAGE_BREAK_RESERVATION_REQUEST; }extern "C" { typedef STORAGE_BREAK_RESERVATION_REQUEST *PSTORAGE_BREAK_RESERVATION_REQUEST; }
#line 369
extern "C" { typedef 
#line 367
struct _PREVENT_MEDIA_REMOVAL { 
BOOLEAN PreventMediaRemoval; 
} PREVENT_MEDIA_REMOVAL; }extern "C" { typedef _PREVENT_MEDIA_REMOVAL *PPREVENT_MEDIA_REMOVAL; }
#line 380
extern "C" { typedef 
#line 377
struct _CLASS_MEDIA_CHANGE_CONTEXT { 
DWORD MediaChangeCount; 
DWORD NewState; 
} CLASS_MEDIA_CHANGE_CONTEXT; }extern "C" { typedef _CLASS_MEDIA_CHANGE_CONTEXT *PCLASS_MEDIA_CHANGE_CONTEXT; }
#line 395
extern "C" { typedef 
#line 386
struct _TAPE_STATISTICS { 
DWORD Version; 
DWORD Flags; 
LARGE_INTEGER RecoveredWrites; 
LARGE_INTEGER UnrecoveredWrites; 
LARGE_INTEGER RecoveredReads; 
LARGE_INTEGER UnrecoveredReads; 
BYTE CompressionRatioReads; 
BYTE CompressionRatioWrites; 
} TAPE_STATISTICS; }extern "C" { typedef _TAPE_STATISTICS *PTAPE_STATISTICS; }
#line 406
extern "C" { typedef 
#line 404
struct _TAPE_GET_STATISTICS { 
DWORD Operation; 
} TAPE_GET_STATISTICS; }extern "C" { typedef _TAPE_GET_STATISTICS *PTAPE_GET_STATISTICS; }
#line 513 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
extern "C" { typedef 
#line 417 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
enum _STORAGE_MEDIA_TYPE { 
#line 447
DDS_4mm = 32, 
MiniQic, 
Travan, 
QIC, 
MP_8mm, 
AME_8mm, 
AIT1_8mm, 
DLT, 
NCTP, 
IBM_3480, 
IBM_3490E, 
IBM_Magstar_3590, 
IBM_Magstar_MP, 
STK_DATA_D3, 
SONY_DTF, 
DV_6mm, 
DMI, 
SONY_D2, 
CLEANER_CARTRIDGE, 
CD_ROM, 
CD_R, 
CD_RW, 
DVD_ROM, 
DVD_R, 
DVD_RW, 
MO_3_RW, 
MO_5_WO, 
MO_5_RW, 
MO_5_LIMDOW, 
PC_5_WO, 
PC_5_RW, 
PD_5_RW, 
ABL_5_WO, 
PINNACLE_APEX_5_RW, 
SONY_12_WO, 
PHILIPS_12_WO, 
HITACHI_12_WO, 
CYGNET_12_WO, 
KODAK_14_WO, 
MO_NFR_525, 
NIKON_12_RW, 
IOMEGA_ZIP, 
IOMEGA_JAZ, 
SYQUEST_EZ135, 
SYQUEST_EZFLYER, 
SYQUEST_SYJET, 
AVATAR_F2, 
MP2_8mm, 
DST_S, 
DST_M, 
DST_L, 
VXATape_1, 
VXATape_2, 
#line 503 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
STK_9840, 
#line 505 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
LTO_Ultrium, 
LTO_Accelis, 
DVD_RAM, 
AIT_8mm, 
ADR_1, 
ADR_2, 
STK_9940, 
SAIT
} STORAGE_MEDIA_TYPE; }extern "C" { typedef _STORAGE_MEDIA_TYPE *PSTORAGE_MEDIA_TYPE; }
#line 545
extern "C" { typedef 
#line 528
enum _STORAGE_BUS_TYPE { 
BusTypeUnknown, 
BusTypeScsi, 
BusTypeAtapi, 
BusTypeAta, 
BusType1394, 
BusTypeSsa, 
BusTypeFibre, 
BusTypeUsb, 
BusTypeRAID, 
BusTypeiScsi, 
BusTypeSas, 
BusTypeSata, 
BusTypeSd, 
BusTypeMmc, 
BusTypeMax, 
BusTypeMaxReserved = 127
} STORAGE_BUS_TYPE; }extern "C" { typedef _STORAGE_BUS_TYPE *PSTORAGE_BUS_TYPE; }
#line 588
extern "C" { typedef 
#line 547
struct _DEVICE_MEDIA_INFO { 
union { 
struct { 
LARGE_INTEGER Cylinders; 
STORAGE_MEDIA_TYPE MediaType; 
DWORD TracksPerCylinder; 
DWORD SectorsPerTrack; 
DWORD BytesPerSector; 
DWORD NumberMediaSides; 
DWORD MediaCharacteristics; 
} DiskInfo; 

struct { 
LARGE_INTEGER Cylinders; 
STORAGE_MEDIA_TYPE MediaType; 
DWORD TracksPerCylinder; 
DWORD SectorsPerTrack; 
DWORD BytesPerSector; 
DWORD NumberMediaSides; 
DWORD MediaCharacteristics; 
} RemovableDiskInfo; 

struct { 
STORAGE_MEDIA_TYPE MediaType; 
DWORD MediaCharacteristics; 
DWORD CurrentBlockSize; 
STORAGE_BUS_TYPE BusType; 
#line 579
union { 
struct { 
BYTE MediumType; 
BYTE DensityCode; 
} ScsiInformation; 
} BusSpecificData; 

} TapeInfo; 
} DeviceSpecific; 
} DEVICE_MEDIA_INFO; }extern "C" { typedef _DEVICE_MEDIA_INFO *PDEVICE_MEDIA_INFO; }
#line 594
extern "C" { typedef 
#line 590
struct _GET_MEDIA_TYPES { 
DWORD DeviceType; 
DWORD MediaInfoCount; 
DEVICE_MEDIA_INFO MediaInfo[1]; 
} GET_MEDIA_TYPES; }extern "C" { typedef _GET_MEDIA_TYPES *PGET_MEDIA_TYPES; }
#line 613
extern "C" { typedef 
#line 609
struct _STORAGE_PREDICT_FAILURE { 

DWORD PredictFailure; 
BYTE VendorSpecific[512]; 
} STORAGE_PREDICT_FAILURE; }extern "C" { typedef _STORAGE_PREDICT_FAILURE *PSTORAGE_PREDICT_FAILURE; }
#line 646
extern "C" { typedef 
#line 641
enum _STORAGE_QUERY_TYPE { 
PropertyStandardQuery, 
PropertyExistsQuery, 
PropertyMaskQuery, 
PropertyQueryMaxDefined
} STORAGE_QUERY_TYPE; }extern "C" { typedef _STORAGE_QUERY_TYPE *PSTORAGE_QUERY_TYPE; }
#line 660
extern "C" { typedef 
#line 652
enum _STORAGE_PROPERTY_ID { 
StorageDeviceProperty, 
StorageAdapterProperty, 
StorageDeviceIdProperty, 
StorageDeviceUniqueIdProperty, 
StorageDeviceWriteCacheProperty, 
StorageMiniportProperty, 
StorageAccessAlignmentProperty
} STORAGE_PROPERTY_ID; }extern "C" { typedef _STORAGE_PROPERTY_ID *PSTORAGE_PROPERTY_ID; }
#line 687
extern "C" { typedef 
#line 667
struct _STORAGE_PROPERTY_QUERY { 
#line 673
STORAGE_PROPERTY_ID PropertyId; 
#line 679
STORAGE_QUERY_TYPE QueryType; 
#line 685
BYTE AdditionalParameters[1]; 

} STORAGE_PROPERTY_QUERY; }extern "C" { typedef _STORAGE_PROPERTY_QUERY *PSTORAGE_PROPERTY_QUERY; }
#line 700
extern "C" { typedef 
#line 694
struct _STORAGE_DESCRIPTOR_HEADER { 

DWORD Version; 

DWORD Size; 

} STORAGE_DESCRIPTOR_HEADER; }extern "C" { typedef _STORAGE_DESCRIPTOR_HEADER *PSTORAGE_DESCRIPTOR_HEADER; }
#line 802
extern "C" { typedef 
#line 710
struct _STORAGE_DEVICE_DESCRIPTOR { 
#line 716
DWORD Version; 
#line 723
DWORD Size; 
#line 729
BYTE DeviceType; 
#line 735
BYTE DeviceTypeModifier; 
#line 742
BOOLEAN RemovableMedia; 
#line 750
BOOLEAN CommandQueueing; 
#line 757
DWORD VendorIdOffset; 
#line 764
DWORD ProductIdOffset; 
#line 772
DWORD ProductRevisionOffset; 
#line 779
DWORD SerialNumberOffset; 
#line 787
STORAGE_BUS_TYPE BusType; 
#line 794
DWORD RawPropertiesLength; 
#line 800
BYTE RawDeviceProperties[1]; 

} STORAGE_DEVICE_DESCRIPTOR; }extern "C" { typedef _STORAGE_DEVICE_DESCRIPTOR *PSTORAGE_DEVICE_DESCRIPTOR; }
#line 843 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
extern "C" { typedef 
#line 813 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
struct _STORAGE_ADAPTER_DESCRIPTOR { 

DWORD Version; 

DWORD Size; 

DWORD MaximumTransferLength; 

DWORD MaximumPhysicalPages; 

DWORD AlignmentMask; 

BOOLEAN AdapterUsesPio; 

BOOLEAN AdapterScansDown; 

BOOLEAN CommandQueueing; 

BOOLEAN AcceleratedTransfer; 
#line 836 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
BYTE BusType; 
#line 839 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
WORD BusMajorVersion; 

WORD BusMinorVersion; 

} STORAGE_ADAPTER_DESCRIPTOR; }extern "C" { typedef _STORAGE_ADAPTER_DESCRIPTOR *PSTORAGE_ADAPTER_DESCRIPTOR; }
#line 890
extern "C" { typedef 
#line 845
struct _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR { 
#line 851
DWORD Version; 
#line 858
DWORD Size; 
#line 864
DWORD BytesPerCacheLine; 
#line 870
DWORD BytesOffsetForCacheAlignment; 
#line 876
DWORD BytesPerLogicalSector; 
#line 882
DWORD BytesPerPhysicalSector; 
#line 888
DWORD BytesOffsetForSectorAlignment; 

} STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR; }extern "C" { typedef _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR *PSTORAGE_ACCESS_ALIGNMENT_DESCRIPTOR; }
#line 898
extern "C" { typedef 
#line 894
enum _STORAGE_PORT_CODE_SET { 
StoragePortCodeSetReserved, 
StoragePortCodeSetStorport, 
StoragePortCodeSetSCSIport
} STORAGE_PORT_CODE_SET; }extern "C" { typedef _STORAGE_PORT_CODE_SET *PSTORAGE_PORT_CODE_SET; }
#line 913
extern "C" { typedef 
#line 900
struct _STORAGE_MINIPORT_DESCRIPTOR { 

DWORD Version; 

DWORD Size; 

STORAGE_PORT_CODE_SET Portdriver; 

BOOLEAN LUNResetSupported; 

BOOLEAN TargetResetSupported; 


} STORAGE_MINIPORT_DESCRIPTOR; }extern "C" { typedef _STORAGE_MINIPORT_DESCRIPTOR *PSTORAGE_MINIPORT_DESCRIPTOR; }
#line 926
extern "C" { typedef 
#line 921
enum _STORAGE_IDENTIFIER_CODE_SET { 
StorageIdCodeSetReserved, 
StorageIdCodeSetBinary, 
StorageIdCodeSetAscii, 
StorageIdCodeSetUtf8
} STORAGE_IDENTIFIER_CODE_SET; }extern "C" { typedef _STORAGE_IDENTIFIER_CODE_SET *PSTORAGE_IDENTIFIER_CODE_SET; }
#line 938
extern "C" { typedef 
#line 928
enum _STORAGE_IDENTIFIER_TYPE { 
StorageIdTypeVendorSpecific, 
StorageIdTypeVendorId, 
StorageIdTypeEUI64, 
StorageIdTypeFCPHName, 
StorageIdTypePortRelative, 
StorageIdTypeTargetPortGroup, 
StorageIdTypeLogicalUnitGroup, 
StorageIdTypeMD5LogicalUnitIdentifier, 
StorageIdTypeScsiNameString
} STORAGE_IDENTIFIER_TYPE; }extern "C" { typedef _STORAGE_IDENTIFIER_TYPE *PSTORAGE_IDENTIFIER_TYPE; }
#line 948
extern "C" { typedef 
#line 944
enum _STORAGE_ID_NAA_FORMAT { 
StorageIdNAAFormatIEEEExtended = 2, 
StorageIdNAAFormatIEEERegistered, 
StorageIdNAAFormatIEEEERegisteredExtended = 5
} STORAGE_ID_NAA_FORMAT; }extern "C" { typedef _STORAGE_ID_NAA_FORMAT *PSTORAGE_ID_NAA_FORMAT; }
#line 954
extern "C" { typedef 
#line 950
enum _STORAGE_ASSOCIATION_TYPE { 
StorageIdAssocDevice, 
StorageIdAssocPort, 
StorageIdAssocTarget
} STORAGE_ASSOCIATION_TYPE; }extern "C" { typedef _STORAGE_ASSOCIATION_TYPE *PSTORAGE_ASSOCIATION_TYPE; }
#line 974
extern "C" { typedef 
#line 956
struct _STORAGE_IDENTIFIER { 
STORAGE_IDENTIFIER_CODE_SET CodeSet; 
STORAGE_IDENTIFIER_TYPE Type; 
WORD IdentifierSize; 
WORD NextOffset; 
#line 967
STORAGE_ASSOCIATION_TYPE Association; 
#line 973
BYTE Identifier[1]; 
} STORAGE_IDENTIFIER; }extern "C" { typedef _STORAGE_IDENTIFIER *PSTORAGE_IDENTIFIER; }
#line 995
extern "C" { typedef 
#line 976
struct _STORAGE_DEVICE_ID_DESCRIPTOR { 

DWORD Version; 

DWORD Size; 
#line 986
DWORD NumberOfIdentifiers; 
#line 994
BYTE Identifiers[1]; 
} STORAGE_DEVICE_ID_DESCRIPTOR; }extern "C" { typedef _STORAGE_DEVICE_ID_DESCRIPTOR *PSTORAGE_DEVICE_ID_DESCRIPTOR; }
#line 1053
extern "C" { typedef 
#line 1008
struct _STORAGE_GET_BC_PROPERTIES_OUTPUT { 
#line 1014
DWORD MaximumRequestsPerPeriod; 
#line 1020
DWORD MinimumPeriod; 
#line 1028
DWORDLONG MaximumRequestSize; 
#line 1035
DWORD EstimatedTimePerRequest; 
#line 1044
DWORD NumOutStandingRequests; 
#line 1051
DWORDLONG RequestSize; 

} STORAGE_GET_BC_PROPERTIES_OUTPUT; }extern "C" { typedef _STORAGE_GET_BC_PROPERTIES_OUTPUT *PSTORAGE_GET_BC_PROPERTIES_OUTPUT; }
#line 1120
extern "C" { typedef 
#line 1072
struct _STORAGE_ALLOCATE_BC_STREAM_INPUT { 




DWORD Version; 
#line 1083
DWORD RequestsPerPeriod; 
#line 1089
DWORD Period; 
#line 1095
BOOLEAN RetryFailures; 
#line 1101
BOOLEAN Discardable; 




BOOLEAN Reserved1[2]; 
#line 1112
DWORD AccessType; 
#line 1118
DWORD AccessMode; 

} STORAGE_ALLOCATE_BC_STREAM_INPUT; }extern "C" { typedef _STORAGE_ALLOCATE_BC_STREAM_INPUT *PSTORAGE_ALLOCATE_BC_STREAM_INPUT; }
#line 1137
extern "C" { typedef 
#line 1122
struct _STORAGE_ALLOCATE_BC_STREAM_OUTPUT { 
#line 1128
DWORDLONG RequestSize; 
#line 1135
DWORD NumOutStandingRequests; 

} STORAGE_ALLOCATE_BC_STREAM_OUTPUT; }extern "C" { typedef _STORAGE_ALLOCATE_BC_STREAM_OUTPUT *PSTORAGE_ALLOCATE_BC_STREAM_OUTPUT; }
#line 1163
extern "C" { typedef 
#line 1161
struct _STORAGE_PRIORITY_HINT_SUPPORT { 
DWORD SupportFlags; 
} STORAGE_PRIORITY_HINT_SUPPORT; }extern "C" { typedef _STORAGE_PRIORITY_HINT_SUPPORT *PSTORAGE_PRIORITY_HINT_SUPPORT; }

#pragma warning(push)
#pragma warning(disable:4200)
#line 1189 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
extern "C" { typedef 
#line 1167 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
struct _STORAGE_MEDIA_SERIAL_NUMBER_DATA { 

WORD Reserved; 
#line 1177
WORD SerialNumberLength; 
#line 1186
BYTE SerialNumber[0]; 
#line 1189 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
} STORAGE_MEDIA_SERIAL_NUMBER_DATA; }extern "C" { typedef _STORAGE_MEDIA_SERIAL_NUMBER_DATA *PSTORAGE_MEDIA_SERIAL_NUMBER_DATA; }
#line 1222
extern "C" { typedef 
#line 1191
struct _STORAGE_READ_CAPACITY { 




DWORD Version; 




DWORD Size; 
#line 1207
DWORD BlockLength; 
#line 1214
LARGE_INTEGER NumberOfBlocks; 
#line 1220
LARGE_INTEGER DiskLength; 

} STORAGE_READ_CAPACITY; }extern "C" { typedef _STORAGE_READ_CAPACITY *PSTORAGE_READ_CAPACITY; }

#pragma warning(pop)
#line 1238
extern "C" { typedef 
#line 1233
enum _WRITE_CACHE_TYPE { 
WriteCacheTypeUnknown, 
WriteCacheTypeNone, 
WriteCacheTypeWriteBack, 
WriteCacheTypeWriteThrough
} WRITE_CACHE_TYPE; }
#line 1244
extern "C" { typedef 
#line 1240
enum _WRITE_CACHE_ENABLE { 
WriteCacheEnableUnknown, 
WriteCacheDisabled, 
WriteCacheEnabled
} WRITE_CACHE_ENABLE; }
#line 1250
extern "C" { typedef 
#line 1246
enum _WRITE_CACHE_CHANGE { 
WriteCacheChangeUnknown, 
WriteCacheNotChangeable, 
WriteCacheChangeable
} WRITE_CACHE_CHANGE; }
#line 1256
extern "C" { typedef 
#line 1252
enum _WRITE_THROUGH { 
WriteThroughUnknown, 
WriteThroughNotSupported, 
WriteThroughSupported
} WRITE_THROUGH; }
#line 1307
extern "C" { typedef 
#line 1258
struct _STORAGE_WRITE_CACHE_PROPERTY { 
#line 1264
DWORD Version; 
#line 1270
DWORD Size; 




WRITE_CACHE_TYPE WriteCacheType; 




WRITE_CACHE_ENABLE WriteCacheEnabled; 




WRITE_CACHE_CHANGE WriteCacheChangeable; 




WRITE_THROUGH WriteThroughSupported; 




BOOLEAN FlushCacheSupported; 




BOOLEAN UserDefinedPowerProtection; 




BOOLEAN NVCacheEnabled; 

} STORAGE_WRITE_CACHE_PROPERTY; }extern "C" { typedef _STORAGE_WRITE_CACHE_PROPERTY *PSTORAGE_WRITE_CACHE_PROPERTY; }


#pragma warning(push)
#pragma warning(disable:4200)
#pragma warning(disable:4201)
#pragma warning(disable:4214)
#line 1366 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
extern "C" { typedef 
#line 1315 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
struct _PERSISTENT_RESERVE_COMMAND { 

DWORD Version; 
DWORD Size; 

union { 

struct { 
#line 1328
BYTE ServiceAction:5; 
BYTE Reserved1:3; 
#line 1335
WORD AllocationLength; 

} PR_IN; 

struct { 
#line 1345
BYTE ServiceAction:5; 
BYTE Reserved1:3; 
#line 1352
BYTE Type:4; 
BYTE Scope:4; 
#line 1360
BYTE ParameterList[0]; 
#line 1363 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
} PR_OUT; 
}; 

} PERSISTENT_RESERVE_COMMAND; }extern "C" { typedef _PERSISTENT_RESERVE_COMMAND *PPERSISTENT_RESERVE_COMMAND; }

#pragma warning(pop)
#line 1661 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
typedef 
#line 1634
enum _MEDIA_TYPE { 
Unknown, 
F5_1Pt2_512, 
F3_1Pt44_512, 
F3_2Pt88_512, 
F3_20Pt8_512, 
F3_720_512, 
F5_360_512, 
F5_320_512, 
F5_320_1024, 
F5_180_512, 
F5_160_512, 
RemovableMedia, 
FixedMedia, 
F3_120M_512, 
F3_640_512, 
F5_640_512, 
F5_720_512, 
F3_1Pt2_512, 
F3_1Pt23_1024, 
F5_1Pt23_1024, 
F3_128Mb_512, 
F3_230Mb_512, 
F8_256_128, 
F3_200Mb_512, 
F3_240M_512, 
F3_32M_512
} MEDIA_TYPE; typedef _MEDIA_TYPE *PMEDIA_TYPE; 
#line 1674
typedef 
#line 1668
struct _FORMAT_PARAMETERS { 
MEDIA_TYPE MediaType; 
DWORD StartCylinderNumber; 
DWORD EndCylinderNumber; 
DWORD StartHeadNumber; 
DWORD EndHeadNumber; 
} FORMAT_PARAMETERS; typedef _FORMAT_PARAMETERS *PFORMAT_PARAMETERS; 
#line 1683
typedef WORD BAD_TRACK_NUMBER; 
typedef WORD *PBAD_TRACK_NUMBER; 
#line 1700
typedef 
#line 1691
struct _FORMAT_EX_PARAMETERS { 
MEDIA_TYPE MediaType; 
DWORD StartCylinderNumber; 
DWORD EndCylinderNumber; 
DWORD StartHeadNumber; 
DWORD EndHeadNumber; 
WORD FormatGapLength; 
WORD SectorsPerTrack; 
WORD SectorNumber[1]; 
} FORMAT_EX_PARAMETERS; typedef _FORMAT_EX_PARAMETERS *PFORMAT_EX_PARAMETERS; 
#line 1714
typedef 
#line 1708
struct _DISK_GEOMETRY { 
LARGE_INTEGER Cylinders; 
MEDIA_TYPE MediaType; 
DWORD TracksPerCylinder; 
DWORD SectorsPerTrack; 
DWORD BytesPerSector; 
} DISK_GEOMETRY; typedef _DISK_GEOMETRY *PDISK_GEOMETRY; 
#line 1740
typedef 
#line 1731
struct _PARTITION_INFORMATION { 
LARGE_INTEGER StartingOffset; 
LARGE_INTEGER PartitionLength; 
DWORD HiddenSectors; 
DWORD PartitionNumber; 
BYTE PartitionType; 
BOOLEAN BootIndicator; 
BOOLEAN RecognizedPartition; 
BOOLEAN RewritePartition; 
} PARTITION_INFORMATION; typedef _PARTITION_INFORMATION *PPARTITION_INFORMATION; 
#line 1750
typedef 
#line 1748
struct _SET_PARTITION_INFORMATION { 
BYTE PartitionType; 
} SET_PARTITION_INFORMATION; typedef _SET_PARTITION_INFORMATION *PSET_PARTITION_INFORMATION; 
#line 1761
typedef 
#line 1757
struct _DRIVE_LAYOUT_INFORMATION { 
DWORD PartitionCount; 
DWORD Signature; 
PARTITION_INFORMATION PartitionEntry[1]; 
} DRIVE_LAYOUT_INFORMATION; typedef _DRIVE_LAYOUT_INFORMATION *PDRIVE_LAYOUT_INFORMATION; 
#line 1771
typedef 
#line 1768
struct _VERIFY_INFORMATION { 
LARGE_INTEGER StartingOffset; 
DWORD Length; 
} VERIFY_INFORMATION; typedef _VERIFY_INFORMATION *PVERIFY_INFORMATION; 
#line 1782
typedef 
#line 1778
struct _REASSIGN_BLOCKS { 
WORD Reserved; 
WORD Count; 
DWORD BlockNumber[1]; 
} REASSIGN_BLOCKS; typedef _REASSIGN_BLOCKS *PREASSIGN_BLOCKS; 
#line 24 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\pshpack1.h"
#pragma warning(disable:4103)

#pragma pack ( push, 1 )
#line 1794 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
typedef 
#line 1790
struct _REASSIGN_BLOCKS_EX { 
WORD Reserved; 
WORD Count; 
LARGE_INTEGER BlockNumber[1]; 
} REASSIGN_BLOCKS_EX; typedef _REASSIGN_BLOCKS_EX *PREASSIGN_BLOCKS_EX; 
#line 27 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack ( pop )
#line 1816 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
typedef 
#line 1812
enum _PARTITION_STYLE { 
PARTITION_STYLE_MBR, 
PARTITION_STYLE_GPT, 
PARTITION_STYLE_RAW
} PARTITION_STYLE; 
#line 1829
typedef 
#line 1824
struct _PARTITION_INFORMATION_GPT { 
GUID PartitionType; 
GUID PartitionId; 
DWORD64 Attributes; 
WCHAR Name[36]; 
} PARTITION_INFORMATION_GPT; typedef _PARTITION_INFORMATION_GPT *PPARTITION_INFORMATION_GPT; 
#line 1858
typedef 
#line 1853
struct _PARTITION_INFORMATION_MBR { 
BYTE PartitionType; 
BOOLEAN BootIndicator; 
BOOLEAN RecognizedPartition; 
DWORD HiddenSectors; 
} PARTITION_INFORMATION_MBR; typedef _PARTITION_INFORMATION_MBR *PPARTITION_INFORMATION_MBR; 
#line 1869
typedef SET_PARTITION_INFORMATION SET_PARTITION_INFORMATION_MBR; 
typedef PARTITION_INFORMATION_GPT SET_PARTITION_INFORMATION_GPT; 
#line 1879
typedef 
#line 1873
struct _SET_PARTITION_INFORMATION_EX { 
PARTITION_STYLE PartitionStyle; 
union { 
SET_PARTITION_INFORMATION_MBR Mbr; 
SET_PARTITION_INFORMATION_GPT Gpt; 
}; 
} SET_PARTITION_INFORMATION_EX; typedef _SET_PARTITION_INFORMATION_EX *PSET_PARTITION_INFORMATION_EX; 
#line 1890
typedef 
#line 1887
struct _CREATE_DISK_GPT { 
GUID DiskId; 
DWORD MaxPartitionCount; 
} CREATE_DISK_GPT; typedef _CREATE_DISK_GPT *PCREATE_DISK_GPT; 
#line 1899
typedef 
#line 1897
struct _CREATE_DISK_MBR { 
DWORD Signature; 
} CREATE_DISK_MBR; typedef _CREATE_DISK_MBR *PCREATE_DISK_MBR; 
#line 1908
typedef 
#line 1902
struct _CREATE_DISK { 
PARTITION_STYLE PartitionStyle; 
union { 
CREATE_DISK_MBR Mbr; 
CREATE_DISK_GPT Gpt; 
}; 
} CREATE_DISK; typedef _CREATE_DISK *PCREATE_DISK; 
#line 1919
typedef 
#line 1917
struct _GET_LENGTH_INFORMATION { 
LARGE_INTEGER Length; 
} GET_LENGTH_INFORMATION; typedef _GET_LENGTH_INFORMATION *PGET_LENGTH_INFORMATION; 
#line 1937
typedef 
#line 1927
struct _PARTITION_INFORMATION_EX { 
PARTITION_STYLE PartitionStyle; 
LARGE_INTEGER StartingOffset; 
LARGE_INTEGER PartitionLength; 
DWORD PartitionNumber; 
BOOLEAN RewritePartition; 
union { 
PARTITION_INFORMATION_MBR Mbr; 
PARTITION_INFORMATION_GPT Gpt; 
}; 
} PARTITION_INFORMATION_EX; typedef _PARTITION_INFORMATION_EX *PPARTITION_INFORMATION_EX; 
#line 1949
typedef 
#line 1944
struct _DRIVE_LAYOUT_INFORMATION_GPT { 
GUID DiskId; 
LARGE_INTEGER StartingUsableOffset; 
LARGE_INTEGER UsableLength; 
DWORD MaxPartitionCount; 
} DRIVE_LAYOUT_INFORMATION_GPT; typedef _DRIVE_LAYOUT_INFORMATION_GPT *PDRIVE_LAYOUT_INFORMATION_GPT; 
#line 1958
typedef 
#line 1956
struct _DRIVE_LAYOUT_INFORMATION_MBR { 
DWORD Signature; 
} DRIVE_LAYOUT_INFORMATION_MBR; typedef _DRIVE_LAYOUT_INFORMATION_MBR *PDRIVE_LAYOUT_INFORMATION_MBR; 
#line 1973
typedef 
#line 1965
struct _DRIVE_LAYOUT_INFORMATION_EX { 
DWORD PartitionStyle; 
DWORD PartitionCount; 
union { 
DRIVE_LAYOUT_INFORMATION_MBR Mbr; 
DRIVE_LAYOUT_INFORMATION_GPT Gpt; 
}; 
PARTITION_INFORMATION_EX PartitionEntry[1]; 
} DRIVE_LAYOUT_INFORMATION_EX; typedef _DRIVE_LAYOUT_INFORMATION_EX *PDRIVE_LAYOUT_INFORMATION_EX; 
#line 1990 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
typedef 
#line 1986
enum _DETECTION_TYPE { 
DetectNone, 
DetectInt13, 
DetectExInt13
} DETECTION_TYPE; 
#line 1998
typedef 
#line 1992
struct _DISK_INT13_INFO { 
WORD DriveSelect; 
DWORD MaxCylinders; 
WORD SectorsPerTrack; 
WORD MaxHeads; 
WORD NumberDrives; 
} DISK_INT13_INFO; typedef _DISK_INT13_INFO *PDISK_INT13_INFO; 
#line 2009
typedef 
#line 2000
struct _DISK_EX_INT13_INFO { 
WORD ExBufferSize; 
WORD ExFlags; 
DWORD ExCylinders; 
DWORD ExHeads; 
DWORD ExSectorsPerTrack; 
DWORD64 ExSectorsPerDrive; 
WORD ExSectorSize; 
WORD ExReserved; 
} DISK_EX_INT13_INFO; typedef _DISK_EX_INT13_INFO *PDISK_EX_INT13_INFO; 
#line 2032
typedef 
#line 2011
struct _DISK_DETECTION_INFO { 
DWORD SizeOfDetectInfo; 
DETECTION_TYPE DetectionType; 
union { 
struct { 
#line 2022
DISK_INT13_INFO Int13; 
#line 2029
DISK_EX_INT13_INFO ExInt13; 
}; 
}; 
} DISK_DETECTION_INFO; typedef _DISK_DETECTION_INFO *PDISK_DETECTION_INFO; 
#line 2047
typedef 
#line 2035
struct _DISK_PARTITION_INFO { 
DWORD SizeOfPartitionInfo; 
PARTITION_STYLE PartitionStyle; 
union { 
struct { 
DWORD Signature; 
DWORD CheckSum; 
} Mbr; 
struct { 
GUID DiskId; 
} Gpt; 
}; 
} DISK_PARTITION_INFO; typedef _DISK_PARTITION_INFO *PDISK_PARTITION_INFO; 
#line 2075 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
typedef 
#line 2071
struct _DISK_GEOMETRY_EX { 
DISK_GEOMETRY Geometry; 
LARGE_INTEGER DiskSize; 
BYTE Data[1]; 
} DISK_GEOMETRY_EX; typedef _DISK_GEOMETRY_EX *PDISK_GEOMETRY_EX; 
#line 2089 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
typedef 
#line 2086
struct _DISK_CONTROLLER_NUMBER { 
DWORD ControllerNumber; 
DWORD DiskNumber; 
} DISK_CONTROLLER_NUMBER; typedef _DISK_CONTROLLER_NUMBER *PDISK_CONTROLLER_NUMBER; 
#line 2120 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
typedef 
#line 2116
enum { 
EqualPriority, 
KeepPrefetchedData, 
KeepReadData
} DISK_CACHE_RETENTION_PRIORITY; 
#line 2199 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
typedef 
#line 2130
struct _DISK_CACHE_INFORMATION { 
#line 2138
BOOLEAN ParametersSavable; 
#line 2144
BOOLEAN ReadCacheEnabled; 
BOOLEAN WriteCacheEnabled; 
#line 2154
DISK_CACHE_RETENTION_PRIORITY ReadRetentionPriority; 
DISK_CACHE_RETENTION_PRIORITY WriteRetentionPriority; 
#line 2162
WORD DisablePrefetchTransferLength; 
#line 2170
BOOLEAN PrefetchScalar; 
#line 2180
union { 
struct { 
WORD Minimum; 
WORD Maximum; 
#line 2190
WORD MaximumBlocks; 
} ScalarPrefetch; 

struct { 
WORD Minimum; 
WORD Maximum; 
} BlockPrefetch; 
}; 

} DISK_CACHE_INFORMATION; typedef _DISK_CACHE_INFORMATION *PDISK_CACHE_INFORMATION; 
#line 2210
typedef 
#line 2207
struct _DISK_GROW_PARTITION { 
DWORD PartitionNumber; 
LARGE_INTEGER BytesToGrow; 
} DISK_GROW_PARTITION; typedef _DISK_GROW_PARTITION *PDISK_GROW_PARTITION; 
#line 2234 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
typedef 
#line 2231
struct _HISTOGRAM_BUCKET { 
DWORD Reads; 
DWORD Writes; 
} HISTOGRAM_BUCKET; typedef _HISTOGRAM_BUCKET *PHISTOGRAM_BUCKET; 
#line 2250
typedef 
#line 2238
struct _DISK_HISTOGRAM { 
LARGE_INTEGER DiskSize; 
LARGE_INTEGER Start; 
LARGE_INTEGER End; 
LARGE_INTEGER Average; 
LARGE_INTEGER AverageRead; 
LARGE_INTEGER AverageWrite; 
DWORD Granularity; 
DWORD Size; 
DWORD ReadCount; 
DWORD WriteCount; 
PHISTOGRAM_BUCKET Histogram; 
} DISK_HISTOGRAM; typedef _DISK_HISTOGRAM *PDISK_HISTOGRAM; 
#line 2287
typedef 
#line 2274
struct _DISK_PERFORMANCE { 
LARGE_INTEGER BytesRead; 
LARGE_INTEGER BytesWritten; 
LARGE_INTEGER ReadTime; 
LARGE_INTEGER WriteTime; 
LARGE_INTEGER IdleTime; 
DWORD ReadCount; 
DWORD WriteCount; 
DWORD QueueDepth; 
DWORD SplitCount; 
LARGE_INTEGER QueryTime; 
DWORD StorageDeviceNumber; 
WCHAR StorageManagerName[8]; 
} DISK_PERFORMANCE; typedef _DISK_PERFORMANCE *PDISK_PERFORMANCE; 
#line 2303
typedef 
#line 2295
struct _DISK_RECORD { 
LARGE_INTEGER ByteOffset; 
LARGE_INTEGER StartTime; 
LARGE_INTEGER EndTime; 
PVOID VirtualAddress; 
DWORD NumberOfBytes; 
BYTE DeviceNumber; 
BOOLEAN ReadRequest; 
} DISK_RECORD; typedef _DISK_RECORD *PDISK_RECORD; 
#line 2314
typedef 
#line 2310
struct _DISK_LOGGING { 
BYTE Function; 
PVOID BufferAddress; 
DWORD BufferSize; 
} DISK_LOGGING; typedef _DISK_LOGGING *PDISK_LOGGING; 
#line 2355
typedef 
#line 2352
enum _BIN_TYPES { 
RequestSize, 
RequestLocation
} BIN_TYPES; 
#line 2364
typedef 
#line 2361
struct _BIN_RANGE { 
LARGE_INTEGER StartValue; 
LARGE_INTEGER Length; 
} BIN_RANGE; typedef _BIN_RANGE *PBIN_RANGE; 
#line 2374
typedef 
#line 2370
struct _PERF_BIN { 
DWORD NumberOfBins; 
DWORD TypeOfBin; 
BIN_RANGE BinsRanges[1]; 
} PERF_BIN; typedef _PERF_BIN *PPERF_BIN; 
#line 2383
typedef 
#line 2380
struct _BIN_COUNT { 
BIN_RANGE BinRange; 
DWORD BinCount; 
} BIN_COUNT; typedef _BIN_COUNT *PBIN_COUNT; 
#line 2392
typedef 
#line 2389
struct _BIN_RESULTS { 
DWORD NumberOfBins; 
BIN_COUNT BinCounts[1]; 
} BIN_RESULTS; typedef _BIN_RESULTS *PBIN_RESULTS; 
#line 24 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\pshpack1.h"
#pragma warning(disable:4103)

#pragma pack ( push, 1 )
#line 2410 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
typedef 
#line 2403
struct _GETVERSIONINPARAMS { 
BYTE bVersion; 
BYTE bRevision; 
BYTE bReserved; 
BYTE bIDEDeviceMap; 
DWORD fCapabilities; 
DWORD dwReserved[4]; 
} GETVERSIONINPARAMS; typedef _GETVERSIONINPARAMS *PGETVERSIONINPARAMS; typedef _GETVERSIONINPARAMS *LPGETVERSIONINPARAMS; 
#line 27 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\poppack.h"
#pragma warning(disable:4103)
#line 24 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\pshpack1.h"
#pragma warning(disable:4103)
#line 29 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\poppack.h"
#pragma pack ( pop )
#line 26 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\pshpack1.h"
#pragma pack ( push, 1 )
#line 2435 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
typedef 
#line 2426
struct _IDEREGS { 
BYTE bFeaturesReg; 
BYTE bSectorCountReg; 
BYTE bSectorNumberReg; 
BYTE bCylLowReg; 
BYTE bCylHighReg; 
BYTE bDriveHeadReg; 
BYTE bCommandReg; 
BYTE bReserved; 
} IDEREGS; typedef _IDEREGS *PIDEREGS; typedef _IDEREGS *LPIDEREGS; 
#line 27 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\poppack.h"
#pragma warning(disable:4103)
#line 24 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\pshpack1.h"
#pragma warning(disable:4103)
#line 29 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\poppack.h"
#pragma pack ( pop )
#line 26 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\pshpack1.h"
#pragma pack ( push, 1 )
#line 2470 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
typedef 
#line 2462
struct _SENDCMDINPARAMS { 
DWORD cBufferSize; 
IDEREGS irDriveRegs; 
BYTE bDriveNumber; 

BYTE bReserved[3]; 
DWORD dwReserved[4]; 
BYTE bBuffer[1]; 
} SENDCMDINPARAMS; typedef _SENDCMDINPARAMS *PSENDCMDINPARAMS; typedef _SENDCMDINPARAMS *LPSENDCMDINPARAMS; 
#line 27 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\poppack.h"
#pragma warning(disable:4103)
#line 24 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\pshpack1.h"
#pragma warning(disable:4103)
#line 29 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\poppack.h"
#pragma pack ( pop )
#line 26 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\pshpack1.h"
#pragma pack ( push, 1 )
#line 2486 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
typedef 
#line 2478
struct _DRIVERSTATUS { 
BYTE bDriverError; 

BYTE bIDEError; 


BYTE bReserved[2]; 
DWORD dwReserved[2]; 
} DRIVERSTATUS; typedef _DRIVERSTATUS *PDRIVERSTATUS; typedef _DRIVERSTATUS *LPDRIVERSTATUS; 
#line 27 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\poppack.h"
#pragma warning(disable:4103)
#line 24 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\pshpack1.h"
#pragma warning(disable:4103)
#line 29 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\poppack.h"
#pragma pack ( pop )
#line 26 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\pshpack1.h"
#pragma pack ( push, 1 )
#line 2521 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
typedef 
#line 2517
struct _SENDCMDOUTPARAMS { 
DWORD cBufferSize; 
DRIVERSTATUS DriverStatus; 
BYTE bBuffer[1]; 
} SENDCMDOUTPARAMS; typedef _SENDCMDOUTPARAMS *PSENDCMDOUTPARAMS; typedef _SENDCMDOUTPARAMS *LPSENDCMDOUTPARAMS; 
#line 27 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack ( pop )
#line 2588 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
typedef 
#line 2579
enum _ELEMENT_TYPE { 
AllElements, 
ChangerTransport, 
ChangerSlot, 
ChangerIEPort, 
ChangerDrive, 
ChangerDoor, 
ChangerKeypad, 
ChangerMaxElement
} ELEMENT_TYPE; typedef _ELEMENT_TYPE *PELEMENT_TYPE; 




typedef 
#line 2590
struct _CHANGER_ELEMENT { 
ELEMENT_TYPE ElementType; 
DWORD ElementAddress; 
} CHANGER_ELEMENT; typedef _CHANGER_ELEMENT *PCHANGER_ELEMENT; 




typedef 
#line 2595
struct _CHANGER_ELEMENT_LIST { 
CHANGER_ELEMENT Element; 
DWORD NumberOfElements; 
} CHANGER_ELEMENT_LIST; typedef _CHANGER_ELEMENT_LIST *PCHANGER_ELEMENT_LIST; 
#line 2785
typedef 
#line 2689
struct _GET_CHANGER_PARAMETERS { 
#line 2695
DWORD Size; 
#line 2701
WORD NumberTransportElements; 
WORD NumberStorageElements; 
WORD NumberCleanerSlots; 
WORD NumberIEElements; 
WORD NumberDataTransferElements; 
#line 2711
WORD NumberOfDoors; 
#line 2718
WORD FirstSlotNumber; 
WORD FirstDriveNumber; 
WORD FirstTransportNumber; 
WORD FirstIEPortNumber; 
WORD FirstCleanerSlotAddress; 
#line 2728
WORD MagazineSize; 
#line 2735
DWORD DriveCleanTimeout; 
#line 2741
DWORD Features0; 
DWORD Features1; 
#line 2749
BYTE MoveFromTransport; 
BYTE MoveFromSlot; 
BYTE MoveFromIePort; 
BYTE MoveFromDrive; 
#line 2759
BYTE ExchangeFromTransport; 
BYTE ExchangeFromSlot; 
BYTE ExchangeFromIePort; 
BYTE ExchangeFromDrive; 
#line 2769
BYTE LockUnlockCapabilities; 
#line 2776
BYTE PositionCapabilities; 
#line 2782
BYTE Reserved1[2]; 
DWORD Reserved2[2]; 

} GET_CHANGER_PARAMETERS; typedef _GET_CHANGER_PARAMETERS *PGET_CHANGER_PARAMETERS; 
#line 2825
typedef 
#line 2792
struct _CHANGER_PRODUCT_DATA { 
#line 2798
BYTE VendorId[8]; 
#line 2804
BYTE ProductId[16]; 
#line 2810
BYTE Revision[4]; 
#line 2817
BYTE SerialNumber[32]; 
#line 2823
BYTE DeviceType; 

} CHANGER_PRODUCT_DATA; typedef _CHANGER_PRODUCT_DATA *PCHANGER_PRODUCT_DATA; 
#line 2850
typedef 
#line 2837
struct _CHANGER_SET_ACCESS { 
#line 2843
CHANGER_ELEMENT Element; 
#line 2849
DWORD Control; 
} CHANGER_SET_ACCESS; typedef _CHANGER_SET_ACCESS *PCHANGER_SET_ACCESS; 
#line 2874
typedef 
#line 2861
struct _CHANGER_READ_ELEMENT_STATUS { 
#line 2867
CHANGER_ELEMENT_LIST ElementList; 
#line 2873
BOOLEAN VolumeTagInfo; 
} CHANGER_READ_ELEMENT_STATUS; typedef _CHANGER_READ_ELEMENT_STATUS *PCHANGER_READ_ELEMENT_STATUS; 
#line 2938
typedef 
#line 2880
struct _CHANGER_ELEMENT_STATUS { 
#line 2886
CHANGER_ELEMENT Element; 
#line 2894
CHANGER_ELEMENT SrcElementAddress; 
#line 2900
DWORD Flags; 
#line 2906
DWORD ExceptionCode; 
#line 2913
BYTE TargetId; 
#line 2920
BYTE Lun; 
WORD Reserved; 
#line 2928
BYTE PrimaryVolumeID[36]; 
#line 2936
BYTE AlternateVolumeID[36]; 

} CHANGER_ELEMENT_STATUS; typedef _CHANGER_ELEMENT_STATUS *PCHANGER_ELEMENT_STATUS; 
#line 3019
typedef 
#line 2946
struct _CHANGER_ELEMENT_STATUS_EX { 
#line 2952
CHANGER_ELEMENT Element; 
#line 2960
CHANGER_ELEMENT SrcElementAddress; 
#line 2966
DWORD Flags; 
#line 2972
DWORD ExceptionCode; 
#line 2979
BYTE TargetId; 
#line 2986
BYTE Lun; 
WORD Reserved; 
#line 2994
BYTE PrimaryVolumeID[36]; 
#line 3002
BYTE AlternateVolumeID[36]; 




BYTE VendorIdentification[8]; 




BYTE ProductIdentification[16]; 




BYTE SerialNumber[32]; 

} CHANGER_ELEMENT_STATUS_EX; typedef _CHANGER_ELEMENT_STATUS_EX *PCHANGER_ELEMENT_STATUS_EX; 
#line 3074
typedef 
#line 3060
struct _CHANGER_INITIALIZE_ELEMENT_STATUS { 
#line 3066
CHANGER_ELEMENT_LIST ElementList; 
#line 3073
BOOLEAN BarCodeScan; 
} CHANGER_INITIALIZE_ELEMENT_STATUS; typedef _CHANGER_INITIALIZE_ELEMENT_STATUS *PCHANGER_INITIALIZE_ELEMENT_STATUS; 
#line 3101
typedef 
#line 3081
struct _CHANGER_SET_POSITION { 
#line 3088
CHANGER_ELEMENT Transport; 
#line 3094
CHANGER_ELEMENT Destination; 
#line 3100
BOOLEAN Flip; 
} CHANGER_SET_POSITION; typedef _CHANGER_SET_POSITION *PCHANGER_SET_POSITION; 
#line 3140
typedef 
#line 3108
struct _CHANGER_EXCHANGE_MEDIUM { 
#line 3114
CHANGER_ELEMENT Transport; 
#line 3120
CHANGER_ELEMENT Source; 
#line 3126
CHANGER_ELEMENT Destination1; 
#line 3132
CHANGER_ELEMENT Destination2; 
#line 3138
BOOLEAN Flip1; 
BOOLEAN Flip2; 
} CHANGER_EXCHANGE_MEDIUM; typedef _CHANGER_EXCHANGE_MEDIUM *PCHANGER_EXCHANGE_MEDIUM; 
#line 3172
typedef 
#line 3147
struct _CHANGER_MOVE_MEDIUM { 
#line 3153
CHANGER_ELEMENT Transport; 
#line 3159
CHANGER_ELEMENT Source; 
#line 3165
CHANGER_ELEMENT Destination; 
#line 3171
BOOLEAN Flip; 
} CHANGER_MOVE_MEDIUM; typedef _CHANGER_MOVE_MEDIUM *PCHANGER_MOVE_MEDIUM; 
#line 3203
typedef 
#line 3184
struct _CHANGER_SEND_VOLUME_TAG_INFORMATION { 
#line 3190
CHANGER_ELEMENT StartingElement; 
#line 3196
DWORD ActionCode; 
#line 3202
BYTE VolumeIDTemplate[40]; 
} CHANGER_SEND_VOLUME_TAG_INFORMATION; typedef _CHANGER_SEND_VOLUME_TAG_INFORMATION *PCHANGER_SEND_VOLUME_TAG_INFORMATION; 
#line 3224
typedef 
#line 3210
struct _READ_ELEMENT_ADDRESS_INFO { 
#line 3216
DWORD NumberOfElements; 
#line 3223
CHANGER_ELEMENT_STATUS ElementStatus[1]; 
} READ_ELEMENT_ADDRESS_INFO; typedef _READ_ELEMENT_ADDRESS_INFO *PREAD_ELEMENT_ADDRESS_INFO; 
#line 3266
typedef 
#line 3251
enum _CHANGER_DEVICE_PROBLEM_TYPE { 
DeviceProblemNone, 
DeviceProblemHardware, 
DeviceProblemCHMError, 
DeviceProblemDoorOpen, 
DeviceProblemCalibrationError, 
DeviceProblemTargetFailure, 
DeviceProblemCHMMoveError, 
DeviceProblemCHMZeroError, 
DeviceProblemCartridgeInsertError, 
DeviceProblemPositionError, 
DeviceProblemSensorError, 
DeviceProblemCartridgeEjectError, 
DeviceProblemGripperError, 
DeviceProblemDriveError
} CHANGER_DEVICE_PROBLEM_TYPE; typedef _CHANGER_DEVICE_PROBLEM_TYPE *PCHANGER_DEVICE_PROBLEM_TYPE; 
#line 3495 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
typedef 
#line 3490
struct _PATHNAME_BUFFER { 

DWORD PathNameLength; 
WCHAR Name[1]; 

} PATHNAME_BUFFER; typedef _PATHNAME_BUFFER *PPATHNAME_BUFFER; 
#line 3505
typedef 
#line 3501
struct _FSCTL_QUERY_FAT_BPB_BUFFER { 

BYTE First0x24BytesOfBootSector[36]; 

} FSCTL_QUERY_FAT_BPB_BUFFER; typedef _FSCTL_QUERY_FAT_BPB_BUFFER *PFSCTL_QUERY_FAT_BPB_BUFFER; 
#line 3532
typedef 
#line 3515
struct NTFS_VOLUME_DATA_BUFFER { 

LARGE_INTEGER VolumeSerialNumber; 
LARGE_INTEGER NumberSectors; 
LARGE_INTEGER TotalClusters; 
LARGE_INTEGER FreeClusters; 
LARGE_INTEGER TotalReserved; 
DWORD BytesPerSector; 
DWORD BytesPerCluster; 
DWORD BytesPerFileRecordSegment; 
DWORD ClustersPerFileRecordSegment; 
LARGE_INTEGER MftValidDataLength; 
LARGE_INTEGER MftStartLcn; 
LARGE_INTEGER Mft2StartLcn; 
LARGE_INTEGER MftZoneStart; 
LARGE_INTEGER MftZoneEnd; 

} NTFS_VOLUME_DATA_BUFFER, *PNTFS_VOLUME_DATA_BUFFER; 
#line 3541
typedef 
#line 3534
struct NTFS_EXTENDED_VOLUME_DATA { 

DWORD ByteCount; 

WORD MajorVersion; 
WORD MinorVersion; 

} NTFS_EXTENDED_VOLUME_DATA, *PNTFS_EXTENDED_VOLUME_DATA; 
#line 3553 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
typedef 
#line 3549
struct STARTING_LCN_INPUT_BUFFER { 

LARGE_INTEGER StartingLcn; 

} STARTING_LCN_INPUT_BUFFER, *PSTARTING_LCN_INPUT_BUFFER; 
#line 3561
typedef 
#line 3555
struct VOLUME_BITMAP_BUFFER { 

LARGE_INTEGER StartingLcn; 
LARGE_INTEGER BitmapSize; 
BYTE Buffer[1]; 

} VOLUME_BITMAP_BUFFER, *PVOLUME_BITMAP_BUFFER; 
#line 3573 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
typedef 
#line 3569
struct STARTING_VCN_INPUT_BUFFER { 

LARGE_INTEGER StartingVcn; 

} STARTING_VCN_INPUT_BUFFER, *PSTARTING_VCN_INPUT_BUFFER; 
#line 3584
typedef 
#line 3575
struct RETRIEVAL_POINTERS_BUFFER { 

DWORD ExtentCount; 
LARGE_INTEGER StartingVcn; 
struct { 
LARGE_INTEGER NextVcn; 
LARGE_INTEGER Lcn; 
} Extents[1]; 

} RETRIEVAL_POINTERS_BUFFER; typedef RETRIEVAL_POINTERS_BUFFER *PRETRIEVAL_POINTERS_BUFFER; 
#line 3596 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
typedef 
#line 3592
struct NTFS_FILE_RECORD_INPUT_BUFFER { 

LARGE_INTEGER FileReferenceNumber; 

} NTFS_FILE_RECORD_INPUT_BUFFER, *PNTFS_FILE_RECORD_INPUT_BUFFER; 
#line 3604
typedef 
#line 3598
struct NTFS_FILE_RECORD_OUTPUT_BUFFER { 

LARGE_INTEGER FileReferenceNumber; 
DWORD FileRecordLength; 
BYTE FileRecordBuffer[1]; 

} NTFS_FILE_RECORD_OUTPUT_BUFFER, *PNTFS_FILE_RECORD_OUTPUT_BUFFER; 
#line 3619 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
typedef 
#line 3612
struct MOVE_FILE_DATA { 

HANDLE FileHandle; 
LARGE_INTEGER StartingVcn; 
LARGE_INTEGER StartingLcn; 
DWORD ClusterCount; 

} MOVE_FILE_DATA, *PMOVE_FILE_DATA; 
#line 3627
typedef 
#line 3621
struct MOVE_FILE_RECORD_DATA { 

HANDLE FileHandle; 
LARGE_INTEGER SourceFileRecord; 
LARGE_INTEGER TargetFileRecord; 

} MOVE_FILE_RECORD_DATA, *PMOVE_FILE_RECORD_DATA; 
#line 3654 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
typedef 
#line 3651
struct FIND_BY_SID_DATA { 
DWORD Restart; 
SID Sid; 
} FIND_BY_SID_DATA, *PFIND_BY_SID_DATA; 
#line 3661
typedef 
#line 3656
struct FIND_BY_SID_OUTPUT { 
DWORD NextEntryOffset; 
DWORD FileIndex; 
DWORD FileNameLength; 
WCHAR FileName[1]; 
} FIND_BY_SID_OUTPUT, *PFIND_BY_SID_OUTPUT; 
#line 3680 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
typedef 
#line 3674
struct MFT_ENUM_DATA { 

DWORDLONG StartFileReferenceNumber; 
USN LowUsn; 
USN HighUsn; 

} MFT_ENUM_DATA, *PMFT_ENUM_DATA; 
#line 3691
typedef 
#line 3686
struct CREATE_USN_JOURNAL_DATA { 

DWORDLONG MaximumSize; 
DWORDLONG AllocationDelta; 

} CREATE_USN_JOURNAL_DATA, *PCREATE_USN_JOURNAL_DATA; 
#line 3706
typedef 
#line 3697
struct READ_USN_JOURNAL_DATA { 

USN StartUsn; 
DWORD ReasonMask; 
DWORD ReturnOnlyOnClose; 
DWORDLONG Timeout; 
DWORDLONG BytesToWaitFor; 
DWORDLONG UsnJournalID; 

} READ_USN_JOURNAL_DATA, *PREAD_USN_JOURNAL_DATA; 
#line 3745
typedef 
#line 3728
struct USN_RECORD { 

DWORD RecordLength; 
WORD MajorVersion; 
WORD MinorVersion; 
DWORDLONG FileReferenceNumber; 
DWORDLONG ParentFileReferenceNumber; 
USN Usn; 
LARGE_INTEGER TimeStamp; 
DWORD Reason; 
DWORD SourceInfo; 
DWORD SecurityId; 
DWORD FileAttributes; 
WORD FileNameLength; 
WORD FileNameOffset; 
WCHAR FileName[1]; 

} USN_RECORD, *PUSN_RECORD; 
#line 3786
typedef 
#line 3776
struct USN_JOURNAL_DATA { 

DWORDLONG UsnJournalID; 
USN FirstUsn; 
USN NextUsn; 
USN LowestValidUsn; 
USN MaxUsn; 
DWORDLONG MaximumSize; 
DWORDLONG AllocationDelta; 

} USN_JOURNAL_DATA, *PUSN_JOURNAL_DATA; 
#line 3797
typedef 
#line 3792
struct DELETE_USN_JOURNAL_DATA { 

DWORDLONG UsnJournalID; 
DWORD DeleteFlags; 

} DELETE_USN_JOURNAL_DATA, *PDELETE_USN_JOURNAL_DATA; 
#line 3814
typedef 
#line 3808
struct MARK_HANDLE_INFO { 

DWORD UsnSourceInfo; 
HANDLE VolumeHandle; 
DWORD HandleInfo; 

} MARK_HANDLE_INFO, *PMARK_HANDLE_INFO; 
#line 3880 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
typedef 
#line 3875
struct BULK_SECURITY_TEST_DATA { 

ACCESS_MASK DesiredAccess; 
DWORD SecurityIds[1]; 

} BULK_SECURITY_TEST_DATA, *PBULK_SECURITY_TEST_DATA; 
#line 3901 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
typedef 
#line 3897
struct _FILE_PREFETCH { 
DWORD Type; 
DWORD Count; 
DWORDLONG Prefetch[1]; 
} FILE_PREFETCH; typedef _FILE_PREFETCH *PFILE_PREFETCH; 
#line 3908
typedef 
#line 3903
struct _FILE_PREFETCH_EX { 
DWORD Type; 
DWORD Count; 
PVOID Context; 
DWORDLONG Prefetch[1]; 
} FILE_PREFETCH_EX; typedef _FILE_PREFETCH_EX *PFILE_PREFETCH_EX; 
#line 3923
typedef 
#line 3921
struct _VOLUME_COMPRESSION_STATE { 
BOOLEAN CompressNewFiles; 
} VOLUME_COMPRESSION_STATE; typedef _VOLUME_COMPRESSION_STATE *PVOLUME_COMPRESSION_STATE; 
#line 3956
typedef 
#line 3931
struct _FILESYSTEM_STATISTICS { 

WORD FileSystemType; 
WORD Version; 

DWORD SizeOfCompleteStructure; 

DWORD UserFileReads; 
DWORD UserFileReadBytes; 
DWORD UserDiskReads; 
DWORD UserFileWrites; 
DWORD UserFileWriteBytes; 
DWORD UserDiskWrites; 

DWORD MetaDataReads; 
DWORD MetaDataReadBytes; 
DWORD MetaDataDiskReads; 
DWORD MetaDataWrites; 
DWORD MetaDataWriteBytes; 
DWORD MetaDataDiskWrites; 
#line 3956
} FILESYSTEM_STATISTICS; typedef _FILESYSTEM_STATISTICS *PFILESYSTEM_STATISTICS; 
#line 3979
typedef 
#line 3967
struct _FAT_STATISTICS { 
DWORD CreateHits; 
DWORD SuccessfulCreates; 
DWORD FailedCreates; 

DWORD NonCachedReads; 
DWORD NonCachedReadBytes; 
DWORD NonCachedWrites; 
DWORD NonCachedWriteBytes; 

DWORD NonCachedDiskReads; 
DWORD NonCachedDiskWrites; 
} FAT_STATISTICS; typedef _FAT_STATISTICS *PFAT_STATISTICS; 
#line 4083
typedef 
#line 3981
struct _NTFS_STATISTICS { 

DWORD LogFileFullExceptions; 
DWORD OtherExceptions; 
#line 3990
DWORD MftReads; 
DWORD MftReadBytes; 
DWORD MftWrites; 
DWORD MftWriteBytes; 
struct { 
WORD Write; 
WORD Create; 
WORD SetInfo; 
WORD Flush; 
} MftWritesUserLevel; 

WORD MftWritesFlushForLogFileFull; 
WORD MftWritesLazyWriter; 
WORD MftWritesUserRequest; 

DWORD Mft2Writes; 
DWORD Mft2WriteBytes; 
struct { 
WORD Write; 
WORD Create; 
WORD SetInfo; 
WORD Flush; 
} Mft2WritesUserLevel; 

WORD Mft2WritesFlushForLogFileFull; 
WORD Mft2WritesLazyWriter; 
WORD Mft2WritesUserRequest; 

DWORD RootIndexReads; 
DWORD RootIndexReadBytes; 
DWORD RootIndexWrites; 
DWORD RootIndexWriteBytes; 

DWORD BitmapReads; 
DWORD BitmapReadBytes; 
DWORD BitmapWrites; 
DWORD BitmapWriteBytes; 

WORD BitmapWritesFlushForLogFileFull; 
WORD BitmapWritesLazyWriter; 
WORD BitmapWritesUserRequest; 

struct { 
WORD Write; 
WORD Create; 
WORD SetInfo; 
} BitmapWritesUserLevel; 

DWORD MftBitmapReads; 
DWORD MftBitmapReadBytes; 
DWORD MftBitmapWrites; 
DWORD MftBitmapWriteBytes; 

WORD MftBitmapWritesFlushForLogFileFull; 
WORD MftBitmapWritesLazyWriter; 
WORD MftBitmapWritesUserRequest; 

struct { 
WORD Write; 
WORD Create; 
WORD SetInfo; 
WORD Flush; 
} MftBitmapWritesUserLevel; 

DWORD UserIndexReads; 
DWORD UserIndexReadBytes; 
DWORD UserIndexWrites; 
DWORD UserIndexWriteBytes; 
#line 4063
DWORD LogFileReads; 
DWORD LogFileReadBytes; 
DWORD LogFileWrites; 
DWORD LogFileWriteBytes; 

struct { 
DWORD Calls; 
DWORD Clusters; 
DWORD Hints; 

DWORD RunsReturned; 

DWORD HintsHonored; 
DWORD HintsClusters; 
DWORD Cache; 
DWORD CacheClusters; 
DWORD CacheMiss; 
DWORD CacheMissClusters; 
} Allocate; 

} NTFS_STATISTICS; typedef _NTFS_STATISTICS *PNTFS_STATISTICS; 
#line 4091
#pragma warning(push)
#line 4093 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
#pragma warning(disable:4201)
#line 4117
typedef 
#line 4095
struct _FILE_OBJECTID_BUFFER { 
#line 4101
BYTE ObjectId[16]; 
#line 4108
union { 
struct { 
BYTE BirthVolumeId[16]; 
BYTE BirthObjectId[16]; 
BYTE DomainId[16]; 
}; 
BYTE ExtendedInfo[48]; 
}; 

} FILE_OBJECTID_BUFFER; typedef _FILE_OBJECTID_BUFFER *PFILE_OBJECTID_BUFFER; 


#pragma warning(pop)
#line 4135 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
typedef 
#line 4133
struct _FILE_SET_SPARSE_BUFFER { 
BOOLEAN SetSparse; 
} FILE_SET_SPARSE_BUFFER; typedef _FILE_SET_SPARSE_BUFFER *PFILE_SET_SPARSE_BUFFER; 
#line 4151 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
typedef 
#line 4146
struct _FILE_ZERO_DATA_INFORMATION { 

LARGE_INTEGER FileOffset; 
LARGE_INTEGER BeyondFinalZero; 

} FILE_ZERO_DATA_INFORMATION; typedef _FILE_ZERO_DATA_INFORMATION *PFILE_ZERO_DATA_INFORMATION; 
#line 4171 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
typedef 
#line 4166
struct _FILE_ALLOCATED_RANGE_BUFFER { 

LARGE_INTEGER FileOffset; 
LARGE_INTEGER Length; 

} FILE_ALLOCATED_RANGE_BUFFER; typedef _FILE_ALLOCATED_RANGE_BUFFER *PFILE_ALLOCATED_RANGE_BUFFER; 
#line 4189 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
typedef 
#line 4184
struct _ENCRYPTION_BUFFER { 

DWORD EncryptionOperation; 
BYTE Private[1]; 

} ENCRYPTION_BUFFER; typedef _ENCRYPTION_BUFFER *PENCRYPTION_BUFFER; 
#line 4207
typedef 
#line 4203
struct _DECRYPTION_STATUS_BUFFER { 

BOOLEAN NoEncryptedStreams; 

} DECRYPTION_STATUS_BUFFER; typedef _DECRYPTION_STATUS_BUFFER *PDECRYPTION_STATUS_BUFFER; 
#line 4231
typedef 
#line 4219
struct _REQUEST_RAW_ENCRYPTED_DATA { 
#line 4228
LONGLONG FileOffset; 
DWORD Length; 

} REQUEST_RAW_ENCRYPTED_DATA; typedef _REQUEST_RAW_ENCRYPTED_DATA *PREQUEST_RAW_ENCRYPTED_DATA; 
#line 4373
typedef 
#line 4257
struct _ENCRYPTED_DATA_INFO { 
#line 4266
DWORDLONG StartingFileOffset; 
#line 4276
DWORD OutputBufferOffset; 
#line 4287
DWORD BytesWithinFileSize; 
#line 4298
DWORD BytesWithinValidDataLength; 
#line 4307
WORD CompressionFormat; 
#line 4328
BYTE DataUnitShift; 
BYTE ChunkShift; 
BYTE ClusterShift; 
#line 4336
BYTE EncryptionFormat; 
#line 4343
WORD NumberOfDataBlocks; 
#line 4371
DWORD DataBlockSize[1]; 

} ENCRYPTED_DATA_INFO; 
typedef ENCRYPTED_DATA_INFO *PENCRYPTED_DATA_INFO; 
#line 4401 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
typedef 
#line 4385
struct _PLEX_READ_DATA_REQUEST { 
#line 4397
LARGE_INTEGER ByteOffset; 
DWORD ByteLength; 
DWORD PlexNumber; 

} PLEX_READ_DATA_REQUEST; typedef _PLEX_READ_DATA_REQUEST *PPLEX_READ_DATA_REQUEST; 
#line 4418 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
typedef 
#line 4413
struct _SI_COPYFILE { 
DWORD SourceFileNameLength; 
DWORD DestinationFileNameLength; 
DWORD Flags; 
WCHAR FileNameBuffer[1]; 
} SI_COPYFILE; typedef _SI_COPYFILE *PSI_COPYFILE; 
#line 4432 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
typedef 
#line 4430
struct _FILE_MAKE_COMPATIBLE_BUFFER { 
BOOLEAN CloseDisc; 
} FILE_MAKE_COMPATIBLE_BUFFER; typedef _FILE_MAKE_COMPATIBLE_BUFFER *PFILE_MAKE_COMPATIBLE_BUFFER; 
#line 4440
typedef 
#line 4438
struct _FILE_SET_DEFECT_MGMT_BUFFER { 
BOOLEAN Disable; 
} FILE_SET_DEFECT_MGMT_BUFFER; typedef _FILE_SET_DEFECT_MGMT_BUFFER *PFILE_SET_DEFECT_MGMT_BUFFER; 
#line 4451
typedef 
#line 4446
struct _FILE_QUERY_SPARING_BUFFER { 
DWORD SparingUnitBytes; 
BOOLEAN SoftwareSparing; 
DWORD TotalSpareBlocks; 
DWORD FreeSpareBlocks; 
} FILE_QUERY_SPARING_BUFFER; typedef _FILE_QUERY_SPARING_BUFFER *PFILE_QUERY_SPARING_BUFFER; 
#line 4469
typedef 
#line 4457
struct _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER { 
LARGE_INTEGER DirectoryCount; 
LARGE_INTEGER FileCount; 
WORD FsFormatMajVersion; 
WORD FsFormatMinVersion; 
WCHAR FsFormatName[12]; 
LARGE_INTEGER FormatTime; 
LARGE_INTEGER LastUpdateTime; 
WCHAR CopyrightInfo[34]; 
WCHAR AbstractInfo[34]; 
WCHAR FormattingImplementationInfo[34]; 
WCHAR LastModifyingImplementationInfo[34]; 
} FILE_QUERY_ON_DISK_VOL_INFO_BUFFER; typedef _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER *PFILE_QUERY_ON_DISK_VOL_INFO_BUFFER; 
#line 4491
typedef 
#line 4485
enum _SHRINK_VOLUME_REQUEST_TYPES { 

ShrinkPrepare = 1, 
ShrinkCommit, 
ShrinkAbort

} SHRINK_VOLUME_REQUEST_TYPES; typedef _SHRINK_VOLUME_REQUEST_TYPES *PSHRINK_VOLUME_REQUEST_TYPES; 
#line 4501
typedef 
#line 4495
struct _SHRINK_VOLUME_INFORMATION { 

SHRINK_VOLUME_REQUEST_TYPES ShrinkRequestType; 
DWORDLONG Flags; 
LONGLONG NewNumberOfSectors; 

} SHRINK_VOLUME_INFORMATION; typedef _SHRINK_VOLUME_INFORMATION *PSHRINK_VOLUME_INFORMATION; 
#line 4612
typedef 
#line 4558
struct _TXFS_MODIFY_RM { 
#line 4564
DWORD Flags; 
#line 4570
DWORD LogContainerCountMax; 
#line 4576
DWORD LogContainerCountMin; 
#line 4582
DWORD LogContainerCount; 
#line 4590
DWORD LogGrowthIncrement; 
#line 4597
DWORD LogAutoShrinkPercentage; 
#line 4603
DWORDLONG Reserved; 
#line 4610
WORD LoggingMode; 

} TXFS_MODIFY_RM; 
typedef _TXFS_MODIFY_RM *PTXFS_MODIFY_RM; 
#line 4813
typedef 
#line 4648
struct _TXFS_QUERY_RM_INFORMATION { 
#line 4655
DWORD BytesRequired; 
#line 4661
DWORDLONG TailLsn; 
#line 4667
DWORDLONG CurrentLsn; 
#line 4673
DWORDLONG ArchiveTailLsn; 
#line 4679
DWORDLONG LogContainerSize; 
#line 4685
LARGE_INTEGER HighestVirtualClock; 
#line 4691
DWORD LogContainerCount; 
#line 4697
DWORD LogContainerCountMax; 
#line 4703
DWORD LogContainerCountMin; 
#line 4711
DWORD LogGrowthIncrement; 
#line 4719
DWORD LogAutoShrinkPercentage; 
#line 4726
DWORD Flags; 
#line 4732
WORD LoggingMode; 
#line 4738
WORD Reserved; 
#line 4744
DWORD RmState; 
#line 4750
DWORDLONG LogCapacity; 
#line 4756
DWORDLONG LogFree; 
#line 4762
DWORDLONG TopsSize; 
#line 4768
DWORDLONG TopsUsed; 
#line 4774
DWORDLONG TransactionCount; 
#line 4780
DWORDLONG OnePCCount; 
#line 4786
DWORDLONG TwoPCCount; 
#line 4792
DWORDLONG NumberLogFileFull; 
#line 4798
DWORDLONG OldestTransactionAge; 
#line 4804
GUID RMName; 
#line 4811
DWORD TmLogPathOffset; 

} TXFS_QUERY_RM_INFORMATION; 
typedef _TXFS_QUERY_RM_INFORMATION *PTXFS_QUERY_RM_INFORMATION; 
#line 4832
typedef 
#line 4827
struct _TXFS_ROLLFORWARD_REDO_INFORMATION { 
LARGE_INTEGER LastVirtualClock; 
DWORDLONG LastRedoLsn; 
DWORDLONG HighestRecoveryLsn; 
DWORD Flags; 
} TXFS_ROLLFORWARD_REDO_INFORMATION; 
typedef _TXFS_ROLLFORWARD_REDO_INFORMATION *PTXFS_ROLLFORWARD_REDO_INFORMATION; 
#line 4959
typedef 
#line 4876
struct _TXFS_START_RM_INFORMATION { 
#line 4882
DWORD Flags; 
#line 4888
DWORDLONG LogContainerSize; 
#line 4894
DWORD LogContainerCountMin; 
#line 4900
DWORD LogContainerCountMax; 
#line 4908
DWORD LogGrowthIncrement; 
#line 4914
DWORD LogAutoShrinkPercentage; 
#line 4922
DWORD TmLogPathOffset; 
#line 4929
WORD TmLogPathLength; 
#line 4937
WORD LoggingMode; 
#line 4944
WORD LogPathLength; 
#line 4950
WORD Reserved; 
#line 4957
WCHAR LogPath[1]; 

} TXFS_START_RM_INFORMATION; 
typedef _TXFS_START_RM_INFORMATION *PTXFS_START_RM_INFORMATION; 
#line 4995
typedef 
#line 4966
struct _TXFS_GET_METADATA_INFO_OUT { 
#line 4972
struct { 
LONGLONG LowPart; 
LONGLONG HighPart; 
} TxfFileId; 
#line 4981
GUID LockingTransaction; 
#line 4987
DWORDLONG LastLsn; 
#line 4993
DWORD TransactionState; 

} TXFS_GET_METADATA_INFO_OUT; typedef _TXFS_GET_METADATA_INFO_OUT *PTXFS_GET_METADATA_INFO_OUT; 
#line 5035
typedef 
#line 5001
struct _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY { 
#line 5008
DWORDLONG Offset; 
#line 5014
DWORD UsnReason; 
#line 5020
LONGLONG FileId; 
#line 5026
DWORD Reserved1; 
DWORD Reserved2; 
LONGLONG Reserved3; 
#line 5034
WCHAR FileName[1]; 
} TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY; typedef _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY *PTXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY; 
#line 5065
typedef 
#line 5038
struct _TXFS_LIST_TRANSACTION_LOCKED_FILES { 
#line 5044
GUID KtmTransaction; 
#line 5050
DWORDLONG NumberOfFiles; 
#line 5057
DWORDLONG BufferSizeRequired; 
#line 5064
DWORDLONG Offset; 
} TXFS_LIST_TRANSACTION_LOCKED_FILES; typedef _TXFS_LIST_TRANSACTION_LOCKED_FILES *PTXFS_LIST_TRANSACTION_LOCKED_FILES; 
#line 5092
typedef 
#line 5071
struct _TXFS_LIST_TRANSACTIONS_ENTRY { 
#line 5077
GUID TransactionId; 
#line 5083
DWORD TransactionState; 
#line 5089
DWORD Reserved1; 
DWORD Reserved2; 
LONGLONG Reserved3; 
} TXFS_LIST_TRANSACTIONS_ENTRY; typedef _TXFS_LIST_TRANSACTIONS_ENTRY *PTXFS_LIST_TRANSACTIONS_ENTRY; 
#line 5109
typedef 
#line 5094
struct _TXFS_LIST_TRANSACTIONS { 
#line 5100
DWORDLONG NumberOfTransactions; 
#line 5108
DWORDLONG BufferSizeRequired; 
} TXFS_LIST_TRANSACTIONS; typedef _TXFS_LIST_TRANSACTIONS *PTXFS_LIST_TRANSACTIONS; 
#line 5131
typedef 
#line 5116
struct _TXFS_READ_BACKUP_INFORMATION_OUT { 
union { 
#line 5123
DWORD BufferLength; 
#line 5129
BYTE Buffer[1]; 
}; 
} TXFS_READ_BACKUP_INFORMATION_OUT; typedef _TXFS_READ_BACKUP_INFORMATION_OUT *PTXFS_READ_BACKUP_INFORMATION_OUT; 
#line 5145
typedef 
#line 5137
struct _TXFS_WRITE_BACKUP_INFORMATION { 
#line 5144
BYTE Buffer[1]; 
} TXFS_WRITE_BACKUP_INFORMATION; typedef _TXFS_WRITE_BACKUP_INFORMATION *PTXFS_WRITE_BACKUP_INFORMATION; 
#line 5191
typedef 
#line 5154
struct _TXFS_GET_TRANSACTED_VERSION { 
#line 5162
DWORD ThisBaseVersion; 
#line 5168
DWORD LatestVersion; 
#line 5175
WORD ThisMiniVersion; 
#line 5182
WORD FirstMiniVersion; 
#line 5189
WORD LatestMiniVersion; 

} TXFS_GET_TRANSACTED_VERSION; typedef _TXFS_GET_TRANSACTED_VERSION *PTXFS_GET_TRANSACTED_VERSION; 
#line 5217
typedef 
#line 5199
struct _TXFS_CREATE_MINIVERSION_INFO { 

WORD StructureVersion; 

WORD StructureLength; 
#line 5209
DWORD BaseVersion; 
#line 5215
WORD MiniVersion; 

} TXFS_CREATE_MINIVERSION_INFO; typedef _TXFS_CREATE_MINIVERSION_INFO *PTXFS_CREATE_MINIVERSION_INFO; 
#line 5231
typedef 
#line 5223
struct _TXFS_TRANSACTION_ACTIVE_INFO { 
#line 5229
BOOLEAN TransactionsActiveAtSnapshot; 

} TXFS_TRANSACTION_ACTIVE_INFO; typedef _TXFS_TRANSACTION_ACTIVE_INFO *PTXFS_TRANSACTION_ACTIVE_INFO; 
#line 5256 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winioctl.h"
typedef 
#line 5252
struct _DISK_EXTENT { 
DWORD DiskNumber; 
LARGE_INTEGER StartingOffset; 
LARGE_INTEGER ExtentLength; 
} DISK_EXTENT; typedef _DISK_EXTENT *PDISK_EXTENT; 
#line 5265
typedef 
#line 5262
struct _VOLUME_DISK_EXTENTS { 
DWORD NumberOfDiskExtents; 
DISK_EXTENT Extents[1]; 
} VOLUME_DISK_EXTENTS; typedef _VOLUME_DISK_EXTENTS *PVOLUME_DISK_EXTENTS; 
#line 31 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\winsmcrd.h"
extern "C" { typedef DWORD ULONG; }
extern "C" { typedef WORD UWORD; }
extern "C" { typedef BYTE UCHAR; }
#line 257 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\winsmcrd.h"
extern "C" { typedef 
#line 254
struct _SCARD_IO_REQUEST { 
DWORD dwProtocol; 
DWORD cbPciLength; 
} SCARD_IO_REQUEST; }extern "C" { typedef _SCARD_IO_REQUEST *PSCARD_IO_REQUEST; }extern "C" { typedef _SCARD_IO_REQUEST *LPSCARD_IO_REQUEST; }
extern "C" { typedef const SCARD_IO_REQUEST *LPCSCARD_IO_REQUEST; }
#line 272
extern "C" { typedef 
#line 265
struct SCARD_T0_COMMAND { 

BYTE bCla; 
BYTE bIns; 
BYTE bP1; 
BYTE bP2; 
BYTE bP3; 
} SCARD_T0_COMMAND, *LPSCARD_T0_COMMAND; }
#line 284
extern "C" { typedef 
#line 274
struct SCARD_T0_REQUEST { 
SCARD_IO_REQUEST ioRequest; 

BYTE bSw1; 
BYTE bSw2; 

union { 
SCARD_T0_COMMAND CmdBytes; 
BYTE rgbHeader[5]; 
}; 
} SCARD_T0_REQUEST; }

extern "C" { typedef SCARD_T0_REQUEST *PSCARD_T0_REQUEST; }extern "C" { typedef SCARD_T0_REQUEST *LPSCARD_T0_REQUEST; }
#line 295
extern "C" { typedef 
#line 293
struct SCARD_T1_REQUEST { 
SCARD_IO_REQUEST ioRequest; 
} SCARD_T1_REQUEST; }
extern "C" { typedef SCARD_T1_REQUEST *PSCARD_T1_REQUEST; }extern "C" { typedef SCARD_T1_REQUEST *LPSCARD_T1_REQUEST; }
#line 43 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winscard.h"
extern "C" { typedef const BYTE *LPCBYTE; }
#line 47 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winscard.h"
extern "C" { typedef const void *LPCVOID; }
#line 63 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winscard.h"
extern "C" __declspec( dllimport ) const SCARD_IO_REQUEST g_rgSCardT0Pci; 
extern "C" __declspec( dllimport ) const SCARD_IO_REQUEST g_rgSCardT1Pci; 
extern "C" __declspec( dllimport ) const SCARD_IO_REQUEST g_rgSCardRawPci; 
#line 80 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winscard.h"
extern "C" { typedef ULONG_PTR SCARDCONTEXT; }
extern "C" { typedef SCARDCONTEXT *PSCARDCONTEXT; }extern "C" { typedef SCARDCONTEXT *LPSCARDCONTEXT; }

extern "C" { typedef ULONG_PTR SCARDHANDLE; }
extern "C" { typedef SCARDHANDLE *PSCARDHANDLE; }extern "C" { typedef SCARDHANDLE *LPSCARDHANDLE; }
#line 103
extern "C" { extern LONG __stdcall SCardEstablishContext(DWORD, LPCVOID, LPCVOID, LPSCARDCONTEXT); } 
#line 110
extern "C" { extern LONG __stdcall SCardReleaseContext(SCARDCONTEXT); } 



extern "C" { extern LONG __stdcall SCardIsValidContext(SCARDCONTEXT); } 
#line 141
extern "C" { extern LONG __stdcall SCardListReaderGroupsA(SCARDCONTEXT, LPSTR, LPDWORD); } 




extern "C" { extern LONG __stdcall SCardListReaderGroupsW(SCARDCONTEXT, LPWSTR, LPDWORD); } 
#line 157 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winscard.h"
extern "C" { extern LONG __stdcall SCardListReadersA(SCARDCONTEXT, LPCSTR, LPSTR, LPDWORD); } 
#line 163
extern "C" { extern LONG __stdcall SCardListReadersW(SCARDCONTEXT, LPCWSTR, LPWSTR, LPDWORD); } 
#line 175 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winscard.h"
extern "C" { extern LONG __stdcall SCardListCardsA(SCARDCONTEXT, LPCBYTE, LPCGUID, DWORD, LPSTR, LPDWORD); } 
#line 183
extern "C" { extern LONG __stdcall SCardListCardsW(SCARDCONTEXT, LPCBYTE, LPCGUID, DWORD, LPWSTR, LPDWORD); } 
#line 212 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winscard.h"
extern "C" { extern LONG __stdcall SCardListInterfacesA(SCARDCONTEXT, LPCSTR, LPGUID, LPDWORD); } 
#line 218
extern "C" { extern LONG __stdcall SCardListInterfacesW(SCARDCONTEXT, LPCWSTR, LPGUID, LPDWORD); } 
#line 230 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winscard.h"
extern "C" { extern LONG __stdcall SCardGetProviderIdA(SCARDCONTEXT, LPCSTR, LPGUID); } 




extern "C" { extern LONG __stdcall SCardGetProviderIdW(SCARDCONTEXT, LPCWSTR, LPGUID); } 
#line 250 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winscard.h"
extern "C" { extern LONG __stdcall SCardGetCardTypeProviderNameA(SCARDCONTEXT, LPCSTR, DWORD, LPSTR, LPDWORD); } 
#line 257
extern "C" { extern LONG __stdcall SCardGetCardTypeProviderNameW(SCARDCONTEXT, LPCWSTR, DWORD, LPWSTR, LPDWORD); } 
#line 278 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winscard.h"
extern "C" { extern LONG __stdcall SCardIntroduceReaderGroupA(SCARDCONTEXT, LPCSTR); } 



extern "C" { extern LONG __stdcall SCardIntroduceReaderGroupW(SCARDCONTEXT, LPCWSTR); } 
#line 292 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winscard.h"
extern "C" { extern LONG __stdcall SCardForgetReaderGroupA(SCARDCONTEXT, LPCSTR); } 



extern "C" { extern LONG __stdcall SCardForgetReaderGroupW(SCARDCONTEXT, LPCWSTR); } 
#line 306 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winscard.h"
extern "C" { extern LONG __stdcall SCardIntroduceReaderA(SCARDCONTEXT, LPCSTR, LPCSTR); } 




extern "C" { extern LONG __stdcall SCardIntroduceReaderW(SCARDCONTEXT, LPCWSTR, LPCWSTR); } 
#line 322 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winscard.h"
extern "C" { extern LONG __stdcall SCardForgetReaderA(SCARDCONTEXT, LPCSTR); } 



extern "C" { extern LONG __stdcall SCardForgetReaderW(SCARDCONTEXT, LPCWSTR); } 
#line 336 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winscard.h"
extern "C" { extern LONG __stdcall SCardAddReaderToGroupA(SCARDCONTEXT, LPCSTR, LPCSTR); } 




extern "C" { extern LONG __stdcall SCardAddReaderToGroupW(SCARDCONTEXT, LPCWSTR, LPCWSTR); } 
#line 352 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winscard.h"
extern "C" { extern LONG __stdcall SCardRemoveReaderFromGroupA(SCARDCONTEXT, LPCSTR, LPCSTR); } 




extern "C" { extern LONG __stdcall SCardRemoveReaderFromGroupW(SCARDCONTEXT, LPCWSTR, LPCWSTR); } 
#line 368 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winscard.h"
extern "C" { extern LONG __stdcall SCardIntroduceCardTypeA(SCARDCONTEXT, LPCSTR, LPCGUID, LPCGUID, DWORD, LPCBYTE, LPCBYTE, DWORD); } 
#line 378
extern "C" { extern LONG __stdcall SCardIntroduceCardTypeW(SCARDCONTEXT, LPCWSTR, LPCGUID, LPCGUID, DWORD, LPCBYTE, LPCBYTE, DWORD); } 
#line 412 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winscard.h"
extern "C" { extern LONG __stdcall SCardSetCardTypeProviderNameA(SCARDCONTEXT, LPCSTR, DWORD, LPCSTR); } 
#line 418
extern "C" { extern LONG __stdcall SCardSetCardTypeProviderNameW(SCARDCONTEXT, LPCWSTR, DWORD, LPCWSTR); } 
#line 433 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winscard.h"
extern "C" { extern LONG __stdcall SCardForgetCardTypeA(SCARDCONTEXT, LPCSTR); } 



extern "C" { extern LONG __stdcall SCardForgetCardTypeW(SCARDCONTEXT, LPCWSTR); } 
#line 457 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winscard.h"
extern "C" { extern LONG __stdcall SCardFreeMemory(SCARDCONTEXT, LPCVOID); } 
#line 463
extern "C" { extern HANDLE __stdcall SCardAccessStartedEvent(); } 


extern "C" { extern void __stdcall SCardReleaseStartedEvent(); } 
#line 484 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winscard.h"
extern "C" { typedef 
#line 477
struct SCARD_READERSTATEA { 
LPCSTR szReader; 
LPVOID pvUserData; 
DWORD dwCurrentState; 
DWORD dwEventState; 
DWORD cbAtr; 
BYTE rgbAtr[36]; 
} SCARD_READERSTATEA, *PSCARD_READERSTATEA, *LPSCARD_READERSTATEA; }
#line 492
extern "C" { typedef 
#line 485
struct SCARD_READERSTATEW { 
LPCWSTR szReader; 
LPVOID pvUserData; 
DWORD dwCurrentState; 
DWORD dwEventState; 
DWORD cbAtr; 
BYTE rgbAtr[36]; 
} SCARD_READERSTATEW, *PSCARD_READERSTATEW, *LPSCARD_READERSTATEW; }
#line 498
extern "C" { typedef SCARD_READERSTATEA SCARD_READERSTATE; }
extern "C" { typedef PSCARD_READERSTATEA PSCARD_READERSTATE; }
extern "C" { typedef LPSCARD_READERSTATEA LPSCARD_READERSTATE; }
#line 574 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winscard.h"
extern "C" { extern LONG __stdcall SCardLocateCardsA(SCARDCONTEXT, LPCSTR, LPSCARD_READERSTATEA, DWORD); } 
#line 580
extern "C" { extern LONG __stdcall SCardLocateCardsW(SCARDCONTEXT, LPCWSTR, LPSCARD_READERSTATEW, DWORD); } 
#line 596 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winscard.h"
extern "C" { typedef 
#line 592
struct _SCARD_ATRMASK { 
DWORD cbAtr; 
BYTE rgbAtr[36]; 
BYTE rgbMask[36]; 
} SCARD_ATRMASK; }extern "C" { typedef _SCARD_ATRMASK *PSCARD_ATRMASK; }extern "C" { typedef _SCARD_ATRMASK *LPSCARD_ATRMASK; }



extern "C" { extern LONG __stdcall SCardLocateCardsByATRA(SCARDCONTEXT, LPSCARD_ATRMASK, DWORD, LPSCARD_READERSTATEA, DWORD); } 
#line 607
extern "C" { extern LONG __stdcall SCardLocateCardsByATRW(SCARDCONTEXT, LPSCARD_ATRMASK, DWORD, LPSCARD_READERSTATEW, DWORD); } 
#line 621 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winscard.h"
extern "C" { extern LONG __stdcall SCardGetStatusChangeA(SCARDCONTEXT, DWORD, LPSCARD_READERSTATEA, DWORD); } 
#line 627
extern "C" { extern LONG __stdcall SCardGetStatusChangeW(SCARDCONTEXT, DWORD, LPSCARD_READERSTATEW, DWORD); } 
#line 639 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winscard.h"
extern "C" { extern LONG __stdcall SCardCancel(SCARDCONTEXT); } 
#line 665
extern "C" { extern LONG __stdcall SCardConnectA(SCARDCONTEXT, LPCSTR, DWORD, DWORD, LPSCARDHANDLE, LPDWORD); } 
#line 673
extern "C" { extern LONG __stdcall SCardConnectW(SCARDCONTEXT, LPCWSTR, DWORD, DWORD, LPSCARDHANDLE, LPDWORD); } 
#line 687 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winscard.h"
extern "C" { extern LONG __stdcall SCardReconnect(SCARDHANDLE, DWORD, DWORD, DWORD, LPDWORD); } 
#line 695
extern "C" { extern LONG __stdcall SCardDisconnect(SCARDHANDLE, DWORD); } 




extern "C" { extern LONG __stdcall SCardBeginTransaction(SCARDHANDLE); } 



extern "C" { extern LONG __stdcall SCardEndTransaction(SCARDHANDLE, DWORD); } 




extern "C" { extern LONG __stdcall SCardCancelTransaction(SCARDHANDLE); } 
#line 718
extern "C" { extern LONG __stdcall SCardState(SCARDHANDLE, LPDWORD, LPDWORD, LPBYTE, LPDWORD); } 
#line 730
extern "C" { extern LONG __stdcall SCardStatusA(SCARDHANDLE, LPSTR, LPDWORD, LPDWORD, LPDWORD, LPBYTE, LPDWORD); } 
#line 739
extern "C" { extern LONG __stdcall SCardStatusW(SCARDHANDLE, LPWSTR, LPDWORD, LPDWORD, LPDWORD, LPBYTE, LPDWORD); } 
#line 754 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winscard.h"
extern "C" { extern LONG __stdcall SCardTransmit(SCARDHANDLE, LPCSCARD_IO_REQUEST, LPCBYTE, DWORD, LPSCARD_IO_REQUEST, LPBYTE, LPDWORD); } 
#line 765
extern "C" { extern LONG __stdcall SCardGetTransmitCount(SCARDHANDLE, LPDWORD); } 
#line 781 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winscard.h"
extern "C" { extern LONG __stdcall SCardControl(SCARDHANDLE, DWORD, LPCVOID, DWORD, LPVOID, DWORD, LPDWORD); } 
#line 791
extern "C" { extern LONG __stdcall SCardGetAttrib(SCARDHANDLE, DWORD, LPBYTE, LPDWORD); } 
#line 811
extern "C" { extern LONG __stdcall SCardSetAttrib(SCARDHANDLE, DWORD, LPCBYTE, DWORD); } 
#line 849
extern "C" { typedef SCARDHANDLE (__stdcall *LPOCNCONNPROCA)(SCARDCONTEXT, LPSTR, LPSTR, PVOID); }
extern "C" { typedef SCARDHANDLE (__stdcall *LPOCNCONNPROCW)(SCARDCONTEXT, LPWSTR, LPWSTR, PVOID); }
#line 856 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winscard.h"
extern "C" { typedef BOOL (__stdcall *LPOCNCHKPROC)(SCARDCONTEXT, SCARDHANDLE, PVOID); }
extern "C" { typedef void (__stdcall *LPOCNDSCPROC)(SCARDCONTEXT, SCARDHANDLE, PVOID); }
#line 884
extern "C" { typedef 
#line 869
struct OPENCARD_SEARCH_CRITERIAA { 
DWORD dwStructSize; 
LPSTR lpstrGroupNames; 
DWORD nMaxGroupNames; 

LPCGUID rgguidInterfaces; 
DWORD cguidInterfaces; 
LPSTR lpstrCardNames; 
DWORD nMaxCardNames; 
LPOCNCHKPROC lpfnCheck; 
LPOCNCONNPROCA lpfnConnect; 
LPOCNDSCPROC lpfnDisconnect; 
LPVOID pvUserData; 
DWORD dwShareMode; 
DWORD dwPreferredProtocols; 
} OPENCARD_SEARCH_CRITERIAA, *POPENCARD_SEARCH_CRITERIAA, *LPOPENCARD_SEARCH_CRITERIAA; }
#line 900
extern "C" { typedef 
#line 885
struct OPENCARD_SEARCH_CRITERIAW { 
DWORD dwStructSize; 
LPWSTR lpstrGroupNames; 
DWORD nMaxGroupNames; 

LPCGUID rgguidInterfaces; 
DWORD cguidInterfaces; 
LPWSTR lpstrCardNames; 
DWORD nMaxCardNames; 
LPOCNCHKPROC lpfnCheck; 
LPOCNCONNPROCW lpfnConnect; 
LPOCNDSCPROC lpfnDisconnect; 
LPVOID pvUserData; 
DWORD dwShareMode; 
DWORD dwPreferredProtocols; 
} OPENCARD_SEARCH_CRITERIAW, *POPENCARD_SEARCH_CRITERIAW, *LPOPENCARD_SEARCH_CRITERIAW; }
#line 906
extern "C" { typedef OPENCARD_SEARCH_CRITERIAA OPENCARD_SEARCH_CRITERIA; }
extern "C" { typedef POPENCARD_SEARCH_CRITERIAA POPENCARD_SEARCH_CRITERIA; }
extern "C" { typedef LPOPENCARD_SEARCH_CRITERIAA LPOPENCARD_SEARCH_CRITERIA; }
#line 936 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winscard.h"
extern "C" { typedef 
#line 916
struct OPENCARDNAME_EXA { 
DWORD dwStructSize; 
SCARDCONTEXT hSCardContext; 
HWND hwndOwner; 
DWORD dwFlags; 
LPCSTR lpstrTitle; 
LPCSTR lpstrSearchDesc; 
HICON hIcon; 
POPENCARD_SEARCH_CRITERIAA pOpenCardSearchCriteria; 
LPOCNCONNPROCA lpfnConnect; 
LPVOID pvUserData; 
DWORD dwShareMode; 
DWORD dwPreferredProtocols; 

LPSTR lpstrRdr; 
DWORD nMaxRdr; 
LPSTR lpstrCard; 
DWORD nMaxCard; 
DWORD dwActiveProtocol; 
SCARDHANDLE hCardHandle; 
} OPENCARDNAME_EXA, *POPENCARDNAME_EXA, *LPOPENCARDNAME_EXA; }
#line 957
extern "C" { typedef 
#line 937
struct OPENCARDNAME_EXW { 
DWORD dwStructSize; 
SCARDCONTEXT hSCardContext; 
HWND hwndOwner; 
DWORD dwFlags; 
LPCWSTR lpstrTitle; 
LPCWSTR lpstrSearchDesc; 
HICON hIcon; 
POPENCARD_SEARCH_CRITERIAW pOpenCardSearchCriteria; 
LPOCNCONNPROCW lpfnConnect; 
LPVOID pvUserData; 
DWORD dwShareMode; 
DWORD dwPreferredProtocols; 

LPWSTR lpstrRdr; 
DWORD nMaxRdr; 
LPWSTR lpstrCard; 
DWORD nMaxCard; 
DWORD dwActiveProtocol; 
SCARDHANDLE hCardHandle; 
} OPENCARDNAME_EXW, *POPENCARDNAME_EXW, *LPOPENCARDNAME_EXW; }
#line 963
extern "C" { typedef OPENCARDNAME_EXA OPENCARDNAME_EX; }
extern "C" { typedef POPENCARDNAME_EXA POPENCARDNAME_EX; }
extern "C" { typedef LPOPENCARDNAME_EXA LPOPENCARDNAME_EX; }
#line 981 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winscard.h"
extern "C" { extern LONG __stdcall SCardUIDlgSelectCardA(LPOPENCARDNAME_EXA); } 


extern "C" { extern LONG __stdcall SCardUIDlgSelectCardW(LPOPENCARDNAME_EXW); } 
#line 1022 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winscard.h"
extern "C" { typedef 
#line 998
struct OPENCARDNAMEA { 
DWORD dwStructSize; 
HWND hwndOwner; 
SCARDCONTEXT hSCardContext; 
LPSTR lpstrGroupNames; 
DWORD nMaxGroupNames; 
LPSTR lpstrCardNames; 
DWORD nMaxCardNames; 
LPCGUID rgguidInterfaces; 
DWORD cguidInterfaces; 
LPSTR lpstrRdr; 
DWORD nMaxRdr; 
LPSTR lpstrCard; 
DWORD nMaxCard; 
LPCSTR lpstrTitle; 
DWORD dwFlags; 
LPVOID pvUserData; 
DWORD dwShareMode; 
DWORD dwPreferredProtocols; 
DWORD dwActiveProtocol; 
LPOCNCONNPROCA lpfnConnect; 
LPOCNCHKPROC lpfnCheck; 
LPOCNDSCPROC lpfnDisconnect; 
SCARDHANDLE hCardHandle; 
} OPENCARDNAMEA, *POPENCARDNAMEA, *LPOPENCARDNAMEA; }
#line 1047
extern "C" { typedef 
#line 1023
struct OPENCARDNAMEW { 
DWORD dwStructSize; 
HWND hwndOwner; 
SCARDCONTEXT hSCardContext; 
LPWSTR lpstrGroupNames; 
DWORD nMaxGroupNames; 
LPWSTR lpstrCardNames; 
DWORD nMaxCardNames; 
LPCGUID rgguidInterfaces; 
DWORD cguidInterfaces; 
LPWSTR lpstrRdr; 
DWORD nMaxRdr; 
LPWSTR lpstrCard; 
DWORD nMaxCard; 
LPCWSTR lpstrTitle; 
DWORD dwFlags; 
LPVOID pvUserData; 
DWORD dwShareMode; 
DWORD dwPreferredProtocols; 
DWORD dwActiveProtocol; 
LPOCNCONNPROCW lpfnConnect; 
LPOCNCHKPROC lpfnCheck; 
LPOCNDSCPROC lpfnDisconnect; 
SCARDHANDLE hCardHandle; 
} OPENCARDNAMEW, *POPENCARDNAMEW, *LPOPENCARDNAMEW; }
#line 1053
extern "C" { typedef OPENCARDNAMEA OPENCARDNAME; }
extern "C" { typedef POPENCARDNAMEA POPENCARDNAME; }
extern "C" { typedef LPOPENCARDNAMEA LPOPENCARDNAME; }
#line 1067 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winscard.h"
extern "C" { extern LONG __stdcall GetOpenCardNameA(LPOPENCARDNAMEA); } 


extern "C" { extern LONG __stdcall GetOpenCardNameW(LPOPENCARDNAMEW); } 
#line 1079 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winscard.h"
extern "C" { extern LONG __stdcall SCardDlgExtendedError(); } 
#line 1088
extern "C" { extern LONG __stdcall SCardReadCacheA(SCARDCONTEXT, UUID *, DWORD, LPSTR, PBYTE, DWORD *); } 
#line 1096
extern "C" { extern LONG __stdcall SCardReadCacheW(SCARDCONTEXT, UUID *, DWORD, LPWSTR, PBYTE, DWORD *); } 
#line 1110 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winscard.h"
extern "C" { extern LONG __stdcall SCardWriteCacheA(SCARDCONTEXT, UUID *, DWORD, LPSTR, PBYTE, DWORD); } 
#line 1118
extern "C" { extern LONG __stdcall SCardWriteCacheW(SCARDCONTEXT, UUID *, DWORD, LPWSTR, PBYTE, DWORD); } 
#line 47 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\prsht.h"
#pragma warning(push)
#pragma warning(disable:4201)
#line 24 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\pshpack4.h"
#pragma warning(disable:4103)

#pragma pack ( push, 4 )
#line 89 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\prsht.h"
struct _PSP; 
extern "C" { typedef _PSP *HPROPSHEETPAGE; }


struct _PROPSHEETPAGEA; 
struct _PROPSHEETPAGEW; 
#line 97 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\prsht.h"
extern "C" { typedef UINT (__stdcall *LPFNPSPCALLBACKA)(HWND, UINT, _PROPSHEETPAGEA *); }
extern "C" { typedef UINT (__stdcall *LPFNPSPCALLBACKW)(HWND, UINT, _PROPSHEETPAGEW *); }
#line 137 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\prsht.h"
extern "C" { typedef LPCDLGTEMPLATE PROPSHEETPAGE_RESOURCE; }
#line 199 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\prsht.h"
extern "C" { typedef 
#line 196
struct _PROPSHEETPAGEA_V1 { 

DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; }; union { HICON hIcon; LPCSTR pszIcon; }; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent; 
} PROPSHEETPAGEA_V1; }extern "C" { typedef _PROPSHEETPAGEA_V1 *LPPROPSHEETPAGEA_V1; }
extern "C" { typedef const PROPSHEETPAGEA_V1 *LPCPROPSHEETPAGEA_V1; }
#line 208
extern "C" { typedef 
#line 202
struct _PROPSHEETPAGEA_V2 { 

DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; }; union { HICON hIcon; LPCSTR pszIcon; }; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent; 

LPCSTR pszHeaderTitle; 
LPCSTR pszHeaderSubTitle; 
} PROPSHEETPAGEA_V2; }extern "C" { typedef _PROPSHEETPAGEA_V2 *LPPROPSHEETPAGEA_V2; }
extern "C" { typedef const PROPSHEETPAGEA_V2 *LPCPROPSHEETPAGEA_V2; }
#line 219
extern "C" { typedef 
#line 211
struct _PROPSHEETPAGEA_V3 { 

DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; }; union { HICON hIcon; LPCSTR pszIcon; }; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent; 

LPCSTR pszHeaderTitle; 
LPCSTR pszHeaderSubTitle; 

HANDLE hActCtx; 
} PROPSHEETPAGEA_V3; }extern "C" { typedef _PROPSHEETPAGEA_V3 *LPPROPSHEETPAGEA_V3; }
extern "C" { typedef const PROPSHEETPAGEA_V3 *LPCPROPSHEETPAGEA_V3; }
#line 238
extern "C" { typedef 
#line 223
struct _PROPSHEETPAGEA { 

DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; }; union { HICON hIcon; LPCSTR pszIcon; }; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent; 

LPCSTR pszHeaderTitle; 
LPCSTR pszHeaderSubTitle; 

HANDLE hActCtx; 


union { 
HBITMAP hbmHeader; 
LPCSTR pszbmHeader; 
}; 

} PROPSHEETPAGEA_V4; }extern "C" { typedef _PROPSHEETPAGEA *LPPROPSHEETPAGEA_V4; }
extern "C" { typedef const PROPSHEETPAGEA_V4 *LPCPROPSHEETPAGEA_V4; }
#line 245 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\prsht.h"
extern "C" { typedef 
#line 242
struct _PROPSHEETPAGEW_V1 { 

DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; }; union { HICON hIcon; LPCWSTR pszIcon; }; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent; 
} PROPSHEETPAGEW_V1; }extern "C" { typedef _PROPSHEETPAGEW_V1 *LPPROPSHEETPAGEW_V1; }
extern "C" { typedef const PROPSHEETPAGEW_V1 *LPCPROPSHEETPAGEW_V1; }
#line 254
extern "C" { typedef 
#line 248
struct _PROPSHEETPAGEW_V2 { 

DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; }; union { HICON hIcon; LPCWSTR pszIcon; }; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent; 

LPCWSTR pszHeaderTitle; 
LPCWSTR pszHeaderSubTitle; 
} PROPSHEETPAGEW_V2; }extern "C" { typedef _PROPSHEETPAGEW_V2 *LPPROPSHEETPAGEW_V2; }
extern "C" { typedef const PROPSHEETPAGEW_V2 *LPCPROPSHEETPAGEW_V2; }
#line 265
extern "C" { typedef 
#line 257
struct _PROPSHEETPAGEW_V3 { 

DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; }; union { HICON hIcon; LPCWSTR pszIcon; }; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent; 

LPCWSTR pszHeaderTitle; 
LPCWSTR pszHeaderSubTitle; 

HANDLE hActCtx; 
} PROPSHEETPAGEW_V3; }extern "C" { typedef _PROPSHEETPAGEW_V3 *LPPROPSHEETPAGEW_V3; }
extern "C" { typedef const PROPSHEETPAGEW_V3 *LPCPROPSHEETPAGEW_V3; }
#line 284
extern "C" { typedef 
#line 269
struct _PROPSHEETPAGEW { 

DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; }; union { HICON hIcon; LPCWSTR pszIcon; }; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent; 

LPCWSTR pszHeaderTitle; 
LPCWSTR pszHeaderSubTitle; 

HANDLE hActCtx; 


union { 
HBITMAP hbmHeader; 
LPCWSTR pszbmHeader; 
}; 

} PROPSHEETPAGEW_V4; }extern "C" { typedef _PROPSHEETPAGEW *LPPROPSHEETPAGEW_V4; }
extern "C" { typedef const PROPSHEETPAGEW_V4 *LPCPROPSHEETPAGEW_V4; }
#line 304 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\prsht.h"
extern "C" { typedef PROPSHEETPAGEA_V4 PROPSHEETPAGEA_LATEST; }
extern "C" { typedef PROPSHEETPAGEW_V4 PROPSHEETPAGEW_LATEST; }
extern "C" { typedef LPPROPSHEETPAGEA_V4 LPPROPSHEETPAGEA_LATEST; }
extern "C" { typedef LPPROPSHEETPAGEW_V4 LPPROPSHEETPAGEW_LATEST; }
extern "C" { typedef LPCPROPSHEETPAGEA_V4 LPCPROPSHEETPAGEA_LATEST; }
extern "C" { typedef LPCPROPSHEETPAGEW_V4 LPCPROPSHEETPAGEW_LATEST; }
#line 321 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\prsht.h"
extern "C" { typedef PROPSHEETPAGEA_V4 PROPSHEETPAGEA; }
extern "C" { typedef PROPSHEETPAGEW_V4 PROPSHEETPAGEW; }
extern "C" { typedef LPPROPSHEETPAGEA_V4 LPPROPSHEETPAGEA; }
extern "C" { typedef LPPROPSHEETPAGEW_V4 LPPROPSHEETPAGEW; }
extern "C" { typedef LPCPROPSHEETPAGEA_V4 LPCPROPSHEETPAGEA; }
extern "C" { typedef LPCPROPSHEETPAGEW_V4 LPCPROPSHEETPAGEW; }
#line 466 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\prsht.h"
extern "C" { typedef int (__stdcall *PFNPROPSHEETCALLBACK)(HWND, UINT, LPARAM); }
#line 495
extern "C" { typedef 
#line 492
struct _PROPSHEETHEADERA_V1 { 

DWORD dwSize; DWORD dwFlags; HWND hwndParent; HINSTANCE hInstance; union { HICON hIcon; LPCSTR pszIcon; }; LPCSTR pszCaption; UINT nPages; union { UINT nStartPage; LPCSTR pStartPage; }; union { LPCPROPSHEETPAGEA ppsp; HPROPSHEETPAGE *phpage; }; PFNPROPSHEETCALLBACK pfnCallback; 
} PROPSHEETHEADERA_V1; }extern "C" { typedef _PROPSHEETHEADERA_V1 *LPPROPSHEETHEADERA_V1; }
extern "C" { typedef const PROPSHEETHEADERA_V1 *LPCPROPSHEETHEADERA_V1; }
#line 513
extern "C" { typedef 
#line 499
struct _PROPSHEETHEADERA_V2 { 

DWORD dwSize; DWORD dwFlags; HWND hwndParent; HINSTANCE hInstance; union { HICON hIcon; LPCSTR pszIcon; }; LPCSTR pszCaption; UINT nPages; union { UINT nStartPage; LPCSTR pStartPage; }; union { LPCPROPSHEETPAGEA ppsp; HPROPSHEETPAGE *phpage; }; PFNPROPSHEETCALLBACK pfnCallback; 

union { 
HBITMAP hbmWatermark; 
LPCSTR pszbmWatermark; 
}; 
HPALETTE hplWatermark; 

union { 
HBITMAP hbmHeader; 
LPCSTR pszbmHeader; 
}; 
} PROPSHEETHEADERA_V2; }extern "C" { typedef _PROPSHEETHEADERA_V2 *LPPROPSHEETHEADERA_V2; }
extern "C" { typedef const PROPSHEETHEADERA_V2 *LPCPROPSHEETHEADERA_V2; }
#line 544 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\prsht.h"
extern "C" { typedef 
#line 541
struct _PROPSHEETHEADERW_V1 { 

DWORD dwSize; DWORD dwFlags; HWND hwndParent; HINSTANCE hInstance; union { HICON hIcon; LPCWSTR pszIcon; }; LPCWSTR pszCaption; UINT nPages; union { UINT nStartPage; LPCWSTR pStartPage; }; union { LPCPROPSHEETPAGEW ppsp; HPROPSHEETPAGE *phpage; }; PFNPROPSHEETCALLBACK pfnCallback; 
} PROPSHEETHEADERW_V1; }extern "C" { typedef _PROPSHEETHEADERW_V1 *LPPROPSHEETHEADERW_V1; }
extern "C" { typedef const PROPSHEETHEADERW_V1 *LPCPROPSHEETHEADERW_V1; }
#line 562
extern "C" { typedef 
#line 548
struct _PROPSHEETHEADERW_V2 { 

DWORD dwSize; DWORD dwFlags; HWND hwndParent; HINSTANCE hInstance; union { HICON hIcon; LPCWSTR pszIcon; }; LPCWSTR pszCaption; UINT nPages; union { UINT nStartPage; LPCWSTR pStartPage; }; union { LPCPROPSHEETPAGEW ppsp; HPROPSHEETPAGE *phpage; }; PFNPROPSHEETCALLBACK pfnCallback; 

union { 
HBITMAP hbmWatermark; 
LPCWSTR pszbmWatermark; 
}; 
HPALETTE hplWatermark; 

union { 
HBITMAP hbmHeader; 
LPCWSTR pszbmHeader; 
}; 
} PROPSHEETHEADERW_V2; }extern "C" { typedef _PROPSHEETHEADERW_V2 *LPPROPSHEETHEADERW_V2; }
extern "C" { typedef const PROPSHEETHEADERW_V2 *LPCPROPSHEETHEADERW_V2; }
#line 590 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\prsht.h"
extern "C" { typedef PROPSHEETHEADERA_V2 PROPSHEETHEADERA; }
extern "C" { typedef PROPSHEETHEADERW_V2 PROPSHEETHEADERW; }
extern "C" { typedef LPPROPSHEETHEADERA_V2 LPPROPSHEETHEADERA; }
extern "C" { typedef LPPROPSHEETHEADERW_V2 LPPROPSHEETHEADERW; }
extern "C" { typedef LPCPROPSHEETHEADERA_V2 LPCPROPSHEETHEADERA; }
extern "C" { typedef LPCPROPSHEETHEADERW_V2 LPCPROPSHEETHEADERW; }
#line 642 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\prsht.h"
extern "C" { extern __declspec( dllimport ) HPROPSHEETPAGE __stdcall CreatePropertySheetPageA(LPCPROPSHEETPAGEA); } 
extern "C" { extern __declspec( dllimport ) HPROPSHEETPAGE __stdcall CreatePropertySheetPageW(LPCPROPSHEETPAGEW); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DestroyPropertySheetPage(HPROPSHEETPAGE); } 

extern "C" { extern __declspec( dllimport ) INT_PTR __stdcall PropertySheetA(LPCPROPSHEETHEADERA); } 

extern "C" { extern __declspec( dllimport ) INT_PTR __stdcall PropertySheetW(LPCPROPSHEETHEADERW); } 
#line 660 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\prsht.h"
extern "C" { typedef BOOL (__stdcall *LPFNADDPROPSHEETPAGE)(HPROPSHEETPAGE, LPARAM); }
extern "C" { typedef BOOL (__stdcall *LPFNADDPROPSHEETPAGES)(LPVOID, LPFNADDPROPSHEETPAGE, LPARAM); }
#line 668
extern "C" { typedef 
#line 664
struct _PSHNOTIFY { 

NMHDR hdr; 
LPARAM lParam; 
} PSHNOTIFY; }extern "C" { typedef _PSHNOTIFY *LPPSHNOTIFY; }
#line 951 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\prsht.h"
#pragma warning(pop)
#line 27 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack ( pop )
#line 54 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 49
struct _PRINTER_INFO_1A { 
DWORD Flags; 
LPSTR pDescription; 
LPSTR pName; 
LPSTR pComment; 
} PRINTER_INFO_1A; }extern "C" { typedef _PRINTER_INFO_1A *PPRINTER_INFO_1A; }extern "C" { typedef _PRINTER_INFO_1A *LPPRINTER_INFO_1A; }
#line 60
extern "C" { typedef 
#line 55
struct _PRINTER_INFO_1W { 
DWORD Flags; 
LPWSTR pDescription; 
LPWSTR pName; 
LPWSTR pComment; 
} PRINTER_INFO_1W; }extern "C" { typedef _PRINTER_INFO_1W *PPRINTER_INFO_1W; }extern "C" { typedef _PRINTER_INFO_1W *LPPRINTER_INFO_1W; }
#line 66
extern "C" { typedef PRINTER_INFO_1A PRINTER_INFO_1; }
extern "C" { typedef PPRINTER_INFO_1A PPRINTER_INFO_1; }
extern "C" { typedef LPPRINTER_INFO_1A LPPRINTER_INFO_1; }
#line 93 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 71
struct _PRINTER_INFO_2A { 
LPSTR pServerName; 
LPSTR pPrinterName; 
LPSTR pShareName; 
LPSTR pPortName; 
LPSTR pDriverName; 
LPSTR pComment; 
LPSTR pLocation; 
LPDEVMODEA pDevMode; 
LPSTR pSepFile; 
LPSTR pPrintProcessor; 
LPSTR pDatatype; 
LPSTR pParameters; 
PSECURITY_DESCRIPTOR pSecurityDescriptor; 
DWORD Attributes; 
DWORD Priority; 
DWORD DefaultPriority; 
DWORD StartTime; 
DWORD UntilTime; 
DWORD Status; 
DWORD cJobs; 
DWORD AveragePPM; 
} PRINTER_INFO_2A; }extern "C" { typedef _PRINTER_INFO_2A *PPRINTER_INFO_2A; }extern "C" { typedef _PRINTER_INFO_2A *LPPRINTER_INFO_2A; }
#line 116
extern "C" { typedef 
#line 94
struct _PRINTER_INFO_2W { 
LPWSTR pServerName; 
LPWSTR pPrinterName; 
LPWSTR pShareName; 
LPWSTR pPortName; 
LPWSTR pDriverName; 
LPWSTR pComment; 
LPWSTR pLocation; 
LPDEVMODEW pDevMode; 
LPWSTR pSepFile; 
LPWSTR pPrintProcessor; 
LPWSTR pDatatype; 
LPWSTR pParameters; 
PSECURITY_DESCRIPTOR pSecurityDescriptor; 
DWORD Attributes; 
DWORD Priority; 
DWORD DefaultPriority; 
DWORD StartTime; 
DWORD UntilTime; 
DWORD Status; 
DWORD cJobs; 
DWORD AveragePPM; 
} PRINTER_INFO_2W; }extern "C" { typedef _PRINTER_INFO_2W *PPRINTER_INFO_2W; }extern "C" { typedef _PRINTER_INFO_2W *LPPRINTER_INFO_2W; }
#line 122
extern "C" { typedef PRINTER_INFO_2A PRINTER_INFO_2; }
extern "C" { typedef PPRINTER_INFO_2A PPRINTER_INFO_2; }
extern "C" { typedef LPPRINTER_INFO_2A LPPRINTER_INFO_2; }
#line 129 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 127
struct _PRINTER_INFO_3 { 
PSECURITY_DESCRIPTOR pSecurityDescriptor; 
} PRINTER_INFO_3; }extern "C" { typedef _PRINTER_INFO_3 *PPRINTER_INFO_3; }extern "C" { typedef _PRINTER_INFO_3 *LPPRINTER_INFO_3; }
#line 135
extern "C" { typedef 
#line 131
struct _PRINTER_INFO_4A { 
LPSTR pPrinterName; 
LPSTR pServerName; 
DWORD Attributes; 
} PRINTER_INFO_4A; }extern "C" { typedef _PRINTER_INFO_4A *PPRINTER_INFO_4A; }extern "C" { typedef _PRINTER_INFO_4A *LPPRINTER_INFO_4A; }




extern "C" { typedef 
#line 136
struct _PRINTER_INFO_4W { 
LPWSTR pPrinterName; 
LPWSTR pServerName; 
DWORD Attributes; 
} PRINTER_INFO_4W; }extern "C" { typedef _PRINTER_INFO_4W *PPRINTER_INFO_4W; }extern "C" { typedef _PRINTER_INFO_4W *LPPRINTER_INFO_4W; }
#line 146
extern "C" { typedef PRINTER_INFO_4A PRINTER_INFO_4; }
extern "C" { typedef PPRINTER_INFO_4A PPRINTER_INFO_4; }
extern "C" { typedef LPPRINTER_INFO_4A LPPRINTER_INFO_4; }
#line 157 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 151
struct _PRINTER_INFO_5A { 
LPSTR pPrinterName; 
LPSTR pPortName; 
DWORD Attributes; 
DWORD DeviceNotSelectedTimeout; 
DWORD TransmissionRetryTimeout; 
} PRINTER_INFO_5A; }extern "C" { typedef _PRINTER_INFO_5A *PPRINTER_INFO_5A; }extern "C" { typedef _PRINTER_INFO_5A *LPPRINTER_INFO_5A; }
#line 164
extern "C" { typedef 
#line 158
struct _PRINTER_INFO_5W { 
LPWSTR pPrinterName; 
LPWSTR pPortName; 
DWORD Attributes; 
DWORD DeviceNotSelectedTimeout; 
DWORD TransmissionRetryTimeout; 
} PRINTER_INFO_5W; }extern "C" { typedef _PRINTER_INFO_5W *PPRINTER_INFO_5W; }extern "C" { typedef _PRINTER_INFO_5W *LPPRINTER_INFO_5W; }
#line 170
extern "C" { typedef PRINTER_INFO_5A PRINTER_INFO_5; }
extern "C" { typedef PPRINTER_INFO_5A PPRINTER_INFO_5; }
extern "C" { typedef LPPRINTER_INFO_5A LPPRINTER_INFO_5; }
#line 177 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 175
struct _PRINTER_INFO_6 { 
DWORD dwStatus; 
} PRINTER_INFO_6; }extern "C" { typedef _PRINTER_INFO_6 *PPRINTER_INFO_6; }extern "C" { typedef _PRINTER_INFO_6 *LPPRINTER_INFO_6; }
#line 183
extern "C" { typedef 
#line 180
struct _PRINTER_INFO_7A { 
LPSTR pszObjectGUID; 
DWORD dwAction; 
} PRINTER_INFO_7A; }extern "C" { typedef _PRINTER_INFO_7A *PPRINTER_INFO_7A; }extern "C" { typedef _PRINTER_INFO_7A *LPPRINTER_INFO_7A; }



extern "C" { typedef 
#line 184
struct _PRINTER_INFO_7W { 
LPWSTR pszObjectGUID; 
DWORD dwAction; 
} PRINTER_INFO_7W; }extern "C" { typedef _PRINTER_INFO_7W *PPRINTER_INFO_7W; }extern "C" { typedef _PRINTER_INFO_7W *LPPRINTER_INFO_7W; }
#line 193
extern "C" { typedef PRINTER_INFO_7A PRINTER_INFO_7; }
extern "C" { typedef PPRINTER_INFO_7A PPRINTER_INFO_7; }
extern "C" { typedef LPPRINTER_INFO_7A LPPRINTER_INFO_7; }
#line 206 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 204
struct _PRINTER_INFO_8A { 
LPDEVMODEA pDevMode; 
} PRINTER_INFO_8A; }extern "C" { typedef _PRINTER_INFO_8A *PPRINTER_INFO_8A; }extern "C" { typedef _PRINTER_INFO_8A *LPPRINTER_INFO_8A; }


extern "C" { typedef 
#line 207
struct _PRINTER_INFO_8W { 
LPDEVMODEW pDevMode; 
} PRINTER_INFO_8W; }extern "C" { typedef _PRINTER_INFO_8W *PPRINTER_INFO_8W; }extern "C" { typedef _PRINTER_INFO_8W *LPPRINTER_INFO_8W; }
#line 215
extern "C" { typedef PRINTER_INFO_8A PRINTER_INFO_8; }
extern "C" { typedef PPRINTER_INFO_8A PPRINTER_INFO_8; }
extern "C" { typedef LPPRINTER_INFO_8A LPPRINTER_INFO_8; }
#line 222 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 220
struct _PRINTER_INFO_9A { 
LPDEVMODEA pDevMode; 
} PRINTER_INFO_9A; }extern "C" { typedef _PRINTER_INFO_9A *PPRINTER_INFO_9A; }extern "C" { typedef _PRINTER_INFO_9A *LPPRINTER_INFO_9A; }


extern "C" { typedef 
#line 223
struct _PRINTER_INFO_9W { 
LPDEVMODEW pDevMode; 
} PRINTER_INFO_9W; }extern "C" { typedef _PRINTER_INFO_9W *PPRINTER_INFO_9W; }extern "C" { typedef _PRINTER_INFO_9W *LPPRINTER_INFO_9W; }
#line 231
extern "C" { typedef PRINTER_INFO_9A PRINTER_INFO_9; }
extern "C" { typedef PPRINTER_INFO_9A PPRINTER_INFO_9; }
extern "C" { typedef LPPRINTER_INFO_9A LPPRINTER_INFO_9; }
#line 333 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 319
struct _JOB_INFO_1A { 
DWORD JobId; 
LPSTR pPrinterName; 
LPSTR pMachineName; 
LPSTR pUserName; 
LPSTR pDocument; 
LPSTR pDatatype; 
LPSTR pStatus; 
DWORD Status; 
DWORD Priority; 
DWORD Position; 
DWORD TotalPages; 
DWORD PagesPrinted; 
SYSTEMTIME Submitted; 
} JOB_INFO_1A; }extern "C" { typedef _JOB_INFO_1A *PJOB_INFO_1A; }extern "C" { typedef _JOB_INFO_1A *LPJOB_INFO_1A; }
#line 348
extern "C" { typedef 
#line 334
struct _JOB_INFO_1W { 
DWORD JobId; 
LPWSTR pPrinterName; 
LPWSTR pMachineName; 
LPWSTR pUserName; 
LPWSTR pDocument; 
LPWSTR pDatatype; 
LPWSTR pStatus; 
DWORD Status; 
DWORD Priority; 
DWORD Position; 
DWORD TotalPages; 
DWORD PagesPrinted; 
SYSTEMTIME Submitted; 
} JOB_INFO_1W; }extern "C" { typedef _JOB_INFO_1W *PJOB_INFO_1W; }extern "C" { typedef _JOB_INFO_1W *LPJOB_INFO_1W; }
#line 354
extern "C" { typedef JOB_INFO_1A JOB_INFO_1; }
extern "C" { typedef PJOB_INFO_1A PJOB_INFO_1; }
extern "C" { typedef LPJOB_INFO_1A LPJOB_INFO_1; }
#line 383 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 359
struct _JOB_INFO_2A { 
DWORD JobId; 
LPSTR pPrinterName; 
LPSTR pMachineName; 
LPSTR pUserName; 
LPSTR pDocument; 
LPSTR pNotifyName; 
LPSTR pDatatype; 
LPSTR pPrintProcessor; 
LPSTR pParameters; 
LPSTR pDriverName; 
LPDEVMODEA pDevMode; 
LPSTR pStatus; 
PSECURITY_DESCRIPTOR pSecurityDescriptor; 
DWORD Status; 
DWORD Priority; 
DWORD Position; 
DWORD StartTime; 
DWORD UntilTime; 
DWORD TotalPages; 
DWORD Size; 
SYSTEMTIME Submitted; 
DWORD Time; 
DWORD PagesPrinted; 
} JOB_INFO_2A; }extern "C" { typedef _JOB_INFO_2A *PJOB_INFO_2A; }extern "C" { typedef _JOB_INFO_2A *LPJOB_INFO_2A; }
#line 408
extern "C" { typedef 
#line 384
struct _JOB_INFO_2W { 
DWORD JobId; 
LPWSTR pPrinterName; 
LPWSTR pMachineName; 
LPWSTR pUserName; 
LPWSTR pDocument; 
LPWSTR pNotifyName; 
LPWSTR pDatatype; 
LPWSTR pPrintProcessor; 
LPWSTR pParameters; 
LPWSTR pDriverName; 
LPDEVMODEW pDevMode; 
LPWSTR pStatus; 
PSECURITY_DESCRIPTOR pSecurityDescriptor; 
DWORD Status; 
DWORD Priority; 
DWORD Position; 
DWORD StartTime; 
DWORD UntilTime; 
DWORD TotalPages; 
DWORD Size; 
SYSTEMTIME Submitted; 
DWORD Time; 
DWORD PagesPrinted; 
} JOB_INFO_2W; }extern "C" { typedef _JOB_INFO_2W *PJOB_INFO_2W; }extern "C" { typedef _JOB_INFO_2W *LPJOB_INFO_2W; }
#line 414
extern "C" { typedef JOB_INFO_2A JOB_INFO_2; }
extern "C" { typedef PJOB_INFO_2A PJOB_INFO_2; }
extern "C" { typedef LPJOB_INFO_2A LPJOB_INFO_2; }
#line 423 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 419
struct _JOB_INFO_3 { 
DWORD JobId; 
DWORD NextJobId; 
DWORD Reserved; 
} JOB_INFO_3; }extern "C" { typedef _JOB_INFO_3 *PJOB_INFO_3; }extern "C" { typedef _JOB_INFO_3 *LPJOB_INFO_3; }
#line 450
extern "C" { typedef 
#line 425
struct _JOB_INFO_4A { 
DWORD JobId; 
LPSTR pPrinterName; 
LPSTR pMachineName; 
LPSTR pUserName; 
LPSTR pDocument; 
LPSTR pNotifyName; 
LPSTR pDatatype; 
LPSTR pPrintProcessor; 
LPSTR pParameters; 
LPSTR pDriverName; 
LPDEVMODEA pDevMode; 
LPSTR pStatus; 
PSECURITY_DESCRIPTOR pSecurityDescriptor; 
DWORD Status; 
DWORD Priority; 
DWORD Position; 
DWORD StartTime; 
DWORD UntilTime; 
DWORD TotalPages; 
DWORD Size; 
SYSTEMTIME Submitted; 
DWORD Time; 
DWORD PagesPrinted; 
LONG SizeHigh; 
} JOB_INFO_4A; }extern "C" { typedef _JOB_INFO_4A *PJOB_INFO_4A; }extern "C" { typedef _JOB_INFO_4A *LPJOB_INFO_4A; }
#line 476
extern "C" { typedef 
#line 451
struct _JOB_INFO_4W { 
DWORD JobId; 
LPWSTR pPrinterName; 
LPWSTR pMachineName; 
LPWSTR pUserName; 
LPWSTR pDocument; 
LPWSTR pNotifyName; 
LPWSTR pDatatype; 
LPWSTR pPrintProcessor; 
LPWSTR pParameters; 
LPWSTR pDriverName; 
LPDEVMODEW pDevMode; 
LPWSTR pStatus; 
PSECURITY_DESCRIPTOR pSecurityDescriptor; 
DWORD Status; 
DWORD Priority; 
DWORD Position; 
DWORD StartTime; 
DWORD UntilTime; 
DWORD TotalPages; 
DWORD Size; 
SYSTEMTIME Submitted; 
DWORD Time; 
DWORD PagesPrinted; 
LONG SizeHigh; 
} JOB_INFO_4W; }extern "C" { typedef _JOB_INFO_4W *PJOB_INFO_4W; }extern "C" { typedef _JOB_INFO_4W *LPJOB_INFO_4W; }
#line 482
extern "C" { typedef JOB_INFO_4A JOB_INFO_4; }
extern "C" { typedef PJOB_INFO_4A PJOB_INFO_4; }
extern "C" { typedef LPJOB_INFO_4A LPJOB_INFO_4; }
#line 527 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 524
struct _ADDJOB_INFO_1A { 
LPSTR Path; 
DWORD JobId; 
} ADDJOB_INFO_1A; }extern "C" { typedef _ADDJOB_INFO_1A *PADDJOB_INFO_1A; }extern "C" { typedef _ADDJOB_INFO_1A *LPADDJOB_INFO_1A; }



extern "C" { typedef 
#line 528
struct _ADDJOB_INFO_1W { 
LPWSTR Path; 
DWORD JobId; 
} ADDJOB_INFO_1W; }extern "C" { typedef _ADDJOB_INFO_1W *PADDJOB_INFO_1W; }extern "C" { typedef _ADDJOB_INFO_1W *LPADDJOB_INFO_1W; }
#line 537
extern "C" { typedef ADDJOB_INFO_1A ADDJOB_INFO_1; }
extern "C" { typedef PADDJOB_INFO_1A PADDJOB_INFO_1; }
extern "C" { typedef LPADDJOB_INFO_1A LPADDJOB_INFO_1; }
#line 545 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 543
struct _DRIVER_INFO_1A { 
LPSTR pName; 
} DRIVER_INFO_1A; }extern "C" { typedef _DRIVER_INFO_1A *PDRIVER_INFO_1A; }extern "C" { typedef _DRIVER_INFO_1A *LPDRIVER_INFO_1A; }


extern "C" { typedef 
#line 546
struct _DRIVER_INFO_1W { 
LPWSTR pName; 
} DRIVER_INFO_1W; }extern "C" { typedef _DRIVER_INFO_1W *PDRIVER_INFO_1W; }extern "C" { typedef _DRIVER_INFO_1W *LPDRIVER_INFO_1W; }
#line 554
extern "C" { typedef DRIVER_INFO_1A DRIVER_INFO_1; }
extern "C" { typedef PDRIVER_INFO_1A PDRIVER_INFO_1; }
extern "C" { typedef LPDRIVER_INFO_1A LPDRIVER_INFO_1; }
#line 566 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 559
struct _DRIVER_INFO_2A { 
DWORD cVersion; 
LPSTR pName; 
LPSTR pEnvironment; 
LPSTR pDriverPath; 
LPSTR pDataFile; 
LPSTR pConfigFile; 
} DRIVER_INFO_2A; }extern "C" { typedef _DRIVER_INFO_2A *PDRIVER_INFO_2A; }extern "C" { typedef _DRIVER_INFO_2A *LPDRIVER_INFO_2A; }
#line 574
extern "C" { typedef 
#line 567
struct _DRIVER_INFO_2W { 
DWORD cVersion; 
LPWSTR pName; 
LPWSTR pEnvironment; 
LPWSTR pDriverPath; 
LPWSTR pDataFile; 
LPWSTR pConfigFile; 
} DRIVER_INFO_2W; }extern "C" { typedef _DRIVER_INFO_2W *PDRIVER_INFO_2W; }extern "C" { typedef _DRIVER_INFO_2W *LPDRIVER_INFO_2W; }
#line 580
extern "C" { typedef DRIVER_INFO_2A DRIVER_INFO_2; }
extern "C" { typedef PDRIVER_INFO_2A PDRIVER_INFO_2; }
extern "C" { typedef LPDRIVER_INFO_2A LPDRIVER_INFO_2; }
#line 596 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 585
struct _DRIVER_INFO_3A { 
DWORD cVersion; 
LPSTR pName; 
LPSTR pEnvironment; 
LPSTR pDriverPath; 
LPSTR pDataFile; 
LPSTR pConfigFile; 
LPSTR pHelpFile; 
LPSTR pDependentFiles; 
LPSTR pMonitorName; 
LPSTR pDefaultDataType; 
} DRIVER_INFO_3A; }extern "C" { typedef _DRIVER_INFO_3A *PDRIVER_INFO_3A; }extern "C" { typedef _DRIVER_INFO_3A *LPDRIVER_INFO_3A; }
#line 608
extern "C" { typedef 
#line 597
struct _DRIVER_INFO_3W { 
DWORD cVersion; 
LPWSTR pName; 
LPWSTR pEnvironment; 
LPWSTR pDriverPath; 
LPWSTR pDataFile; 
LPWSTR pConfigFile; 
LPWSTR pHelpFile; 
LPWSTR pDependentFiles; 
LPWSTR pMonitorName; 
LPWSTR pDefaultDataType; 
} DRIVER_INFO_3W; }extern "C" { typedef _DRIVER_INFO_3W *PDRIVER_INFO_3W; }extern "C" { typedef _DRIVER_INFO_3W *LPDRIVER_INFO_3W; }
#line 614
extern "C" { typedef DRIVER_INFO_3A DRIVER_INFO_3; }
extern "C" { typedef PDRIVER_INFO_3A PDRIVER_INFO_3; }
extern "C" { typedef LPDRIVER_INFO_3A LPDRIVER_INFO_3; }
#line 631 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 619
struct _DRIVER_INFO_4A { 
DWORD cVersion; 
LPSTR pName; 
LPSTR pEnvironment; 
LPSTR pDriverPath; 
LPSTR pDataFile; 
LPSTR pConfigFile; 
LPSTR pHelpFile; 
LPSTR pDependentFiles; 
LPSTR pMonitorName; 
LPSTR pDefaultDataType; 
LPSTR pszzPreviousNames; 
} DRIVER_INFO_4A; }extern "C" { typedef _DRIVER_INFO_4A *PDRIVER_INFO_4A; }extern "C" { typedef _DRIVER_INFO_4A *LPDRIVER_INFO_4A; }
#line 644
extern "C" { typedef 
#line 632
struct _DRIVER_INFO_4W { 
DWORD cVersion; 
LPWSTR pName; 
LPWSTR pEnvironment; 
LPWSTR pDriverPath; 
LPWSTR pDataFile; 
LPWSTR pConfigFile; 
LPWSTR pHelpFile; 
LPWSTR pDependentFiles; 
LPWSTR pMonitorName; 
LPWSTR pDefaultDataType; 
LPWSTR pszzPreviousNames; 
} DRIVER_INFO_4W; }extern "C" { typedef _DRIVER_INFO_4W *PDRIVER_INFO_4W; }extern "C" { typedef _DRIVER_INFO_4W *LPDRIVER_INFO_4W; }
#line 650
extern "C" { typedef DRIVER_INFO_4A DRIVER_INFO_4; }
extern "C" { typedef PDRIVER_INFO_4A PDRIVER_INFO_4; }
extern "C" { typedef LPDRIVER_INFO_4A LPDRIVER_INFO_4; }
#line 665 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 655
struct _DRIVER_INFO_5A { 
DWORD cVersion; 
LPSTR pName; 
LPSTR pEnvironment; 
LPSTR pDriverPath; 
LPSTR pDataFile; 
LPSTR pConfigFile; 
DWORD dwDriverAttributes; 
DWORD dwConfigVersion; 
DWORD dwDriverVersion; 
} DRIVER_INFO_5A; }extern "C" { typedef _DRIVER_INFO_5A *PDRIVER_INFO_5A; }extern "C" { typedef _DRIVER_INFO_5A *LPDRIVER_INFO_5A; }
#line 676
extern "C" { typedef 
#line 666
struct _DRIVER_INFO_5W { 
DWORD cVersion; 
LPWSTR pName; 
LPWSTR pEnvironment; 
LPWSTR pDriverPath; 
LPWSTR pDataFile; 
LPWSTR pConfigFile; 
DWORD dwDriverAttributes; 
DWORD dwConfigVersion; 
DWORD dwDriverVersion; 
} DRIVER_INFO_5W; }extern "C" { typedef _DRIVER_INFO_5W *PDRIVER_INFO_5W; }extern "C" { typedef _DRIVER_INFO_5W *LPDRIVER_INFO_5W; }
#line 682
extern "C" { typedef DRIVER_INFO_5A DRIVER_INFO_5; }
extern "C" { typedef PDRIVER_INFO_5A PDRIVER_INFO_5; }
extern "C" { typedef LPDRIVER_INFO_5A LPDRIVER_INFO_5; }
#line 705 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 687
struct _DRIVER_INFO_6A { 
DWORD cVersion; 
LPSTR pName; 
LPSTR pEnvironment; 
LPSTR pDriverPath; 
LPSTR pDataFile; 
LPSTR pConfigFile; 
LPSTR pHelpFile; 
LPSTR pDependentFiles; 
LPSTR pMonitorName; 
LPSTR pDefaultDataType; 
LPSTR pszzPreviousNames; 
FILETIME ftDriverDate; 
DWORDLONG dwlDriverVersion; 
LPSTR pszMfgName; 
LPSTR pszOEMUrl; 
LPSTR pszHardwareID; 
LPSTR pszProvider; 
} DRIVER_INFO_6A; }extern "C" { typedef _DRIVER_INFO_6A *PDRIVER_INFO_6A; }extern "C" { typedef _DRIVER_INFO_6A *LPDRIVER_INFO_6A; }
#line 724
extern "C" { typedef 
#line 706
struct _DRIVER_INFO_6W { 
DWORD cVersion; 
LPWSTR pName; 
LPWSTR pEnvironment; 
LPWSTR pDriverPath; 
LPWSTR pDataFile; 
LPWSTR pConfigFile; 
LPWSTR pHelpFile; 
LPWSTR pDependentFiles; 
LPWSTR pMonitorName; 
LPWSTR pDefaultDataType; 
LPWSTR pszzPreviousNames; 
FILETIME ftDriverDate; 
DWORDLONG dwlDriverVersion; 
LPWSTR pszMfgName; 
LPWSTR pszOEMUrl; 
LPWSTR pszHardwareID; 
LPWSTR pszProvider; 
} DRIVER_INFO_6W; }extern "C" { typedef _DRIVER_INFO_6W *PDRIVER_INFO_6W; }extern "C" { typedef _DRIVER_INFO_6W *LPDRIVER_INFO_6W; }
#line 730
extern "C" { typedef DRIVER_INFO_6A DRIVER_INFO_6; }
extern "C" { typedef PDRIVER_INFO_6A PDRIVER_INFO_6; }
extern "C" { typedef LPDRIVER_INFO_6A LPDRIVER_INFO_6; }
#line 763 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 737
struct _DRIVER_INFO_8A { 
DWORD cVersion; 
LPSTR pName; 
LPSTR pEnvironment; 
LPSTR pDriverPath; 
LPSTR pDataFile; 
LPSTR pConfigFile; 
LPSTR pHelpFile; 
LPSTR pDependentFiles; 
LPSTR pMonitorName; 
LPSTR pDefaultDataType; 
LPSTR pszzPreviousNames; 
FILETIME ftDriverDate; 
DWORDLONG dwlDriverVersion; 
LPSTR pszMfgName; 
LPSTR pszOEMUrl; 
LPSTR pszHardwareID; 
LPSTR pszProvider; 
LPSTR pszPrintProcessor; 
LPSTR pszVendorSetup; 
LPSTR pszzColorProfiles; 
LPSTR pszInfPath; 
DWORD dwPrinterDriverAttributes; 
LPSTR pszzCoreDriverDependencies; 
FILETIME ftMinInboxDriverVerDate; 
DWORDLONG dwlMinInboxDriverVerVersion; 
} DRIVER_INFO_8A; }extern "C" { typedef _DRIVER_INFO_8A *PDRIVER_INFO_8A; }extern "C" { typedef _DRIVER_INFO_8A *LPDRIVER_INFO_8A; }
#line 790
extern "C" { typedef 
#line 764
struct _DRIVER_INFO_8W { 
DWORD cVersion; 
LPWSTR pName; 
LPWSTR pEnvironment; 
LPWSTR pDriverPath; 
LPWSTR pDataFile; 
LPWSTR pConfigFile; 
LPWSTR pHelpFile; 
LPWSTR pDependentFiles; 
LPWSTR pMonitorName; 
LPWSTR pDefaultDataType; 
LPWSTR pszzPreviousNames; 
FILETIME ftDriverDate; 
DWORDLONG dwlDriverVersion; 
LPWSTR pszMfgName; 
LPWSTR pszOEMUrl; 
LPWSTR pszHardwareID; 
LPWSTR pszProvider; 
LPWSTR pszPrintProcessor; 
LPWSTR pszVendorSetup; 
LPWSTR pszzColorProfiles; 
LPWSTR pszInfPath; 
DWORD dwPrinterDriverAttributes; 
LPWSTR pszzCoreDriverDependencies; 
FILETIME ftMinInboxDriverVerDate; 
DWORDLONG dwlMinInboxDriverVerVersion; 
} DRIVER_INFO_8W; }extern "C" { typedef _DRIVER_INFO_8W *PDRIVER_INFO_8W; }extern "C" { typedef _DRIVER_INFO_8W *LPDRIVER_INFO_8W; }
#line 796
extern "C" { typedef DRIVER_INFO_8A DRIVER_INFO_8; }
extern "C" { typedef PDRIVER_INFO_8A PDRIVER_INFO_8; }
extern "C" { typedef LPDRIVER_INFO_8A LPDRIVER_INFO_8; }
#line 828 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 824
struct _DOC_INFO_1A { 
LPSTR pDocName; 
LPSTR pOutputFile; 
LPSTR pDatatype; 
} DOC_INFO_1A; }extern "C" { typedef _DOC_INFO_1A *PDOC_INFO_1A; }extern "C" { typedef _DOC_INFO_1A *LPDOC_INFO_1A; }




extern "C" { typedef 
#line 829
struct _DOC_INFO_1W { 
LPWSTR pDocName; 
LPWSTR pOutputFile; 
LPWSTR pDatatype; 
} DOC_INFO_1W; }extern "C" { typedef _DOC_INFO_1W *PDOC_INFO_1W; }extern "C" { typedef _DOC_INFO_1W *LPDOC_INFO_1W; }
#line 839
extern "C" { typedef DOC_INFO_1A DOC_INFO_1; }
extern "C" { typedef PDOC_INFO_1A PDOC_INFO_1; }
extern "C" { typedef LPDOC_INFO_1A LPDOC_INFO_1; }
#line 849 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 844
struct _FORM_INFO_1A { 
DWORD Flags; 
LPSTR pName; 
SIZEL Size; 
RECTL ImageableArea; 
} FORM_INFO_1A; }extern "C" { typedef _FORM_INFO_1A *PFORM_INFO_1A; }extern "C" { typedef _FORM_INFO_1A *LPFORM_INFO_1A; }
#line 855
extern "C" { typedef 
#line 850
struct _FORM_INFO_1W { 
DWORD Flags; 
LPWSTR pName; 
SIZEL Size; 
RECTL ImageableArea; 
} FORM_INFO_1W; }extern "C" { typedef _FORM_INFO_1W *PFORM_INFO_1W; }extern "C" { typedef _FORM_INFO_1W *LPFORM_INFO_1W; }
#line 861
extern "C" { typedef FORM_INFO_1A FORM_INFO_1; }
extern "C" { typedef PFORM_INFO_1A PFORM_INFO_1; }
extern "C" { typedef LPFORM_INFO_1A LPFORM_INFO_1; }
#line 884 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 873
struct _FORM_INFO_2A { 
DWORD Flags; 
LPCSTR pName; 
SIZEL Size; 
RECTL ImageableArea; 
LPCSTR pKeyword; 
DWORD StringType; 
LPCSTR pMuiDll; 
DWORD dwResourceId; 
LPCSTR pDisplayName; 
LANGID wLangId; 
} FORM_INFO_2A; }extern "C" { typedef _FORM_INFO_2A *PFORM_INFO_2A; }extern "C" { typedef _FORM_INFO_2A *LPFORM_INFO_2A; }
#line 896
extern "C" { typedef 
#line 885
struct _FORM_INFO_2W { 
DWORD Flags; 
LPCWSTR pName; 
SIZEL Size; 
RECTL ImageableArea; 
LPCSTR pKeyword; 
DWORD StringType; 
LPCWSTR pMuiDll; 
DWORD dwResourceId; 
LPCWSTR pDisplayName; 
LANGID wLangId; 
} FORM_INFO_2W; }extern "C" { typedef _FORM_INFO_2W *PFORM_INFO_2W; }extern "C" { typedef _FORM_INFO_2W *LPFORM_INFO_2W; }
#line 902
extern "C" { typedef FORM_INFO_2A FORM_INFO_2; }
extern "C" { typedef PFORM_INFO_2A PFORM_INFO_2; }
extern "C" { typedef LPFORM_INFO_2A LPFORM_INFO_2; }
#line 914 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 908
struct _DOC_INFO_2A { 
LPSTR pDocName; 
LPSTR pOutputFile; 
LPSTR pDatatype; 
DWORD dwMode; 
DWORD JobId; 
} DOC_INFO_2A; }extern "C" { typedef _DOC_INFO_2A *PDOC_INFO_2A; }extern "C" { typedef _DOC_INFO_2A *LPDOC_INFO_2A; }
#line 921
extern "C" { typedef 
#line 915
struct _DOC_INFO_2W { 
LPWSTR pDocName; 
LPWSTR pOutputFile; 
LPWSTR pDatatype; 
DWORD dwMode; 
DWORD JobId; 
} DOC_INFO_2W; }extern "C" { typedef _DOC_INFO_2W *PDOC_INFO_2W; }extern "C" { typedef _DOC_INFO_2W *LPDOC_INFO_2W; }
#line 927
extern "C" { typedef DOC_INFO_2A DOC_INFO_2; }
extern "C" { typedef PDOC_INFO_2A PDOC_INFO_2; }
extern "C" { typedef LPDOC_INFO_2A LPDOC_INFO_2; }
#line 942 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 937
struct _DOC_INFO_3A { 
LPSTR pDocName; 
LPSTR pOutputFile; 
LPSTR pDatatype; 
DWORD dwFlags; 
} DOC_INFO_3A; }extern "C" { typedef _DOC_INFO_3A *PDOC_INFO_3A; }extern "C" { typedef _DOC_INFO_3A *LPDOC_INFO_3A; }
#line 948
extern "C" { typedef 
#line 943
struct _DOC_INFO_3W { 
LPWSTR pDocName; 
LPWSTR pOutputFile; 
LPWSTR pDatatype; 
DWORD dwFlags; 
} DOC_INFO_3W; }extern "C" { typedef _DOC_INFO_3W *PDOC_INFO_3W; }extern "C" { typedef _DOC_INFO_3W *LPDOC_INFO_3W; }
#line 954
extern "C" { typedef DOC_INFO_3A DOC_INFO_3; }
extern "C" { typedef PDOC_INFO_3A PDOC_INFO_3; }
extern "C" { typedef LPDOC_INFO_3A LPDOC_INFO_3; }
#line 967 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 965
struct _PRINTPROCESSOR_INFO_1A { 
LPSTR pName; 
} PRINTPROCESSOR_INFO_1A; }extern "C" { typedef _PRINTPROCESSOR_INFO_1A *PPRINTPROCESSOR_INFO_1A; }extern "C" { typedef _PRINTPROCESSOR_INFO_1A *LPPRINTPROCESSOR_INFO_1A; }


extern "C" { typedef 
#line 968
struct _PRINTPROCESSOR_INFO_1W { 
LPWSTR pName; 
} PRINTPROCESSOR_INFO_1W; }extern "C" { typedef _PRINTPROCESSOR_INFO_1W *PPRINTPROCESSOR_INFO_1W; }extern "C" { typedef _PRINTPROCESSOR_INFO_1W *LPPRINTPROCESSOR_INFO_1W; }
#line 976
extern "C" { typedef PRINTPROCESSOR_INFO_1A PRINTPROCESSOR_INFO_1; }
extern "C" { typedef PPRINTPROCESSOR_INFO_1A PPRINTPROCESSOR_INFO_1; }
extern "C" { typedef LPPRINTPROCESSOR_INFO_1A LPPRINTPROCESSOR_INFO_1; }
#line 987 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 982
struct _PRINTPROCESSOR_CAPS_1 { 
DWORD dwLevel; 
DWORD dwNupOptions; 
DWORD dwPageOrderFlags; 
DWORD dwNumberOfCopies; 
} PRINTPROCESSOR_CAPS_1; }extern "C" { typedef _PRINTPROCESSOR_CAPS_1 *PPRINTPROCESSOR_CAPS_1; }
#line 1007 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 994
struct _PRINTPROCESSOR_CAPS_2 { 
DWORD dwLevel; 
DWORD dwNupOptions; 
DWORD dwPageOrderFlags; 
DWORD dwNumberOfCopies; 


DWORD dwDuplexHandlingCaps; 
DWORD dwNupDirectionCaps; 
DWORD dwNupBorderCaps; 
DWORD dwBookletHandlingCaps; 
DWORD dwScalingCaps; 

} PRINTPROCESSOR_CAPS_2; }extern "C" { typedef _PRINTPROCESSOR_CAPS_2 *PPRINTPROCESSOR_CAPS_2; }
#line 1036 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 1034
struct _PORT_INFO_1A { 
LPSTR pName; 
} PORT_INFO_1A; }extern "C" { typedef _PORT_INFO_1A *PPORT_INFO_1A; }extern "C" { typedef _PORT_INFO_1A *LPPORT_INFO_1A; }


extern "C" { typedef 
#line 1037
struct _PORT_INFO_1W { 
LPWSTR pName; 
} PORT_INFO_1W; }extern "C" { typedef _PORT_INFO_1W *PPORT_INFO_1W; }extern "C" { typedef _PORT_INFO_1W *LPPORT_INFO_1W; }
#line 1045
extern "C" { typedef PORT_INFO_1A PORT_INFO_1; }
extern "C" { typedef PPORT_INFO_1A PPORT_INFO_1; }
extern "C" { typedef LPPORT_INFO_1A LPPORT_INFO_1; }
#line 1056 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 1050
struct _PORT_INFO_2A { 
LPSTR pPortName; 
LPSTR pMonitorName; 
LPSTR pDescription; 
DWORD fPortType; 
DWORD Reserved; 
} PORT_INFO_2A; }extern "C" { typedef _PORT_INFO_2A *PPORT_INFO_2A; }extern "C" { typedef _PORT_INFO_2A *LPPORT_INFO_2A; }
#line 1063
extern "C" { typedef 
#line 1057
struct _PORT_INFO_2W { 
LPWSTR pPortName; 
LPWSTR pMonitorName; 
LPWSTR pDescription; 
DWORD fPortType; 
DWORD Reserved; 
} PORT_INFO_2W; }extern "C" { typedef _PORT_INFO_2W *PPORT_INFO_2W; }extern "C" { typedef _PORT_INFO_2W *LPPORT_INFO_2W; }
#line 1069
extern "C" { typedef PORT_INFO_2A PORT_INFO_2; }
extern "C" { typedef PPORT_INFO_2A PPORT_INFO_2; }
extern "C" { typedef LPPORT_INFO_2A LPPORT_INFO_2; }
#line 1083 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 1079
struct _PORT_INFO_3A { 
DWORD dwStatus; 
LPSTR pszStatus; 
DWORD dwSeverity; 
} PORT_INFO_3A; }extern "C" { typedef _PORT_INFO_3A *PPORT_INFO_3A; }extern "C" { typedef _PORT_INFO_3A *LPPORT_INFO_3A; }




extern "C" { typedef 
#line 1084
struct _PORT_INFO_3W { 
DWORD dwStatus; 
LPWSTR pszStatus; 
DWORD dwSeverity; 
} PORT_INFO_3W; }extern "C" { typedef _PORT_INFO_3W *PPORT_INFO_3W; }extern "C" { typedef _PORT_INFO_3W *LPPORT_INFO_3W; }
#line 1094
extern "C" { typedef PORT_INFO_3A PORT_INFO_3; }
extern "C" { typedef PPORT_INFO_3A PPORT_INFO_3; }
extern "C" { typedef LPPORT_INFO_3A LPPORT_INFO_3; }
#line 1121 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 1119
struct _MONITOR_INFO_1A { 
LPSTR pName; 
} MONITOR_INFO_1A; }extern "C" { typedef _MONITOR_INFO_1A *PMONITOR_INFO_1A; }extern "C" { typedef _MONITOR_INFO_1A *LPMONITOR_INFO_1A; }


extern "C" { typedef 
#line 1122
struct _MONITOR_INFO_1W { 
LPWSTR pName; 
} MONITOR_INFO_1W; }extern "C" { typedef _MONITOR_INFO_1W *PMONITOR_INFO_1W; }extern "C" { typedef _MONITOR_INFO_1W *LPMONITOR_INFO_1W; }
#line 1130
extern "C" { typedef MONITOR_INFO_1A MONITOR_INFO_1; }
extern "C" { typedef PMONITOR_INFO_1A PMONITOR_INFO_1; }
extern "C" { typedef LPMONITOR_INFO_1A LPMONITOR_INFO_1; }
#line 1139 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 1135
struct _MONITOR_INFO_2A { 
LPSTR pName; 
LPSTR pEnvironment; 
LPSTR pDLLName; 
} MONITOR_INFO_2A; }extern "C" { typedef _MONITOR_INFO_2A *PMONITOR_INFO_2A; }extern "C" { typedef _MONITOR_INFO_2A *LPMONITOR_INFO_2A; }




extern "C" { typedef 
#line 1140
struct _MONITOR_INFO_2W { 
LPWSTR pName; 
LPWSTR pEnvironment; 
LPWSTR pDLLName; 
} MONITOR_INFO_2W; }extern "C" { typedef _MONITOR_INFO_2W *PMONITOR_INFO_2W; }extern "C" { typedef _MONITOR_INFO_2W *LPMONITOR_INFO_2W; }
#line 1150
extern "C" { typedef MONITOR_INFO_2A MONITOR_INFO_2; }
extern "C" { typedef PMONITOR_INFO_2A PMONITOR_INFO_2; }
extern "C" { typedef LPMONITOR_INFO_2A LPMONITOR_INFO_2; }
#line 1157 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 1155
struct _DATATYPES_INFO_1A { 
LPSTR pName; 
} DATATYPES_INFO_1A; }extern "C" { typedef _DATATYPES_INFO_1A *PDATATYPES_INFO_1A; }extern "C" { typedef _DATATYPES_INFO_1A *LPDATATYPES_INFO_1A; }


extern "C" { typedef 
#line 1158
struct _DATATYPES_INFO_1W { 
LPWSTR pName; 
} DATATYPES_INFO_1W; }extern "C" { typedef _DATATYPES_INFO_1W *PDATATYPES_INFO_1W; }extern "C" { typedef _DATATYPES_INFO_1W *LPDATATYPES_INFO_1W; }
#line 1166
extern "C" { typedef DATATYPES_INFO_1A DATATYPES_INFO_1; }
extern "C" { typedef PDATATYPES_INFO_1A PDATATYPES_INFO_1; }
extern "C" { typedef LPDATATYPES_INFO_1A LPDATATYPES_INFO_1; }
#line 1175 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 1171
struct _PRINTER_DEFAULTSA { 
LPSTR pDatatype; 
LPDEVMODEA pDevMode; 
ACCESS_MASK DesiredAccess; 
} PRINTER_DEFAULTSA; }extern "C" { typedef _PRINTER_DEFAULTSA *PPRINTER_DEFAULTSA; }extern "C" { typedef _PRINTER_DEFAULTSA *LPPRINTER_DEFAULTSA; }




extern "C" { typedef 
#line 1176
struct _PRINTER_DEFAULTSW { 
LPWSTR pDatatype; 
LPDEVMODEW pDevMode; 
ACCESS_MASK DesiredAccess; 
} PRINTER_DEFAULTSW; }extern "C" { typedef _PRINTER_DEFAULTSW *PPRINTER_DEFAULTSW; }extern "C" { typedef _PRINTER_DEFAULTSW *LPPRINTER_DEFAULTSW; }
#line 1186
extern "C" { typedef PRINTER_DEFAULTSA PRINTER_DEFAULTS; }
extern "C" { typedef PPRINTER_DEFAULTSA PPRINTER_DEFAULTS; }
extern "C" { typedef LPPRINTER_DEFAULTSA LPPRINTER_DEFAULTS; }
#line 1197 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 1191
struct _PRINTER_ENUM_VALUESA { 
LPSTR pValueName; 
DWORD cbValueName; 
DWORD dwType; 
LPBYTE pData; 
DWORD cbData; 
} PRINTER_ENUM_VALUESA; }extern "C" { typedef _PRINTER_ENUM_VALUESA *PPRINTER_ENUM_VALUESA; }extern "C" { typedef _PRINTER_ENUM_VALUESA *LPPRINTER_ENUM_VALUESA; }
#line 1204
extern "C" { typedef 
#line 1198
struct _PRINTER_ENUM_VALUESW { 
LPWSTR pValueName; 
DWORD cbValueName; 
DWORD dwType; 
LPBYTE pData; 
DWORD cbData; 
} PRINTER_ENUM_VALUESW; }extern "C" { typedef _PRINTER_ENUM_VALUESW *PPRINTER_ENUM_VALUESW; }extern "C" { typedef _PRINTER_ENUM_VALUESW *LPPRINTER_ENUM_VALUESW; }
#line 1210
extern "C" { typedef PRINTER_ENUM_VALUESA PRINTER_ENUM_VALUES; }
extern "C" { typedef PPRINTER_ENUM_VALUESA PPRINTER_ENUM_VALUES; }
extern "C" { typedef LPPRINTER_ENUM_VALUESA LPPRINTER_ENUM_VALUES; }
#line 1217 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall EnumPrintersA(DWORD, LPSTR, DWORD, LPBYTE, DWORD, LPDWORD, LPDWORD); } 
#line 1229
extern "C" { extern BOOL __stdcall EnumPrintersW(DWORD, LPWSTR, DWORD, LPBYTE, DWORD, LPDWORD, LPDWORD); } 
#line 1277 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall OpenPrinterA(LPSTR, LPHANDLE, LPPRINTER_DEFAULTSA); } 
#line 1284
extern "C" { extern BOOL __stdcall OpenPrinterW(LPWSTR, LPHANDLE, LPPRINTER_DEFAULTSW); } 
#line 1297 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall ResetPrinterA(HANDLE, LPPRINTER_DEFAULTSA); } 
#line 1303
extern "C" { extern BOOL __stdcall ResetPrinterW(HANDLE, LPPRINTER_DEFAULTSW); } 
#line 1315 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall SetJobA(HANDLE, DWORD, DWORD, LPBYTE, DWORD); } 
#line 1324
extern "C" { extern BOOL __stdcall SetJobW(HANDLE, DWORD, DWORD, LPBYTE, DWORD); } 
#line 1339 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall GetJobA(HANDLE, DWORD, DWORD, LPBYTE, DWORD, LPDWORD); } 
#line 1350
extern "C" { extern BOOL __stdcall GetJobW(HANDLE, DWORD, DWORD, LPBYTE, DWORD, LPDWORD); } 
#line 1367 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall EnumJobsA(HANDLE, DWORD, DWORD, DWORD, LPBYTE, DWORD, LPDWORD, LPDWORD); } 
#line 1380
extern "C" { extern BOOL __stdcall EnumJobsW(HANDLE, DWORD, DWORD, DWORD, LPBYTE, DWORD, LPDWORD, LPDWORD); } 
#line 1399 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern HANDLE __stdcall AddPrinterA(LPSTR, DWORD, LPBYTE); } 
#line 1406
extern "C" { extern HANDLE __stdcall AddPrinterW(LPWSTR, DWORD, LPBYTE); } 
#line 1419 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall DeletePrinter(HANDLE); } 
#line 1425
extern "C" { extern BOOL __stdcall SetPrinterA(HANDLE, DWORD, LPBYTE, DWORD); } 
#line 1433
extern "C" { extern BOOL __stdcall SetPrinterW(HANDLE, DWORD, LPBYTE, DWORD); } 
#line 1447 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall GetPrinterA(HANDLE, DWORD, LPBYTE, DWORD, LPDWORD); } 
#line 1457
extern "C" { extern BOOL __stdcall GetPrinterW(HANDLE, DWORD, LPBYTE, DWORD, LPDWORD); } 
#line 1473 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall AddPrinterDriverA(LPSTR, DWORD, LPBYTE); } 
#line 1480
extern "C" { extern BOOL __stdcall AddPrinterDriverW(LPWSTR, DWORD, LPBYTE); } 
#line 1493 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall AddPrinterDriverExA(LPSTR, DWORD, LPBYTE, DWORD); } 
#line 1501
extern "C" { extern BOOL __stdcall AddPrinterDriverExW(LPWSTR, DWORD, LPBYTE, DWORD); } 
#line 1515 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall EnumPrinterDriversA(LPSTR, LPSTR, DWORD, LPBYTE, DWORD, LPDWORD, LPDWORD); } 
#line 1527
extern "C" { extern BOOL __stdcall EnumPrinterDriversW(LPWSTR, LPWSTR, DWORD, LPBYTE, DWORD, LPDWORD, LPDWORD); } 
#line 1545 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall GetPrinterDriverA(HANDLE, LPSTR, DWORD, LPBYTE, DWORD, LPDWORD); } 
#line 1556
extern "C" { extern BOOL __stdcall GetPrinterDriverW(HANDLE, LPWSTR, DWORD, LPBYTE, DWORD, LPDWORD); } 
#line 1573 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall GetPrinterDriverDirectoryA(LPSTR, LPSTR, DWORD, LPBYTE, DWORD, LPDWORD); } 
#line 1584
extern "C" { extern BOOL __stdcall GetPrinterDriverDirectoryW(LPWSTR, LPWSTR, DWORD, LPBYTE, DWORD, LPDWORD); } 
#line 1601 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall DeletePrinterDriverA(LPSTR, LPSTR, LPSTR); } 
#line 1608
extern "C" { extern BOOL __stdcall DeletePrinterDriverW(LPWSTR, LPWSTR, LPWSTR); } 
#line 1621 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall DeletePrinterDriverExA(LPSTR, LPSTR, LPSTR, DWORD, DWORD); } 
#line 1630
extern "C" { extern BOOL __stdcall DeletePrinterDriverExW(LPWSTR, LPWSTR, LPWSTR, DWORD, DWORD); } 
#line 1647 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall AddPrintProcessorA(LPSTR, LPSTR, LPSTR, LPSTR); } 
#line 1655
extern "C" { extern BOOL __stdcall AddPrintProcessorW(LPWSTR, LPWSTR, LPWSTR, LPWSTR); } 
#line 1669 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall EnumPrintProcessorsA(LPSTR, LPSTR, DWORD, LPBYTE, DWORD, LPDWORD, LPDWORD); } 
#line 1681
extern "C" { extern BOOL __stdcall EnumPrintProcessorsW(LPWSTR, LPWSTR, DWORD, LPBYTE, DWORD, LPDWORD, LPDWORD); } 
#line 1701 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall GetPrintProcessorDirectoryA(LPSTR, LPSTR, DWORD, LPBYTE, DWORD, LPDWORD); } 
#line 1712
extern "C" { extern BOOL __stdcall GetPrintProcessorDirectoryW(LPWSTR, LPWSTR, DWORD, LPBYTE, DWORD, LPDWORD); } 
#line 1729 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall EnumPrintProcessorDatatypesA(LPSTR, LPSTR, DWORD, LPBYTE, DWORD, LPDWORD, LPDWORD); } 
#line 1741
extern "C" { extern BOOL __stdcall EnumPrintProcessorDatatypesW(LPWSTR, LPWSTR, DWORD, LPBYTE, DWORD, LPDWORD, LPDWORD); } 
#line 1759 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall DeletePrintProcessorA(LPSTR, LPSTR, LPSTR); } 
#line 1766
extern "C" { extern BOOL __stdcall DeletePrintProcessorW(LPWSTR, LPWSTR, LPWSTR); } 
#line 1779 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern DWORD __stdcall StartDocPrinterA(HANDLE, DWORD, LPBYTE); } 
#line 1786
extern "C" { extern DWORD __stdcall StartDocPrinterW(HANDLE, DWORD, LPBYTE); } 
#line 1799 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall StartPagePrinter(HANDLE); } 
#line 1805
extern "C" { extern BOOL __stdcall WritePrinter(HANDLE, LPVOID, DWORD, LPDWORD); } 
#line 1816
extern "C" { extern BOOL __stdcall FlushPrinter(HANDLE, LPVOID, DWORD, LPDWORD, DWORD); } 
#line 1827
extern "C" { extern BOOL __stdcall EndPagePrinter(HANDLE); } 
#line 1833
extern "C" { extern BOOL __stdcall AbortPrinter(HANDLE); } 
#line 1839
extern "C" { extern BOOL __stdcall ReadPrinter(HANDLE, LPVOID, DWORD, LPDWORD); } 
#line 1849
extern "C" { extern BOOL __stdcall EndDocPrinter(HANDLE); } 
#line 1855
extern "C" { extern BOOL __stdcall AddJobA(HANDLE, DWORD, LPBYTE, DWORD, LPDWORD); } 
#line 1865
extern "C" { extern BOOL __stdcall AddJobW(HANDLE, DWORD, LPBYTE, DWORD, LPDWORD); } 
#line 1881 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall ScheduleJob(HANDLE, DWORD); } 
#line 1888
extern "C" { extern BOOL __stdcall PrinterProperties(HWND, HANDLE); } 
#line 1895
extern "C" { extern LONG __stdcall DocumentPropertiesA(HWND, HANDLE, LPSTR, PDEVMODEA, PDEVMODEA, DWORD); } 
#line 1905
extern "C" { extern LONG __stdcall DocumentPropertiesW(HWND, HANDLE, LPWSTR, PDEVMODEW, PDEVMODEW, DWORD); } 
#line 1921 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern LONG __stdcall AdvancedDocumentPropertiesA(HWND, HANDLE, LPSTR, PDEVMODEA, PDEVMODEA); } 
#line 1930
extern "C" { extern LONG __stdcall AdvancedDocumentPropertiesW(HWND, HANDLE, LPWSTR, PDEVMODEW, PDEVMODEW); } 
#line 1945 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern LONG ExtDeviceMode(HWND, HANDLE, LPDEVMODEA, LPSTR, LPSTR, LPDEVMODEA, LPSTR, DWORD); } 
#line 1960 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern DWORD __stdcall GetPrinterDataA(HANDLE, LPSTR, LPDWORD, LPBYTE, DWORD, LPDWORD); } 
#line 1971
extern "C" { extern DWORD __stdcall GetPrinterDataW(HANDLE, LPWSTR, LPDWORD, LPBYTE, DWORD, LPDWORD); } 
#line 1988 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern DWORD __stdcall GetPrinterDataExA(HANDLE, LPCSTR, LPCSTR, LPDWORD, LPBYTE, DWORD, LPDWORD); } 
#line 2000
extern "C" { extern DWORD __stdcall GetPrinterDataExW(HANDLE, LPCWSTR, LPCWSTR, LPDWORD, LPBYTE, DWORD, LPDWORD); } 
#line 2018 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern DWORD __stdcall EnumPrinterDataA(HANDLE, DWORD, LPSTR, DWORD, LPDWORD, LPDWORD, LPBYTE, DWORD, LPDWORD); } 
#line 2032
extern "C" { extern DWORD __stdcall EnumPrinterDataW(HANDLE, DWORD, LPWSTR, DWORD, LPDWORD, LPDWORD, LPBYTE, DWORD, LPDWORD); } 
#line 2052 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern DWORD __stdcall EnumPrinterDataExA(HANDLE, LPCSTR, LPBYTE, DWORD, LPDWORD, LPDWORD); } 
#line 2063
extern "C" { extern DWORD __stdcall EnumPrinterDataExW(HANDLE, LPCWSTR, LPBYTE, DWORD, LPDWORD, LPDWORD); } 
#line 2080 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern DWORD __stdcall EnumPrinterKeyA(HANDLE, LPCSTR, LPSTR, DWORD, LPDWORD); } 
#line 2090
extern "C" { extern DWORD __stdcall EnumPrinterKeyW(HANDLE, LPCWSTR, LPWSTR, DWORD, LPDWORD); } 
#line 2107 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern DWORD __stdcall SetPrinterDataA(HANDLE, LPSTR, DWORD, LPBYTE, DWORD); } 
#line 2117
extern "C" { extern DWORD __stdcall SetPrinterDataW(HANDLE, LPWSTR, DWORD, LPBYTE, DWORD); } 
#line 2134 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern DWORD __stdcall SetPrinterDataExA(HANDLE, LPCSTR, LPCSTR, DWORD, LPBYTE, DWORD); } 
#line 2145
extern "C" { extern DWORD __stdcall SetPrinterDataExW(HANDLE, LPCWSTR, LPCWSTR, DWORD, LPBYTE, DWORD); } 
#line 2164 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern DWORD __stdcall DeletePrinterDataA(HANDLE, LPSTR); } 
#line 2170
extern "C" { extern DWORD __stdcall DeletePrinterDataW(HANDLE, LPWSTR); } 
#line 2183 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern DWORD __stdcall DeletePrinterDataExA(HANDLE, LPCSTR, LPCSTR); } 
#line 2190
extern "C" { extern DWORD __stdcall DeletePrinterDataExW(HANDLE, LPCWSTR, LPCWSTR); } 
#line 2204 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern DWORD __stdcall DeletePrinterKeyA(HANDLE, LPCSTR); } 
#line 2210
extern "C" { extern DWORD __stdcall DeletePrinterKeyW(HANDLE, LPCWSTR); } 
#line 2290 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 2283
struct _PRINTER_NOTIFY_OPTIONS_TYPE { 
WORD Type; 
WORD Reserved0; 
DWORD Reserved1; 
DWORD Reserved2; 
DWORD Count; 
PWORD pFields; 
} PRINTER_NOTIFY_OPTIONS_TYPE; }extern "C" { typedef _PRINTER_NOTIFY_OPTIONS_TYPE *PPRINTER_NOTIFY_OPTIONS_TYPE; }extern "C" { typedef _PRINTER_NOTIFY_OPTIONS_TYPE *LPPRINTER_NOTIFY_OPTIONS_TYPE; }
#line 2300
extern "C" { typedef 
#line 2295
struct _PRINTER_NOTIFY_OPTIONS { 
DWORD Version; 
DWORD Flags; 
DWORD Count; 
PPRINTER_NOTIFY_OPTIONS_TYPE pTypes; 
} PRINTER_NOTIFY_OPTIONS; }extern "C" { typedef _PRINTER_NOTIFY_OPTIONS *PPRINTER_NOTIFY_OPTIONS; }extern "C" { typedef _PRINTER_NOTIFY_OPTIONS *LPPRINTER_NOTIFY_OPTIONS; }
#line 2318
extern "C" { typedef 
#line 2306
struct _PRINTER_NOTIFY_INFO_DATA { 
WORD Type; 
WORD Field; 
DWORD Reserved; 
DWORD Id; 
union { 
DWORD adwData[2]; 
struct { 
DWORD cbBuf; 
LPVOID pBuf; 
} Data; 
} NotifyData; 
} PRINTER_NOTIFY_INFO_DATA; }extern "C" { typedef _PRINTER_NOTIFY_INFO_DATA *PPRINTER_NOTIFY_INFO_DATA; }extern "C" { typedef _PRINTER_NOTIFY_INFO_DATA *LPPRINTER_NOTIFY_INFO_DATA; }
#line 2325
extern "C" { typedef 
#line 2320
struct _PRINTER_NOTIFY_INFO { 
DWORD Version; 
DWORD Flags; 
DWORD Count; 
PRINTER_NOTIFY_INFO_DATA aData[1]; 
} PRINTER_NOTIFY_INFO; }extern "C" { typedef _PRINTER_NOTIFY_INFO *PPRINTER_NOTIFY_INFO; }extern "C" { typedef _PRINTER_NOTIFY_INFO *LPPRINTER_NOTIFY_INFO; }
#line 2331
extern "C" { typedef 
#line 2328
struct _BINARY_CONTAINER { 
DWORD cbBuf; 
LPBYTE pData; 
} BINARY_CONTAINER; }extern "C" { typedef _BINARY_CONTAINER *PBINARY_CONTAINER; }
#line 2343
extern "C" { typedef 
#line 2334
struct _BIDI_DATA { 
DWORD dwBidiType; 
union { 
BOOL bData; 
LONG iData; 
LPWSTR sData; 
FLOAT fData; 
BINARY_CONTAINER biData; 
} u; 
} BIDI_DATA; }extern "C" { typedef _BIDI_DATA *PBIDI_DATA; }extern "C" { typedef _BIDI_DATA *LPBIDI_DATA; }
#line 2350
extern "C" { typedef 
#line 2346
struct _BIDI_REQUEST_DATA { 
DWORD dwReqNumber; 
LPWSTR pSchema; 
BIDI_DATA data; 
} BIDI_REQUEST_DATA; }extern "C" { typedef _BIDI_REQUEST_DATA *PBIDI_REQUEST_DATA; }extern "C" { typedef _BIDI_REQUEST_DATA *LPBIDI_REQUEST_DATA; }
#line 2358
extern "C" { typedef 
#line 2353
struct _BIDI_REQUEST_CONTAINER { 
DWORD Version; 
DWORD Flags; 
DWORD Count; 
BIDI_REQUEST_DATA aData[1]; 
} BIDI_REQUEST_CONTAINER; }extern "C" { typedef _BIDI_REQUEST_CONTAINER *PBIDI_REQUEST_CONTAINER; }extern "C" { typedef _BIDI_REQUEST_CONTAINER *LPBIDI_REQUEST_CONTAINER; }
#line 2365
extern "C" { typedef 
#line 2360
struct _BIDI_RESPONSE_DATA { 
DWORD dwResult; 
DWORD dwReqNumber; 
LPWSTR pSchema; 
BIDI_DATA data; 
} BIDI_RESPONSE_DATA; }extern "C" { typedef _BIDI_RESPONSE_DATA *PBIDI_RESPONSE_DATA; }extern "C" { typedef _BIDI_RESPONSE_DATA *LPBIDI_RESPONSE_DATA; }
#line 2372
extern "C" { typedef 
#line 2367
struct _BIDI_RESPONSE_CONTAINER { 
DWORD Version; 
DWORD Flags; 
DWORD Count; 
BIDI_RESPONSE_DATA aData[1]; 
} BIDI_RESPONSE_CONTAINER; }extern "C" { typedef _BIDI_RESPONSE_CONTAINER *PBIDI_RESPONSE_CONTAINER; }extern "C" { typedef _BIDI_RESPONSE_CONTAINER *LPBIDI_RESPONSE_CONTAINER; }
#line 2388
extern "C" { typedef 
#line 2379
enum { 
BIDI_NULL, 
BIDI_INT, 
BIDI_FLOAT, 
BIDI_BOOL, 
BIDI_STRING, 
BIDI_TEXT, 
BIDI_ENUM, 
BIDI_BLOB
} BIDI_TYPE; }
#line 2411 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern DWORD __stdcall WaitForPrinterChange(HANDLE, DWORD); } 
#line 2418
extern "C" { extern HANDLE __stdcall FindFirstPrinterChangeNotification(HANDLE, DWORD, DWORD, PVOID); } 
#line 2428
extern "C" { extern BOOL __stdcall FindNextPrinterChangeNotification(HANDLE, PDWORD, LPVOID, LPVOID *); } 
#line 2437
extern "C" { extern BOOL __stdcall FreePrinterNotifyInfo(PPRINTER_NOTIFY_INFO); } 
#line 2443
extern "C" { extern BOOL __stdcall FindClosePrinterChangeNotification(HANDLE); } 
#line 2477
extern "C" { extern DWORD __stdcall PrinterMessageBoxA(HANDLE, DWORD, HWND, LPSTR, LPSTR, DWORD); } 
#line 2487
extern "C" { extern DWORD __stdcall PrinterMessageBoxW(HANDLE, DWORD, HWND, LPWSTR, LPWSTR, DWORD); } 
#line 2513 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall ClosePrinter(HANDLE); } 
#line 2519
extern "C" { extern BOOL __stdcall AddFormA(HANDLE, DWORD, LPBYTE); } 
#line 2526
extern "C" { extern BOOL __stdcall AddFormW(HANDLE, DWORD, LPBYTE); } 
#line 2541 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall DeleteFormA(HANDLE, LPSTR); } 
#line 2547
extern "C" { extern BOOL __stdcall DeleteFormW(HANDLE, LPWSTR); } 
#line 2561 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall GetFormA(HANDLE, LPSTR, DWORD, LPBYTE, DWORD, LPDWORD); } 
#line 2572
extern "C" { extern BOOL __stdcall GetFormW(HANDLE, LPWSTR, DWORD, LPBYTE, DWORD, LPDWORD); } 
#line 2591 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall SetFormA(HANDLE, LPSTR, DWORD, LPBYTE); } 
#line 2599
extern "C" { extern BOOL __stdcall SetFormW(HANDLE, LPWSTR, DWORD, LPBYTE); } 
#line 2615 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall EnumFormsA(HANDLE, DWORD, LPBYTE, DWORD, LPDWORD, LPDWORD); } 
#line 2626
extern "C" { extern BOOL __stdcall EnumFormsW(HANDLE, DWORD, LPBYTE, DWORD, LPDWORD, LPDWORD); } 
#line 2644 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall EnumMonitorsA(LPSTR, DWORD, LPBYTE, DWORD, LPDWORD, LPDWORD); } 
#line 2655
extern "C" { extern BOOL __stdcall EnumMonitorsW(LPWSTR, DWORD, LPBYTE, DWORD, LPDWORD, LPDWORD); } 
#line 2674 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall AddMonitorA(LPSTR, DWORD, LPBYTE); } 
#line 2681
extern "C" { extern BOOL __stdcall AddMonitorW(LPWSTR, DWORD, LPBYTE); } 
#line 2696 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall DeleteMonitorA(LPSTR, LPSTR, LPSTR); } 
#line 2703
extern "C" { extern BOOL __stdcall DeleteMonitorW(LPWSTR, LPWSTR, LPWSTR); } 
#line 2718 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall EnumPortsA(LPSTR, DWORD, LPBYTE, DWORD, LPDWORD, LPDWORD); } 
#line 2729
extern "C" { extern BOOL __stdcall EnumPortsW(LPWSTR, DWORD, LPBYTE, DWORD, LPDWORD, LPDWORD); } 
#line 2747 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall AddPortA(LPSTR, HWND, LPSTR); } 
#line 2754
extern "C" { extern BOOL __stdcall AddPortW(LPWSTR, HWND, LPWSTR); } 
#line 2769 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall ConfigurePortA(LPSTR, HWND, LPSTR); } 
#line 2776
extern "C" { extern BOOL __stdcall ConfigurePortW(LPWSTR, HWND, LPWSTR); } 
#line 2789 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall DeletePortA(LPSTR, HWND, LPSTR); } 
#line 2796
extern "C" { extern BOOL __stdcall DeletePortW(LPWSTR, HWND, LPWSTR); } 
#line 2809 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall XcvDataW(HANDLE, PCWSTR, PBYTE, DWORD, PBYTE, DWORD, PDWORD, PDWORD); } 
#line 2825
extern "C" { extern BOOL __stdcall GetDefaultPrinterA(LPSTR, LPDWORD); } 
#line 2831
extern "C" { extern BOOL __stdcall GetDefaultPrinterW(LPWSTR, LPDWORD); } 
#line 2843 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall SetDefaultPrinterA(LPCSTR); } 




extern "C" { extern BOOL __stdcall SetDefaultPrinterW(LPCWSTR); } 
#line 2860 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall SetPortA(LPSTR, LPSTR, DWORD, LPBYTE); } 
#line 2868
extern "C" { extern BOOL __stdcall SetPortW(LPWSTR, LPWSTR, DWORD, LPBYTE); } 
#line 2884 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall AddPrinterConnectionA(LPSTR); } 




extern "C" { extern BOOL __stdcall AddPrinterConnectionW(LPWSTR); } 
#line 2902 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall DeletePrinterConnectionA(LPSTR); } 




extern "C" { extern BOOL __stdcall DeletePrinterConnectionW(LPWSTR); } 
#line 2920 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern HANDLE __stdcall ConnectToPrinterDlg(HWND, DWORD); } 
#line 2929
extern "C" { typedef 
#line 2925
struct _PROVIDOR_INFO_1A { 
LPSTR pName; 
LPSTR pEnvironment; 
LPSTR pDLLName; 
} PROVIDOR_INFO_1A; }extern "C" { typedef _PROVIDOR_INFO_1A *PPROVIDOR_INFO_1A; }extern "C" { typedef _PROVIDOR_INFO_1A *LPPROVIDOR_INFO_1A; }




extern "C" { typedef 
#line 2930
struct _PROVIDOR_INFO_1W { 
LPWSTR pName; 
LPWSTR pEnvironment; 
LPWSTR pDLLName; 
} PROVIDOR_INFO_1W; }extern "C" { typedef _PROVIDOR_INFO_1W *PPROVIDOR_INFO_1W; }extern "C" { typedef _PROVIDOR_INFO_1W *LPPROVIDOR_INFO_1W; }
#line 2940
extern "C" { typedef PROVIDOR_INFO_1A PROVIDOR_INFO_1; }
extern "C" { typedef PPROVIDOR_INFO_1A PPROVIDOR_INFO_1; }
extern "C" { typedef LPPROVIDOR_INFO_1A LPPROVIDOR_INFO_1; }
#line 2947 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 2945
struct _PROVIDOR_INFO_2A { 
LPSTR pOrder; 
} PROVIDOR_INFO_2A; }extern "C" { typedef _PROVIDOR_INFO_2A *PPROVIDOR_INFO_2A; }extern "C" { typedef _PROVIDOR_INFO_2A *LPPROVIDOR_INFO_2A; }


extern "C" { typedef 
#line 2948
struct _PROVIDOR_INFO_2W { 
LPWSTR pOrder; 
} PROVIDOR_INFO_2W; }extern "C" { typedef _PROVIDOR_INFO_2W *PPROVIDOR_INFO_2W; }extern "C" { typedef _PROVIDOR_INFO_2W *LPPROVIDOR_INFO_2W; }
#line 2956
extern "C" { typedef PROVIDOR_INFO_2A PROVIDOR_INFO_2; }
extern "C" { typedef PPROVIDOR_INFO_2A PPROVIDOR_INFO_2; }
extern "C" { typedef LPPROVIDOR_INFO_2A LPPROVIDOR_INFO_2; }
#line 2963 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall AddPrintProvidorA(LPSTR, DWORD, LPBYTE); } 
#line 2970
extern "C" { extern BOOL __stdcall AddPrintProvidorW(LPWSTR, DWORD, LPBYTE); } 
#line 2983 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall DeletePrintProvidorA(LPSTR, LPSTR, LPSTR); } 
#line 2990
extern "C" { extern BOOL __stdcall DeletePrintProvidorW(LPWSTR, LPWSTR, LPWSTR); } 
#line 3004 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall IsValidDevmodeA(PDEVMODEA, size_t); } 
#line 3010
extern "C" { extern BOOL __stdcall IsValidDevmodeW(PDEVMODEW, size_t); } 
#line 3227 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 3221
enum _PRINTER_OPTION_FLAGS { 

PRINTER_OPTION_NO_CACHE = 1, 
PRINTER_OPTION_CACHE, 
PRINTER_OPTION_CLIENT_CHANGE = 4, 
PRINTER_OPTION_NO_CLIENT_DATA = 8
} PRINTER_OPTION_FLAGS; }
#line 3234
extern "C" { typedef 
#line 3230
struct _PRINTER_OPTIONSA { 

UINT cbSize; 
DWORD dwFlags; 
} PRINTER_OPTIONSA; }extern "C" { typedef _PRINTER_OPTIONSA *PPRINTER_OPTIONSA; }extern "C" { typedef _PRINTER_OPTIONSA *LPPRINTER_OPTIONSA; }




extern "C" { typedef 
#line 3235
struct _PRINTER_OPTIONSW { 

UINT cbSize; 
DWORD dwFlags; 
} PRINTER_OPTIONSW; }extern "C" { typedef _PRINTER_OPTIONSW *PPRINTER_OPTIONSW; }extern "C" { typedef _PRINTER_OPTIONSW *LPPRINTER_OPTIONSW; }
#line 3245
extern "C" { typedef PRINTER_OPTIONSA PRINTER_OPTIONS; }
extern "C" { typedef PPRINTER_OPTIONSA PPRINTER_OPTIONS; }
extern "C" { typedef LPPRINTER_OPTIONSA LPPRINTER_OPTIONS; }
#line 3252 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall OpenPrinter2A(LPCSTR, LPHANDLE, PPRINTER_DEFAULTSA, PPRINTER_OPTIONSA); } 
#line 3260
extern "C" { extern BOOL __stdcall OpenPrinter2W(LPCWSTR, LPHANDLE, PPRINTER_DEFAULTSW, PPRINTER_OPTIONSW); } 
#line 3279 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 3275
struct _PRINTER_CONNECTION_INFO_1A { 

DWORD dwFlags; 
LPSTR pszDriverName; 
} PRINTER_CONNECTION_INFO_1A; }extern "C" { typedef _PRINTER_CONNECTION_INFO_1A *PPRINTER_CONNECTION_INFO_1A; }




extern "C" { typedef 
#line 3280
struct _PRINTER_CONNECTION_INFO_1W { 

DWORD dwFlags; 
LPWSTR pszDriverName; 
} PRINTER_CONNECTION_INFO_1W; }extern "C" { typedef _PRINTER_CONNECTION_INFO_1W *PPRINTER_CONNECTION_INFO_1W; }




extern "C" { typedef PRINTER_CONNECTION_INFO_1A PRINTER_CONNECTION_INFO_1; }
extern "C" { typedef PPRINTER_CONNECTION_INFO_1A PPRINTER_CONNECTION_INFO_1; }
#line 3295 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern BOOL __stdcall AddPrinterConnection2A(HWND, LPCSTR, DWORD, PVOID); } 
#line 3303
extern "C" { extern BOOL __stdcall AddPrinterConnection2W(HWND, LPCWSTR, DWORD, PVOID); } 
#line 3323 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern HRESULT InstallPrinterDriverFromPackageA(LPCSTR, LPCSTR, LPCSTR, LPCSTR, DWORD); } 
#line 3331
extern "C" { extern HRESULT InstallPrinterDriverFromPackageW(LPCWSTR, LPCWSTR, LPCWSTR, LPCWSTR, DWORD); } 
#line 3350 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern HRESULT UploadPrinterDriverPackageA(LPCSTR, LPCSTR, LPCSTR, DWORD, HWND, LPSTR, PULONG); } 
#line 3361
extern "C" { extern HRESULT UploadPrinterDriverPackageW(LPCWSTR, LPCWSTR, LPCWSTR, DWORD, HWND, LPWSTR, PULONG); } 
#line 3383 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 3377
struct _CORE_PRINTER_DRIVERA { 

GUID CoreDriverGUID; 
FILETIME ftDriverDate; 
DWORDLONG dwlDriverVersion; 
CHAR szPackageID[260]; 
} CORE_PRINTER_DRIVERA; }extern "C" { typedef _CORE_PRINTER_DRIVERA *PCORE_PRINTER_DRIVERA; }
#line 3390
extern "C" { typedef 
#line 3384
struct _CORE_PRINTER_DRIVERW { 

GUID CoreDriverGUID; 
FILETIME ftDriverDate; 
DWORDLONG dwlDriverVersion; 
WCHAR szPackageID[260]; 
} CORE_PRINTER_DRIVERW; }extern "C" { typedef _CORE_PRINTER_DRIVERW *PCORE_PRINTER_DRIVERW; }




extern "C" { typedef CORE_PRINTER_DRIVERA CORE_PRINTER_DRIVER; }
extern "C" { typedef PCORE_PRINTER_DRIVERA PCORE_PRINTER_DRIVER; }
#line 3400 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern HRESULT GetCorePrinterDriversA(LPCSTR, LPCSTR, LPCSTR, DWORD, PCORE_PRINTER_DRIVERA); } 
#line 3408
extern "C" { extern HRESULT GetCorePrinterDriversW(LPCWSTR, LPCWSTR, LPCWSTR, DWORD, PCORE_PRINTER_DRIVERW); } 
#line 3422 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern HRESULT CorePrinterDriverInstalledA(LPCSTR, LPCSTR, GUID, FILETIME, DWORDLONG, BOOL *); } 
#line 3431
extern "C" { extern HRESULT CorePrinterDriverInstalledW(LPCWSTR, LPCWSTR, GUID, FILETIME, DWORDLONG, BOOL *); } 
#line 3446 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern HRESULT GetPrinterDriverPackagePathA(LPCSTR, LPCSTR, LPCSTR, LPCSTR, LPSTR, DWORD, LPDWORD); } 
#line 3456
extern "C" { extern HRESULT GetPrinterDriverPackagePathW(LPCWSTR, LPCWSTR, LPCWSTR, LPCWSTR, LPWSTR, DWORD, LPDWORD); } 
#line 3472 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { extern HRESULT DeletePrinterDriverPackageA(LPCSTR, LPCSTR, LPCSTR); } 
#line 3478
extern "C" { extern HRESULT DeletePrinterDriverPackageW(LPCWSTR, LPCWSTR, LPCWSTR); } 
#line 3502 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winspool.h"
extern "C" { typedef 
#line 3490
enum { 
kPropertyTypeString = 1, 
kPropertyTypeInt32, 
kPropertyTypeInt64, 
kPropertyTypeByte, 
kPropertyTypeTime, 
kPropertyTypeDevMode, 
kPropertyTypeSD, 
kPropertyTypeNotificationReply, 
kPropertyTypeNotificationOptions, 
kPropertyTypeBuffer

} EPrintPropertyType; }
#line 3517
extern "C" { typedef 
#line 3505
enum { 
kAddingDocumentSequence, 
kDocumentSequenceAdded, 
kAddingFixedDocument, 
kFixedDocumentAdded, 
kAddingFixedPage, 
kFixedPageAdded, 
kResourceAdded, 
kFontAdded, 
kImageAdded, 
kXpsDocumentCommitted

} EPrintXPSJobProgress; }
#line 3524
extern "C" { typedef 
#line 3520
enum { 
kJobProduction = 1, 
kJobConsumption

} EPrintXPSJobOperation; }
#line 3541
extern "C" { typedef 
#line 3527
struct PrintPropertyValue { 
EPrintPropertyType ePropertyType; 

union { 
BYTE propertyByte; 
PWSTR propertyString; 
LONG propertyInt32; 
LONGLONG propertyInt64; 
struct { 
DWORD cbBuf; 
LPVOID pBuf; 
} propertyBlob; 
} value; 

} PrintPropertyValue; }
#line 3548
extern "C" { typedef 
#line 3544
struct PrintNamedProperty { 
WCHAR *propertyName; 
PrintPropertyValue propertyValue; 

} PrintNamedProperty; }
#line 3555
extern "C" { typedef 
#line 3551
struct PrintPropertiesCollection { 
ULONG numberOfProperties; 
PrintNamedProperty *propertiesCollection; 

} PrintPropertiesCollection; }


extern "C" { extern HRESULT ReportJobProcessingProgress(HANDLE, ULONG, EPrintXPSJobOperation, EPrintXPSJobProgress); } 
#line 3567
extern "C" { extern BOOL __stdcall GetPrinterDriver2A(HWND, HANDLE, LPSTR, DWORD, LPBYTE, DWORD, LPDWORD); } 
#line 3579
extern "C" { extern BOOL __stdcall GetPrinterDriver2W(HWND, HANDLE, LPWSTR, DWORD, LPBYTE, DWORD, LPDWORD); } 
#line 24 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\pshpack8.h"
#pragma warning(disable:4103)
#line 24 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\pshpack8.h"
#pragma warning(disable:4103)
#line 26 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\pshpack8.h"
#pragma pack ( push, 8 )
#line 26 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\pshpack8.h"
#pragma pack ( push, 8 )
#line 237 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objbase.h"
template < typename T > void * * IID_PPV_ARGS_Helper ( T * * pp )
    {

        static_cast < IUnknown * > ( * pp );

        return reinterpret_cast < void * * > ( pp );
    }
#line 372 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objbase.h"
typedef 
#line 360
enum tagREGCLS { 

REGCLS_SINGLEUSE, 
REGCLS_MULTIPLEUSE, 

REGCLS_MULTI_SEPARATE, 

REGCLS_SUSPENDED = 4, 

REGCLS_SURROGATE = 8


} REGCLS; 
#line 426 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objbase.h"
typedef DWORD STGFMT; 
#line 438
typedef IRpcStubBuffer IRpcStubBuffer; 
typedef IRpcChannelBuffer IRpcChannelBuffer; 
#line 17 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\unknwn.h"
#pragma warning( disable: 4049 )
#line 53 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\unknwn.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000000-0000-0000-c000-000000000046")) IUnknown IUnknown; 
#line 59 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\unknwn.h"
typedef struct __declspec( novtable ) __declspec(uuid("000e0000-0000-0000-c000-000000000046")) AsyncIUnknown AsyncIUnknown; 
#line 65 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\unknwn.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000001-0000-0000-c000-000000000046")) IClassFactory IClassFactory; 
#line 91 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\unknwn.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec; 
#line 100
extern "C" { typedef IUnknown *LPUNKNOWN; }
#line 108
extern "C" const IID IID_IUnknown; 



struct __declspec( novtable ) __declspec(uuid("00000000-0000-0000-c000-000000000046")) IUnknown { 



virtual HRESULT __stdcall QueryInterface(const IID &, void **) = 0; 



virtual ULONG __stdcall AddRef() = 0; 

virtual ULONG __stdcall Release() = 0; 

template < class Q >
            HRESULT



            __stdcall

            QueryInterface ( Q * * pp )
            {
                return QueryInterface ( __uuidof ( Q ), ( void * * ) pp );
            }
#line 137 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\unknwn.h"
}; 

extern "C" { extern HRESULT __stdcall IUnknown_QueryInterface_Proxy(IUnknown *, const IID &, void **); } 




extern "C" { extern void __stdcall IUnknown_QueryInterface_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 150
extern "C" { extern ULONG __stdcall IUnknown_AddRef_Proxy(IUnknown *); } 


extern "C" { extern void __stdcall IUnknown_AddRef_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 159
extern "C" { extern ULONG __stdcall IUnknown_Release_Proxy(IUnknown *); } 


extern "C" { extern void __stdcall IUnknown_Release_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 283 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\unknwn.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec; 
#line 293
extern "C" const IID IID_AsyncIUnknown; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("000e0000-0000-0000-c000-000000000046")) AsyncIUnknown : public IUnknown { 


virtual HRESULT __stdcall Begin_QueryInterface(const IID &) = 0; 


virtual HRESULT __stdcall Finish_QueryInterface(void **) = 0; 



virtual HRESULT __stdcall Begin_AddRef() = 0; 

virtual ULONG __stdcall Finish_AddRef() = 0; 

virtual HRESULT __stdcall Begin_Release() = 0; 

virtual ULONG __stdcall Finish_Release() = 0; 

}; }
#line 415 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\unknwn.h"
extern "C" { typedef IClassFactory *LPCLASSFACTORY; }


extern "C" const IID IID_IClassFactory; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000001-0000-0000-c000-000000000046")) IClassFactory : public IUnknown { 


virtual HRESULT __stdcall CreateInstance(IUnknown *, const IID &, void **) = 0; 




virtual HRESULT __stdcall LockServer(BOOL) = 0; 


}; }
#line 500 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\unknwn.h"
extern "C" { extern HRESULT __stdcall IClassFactory_RemoteCreateInstance_Proxy(IClassFactory *, const IID &, IUnknown **); } 
#line 506
extern "C" { extern void __stdcall IClassFactory_RemoteCreateInstance_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 513
extern "C" { extern HRESULT __stdcall IClassFactory_RemoteLockServer_Proxy(IClassFactory *, BOOL); } 




extern "C" { extern void __stdcall IClassFactory_RemoteLockServer_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 531 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\unknwn.h"
extern "C" { extern HRESULT __stdcall IClassFactory_CreateInstance_Proxy(IClassFactory *, IUnknown *, const IID &, void **); } 
#line 538
extern "C" { extern HRESULT __stdcall IClassFactory_CreateInstance_Stub(IClassFactory *, const IID &, IUnknown **); } 




extern "C" { extern HRESULT __stdcall IClassFactory_LockServer_Proxy(IClassFactory *, BOOL); } 




extern "C" { extern HRESULT __stdcall IClassFactory_LockServer_Stub(IClassFactory *, BOOL); } 
#line 17 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
#pragma warning( disable: 4049 )
#line 53 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000003-0000-0000-c000-000000000046")) IMarshal IMarshal; 
#line 59 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("000001cf-0000-0000-c000-000000000046")) IMarshal2 IMarshal2; 
#line 65 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000002-0000-0000-c000-000000000046")) IMalloc IMalloc; 
#line 71 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("0000001d-0000-0000-c000-000000000046")) IMallocSpy IMallocSpy; 
#line 77 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000018-0000-0000-c000-000000000046")) IStdMarshalInfo IStdMarshalInfo; 
#line 83 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000019-0000-0000-c000-000000000046")) IExternalConnection IExternalConnection; 
#line 89 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000020-0000-0000-c000-000000000046")) IMultiQI IMultiQI; 
#line 95 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("000e0020-0000-0000-c000-000000000046")) AsyncIMultiQI AsyncIMultiQI; 
#line 101 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000021-0000-0000-c000-000000000046")) IInternalUnknown IInternalUnknown; 
#line 107 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000100-0000-0000-c000-000000000046")) IEnumUnknown IEnumUnknown; 
#line 113 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("0000000e-0000-0000-c000-000000000046")) IBindCtx IBindCtx; 
#line 119 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000102-0000-0000-c000-000000000046")) IEnumMoniker IEnumMoniker; 
#line 125 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000126-0000-0000-c000-000000000046")) IRunnableObject IRunnableObject; 
#line 131 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000010-0000-0000-c000-000000000046")) IRunningObjectTable IRunningObjectTable; 
#line 137 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("0000010c-0000-0000-c000-000000000046")) IPersist IPersist; 
#line 143 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000109-0000-0000-c000-000000000046")) IPersistStream IPersistStream; 
#line 149 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("0000000f-0000-0000-c000-000000000046")) IMoniker IMoniker; 
#line 155 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("f29f6bc0-5021-11ce-aa15-00006901293f")) IROTData IROTData; 
#line 161 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000101-0000-0000-c000-000000000046")) IEnumString IEnumString; 
#line 167 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("0c733a30-2a1c-11ce-ade5-00aa0044773d")) ISequentialStream ISequentialStream; 
#line 173 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("0000000c-0000-0000-c000-000000000046")) IStream IStream; 
#line 179 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("0000000d-0000-0000-c000-000000000046")) IEnumSTATSTG IEnumSTATSTG; 
#line 185 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("0000000b-0000-0000-c000-000000000046")) IStorage IStorage; 
#line 191 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("0000010b-0000-0000-c000-000000000046")) IPersistFile IPersistFile; 
#line 197 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("0000010a-0000-0000-c000-000000000046")) IPersistStorage IPersistStorage; 
#line 203 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("0000000a-0000-0000-c000-000000000046")) ILockBytes ILockBytes; 
#line 209 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000103-0000-0000-c000-000000000046")) IEnumFORMATETC IEnumFORMATETC; 
#line 215 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000105-0000-0000-c000-000000000046")) IEnumSTATDATA IEnumSTATDATA; 
#line 221 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000012-0000-0000-c000-000000000046")) IRootStorage IRootStorage; 
#line 227 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("0000010f-0000-0000-c000-000000000046")) IAdviseSink IAdviseSink; 
#line 233 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000150-0000-0000-c000-000000000046")) AsyncIAdviseSink AsyncIAdviseSink; 
#line 239 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000125-0000-0000-c000-000000000046")) IAdviseSink2 IAdviseSink2; 
#line 245 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000151-0000-0000-c000-000000000046")) AsyncIAdviseSink2 AsyncIAdviseSink2; 
#line 251 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("0000010e-0000-0000-c000-000000000046")) IDataObject IDataObject; 
#line 257 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000110-0000-0000-c000-000000000046")) IDataAdviseHolder IDataAdviseHolder; 
#line 263 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000016-0000-0000-c000-000000000046")) IMessageFilter IMessageFilter; 
#line 269 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef IRpcChannelBuffer IRpcChannelBuffer; 
#line 275 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("594f31d0-7f19-11d0-b194-00a0c90dc8bf")) IRpcChannelBuffer2 IRpcChannelBuffer2; 
#line 281 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("a5029fb6-3c34-11d1-9c99-00c04fb998aa")) IAsyncRpcChannelBuffer IAsyncRpcChannelBuffer; 
#line 287 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("25b15600-0115-11d0-bf0d-00aa00b8dfd2")) IRpcChannelBuffer3 IRpcChannelBuffer3; 
#line 293 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("58a08519-24c8-4935-b482-3fd823333a4f")) IRpcSyntaxNegotiate IRpcSyntaxNegotiate; 
#line 299 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("d5f56a34-593b-101a-b569-08002b2dbf7a")) IRpcProxyBuffer IRpcProxyBuffer; 
#line 305 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef IRpcStubBuffer IRpcStubBuffer; 
#line 311 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("d5f569d0-593b-101a-b569-08002b2dbf7a")) IPSFactoryBuffer IPSFactoryBuffer; 
#line 317 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("1008c4a0-7613-11cf-9af1-0020af6e72f4")) IChannelHook IChannelHook; 
#line 323 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("0000013d-0000-0000-c000-000000000046")) IClientSecurity IClientSecurity; 
#line 329 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("0000013e-0000-0000-c000-000000000046")) IServerSecurity IServerSecurity; 
#line 335 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000140-0000-0000-c000-000000000046")) IClassActivator IClassActivator; 
#line 341 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000144-0000-0000-c000-000000000046")) IRpcOptions IRpcOptions; 
#line 347 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("99caf010-415e-11cf-8814-00aa00b569f5")) IFillLockBytes IFillLockBytes; 
#line 353 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("a9d758a0-4617-11cf-95fc-00aa00680db4")) IProgressNotify IProgressNotify; 
#line 359 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("0e6d4d90-6738-11cf-9608-00aa00680db4")) ILayoutStorage ILayoutStorage; 
#line 365 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("30f3d47a-6447-11d1-8e3c-00c04fb9386d")) IBlockingLock IBlockingLock; 
#line 371 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("bc0bf6ae-8878-11d1-83e9-00c04fc2c6d4")) ITimeAndNoticeControl ITimeAndNoticeControl; 
#line 377 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("8d19c834-8879-11d1-83e9-00c04fc2c6d4")) IOplockStorage IOplockStorage; 
#line 383 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000022-0000-0000-c000-000000000046")) ISurrogate ISurrogate; 
#line 389 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000146-0000-0000-c000-000000000046")) IGlobalInterfaceTable IGlobalInterfaceTable; 
#line 395 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("0e6d4d92-6738-11cf-9608-00aa00680db4")) IDirectWriterLock IDirectWriterLock; 
#line 401 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000030-0000-0000-c000-000000000046")) ISynchronize ISynchronize; 
#line 407 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000031-0000-0000-c000-000000000046")) ISynchronizeHandle ISynchronizeHandle; 
#line 413 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000032-0000-0000-c000-000000000046")) ISynchronizeEvent ISynchronizeEvent; 
#line 419 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000033-0000-0000-c000-000000000046")) ISynchronizeContainer ISynchronizeContainer; 
#line 425 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000025-0000-0000-c000-000000000046")) ISynchronizeMutex ISynchronizeMutex; 
#line 431 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000029-0000-0000-c000-000000000046")) ICancelMethodCalls ICancelMethodCalls; 
#line 437 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("0000002a-0000-0000-c000-000000000046")) IAsyncManager IAsyncManager; 
#line 443 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("1c733a30-2a1c-11ce-ade5-00aa0044773d")) ICallFactory ICallFactory; 
#line 449 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000149-0000-0000-c000-000000000046")) IRpcHelper IRpcHelper; 
#line 455 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("eb0cb9e8-7996-11d2-872e-0000f8080859")) IReleaseMarshalBuffers IReleaseMarshalBuffers; 
#line 461 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("0000002b-0000-0000-c000-000000000046")) IWaitMultiple IWaitMultiple; 
#line 467 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000026-0000-0000-c000-000000000046")) IUrlMon IUrlMon; 
#line 473 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000145-0000-0000-c000-000000000046")) IForegroundTransfer IForegroundTransfer; 
#line 479 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000147-0000-0000-c000-000000000046")) IAddrTrackingControl IAddrTrackingControl; 
#line 485 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000148-0000-0000-c000-000000000046")) IAddrExclusionControl IAddrExclusionControl; 
#line 491 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("db2f3aca-2f86-11d1-8e04-00c04fb9989a")) IPipeByte IPipeByte; 
#line 497 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("db2f3acb-2f86-11d1-8e04-00c04fb9989a")) AsyncIPipeByte AsyncIPipeByte; 
#line 503 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("db2f3acc-2f86-11d1-8e04-00c04fb9989a")) IPipeLong IPipeLong; 
#line 509 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("db2f3acd-2f86-11d1-8e04-00c04fb9989a")) AsyncIPipeLong AsyncIPipeLong; 
#line 515 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("db2f3ace-2f86-11d1-8e04-00c04fb9989a")) IPipeDouble IPipeDouble; 
#line 521 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("db2f3acf-2f86-11d1-8e04-00c04fb9989a")) AsyncIPipeDouble AsyncIPipeDouble; 
#line 527 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("969dc708-5c76-11d1-8d86-0000f804b057")) IThumbnailExtractor IThumbnailExtractor; 
#line 533 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("947990de-cc28-11d2-a0f7-00805f858fb1")) IDummyHICONIncluder IDummyHICONIncluder; 
#line 539 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct IEnumContextProps IEnumContextProps; 
#line 545 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct IContext IContext; 
#line 551 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct IObjContext IObjContext; 
#line 557 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("000001d5-0000-0000-c000-000000000046")) IProcessLock IProcessLock; 
#line 563 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("000001d4-0000-0000-c000-000000000046")) ISurrogateService ISurrogateService; 
#line 569 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("000001ce-0000-0000-c000-000000000046")) IComThreadingInfo IComThreadingInfo; 
#line 575 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("72380d55-8d2b-43a3-8513-2b6ef31434e9")) IProcessInitControl IProcessInitControl; 
#line 581 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000034-0000-0000-c000-000000000046")) IInitializeSpy IInitializeSpy; 
#line 620 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
#pragma warning(push)
#line 622 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
#pragma warning(disable:4201)
#line 647 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef 
#line 641
struct _COSERVERINFO { 

DWORD dwReserved1; 
LPWSTR pwszName; 
COAUTHINFO *pAuthInfo; 
DWORD dwReserved2; 
} COSERVERINFO; }




extern "C" RPC_IF_HANDLE __MIDL_itf_objidl_0000_0000_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_objidl_0000_0000_v0_0_s_ifspec; 
#line 661
extern "C" { typedef IMarshal *LPMARSHAL; }


extern "C" const IID IID_IMarshal; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000003-0000-0000-c000-000000000046")) IMarshal : public IUnknown { 


virtual HRESULT __stdcall GetUnmarshalClass(const IID &, void *, DWORD, void *, DWORD, CLSID *) = 0; 
#line 680
virtual HRESULT __stdcall GetMarshalSizeMax(const IID &, void *, DWORD, void *, DWORD, DWORD *) = 0; 
#line 688
virtual HRESULT __stdcall MarshalInterface(IStream *, const IID &, void *, DWORD, void *, DWORD) = 0; 
#line 696
virtual HRESULT __stdcall UnmarshalInterface(IStream *, const IID &, void **) = 0; 




virtual HRESULT __stdcall ReleaseMarshalData(IStream *) = 0; 


virtual HRESULT __stdcall DisconnectObject(DWORD) = 0; 


}; }
#line 826 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef IMarshal2 *LPMARSHAL2; }


extern "C" const IID IID_IMarshal2; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("000001cf-0000-0000-c000-000000000046")) IMarshal2 : public IMarshal { 


}; }
#line 957 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef IMalloc *LPMALLOC; }


extern "C" const IID IID_IMalloc; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000002-0000-0000-c000-000000000046")) IMalloc : public IUnknown { 


virtual void *__stdcall Alloc(SIZE_T) = 0; 


virtual void *__stdcall Realloc(void *, SIZE_T) = 0; 



virtual void __stdcall Free(void *) = 0; 


virtual SIZE_T __stdcall GetSize(void *) = 0; 


virtual int __stdcall DidAlloc(void *) = 0; 


virtual void __stdcall HeapMinimize() = 0; 

}; }
#line 1088 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef IMallocSpy *LPMALLOCSPY; }


extern "C" const IID IID_IMallocSpy; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("0000001d-0000-0000-c000-000000000046")) IMallocSpy : public IUnknown { 


virtual SIZE_T __stdcall PreAlloc(SIZE_T) = 0; 


virtual void *__stdcall PostAlloc(void *) = 0; 


virtual void *__stdcall PreFree(void *, BOOL) = 0; 



virtual void __stdcall PostFree(BOOL) = 0; 


virtual SIZE_T __stdcall PreRealloc(void *, SIZE_T, void **, BOOL) = 0; 
#line 1118
virtual void *__stdcall PostRealloc(void *, BOOL) = 0; 



virtual void *__stdcall PreGetSize(void *, BOOL) = 0; 



virtual SIZE_T __stdcall PostGetSize(SIZE_T, BOOL) = 0; 



virtual void *__stdcall PreDidAlloc(void *, BOOL) = 0; 



virtual int __stdcall PostDidAlloc(void *, BOOL, int) = 0; 




virtual void __stdcall PreHeapMinimize() = 0; 

virtual void __stdcall PostHeapMinimize() = 0; 

}; }
#line 1295 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef IStdMarshalInfo *LPSTDMARSHALINFO; }


extern "C" const IID IID_IStdMarshalInfo; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000018-0000-0000-c000-000000000046")) IStdMarshalInfo : public IUnknown { 


virtual HRESULT __stdcall GetClassForHandler(DWORD, void *, CLSID *) = 0; 




}; }
#line 1380 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef IExternalConnection *LPEXTERNALCONNECTION; }
#line 1387
extern "C" { typedef 
#line 1383
enum tagEXTCONN { 
EXTCONN_STRONG = 1, 
EXTCONN_WEAK, 
EXTCONN_CALLABLE = 4
} EXTCONN; }


extern "C" const IID IID_IExternalConnection; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000019-0000-0000-c000-000000000046")) IExternalConnection : public IUnknown { 


virtual DWORD __stdcall AddConnection(DWORD, DWORD) = 0; 



virtual DWORD __stdcall ReleaseConnection(DWORD, DWORD, BOOL) = 0; 




}; }
#line 1481 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef IMultiQI *LPMULTIQI; }
#line 1488
extern "C" { typedef 
#line 1483
struct tagMULTI_QI { 

const IID *pIID; 
IUnknown *pItf; 
HRESULT hr; 
} MULTI_QI; }



extern "C" RPC_IF_HANDLE __MIDL_itf_objidl_0000_0006_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_objidl_0000_0006_v0_0_s_ifspec; 
#line 1502
extern "C" const IID IID_IMultiQI; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000020-0000-0000-c000-000000000046")) IMultiQI : public IUnknown { 


virtual HRESULT __stdcall QueryMultipleInterfaces(ULONG, MULTI_QI *) = 0; 



}; }
#line 1583 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_AsyncIMultiQI; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("000e0020-0000-0000-c000-000000000046")) AsyncIMultiQI : public IUnknown { 


virtual HRESULT __stdcall Begin_QueryMultipleInterfaces(ULONG, MULTI_QI *) = 0; 



virtual HRESULT __stdcall Finish_QueryMultipleInterfaces(MULTI_QI *) = 0; 


}; }
#line 1674 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_IInternalUnknown; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000021-0000-0000-c000-000000000046")) IInternalUnknown : public IUnknown { 


virtual HRESULT __stdcall QueryInternalInterface(const IID &, void **) = 0; 



}; }
#line 1754 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef IEnumUnknown *LPENUMUNKNOWN; }


extern "C" const IID IID_IEnumUnknown; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000100-0000-0000-c000-000000000046")) IEnumUnknown : public IUnknown { 


virtual HRESULT __stdcall Next(ULONG, IUnknown **, ULONG *) = 0; 




virtual HRESULT __stdcall Skip(ULONG) = 0; 


virtual HRESULT __stdcall Reset() = 0; 

virtual HRESULT __stdcall Clone(struct IEnumUnknown **) = 0; 


}; }
#line 1857 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { extern HRESULT __stdcall IEnumUnknown_RemoteNext_Proxy(IEnumUnknown *, ULONG, IUnknown **, ULONG *); } 
#line 1864
extern "C" { extern void __stdcall IEnumUnknown_RemoteNext_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 1881 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef IBindCtx *LPBC; }

extern "C" { typedef IBindCtx *LPBINDCTX; }
#line 1891
extern "C" { typedef 
#line 1886
struct tagBIND_OPTS { 
DWORD cbStruct; 
DWORD grfFlags; 
DWORD grfMode; 
DWORD dwTickCountDeadline; 
} BIND_OPTS; }extern "C" { typedef tagBIND_OPTS *LPBIND_OPTS; }
#line 1910 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef 
#line 1905
struct tagBIND_OPTS2 : public tagBIND_OPTS { 
DWORD dwTrackFlags; 
DWORD dwClassContext; 
LCID locale; 
COSERVERINFO *pServerInfo; 
} BIND_OPTS2; }extern "C" { typedef tagBIND_OPTS2 *LPBIND_OPTS2; }
#line 1931 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef 
#line 1929
struct tagBIND_OPTS3 : public tagBIND_OPTS2 { 
HWND hwnd; 
} BIND_OPTS3; }extern "C" { typedef tagBIND_OPTS3 *LPBIND_OPTS3; }
#line 1953 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef 
#line 1950
enum tagBIND_FLAGS { 
BIND_MAYBOTHERUSER = 1, 
BIND_JUSTTESTEXISTENCE
} BIND_FLAGS; }


extern "C" const IID IID_IBindCtx; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("0000000e-0000-0000-c000-000000000046")) IBindCtx : public IUnknown { 


virtual HRESULT __stdcall RegisterObjectBound(IUnknown *) = 0; 


virtual HRESULT __stdcall RevokeObjectBound(IUnknown *) = 0; 


virtual HRESULT __stdcall ReleaseBoundObjects() = 0; 

virtual HRESULT __stdcall SetBindOptions(BIND_OPTS *) = 0; 


virtual HRESULT __stdcall GetBindOptions(BIND_OPTS *) = 0; 


virtual HRESULT __stdcall GetRunningObjectTable(IRunningObjectTable **) = 0; 


virtual HRESULT __stdcall RegisterObjectParam(LPOLESTR, IUnknown *) = 0; 



virtual HRESULT __stdcall GetObjectParam(LPOLESTR, IUnknown **) = 0; 



virtual HRESULT __stdcall EnumObjectParam(IEnumString **) = 0; 


virtual HRESULT __stdcall RevokeObjectParam(LPOLESTR) = 0; 


}; }
#line 2116 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { extern HRESULT __stdcall IBindCtx_RemoteSetBindOptions_Proxy(IBindCtx *, BIND_OPTS2 *); } 




extern "C" { extern void __stdcall IBindCtx_RemoteSetBindOptions_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 2128
extern "C" { extern HRESULT __stdcall IBindCtx_RemoteGetBindOptions_Proxy(IBindCtx *, BIND_OPTS2 *); } 




extern "C" { extern void __stdcall IBindCtx_RemoteGetBindOptions_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 2150 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef IEnumMoniker *LPENUMMONIKER; }


extern "C" const IID IID_IEnumMoniker; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000102-0000-0000-c000-000000000046")) IEnumMoniker : public IUnknown { 


virtual HRESULT __stdcall Next(ULONG, IMoniker **, ULONG *) = 0; 




virtual HRESULT __stdcall Skip(ULONG) = 0; 


virtual HRESULT __stdcall Reset() = 0; 

virtual HRESULT __stdcall Clone(struct IEnumMoniker **) = 0; 


}; }
#line 2253 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { extern HRESULT __stdcall IEnumMoniker_RemoteNext_Proxy(IEnumMoniker *, ULONG, IMoniker **, ULONG *); } 
#line 2260
extern "C" { extern void __stdcall IEnumMoniker_RemoteNext_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 2277 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef IRunnableObject *LPRUNNABLEOBJECT; }


extern "C" const IID IID_IRunnableObject; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000126-0000-0000-c000-000000000046")) IRunnableObject : public IUnknown { 


virtual HRESULT __stdcall GetRunningClass(LPCLSID) = 0; 


virtual HRESULT __stdcall Run(LPBINDCTX) = 0; 


virtual BOOL __stdcall IsRunning() = 0; 

virtual HRESULT __stdcall LockRunning(BOOL, BOOL) = 0; 



virtual HRESULT __stdcall SetContainedObject(BOOL) = 0; 


}; }
#line 2388 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { extern HRESULT __stdcall IRunnableObject_RemoteIsRunning_Proxy(IRunnableObject *); } 



extern "C" { extern void __stdcall IRunnableObject_RemoteIsRunning_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 2409 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef IRunningObjectTable *LPRUNNINGOBJECTTABLE; }


extern "C" const IID IID_IRunningObjectTable; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000010-0000-0000-c000-000000000046")) IRunningObjectTable : public IUnknown { 


virtual HRESULT __stdcall Register(DWORD, IUnknown *, IMoniker *, DWORD *) = 0; 
#line 2426
virtual HRESULT __stdcall Revoke(DWORD) = 0; 


virtual HRESULT __stdcall IsRunning(IMoniker *) = 0; 


virtual HRESULT __stdcall GetObjectA(IMoniker *, IUnknown **) = 0; 



virtual HRESULT __stdcall NoteChangeTime(DWORD, FILETIME *) = 0; 



virtual HRESULT __stdcall GetTimeOfLastChange(IMoniker *, FILETIME *) = 0; 



virtual HRESULT __stdcall EnumRunning(IEnumMoniker **) = 0; 


}; }
#line 2562 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef IPersist *LPPERSIST; }


extern "C" const IID IID_IPersist; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("0000010c-0000-0000-c000-000000000046")) IPersist : public IUnknown { 


virtual HRESULT __stdcall GetClassID(CLSID *) = 0; 


}; }
#line 2643 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef IPersistStream *LPPERSISTSTREAM; }


extern "C" const IID IID_IPersistStream; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000109-0000-0000-c000-000000000046")) IPersistStream : public IPersist { 


virtual HRESULT __stdcall IsDirty() = 0; 

virtual HRESULT __stdcall Load(IStream *) = 0; 


virtual HRESULT __stdcall Save(IStream *, BOOL) = 0; 



virtual HRESULT __stdcall GetSizeMax(ULARGE_INTEGER *) = 0; 


}; }
#line 2762 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef IMoniker *LPMONIKER; }
#line 2776
extern "C" { typedef 
#line 2765
enum tagMKSYS { 
MKSYS_NONE, 
MKSYS_GENERICCOMPOSITE, 
MKSYS_FILEMONIKER, 
MKSYS_ANTIMONIKER, 
MKSYS_ITEMMONIKER, 
MKSYS_POINTERMONIKER, 
MKSYS_CLASSMONIKER = 7, 
MKSYS_OBJREFMONIKER, 
MKSYS_SESSIONMONIKER, 
MKSYS_LUAMONIKER
} MKSYS; }
#line 2784
extern "C" { typedef 
#line 2779
enum tagMKREDUCE { 
MKRREDUCE_ONE = 196608, 
MKRREDUCE_TOUSER = 131072, 
MKRREDUCE_THROUGHUSER = 65536, 
MKRREDUCE_ALL = 0
} MKRREDUCE; }


extern "C" const IID IID_IMoniker; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("0000000f-0000-0000-c000-000000000046")) IMoniker : public IPersistStream { 


virtual HRESULT __stdcall BindToObject(IBindCtx *, struct IMoniker *, const IID &, void **) = 0; 
#line 2801
virtual HRESULT __stdcall BindToStorage(IBindCtx *, struct IMoniker *, const IID &, void **) = 0; 
#line 2807
virtual HRESULT __stdcall Reduce(IBindCtx *, DWORD, struct IMoniker **, struct IMoniker **) = 0; 
#line 2813
virtual HRESULT __stdcall ComposeWith(struct IMoniker *, BOOL, struct IMoniker **) = 0; 




virtual HRESULT __stdcall Enum(BOOL, IEnumMoniker **) = 0; 



virtual HRESULT __stdcall IsEqual(struct IMoniker *) = 0; 


virtual HRESULT __stdcall Hash(DWORD *) = 0; 


virtual HRESULT __stdcall IsRunning(IBindCtx *, struct IMoniker *, struct IMoniker *) = 0; 




virtual HRESULT __stdcall GetTimeOfLastChange(IBindCtx *, struct IMoniker *, FILETIME *) = 0; 




virtual HRESULT __stdcall Inverse(struct IMoniker **) = 0; 


virtual HRESULT __stdcall CommonPrefixWith(struct IMoniker *, struct IMoniker **) = 0; 



virtual HRESULT __stdcall RelativePathTo(struct IMoniker *, struct IMoniker **) = 0; 



virtual HRESULT __stdcall GetDisplayName(IBindCtx *, struct IMoniker *, LPOLESTR *) = 0; 




virtual HRESULT __stdcall ParseDisplayName(IBindCtx *, struct IMoniker *, LPOLESTR, ULONG *, struct IMoniker **) = 0; 
#line 2861
virtual HRESULT __stdcall IsSystemMoniker(DWORD *) = 0; 


}; }
#line 3080 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { extern HRESULT __stdcall IMoniker_RemoteBindToObject_Proxy(IMoniker *, IBindCtx *, IMoniker *, const IID &, IUnknown **); } 
#line 3088
extern "C" { extern void __stdcall IMoniker_RemoteBindToObject_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 3095
extern "C" { extern HRESULT __stdcall IMoniker_RemoteBindToStorage_Proxy(IMoniker *, IBindCtx *, IMoniker *, const IID &, IUnknown **); } 
#line 3103
extern "C" { extern void __stdcall IMoniker_RemoteBindToStorage_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 3121 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_IROTData; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("f29f6bc0-5021-11ce-aa15-00006901293f")) IROTData : public IUnknown { 


virtual HRESULT __stdcall GetComparisonData(byte *, ULONG, ULONG *) = 0; 




}; }
#line 3203 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef IEnumString *LPENUMSTRING; }


extern "C" const IID IID_IEnumString; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000101-0000-0000-c000-000000000046")) IEnumString : public IUnknown { 


virtual HRESULT __stdcall Next(ULONG, LPOLESTR *, ULONG *) = 0; 
#line 3220
virtual HRESULT __stdcall Skip(ULONG) = 0; 


virtual HRESULT __stdcall Reset() = 0; 

virtual HRESULT __stdcall Clone(struct IEnumString **) = 0; 


}; }
#line 3308 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { extern HRESULT __stdcall IEnumString_RemoteNext_Proxy(IEnumString *, ULONG, LPOLESTR *, ULONG *); } 
#line 3315
extern "C" { extern void __stdcall IEnumString_RemoteNext_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 3333 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_ISequentialStream; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("0c733a30-2a1c-11ce-ade5-00aa0044773d")) ISequentialStream : public IUnknown { 


virtual HRESULT __stdcall Read(void *, ULONG, ULONG *) = 0; 




virtual HRESULT __stdcall Write(const void *, ULONG, ULONG *) = 0; 




}; }
#line 3419 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { extern HRESULT __stdcall ISequentialStream_RemoteRead_Proxy(ISequentialStream *, byte *, ULONG, ULONG *); } 
#line 3426
extern "C" { extern void __stdcall ISequentialStream_RemoteRead_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 3433
extern "C" { extern HRESULT __stdcall ISequentialStream_RemoteWrite_Proxy(ISequentialStream *, const byte *, ULONG, ULONG *); } 
#line 3440
extern "C" { extern void __stdcall ISequentialStream_RemoteWrite_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 3457 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef IStream *LPSTREAM; }
#line 3490
extern "C" { typedef 
#line 3477
struct tagSTATSTG { 

LPOLESTR pwcsName; 
DWORD type; 
ULARGE_INTEGER cbSize; 
FILETIME mtime; 
FILETIME ctime; 
FILETIME atime; 
DWORD grfMode; 
DWORD grfLocksSupported; 
CLSID clsid; 
DWORD grfStateBits; 
DWORD reserved; 
} STATSTG; }
#line 3499 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef 
#line 3494
enum tagSTGTY { 
STGTY_STORAGE = 1, 
STGTY_STREAM, 
STGTY_LOCKBYTES, 
STGTY_PROPERTY
} STGTY; }
#line 3506
extern "C" { typedef 
#line 3502
enum tagSTREAM_SEEK { 
STREAM_SEEK_SET, 
STREAM_SEEK_CUR, 
STREAM_SEEK_END
} STREAM_SEEK; }
#line 3513
extern "C" { typedef 
#line 3509
enum tagLOCKTYPE { 
LOCK_WRITE = 1, 
LOCK_EXCLUSIVE, 
LOCK_ONLYONCE = 4
} LOCKTYPE; }


extern "C" const IID IID_IStream; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("0000000c-0000-0000-c000-000000000046")) IStream : public ISequentialStream { 


virtual HRESULT __stdcall Seek(LARGE_INTEGER, DWORD, ULARGE_INTEGER *) = 0; 




virtual HRESULT __stdcall SetSize(ULARGE_INTEGER) = 0; 


virtual HRESULT __stdcall CopyTo(struct IStream *, ULARGE_INTEGER, ULARGE_INTEGER *, ULARGE_INTEGER *) = 0; 
#line 3538
virtual HRESULT __stdcall Commit(DWORD) = 0; 


virtual HRESULT __stdcall Revert() = 0; 

virtual HRESULT __stdcall LockRegion(ULARGE_INTEGER, ULARGE_INTEGER, DWORD) = 0; 




virtual HRESULT __stdcall UnlockRegion(ULARGE_INTEGER, ULARGE_INTEGER, DWORD) = 0; 




virtual HRESULT __stdcall Stat(STATSTG *, DWORD) = 0; 



virtual HRESULT __stdcall Clone(struct IStream **) = 0; 


}; }
#line 3701 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { extern HRESULT __stdcall IStream_RemoteSeek_Proxy(IStream *, LARGE_INTEGER, DWORD, ULARGE_INTEGER *); } 
#line 3708
extern "C" { extern void __stdcall IStream_RemoteSeek_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 3715
extern "C" { extern HRESULT __stdcall IStream_RemoteCopyTo_Proxy(IStream *, IStream *, ULARGE_INTEGER, ULARGE_INTEGER *, ULARGE_INTEGER *); } 
#line 3723
extern "C" { extern void __stdcall IStream_RemoteCopyTo_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 3740 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef IEnumSTATSTG *LPENUMSTATSTG; }


extern "C" const IID IID_IEnumSTATSTG; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("0000000d-0000-0000-c000-000000000046")) IEnumSTATSTG : public IUnknown { 


virtual HRESULT __stdcall Next(ULONG, STATSTG *, ULONG *) = 0; 




virtual HRESULT __stdcall Skip(ULONG) = 0; 


virtual HRESULT __stdcall Reset() = 0; 

virtual HRESULT __stdcall Clone(struct IEnumSTATSTG **) = 0; 


}; }
#line 3843 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { extern HRESULT __stdcall IEnumSTATSTG_RemoteNext_Proxy(IEnumSTATSTG *, ULONG, STATSTG *, ULONG *); } 
#line 3850
extern "C" { extern void __stdcall IEnumSTATSTG_RemoteNext_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 3867 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef IStorage *LPSTORAGE; }
#line 3874
extern "C" { typedef 
#line 3869
struct tagRemSNB { 

unsigned long ulCntStr; 
unsigned long ulCntChar; 
OLECHAR rgString[1]; 
} RemSNB; }

extern "C" { typedef RemSNB *wireSNB; }

extern "C" { typedef OLECHAR **SNB; }


extern "C" const IID IID_IStorage; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("0000000b-0000-0000-c000-000000000046")) IStorage : public IUnknown { 


virtual HRESULT __stdcall CreateStream(const OLECHAR *, DWORD, DWORD, DWORD, IStream **) = 0; 
#line 3896
virtual HRESULT __stdcall OpenStream(const OLECHAR *, void *, DWORD, DWORD, IStream **) = 0; 
#line 3903
virtual HRESULT __stdcall CreateStorage(const OLECHAR *, DWORD, DWORD, DWORD, struct IStorage **) = 0; 
#line 3910
virtual HRESULT __stdcall OpenStorage(const OLECHAR *, struct IStorage *, DWORD, SNB, DWORD, struct IStorage **) = 0; 
#line 3918
virtual HRESULT __stdcall CopyTo(DWORD, const IID *, SNB, struct IStorage *) = 0; 
#line 3924
virtual HRESULT __stdcall MoveElementTo(const OLECHAR *, struct IStorage *, const OLECHAR *, DWORD) = 0; 
#line 3930
virtual HRESULT __stdcall Commit(DWORD) = 0; 


virtual HRESULT __stdcall Revert() = 0; 

virtual HRESULT __stdcall EnumElements(DWORD, void *, DWORD, IEnumSTATSTG **) = 0; 
#line 3941
virtual HRESULT __stdcall DestroyElement(const OLECHAR *) = 0; 


virtual HRESULT __stdcall RenameElement(const OLECHAR *, const OLECHAR *) = 0; 



virtual HRESULT __stdcall SetElementTimes(const OLECHAR *, const FILETIME *, const FILETIME *, const FILETIME *) = 0; 
#line 3954
virtual HRESULT __stdcall SetClass(const IID &) = 0; 


virtual HRESULT __stdcall SetStateBits(DWORD, DWORD) = 0; 



virtual HRESULT __stdcall Stat(STATSTG *, DWORD) = 0; 



}; }
#line 4151 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { extern HRESULT __stdcall IStorage_RemoteOpenStream_Proxy(IStorage *, const OLECHAR *, unsigned long, byte *, DWORD, DWORD, IStream **); } 
#line 4161
extern "C" { extern void __stdcall IStorage_RemoteOpenStream_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 4168
extern "C" { extern HRESULT __stdcall IStorage_RemoteCopyTo_Proxy(IStorage *, DWORD, const IID *, SNB, IStorage *); } 
#line 4176
extern "C" { extern void __stdcall IStorage_RemoteCopyTo_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 4183
extern "C" { extern HRESULT __stdcall IStorage_RemoteEnumElements_Proxy(IStorage *, DWORD, unsigned long, byte *, DWORD, IEnumSTATSTG **); } 
#line 4192
extern "C" { extern void __stdcall IStorage_RemoteEnumElements_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 4209 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef IPersistFile *LPPERSISTFILE; }


extern "C" const IID IID_IPersistFile; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("0000010b-0000-0000-c000-000000000046")) IPersistFile : public IPersist { 


virtual HRESULT __stdcall IsDirty() = 0; 

virtual HRESULT __stdcall Load(LPCOLESTR, DWORD) = 0; 



virtual HRESULT __stdcall Save(LPCOLESTR, BOOL) = 0; 



virtual HRESULT __stdcall SaveCompleted(LPCOLESTR) = 0; 


virtual HRESULT __stdcall GetCurFile(LPOLESTR *) = 0; 


}; }
#line 4340 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef IPersistStorage *LPPERSISTSTORAGE; }


extern "C" const IID IID_IPersistStorage; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("0000010a-0000-0000-c000-000000000046")) IPersistStorage : public IPersist { 


virtual HRESULT __stdcall IsDirty() = 0; 

virtual HRESULT __stdcall InitNew(IStorage *) = 0; 


virtual HRESULT __stdcall Load(IStorage *) = 0; 


virtual HRESULT __stdcall Save(IStorage *, BOOL) = 0; 



virtual HRESULT __stdcall SaveCompleted(IStorage *) = 0; 


virtual HRESULT __stdcall HandsOffStorage() = 0; 

}; }
#line 4477 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef ILockBytes *LPLOCKBYTES; }


extern "C" const IID IID_ILockBytes; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("0000000a-0000-0000-c000-000000000046")) ILockBytes : public IUnknown { 


virtual HRESULT __stdcall ReadAt(ULARGE_INTEGER, void *, ULONG, ULONG *) = 0; 
#line 4494
virtual HRESULT __stdcall WriteAt(ULARGE_INTEGER, const void *, ULONG, ULONG *) = 0; 
#line 4500
virtual HRESULT __stdcall Flush() = 0; 

virtual HRESULT __stdcall SetSize(ULARGE_INTEGER) = 0; 


virtual HRESULT __stdcall LockRegion(ULARGE_INTEGER, ULARGE_INTEGER, DWORD) = 0; 




virtual HRESULT __stdcall UnlockRegion(ULARGE_INTEGER, ULARGE_INTEGER, DWORD) = 0; 




virtual HRESULT __stdcall Stat(STATSTG *, DWORD) = 0; 



}; }
#line 4628 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { extern HRESULT __stdcall ILockBytes_RemoteReadAt_Proxy(ILockBytes *, ULARGE_INTEGER, byte *, ULONG, ULONG *); } 
#line 4636
extern "C" { extern void __stdcall ILockBytes_RemoteReadAt_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 4643
extern "C" { extern HRESULT __stdcall ILockBytes_RemoteWriteAt_Proxy(ILockBytes *, ULARGE_INTEGER, const byte *, ULONG, ULONG *); } 
#line 4651
extern "C" { extern void __stdcall ILockBytes_RemoteWriteAt_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 4668 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef IEnumFORMATETC *LPENUMFORMATETC; }
#line 4679
extern "C" { typedef 
#line 4671
struct tagDVTARGETDEVICE { 

DWORD tdSize; 
WORD tdDriverNameOffset; 
WORD tdDeviceNameOffset; 
WORD tdPortNameOffset; 
WORD tdExtDevmodeOffset; 
BYTE tdData[1]; 
} DVTARGETDEVICE; }


extern "C" { typedef CLIPFORMAT *LPCLIPFORMAT; }
#line 4691
extern "C" { typedef 
#line 4684
struct tagFORMATETC { 

CLIPFORMAT cfFormat; 
DVTARGETDEVICE *ptd; 
DWORD dwAspect; 
LONG lindex; 
DWORD tymed; 
} FORMATETC; }

extern "C" { typedef tagFORMATETC *LPFORMATETC; }


extern "C" const IID IID_IEnumFORMATETC; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000103-0000-0000-c000-000000000046")) IEnumFORMATETC : public IUnknown { 


virtual HRESULT __stdcall Next(ULONG, FORMATETC *, ULONG *) = 0; 




virtual HRESULT __stdcall Skip(ULONG) = 0; 


virtual HRESULT __stdcall Reset() = 0; 

virtual HRESULT __stdcall Clone(struct IEnumFORMATETC **) = 0; 


}; }
#line 4796 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { extern HRESULT __stdcall IEnumFORMATETC_RemoteNext_Proxy(IEnumFORMATETC *, ULONG, FORMATETC *, ULONG *); } 
#line 4803
extern "C" { extern void __stdcall IEnumFORMATETC_RemoteNext_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 4820 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef IEnumSTATDATA *LPENUMSTATDATA; }
#line 4831
extern "C" { typedef 
#line 4823
enum tagADVF { 
ADVF_NODATA = 1, 
ADVF_PRIMEFIRST, 
ADVF_ONLYONCE = 4, 
ADVF_DATAONSTOP = 64, 
ADVFCACHE_NOHANDLER = 8, 
ADVFCACHE_FORCEBUILTIN = 16, 
ADVFCACHE_ONSAVE = 32
} ADVF; }
#line 4839
extern "C" { typedef 
#line 4833
struct tagSTATDATA { 

FORMATETC formatetc; 
DWORD advf; 
IAdviseSink *pAdvSink; 
DWORD dwConnection; 
} STATDATA; }

extern "C" { typedef STATDATA *LPSTATDATA; }


extern "C" const IID IID_IEnumSTATDATA; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000105-0000-0000-c000-000000000046")) IEnumSTATDATA : public IUnknown { 


virtual HRESULT __stdcall Next(ULONG, STATDATA *, ULONG *) = 0; 




virtual HRESULT __stdcall Skip(ULONG) = 0; 


virtual HRESULT __stdcall Reset() = 0; 

virtual HRESULT __stdcall Clone(struct IEnumSTATDATA **) = 0; 


}; }
#line 4944 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { extern HRESULT __stdcall IEnumSTATDATA_RemoteNext_Proxy(IEnumSTATDATA *, ULONG, STATDATA *, ULONG *); } 
#line 4951
extern "C" { extern void __stdcall IEnumSTATDATA_RemoteNext_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 4968 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef IRootStorage *LPROOTSTORAGE; }


extern "C" const IID IID_IRootStorage; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000012-0000-0000-c000-000000000046")) IRootStorage : public IUnknown { 


virtual HRESULT __stdcall SwitchToFile(LPOLESTR) = 0; 


}; }
#line 5049 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef IAdviseSink *LPADVISESINK; }
#line 5061
extern "C" { typedef 
#line 5052
enum tagTYMED { 
TYMED_HGLOBAL = 1, 
TYMED_FILE, 
TYMED_ISTREAM = 4, 
TYMED_ISTORAGE = 8, 
TYMED_GDI = 16, 
TYMED_MFPICT = 32, 
TYMED_ENHMF = 64, 
TYMED_NULL = 0
} TYMED; }



#pragma warning(push)
#line 5067 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
#pragma warning(disable:4200)
#line 5077 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef 
#line 5069
struct tagRemSTGMEDIUM { 

DWORD tymed; 
DWORD dwHandleType; 
unsigned long pData; 
unsigned long pUnkForRelease; 
unsigned long cbData; 
byte data[1]; 
} RemSTGMEDIUM; }



#pragma warning(pop)
#line 5116 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef 
#line 5101
struct tagSTGMEDIUM { 

DWORD tymed; 

union { 
HBITMAP hBitmap; 
HMETAFILEPICT hMetaFilePict; 
HENHMETAFILE hEnhMetaFile; 
HGLOBAL hGlobal; 
LPOLESTR lpszFileName; 
IStream *pstm; 
IStorage *pstg; 

}; 
IUnknown *pUnkForRelease; 
} uSTGMEDIUM; }
#line 5128 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef 
#line 5119
struct _GDI_OBJECT { 

DWORD ObjectType; 
union __MIDL_IAdviseSink_0002 { 

wireHBITMAP hBitmap; 
wireHPALETTE hPalette; 
wireHGLOBAL hGeneric; 
} u; 
} GDI_OBJECT; }
#line 5148
extern "C" { typedef 
#line 5130
struct _userSTGMEDIUM { 

struct _STGMEDIUM_UNION { 

DWORD tymed; 
union __MIDL_IAdviseSink_0003 { 


wireHMETAFILEPICT hMetaFilePict; 
wireHENHMETAFILE hHEnhMetaFile; 
GDI_OBJECT *hGdiHandle; 
wireHGLOBAL hGlobal; 
LPOLESTR lpszFileName; 
BYTE_BLOB *pstm; 
BYTE_BLOB *pstg; 
} u; 
}; 
IUnknown *pUnkForRelease; 
} userSTGMEDIUM; }

extern "C" { typedef userSTGMEDIUM *wireSTGMEDIUM; }

extern "C" { typedef uSTGMEDIUM STGMEDIUM; }

extern "C" { typedef userSTGMEDIUM *wireASYNC_STGMEDIUM; }

extern "C" { typedef STGMEDIUM ASYNC_STGMEDIUM; }

extern "C" { typedef STGMEDIUM *LPSTGMEDIUM; }
#line 5165
extern "C" { typedef 
#line 5160
struct _userFLAG_STGMEDIUM { 

long ContextFlags; 
long fPassOwnership; 
userSTGMEDIUM Stgmed; 
} userFLAG_STGMEDIUM; }

extern "C" { typedef userFLAG_STGMEDIUM *wireFLAG_STGMEDIUM; }
#line 5174
extern "C" { typedef 
#line 5169
struct _FLAG_STGMEDIUM { 

long ContextFlags; 
long fPassOwnership; 
STGMEDIUM Stgmed; 
} FLAG_STGMEDIUM; }


extern "C" const IID IID_IAdviseSink; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("0000010f-0000-0000-c000-000000000046")) IAdviseSink : public IUnknown { 


virtual void __stdcall OnDataChange(FORMATETC *, STGMEDIUM *) = 0; 



virtual void __stdcall OnViewChange(DWORD, LONG) = 0; 



virtual void __stdcall OnRename(IMoniker *) = 0; 


virtual void __stdcall OnSave() = 0; 

virtual void __stdcall OnClose() = 0; 

}; }
#line 5285 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { extern HRESULT __stdcall IAdviseSink_RemoteOnDataChange_Proxy(IAdviseSink *, FORMATETC *, ASYNC_STGMEDIUM *); } 
#line 5291
extern "C" { extern void __stdcall IAdviseSink_RemoteOnDataChange_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 5298
extern "C" { extern HRESULT __stdcall IAdviseSink_RemoteOnViewChange_Proxy(IAdviseSink *, DWORD, LONG); } 
#line 5304
extern "C" { extern void __stdcall IAdviseSink_RemoteOnViewChange_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 5311
extern "C" { extern HRESULT __stdcall IAdviseSink_RemoteOnRename_Proxy(IAdviseSink *, IMoniker *); } 




extern "C" { extern void __stdcall IAdviseSink_RemoteOnRename_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 5323
extern "C" { extern HRESULT __stdcall IAdviseSink_RemoteOnSave_Proxy(IAdviseSink *); } 



extern "C" { extern void __stdcall IAdviseSink_RemoteOnSave_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 5334
extern "C" { extern HRESULT __stdcall IAdviseSink_RemoteOnClose_Proxy(IAdviseSink *); } 



extern "C" { extern void __stdcall IAdviseSink_RemoteOnClose_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 5356 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_AsyncIAdviseSink; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000150-0000-0000-c000-000000000046")) AsyncIAdviseSink : public IUnknown { 


virtual void __stdcall Begin_OnDataChange(FORMATETC *, STGMEDIUM *) = 0; 



virtual void __stdcall Finish_OnDataChange() = 0; 

virtual void __stdcall Begin_OnViewChange(DWORD, LONG) = 0; 



virtual void __stdcall Finish_OnViewChange() = 0; 

virtual void __stdcall Begin_OnRename(IMoniker *) = 0; 


virtual void __stdcall Finish_OnRename() = 0; 

virtual void __stdcall Begin_OnSave() = 0; 

virtual void __stdcall Finish_OnSave() = 0; 

virtual void __stdcall Begin_OnClose() = 0; 

virtual void __stdcall Finish_OnClose() = 0; 

}; }
#line 5504 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { extern HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy(AsyncIAdviseSink *, FORMATETC *, ASYNC_STGMEDIUM *); } 
#line 5510
extern "C" { extern void __stdcall AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 5517
extern "C" { extern HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy(AsyncIAdviseSink *); } 



extern "C" { extern void __stdcall AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 5528
extern "C" { extern HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy(AsyncIAdviseSink *, DWORD, LONG); } 
#line 5534
extern "C" { extern void __stdcall AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 5541
extern "C" { extern HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy(AsyncIAdviseSink *); } 



extern "C" { extern void __stdcall AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 5552
extern "C" { extern HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnRename_Proxy(AsyncIAdviseSink *, IMoniker *); } 




extern "C" { extern void __stdcall AsyncIAdviseSink_Begin_RemoteOnRename_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 5564
extern "C" { extern HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnRename_Proxy(AsyncIAdviseSink *); } 



extern "C" { extern void __stdcall AsyncIAdviseSink_Finish_RemoteOnRename_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 5575
extern "C" { extern HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnSave_Proxy(AsyncIAdviseSink *); } 



extern "C" { extern void __stdcall AsyncIAdviseSink_Begin_RemoteOnSave_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 5586
extern "C" { extern HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnSave_Proxy(AsyncIAdviseSink *); } 



extern "C" { extern void __stdcall AsyncIAdviseSink_Finish_RemoteOnSave_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 5597
extern "C" { extern HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnClose_Proxy(AsyncIAdviseSink *); } 



extern "C" { extern void __stdcall AsyncIAdviseSink_Begin_RemoteOnClose_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 5608
extern "C" { extern HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnClose_Proxy(AsyncIAdviseSink *); } 



extern "C" { extern void __stdcall AsyncIAdviseSink_Finish_RemoteOnClose_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 5629 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef IAdviseSink2 *LPADVISESINK2; }


extern "C" const IID IID_IAdviseSink2; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000125-0000-0000-c000-000000000046")) IAdviseSink2 : public IAdviseSink { 


virtual void __stdcall OnLinkSrcChange(IMoniker *) = 0; 


}; }
#line 5736 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { extern HRESULT __stdcall IAdviseSink2_RemoteOnLinkSrcChange_Proxy(IAdviseSink2 *, IMoniker *); } 




extern "C" { extern void __stdcall IAdviseSink2_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 5759 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_AsyncIAdviseSink2; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000151-0000-0000-c000-000000000046")) AsyncIAdviseSink2 : public AsyncIAdviseSink { 


virtual void __stdcall Begin_OnLinkSrcChange(IMoniker *) = 0; 


virtual void __stdcall Finish_OnLinkSrcChange() = 0; 

}; }
#line 5901 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { extern HRESULT __stdcall AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy(AsyncIAdviseSink2 *, IMoniker *); } 




extern "C" { extern void __stdcall AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 5913
extern "C" { extern HRESULT __stdcall AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy(AsyncIAdviseSink2 *); } 



extern "C" { extern void __stdcall AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 5934 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef IDataObject *LPDATAOBJECT; }
#line 5940
extern "C" { typedef 
#line 5937
enum tagDATADIR { 
DATADIR_GET = 1, 
DATADIR_SET
} DATADIR; }


extern "C" const IID IID_IDataObject; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("0000010e-0000-0000-c000-000000000046")) IDataObject : public IUnknown { 


virtual HRESULT __stdcall GetData(FORMATETC *, STGMEDIUM *) = 0; 



virtual HRESULT __stdcall GetDataHere(FORMATETC *, STGMEDIUM *) = 0; 



virtual HRESULT __stdcall QueryGetData(FORMATETC *) = 0; 


virtual HRESULT __stdcall GetCanonicalFormatEtc(FORMATETC *, FORMATETC *) = 0; 



virtual HRESULT __stdcall SetData(FORMATETC *, STGMEDIUM *, BOOL) = 0; 




virtual HRESULT __stdcall EnumFormatEtc(DWORD, IEnumFORMATETC **) = 0; 



virtual HRESULT __stdcall DAdvise(FORMATETC *, DWORD, IAdviseSink *, DWORD *) = 0; 
#line 5981
virtual HRESULT __stdcall DUnadvise(DWORD) = 0; 


virtual HRESULT __stdcall EnumDAdvise(IEnumSTATDATA **) = 0; 


}; }
#line 6109 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { extern HRESULT __stdcall IDataObject_RemoteGetData_Proxy(IDataObject *, FORMATETC *, STGMEDIUM *); } 
#line 6115
extern "C" { extern void __stdcall IDataObject_RemoteGetData_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 6122
extern "C" { extern HRESULT __stdcall IDataObject_RemoteGetDataHere_Proxy(IDataObject *, FORMATETC *, STGMEDIUM *); } 
#line 6128
extern "C" { extern void __stdcall IDataObject_RemoteGetDataHere_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 6135
extern "C" { extern HRESULT __stdcall IDataObject_RemoteSetData_Proxy(IDataObject *, FORMATETC *, FLAG_STGMEDIUM *, BOOL); } 
#line 6142
extern "C" { extern void __stdcall IDataObject_RemoteSetData_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 6159 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef IDataAdviseHolder *LPDATAADVISEHOLDER; }


extern "C" const IID IID_IDataAdviseHolder; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000110-0000-0000-c000-000000000046")) IDataAdviseHolder : public IUnknown { 


virtual HRESULT __stdcall Advise(IDataObject *, FORMATETC *, DWORD, IAdviseSink *, DWORD *) = 0; 
#line 6177
virtual HRESULT __stdcall Unadvise(DWORD) = 0; 


virtual HRESULT __stdcall EnumAdvise(IEnumSTATDATA **) = 0; 


virtual HRESULT __stdcall SendOnDataChange(IDataObject *, DWORD, DWORD) = 0; 




}; }
#line 6282 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef IMessageFilter *LPMESSAGEFILTER; }
#line 6291
extern "C" { typedef 
#line 6285
enum tagCALLTYPE { 
CALLTYPE_TOPLEVEL = 1, 
CALLTYPE_NESTED, 
CALLTYPE_ASYNC, 
CALLTYPE_TOPLEVEL_CALLPENDING, 
CALLTYPE_ASYNC_CALLPENDING
} CALLTYPE; }
#line 6298
extern "C" { typedef 
#line 6294
enum tagSERVERCALL { 
SERVERCALL_ISHANDLED, 
SERVERCALL_REJECTED, 
SERVERCALL_RETRYLATER
} SERVERCALL; }
#line 6304
extern "C" { typedef 
#line 6301
enum tagPENDINGTYPE { 
PENDINGTYPE_TOPLEVEL = 1, 
PENDINGTYPE_NESTED
} PENDINGTYPE; }
#line 6311
extern "C" { typedef 
#line 6307
enum tagPENDINGMSG { 
PENDINGMSG_CANCELCALL, 
PENDINGMSG_WAITNOPROCESS, 
PENDINGMSG_WAITDEFPROCESS
} PENDINGMSG; }
#line 6318
extern "C" { typedef 
#line 6313
struct tagINTERFACEINFO { 

IUnknown *pUnk; 
IID iid; 
WORD wMethod; 
} INTERFACEINFO; }

extern "C" { typedef tagINTERFACEINFO *LPINTERFACEINFO; }


extern "C" const IID IID_IMessageFilter; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000016-0000-0000-c000-000000000046")) IMessageFilter : public IUnknown { 


virtual DWORD __stdcall HandleInComingCall(DWORD, HTASK, DWORD, LPINTERFACEINFO) = 0; 
#line 6337
virtual DWORD __stdcall RetryRejectedCall(HTASK, DWORD, DWORD) = 0; 




virtual DWORD __stdcall MessagePending(HTASK, DWORD, DWORD) = 0; 




}; }
#line 6435 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef unsigned long RPCOLEDATAREP; }
#line 6446
extern "C" { typedef 
#line 6437
struct tagRPCOLEMESSAGE { 

void *reserved1; 
RPCOLEDATAREP dataRepresentation; 
void *Buffer; 
ULONG cbBuffer; 
ULONG iMethod; 
void *reserved2[5]; 
ULONG rpcFlags; 
} RPCOLEMESSAGE; }

extern "C" { typedef RPCOLEMESSAGE *PRPCOLEMESSAGE; }


extern "C" const IID IID_IRpcChannelBuffer; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("d5f56b60-593b-101a-b569-08002b2dbf7a")) IRpcChannelBuffer : public IUnknown { 


virtual HRESULT __stdcall GetBuffer(RPCOLEMESSAGE *, const IID &) = 0; 



virtual HRESULT __stdcall SendReceive(RPCOLEMESSAGE *, ULONG *) = 0; 



virtual HRESULT __stdcall FreeBuffer(RPCOLEMESSAGE *) = 0; 


virtual HRESULT __stdcall GetDestCtx(DWORD *, void **) = 0; 



virtual HRESULT __stdcall IsConnected() = 0; 

}; }
#line 6574 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_IRpcChannelBuffer2; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("594f31d0-7f19-11d0-b194-00a0c90dc8bf")) IRpcChannelBuffer2 : public IRpcChannelBuffer { 


virtual HRESULT __stdcall GetProtocolVersion(DWORD *) = 0; 


}; }
#line 6691 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_IAsyncRpcChannelBuffer; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("a5029fb6-3c34-11d1-9c99-00c04fb998aa")) IAsyncRpcChannelBuffer : public IRpcChannelBuffer2 { 


virtual HRESULT __stdcall Send(RPCOLEMESSAGE *, ISynchronize *, ULONG *) = 0; 




virtual HRESULT __stdcall Receive(RPCOLEMESSAGE *, ULONG *) = 0; 



virtual HRESULT __stdcall GetDestCtxEx(RPCOLEMESSAGE *, DWORD *, void **) = 0; 




}; }
#line 6846 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_IRpcChannelBuffer3; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("25b15600-0115-11d0-bf0d-00aa00b8dfd2")) IRpcChannelBuffer3 : public IRpcChannelBuffer2 { 


virtual HRESULT __stdcall Send(RPCOLEMESSAGE *, ULONG *) = 0; 



virtual HRESULT __stdcall Receive(RPCOLEMESSAGE *, ULONG, ULONG *) = 0; 




virtual HRESULT __stdcall Cancel(RPCOLEMESSAGE *) = 0; 


virtual HRESULT __stdcall GetCallContext(RPCOLEMESSAGE *, const IID &, void **) = 0; 




virtual HRESULT __stdcall GetDestCtxEx(RPCOLEMESSAGE *, DWORD *, void **) = 0; 




virtual HRESULT __stdcall GetState(RPCOLEMESSAGE *, DWORD *) = 0; 



virtual HRESULT __stdcall RegisterAsync(RPCOLEMESSAGE *, IAsyncManager *) = 0; 



}; }
#line 7049 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_IRpcSyntaxNegotiate; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("58a08519-24c8-4935-b482-3fd823333a4f")) IRpcSyntaxNegotiate : public IUnknown { 


virtual HRESULT __stdcall NegotiateSyntax(RPCOLEMESSAGE *) = 0; 


}; }
#line 7128 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_IRpcProxyBuffer; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("d5f56a34-593b-101a-b569-08002b2dbf7a")) IRpcProxyBuffer : public IUnknown { 


virtual HRESULT __stdcall Connect(IRpcChannelBuffer *) = 0; 


virtual void __stdcall Disconnect() = 0; 

}; }
#line 7215 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_IRpcStubBuffer; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("d5f56afc-593b-101a-b569-08002b2dbf7a")) IRpcStubBuffer : public IUnknown { 


virtual HRESULT __stdcall Connect(IUnknown *) = 0; 


virtual void __stdcall Disconnect() = 0; 

virtual HRESULT __stdcall Invoke(RPCOLEMESSAGE *, IRpcChannelBuffer *) = 0; 



virtual struct IRpcStubBuffer *__stdcall IsIIDSupported(const IID &) = 0; 


virtual ULONG __stdcall CountRefs() = 0; 

virtual HRESULT __stdcall DebugServerQueryInterface(void **) = 0; 


virtual void __stdcall DebugServerRelease(void *) = 0; 


}; }
#line 7352 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_IPSFactoryBuffer; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("d5f569d0-593b-101a-b569-08002b2dbf7a")) IPSFactoryBuffer : public IUnknown { 


virtual HRESULT __stdcall CreateProxy(IUnknown *, const IID &, IRpcProxyBuffer **, void **) = 0; 
#line 7366
virtual HRESULT __stdcall CreateStub(const IID &, IUnknown *, IRpcStubBuffer **) = 0; 




}; }
#line 7457 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef 
#line 7449
struct SChannelHookCallInfo { 

IID iid; 
DWORD cbSize; 
GUID uCausality; 
DWORD dwServerPid; 
DWORD iMethod; 
void *pObject; 
} SChannelHookCallInfo; }



extern "C" RPC_IF_HANDLE __MIDL_itf_objidl_0000_0041_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_objidl_0000_0041_v0_0_s_ifspec; 
#line 7471
extern "C" const IID IID_IChannelHook; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("1008c4a0-7613-11cf-9af1-0020af6e72f4")) IChannelHook : public IUnknown { 


virtual void __stdcall ClientGetSize(const GUID &, const IID &, ULONG *) = 0; 




virtual void __stdcall ClientFillBuffer(const GUID &, const IID &, ULONG *, void *) = 0; 
#line 7490
virtual void __stdcall ClientNotify(const GUID &, const IID &, ULONG, void *, DWORD, HRESULT) = 0; 
#line 7498
virtual void __stdcall ServerNotify(const GUID &, const IID &, ULONG, void *, DWORD) = 0; 
#line 7505
virtual void __stdcall ServerGetSize(const GUID &, const IID &, HRESULT, ULONG *) = 0; 
#line 7511
virtual void __stdcall ServerFillBuffer(const GUID &, const IID &, ULONG *, void *, HRESULT) = 0; 
#line 7518
}; }
#line 7641 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const FMTID FMTID_SummaryInformation; 

extern "C" const FMTID FMTID_DocSummaryInformation; 

extern "C" const FMTID FMTID_UserDefinedProperties; 

extern "C" const FMTID FMTID_DiscardableInformation; 

extern "C" const FMTID FMTID_ImageSummaryInformation; 

extern "C" const FMTID FMTID_AudioSummaryInformation; 

extern "C" const FMTID FMTID_VideoSummaryInformation; 

extern "C" const FMTID FMTID_MediaFileSummaryInformation; 
#line 7661
extern "C" RPC_IF_HANDLE __MIDL_itf_objidl_0000_0042_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_objidl_0000_0042_v0_0_s_ifspec; 
#line 7676
extern "C" { typedef 
#line 7670
struct tagSOLE_AUTHENTICATION_SERVICE { 

DWORD dwAuthnSvc; 
DWORD dwAuthzSvc; 
OLECHAR *pPrincipalName; 
HRESULT hr; 
} SOLE_AUTHENTICATION_SERVICE; }

extern "C" { typedef SOLE_AUTHENTICATION_SERVICE *PSOLE_AUTHENTICATION_SERVICE; }
#line 7697
extern "C" { typedef 
#line 7681
enum tagEOLE_AUTHENTICATION_CAPABILITIES { 
EOAC_NONE, 
EOAC_MUTUAL_AUTH, 
EOAC_STATIC_CLOAKING = 32, 
EOAC_DYNAMIC_CLOAKING = 64, 
EOAC_ANY_AUTHORITY = 128, 
EOAC_MAKE_FULLSIC = 256, 
EOAC_DEFAULT = 2048, 
EOAC_SECURE_REFS = 2, 
EOAC_ACCESS_CONTROL = 4, 
EOAC_APPID = 8, 
EOAC_DYNAMIC = 16, 
EOAC_REQUIRE_FULLSIC = 512, 
EOAC_AUTO_IMPERSONATE = 1024, 
EOAC_NO_CUSTOM_MARSHAL = 8192, 
EOAC_DISABLE_AAA = 4096
} EOLE_AUTHENTICATION_CAPABILITIES; }
#line 7708
extern "C" { typedef 
#line 7703
struct tagSOLE_AUTHENTICATION_INFO { 

DWORD dwAuthnSvc; 
DWORD dwAuthzSvc; 
void *pAuthInfo; 
} SOLE_AUTHENTICATION_INFO; }

extern "C" { typedef tagSOLE_AUTHENTICATION_INFO *PSOLE_AUTHENTICATION_INFO; }
#line 7716
extern "C" { typedef 
#line 7712
struct tagSOLE_AUTHENTICATION_LIST { 

DWORD cAuthInfo; 
SOLE_AUTHENTICATION_INFO *aAuthInfo; 
} SOLE_AUTHENTICATION_LIST; }

extern "C" { typedef tagSOLE_AUTHENTICATION_LIST *PSOLE_AUTHENTICATION_LIST; }


extern "C" const IID IID_IClientSecurity; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("0000013d-0000-0000-c000-000000000046")) IClientSecurity : public IUnknown { 


virtual HRESULT __stdcall QueryBlanket(IUnknown *, DWORD *, DWORD *, OLECHAR **, DWORD *, DWORD *, void **, DWORD *) = 0; 
#line 7740
virtual HRESULT __stdcall SetBlanket(IUnknown *, DWORD, DWORD, OLECHAR *, DWORD, DWORD, void *, DWORD) = 0; 
#line 7751
virtual HRESULT __stdcall CopyProxy(IUnknown *, IUnknown **) = 0; 



}; }
#line 7854 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_IServerSecurity; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("0000013e-0000-0000-c000-000000000046")) IServerSecurity : public IUnknown { 


virtual HRESULT __stdcall QueryBlanket(DWORD *, DWORD *, OLECHAR **, DWORD *, DWORD *, void **, DWORD *) = 0; 
#line 7872
virtual HRESULT __stdcall ImpersonateClient() = 0; 

virtual HRESULT __stdcall RevertToSelf() = 0; 

virtual BOOL __stdcall IsImpersonating() = 0; 

}; }
#line 7971 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_IClassActivator; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000140-0000-0000-c000-000000000046")) IClassActivator : public IUnknown { 


virtual HRESULT __stdcall GetClassObject(const IID &, DWORD, LCID, const IID &, void **) = 0; 
#line 7986
}; }
#line 8058 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_IRpcOptions; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000144-0000-0000-c000-000000000046")) IRpcOptions : public IUnknown { 


virtual HRESULT __stdcall Set(IUnknown *, DWORD, ULONG_PTR) = 0; 




virtual HRESULT __stdcall Query(IUnknown *, DWORD, ULONG_PTR *) = 0; 




}; }
#line 8152 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
enum __MIDL___MIDL_itf_objidl_0000_0046_0001 { 
COMBND_RPCTIMEOUT = 1, 
COMBND_SERVER_LOCALITY
}; 

enum __MIDL___MIDL_itf_objidl_0000_0046_0002 { 
SERVER_LOCALITY_PROCESS_LOCAL, 
SERVER_LOCALITY_MACHINE_LOCAL, 
SERVER_LOCALITY_REMOTE
}; 
#line 8165 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_objidl_0000_0046_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_objidl_0000_0046_v0_0_s_ifspec; 
#line 8175
extern "C" const IID IID_IFillLockBytes; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("99caf010-415e-11cf-8814-00aa00b569f5")) IFillLockBytes : public IUnknown { 


virtual HRESULT __stdcall FillAppend(const void *, ULONG, ULONG *) = 0; 




virtual HRESULT __stdcall FillAt(ULARGE_INTEGER, const void *, ULONG, ULONG *) = 0; 
#line 8194
virtual HRESULT __stdcall SetFillSize(ULARGE_INTEGER) = 0; 


virtual HRESULT __stdcall Terminate(BOOL) = 0; 


}; }
#line 8283 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { extern HRESULT __stdcall IFillLockBytes_RemoteFillAppend_Proxy(IFillLockBytes *, const byte *, ULONG, ULONG *); } 
#line 8290
extern "C" { extern void __stdcall IFillLockBytes_RemoteFillAppend_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 8297
extern "C" { extern HRESULT __stdcall IFillLockBytes_RemoteFillAt_Proxy(IFillLockBytes *, ULARGE_INTEGER, const byte *, ULONG, ULONG *); } 
#line 8305
extern "C" { extern void __stdcall IFillLockBytes_RemoteFillAt_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 8323 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_IProgressNotify; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("a9d758a0-4617-11cf-95fc-00aa00680db4")) IProgressNotify : public IUnknown { 


virtual HRESULT __stdcall OnProgress(DWORD, DWORD, BOOL, BOOL) = 0; 
#line 8337
}; }
#line 8413 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef 
#line 8407
struct tagStorageLayout { 

DWORD LayoutType; 
OLECHAR *pwcsElementName; 
LARGE_INTEGER cOffset; 
LARGE_INTEGER cBytes; 
} StorageLayout; }


extern "C" const IID IID_ILayoutStorage; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("0e6d4d90-6738-11cf-9608-00aa00680db4")) ILayoutStorage : public IUnknown { 


virtual HRESULT __stdcall LayoutScript(StorageLayout *, DWORD, DWORD) = 0; 




virtual HRESULT __stdcall BeginMonitor() = 0; 

virtual HRESULT __stdcall EndMonitor() = 0; 

virtual HRESULT __stdcall ReLayoutDocfile(OLECHAR *) = 0; 



virtual HRESULT __stdcall ReLayoutDocfileOnILockBytes(ILockBytes *) = 0; 


}; }
#line 8537 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_IBlockingLock; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("30f3d47a-6447-11d1-8e3c-00c04fb9386d")) IBlockingLock : public IUnknown { 


virtual HRESULT __stdcall Lock(DWORD) = 0; 


virtual HRESULT __stdcall Unlock() = 0; 

}; }
#line 8624 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_ITimeAndNoticeControl; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("bc0bf6ae-8878-11d1-83e9-00c04fc2c6d4")) ITimeAndNoticeControl : public IUnknown { 


virtual HRESULT __stdcall SuppressChanges(DWORD, DWORD) = 0; 



}; }
#line 8705 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_IOplockStorage; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("8d19c834-8879-11d1-83e9-00c04fc2c6d4")) IOplockStorage : public IUnknown { 


virtual HRESULT __stdcall CreateStorageEx(LPCWSTR, DWORD, DWORD, DWORD, const IID &, void **) = 0; 
#line 8721
virtual HRESULT __stdcall OpenStorageEx(LPCWSTR, DWORD, DWORD, DWORD, const IID &, void **) = 0; 
#line 8729
}; }
#line 8813 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef ISurrogate *LPSURROGATE; }


extern "C" const IID IID_ISurrogate; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000022-0000-0000-c000-000000000046")) ISurrogate : public IUnknown { 


virtual HRESULT __stdcall LoadDllServer(const IID &) = 0; 


virtual HRESULT __stdcall FreeSurrogate() = 0; 

}; }
#line 8902 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef IGlobalInterfaceTable *LPGLOBALINTERFACETABLE; }


extern "C" const IID IID_IGlobalInterfaceTable; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000146-0000-0000-c000-000000000046")) IGlobalInterfaceTable : public IUnknown { 


virtual HRESULT __stdcall RegisterInterfaceInGlobal(IUnknown *, const IID &, DWORD *) = 0; 




virtual HRESULT __stdcall RevokeInterfaceFromGlobal(DWORD) = 0; 


virtual HRESULT __stdcall GetInterfaceFromGlobal(DWORD, const IID &, void **) = 0; 




}; }
#line 9012 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_IDirectWriterLock; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("0e6d4d92-6738-11cf-9608-00aa00680db4")) IDirectWriterLock : public IUnknown { 


virtual HRESULT __stdcall WaitForWriteAccess(DWORD) = 0; 


virtual HRESULT __stdcall ReleaseWriteAccess() = 0; 

virtual HRESULT __stdcall HaveWriteAccess() = 0; 

}; }
#line 9107 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_ISynchronize; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000030-0000-0000-c000-000000000046")) ISynchronize : public IUnknown { 


virtual HRESULT __stdcall Wait(DWORD, DWORD) = 0; 



virtual HRESULT __stdcall Signal() = 0; 

virtual HRESULT __stdcall Reset() = 0; 

}; }
#line 9204 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_ISynchronizeHandle; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000031-0000-0000-c000-000000000046")) ISynchronizeHandle : public IUnknown { 


virtual HRESULT __stdcall GetHandle(HANDLE *) = 0; 


}; }
#line 9283 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_ISynchronizeEvent; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000032-0000-0000-c000-000000000046")) ISynchronizeEvent : public ISynchronizeHandle { 


virtual HRESULT __stdcall SetEventHandle(HANDLE *) = 0; 


}; }
#line 9370 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_ISynchronizeContainer; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000033-0000-0000-c000-000000000046")) ISynchronizeContainer : public IUnknown { 


virtual HRESULT __stdcall AddSynchronize(ISynchronize *) = 0; 


virtual HRESULT __stdcall WaitMultiple(DWORD, DWORD, ISynchronize **) = 0; 




}; }
#line 9463 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_ISynchronizeMutex; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000025-0000-0000-c000-000000000046")) ISynchronizeMutex : public ISynchronize { 


virtual HRESULT __stdcall ReleaseMutex() = 0; 

}; }
#line 9560 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef ICancelMethodCalls *LPCANCELMETHODCALLS; }


extern "C" const IID IID_ICancelMethodCalls; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000029-0000-0000-c000-000000000046")) ICancelMethodCalls : public IUnknown { 


virtual HRESULT __stdcall Cancel(ULONG) = 0; 


virtual HRESULT __stdcall TestCancel() = 0; 

}; }
#line 9654 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef 
#line 9650
enum tagDCOM_CALL_STATE { 
DCOM_NONE, 
DCOM_CALL_COMPLETE, 
DCOM_CALL_CANCELED
} DCOM_CALL_STATE; }


extern "C" const IID IID_IAsyncManager; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("0000002a-0000-0000-c000-000000000046")) IAsyncManager : public IUnknown { 


virtual HRESULT __stdcall CompleteCall(HRESULT) = 0; 


virtual HRESULT __stdcall GetCallContext(const IID &, void **) = 0; 



virtual HRESULT __stdcall GetState(ULONG *) = 0; 


}; }
#line 9758 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_ICallFactory; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("1c733a30-2a1c-11ce-ade5-00aa0044773d")) ICallFactory : public IUnknown { 


virtual HRESULT __stdcall CreateCall(const IID &, IUnknown *, const IID &, IUnknown **) = 0; 
#line 9772
}; }
#line 9843 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_IRpcHelper; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000149-0000-0000-c000-000000000046")) IRpcHelper : public IUnknown { 


virtual HRESULT __stdcall GetDCOMProtocolVersion(DWORD *) = 0; 


virtual HRESULT __stdcall GetIIDFromOBJREF(void *, IID **) = 0; 



}; }
#line 9934 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_IReleaseMarshalBuffers; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("eb0cb9e8-7996-11d2-872e-0000f8080859")) IReleaseMarshalBuffers : public IUnknown { 


virtual HRESULT __stdcall ReleaseMarshalBuffer(RPCOLEMESSAGE *, DWORD, IUnknown *) = 0; 




}; }
#line 10017 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_IWaitMultiple; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("0000002b-0000-0000-c000-000000000046")) IWaitMultiple : public IUnknown { 


virtual HRESULT __stdcall WaitMultiple(DWORD, ISynchronize **) = 0; 



virtual HRESULT __stdcall AddSynchronize(ISynchronize *) = 0; 


}; }
#line 10108 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_IUrlMon; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000026-0000-0000-c000-000000000046")) IUrlMon : public IUnknown { 


virtual HRESULT __stdcall AsyncGetClassBits(const IID &, LPCWSTR, LPCWSTR, DWORD, DWORD, LPCWSTR, IBindCtx *, DWORD, const IID &, DWORD) = 0; 
#line 10128
}; }
#line 10205 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_IForegroundTransfer; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000145-0000-0000-c000-000000000046")) IForegroundTransfer : public IUnknown { 


virtual HRESULT __stdcall AllowForegroundTransfer(void *) = 0; 


}; }
#line 10283 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef IAddrTrackingControl *LPADDRTRACKINGCONTROL; }


extern "C" const IID IID_IAddrTrackingControl; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000147-0000-0000-c000-000000000046")) IAddrTrackingControl : public IUnknown { 


virtual HRESULT __stdcall EnableCOMDynamicAddrTracking() = 0; 

virtual HRESULT __stdcall DisableCOMDynamicAddrTracking() = 0; 

}; }
#line 10370 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef IAddrExclusionControl *LPADDREXCLUSIONCONTROL; }


extern "C" const IID IID_IAddrExclusionControl; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000148-0000-0000-c000-000000000046")) IAddrExclusionControl : public IUnknown { 


virtual HRESULT __stdcall GetCurrentAddrExclusionList(const IID &, void **) = 0; 



virtual HRESULT __stdcall UpdateAddrExclusionList(IUnknown *) = 0; 


}; }
#line 10464 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_IPipeByte; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("db2f3aca-2f86-11d1-8e04-00c04fb9989a")) IPipeByte : public IUnknown { 


virtual HRESULT __stdcall Pull(BYTE *, ULONG, ULONG *) = 0; 




virtual HRESULT __stdcall Push(BYTE *, ULONG) = 0; 



}; }
#line 10559 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_AsyncIPipeByte; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("db2f3acb-2f86-11d1-8e04-00c04fb9989a")) AsyncIPipeByte : public IUnknown { 


virtual HRESULT __stdcall Begin_Pull(ULONG) = 0; 


virtual HRESULT __stdcall Finish_Pull(BYTE *, ULONG *) = 0; 



virtual HRESULT __stdcall Begin_Push(BYTE *, ULONG) = 0; 



virtual HRESULT __stdcall Finish_Push() = 0; 

}; }
#line 10670 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_IPipeLong; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("db2f3acc-2f86-11d1-8e04-00c04fb9989a")) IPipeLong : public IUnknown { 


virtual HRESULT __stdcall Pull(LONG *, ULONG, ULONG *) = 0; 




virtual HRESULT __stdcall Push(LONG *, ULONG) = 0; 



}; }
#line 10765 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_AsyncIPipeLong; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("db2f3acd-2f86-11d1-8e04-00c04fb9989a")) AsyncIPipeLong : public IUnknown { 


virtual HRESULT __stdcall Begin_Pull(ULONG) = 0; 


virtual HRESULT __stdcall Finish_Pull(LONG *, ULONG *) = 0; 



virtual HRESULT __stdcall Begin_Push(LONG *, ULONG) = 0; 



virtual HRESULT __stdcall Finish_Push() = 0; 

}; }
#line 10876 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_IPipeDouble; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("db2f3ace-2f86-11d1-8e04-00c04fb9989a")) IPipeDouble : public IUnknown { 


virtual HRESULT __stdcall Pull(DOUBLE *, ULONG, ULONG *) = 0; 




virtual HRESULT __stdcall Push(DOUBLE *, ULONG) = 0; 



}; }
#line 10971 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_AsyncIPipeDouble; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("db2f3acf-2f86-11d1-8e04-00c04fb9989a")) AsyncIPipeDouble : public IUnknown { 


virtual HRESULT __stdcall Begin_Pull(ULONG) = 0; 


virtual HRESULT __stdcall Finish_Pull(DOUBLE *, ULONG *) = 0; 



virtual HRESULT __stdcall Begin_Push(DOUBLE *, ULONG) = 0; 



virtual HRESULT __stdcall Finish_Push() = 0; 

}; }
#line 11082 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_IThumbnailExtractor; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("969dc708-5c76-11d1-8d86-0000f804b057")) IThumbnailExtractor : public IUnknown { 


virtual HRESULT __stdcall ExtractThumbnail(IStorage *, ULONG, ULONG, ULONG *, ULONG *, HBITMAP *) = 0; 
#line 11098
virtual HRESULT __stdcall OnFileUpdated(IStorage *) = 0; 


}; }
#line 11181 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_IDummyHICONIncluder; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("947990de-cc28-11d2-a0f7-00805f858fb1")) IDummyHICONIncluder : public IUnknown { 


virtual HRESULT __stdcall Dummy(HICON, HDC) = 0; 



}; }
#line 11689 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef 
#line 11686
enum tagApplicationType { 
ServerApplication, 
LibraryApplication
} ApplicationType; }
#line 11695
extern "C" { typedef 
#line 11692
enum tagShutdownType { 
IdleShutdown, 
ForcedShutdown
} ShutdownType; }



extern "C" RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec; 
#line 11709
extern "C" const IID IID_IProcessLock; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("000001d5-0000-0000-c000-000000000046")) IProcessLock : public IUnknown { 


virtual ULONG __stdcall AddRefOnProcess() = 0; 

virtual ULONG __stdcall ReleaseRefOnProcess() = 0; 

}; }
#line 11794 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_ISurrogateService; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("000001d4-0000-0000-c000-000000000046")) ISurrogateService : public IUnknown { 


virtual HRESULT __stdcall Init(const GUID &, IProcessLock *, BOOL *) = 0; 




virtual HRESULT __stdcall ApplicationLaunch(const GUID &, ApplicationType) = 0; 



virtual HRESULT __stdcall ApplicationFree(const GUID &) = 0; 


virtual HRESULT __stdcall CatalogRefresh(ULONG) = 0; 


virtual HRESULT __stdcall ProcessShutdown(ShutdownType) = 0; 


}; }
#line 11922 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" { typedef 
#line 11916
enum _APTTYPE { 
APTTYPE_CURRENT = (-1), 
APTTYPE_STA, 
APTTYPE_MTA, 
APTTYPE_NA, 
APTTYPE_MAINSTA
} APTTYPE; }
#line 11928
extern "C" { typedef 
#line 11925
enum _THDTYPE { 
THDTYPE_BLOCKMESSAGES, 
THDTYPE_PROCESSMESSAGES
} THDTYPE; }

extern "C" { typedef DWORD APARTMENTID; }



extern "C" RPC_IF_HANDLE __MIDL_itf_objidl_0000_0080_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_objidl_0000_0080_v0_0_s_ifspec; 
#line 11944
extern "C" const IID IID_IComThreadingInfo; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("000001ce-0000-0000-c000-000000000046")) IComThreadingInfo : public IUnknown { 


virtual HRESULT __stdcall GetCurrentApartmentType(APTTYPE *) = 0; 


virtual HRESULT __stdcall GetCurrentThreadType(THDTYPE *) = 0; 


virtual HRESULT __stdcall GetCurrentLogicalThreadId(GUID *) = 0; 


virtual HRESULT __stdcall SetCurrentLogicalThreadId(const GUID &) = 0; 


}; }
#line 12053 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" const IID IID_IProcessInitControl; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("72380d55-8d2b-43a3-8513-2b6ef31434e9")) IProcessInitControl : public IUnknown { 


virtual HRESULT __stdcall ResetInitializerTimeout(DWORD) = 0; 


}; }
#line 12131 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_objidl_0000_0082_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_objidl_0000_0082_v0_0_s_ifspec; 
#line 12140
extern "C" { typedef IInitializeSpy *LPINITIALIZESPY; }


extern "C" const IID IID_IInitializeSpy; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000034-0000-0000-c000-000000000046")) IInitializeSpy : public IUnknown { 


virtual HRESULT __stdcall PreInitialize(DWORD, DWORD) = 0; 



virtual HRESULT __stdcall PostInitialize(HRESULT, DWORD, DWORD) = 0; 




virtual HRESULT __stdcall PreUninitialize(DWORD) = 0; 


virtual HRESULT __stdcall PostUninitialize(DWORD) = 0; 


}; }
#line 12257 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
#pragma warning(pop)
#line 12264 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objidl.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_objidl_0000_0083_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_objidl_0000_0083_v0_0_s_ifspec; 



extern "C" { extern unsigned long __stdcall ASYNC_STGMEDIUM_UserSize(unsigned long *, unsigned long, ASYNC_STGMEDIUM *); } 
extern "C" { extern unsigned char *__stdcall ASYNC_STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *); } 
extern "C" { extern unsigned char *__stdcall ASYNC_STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *); } 
extern "C" { extern void __stdcall ASYNC_STGMEDIUM_UserFree(unsigned long *, ASYNC_STGMEDIUM *); } 

extern "C" { extern unsigned long __stdcall CLIPFORMAT_UserSize(unsigned long *, unsigned long, CLIPFORMAT *); } 
extern "C" { extern unsigned char *__stdcall CLIPFORMAT_UserMarshal(unsigned long *, unsigned char *, CLIPFORMAT *); } 
extern "C" { extern unsigned char *__stdcall CLIPFORMAT_UserUnmarshal(unsigned long *, unsigned char *, CLIPFORMAT *); } 
extern "C" { extern void __stdcall CLIPFORMAT_UserFree(unsigned long *, CLIPFORMAT *); } 

extern "C" { extern unsigned long __stdcall FLAG_STGMEDIUM_UserSize(unsigned long *, unsigned long, FLAG_STGMEDIUM *); } 
extern "C" { extern unsigned char *__stdcall FLAG_STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, FLAG_STGMEDIUM *); } 
extern "C" { extern unsigned char *__stdcall FLAG_STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, FLAG_STGMEDIUM *); } 
extern "C" { extern void __stdcall FLAG_STGMEDIUM_UserFree(unsigned long *, FLAG_STGMEDIUM *); } 

extern "C" { extern unsigned long __stdcall HBITMAP_UserSize(unsigned long *, unsigned long, HBITMAP *); } 
extern "C" { extern unsigned char *__stdcall HBITMAP_UserMarshal(unsigned long *, unsigned char *, HBITMAP *); } 
extern "C" { extern unsigned char *__stdcall HBITMAP_UserUnmarshal(unsigned long *, unsigned char *, HBITMAP *); } 
extern "C" { extern void __stdcall HBITMAP_UserFree(unsigned long *, HBITMAP *); } 

extern "C" { extern unsigned long __stdcall HDC_UserSize(unsigned long *, unsigned long, HDC *); } 
extern "C" { extern unsigned char *__stdcall HDC_UserMarshal(unsigned long *, unsigned char *, HDC *); } 
extern "C" { extern unsigned char *__stdcall HDC_UserUnmarshal(unsigned long *, unsigned char *, HDC *); } 
extern "C" { extern void __stdcall HDC_UserFree(unsigned long *, HDC *); } 

extern "C" { extern unsigned long __stdcall HICON_UserSize(unsigned long *, unsigned long, HICON *); } 
extern "C" { extern unsigned char *__stdcall HICON_UserMarshal(unsigned long *, unsigned char *, HICON *); } 
extern "C" { extern unsigned char *__stdcall HICON_UserUnmarshal(unsigned long *, unsigned char *, HICON *); } 
extern "C" { extern void __stdcall HICON_UserFree(unsigned long *, HICON *); } 

extern "C" { extern unsigned long __stdcall SNB_UserSize(unsigned long *, unsigned long, SNB *); } 
extern "C" { extern unsigned char *__stdcall SNB_UserMarshal(unsigned long *, unsigned char *, SNB *); } 
extern "C" { extern unsigned char *__stdcall SNB_UserUnmarshal(unsigned long *, unsigned char *, SNB *); } 
extern "C" { extern void __stdcall SNB_UserFree(unsigned long *, SNB *); } 

extern "C" { extern unsigned long __stdcall STGMEDIUM_UserSize(unsigned long *, unsigned long, STGMEDIUM *); } 
extern "C" { extern unsigned char *__stdcall STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, STGMEDIUM *); } 
extern "C" { extern unsigned char *__stdcall STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, STGMEDIUM *); } 
extern "C" { extern void __stdcall STGMEDIUM_UserFree(unsigned long *, STGMEDIUM *); } 

extern "C" { extern unsigned long __stdcall ASYNC_STGMEDIUM_UserSize64(unsigned long *, unsigned long, ASYNC_STGMEDIUM *); } 
extern "C" { extern unsigned char *__stdcall ASYNC_STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *); } 
extern "C" { extern unsigned char *__stdcall ASYNC_STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *); } 
extern "C" { extern void __stdcall ASYNC_STGMEDIUM_UserFree64(unsigned long *, ASYNC_STGMEDIUM *); } 

extern "C" { extern unsigned long __stdcall CLIPFORMAT_UserSize64(unsigned long *, unsigned long, CLIPFORMAT *); } 
extern "C" { extern unsigned char *__stdcall CLIPFORMAT_UserMarshal64(unsigned long *, unsigned char *, CLIPFORMAT *); } 
extern "C" { extern unsigned char *__stdcall CLIPFORMAT_UserUnmarshal64(unsigned long *, unsigned char *, CLIPFORMAT *); } 
extern "C" { extern void __stdcall CLIPFORMAT_UserFree64(unsigned long *, CLIPFORMAT *); } 

extern "C" { extern unsigned long __stdcall FLAG_STGMEDIUM_UserSize64(unsigned long *, unsigned long, FLAG_STGMEDIUM *); } 
extern "C" { extern unsigned char *__stdcall FLAG_STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, FLAG_STGMEDIUM *); } 
extern "C" { extern unsigned char *__stdcall FLAG_STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, FLAG_STGMEDIUM *); } 
extern "C" { extern void __stdcall FLAG_STGMEDIUM_UserFree64(unsigned long *, FLAG_STGMEDIUM *); } 

extern "C" { extern unsigned long __stdcall HBITMAP_UserSize64(unsigned long *, unsigned long, HBITMAP *); } 
extern "C" { extern unsigned char *__stdcall HBITMAP_UserMarshal64(unsigned long *, unsigned char *, HBITMAP *); } 
extern "C" { extern unsigned char *__stdcall HBITMAP_UserUnmarshal64(unsigned long *, unsigned char *, HBITMAP *); } 
extern "C" { extern void __stdcall HBITMAP_UserFree64(unsigned long *, HBITMAP *); } 

extern "C" { extern unsigned long __stdcall HDC_UserSize64(unsigned long *, unsigned long, HDC *); } 
extern "C" { extern unsigned char *__stdcall HDC_UserMarshal64(unsigned long *, unsigned char *, HDC *); } 
extern "C" { extern unsigned char *__stdcall HDC_UserUnmarshal64(unsigned long *, unsigned char *, HDC *); } 
extern "C" { extern void __stdcall HDC_UserFree64(unsigned long *, HDC *); } 

extern "C" { extern unsigned long __stdcall HICON_UserSize64(unsigned long *, unsigned long, HICON *); } 
extern "C" { extern unsigned char *__stdcall HICON_UserMarshal64(unsigned long *, unsigned char *, HICON *); } 
extern "C" { extern unsigned char *__stdcall HICON_UserUnmarshal64(unsigned long *, unsigned char *, HICON *); } 
extern "C" { extern void __stdcall HICON_UserFree64(unsigned long *, HICON *); } 

extern "C" { extern unsigned long __stdcall SNB_UserSize64(unsigned long *, unsigned long, SNB *); } 
extern "C" { extern unsigned char *__stdcall SNB_UserMarshal64(unsigned long *, unsigned char *, SNB *); } 
extern "C" { extern unsigned char *__stdcall SNB_UserUnmarshal64(unsigned long *, unsigned char *, SNB *); } 
extern "C" { extern void __stdcall SNB_UserFree64(unsigned long *, SNB *); } 

extern "C" { extern unsigned long __stdcall STGMEDIUM_UserSize64(unsigned long *, unsigned long, STGMEDIUM *); } 
extern "C" { extern unsigned char *__stdcall STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, STGMEDIUM *); } 
extern "C" { extern unsigned char *__stdcall STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, STGMEDIUM *); } 
extern "C" { extern void __stdcall STGMEDIUM_UserFree64(unsigned long *, STGMEDIUM *); } 

extern "C" { extern HRESULT __stdcall IEnumUnknown_Next_Proxy(IEnumUnknown *, ULONG, IUnknown **, ULONG *); } 
#line 12356
extern "C" { extern HRESULT __stdcall IEnumUnknown_Next_Stub(IEnumUnknown *, ULONG, IUnknown **, ULONG *); } 
#line 12362
extern "C" { extern HRESULT __stdcall IBindCtx_SetBindOptions_Proxy(IBindCtx *, BIND_OPTS *); } 




extern "C" { extern HRESULT __stdcall IBindCtx_SetBindOptions_Stub(IBindCtx *, BIND_OPTS2 *); } 



extern "C" { extern HRESULT __stdcall IBindCtx_GetBindOptions_Proxy(IBindCtx *, BIND_OPTS *); } 




extern "C" { extern HRESULT __stdcall IBindCtx_GetBindOptions_Stub(IBindCtx *, BIND_OPTS2 *); } 



extern "C" { extern HRESULT __stdcall IEnumMoniker_Next_Proxy(IEnumMoniker *, ULONG, IMoniker **, ULONG *); } 
#line 12387
extern "C" { extern HRESULT __stdcall IEnumMoniker_Next_Stub(IEnumMoniker *, ULONG, IMoniker **, ULONG *); } 
#line 12393
extern "C" { extern BOOL __stdcall IRunnableObject_IsRunning_Proxy(IRunnableObject *); } 



extern "C" { extern HRESULT __stdcall IRunnableObject_IsRunning_Stub(IRunnableObject *); } 


extern "C" { extern HRESULT __stdcall IMoniker_BindToObject_Proxy(IMoniker *, IBindCtx *, IMoniker *, const IID &, void **); } 
#line 12408
extern "C" { extern HRESULT __stdcall IMoniker_BindToObject_Stub(IMoniker *, IBindCtx *, IMoniker *, const IID &, IUnknown **); } 
#line 12415
extern "C" { extern HRESULT __stdcall IMoniker_BindToStorage_Proxy(IMoniker *, IBindCtx *, IMoniker *, const IID &, void **); } 
#line 12423
extern "C" { extern HRESULT __stdcall IMoniker_BindToStorage_Stub(IMoniker *, IBindCtx *, IMoniker *, const IID &, IUnknown **); } 
#line 12430
extern "C" { extern HRESULT __stdcall IEnumString_Next_Proxy(IEnumString *, ULONG, LPOLESTR *, ULONG *); } 
#line 12438
extern "C" { extern HRESULT __stdcall IEnumString_Next_Stub(IEnumString *, ULONG, LPOLESTR *, ULONG *); } 
#line 12444
extern "C" { extern HRESULT __stdcall ISequentialStream_Read_Proxy(ISequentialStream *, void *, ULONG, ULONG *); } 
#line 12451
extern "C" { extern HRESULT __stdcall ISequentialStream_Read_Stub(ISequentialStream *, byte *, ULONG, ULONG *); } 
#line 12457
extern "C" { extern HRESULT __stdcall ISequentialStream_Write_Proxy(ISequentialStream *, const void *, ULONG, ULONG *); } 
#line 12464
extern "C" { extern HRESULT __stdcall ISequentialStream_Write_Stub(ISequentialStream *, const byte *, ULONG, ULONG *); } 
#line 12470
extern "C" { extern HRESULT __stdcall IStream_Seek_Proxy(IStream *, LARGE_INTEGER, DWORD, ULARGE_INTEGER *); } 
#line 12477
extern "C" { extern HRESULT __stdcall IStream_Seek_Stub(IStream *, LARGE_INTEGER, DWORD, ULARGE_INTEGER *); } 
#line 12483
extern "C" { extern HRESULT __stdcall IStream_CopyTo_Proxy(IStream *, IStream *, ULARGE_INTEGER, ULARGE_INTEGER *, ULARGE_INTEGER *); } 
#line 12491
extern "C" { extern HRESULT __stdcall IStream_CopyTo_Stub(IStream *, IStream *, ULARGE_INTEGER, ULARGE_INTEGER *, ULARGE_INTEGER *); } 
#line 12498
extern "C" { extern HRESULT __stdcall IEnumSTATSTG_Next_Proxy(IEnumSTATSTG *, ULONG, STATSTG *, ULONG *); } 
#line 12505
extern "C" { extern HRESULT __stdcall IEnumSTATSTG_Next_Stub(IEnumSTATSTG *, ULONG, STATSTG *, ULONG *); } 
#line 12511
extern "C" { extern HRESULT __stdcall IStorage_OpenStream_Proxy(IStorage *, const OLECHAR *, void *, DWORD, DWORD, IStream **); } 
#line 12520
extern "C" { extern HRESULT __stdcall IStorage_OpenStream_Stub(IStorage *, const OLECHAR *, unsigned long, byte *, DWORD, DWORD, IStream **); } 
#line 12529
extern "C" { extern HRESULT __stdcall IStorage_CopyTo_Proxy(IStorage *, DWORD, const IID *, SNB, IStorage *); } 
#line 12537
extern "C" { extern HRESULT __stdcall IStorage_CopyTo_Stub(IStorage *, DWORD, const IID *, SNB, IStorage *); } 
#line 12544
extern "C" { extern HRESULT __stdcall IStorage_EnumElements_Proxy(IStorage *, DWORD, void *, DWORD, IEnumSTATSTG **); } 
#line 12552
extern "C" { extern HRESULT __stdcall IStorage_EnumElements_Stub(IStorage *, DWORD, unsigned long, byte *, DWORD, IEnumSTATSTG **); } 
#line 12560
extern "C" { extern HRESULT __stdcall ILockBytes_ReadAt_Proxy(ILockBytes *, ULARGE_INTEGER, void *, ULONG, ULONG *); } 
#line 12568
extern "C" { extern HRESULT __stdcall ILockBytes_ReadAt_Stub(ILockBytes *, ULARGE_INTEGER, byte *, ULONG, ULONG *); } 
#line 12575
extern "C" { extern HRESULT __stdcall ILockBytes_WriteAt_Proxy(ILockBytes *, ULARGE_INTEGER, const void *, ULONG, ULONG *); } 
#line 12583
extern "C" { extern HRESULT __stdcall ILockBytes_WriteAt_Stub(ILockBytes *, ULARGE_INTEGER, const byte *, ULONG, ULONG *); } 
#line 12590
extern "C" { extern HRESULT __stdcall IEnumFORMATETC_Next_Proxy(IEnumFORMATETC *, ULONG, FORMATETC *, ULONG *); } 
#line 12597
extern "C" { extern HRESULT __stdcall IEnumFORMATETC_Next_Stub(IEnumFORMATETC *, ULONG, FORMATETC *, ULONG *); } 
#line 12603
extern "C" { extern HRESULT __stdcall IEnumSTATDATA_Next_Proxy(IEnumSTATDATA *, ULONG, STATDATA *, ULONG *); } 
#line 12610
extern "C" { extern HRESULT __stdcall IEnumSTATDATA_Next_Stub(IEnumSTATDATA *, ULONG, STATDATA *, ULONG *); } 
#line 12616
extern "C" { extern void __stdcall IAdviseSink_OnDataChange_Proxy(IAdviseSink *, FORMATETC *, STGMEDIUM *); } 
#line 12622
extern "C" { extern HRESULT __stdcall IAdviseSink_OnDataChange_Stub(IAdviseSink *, FORMATETC *, ASYNC_STGMEDIUM *); } 




extern "C" { extern void __stdcall IAdviseSink_OnViewChange_Proxy(IAdviseSink *, DWORD, LONG); } 
#line 12633
extern "C" { extern HRESULT __stdcall IAdviseSink_OnViewChange_Stub(IAdviseSink *, DWORD, LONG); } 




extern "C" { extern void __stdcall IAdviseSink_OnRename_Proxy(IAdviseSink *, IMoniker *); } 




extern "C" { extern HRESULT __stdcall IAdviseSink_OnRename_Stub(IAdviseSink *, IMoniker *); } 



extern "C" { extern void __stdcall IAdviseSink_OnSave_Proxy(IAdviseSink *); } 



extern "C" { extern HRESULT __stdcall IAdviseSink_OnSave_Stub(IAdviseSink *); } 


extern "C" { extern void __stdcall IAdviseSink_OnClose_Proxy(IAdviseSink *); } 



extern "C" { extern HRESULT __stdcall IAdviseSink_OnClose_Stub(IAdviseSink *); } 


extern "C" { extern void __stdcall IAdviseSink2_OnLinkSrcChange_Proxy(IAdviseSink2 *, IMoniker *); } 




extern "C" { extern HRESULT __stdcall IAdviseSink2_OnLinkSrcChange_Stub(IAdviseSink2 *, IMoniker *); } 



extern "C" { extern HRESULT __stdcall IDataObject_GetData_Proxy(IDataObject *, FORMATETC *, STGMEDIUM *); } 
#line 12676
extern "C" { extern HRESULT __stdcall IDataObject_GetData_Stub(IDataObject *, FORMATETC *, STGMEDIUM *); } 




extern "C" { extern HRESULT __stdcall IDataObject_GetDataHere_Proxy(IDataObject *, FORMATETC *, STGMEDIUM *); } 
#line 12687
extern "C" { extern HRESULT __stdcall IDataObject_GetDataHere_Stub(IDataObject *, FORMATETC *, STGMEDIUM *); } 




extern "C" { extern HRESULT __stdcall IDataObject_SetData_Proxy(IDataObject *, FORMATETC *, STGMEDIUM *, BOOL); } 
#line 12699
extern "C" { extern HRESULT __stdcall IDataObject_SetData_Stub(IDataObject *, FORMATETC *, FLAG_STGMEDIUM *, BOOL); } 
#line 12705
extern "C" { extern HRESULT __stdcall IFillLockBytes_FillAppend_Proxy(IFillLockBytes *, const void *, ULONG, ULONG *); } 
#line 12712
extern "C" { extern HRESULT __stdcall IFillLockBytes_FillAppend_Stub(IFillLockBytes *, const byte *, ULONG, ULONG *); } 
#line 12718
extern "C" { extern HRESULT __stdcall IFillLockBytes_FillAt_Proxy(IFillLockBytes *, ULARGE_INTEGER, const void *, ULONG, ULONG *); } 
#line 12726
extern "C" { extern HRESULT __stdcall IFillLockBytes_FillAt_Stub(IFillLockBytes *, ULARGE_INTEGER, const byte *, ULONG, ULONG *); } 
#line 12733
extern "C" { extern void __stdcall AsyncIAdviseSink_Begin_OnDataChange_Proxy(AsyncIAdviseSink *, FORMATETC *, STGMEDIUM *); } 
#line 12739
extern "C" { extern HRESULT __stdcall AsyncIAdviseSink_Begin_OnDataChange_Stub(AsyncIAdviseSink *, FORMATETC *, ASYNC_STGMEDIUM *); } 




extern "C" { extern void __stdcall AsyncIAdviseSink_Finish_OnDataChange_Proxy(AsyncIAdviseSink *); } 



extern "C" { extern HRESULT __stdcall AsyncIAdviseSink_Finish_OnDataChange_Stub(AsyncIAdviseSink *); } 


extern "C" { extern void __stdcall AsyncIAdviseSink_Begin_OnViewChange_Proxy(AsyncIAdviseSink *, DWORD, LONG); } 
#line 12757
extern "C" { extern HRESULT __stdcall AsyncIAdviseSink_Begin_OnViewChange_Stub(AsyncIAdviseSink *, DWORD, LONG); } 




extern "C" { extern void __stdcall AsyncIAdviseSink_Finish_OnViewChange_Proxy(AsyncIAdviseSink *); } 



extern "C" { extern HRESULT __stdcall AsyncIAdviseSink_Finish_OnViewChange_Stub(AsyncIAdviseSink *); } 


extern "C" { extern void __stdcall AsyncIAdviseSink_Begin_OnRename_Proxy(AsyncIAdviseSink *, IMoniker *); } 




extern "C" { extern HRESULT __stdcall AsyncIAdviseSink_Begin_OnRename_Stub(AsyncIAdviseSink *, IMoniker *); } 



extern "C" { extern void __stdcall AsyncIAdviseSink_Finish_OnRename_Proxy(AsyncIAdviseSink *); } 



extern "C" { extern HRESULT __stdcall AsyncIAdviseSink_Finish_OnRename_Stub(AsyncIAdviseSink *); } 


extern "C" { extern void __stdcall AsyncIAdviseSink_Begin_OnSave_Proxy(AsyncIAdviseSink *); } 



extern "C" { extern HRESULT __stdcall AsyncIAdviseSink_Begin_OnSave_Stub(AsyncIAdviseSink *); } 


extern "C" { extern void __stdcall AsyncIAdviseSink_Finish_OnSave_Proxy(AsyncIAdviseSink *); } 



extern "C" { extern HRESULT __stdcall AsyncIAdviseSink_Finish_OnSave_Stub(AsyncIAdviseSink *); } 


extern "C" { extern void __stdcall AsyncIAdviseSink_Begin_OnClose_Proxy(AsyncIAdviseSink *); } 



extern "C" { extern HRESULT __stdcall AsyncIAdviseSink_Begin_OnClose_Stub(AsyncIAdviseSink *); } 


extern "C" { extern void __stdcall AsyncIAdviseSink_Finish_OnClose_Proxy(AsyncIAdviseSink *); } 



extern "C" { extern HRESULT __stdcall AsyncIAdviseSink_Finish_OnClose_Stub(AsyncIAdviseSink *); } 


extern "C" { extern void __stdcall AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy(AsyncIAdviseSink2 *, IMoniker *); } 




extern "C" { extern HRESULT __stdcall AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub(AsyncIAdviseSink2 *, IMoniker *); } 



extern "C" { extern void __stdcall AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy(AsyncIAdviseSink2 *); } 



extern "C" { extern HRESULT __stdcall AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub(AsyncIAdviseSink2 *); } 
#line 21 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\cguid.h"
extern "C" const IID GUID_NULL; 


extern "C" const IID CATID_MARSHALER; 
#line 27 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\cguid.h"
extern "C" const IID IID_IRpcChannel; 
extern "C" const IID IID_IRpcStub; 
extern "C" const IID IID_IStubManager; 
extern "C" const IID IID_IRpcProxy; 
extern "C" const IID IID_IProxyManager; 
extern "C" const IID IID_IPSFactory; 
extern "C" const IID IID_IInternalMoniker; 
extern "C" const IID IID_IDfReserved1; 
extern "C" const IID IID_IDfReserved2; 
extern "C" const IID IID_IDfReserved3; 
extern "C" const CLSID CLSID_StdMarshal; 
extern "C" const CLSID CLSID_AggStdMarshal; 
extern "C" const CLSID CLSID_StdAsyncActManager; 
extern "C" const IID IID_IStub; 
extern "C" const IID IID_IProxy; 
extern "C" const IID IID_IEnumGeneric; 
extern "C" const IID IID_IEnumHolder; 
extern "C" const IID IID_IEnumCallback; 
extern "C" const IID IID_IOleManager; 
extern "C" const IID IID_IOlePresObj; 
extern "C" const IID IID_IDebug; 
extern "C" const IID IID_IDebugStream; 
extern "C" const CLSID CLSID_PSGenObject; 
extern "C" const CLSID CLSID_PSClientSite; 
extern "C" const CLSID CLSID_PSClassObject; 
extern "C" const CLSID CLSID_PSInPlaceActive; 
extern "C" const CLSID CLSID_PSInPlaceFrame; 
extern "C" const CLSID CLSID_PSDragDrop; 
extern "C" const CLSID CLSID_PSBindCtx; 
extern "C" const CLSID CLSID_PSEnumerators; 
extern "C" const CLSID CLSID_StaticMetafile; 
extern "C" const CLSID CLSID_StaticDib; 
extern "C" const CLSID CID_CDfsVolume; 
extern "C" const CLSID CLSID_DCOMAccessControl; 
extern "C" const CLSID CLSID_GlobalOptions; 
extern "C" const CLSID CLSID_StdGlobalInterfaceTable; 
extern "C" const CLSID CLSID_ComBinding; 
extern "C" const CLSID CLSID_StdEvent; 
extern "C" const CLSID CLSID_ManualResetEvent; 
extern "C" const CLSID CLSID_SynchronizeContainer; 


extern "C" const CLSID CLSID_AddrControl; 
#line 73 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\cguid.h"
extern "C" const CLSID CLSID_ContextSwitcher; 
#line 85 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\cguid.h"
extern "C" const CLSID CLSID_CCDFormKrnl; 
extern "C" const CLSID CLSID_CCDPropertyPage; 
extern "C" const CLSID CLSID_CCDFormDialog; 




extern "C" const CLSID CLSID_CCDCommandButton; 
extern "C" const CLSID CLSID_CCDComboBox; 
extern "C" const CLSID CLSID_CCDTextBox; 
extern "C" const CLSID CLSID_CCDCheckBox; 
extern "C" const CLSID CLSID_CCDLabel; 
extern "C" const CLSID CLSID_CCDOptionButton; 
extern "C" const CLSID CLSID_CCDListBox; 
extern "C" const CLSID CLSID_CCDScrollBar; 
extern "C" const CLSID CLSID_CCDGroupBox; 




extern "C" const CLSID CLSID_CCDGeneralPropertyPage; 
extern "C" const CLSID CLSID_CCDGenericPropertyPage; 
extern "C" const CLSID CLSID_CCDFontPropertyPage; 
extern "C" const CLSID CLSID_CCDColorPropertyPage; 
extern "C" const CLSID CLSID_CCDLabelPropertyPage; 
extern "C" const CLSID CLSID_CCDCheckBoxPropertyPage; 
extern "C" const CLSID CLSID_CCDTextBoxPropertyPage; 
extern "C" const CLSID CLSID_CCDOptionButtonPropertyPage; 
extern "C" const CLSID CLSID_CCDListBoxPropertyPage; 
extern "C" const CLSID CLSID_CCDCommandButtonPropertyPage; 
extern "C" const CLSID CLSID_CCDComboBoxPropertyPage; 
extern "C" const CLSID CLSID_CCDScrollBarPropertyPage; 
extern "C" const CLSID CLSID_CCDGroupBoxPropertyPage; 
extern "C" const CLSID CLSID_CCDXObjectPropertyPage; 

extern "C" const CLSID CLSID_CStdPropertyFrame; 

extern "C" const CLSID CLSID_CFormPropertyPage; 
extern "C" const CLSID CLSID_CGridPropertyPage; 

extern "C" const CLSID CLSID_CWSJArticlePage; 
extern "C" const CLSID CLSID_CSystemPage; 

extern "C" const CLSID CLSID_IdentityUnmarshal; 
extern "C" const CLSID CLSID_InProcFreeMarshaler; 

extern "C" const CLSID CLSID_Picture_Metafile; 
extern "C" const CLSID CLSID_Picture_EnhMetafile; 
extern "C" const CLSID CLSID_Picture_Dib; 




extern "C" const GUID GUID_TRISTATE; 
#line 471 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objbase.h"
typedef 
#line 461 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objbase.h"
enum tagCOINIT { 

COINIT_APARTMENTTHREADED = 2, 



COINIT_MULTITHREADED = 0, 
COINIT_DISABLE_OLE1DDE = 4, 
COINIT_SPEED_OVER_MEMORY = 8
#line 471 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objbase.h"
} COINIT; 
#line 479
extern "C" __declspec( dllimport ) DWORD __stdcall CoBuildVersion(); 



extern "C" __declspec( dllimport ) HRESULT __stdcall CoInitialize(LPVOID); 
extern "C" __declspec( dllimport ) void __stdcall CoUninitialize(); 
extern "C" __declspec( dllimport ) HRESULT __stdcall CoGetMalloc(DWORD, LPMALLOC *); 
extern "C" __declspec( dllimport ) DWORD __stdcall CoGetCurrentProcess(); 
extern "C" __declspec( dllimport ) HRESULT __stdcall CoRegisterMallocSpy(LPMALLOCSPY); 
extern "C" __declspec( dllimport ) HRESULT __stdcall CoRevokeMallocSpy(); 
extern "C" __declspec( dllimport ) HRESULT __stdcall CoCreateStandardMalloc(DWORD, IMalloc **); 



extern "C" __declspec( dllimport ) HRESULT __stdcall CoInitializeEx(LPVOID, DWORD); 


extern "C" __declspec( dllimport ) HRESULT __stdcall CoGetCallerTID(LPDWORD); 


extern "C" __declspec( dllimport ) HRESULT __stdcall CoGetCurrentLogicalThreadId(GUID *); 
#line 504 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objbase.h"
extern "C" __declspec( dllimport ) HRESULT __stdcall CoRegisterInitializeSpy(LPINITIALIZESPY, ULARGE_INTEGER *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall CoRevokeInitializeSpy(ULARGE_INTEGER); 

extern "C" __declspec( dllimport ) HRESULT __stdcall CoGetContextToken(ULONG_PTR *); 
#line 518
typedef 
#line 511
enum tagCOMSD { 

SD_LAUNCHPERMISSIONS, 
SD_ACCESSPERMISSIONS, 
SD_LAUNCHRESTRICTIONS, 
SD_ACCESSRESTRICTIONS

} COMSD; 
extern "C" __declspec( dllimport ) HRESULT __stdcall CoGetSystemSecurityPermissions(COMSD, PSECURITY_DESCRIPTOR *); 
#line 539 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objbase.h"
typedef 
#line 530
struct tagSOleTlsDataPublic { 

void *pvReserved0[2]; 
DWORD dwReserved0[3]; 
void *pvReserved1[1]; 
DWORD dwReserved1[3]; 
void *pvReserved2[4]; 
DWORD dwReserved2[1]; 
void *pCurrentCtx; 
} SOleTlsDataPublic; 
#line 545 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objbase.h"
extern "C" __declspec( dllimport ) HRESULT __stdcall CoGetObjectContext(const IID &, LPVOID *); 



extern "C" __declspec( dllimport ) HRESULT __stdcall CoGetClassObject(const IID &, DWORD, LPVOID, const IID &, LPVOID *); 

extern "C" __declspec( dllimport ) HRESULT __stdcall CoRegisterClassObject(const IID &, LPUNKNOWN, DWORD, DWORD, LPDWORD); 

extern "C" __declspec( dllimport ) HRESULT __stdcall CoRevokeClassObject(DWORD); 
extern "C" __declspec( dllimport ) HRESULT __stdcall CoResumeClassObjects(); 
extern "C" __declspec( dllimport ) HRESULT __stdcall CoSuspendClassObjects(); 
extern "C" __declspec( dllimport ) ULONG __stdcall CoAddRefServerProcess(); 
extern "C" __declspec( dllimport ) ULONG __stdcall CoReleaseServerProcess(); 
extern "C" __declspec( dllimport ) HRESULT __stdcall CoGetPSClsid(const IID &, CLSID *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall CoRegisterPSClsid(const IID &, const IID &); 


extern "C" __declspec( dllimport ) HRESULT __stdcall CoRegisterSurrogate(LPSURROGATE); 



extern "C" __declspec( dllimport ) HRESULT __stdcall CoGetMarshalSizeMax(ULONG *, const IID &, LPUNKNOWN, DWORD, LPVOID, DWORD); 

extern "C" __declspec( dllimport ) HRESULT __stdcall CoMarshalInterface(LPSTREAM, const IID &, LPUNKNOWN, DWORD, LPVOID, DWORD); 

extern "C" __declspec( dllimport ) HRESULT __stdcall CoUnmarshalInterface(LPSTREAM, const IID &, LPVOID *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall CoMarshalHresult(LPSTREAM, HRESULT); 
extern "C" __declspec( dllimport ) HRESULT __stdcall CoUnmarshalHresult(LPSTREAM, HRESULT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall CoReleaseMarshalData(LPSTREAM); 
extern "C" __declspec( dllimport ) HRESULT __stdcall CoDisconnectObject(LPUNKNOWN, DWORD); 
extern "C" __declspec( dllimport ) HRESULT __stdcall CoLockObjectExternal(LPUNKNOWN, BOOL, BOOL); 
extern "C" __declspec( dllimport ) HRESULT __stdcall CoGetStandardMarshal(const IID &, LPUNKNOWN, DWORD, LPVOID, DWORD, LPMARSHAL *); 




extern "C" __declspec( dllimport ) HRESULT __stdcall CoGetStdMarshalEx(LPUNKNOWN, DWORD, LPUNKNOWN *); 
#line 589
typedef 
#line 585
enum tagSTDMSHLFLAGS { 

SMEXF_SERVER = 1, 
SMEXF_HANDLER
} STDMSHLFLAGS; 


extern "C" __declspec( dllimport ) BOOL __stdcall CoIsHandlerConnected(LPUNKNOWN); 


extern "C" __declspec( dllimport ) HRESULT __stdcall CoMarshalInterThreadInterfaceInStream(const IID &, LPUNKNOWN, LPSTREAM *); 


extern "C" __declspec( dllimport ) HRESULT __stdcall CoGetInterfaceAndReleaseStream(LPSTREAM, const IID &, LPVOID *); 


extern "C" __declspec( dllimport ) HRESULT __stdcall CoCreateFreeThreadedMarshaler(LPUNKNOWN, LPUNKNOWN *); 




extern "C" __declspec( dllimport ) HINSTANCE __stdcall CoLoadLibrary(LPOLESTR, BOOL); 
extern "C" __declspec( dllimport ) void __stdcall CoFreeLibrary(HINSTANCE); 
extern "C" __declspec( dllimport ) void __stdcall CoFreeAllLibraries(); 
extern "C" __declspec( dllimport ) void __stdcall CoFreeUnusedLibraries(); 


extern "C" __declspec( dllimport ) void __stdcall CoFreeUnusedLibrariesEx(DWORD, DWORD); 
#line 616 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objbase.h"
extern "C" __declspec( dllimport ) HRESULT __stdcall CoDisconnectContext(DWORD); 
#line 624 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objbase.h"
extern "C" __declspec( dllimport ) HRESULT __stdcall CoInitializeSecurity(PSECURITY_DESCRIPTOR, LONG, SOLE_AUTHENTICATION_SERVICE *, void *, DWORD, DWORD, void *, DWORD, void *); 
#line 637
extern "C" __declspec( dllimport ) HRESULT __stdcall CoGetCallContext(const IID &, void **); 


extern "C" __declspec( dllimport ) HRESULT __stdcall CoQueryProxyBlanket(IUnknown *, DWORD *, DWORD *, OLECHAR **, DWORD *, DWORD *, RPC_AUTH_IDENTITY_HANDLE *, DWORD *); 
#line 651
extern "C" __declspec( dllimport ) HRESULT __stdcall CoSetProxyBlanket(IUnknown *, DWORD, DWORD, OLECHAR *, DWORD, DWORD, RPC_AUTH_IDENTITY_HANDLE, DWORD); 
#line 662
extern "C" __declspec( dllimport ) HRESULT __stdcall CoCopyProxy(IUnknown *, IUnknown **); 




extern "C" __declspec( dllimport ) HRESULT __stdcall CoQueryClientBlanket(DWORD *, DWORD *, OLECHAR **, DWORD *, DWORD *, RPC_AUTHZ_HANDLE *, DWORD *); 
#line 677
extern "C" __declspec( dllimport ) HRESULT __stdcall CoImpersonateClient(); 


extern "C" __declspec( dllimport ) HRESULT __stdcall CoRevertToSelf(); 


extern "C" __declspec( dllimport ) HRESULT __stdcall CoQueryAuthenticationServices(DWORD *, SOLE_AUTHENTICATION_SERVICE **); 




extern "C" __declspec( dllimport ) HRESULT __stdcall CoSwitchCallContext(IUnknown *, IUnknown **); 
#line 702 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objbase.h"
extern "C" __declspec( dllimport ) HRESULT __stdcall CoCreateInstance(const IID &, LPUNKNOWN, DWORD, const IID &, LPVOID *); 
#line 712
extern "C" __declspec( dllimport ) HRESULT __stdcall CoGetInstanceFromFile(COSERVERINFO *, CLSID *, IUnknown *, DWORD, DWORD, OLECHAR *, DWORD, MULTI_QI *); 
#line 723
extern "C" __declspec( dllimport ) HRESULT __stdcall CoGetInstanceFromIStorage(COSERVERINFO *, CLSID *, IUnknown *, DWORD, IStorage *, DWORD, MULTI_QI *); 
#line 733
extern "C" __declspec( dllimport ) HRESULT __stdcall CoCreateInstanceEx(const IID &, IUnknown *, DWORD, COSERVERINFO *, DWORD, MULTI_QI *); 
#line 747 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objbase.h"
extern "C" __declspec( dllimport ) HRESULT __stdcall CoGetCancelObject(DWORD, const IID &, void **); 


extern "C" __declspec( dllimport ) HRESULT __stdcall CoSetCancelObject(IUnknown *); 


extern "C" __declspec( dllimport ) HRESULT __stdcall CoCancelCall(DWORD, ULONG); 


extern "C" __declspec( dllimport ) HRESULT __stdcall CoTestCancel(); 


extern "C" __declspec( dllimport ) HRESULT __stdcall CoEnableCallCancellation(LPVOID); 


extern "C" __declspec( dllimport ) HRESULT __stdcall CoDisableCallCancellation(LPVOID); 


extern "C" __declspec( dllimport ) HRESULT __stdcall CoAllowSetForegroundWindow(IUnknown *, LPVOID); 


extern "C" __declspec( dllimport ) HRESULT __stdcall DcomChannelSetHResult(LPVOID, ULONG *, HRESULT); 
#line 774 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objbase.h"
extern "C" __declspec( dllimport ) HRESULT __stdcall StringFromCLSID(const IID &, LPOLESTR *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall CLSIDFromString(LPOLESTR, LPCLSID); 
extern "C" __declspec( dllimport ) HRESULT __stdcall StringFromIID(const IID &, LPOLESTR *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall IIDFromString(LPOLESTR, LPIID); 
extern "C" __declspec( dllimport ) BOOL __stdcall CoIsOle1Class(const IID &); 
extern "C" __declspec( dllimport ) HRESULT __stdcall ProgIDFromCLSID(const IID &, LPOLESTR *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall CLSIDFromProgID(LPCOLESTR, LPCLSID); 
extern "C" __declspec( dllimport ) HRESULT __stdcall CLSIDFromProgIDEx(LPCOLESTR, LPCLSID); 
extern "C" __declspec( dllimport ) int __stdcall StringFromGUID2(const GUID &, LPOLESTR, int); 

extern "C" __declspec( dllimport ) HRESULT __stdcall CoCreateGuid(GUID *); 

extern "C" __declspec( dllimport ) BOOL __stdcall CoFileTimeToDosDateTime(FILETIME *, LPWORD, LPWORD); 

extern "C" __declspec( dllimport ) BOOL __stdcall CoDosDateTimeToFileTime(WORD, WORD, FILETIME *); 

extern "C" __declspec( dllimport ) HRESULT __stdcall CoFileTimeNow(FILETIME *); 


extern "C" __declspec( dllimport ) HRESULT __stdcall CoRegisterMessageFilter(LPMESSAGEFILTER, LPMESSAGEFILTER *); 




extern "C" __declspec( dllimport ) HRESULT __stdcall CoRegisterChannelHook(const GUID &, IChannelHook *); 
#line 805 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objbase.h"
extern "C" __declspec( dllimport ) HRESULT __stdcall CoWaitForMultipleHandles(DWORD, DWORD, ULONG, LPHANDLE, LPDWORD); 
#line 818
typedef 
#line 813
enum tagCOWAIT_FLAGS { 

COWAIT_WAITALL = 1, 
COWAIT_ALERTABLE, 
COWAIT_INPUTAVAILABLE = 4
} COWAIT_FLAGS; 
#line 826 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objbase.h"
extern "C" __declspec( dllimport ) HRESULT __stdcall CoInvalidateRemoteMachineBindings(LPOLESTR); 
#line 831 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objbase.h"
extern "C" __declspec( dllimport ) HRESULT __stdcall CoGetTreatAsClass(const IID &, LPCLSID); 
extern "C" __declspec( dllimport ) HRESULT __stdcall CoTreatAsClass(const IID &, const IID &); 
#line 843
typedef HRESULT (__stdcall *LPFNGETCLASSOBJECT)(const IID &, const IID &, LPVOID *); 
#line 849
typedef HRESULT (__stdcall *LPFNCANUNLOADNOW)(void); 


extern "C" HRESULT __stdcall DllGetClassObject(const IID &, const IID &, LPVOID *); 

extern "C" HRESULT __stdcall DllCanUnloadNow(); 



extern "C" __declspec( dllimport ) LPVOID __stdcall CoTaskMemAlloc(SIZE_T); 
extern "C" __declspec( dllimport ) LPVOID __stdcall CoTaskMemRealloc(LPVOID, SIZE_T); 
extern "C" __declspec( dllimport ) void __stdcall CoTaskMemFree(LPVOID); 




extern "C" __declspec( dllimport ) HRESULT __stdcall CreateDataAdviseHolder(LPDATAADVISEHOLDER *); 

extern "C" __declspec( dllimport ) HRESULT __stdcall CreateDataCache(LPUNKNOWN, const IID &, const IID &, LPVOID *); 
#line 874
extern "C" __declspec( dllimport ) HRESULT __stdcall StgCreateDocfile(const WCHAR *, DWORD, DWORD, IStorage **); 




extern "C" __declspec( dllimport ) HRESULT __stdcall StgCreateDocfileOnILockBytes(ILockBytes *, DWORD, DWORD, IStorage **); 




extern "C" __declspec( dllimport ) HRESULT __stdcall StgOpenStorage(const WCHAR *, IStorage *, DWORD, SNB, DWORD, IStorage **); 
#line 890
extern "C" __declspec( dllimport ) HRESULT __stdcall StgOpenStorageOnILockBytes(ILockBytes *, IStorage *, DWORD, SNB, DWORD, IStorage **); 
#line 897
extern "C" __declspec( dllimport ) HRESULT __stdcall StgIsStorageFile(const WCHAR *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall StgIsStorageILockBytes(ILockBytes *); 

extern "C" __declspec( dllimport ) HRESULT __stdcall StgSetTimes(const WCHAR *, const FILETIME *, const FILETIME *, const FILETIME *); 




extern "C" __declspec( dllimport ) HRESULT __stdcall StgOpenAsyncDocfileOnIFillLockBytes(IFillLockBytes *, DWORD, DWORD, IStorage **); 




extern "C" __declspec( dllimport ) HRESULT __stdcall StgGetIFillLockBytesOnILockBytes(ILockBytes *, IFillLockBytes **); 


extern "C" __declspec( dllimport ) HRESULT __stdcall StgGetIFillLockBytesOnFile(const OLECHAR *, IFillLockBytes **); 



extern "C" __declspec( dllimport ) HRESULT __stdcall StgOpenLayoutDocfile(const OLECHAR *, DWORD, DWORD, IStorage **); 
#line 939 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objbase.h"
typedef 
#line 931 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objbase.h"
struct tagSTGOPTIONS { 

USHORT usVersion; 
USHORT reserved; 
ULONG ulSectorSize; 

const WCHAR *pwcsTemplateFile; 
#line 939 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objbase.h"
} STGOPTIONS; 

extern "C" __declspec( dllimport ) HRESULT __stdcall StgCreateStorageEx(const WCHAR *, DWORD, DWORD, DWORD, STGOPTIONS *, PSECURITY_DESCRIPTOR, const IID &, void **); 
#line 950
extern "C" __declspec( dllimport ) HRESULT __stdcall StgOpenStorageEx(const WCHAR *, DWORD, DWORD, DWORD, STGOPTIONS *, PSECURITY_DESCRIPTOR, const IID &, void **); 
#line 964
extern "C" __declspec( dllimport ) HRESULT __stdcall BindMoniker(LPMONIKER, DWORD, const IID &, LPVOID *); 

extern "C" __declspec( dllimport ) HRESULT __stdcall CoInstall(IBindCtx *, DWORD, uCLSSPEC *, QUERYCONTEXT *, LPWSTR); 
#line 973
extern "C" __declspec( dllimport ) HRESULT __stdcall CoGetObject(LPCWSTR, BIND_OPTS *, const IID &, void **); 
extern "C" __declspec( dllimport ) HRESULT __stdcall MkParseDisplayName(LPBC, LPCOLESTR, ULONG *, LPMONIKER *); 

extern "C" __declspec( dllimport ) HRESULT __stdcall MonikerRelativePathTo(LPMONIKER, LPMONIKER, LPMONIKER *, BOOL); 

extern "C" __declspec( dllimport ) HRESULT __stdcall MonikerCommonPrefixWith(LPMONIKER, LPMONIKER, LPMONIKER *); 

extern "C" __declspec( dllimport ) HRESULT __stdcall CreateBindCtx(DWORD, LPBC *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall CreateGenericComposite(LPMONIKER, LPMONIKER, LPMONIKER *); 

extern "C" __declspec( dllimport ) HRESULT __stdcall GetClassFile(LPCOLESTR, CLSID *); 

extern "C" __declspec( dllimport ) HRESULT __stdcall CreateClassMoniker(const IID &, LPMONIKER *); 

extern "C" __declspec( dllimport ) HRESULT __stdcall CreateFileMoniker(LPCOLESTR, LPMONIKER *); 

extern "C" __declspec( dllimport ) HRESULT __stdcall CreateItemMoniker(LPCOLESTR, LPCOLESTR, LPMONIKER *); 

extern "C" __declspec( dllimport ) HRESULT __stdcall CreateAntiMoniker(LPMONIKER *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall CreatePointerMoniker(LPUNKNOWN, LPMONIKER *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall CreateObjrefMoniker(LPUNKNOWN, LPMONIKER *); 

extern "C" __declspec( dllimport ) HRESULT __stdcall GetRunningObjectTable(DWORD, LPRUNNINGOBJECTTABLE *); 
#line 17 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
#pragma warning( disable: 4049 )
#line 53 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("79eac9c9-baf9-11ce-8c82-00aa004ba90b")) IPersistMoniker IPersistMoniker; 
#line 59 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("a5ca5f7f-1847-4d87-9c5b-918509f7511d")) IMonikerProp IMonikerProp; 
#line 65 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("79eac9cd-baf9-11ce-8c82-00aa004ba90b")) IBindProtocol IBindProtocol; 
#line 71 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("79eac9c0-baf9-11ce-8c82-00aa004ba90b")) IBinding IBinding; 
#line 77 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("79eac9c1-baf9-11ce-8c82-00aa004ba90b")) IBindStatusCallback IBindStatusCallback; 
#line 83 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("79eac9d0-baf9-11ce-8c82-00aa004ba90b")) IAuthenticate IAuthenticate; 
#line 89 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("79eac9d2-baf9-11ce-8c82-00aa004ba90b")) IHttpNegotiate IHttpNegotiate; 
#line 95 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("4f9f9fcb-e0f4-48eb-b7ab-fa2ea9365cb4")) IHttpNegotiate2 IHttpNegotiate2; 
#line 101 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("f134c4b7-b1f8-4e75-b886-74b90943becb")) IWinInetFileStream IWinInetFileStream; 
#line 107 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("79eac9d5-bafa-11ce-8c82-00aa004ba90b")) IWindowForBindingUI IWindowForBindingUI; 
#line 113 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("79eac9d1-baf9-11ce-8c82-00aa004ba90b")) ICodeInstall ICodeInstall; 
#line 119 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("a39ee748-6a27-4817-a6f2-13914bef5890")) IUri IUri; 
#line 125 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("a158a630-ed6f-45fb-b987-f68676f57752")) IUriContainer IUriContainer; 
#line 131 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("4221b2e1-8955-46c0-bd5b-de9897565de7")) IUriBuilder IUriBuilder; 
#line 137 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("e982ce48-0b96-440c-bc37-0c869b27a29e")) IUriBuilderFactory IUriBuilderFactory; 
#line 143 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("79eac9d6-bafa-11ce-8c82-00aa004ba90b")) IWinInetInfo IWinInetInfo; 
#line 149 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("79eac9d7-bafa-11ce-8c82-00aa004ba90b")) IHttpSecurity IHttpSecurity; 
#line 155 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("79eac9d8-bafa-11ce-8c82-00aa004ba90b")) IWinInetHttpInfo IWinInetHttpInfo; 
#line 161 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("dd1ec3b3-8391-4fdb-a9e6-347c3caaa7dd")) IWinInetCacheHints IWinInetCacheHints; 
#line 167 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("7857aeac-d31f-49bf-884e-dd46df36780a")) IWinInetCacheHints2 IWinInetCacheHints2; 
#line 173 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("fc4801a1-2ba9-11cf-a229-00aa003d7352")) IBindHost IBindHost; 
#line 179 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("79eac9e0-baf9-11ce-8c82-00aa004ba90b")) IInternet IInternet; 
#line 185 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("79eac9e1-baf9-11ce-8c82-00aa004ba90b")) IInternetBindInfo IInternetBindInfo; 
#line 191 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("79eac9e3-baf9-11ce-8c82-00aa004ba90b")) IInternetProtocolRoot IInternetProtocolRoot; 
#line 197 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("79eac9e4-baf9-11ce-8c82-00aa004ba90b")) IInternetProtocol IInternetProtocol; 
#line 203 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("c7a98e66-1010-492c-a1c8-c809e1f75905")) IInternetProtocolEx IInternetProtocolEx; 
#line 209 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("79eac9e5-baf9-11ce-8c82-00aa004ba90b")) IInternetProtocolSink IInternetProtocolSink; 
#line 215 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("79eac9f0-baf9-11ce-8c82-00aa004ba90b")) IInternetProtocolSinkStackable IInternetProtocolSinkStackable; 
#line 221 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("79eac9e7-baf9-11ce-8c82-00aa004ba90b")) IInternetSession IInternetSession; 
#line 227 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("79eac9e8-baf9-11ce-8c82-00aa004ba90b")) IInternetThreadSwitch IInternetThreadSwitch; 
#line 233 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("79eac9eb-baf9-11ce-8c82-00aa004ba90b")) IInternetPriority IInternetPriority; 
#line 239 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("79eac9ec-baf9-11ce-8c82-00aa004ba90b")) IInternetProtocolInfo IInternetProtocolInfo; 
#line 245 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("79eac9ed-baf9-11ce-8c82-00aa004ba90b")) IInternetSecurityMgrSite IInternetSecurityMgrSite; 
#line 251 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("79eac9ee-baf9-11ce-8c82-00aa004ba90b")) IInternetSecurityManager IInternetSecurityManager; 
#line 257 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("f164edf1-cc7c-4f0d-9a94-34222625c393")) IInternetSecurityManagerEx IInternetSecurityManagerEx; 
#line 263 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("f1e50292-a795-4117-8e09-2b560a72ac60")) IInternetSecurityManagerEx2 IInternetSecurityManagerEx2; 
#line 269 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("cd45f185-1b21-48e2-967b-ead743a8914e")) IZoneIdentifier IZoneIdentifier; 
#line 275 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("3af280b6-cb3f-11d0-891e-00c04fb6bfc4")) IInternetHostSecurityManager IInternetHostSecurityManager; 
#line 281 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("79eac9ef-baf9-11ce-8c82-00aa004ba90b")) IInternetZoneManager IInternetZoneManager; 
#line 287 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("a4c23339-8e06-431e-9bf4-7e711c085648")) IInternetZoneManagerEx IInternetZoneManagerEx; 
#line 293 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("edc17559-dd5d-4846-8eef-8becba5a4abf")) IInternetZoneManagerEx2 IInternetZoneManagerEx2; 
#line 299 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("b15b8dc1-c7e1-11d0-8680-00aa00bdcb71")) ISoftDistExt ISoftDistExt; 
#line 305 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("711c7600-6b48-11d1-b403-00aa00b92af1")) ICatalogFileInfo ICatalogFileInfo; 
#line 311 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("69d14c80-c18e-11d0-a9ce-006097942311")) IDataFilter IDataFilter; 
#line 317 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("70bdde00-c18e-11d0-a9ce-006097942311")) IEncodingFilterFactory IEncodingFilterFactory; 
#line 323 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
typedef struct __declspec( novtable ) __declspec(uuid("53c84785-8425-4dc5-971b-e58d9c19f9b6")) IWrappedProtocol IWrappedProtocol; 
#line 17 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
#pragma warning( disable: 4049 )
#line 53 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000111-0000-0000-c000-000000000046")) IOleAdviseHolder IOleAdviseHolder; 
#line 59 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("0000011e-0000-0000-c000-000000000046")) IOleCache IOleCache; 
#line 65 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000128-0000-0000-c000-000000000046")) IOleCache2 IOleCache2; 
#line 71 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000129-0000-0000-c000-000000000046")) IOleCacheControl IOleCacheControl; 
#line 77 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("0000011a-0000-0000-c000-000000000046")) IParseDisplayName IParseDisplayName; 
#line 83 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("0000011b-0000-0000-c000-000000000046")) IOleContainer IOleContainer; 
#line 89 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000118-0000-0000-c000-000000000046")) IOleClientSite IOleClientSite; 
#line 95 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000112-0000-0000-c000-000000000046")) IOleObject IOleObject; 
#line 101 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000114-0000-0000-c000-000000000046")) IOleWindow IOleWindow; 
#line 107 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("0000011d-0000-0000-c000-000000000046")) IOleLink IOleLink; 
#line 113 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("0000011c-0000-0000-c000-000000000046")) IOleItemContainer IOleItemContainer; 
#line 119 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000115-0000-0000-c000-000000000046")) IOleInPlaceUIWindow IOleInPlaceUIWindow; 
#line 125 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000117-0000-0000-c000-000000000046")) IOleInPlaceActiveObject IOleInPlaceActiveObject; 
#line 131 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000116-0000-0000-c000-000000000046")) IOleInPlaceFrame IOleInPlaceFrame; 
#line 137 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000113-0000-0000-c000-000000000046")) IOleInPlaceObject IOleInPlaceObject; 
#line 143 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000119-0000-0000-c000-000000000046")) IOleInPlaceSite IOleInPlaceSite; 
#line 149 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("0000012a-0000-0000-c000-000000000046")) IContinue IContinue; 
#line 155 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("0000010d-0000-0000-c000-000000000046")) IViewObject IViewObject; 
#line 161 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000127-0000-0000-c000-000000000046")) IViewObject2 IViewObject2; 
#line 167 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000121-0000-0000-c000-000000000046")) IDropSource IDropSource; 
#line 173 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000122-0000-0000-c000-000000000046")) IDropTarget IDropTarget; 
#line 179 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("0000012b-0000-0000-c000-000000000046")) IDropSourceNotify IDropSourceNotify; 
#line 185 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000104-0000-0000-c000-000000000046")) IEnumOLEVERB IEnumOLEVERB; 
#line 213 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec; 
#line 222
extern "C" { typedef IOleAdviseHolder *LPOLEADVISEHOLDER; }


extern "C" const IID IID_IOleAdviseHolder; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000111-0000-0000-c000-000000000046")) IOleAdviseHolder : public IUnknown { 


virtual HRESULT __stdcall Advise(IAdviseSink *, DWORD *) = 0; 



virtual HRESULT __stdcall Unadvise(DWORD) = 0; 


virtual HRESULT __stdcall EnumAdvise(IEnumSTATDATA **) = 0; 


virtual HRESULT __stdcall SendOnRename(IMoniker *) = 0; 


virtual HRESULT __stdcall SendOnSave() = 0; 

virtual HRESULT __stdcall SendOnClose() = 0; 

}; }
#line 351 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
extern "C" { typedef IOleCache *LPOLECACHE; }


extern "C" const IID IID_IOleCache; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("0000011e-0000-0000-c000-000000000046")) IOleCache : public IUnknown { 


virtual HRESULT __stdcall Cache(FORMATETC *, DWORD, DWORD *) = 0; 




virtual HRESULT __stdcall Uncache(DWORD) = 0; 


virtual HRESULT __stdcall EnumCache(IEnumSTATDATA **) = 0; 


virtual HRESULT __stdcall InitCache(IDataObject *) = 0; 


virtual HRESULT __stdcall SetData(FORMATETC *, STGMEDIUM *, BOOL) = 0; 




}; }
#line 480 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
extern "C" { typedef IOleCache2 *LPOLECACHE2; }
#line 504
extern "C" { typedef 
#line 501
enum tagDISCARDCACHE { 
DISCARDCACHE_SAVEIFDIRTY, 
DISCARDCACHE_NOSAVE
} DISCARDCACHE; }


extern "C" const IID IID_IOleCache2; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000128-0000-0000-c000-000000000046")) IOleCache2 : public IOleCache { 


virtual HRESULT __stdcall UpdateCache(LPDATAOBJECT, DWORD, LPVOID) = 0; 




virtual HRESULT __stdcall DiscardCache(DWORD) = 0; 


}; }
#line 629 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
extern "C" { extern HRESULT __stdcall IOleCache2_RemoteUpdateCache_Proxy(IOleCache2 *, LPDATAOBJECT, DWORD, LONG_PTR); } 
#line 636
extern "C" { extern void __stdcall IOleCache2_RemoteUpdateCache_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 653 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
extern "C" { typedef IOleCacheControl *LPOLECACHECONTROL; }


extern "C" const IID IID_IOleCacheControl; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000129-0000-0000-c000-000000000046")) IOleCacheControl : public IUnknown { 


virtual HRESULT __stdcall OnRun(LPDATAOBJECT) = 0; 


virtual HRESULT __stdcall OnStop() = 0; 

}; }
#line 742 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
extern "C" { typedef IParseDisplayName *LPPARSEDISPLAYNAME; }


extern "C" const IID IID_IParseDisplayName; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("0000011a-0000-0000-c000-000000000046")) IParseDisplayName : public IUnknown { 


virtual HRESULT __stdcall ParseDisplayName(IBindCtx *, LPOLESTR, ULONG *, IMoniker **) = 0; 
#line 759
}; }
#line 829 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
extern "C" { typedef IOleContainer *LPOLECONTAINER; }


extern "C" const IID IID_IOleContainer; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("0000011b-0000-0000-c000-000000000046")) IOleContainer : public IParseDisplayName { 


virtual HRESULT __stdcall EnumObjects(DWORD, IEnumUnknown **) = 0; 



virtual HRESULT __stdcall LockContainer(BOOL) = 0; 


}; }
#line 933 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
extern "C" { typedef IOleClientSite *LPOLECLIENTSITE; }


extern "C" const IID IID_IOleClientSite; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000118-0000-0000-c000-000000000046")) IOleClientSite : public IUnknown { 


virtual HRESULT __stdcall SaveObject() = 0; 

virtual HRESULT __stdcall GetMoniker(DWORD, DWORD, IMoniker **) = 0; 




virtual HRESULT __stdcall GetContainer(IOleContainer **) = 0; 


virtual HRESULT __stdcall ShowObject() = 0; 

virtual HRESULT __stdcall OnShowWindow(BOOL) = 0; 


virtual HRESULT __stdcall RequestNewObjectLayout() = 0; 

}; }
#line 1062 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
extern "C" { typedef IOleObject *LPOLEOBJECT; }
#line 1070
extern "C" { typedef 
#line 1065
enum tagOLEGETMONIKER { 
OLEGETMONIKER_ONLYIFTHERE = 1, 
OLEGETMONIKER_FORCEASSIGN, 
OLEGETMONIKER_UNASSIGN, 
OLEGETMONIKER_TEMPFORUSER
} OLEGETMONIKER; }
#line 1077
extern "C" { typedef 
#line 1073
enum tagOLEWHICHMK { 
OLEWHICHMK_CONTAINER = 1, 
OLEWHICHMK_OBJREL, 
OLEWHICHMK_OBJFULL
} OLEWHICHMK; }
#line 1084
extern "C" { typedef 
#line 1080
enum tagUSERCLASSTYPE { 
USERCLASSTYPE_FULL = 1, 
USERCLASSTYPE_SHORT, 
USERCLASSTYPE_APPNAME
} USERCLASSTYPE; }
#line 1110
extern "C" { typedef 
#line 1087
enum tagOLEMISC { 
OLEMISC_RECOMPOSEONRESIZE = 1, 
OLEMISC_ONLYICONIC, 
OLEMISC_INSERTNOTREPLACE = 4, 
OLEMISC_STATIC = 8, 
OLEMISC_CANTLINKINSIDE = 16, 
OLEMISC_CANLINKBYOLE1 = 32, 
OLEMISC_ISLINKOBJECT = 64, 
OLEMISC_INSIDEOUT = 128, 
OLEMISC_ACTIVATEWHENVISIBLE = 256, 
OLEMISC_RENDERINGISDEVICEINDEPENDENT = 512, 
OLEMISC_INVISIBLEATRUNTIME = 1024, 
OLEMISC_ALWAYSRUN = 2048, 
OLEMISC_ACTSLIKEBUTTON = 4096, 
OLEMISC_ACTSLIKELABEL = 8192, 
OLEMISC_NOUIACTIVATE = 16384, 
OLEMISC_ALIGNABLE = 32768, 
OLEMISC_SIMPLEFRAME = 65536, 
OLEMISC_SETCLIENTSITEFIRST = 131072, 
OLEMISC_IMEMODE = 262144, 
OLEMISC_IGNOREACTIVATEWHENVISIBLE = 524288, 
OLEMISC_WANTSTOMENUMERGE = 1048576, 
OLEMISC_SUPPORTSMULTILEVELUNDO = 2097152
} OLEMISC; }
#line 1117
extern "C" { typedef 
#line 1113
enum tagOLECLOSE { 
OLECLOSE_SAVEIFDIRTY, 
OLECLOSE_NOSAVE, 
OLECLOSE_PROMPTSAVE
} OLECLOSE; }


extern "C" const IID IID_IOleObject; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000112-0000-0000-c000-000000000046")) IOleObject : public IUnknown { 


virtual HRESULT __stdcall SetClientSite(IOleClientSite *) = 0; 


virtual HRESULT __stdcall GetClientSite(IOleClientSite **) = 0; 


virtual HRESULT __stdcall SetHostNames(LPCOLESTR, LPCOLESTR) = 0; 



virtual HRESULT __stdcall Close(DWORD) = 0; 


virtual HRESULT __stdcall SetMoniker(DWORD, IMoniker *) = 0; 



virtual HRESULT __stdcall GetMoniker(DWORD, DWORD, IMoniker **) = 0; 




virtual HRESULT __stdcall InitFromData(IDataObject *, BOOL, DWORD) = 0; 




virtual HRESULT __stdcall GetClipboardData(DWORD, IDataObject **) = 0; 



virtual HRESULT __stdcall DoVerb(LONG, LPMSG, IOleClientSite *, LONG, HWND, LPCRECT) = 0; 
#line 1167
virtual HRESULT __stdcall EnumVerbs(IEnumOLEVERB **) = 0; 


virtual HRESULT __stdcall Update() = 0; 

virtual HRESULT __stdcall IsUpToDate() = 0; 

virtual HRESULT __stdcall GetUserClassID(CLSID *) = 0; 


virtual HRESULT __stdcall GetUserType(DWORD, LPOLESTR *) = 0; 



virtual HRESULT __stdcall SetExtent(DWORD, SIZEL *) = 0; 



virtual HRESULT __stdcall GetExtent(DWORD, SIZEL *) = 0; 



virtual HRESULT __stdcall Advise(IAdviseSink *, DWORD *) = 0; 



virtual HRESULT __stdcall Unadvise(DWORD) = 0; 


virtual HRESULT __stdcall EnumAdvise(IEnumSTATDATA **) = 0; 


virtual HRESULT __stdcall GetMiscStatus(DWORD, DWORD *) = 0; 



virtual HRESULT __stdcall SetColorScheme(LOGPALETTE *) = 0; 


}; }
#line 1434 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
extern "C" { typedef 
#line 1429
enum tagOLERENDER { 
OLERENDER_NONE, 
OLERENDER_DRAW, 
OLERENDER_FORMAT, 
OLERENDER_ASIS
} OLERENDER; }

extern "C" { typedef OLERENDER *LPOLERENDER; }
#line 1448
extern "C" { typedef 
#line 1438
struct tagOBJECTDESCRIPTOR { 

ULONG cbSize; 
CLSID clsid; 
DWORD dwDrawAspect; 
SIZEL sizel; 
POINTL pointl; 
DWORD dwStatus; 
DWORD dwFullUserTypeName; 
DWORD dwSrcOfCopy; 
} OBJECTDESCRIPTOR; }

extern "C" { typedef tagOBJECTDESCRIPTOR *POBJECTDESCRIPTOR; }

extern "C" { typedef tagOBJECTDESCRIPTOR *LPOBJECTDESCRIPTOR; }

extern "C" { typedef tagOBJECTDESCRIPTOR LINKSRCDESCRIPTOR; }

extern "C" { typedef tagOBJECTDESCRIPTOR *PLINKSRCDESCRIPTOR; }

extern "C" { typedef tagOBJECTDESCRIPTOR *LPLINKSRCDESCRIPTOR; }



extern "C" RPC_IF_HANDLE IOLETypes_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE IOLETypes_v0_0_s_ifspec; 
#line 1472 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
extern "C" { typedef IOleWindow *LPOLEWINDOW; }


extern "C" const IID IID_IOleWindow; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000114-0000-0000-c000-000000000046")) IOleWindow : public IUnknown { 


virtual HRESULT __stdcall GetWindow(HWND *) = 0; 


virtual HRESULT __stdcall ContextSensitiveHelp(BOOL) = 0; 


}; }
#line 1563 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
extern "C" { typedef IOleLink *LPOLELINK; }
#line 1569
extern "C" { typedef 
#line 1566
enum tagOLEUPDATE { 
OLEUPDATE_ALWAYS = 1, 
OLEUPDATE_ONCALL = 3
} OLEUPDATE; }

extern "C" { typedef OLEUPDATE *LPOLEUPDATE; }

extern "C" { typedef OLEUPDATE *POLEUPDATE; }




extern "C" { typedef 
#line 1576
enum tagOLELINKBIND { 
OLELINKBIND_EVENIFCLASSDIFF = 1
} OLELINKBIND; }


extern "C" const IID IID_IOleLink; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("0000011d-0000-0000-c000-000000000046")) IOleLink : public IUnknown { 


virtual HRESULT __stdcall SetUpdateOptions(DWORD) = 0; 


virtual HRESULT __stdcall GetUpdateOptions(DWORD *) = 0; 


virtual HRESULT __stdcall SetSourceMoniker(IMoniker *, const IID &) = 0; 



virtual HRESULT __stdcall GetSourceMoniker(IMoniker **) = 0; 


virtual HRESULT __stdcall SetSourceDisplayName(LPCOLESTR) = 0; 


virtual HRESULT __stdcall GetSourceDisplayName(LPOLESTR *) = 0; 


virtual HRESULT __stdcall BindToSource(DWORD, IBindCtx *) = 0; 



virtual HRESULT __stdcall BindIfRunning() = 0; 

virtual HRESULT __stdcall GetBoundSource(IUnknown **) = 0; 


virtual HRESULT __stdcall UnbindSource() = 0; 

virtual HRESULT __stdcall Update(IBindCtx *) = 0; 


}; }
#line 1759 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
extern "C" { typedef IOleItemContainer *LPOLEITEMCONTAINER; }
#line 1766
extern "C" { typedef 
#line 1762
enum tagBINDSPEED { 
BINDSPEED_INDEFINITE = 1, 
BINDSPEED_MODERATE, 
BINDSPEED_IMMEDIATE
} BINDSPEED; }
#line 1775
extern "C" { typedef 
#line 1769
enum tagOLECONTF { 
OLECONTF_EMBEDDINGS = 1, 
OLECONTF_LINKS, 
OLECONTF_OTHERS = 4, 
OLECONTF_ONLYUSER = 8, 
OLECONTF_ONLYIFRUNNING = 16
} OLECONTF; }


extern "C" const IID IID_IOleItemContainer; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("0000011c-0000-0000-c000-000000000046")) IOleItemContainer : public IOleContainer { 


virtual HRESULT __stdcall GetObjectA(LPOLESTR, DWORD, IBindCtx *, const IID &, void **) = 0; 
#line 1793
virtual HRESULT __stdcall GetObjectStorage(LPOLESTR, IBindCtx *, const IID &, void **) = 0; 
#line 1799
virtual HRESULT __stdcall IsRunning(LPOLESTR) = 0; 


}; }
#line 1917 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
extern "C" { typedef IOleInPlaceUIWindow *LPOLEINPLACEUIWINDOW; }

extern "C" { typedef RECT BORDERWIDTHS; }

extern "C" { typedef LPRECT LPBORDERWIDTHS; }

extern "C" { typedef LPCRECT LPCBORDERWIDTHS; }


extern "C" const IID IID_IOleInPlaceUIWindow; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000115-0000-0000-c000-000000000046")) IOleInPlaceUIWindow : public IOleWindow { 


virtual HRESULT __stdcall GetBorder(LPRECT) = 0; 


virtual HRESULT __stdcall RequestBorderSpace(LPCBORDERWIDTHS) = 0; 


virtual HRESULT __stdcall SetBorderSpace(LPCBORDERWIDTHS) = 0; 


virtual HRESULT __stdcall SetActiveObject(IOleInPlaceActiveObject *, LPCOLESTR) = 0; 



}; }
#line 2051 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
extern "C" { typedef IOleInPlaceActiveObject *LPOLEINPLACEACTIVEOBJECT; }


extern "C" const IID IID_IOleInPlaceActiveObject; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000117-0000-0000-c000-000000000046")) IOleInPlaceActiveObject : public IOleWindow { 


virtual HRESULT __stdcall TranslateAcceleratorA(LPMSG) = 0; 


virtual HRESULT __stdcall OnFrameWindowActivate(BOOL) = 0; 


virtual HRESULT __stdcall OnDocWindowActivate(BOOL) = 0; 


virtual HRESULT __stdcall ResizeBorder(LPCRECT, IOleInPlaceUIWindow *, BOOL) = 0; 




virtual HRESULT __stdcall EnableModeless(BOOL) = 0; 


}; }
#line 2181 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
extern "C" { extern HRESULT __stdcall IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy(IOleInPlaceActiveObject *); } 



extern "C" { extern void __stdcall IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 2192
extern "C" { extern HRESULT __stdcall IOleInPlaceActiveObject_RemoteResizeBorder_Proxy(IOleInPlaceActiveObject *, LPCRECT, const IID &, IOleInPlaceUIWindow *, BOOL); } 
#line 2200
extern "C" { extern void __stdcall IOleInPlaceActiveObject_RemoteResizeBorder_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 2217 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
extern "C" { typedef IOleInPlaceFrame *LPOLEINPLACEFRAME; }
#line 2226
extern "C" { typedef 
#line 2219
struct tagOIFI { 

UINT cb; 
BOOL fMDIApp; 
HWND hwndFrame; 
HACCEL haccel; 
UINT cAccelEntries; 
} OLEINPLACEFRAMEINFO; }

extern "C" { typedef tagOIFI *LPOLEINPLACEFRAMEINFO; }




extern "C" { typedef 
#line 2230
struct tagOleMenuGroupWidths { 

LONG width[6]; 
} OLEMENUGROUPWIDTHS; }

extern "C" { typedef tagOleMenuGroupWidths *LPOLEMENUGROUPWIDTHS; }

extern "C" { typedef HGLOBAL HOLEMENU; }


extern "C" const IID IID_IOleInPlaceFrame; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000116-0000-0000-c000-000000000046")) IOleInPlaceFrame : public IOleInPlaceUIWindow { 


virtual HRESULT __stdcall InsertMenus(HMENU, LPOLEMENUGROUPWIDTHS) = 0; 



virtual HRESULT __stdcall SetMenu(HMENU, HOLEMENU, HWND) = 0; 




virtual HRESULT __stdcall RemoveMenus(HMENU) = 0; 


virtual HRESULT __stdcall SetStatusText(LPCOLESTR) = 0; 


virtual HRESULT __stdcall EnableModeless(BOOL) = 0; 


virtual HRESULT __stdcall TranslateAcceleratorA(LPMSG, WORD) = 0; 



}; }
#line 2421 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
extern "C" { typedef IOleInPlaceObject *LPOLEINPLACEOBJECT; }


extern "C" const IID IID_IOleInPlaceObject; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000113-0000-0000-c000-000000000046")) IOleInPlaceObject : public IOleWindow { 


virtual HRESULT __stdcall InPlaceDeactivate() = 0; 

virtual HRESULT __stdcall UIDeactivate() = 0; 

virtual HRESULT __stdcall SetObjectRects(LPCRECT, LPCRECT) = 0; 



virtual HRESULT __stdcall ReactivateAndUndo() = 0; 

}; }
#line 2543 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
extern "C" { typedef IOleInPlaceSite *LPOLEINPLACESITE; }


extern "C" const IID IID_IOleInPlaceSite; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000119-0000-0000-c000-000000000046")) IOleInPlaceSite : public IOleWindow { 


virtual HRESULT __stdcall CanInPlaceActivate() = 0; 

virtual HRESULT __stdcall OnInPlaceActivate() = 0; 

virtual HRESULT __stdcall OnUIActivate() = 0; 

virtual HRESULT __stdcall GetWindowContext(IOleInPlaceFrame **, IOleInPlaceUIWindow **, LPRECT, LPRECT, LPOLEINPLACEFRAMEINFO) = 0; 
#line 2567
virtual HRESULT __stdcall Scroll(SIZE) = 0; 


virtual HRESULT __stdcall OnUIDeactivate(BOOL) = 0; 


virtual HRESULT __stdcall OnInPlaceDeactivate() = 0; 

virtual HRESULT __stdcall DiscardUndoState() = 0; 

virtual HRESULT __stdcall DeactivateAndUndo() = 0; 

virtual HRESULT __stdcall OnPosRectChange(LPCRECT) = 0; 


}; }
#line 2726 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
extern "C" const IID IID_IContinue; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("0000012a-0000-0000-c000-000000000046")) IContinue : public IUnknown { 


virtual HRESULT __stdcall FContinue() = 0; 

}; }
#line 2802 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
extern "C" { typedef IViewObject *LPVIEWOBJECT; }


extern "C" const IID IID_IViewObject; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("0000010d-0000-0000-c000-000000000046")) IViewObject : public IUnknown { 


virtual HRESULT __stdcall Draw(DWORD, LONG, void *, DVTARGETDEVICE *, HDC, HDC, LPCRECTL, LPCRECTL, BOOL (__stdcall *)(ULONG_PTR), ULONG_PTR) = 0; 
#line 2826
virtual HRESULT __stdcall GetColorSet(DWORD, LONG, void *, DVTARGETDEVICE *, HDC, LOGPALETTE **) = 0; 
#line 2834
virtual HRESULT __stdcall Freeze(DWORD, LONG, void *, DWORD *) = 0; 
#line 2840
virtual HRESULT __stdcall Unfreeze(DWORD) = 0; 


virtual HRESULT __stdcall SetAdvise(DWORD, DWORD, IAdviseSink *) = 0; 




virtual HRESULT __stdcall GetAdvise(DWORD *, DWORD *, IAdviseSink **) = 0; 




}; }
#line 2967 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
extern "C" { extern HRESULT __stdcall IViewObject_RemoteDraw_Proxy(IViewObject *, DWORD, LONG, ULONG_PTR, DVTARGETDEVICE *, HDC, HDC, LPCRECTL, LPCRECTL, IContinue *); } 
#line 2980
extern "C" { extern void __stdcall IViewObject_RemoteDraw_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 2987
extern "C" { extern HRESULT __stdcall IViewObject_RemoteGetColorSet_Proxy(IViewObject *, DWORD, LONG, ULONG_PTR, DVTARGETDEVICE *, ULONG_PTR, LOGPALETTE **); } 
#line 2997
extern "C" { extern void __stdcall IViewObject_RemoteGetColorSet_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 3004
extern "C" { extern HRESULT __stdcall IViewObject_RemoteFreeze_Proxy(IViewObject *, DWORD, LONG, ULONG_PTR, DWORD *); } 
#line 3012
extern "C" { extern void __stdcall IViewObject_RemoteFreeze_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 3019
extern "C" { extern HRESULT __stdcall IViewObject_RemoteGetAdvise_Proxy(IViewObject *, DWORD *, DWORD *, IAdviseSink **); } 
#line 3026
extern "C" { extern void __stdcall IViewObject_RemoteGetAdvise_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 3043 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
extern "C" { typedef IViewObject2 *LPVIEWOBJECT2; }


extern "C" const IID IID_IViewObject2; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000127-0000-0000-c000-000000000046")) IViewObject2 : public IViewObject { 


virtual HRESULT __stdcall GetExtent(DWORD, LONG, DVTARGETDEVICE *, LPSIZEL) = 0; 
#line 3060
}; }
#line 3195 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
extern "C" { typedef IDropSource *LPDROPSOURCE; }


extern "C" const IID IID_IDropSource; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000121-0000-0000-c000-000000000046")) IDropSource : public IUnknown { 


virtual HRESULT __stdcall QueryContinueDrag(BOOL, DWORD) = 0; 



virtual HRESULT __stdcall GiveFeedback(DWORD) = 0; 


}; }
#line 3288 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
extern "C" { typedef IDropTarget *LPDROPTARGET; }
#line 3323
extern "C" const IID IID_IDropTarget; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000122-0000-0000-c000-000000000046")) IDropTarget : public IUnknown { 


virtual HRESULT __stdcall DragEnter(IDataObject *, DWORD, POINTL, DWORD *) = 0; 
#line 3337
virtual HRESULT __stdcall DragOver(DWORD, POINTL, DWORD *) = 0; 




virtual HRESULT __stdcall DragLeave() = 0; 

virtual HRESULT __stdcall Drop(IDataObject *, DWORD, POINTL, DWORD *) = 0; 
#line 3350
}; }
#line 3446 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
extern "C" const IID IID_IDropSourceNotify; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("0000012b-0000-0000-c000-000000000046")) IDropSourceNotify : public IUnknown { 


virtual HRESULT __stdcall DragEnterTarget(HWND) = 0; 


virtual HRESULT __stdcall DragLeaveTarget() = 0; 

}; }
#line 3532 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
extern "C" { typedef IEnumOLEVERB *LPENUMOLEVERB; }
#line 3540
extern "C" { typedef 
#line 3534
struct tagOLEVERB { 

LONG lVerb; 
LPOLESTR lpszVerbName; 
DWORD fuFlags; 
DWORD grfAttribs; 
} OLEVERB; }

extern "C" { typedef tagOLEVERB *LPOLEVERB; }
#line 3548
extern "C" { typedef 
#line 3545
enum tagOLEVERBATTRIB { 
OLEVERBATTRIB_NEVERDIRTIES = 1, 
OLEVERBATTRIB_ONCONTAINERMENU
} OLEVERBATTRIB; }


extern "C" const IID IID_IEnumOLEVERB; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000104-0000-0000-c000-000000000046")) IEnumOLEVERB : public IUnknown { 


virtual HRESULT __stdcall Next(ULONG, LPOLEVERB, ULONG *) = 0; 




virtual HRESULT __stdcall Skip(ULONG) = 0; 


virtual HRESULT __stdcall Reset() = 0; 

virtual HRESULT __stdcall Clone(struct IEnumOLEVERB **) = 0; 


}; }
#line 3651 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
extern "C" { extern HRESULT __stdcall IEnumOLEVERB_RemoteNext_Proxy(IEnumOLEVERB *, ULONG, LPOLEVERB, ULONG *); } 
#line 3658
extern "C" { extern void __stdcall IEnumOLEVERB_RemoteNext_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 3671 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oleidl.h"
extern "C" { extern unsigned long __stdcall CLIPFORMAT_UserSize(unsigned long *, unsigned long, CLIPFORMAT *); } 
extern "C" { extern unsigned char *__stdcall CLIPFORMAT_UserMarshal(unsigned long *, unsigned char *, CLIPFORMAT *); } 
extern "C" { extern unsigned char *__stdcall CLIPFORMAT_UserUnmarshal(unsigned long *, unsigned char *, CLIPFORMAT *); } 
extern "C" { extern void __stdcall CLIPFORMAT_UserFree(unsigned long *, CLIPFORMAT *); } 

extern "C" { extern unsigned long __stdcall HACCEL_UserSize(unsigned long *, unsigned long, HACCEL *); } 
extern "C" { extern unsigned char *__stdcall HACCEL_UserMarshal(unsigned long *, unsigned char *, HACCEL *); } 
extern "C" { extern unsigned char *__stdcall HACCEL_UserUnmarshal(unsigned long *, unsigned char *, HACCEL *); } 
extern "C" { extern void __stdcall HACCEL_UserFree(unsigned long *, HACCEL *); } 

extern "C" { extern unsigned long __stdcall HDC_UserSize(unsigned long *, unsigned long, HDC *); } 
extern "C" { extern unsigned char *__stdcall HDC_UserMarshal(unsigned long *, unsigned char *, HDC *); } 
extern "C" { extern unsigned char *__stdcall HDC_UserUnmarshal(unsigned long *, unsigned char *, HDC *); } 
extern "C" { extern void __stdcall HDC_UserFree(unsigned long *, HDC *); } 

extern "C" { extern unsigned long __stdcall HGLOBAL_UserSize(unsigned long *, unsigned long, HGLOBAL *); } 
extern "C" { extern unsigned char *__stdcall HGLOBAL_UserMarshal(unsigned long *, unsigned char *, HGLOBAL *); } 
extern "C" { extern unsigned char *__stdcall HGLOBAL_UserUnmarshal(unsigned long *, unsigned char *, HGLOBAL *); } 
extern "C" { extern void __stdcall HGLOBAL_UserFree(unsigned long *, HGLOBAL *); } 

extern "C" { extern unsigned long __stdcall HMENU_UserSize(unsigned long *, unsigned long, HMENU *); } 
extern "C" { extern unsigned char *__stdcall HMENU_UserMarshal(unsigned long *, unsigned char *, HMENU *); } 
extern "C" { extern unsigned char *__stdcall HMENU_UserUnmarshal(unsigned long *, unsigned char *, HMENU *); } 
extern "C" { extern void __stdcall HMENU_UserFree(unsigned long *, HMENU *); } 

extern "C" { extern unsigned long __stdcall HWND_UserSize(unsigned long *, unsigned long, HWND *); } 
extern "C" { extern unsigned char *__stdcall HWND_UserMarshal(unsigned long *, unsigned char *, HWND *); } 
extern "C" { extern unsigned char *__stdcall HWND_UserUnmarshal(unsigned long *, unsigned char *, HWND *); } 
extern "C" { extern void __stdcall HWND_UserFree(unsigned long *, HWND *); } 

extern "C" { extern unsigned long __stdcall STGMEDIUM_UserSize(unsigned long *, unsigned long, STGMEDIUM *); } 
extern "C" { extern unsigned char *__stdcall STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, STGMEDIUM *); } 
extern "C" { extern unsigned char *__stdcall STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, STGMEDIUM *); } 
extern "C" { extern void __stdcall STGMEDIUM_UserFree(unsigned long *, STGMEDIUM *); } 

extern "C" { extern unsigned long __stdcall CLIPFORMAT_UserSize64(unsigned long *, unsigned long, CLIPFORMAT *); } 
extern "C" { extern unsigned char *__stdcall CLIPFORMAT_UserMarshal64(unsigned long *, unsigned char *, CLIPFORMAT *); } 
extern "C" { extern unsigned char *__stdcall CLIPFORMAT_UserUnmarshal64(unsigned long *, unsigned char *, CLIPFORMAT *); } 
extern "C" { extern void __stdcall CLIPFORMAT_UserFree64(unsigned long *, CLIPFORMAT *); } 

extern "C" { extern unsigned long __stdcall HACCEL_UserSize64(unsigned long *, unsigned long, HACCEL *); } 
extern "C" { extern unsigned char *__stdcall HACCEL_UserMarshal64(unsigned long *, unsigned char *, HACCEL *); } 
extern "C" { extern unsigned char *__stdcall HACCEL_UserUnmarshal64(unsigned long *, unsigned char *, HACCEL *); } 
extern "C" { extern void __stdcall HACCEL_UserFree64(unsigned long *, HACCEL *); } 

extern "C" { extern unsigned long __stdcall HDC_UserSize64(unsigned long *, unsigned long, HDC *); } 
extern "C" { extern unsigned char *__stdcall HDC_UserMarshal64(unsigned long *, unsigned char *, HDC *); } 
extern "C" { extern unsigned char *__stdcall HDC_UserUnmarshal64(unsigned long *, unsigned char *, HDC *); } 
extern "C" { extern void __stdcall HDC_UserFree64(unsigned long *, HDC *); } 

extern "C" { extern unsigned long __stdcall HGLOBAL_UserSize64(unsigned long *, unsigned long, HGLOBAL *); } 
extern "C" { extern unsigned char *__stdcall HGLOBAL_UserMarshal64(unsigned long *, unsigned char *, HGLOBAL *); } 
extern "C" { extern unsigned char *__stdcall HGLOBAL_UserUnmarshal64(unsigned long *, unsigned char *, HGLOBAL *); } 
extern "C" { extern void __stdcall HGLOBAL_UserFree64(unsigned long *, HGLOBAL *); } 

extern "C" { extern unsigned long __stdcall HMENU_UserSize64(unsigned long *, unsigned long, HMENU *); } 
extern "C" { extern unsigned char *__stdcall HMENU_UserMarshal64(unsigned long *, unsigned char *, HMENU *); } 
extern "C" { extern unsigned char *__stdcall HMENU_UserUnmarshal64(unsigned long *, unsigned char *, HMENU *); } 
extern "C" { extern void __stdcall HMENU_UserFree64(unsigned long *, HMENU *); } 

extern "C" { extern unsigned long __stdcall HWND_UserSize64(unsigned long *, unsigned long, HWND *); } 
extern "C" { extern unsigned char *__stdcall HWND_UserMarshal64(unsigned long *, unsigned char *, HWND *); } 
extern "C" { extern unsigned char *__stdcall HWND_UserUnmarshal64(unsigned long *, unsigned char *, HWND *); } 
extern "C" { extern void __stdcall HWND_UserFree64(unsigned long *, HWND *); } 

extern "C" { extern unsigned long __stdcall STGMEDIUM_UserSize64(unsigned long *, unsigned long, STGMEDIUM *); } 
extern "C" { extern unsigned char *__stdcall STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, STGMEDIUM *); } 
extern "C" { extern unsigned char *__stdcall STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, STGMEDIUM *); } 
extern "C" { extern void __stdcall STGMEDIUM_UserFree64(unsigned long *, STGMEDIUM *); } 

extern "C" { extern HRESULT __stdcall IOleCache2_UpdateCache_Proxy(IOleCache2 *, LPDATAOBJECT, DWORD, LPVOID); } 
#line 3748
extern "C" { extern HRESULT __stdcall IOleCache2_UpdateCache_Stub(IOleCache2 *, LPDATAOBJECT, DWORD, LONG_PTR); } 
#line 3754
extern "C" { extern HRESULT __stdcall IOleInPlaceActiveObject_TranslateAccelerator_Proxy(IOleInPlaceActiveObject *, LPMSG); } 




extern "C" { extern HRESULT __stdcall IOleInPlaceActiveObject_TranslateAccelerator_Stub(IOleInPlaceActiveObject *); } 


extern "C" { extern HRESULT __stdcall IOleInPlaceActiveObject_ResizeBorder_Proxy(IOleInPlaceActiveObject *, LPCRECT, IOleInPlaceUIWindow *, BOOL); } 
#line 3769
extern "C" { extern HRESULT __stdcall IOleInPlaceActiveObject_ResizeBorder_Stub(IOleInPlaceActiveObject *, LPCRECT, const IID &, IOleInPlaceUIWindow *, BOOL); } 
#line 3776
extern "C" { extern HRESULT __stdcall IViewObject_Draw_Proxy(IViewObject *, DWORD, LONG, void *, DVTARGETDEVICE *, HDC, HDC, LPCRECTL, LPCRECTL, BOOL (__stdcall *)(ULONG_PTR), ULONG_PTR); } 
#line 3791
extern "C" { extern HRESULT __stdcall IViewObject_Draw_Stub(IViewObject *, DWORD, LONG, ULONG_PTR, DVTARGETDEVICE *, HDC, HDC, LPCRECTL, LPCRECTL, IContinue *); } 
#line 3803
extern "C" { extern HRESULT __stdcall IViewObject_GetColorSet_Proxy(IViewObject *, DWORD, LONG, void *, DVTARGETDEVICE *, HDC, LOGPALETTE **); } 
#line 3813
extern "C" { extern HRESULT __stdcall IViewObject_GetColorSet_Stub(IViewObject *, DWORD, LONG, ULONG_PTR, DVTARGETDEVICE *, ULONG_PTR, LOGPALETTE **); } 
#line 3822
extern "C" { extern HRESULT __stdcall IViewObject_Freeze_Proxy(IViewObject *, DWORD, LONG, void *, DWORD *); } 
#line 3830
extern "C" { extern HRESULT __stdcall IViewObject_Freeze_Stub(IViewObject *, DWORD, LONG, ULONG_PTR, DWORD *); } 
#line 3837
extern "C" { extern HRESULT __stdcall IViewObject_GetAdvise_Proxy(IViewObject *, DWORD *, DWORD *, IAdviseSink **); } 
#line 3844
extern "C" { extern HRESULT __stdcall IViewObject_GetAdvise_Stub(IViewObject *, DWORD *, DWORD *, IAdviseSink **); } 
#line 3850
extern "C" { extern HRESULT __stdcall IEnumOLEVERB_Next_Proxy(IEnumOLEVERB *, ULONG, LPOLEVERB, ULONG *); } 
#line 3857
extern "C" { extern HRESULT __stdcall IEnumOLEVERB_Next_Stub(IEnumOLEVERB *, ULONG, LPOLEVERB, ULONG *); } 
#line 17 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\servprov.h"
#pragma warning( disable: 4049 )
#line 53 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\servprov.h"
typedef struct __declspec( novtable ) __declspec(uuid("6d5140c1-7436-11ce-8034-00aa006009fa")) IServiceProvider IServiceProvider; 
#line 79 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\servprov.h"
#pragma comment(lib,"uuid.lib")
#line 87
extern "C" RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec; 
#line 96
extern "C" { typedef IServiceProvider *LPSERVICEPROVIDER; }


extern "C" const IID IID_IServiceProvider; 



struct __declspec( novtable ) __declspec(uuid("6d5140c1-7436-11ce-8034-00aa006009fa")) IServiceProvider : public IUnknown { 


virtual HRESULT __stdcall QueryService(const GUID &, const IID &, void **) = 0; 




template < class Q >
            HRESULT __stdcall QueryService ( const GUID & guidService, Q * * pp )
            {
                return QueryService ( guidService, __uuidof ( Q ), ( void * * ) pp );
            }
}; 


extern "C" { extern HRESULT __stdcall IServiceProvider_RemoteQueryService_Proxy(IServiceProvider *, const GUID &, const IID &, IUnknown **); } 
#line 125
extern "C" { extern void __stdcall IServiceProvider_RemoteQueryService_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 229 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\servprov.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec; 



extern "C" { extern HRESULT __stdcall IServiceProvider_QueryService_Proxy(IServiceProvider *, const GUID &, const IID &, void **); } 
#line 241
extern "C" { extern HRESULT __stdcall IServiceProvider_QueryService_Stub(IServiceProvider *, const GUID &, const IID &, IUnknown **); } 
#line 17 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
#pragma warning( disable: 4049 )
#line 49 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
typedef struct __declspec( novtable ) __declspec(uuid("2933bf8f-7b36-11d2-b20e-00c04f983e60")) IXMLDOMImplementation IXMLDOMImplementation; 
#line 55 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
typedef struct __declspec( novtable ) __declspec(uuid("2933bf80-7b36-11d2-b20e-00c04f983e60")) IXMLDOMNode IXMLDOMNode; 
#line 61 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
typedef struct __declspec( novtable ) __declspec(uuid("3efaa413-272f-11d2-836f-0000f87a7782")) IXMLDOMDocumentFragment IXMLDOMDocumentFragment; 
#line 67 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
typedef struct __declspec( novtable ) __declspec(uuid("2933bf81-7b36-11d2-b20e-00c04f983e60")) IXMLDOMDocument IXMLDOMDocument; 
#line 73 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
typedef struct __declspec( novtable ) __declspec(uuid("2933bf82-7b36-11d2-b20e-00c04f983e60")) IXMLDOMNodeList IXMLDOMNodeList; 
#line 79 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
typedef struct __declspec( novtable ) __declspec(uuid("2933bf83-7b36-11d2-b20e-00c04f983e60")) IXMLDOMNamedNodeMap IXMLDOMNamedNodeMap; 
#line 85 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
typedef struct __declspec( novtable ) __declspec(uuid("2933bf84-7b36-11d2-b20e-00c04f983e60")) IXMLDOMCharacterData IXMLDOMCharacterData; 
#line 91 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
typedef struct __declspec( novtable ) __declspec(uuid("2933bf85-7b36-11d2-b20e-00c04f983e60")) IXMLDOMAttribute IXMLDOMAttribute; 
#line 97 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
typedef struct __declspec( novtable ) __declspec(uuid("2933bf86-7b36-11d2-b20e-00c04f983e60")) IXMLDOMElement IXMLDOMElement; 
#line 103 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
typedef struct __declspec( novtable ) __declspec(uuid("2933bf87-7b36-11d2-b20e-00c04f983e60")) IXMLDOMText IXMLDOMText; 
#line 109 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
typedef struct __declspec( novtable ) __declspec(uuid("2933bf88-7b36-11d2-b20e-00c04f983e60")) IXMLDOMComment IXMLDOMComment; 
#line 115 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
typedef struct __declspec( novtable ) __declspec(uuid("2933bf89-7b36-11d2-b20e-00c04f983e60")) IXMLDOMProcessingInstruction IXMLDOMProcessingInstruction; 
#line 121 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
typedef struct __declspec( novtable ) __declspec(uuid("2933bf8a-7b36-11d2-b20e-00c04f983e60")) IXMLDOMCDATASection IXMLDOMCDATASection; 
#line 127 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
typedef struct __declspec( novtable ) __declspec(uuid("2933bf8b-7b36-11d2-b20e-00c04f983e60")) IXMLDOMDocumentType IXMLDOMDocumentType; 
#line 133 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
typedef struct __declspec( novtable ) __declspec(uuid("2933bf8c-7b36-11d2-b20e-00c04f983e60")) IXMLDOMNotation IXMLDOMNotation; 
#line 139 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
typedef struct __declspec( novtable ) __declspec(uuid("2933bf8d-7b36-11d2-b20e-00c04f983e60")) IXMLDOMEntity IXMLDOMEntity; 
#line 145 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
typedef struct __declspec( novtable ) __declspec(uuid("2933bf8e-7b36-11d2-b20e-00c04f983e60")) IXMLDOMEntityReference IXMLDOMEntityReference; 
#line 151 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
typedef struct __declspec( novtable ) __declspec(uuid("3efaa426-272f-11d2-836f-0000f87a7782")) IXMLDOMParseError IXMLDOMParseError; 
#line 157 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
typedef struct __declspec( novtable ) __declspec(uuid("3efaa425-272f-11d2-836f-0000f87a7782")) IXTLRuntime IXTLRuntime; 
#line 163 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
typedef struct __declspec( novtable ) __declspec(uuid("3efaa427-272f-11d2-836f-0000f87a7782")) XMLDOMDocumentEvents XMLDOMDocumentEvents; 
#line 171 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
typedef class __declspec(uuid("2933bf90-7b36-11d2-b20e-00c04f983e60")) DOMDocument DOMDocument; 
#line 183 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
typedef class __declspec(uuid("2933bf91-7b36-11d2-b20e-00c04f983e60")) DOMFreeThreadedDocument DOMFreeThreadedDocument; 
#line 193 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
typedef struct __declspec( novtable ) __declspec(uuid("ed8c108d-4349-11d2-91a4-00c04f7969e8")) IXMLHttpRequest IXMLHttpRequest; 
#line 201 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
typedef class __declspec(uuid("ed8c108e-4349-11d2-91a4-00c04f7969e8")) XMLHTTPRequest XMLHTTPRequest; 
#line 211 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
typedef struct __declspec( novtable ) __declspec(uuid("310afa62-0575-11d2-9ca9-0060b0ec3d39")) IXMLDSOControl IXMLDSOControl; 
#line 219 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
typedef class __declspec(uuid("550dda30-0541-11d2-9ca9-0060b0ec3d39")) XMLDSOControl XMLDSOControl; 
#line 229 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
typedef struct __declspec( novtable ) __declspec(uuid("65725580-9b5d-11d0-9bfe-00c04fc99c8e")) IXMLElementCollection IXMLElementCollection; 
#line 235 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
typedef struct __declspec( novtable ) __declspec(uuid("f52e2b61-18a1-11d1-b105-00805f49916b")) IXMLDocument IXMLDocument; 
#line 241 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
typedef struct __declspec( novtable ) __declspec(uuid("2b8de2fe-8d2d-11d1-b2fc-00c04fd915a9")) IXMLDocument2 IXMLDocument2; 
#line 247 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
typedef struct __declspec( novtable ) __declspec(uuid("3f7f31ac-e15f-11d0-9c25-00c04fc99c8e")) IXMLElement IXMLElement; 
#line 253 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
typedef struct __declspec( novtable ) __declspec(uuid("2b8de2ff-8d2d-11d1-b2fc-00c04fd915a9")) IXMLElement2 IXMLElement2; 
#line 259 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
typedef struct __declspec( novtable ) __declspec(uuid("d4d4a0fc-3b73-11d1-b2b4-00c04fb92596")) IXMLAttribute IXMLAttribute; 
#line 265 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
typedef struct __declspec( novtable ) __declspec(uuid("948c5ad3-c58d-11d0-9c0b-00c04fc99c8e")) IXMLError IXMLError; 
#line 273 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
typedef class __declspec(uuid("cfc399af-d876-11d0-9c10-00c04fc99c8e")) XMLDocument XMLDocument; 
#line 17 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
#pragma warning( disable: 4049 )
#line 53 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00020405-0000-0000-c000-000000000046")) ICreateTypeInfo ICreateTypeInfo; 
#line 59 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("0002040e-0000-0000-c000-000000000046")) ICreateTypeInfo2 ICreateTypeInfo2; 
#line 65 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00020406-0000-0000-c000-000000000046")) ICreateTypeLib ICreateTypeLib; 
#line 71 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("0002040f-0000-0000-c000-000000000046")) ICreateTypeLib2 ICreateTypeLib2; 
#line 77 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00020400-0000-0000-c000-000000000046")) IDispatch IDispatch; 
#line 83 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00020404-0000-0000-c000-000000000046")) IEnumVARIANT IEnumVARIANT; 
#line 89 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00020403-0000-0000-c000-000000000046")) ITypeComp ITypeComp; 
#line 95 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00020401-0000-0000-c000-000000000046")) ITypeInfo ITypeInfo; 
#line 101 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00020412-0000-0000-c000-000000000046")) ITypeInfo2 ITypeInfo2; 
#line 107 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00020402-0000-0000-c000-000000000046")) ITypeLib ITypeLib; 
#line 113 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00020411-0000-0000-c000-000000000046")) ITypeLib2 ITypeLib2; 
#line 119 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00020410-0000-0000-c000-000000000046")) ITypeChangeEvents ITypeChangeEvents; 
#line 125 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("1cf2b120-547d-101b-8e65-08002b2bd119")) IErrorInfo IErrorInfo; 
#line 131 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("22f03340-547d-101b-8e65-08002b2bd119")) ICreateErrorInfo ICreateErrorInfo; 
#line 137 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("df0b3d60-548f-101b-8e65-08002b2bd119")) ISupportErrorInfo ISupportErrorInfo; 
#line 143 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("0000002e-0000-0000-c000-000000000046")) ITypeFactory ITypeFactory; 
#line 149 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("0000002d-0000-0000-c000-000000000046")) ITypeMarshal ITypeMarshal; 
#line 155 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("0000002f-0000-0000-c000-000000000046")) IRecordInfo IRecordInfo; 
#line 161 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("3127ca40-446e-11ce-8135-00aa004bb851")) IErrorLog IErrorLog; 
#line 167 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("55272a00-42cb-11ce-8135-00aa004bb851")) IPropertyBag IPropertyBag; 
#line 190 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
#pragma warning(push)
#line 192 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
#pragma warning(disable:4201)
#line 217 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec; 
#line 226
extern "C" { typedef CY CURRENCY; }
#line 232
extern "C" { typedef 
#line 228
struct tagSAFEARRAYBOUND { 

ULONG cElements; 
LONG lLbound; 
} SAFEARRAYBOUND; }

extern "C" { typedef tagSAFEARRAYBOUND *LPSAFEARRAYBOUND; }


extern "C" { typedef struct _wireVARIANT *wireVARIANT; }

extern "C" { typedef struct _wireBRECORD *wireBRECORD; }
#line 245
extern "C" { typedef 
#line 241
struct _wireSAFEARR_BSTR { 

ULONG Size; 
wireBSTR *aBstr; 
} SAFEARR_BSTR; }
#line 251
extern "C" { typedef 
#line 247
struct _wireSAFEARR_UNKNOWN { 

ULONG Size; 
IUnknown **apUnknown; 
} SAFEARR_UNKNOWN; }
#line 257
extern "C" { typedef 
#line 253
struct _wireSAFEARR_DISPATCH { 

ULONG Size; 
IDispatch **apDispatch; 
} SAFEARR_DISPATCH; }
#line 263
extern "C" { typedef 
#line 259
struct _wireSAFEARR_VARIANT { 

ULONG Size; 
wireVARIANT *aVariant; 
} SAFEARR_VARIANT; }
#line 269
extern "C" { typedef 
#line 265
struct _wireSAFEARR_BRECORD { 

ULONG Size; 
wireBRECORD *aRecord; 
} SAFEARR_BRECORD; }
#line 276
extern "C" { typedef 
#line 271
struct _wireSAFEARR_HAVEIID { 

ULONG Size; 
IUnknown **apUnknown; 
IID iid; 
} SAFEARR_HAVEIID; }
#line 291
extern "C" { typedef 
#line 279
enum tagSF_TYPE { 
SF_ERROR = 10, 
SF_I1 = 16, 
SF_I2 = 2, 
SF_I4, 
SF_I8 = 20, 
SF_BSTR = 8, 
SF_UNKNOWN = 13, 
SF_DISPATCH = 9, 
SF_VARIANT = 12, 
SF_RECORD = 36, 
SF_HAVEIID = 32781
} SF_TYPE; }
#line 309
extern "C" { typedef 
#line 293
struct _wireSAFEARRAY_UNION { 

ULONG sfType; 
union __MIDL_IOleAutomationTypes_0001 { 

SAFEARR_BSTR BstrStr; 
SAFEARR_UNKNOWN UnknownStr; 
SAFEARR_DISPATCH DispatchStr; 
SAFEARR_VARIANT VariantStr; 
SAFEARR_BRECORD RecordStr; 
SAFEARR_HAVEIID HaveIidStr; 
BYTE_SIZEDARR ByteStr; 
WORD_SIZEDARR WordStr; 
DWORD_SIZEDARR LongStr; 
HYPER_SIZEDARR HyperStr; 
} u; 
} SAFEARRAYUNION; }
#line 319
extern "C" { typedef 
#line 311
struct _wireSAFEARRAY { 

USHORT cDims; 
USHORT fFeatures; 
ULONG cbElements; 
ULONG cLocks; 
SAFEARRAYUNION uArrayStructs; 
SAFEARRAYBOUND rgsabound[1]; 
} *wireSAFEARRAY; }

extern "C" { typedef wireSAFEARRAY *wirePSAFEARRAY; }
#line 331
extern "C" { typedef 
#line 323
struct tagSAFEARRAY { 

USHORT cDims; 
USHORT fFeatures; 
ULONG cbElements; 
ULONG cLocks; 
PVOID pvData; 
SAFEARRAYBOUND rgsabound[1]; 
} SAFEARRAY; }

extern "C" { typedef SAFEARRAY *LPSAFEARRAY; }
#line 424 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" { typedef struct tagVARIANT VARIANT; }

extern "C" { struct tagVARIANT { 


union { 

struct { 
VARTYPE vt; 
WORD wReserved1; 
WORD wReserved2; 
WORD wReserved3; 

union { 
LONGLONG llVal; 
LONG lVal; 
BYTE bVal; 
SHORT iVal; 
FLOAT fltVal; 
DOUBLE dblVal; 
VARIANT_BOOL boolVal; 

SCODE scode; 
CY cyVal; 
DATE date; 
BSTR bstrVal; 
IUnknown *punkVal; 
IDispatch *pdispVal; 
SAFEARRAY *parray; 
BYTE *pbVal; 
SHORT *piVal; 
LONG *plVal; 
LONGLONG *pllVal; 
FLOAT *pfltVal; 
DOUBLE *pdblVal; 
VARIANT_BOOL *pboolVal; 

SCODE *pscode; 
CY *pcyVal; 
DATE *pdate; 
BSTR *pbstrVal; 
IUnknown **ppunkVal; 
IDispatch **ppdispVal; 
SAFEARRAY **pparray; 
VARIANT *pvarVal; 
PVOID byref; 
CHAR cVal; 
USHORT uiVal; 
ULONG ulVal; 
ULONGLONG ullVal; 
INT intVal; 
UINT uintVal; 
DECIMAL *pdecVal; 
CHAR *pcVal; 
USHORT *puiVal; 
ULONG *pulVal; 
ULONGLONG *pullVal; 
INT *pintVal; 
UINT *puintVal; 

struct { 
PVOID pvRecord; 
IRecordInfo *pRecInfo; 
}; 
}; 
}; 
DECIMAL decVal; 
}; 
}; }
extern "C" { typedef VARIANT *LPVARIANT; }

extern "C" { typedef VARIANT VARIANTARG; }

extern "C" { typedef VARIANT *LPVARIANTARG; }
#line 516 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" { struct _wireBRECORD { 

ULONG fFlags; 
ULONG clSize; 
IRecordInfo *pRecInfo; 
byte *pRecord; 
}; }
extern "C" { struct _wireVARIANT { 

DWORD clSize; 
DWORD rpcReserved; 
USHORT vt; 
USHORT wReserved1; 
USHORT wReserved2; 
USHORT wReserved3; 

union { 
LONGLONG llVal; 
LONG lVal; 
BYTE bVal; 
SHORT iVal; 
FLOAT fltVal; 
DOUBLE dblVal; 
VARIANT_BOOL boolVal; 
SCODE scode; 
CY cyVal; 
DATE date; 
wireBSTR bstrVal; 
IUnknown *punkVal; 
IDispatch *pdispVal; 
wirePSAFEARRAY parray; 
wireBRECORD brecVal; 
BYTE *pbVal; 
SHORT *piVal; 
LONG *plVal; 
LONGLONG *pllVal; 
FLOAT *pfltVal; 
DOUBLE *pdblVal; 
VARIANT_BOOL *pboolVal; 
SCODE *pscode; 
CY *pcyVal; 
DATE *pdate; 
wireBSTR *pbstrVal; 
IUnknown **ppunkVal; 
IDispatch **ppdispVal; 
wirePSAFEARRAY *pparray; 
wireVARIANT *pvarVal; 
CHAR cVal; 
USHORT uiVal; 
ULONG ulVal; 
ULONGLONG ullVal; 
INT intVal; 
UINT uintVal; 
DECIMAL decVal; 
DECIMAL *pdecVal; 
CHAR *pcVal; 
USHORT *puiVal; 
ULONG *pulVal; 
ULONGLONG *pullVal; 
INT *pintVal; 
UINT *puintVal; 


}; 
}; }
extern "C" { typedef LONG DISPID; }

extern "C" { typedef DISPID MEMBERID; }

extern "C" { typedef DWORD HREFTYPE; }
#line 598
extern "C" { typedef 
#line 588
enum tagTYPEKIND { 
TKIND_ENUM, 
TKIND_RECORD, 
TKIND_MODULE, 
TKIND_INTERFACE, 
TKIND_DISPATCH, 
TKIND_COCLASS, 
TKIND_ALIAS, 
TKIND_UNION, 
TKIND_MAX
} TYPEKIND; }
#line 610
extern "C" { typedef 
#line 600
struct tagTYPEDESC { 


union { 
tagTYPEDESC *lptdesc; 
struct tagARRAYDESC *lpadesc; 
HREFTYPE hreftype; 

}; 
VARTYPE vt; 
} TYPEDESC; }
#line 617
extern "C" { typedef 
#line 612
struct tagARRAYDESC { 

TYPEDESC tdescElem; 
USHORT cDims; 
SAFEARRAYBOUND rgbounds[1]; 
} ARRAYDESC; }
#line 623
extern "C" { typedef 
#line 619
struct tagPARAMDESCEX { 

ULONG cBytes; 
VARIANTARG varDefaultValue; 
} PARAMDESCEX; }

extern "C" { typedef tagPARAMDESCEX *LPPARAMDESCEX; }
#line 631
extern "C" { typedef 
#line 627
struct tagPARAMDESC { 

LPPARAMDESCEX pparamdescex; 
USHORT wParamFlags; 
} PARAMDESC; }

extern "C" { typedef tagPARAMDESC *LPPARAMDESC; }
#line 655
extern "C" { typedef 
#line 651
struct tagIDLDESC { 

ULONG_PTR dwReserved; 
USHORT wIDLFlags; 
} IDLDESC; }

extern "C" { typedef tagIDLDESC *LPIDLDESC; }
#line 686 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" { typedef 
#line 680
struct tagELEMDESC { 
TYPEDESC tdesc; 
union { 
IDLDESC idldesc; 
PARAMDESC paramdesc; 
}; 
} ELEMDESC; }extern "C" { typedef tagELEMDESC *LPELEMDESC; }
#line 710 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" { typedef 
#line 690
struct tagTYPEATTR { 

GUID guid; 
LCID lcid; 
DWORD dwReserved; 
MEMBERID memidConstructor; 
MEMBERID memidDestructor; 
LPOLESTR lpstrSchema; 
ULONG cbSizeInstance; 
TYPEKIND typekind; 
WORD cFuncs; 
WORD cVars; 
WORD cImplTypes; 
WORD cbSizeVft; 
WORD cbAlignment; 
WORD wTypeFlags; 
WORD wMajorVerNum; 
WORD wMinorVerNum; 
TYPEDESC tdescAlias; 
IDLDESC idldescType; 
} TYPEATTR; }

extern "C" { typedef tagTYPEATTR *LPTYPEATTR; }
#line 720
extern "C" { typedef 
#line 714
struct tagDISPPARAMS { 

VARIANTARG *rgvarg; 
DISPID *rgdispidNamedArgs; 
UINT cArgs; 
UINT cNamedArgs; 
} DISPPARAMS; }
#line 751 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" { typedef 
#line 741
struct tagEXCEPINFO { 
WORD wCode; 
WORD wReserved; 
BSTR bstrSource; 
BSTR bstrDescription; 
BSTR bstrHelpFile; 
DWORD dwHelpContext; 
PVOID pvReserved; 
HRESULT (__stdcall *pfnDeferredFillIn)(tagEXCEPINFO *); 
SCODE scode; 
} EXCEPINFO; }extern "C" { typedef tagEXCEPINFO *LPEXCEPINFO; }
#line 768 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" { typedef 
#line 756
enum tagCALLCONV { 
CC_FASTCALL, 
CC_CDECL, 
CC_MSCPASCAL, 
CC_PASCAL = 2, 
CC_MACPASCAL, 
CC_STDCALL, 
CC_FPFASTCALL, 
CC_SYSCALL, 
CC_MPWCDECL, 
CC_MPWPASCAL, 
CC_MAX
} CALLCONV; }
#line 777
extern "C" { typedef 
#line 771
enum tagFUNCKIND { 
FUNC_VIRTUAL, 
FUNC_PUREVIRTUAL, 
FUNC_NONVIRTUAL, 
FUNC_STATIC, 
FUNC_DISPATCH
} FUNCKIND; }
#line 785
extern "C" { typedef 
#line 780
enum tagINVOKEKIND { 
INVOKE_FUNC = 1, 
INVOKE_PROPERTYGET, 
INVOKE_PROPERTYPUT = 4, 
INVOKE_PROPERTYPUTREF = 8
} INVOKEKIND; }
#line 801
extern "C" { typedef 
#line 787
struct tagFUNCDESC { 

MEMBERID memid; 
SCODE *lprgscode; 
ELEMDESC *lprgelemdescParam; 
FUNCKIND funckind; 
INVOKEKIND invkind; 
CALLCONV callconv; 
SHORT cParams; 
SHORT cParamsOpt; 
SHORT oVft; 
SHORT cScodes; 
ELEMDESC elemdescFunc; 
WORD wFuncFlags; 
} FUNCDESC; }

extern "C" { typedef tagFUNCDESC *LPFUNCDESC; }
#line 811
extern "C" { typedef 
#line 806
enum tagVARKIND { 
VAR_PERINSTANCE, 
VAR_STATIC, 
VAR_CONST, 
VAR_DISPATCH
} VARKIND; }
#line 833
extern "C" { typedef 
#line 821
struct tagVARDESC { 

MEMBERID memid; 
LPOLESTR lpstrSchema; 

union { 
ULONG oInst; 
VARIANT *lpvarValue; 
}; 
ELEMDESC elemdescVar; 
WORD wVarFlags; 
VARKIND varkind; 
} VARDESC; }

extern "C" { typedef tagVARDESC *LPVARDESC; }
#line 854
extern "C" { typedef 
#line 838
enum tagTYPEFLAGS { 
TYPEFLAG_FAPPOBJECT = 1, 
TYPEFLAG_FCANCREATE, 
TYPEFLAG_FLICENSED = 4, 
TYPEFLAG_FPREDECLID = 8, 
TYPEFLAG_FHIDDEN = 16, 
TYPEFLAG_FCONTROL = 32, 
TYPEFLAG_FDUAL = 64, 
TYPEFLAG_FNONEXTENSIBLE = 128, 
TYPEFLAG_FOLEAUTOMATION = 256, 
TYPEFLAG_FRESTRICTED = 512, 
TYPEFLAG_FAGGREGATABLE = 1024, 
TYPEFLAG_FREPLACEABLE = 2048, 
TYPEFLAG_FDISPATCHABLE = 4096, 
TYPEFLAG_FREVERSEBIND = 8192, 
TYPEFLAG_FPROXY = 16384
} TYPEFLAGS; }
#line 871
extern "C" { typedef 
#line 857
enum tagFUNCFLAGS { 
FUNCFLAG_FRESTRICTED = 1, 
FUNCFLAG_FSOURCE, 
FUNCFLAG_FBINDABLE = 4, 
FUNCFLAG_FREQUESTEDIT = 8, 
FUNCFLAG_FDISPLAYBIND = 16, 
FUNCFLAG_FDEFAULTBIND = 32, 
FUNCFLAG_FHIDDEN = 64, 
FUNCFLAG_FUSESGETLASTERROR = 128, 
FUNCFLAG_FDEFAULTCOLLELEM = 256, 
FUNCFLAG_FUIDEFAULT = 512, 
FUNCFLAG_FNONBROWSABLE = 1024, 
FUNCFLAG_FREPLACEABLE = 2048, 
FUNCFLAG_FIMMEDIATEBIND = 4096
} FUNCFLAGS; }
#line 888
extern "C" { typedef 
#line 874
enum tagVARFLAGS { 
VARFLAG_FREADONLY = 1, 
VARFLAG_FSOURCE, 
VARFLAG_FBINDABLE = 4, 
VARFLAG_FREQUESTEDIT = 8, 
VARFLAG_FDISPLAYBIND = 16, 
VARFLAG_FDEFAULTBIND = 32, 
VARFLAG_FHIDDEN = 64, 
VARFLAG_FRESTRICTED = 128, 
VARFLAG_FDEFAULTCOLLELEM = 256, 
VARFLAG_FUIDEFAULT = 512, 
VARFLAG_FNONBROWSABLE = 1024, 
VARFLAG_FREPLACEABLE = 2048, 
VARFLAG_FIMMEDIATEBIND = 4096
} VARFLAGS; }
#line 895
extern "C" { typedef 
#line 890
struct tagCLEANLOCALSTORAGE { 

IUnknown *pInterface; 
PVOID pStorage; 
DWORD flags; 
} CLEANLOCALSTORAGE; }
#line 901
extern "C" { typedef 
#line 897
struct tagCUSTDATAITEM { 

GUID guid; 
VARIANTARG varValue; 
} CUSTDATAITEM; }

extern "C" { typedef tagCUSTDATAITEM *LPCUSTDATAITEM; }
#line 909
extern "C" { typedef 
#line 905
struct tagCUSTDATA { 

DWORD cCustData; 
LPCUSTDATAITEM prgCustData; 
} CUSTDATA; }

extern "C" { typedef tagCUSTDATA *LPCUSTDATA; }



extern "C" RPC_IF_HANDLE IOleAutomationTypes_v1_0_c_ifspec; 
extern "C" RPC_IF_HANDLE IOleAutomationTypes_v1_0_s_ifspec; 
#line 925 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" { typedef ICreateTypeInfo *LPCREATETYPEINFO; }


extern "C" const IID IID_ICreateTypeInfo; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00020405-0000-0000-c000-000000000046")) ICreateTypeInfo : public IUnknown { 


virtual HRESULT __stdcall SetGuid(const GUID &) = 0; 


virtual HRESULT __stdcall SetTypeFlags(UINT) = 0; 


virtual HRESULT __stdcall SetDocString(LPOLESTR) = 0; 


virtual HRESULT __stdcall SetHelpContext(DWORD) = 0; 


virtual HRESULT __stdcall SetVersion(WORD, WORD) = 0; 



virtual HRESULT __stdcall AddRefTypeInfo(ITypeInfo *, HREFTYPE *) = 0; 



virtual HRESULT __stdcall AddFuncDesc(UINT, FUNCDESC *) = 0; 



virtual HRESULT __stdcall AddImplType(UINT, HREFTYPE) = 0; 



virtual HRESULT __stdcall SetImplTypeFlags(UINT, INT) = 0; 



virtual HRESULT __stdcall SetAlignment(WORD) = 0; 


virtual HRESULT __stdcall SetSchema(LPOLESTR) = 0; 


virtual HRESULT __stdcall AddVarDesc(UINT, VARDESC *) = 0; 



virtual HRESULT __stdcall SetFuncAndParamNames(UINT, LPOLESTR *, UINT) = 0; 




virtual HRESULT __stdcall SetVarName(UINT, LPOLESTR) = 0; 



virtual HRESULT __stdcall SetTypeDescAlias(TYPEDESC *) = 0; 


virtual HRESULT __stdcall DefineFuncAsDllEntry(UINT, LPOLESTR, LPOLESTR) = 0; 




virtual HRESULT __stdcall SetFuncDocString(UINT, LPOLESTR) = 0; 



virtual HRESULT __stdcall SetVarDocString(UINT, LPOLESTR) = 0; 



virtual HRESULT __stdcall SetFuncHelpContext(UINT, DWORD) = 0; 



virtual HRESULT __stdcall SetVarHelpContext(UINT, DWORD) = 0; 



virtual HRESULT __stdcall SetMops(UINT, BSTR) = 0; 



virtual HRESULT __stdcall SetTypeIdldesc(IDLDESC *) = 0; 


virtual HRESULT __stdcall LayOut() = 0; 

}; }
#line 1256 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" { typedef ICreateTypeInfo2 *LPCREATETYPEINFO2; }


extern "C" const IID IID_ICreateTypeInfo2; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("0002040e-0000-0000-c000-000000000046")) ICreateTypeInfo2 : public ICreateTypeInfo { 


virtual HRESULT __stdcall DeleteFuncDesc(UINT) = 0; 


virtual HRESULT __stdcall DeleteFuncDescByMemId(MEMBERID, INVOKEKIND) = 0; 



virtual HRESULT __stdcall DeleteVarDesc(UINT) = 0; 


virtual HRESULT __stdcall DeleteVarDescByMemId(MEMBERID) = 0; 


virtual HRESULT __stdcall DeleteImplType(UINT) = 0; 


virtual HRESULT __stdcall SetCustData(const GUID &, VARIANT *) = 0; 



virtual HRESULT __stdcall SetFuncCustData(UINT, const GUID &, VARIANT *) = 0; 




virtual HRESULT __stdcall SetParamCustData(UINT, UINT, const GUID &, VARIANT *) = 0; 
#line 1298
virtual HRESULT __stdcall SetVarCustData(UINT, const GUID &, VARIANT *) = 0; 




virtual HRESULT __stdcall SetImplTypeCustData(UINT, const GUID &, VARIANT *) = 0; 




virtual HRESULT __stdcall SetHelpStringContext(ULONG) = 0; 


virtual HRESULT __stdcall SetFuncHelpStringContext(UINT, ULONG) = 0; 



virtual HRESULT __stdcall SetVarHelpStringContext(UINT, ULONG) = 0; 



virtual HRESULT __stdcall Invalidate() = 0; 

virtual HRESULT __stdcall SetName(LPOLESTR) = 0; 


}; }
#line 1678 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" { typedef ICreateTypeLib *LPCREATETYPELIB; }


extern "C" const IID IID_ICreateTypeLib; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00020406-0000-0000-c000-000000000046")) ICreateTypeLib : public IUnknown { 


virtual HRESULT __stdcall CreateTypeInfo(LPOLESTR, TYPEKIND, ICreateTypeInfo **) = 0; 




virtual HRESULT __stdcall SetName(LPOLESTR) = 0; 


virtual HRESULT __stdcall SetVersion(WORD, WORD) = 0; 



virtual HRESULT __stdcall SetGuid(const GUID &) = 0; 


virtual HRESULT __stdcall SetDocString(LPOLESTR) = 0; 


virtual HRESULT __stdcall SetHelpFileName(LPOLESTR) = 0; 


virtual HRESULT __stdcall SetHelpContext(DWORD) = 0; 


virtual HRESULT __stdcall SetLcid(LCID) = 0; 


virtual HRESULT __stdcall SetLibFlags(UINT) = 0; 


virtual HRESULT __stdcall SaveAllChanges() = 0; 

}; }
#line 1853 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" { typedef ICreateTypeLib2 *LPCREATETYPELIB2; }


extern "C" const IID IID_ICreateTypeLib2; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("0002040f-0000-0000-c000-000000000046")) ICreateTypeLib2 : public ICreateTypeLib { 


virtual HRESULT __stdcall DeleteTypeInfo(LPOLESTR) = 0; 


virtual HRESULT __stdcall SetCustData(const GUID &, VARIANT *) = 0; 



virtual HRESULT __stdcall SetHelpStringContext(ULONG) = 0; 


virtual HRESULT __stdcall SetHelpStringDll(LPOLESTR) = 0; 


}; }
#line 2039 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" { typedef IDispatch *LPDISPATCH; }
#line 2073
extern "C" const IID IID_IDispatch; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00020400-0000-0000-c000-000000000046")) IDispatch : public IUnknown { 


virtual HRESULT __stdcall GetTypeInfoCount(UINT *) = 0; 


virtual HRESULT __stdcall GetTypeInfo(UINT, LCID, ITypeInfo **) = 0; 




virtual HRESULT __stdcall GetIDsOfNames(const IID &, LPOLESTR *, UINT, LCID, DISPID *) = 0; 
#line 2096
virtual HRESULT __stdcall Invoke(DISPID, const IID &, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *) = 0; 
#line 2106
}; }
#line 2197 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" { extern HRESULT __stdcall IDispatch_RemoteInvoke_Proxy(IDispatch *, DISPID, const IID &, LCID, DWORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *, UINT, UINT *, VARIANTARG *); } 
#line 2212
extern "C" { extern void __stdcall IDispatch_RemoteInvoke_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 2229 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" { typedef IEnumVARIANT *LPENUMVARIANT; }


extern "C" const IID IID_IEnumVARIANT; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00020404-0000-0000-c000-000000000046")) IEnumVARIANT : public IUnknown { 


virtual HRESULT __stdcall Next(ULONG, VARIANT *, ULONG *) = 0; 




virtual HRESULT __stdcall Skip(ULONG) = 0; 


virtual HRESULT __stdcall Reset() = 0; 

virtual HRESULT __stdcall Clone(struct IEnumVARIANT **) = 0; 


}; }
#line 2332 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" { extern HRESULT __stdcall IEnumVARIANT_RemoteNext_Proxy(IEnumVARIANT *, ULONG, VARIANT *, ULONG *); } 
#line 2339
extern "C" { extern void __stdcall IEnumVARIANT_RemoteNext_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 2356 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" { typedef ITypeComp *LPTYPECOMP; }
#line 2366
extern "C" { typedef 
#line 2359
enum tagDESCKIND { 
DESCKIND_NONE, 
DESCKIND_FUNCDESC, 
DESCKIND_VARDESC, 
DESCKIND_TYPECOMP, 
DESCKIND_IMPLICITAPPOBJ, 
DESCKIND_MAX
} DESCKIND; }
#line 2373
extern "C" { typedef 
#line 2368
union tagBINDPTR { 

FUNCDESC *lpfuncdesc; 
VARDESC *lpvardesc; 
ITypeComp *lptcomp; 
} BINDPTR; }

extern "C" { typedef tagBINDPTR *LPBINDPTR; }


extern "C" const IID IID_ITypeComp; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00020403-0000-0000-c000-000000000046")) ITypeComp : public IUnknown { 


virtual HRESULT __stdcall Bind(LPOLESTR, ULONG, WORD, ITypeInfo **, DESCKIND *, BINDPTR *) = 0; 
#line 2394
virtual HRESULT __stdcall BindType(LPOLESTR, ULONG, ITypeInfo **, struct ITypeComp **) = 0; 
#line 2400
}; }
#line 2472 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" { extern HRESULT __stdcall ITypeComp_RemoteBind_Proxy(ITypeComp *, LPOLESTR, ULONG, WORD, ITypeInfo **, DESCKIND *, LPFUNCDESC *, LPVARDESC *, ITypeComp **, CLEANLOCALSTORAGE *); } 
#line 2485
extern "C" { extern void __stdcall ITypeComp_RemoteBind_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 2492
extern "C" { extern HRESULT __stdcall ITypeComp_RemoteBindType_Proxy(ITypeComp *, LPOLESTR, ULONG, ITypeInfo **); } 
#line 2499
extern "C" { extern void __stdcall ITypeComp_RemoteBindType_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 2516 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" { typedef ITypeInfo *LPTYPEINFO; }


extern "C" const IID IID_ITypeInfo; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00020401-0000-0000-c000-000000000046")) ITypeInfo : public IUnknown { 


virtual HRESULT __stdcall GetTypeAttr(TYPEATTR **) = 0; 


virtual HRESULT __stdcall GetTypeComp(ITypeComp **) = 0; 


virtual HRESULT __stdcall GetFuncDesc(UINT, FUNCDESC **) = 0; 



virtual HRESULT __stdcall GetVarDesc(UINT, VARDESC **) = 0; 



virtual HRESULT __stdcall GetNames(MEMBERID, BSTR *, UINT, UINT *) = 0; 
#line 2547
virtual HRESULT __stdcall GetRefTypeOfImplType(UINT, HREFTYPE *) = 0; 



virtual HRESULT __stdcall GetImplTypeFlags(UINT, INT *) = 0; 



virtual HRESULT __stdcall GetIDsOfNames(LPOLESTR *, UINT, MEMBERID *) = 0; 




virtual HRESULT __stdcall Invoke(PVOID, MEMBERID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *) = 0; 
#line 2569
virtual HRESULT __stdcall GetDocumentation(MEMBERID, BSTR *, BSTR *, DWORD *, BSTR *) = 0; 
#line 2576
virtual HRESULT __stdcall GetDllEntry(MEMBERID, INVOKEKIND, BSTR *, BSTR *, WORD *) = 0; 
#line 2583
virtual HRESULT __stdcall GetRefTypeInfo(HREFTYPE, struct ITypeInfo **) = 0; 



virtual HRESULT __stdcall AddressOfMember(MEMBERID, INVOKEKIND, PVOID *) = 0; 




virtual HRESULT __stdcall CreateInstance(IUnknown *, const IID &, PVOID *) = 0; 




virtual HRESULT __stdcall GetMops(MEMBERID, BSTR *) = 0; 



virtual HRESULT __stdcall GetContainingTypeLib(ITypeLib **, UINT *) = 0; 



virtual void __stdcall ReleaseTypeAttr(TYPEATTR *) = 0; 


virtual void __stdcall ReleaseFuncDesc(FUNCDESC *) = 0; 


virtual void __stdcall ReleaseVarDesc(VARDESC *) = 0; 


}; }
#line 2827 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" { extern HRESULT __stdcall ITypeInfo_RemoteGetTypeAttr_Proxy(ITypeInfo *, LPTYPEATTR *, CLEANLOCALSTORAGE *); } 
#line 2833
extern "C" { extern void __stdcall ITypeInfo_RemoteGetTypeAttr_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 2840
extern "C" { extern HRESULT __stdcall ITypeInfo_RemoteGetFuncDesc_Proxy(ITypeInfo *, UINT, LPFUNCDESC *, CLEANLOCALSTORAGE *); } 
#line 2847
extern "C" { extern void __stdcall ITypeInfo_RemoteGetFuncDesc_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 2854
extern "C" { extern HRESULT __stdcall ITypeInfo_RemoteGetVarDesc_Proxy(ITypeInfo *, UINT, LPVARDESC *, CLEANLOCALSTORAGE *); } 
#line 2861
extern "C" { extern void __stdcall ITypeInfo_RemoteGetVarDesc_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 2868
extern "C" { extern HRESULT __stdcall ITypeInfo_RemoteGetNames_Proxy(ITypeInfo *, MEMBERID, BSTR *, UINT, UINT *); } 
#line 2876
extern "C" { extern void __stdcall ITypeInfo_RemoteGetNames_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 2883
extern "C" { extern HRESULT __stdcall ITypeInfo_LocalGetIDsOfNames_Proxy(ITypeInfo *); } 



extern "C" { extern void __stdcall ITypeInfo_LocalGetIDsOfNames_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 2894
extern "C" { extern HRESULT __stdcall ITypeInfo_LocalInvoke_Proxy(ITypeInfo *); } 



extern "C" { extern void __stdcall ITypeInfo_LocalInvoke_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 2905
extern "C" { extern HRESULT __stdcall ITypeInfo_RemoteGetDocumentation_Proxy(ITypeInfo *, MEMBERID, DWORD, BSTR *, BSTR *, DWORD *, BSTR *); } 
#line 2915
extern "C" { extern void __stdcall ITypeInfo_RemoteGetDocumentation_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 2922
extern "C" { extern HRESULT __stdcall ITypeInfo_RemoteGetDllEntry_Proxy(ITypeInfo *, MEMBERID, INVOKEKIND, DWORD, BSTR *, BSTR *, WORD *); } 
#line 2932
extern "C" { extern void __stdcall ITypeInfo_RemoteGetDllEntry_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 2939
extern "C" { extern HRESULT __stdcall ITypeInfo_LocalAddressOfMember_Proxy(ITypeInfo *); } 



extern "C" { extern void __stdcall ITypeInfo_LocalAddressOfMember_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 2950
extern "C" { extern HRESULT __stdcall ITypeInfo_RemoteCreateInstance_Proxy(ITypeInfo *, const IID &, IUnknown **); } 
#line 2956
extern "C" { extern void __stdcall ITypeInfo_RemoteCreateInstance_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 2963
extern "C" { extern HRESULT __stdcall ITypeInfo_RemoteGetContainingTypeLib_Proxy(ITypeInfo *, ITypeLib **, UINT *); } 
#line 2969
extern "C" { extern void __stdcall ITypeInfo_RemoteGetContainingTypeLib_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 2976
extern "C" { extern HRESULT __stdcall ITypeInfo_LocalReleaseTypeAttr_Proxy(ITypeInfo *); } 



extern "C" { extern void __stdcall ITypeInfo_LocalReleaseTypeAttr_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 2987
extern "C" { extern HRESULT __stdcall ITypeInfo_LocalReleaseFuncDesc_Proxy(ITypeInfo *); } 



extern "C" { extern void __stdcall ITypeInfo_LocalReleaseFuncDesc_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 2998
extern "C" { extern HRESULT __stdcall ITypeInfo_LocalReleaseVarDesc_Proxy(ITypeInfo *); } 



extern "C" { extern void __stdcall ITypeInfo_LocalReleaseVarDesc_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 3019 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" { typedef ITypeInfo2 *LPTYPEINFO2; }


extern "C" const IID IID_ITypeInfo2; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00020412-0000-0000-c000-000000000046")) ITypeInfo2 : public ITypeInfo { 


virtual HRESULT __stdcall GetTypeKind(TYPEKIND *) = 0; 


virtual HRESULT __stdcall GetTypeFlags(ULONG *) = 0; 


virtual HRESULT __stdcall GetFuncIndexOfMemId(MEMBERID, INVOKEKIND, UINT *) = 0; 




virtual HRESULT __stdcall GetVarIndexOfMemId(MEMBERID, UINT *) = 0; 



virtual HRESULT __stdcall GetCustData(const GUID &, VARIANT *) = 0; 



virtual HRESULT __stdcall GetFuncCustData(UINT, const GUID &, VARIANT *) = 0; 




virtual HRESULT __stdcall GetParamCustData(UINT, UINT, const GUID &, VARIANT *) = 0; 
#line 3060
virtual HRESULT __stdcall GetVarCustData(UINT, const GUID &, VARIANT *) = 0; 




virtual HRESULT __stdcall GetImplTypeCustData(UINT, const GUID &, VARIANT *) = 0; 




virtual HRESULT __stdcall GetDocumentation2(MEMBERID, LCID, BSTR *, DWORD *, BSTR *) = 0; 
#line 3077
virtual HRESULT __stdcall GetAllCustData(CUSTDATA *) = 0; 


virtual HRESULT __stdcall GetAllFuncCustData(UINT, CUSTDATA *) = 0; 



virtual HRESULT __stdcall GetAllParamCustData(UINT, UINT, CUSTDATA *) = 0; 




virtual HRESULT __stdcall GetAllVarCustData(UINT, CUSTDATA *) = 0; 



virtual HRESULT __stdcall GetAllImplTypeCustData(UINT, CUSTDATA *) = 0; 



}; }
#line 3438 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" { extern HRESULT __stdcall ITypeInfo2_RemoteGetDocumentation2_Proxy(ITypeInfo2 *, MEMBERID, LCID, DWORD, BSTR *, DWORD *, BSTR *); } 
#line 3448
extern "C" { extern void __stdcall ITypeInfo2_RemoteGetDocumentation2_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 3471 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" { typedef 
#line 3466
enum tagSYSKIND { 
SYS_WIN16, 
SYS_WIN32, 
SYS_MAC, 
SYS_WIN64
} SYSKIND; }
#line 3479
extern "C" { typedef 
#line 3474
enum tagLIBFLAGS { 
LIBFLAG_FRESTRICTED = 1, 
LIBFLAG_FCONTROL, 
LIBFLAG_FHIDDEN = 4, 
LIBFLAG_FHASDISKIMAGE = 8
} LIBFLAGS; }

extern "C" { typedef ITypeLib *LPTYPELIB; }
#line 3491
extern "C" { typedef 
#line 3483
struct tagTLIBATTR { 

GUID guid; 
LCID lcid; 
SYSKIND syskind; 
WORD wMajorVerNum; 
WORD wMinorVerNum; 
WORD wLibFlags; 
} TLIBATTR; }

extern "C" { typedef tagTLIBATTR *LPTLIBATTR; }


extern "C" const IID IID_ITypeLib; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00020402-0000-0000-c000-000000000046")) ITypeLib : public IUnknown { 


virtual UINT __stdcall GetTypeInfoCount() = 0; 

virtual HRESULT __stdcall GetTypeInfo(UINT, ITypeInfo **) = 0; 



virtual HRESULT __stdcall GetTypeInfoType(UINT, TYPEKIND *) = 0; 



virtual HRESULT __stdcall GetTypeInfoOfGuid(const GUID &, ITypeInfo **) = 0; 



virtual HRESULT __stdcall GetLibAttr(TLIBATTR **) = 0; 


virtual HRESULT __stdcall GetTypeComp(ITypeComp **) = 0; 


virtual HRESULT __stdcall GetDocumentation(INT, BSTR *, BSTR *, DWORD *, BSTR *) = 0; 
#line 3531
virtual HRESULT __stdcall IsName(LPOLESTR, ULONG, BOOL *) = 0; 




virtual HRESULT __stdcall FindName(LPOLESTR, ULONG, ITypeInfo **, MEMBERID *, USHORT *) = 0; 
#line 3543
virtual void __stdcall ReleaseTLibAttr(TLIBATTR *) = 0; 


}; }
#line 3678 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" { extern HRESULT __stdcall ITypeLib_RemoteGetTypeInfoCount_Proxy(ITypeLib *, UINT *); } 




extern "C" { extern void __stdcall ITypeLib_RemoteGetTypeInfoCount_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 3690
extern "C" { extern HRESULT __stdcall ITypeLib_RemoteGetLibAttr_Proxy(ITypeLib *, LPTLIBATTR *, CLEANLOCALSTORAGE *); } 
#line 3696
extern "C" { extern void __stdcall ITypeLib_RemoteGetLibAttr_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 3703
extern "C" { extern HRESULT __stdcall ITypeLib_RemoteGetDocumentation_Proxy(ITypeLib *, INT, DWORD, BSTR *, BSTR *, DWORD *, BSTR *); } 
#line 3713
extern "C" { extern void __stdcall ITypeLib_RemoteGetDocumentation_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 3720
extern "C" { extern HRESULT __stdcall ITypeLib_RemoteIsName_Proxy(ITypeLib *, LPOLESTR, ULONG, BOOL *, BSTR *); } 
#line 3728
extern "C" { extern void __stdcall ITypeLib_RemoteIsName_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 3735
extern "C" { extern HRESULT __stdcall ITypeLib_RemoteFindName_Proxy(ITypeLib *, LPOLESTR, ULONG, ITypeInfo **, MEMBERID *, USHORT *, BSTR *); } 
#line 3745
extern "C" { extern void __stdcall ITypeLib_RemoteFindName_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 3752
extern "C" { extern HRESULT __stdcall ITypeLib_LocalReleaseTLibAttr_Proxy(ITypeLib *); } 



extern "C" { extern void __stdcall ITypeLib_LocalReleaseTLibAttr_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 3773 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" { typedef ITypeLib2 *LPTYPELIB2; }


extern "C" const IID IID_ITypeLib2; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00020411-0000-0000-c000-000000000046")) ITypeLib2 : public ITypeLib { 


virtual HRESULT __stdcall GetCustData(const GUID &, VARIANT *) = 0; 



virtual HRESULT __stdcall GetLibStatistics(ULONG *, ULONG *) = 0; 



virtual HRESULT __stdcall GetDocumentation2(INT, LCID, BSTR *, DWORD *, BSTR *) = 0; 
#line 3799
virtual HRESULT __stdcall GetAllCustData(CUSTDATA *) = 0; 


}; }
#line 3969 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" { extern HRESULT __stdcall ITypeLib2_RemoteGetLibStatistics_Proxy(ITypeLib2 *, ULONG *, ULONG *); } 
#line 3975
extern "C" { extern void __stdcall ITypeLib2_RemoteGetLibStatistics_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 3982
extern "C" { extern HRESULT __stdcall ITypeLib2_RemoteGetDocumentation2_Proxy(ITypeLib2 *, INT, LCID, DWORD, BSTR *, DWORD *, BSTR *); } 
#line 3992
extern "C" { extern void __stdcall ITypeLib2_RemoteGetDocumentation2_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 4009 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" { typedef ITypeChangeEvents *LPTYPECHANGEEVENTS; }
#line 4021
extern "C" { typedef 
#line 4012
enum tagCHANGEKIND { 
CHANGEKIND_ADDMEMBER, 
CHANGEKIND_DELETEMEMBER, 
CHANGEKIND_SETNAMES, 
CHANGEKIND_SETDOCUMENTATION, 
CHANGEKIND_GENERAL, 
CHANGEKIND_INVALIDATE, 
CHANGEKIND_CHANGEFAILED, 
CHANGEKIND_MAX
} CHANGEKIND; }


extern "C" const IID IID_ITypeChangeEvents; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00020410-0000-0000-c000-000000000046")) ITypeChangeEvents : public IUnknown { 


virtual HRESULT __stdcall RequestTypeChange(CHANGEKIND, ITypeInfo *, LPOLESTR, INT *) = 0; 
#line 4038
virtual HRESULT __stdcall AfterTypeChange(CHANGEKIND, ITypeInfo *, LPOLESTR) = 0; 




}; }
#line 4122 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" { typedef IErrorInfo *LPERRORINFO; }


extern "C" const IID IID_IErrorInfo; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("1cf2b120-547d-101b-8e65-08002b2bd119")) IErrorInfo : public IUnknown { 


virtual HRESULT __stdcall GetGUID(GUID *) = 0; 


virtual HRESULT __stdcall GetSource(BSTR *) = 0; 


virtual HRESULT __stdcall GetDescription(BSTR *) = 0; 


virtual HRESULT __stdcall GetHelpFile(BSTR *) = 0; 


virtual HRESULT __stdcall GetHelpContext(DWORD *) = 0; 


}; }
#line 4243 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" { typedef ICreateErrorInfo *LPCREATEERRORINFO; }


extern "C" const IID IID_ICreateErrorInfo; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("22f03340-547d-101b-8e65-08002b2bd119")) ICreateErrorInfo : public IUnknown { 


virtual HRESULT __stdcall SetGUID(const GUID &) = 0; 


virtual HRESULT __stdcall SetSource(LPOLESTR) = 0; 


virtual HRESULT __stdcall SetDescription(LPOLESTR) = 0; 


virtual HRESULT __stdcall SetHelpFile(LPOLESTR) = 0; 


virtual HRESULT __stdcall SetHelpContext(DWORD) = 0; 


}; }
#line 4364 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" { typedef ISupportErrorInfo *LPSUPPORTERRORINFO; }


extern "C" const IID IID_ISupportErrorInfo; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("df0b3d60-548f-101b-8e65-08002b2bd119")) ISupportErrorInfo : public IUnknown { 


virtual HRESULT __stdcall InterfaceSupportsErrorInfo(const IID &) = 0; 


}; }
#line 4446 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" const IID IID_ITypeFactory; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("0000002e-0000-0000-c000-000000000046")) ITypeFactory : public IUnknown { 


virtual HRESULT __stdcall CreateFromTypeInfo(ITypeInfo *, const IID &, IUnknown **) = 0; 




}; }
#line 4529 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" const IID IID_ITypeMarshal; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("0000002d-0000-0000-c000-000000000046")) ITypeMarshal : public IUnknown { 


virtual HRESULT __stdcall Size(PVOID, DWORD, PVOID, ULONG *) = 0; 
#line 4543
virtual HRESULT __stdcall Marshal(PVOID, DWORD, PVOID, ULONG, BYTE *, ULONG *) = 0; 
#line 4551
virtual HRESULT __stdcall Unmarshal(PVOID, DWORD, ULONG, BYTE *, ULONG *) = 0; 
#line 4558
virtual HRESULT __stdcall Free(PVOID) = 0; 


}; }
#line 4661 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" { typedef IRecordInfo *LPRECORDINFO; }


extern "C" const IID IID_IRecordInfo; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("0000002f-0000-0000-c000-000000000046")) IRecordInfo : public IUnknown { 


virtual HRESULT __stdcall RecordInit(PVOID) = 0; 


virtual HRESULT __stdcall RecordClear(PVOID) = 0; 


virtual HRESULT __stdcall RecordCopy(PVOID, PVOID) = 0; 



virtual HRESULT __stdcall GetGuid(GUID *) = 0; 


virtual HRESULT __stdcall GetName(BSTR *) = 0; 


virtual HRESULT __stdcall GetSize(ULONG *) = 0; 


virtual HRESULT __stdcall GetTypeInfo(ITypeInfo **) = 0; 


virtual HRESULT __stdcall GetField(PVOID, LPCOLESTR, VARIANT *) = 0; 




virtual HRESULT __stdcall GetFieldNoCopy(PVOID, LPCOLESTR, VARIANT *, PVOID *) = 0; 
#line 4705
virtual HRESULT __stdcall PutField(ULONG, PVOID, LPCOLESTR, VARIANT *) = 0; 
#line 4711
virtual HRESULT __stdcall PutFieldNoCopy(ULONG, PVOID, LPCOLESTR, VARIANT *) = 0; 
#line 4717
virtual HRESULT __stdcall GetFieldNames(ULONG *, BSTR *) = 0; 



virtual BOOL __stdcall IsMatchingType(struct IRecordInfo *) = 0; 


virtual PVOID __stdcall RecordCreate() = 0; 

virtual HRESULT __stdcall RecordCreateCopy(PVOID, PVOID *) = 0; 



virtual HRESULT __stdcall RecordDestroy(PVOID) = 0; 


}; }
#line 4918 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" { typedef IErrorLog *LPERRORLOG; }


extern "C" const IID IID_IErrorLog; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("3127ca40-446e-11ce-8135-00aa004bb851")) IErrorLog : public IUnknown { 


virtual HRESULT __stdcall AddError(LPCOLESTR, EXCEPINFO *) = 0; 



}; }
#line 5001 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" { typedef IPropertyBag *LPPROPERTYBAG; }


extern "C" const IID IID_IPropertyBag; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("55272a00-42cb-11ce-8135-00aa004bb851")) IPropertyBag : public IUnknown { 


virtual HRESULT __stdcall Read(LPCOLESTR, VARIANT *, IErrorLog *) = 0; 




virtual HRESULT __stdcall Write(LPCOLESTR, VARIANT *) = 0; 



}; }
#line 5088 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" { extern HRESULT __stdcall IPropertyBag_RemoteRead_Proxy(IPropertyBag *, LPCOLESTR, VARIANT *, IErrorLog *, DWORD, IUnknown *); } 
#line 5097
extern "C" { extern void __stdcall IPropertyBag_RemoteRead_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 5113 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
#pragma warning(pop)
#line 5120 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\oaidl.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0021_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0021_v0_0_s_ifspec; 



extern "C" { extern unsigned long __stdcall BSTR_UserSize(unsigned long *, unsigned long, BSTR *); } 
extern "C" { extern unsigned char *__stdcall BSTR_UserMarshal(unsigned long *, unsigned char *, BSTR *); } 
extern "C" { extern unsigned char *__stdcall BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR *); } 
extern "C" { extern void __stdcall BSTR_UserFree(unsigned long *, BSTR *); } 

extern "C" { extern unsigned long __stdcall CLEANLOCALSTORAGE_UserSize(unsigned long *, unsigned long, CLEANLOCALSTORAGE *); } 
extern "C" { extern unsigned char *__stdcall CLEANLOCALSTORAGE_UserMarshal(unsigned long *, unsigned char *, CLEANLOCALSTORAGE *); } 
extern "C" { extern unsigned char *__stdcall CLEANLOCALSTORAGE_UserUnmarshal(unsigned long *, unsigned char *, CLEANLOCALSTORAGE *); } 
extern "C" { extern void __stdcall CLEANLOCALSTORAGE_UserFree(unsigned long *, CLEANLOCALSTORAGE *); } 

extern "C" { extern unsigned long __stdcall VARIANT_UserSize(unsigned long *, unsigned long, VARIANT *); } 
extern "C" { extern unsigned char *__stdcall VARIANT_UserMarshal(unsigned long *, unsigned char *, VARIANT *); } 
extern "C" { extern unsigned char *__stdcall VARIANT_UserUnmarshal(unsigned long *, unsigned char *, VARIANT *); } 
extern "C" { extern void __stdcall VARIANT_UserFree(unsigned long *, VARIANT *); } 

extern "C" { extern unsigned long __stdcall BSTR_UserSize64(unsigned long *, unsigned long, BSTR *); } 
extern "C" { extern unsigned char *__stdcall BSTR_UserMarshal64(unsigned long *, unsigned char *, BSTR *); } 
extern "C" { extern unsigned char *__stdcall BSTR_UserUnmarshal64(unsigned long *, unsigned char *, BSTR *); } 
extern "C" { extern void __stdcall BSTR_UserFree64(unsigned long *, BSTR *); } 

extern "C" { extern unsigned long __stdcall CLEANLOCALSTORAGE_UserSize64(unsigned long *, unsigned long, CLEANLOCALSTORAGE *); } 
extern "C" { extern unsigned char *__stdcall CLEANLOCALSTORAGE_UserMarshal64(unsigned long *, unsigned char *, CLEANLOCALSTORAGE *); } 
extern "C" { extern unsigned char *__stdcall CLEANLOCALSTORAGE_UserUnmarshal64(unsigned long *, unsigned char *, CLEANLOCALSTORAGE *); } 
extern "C" { extern void __stdcall CLEANLOCALSTORAGE_UserFree64(unsigned long *, CLEANLOCALSTORAGE *); } 

extern "C" { extern unsigned long __stdcall VARIANT_UserSize64(unsigned long *, unsigned long, VARIANT *); } 
extern "C" { extern unsigned char *__stdcall VARIANT_UserMarshal64(unsigned long *, unsigned char *, VARIANT *); } 
extern "C" { extern unsigned char *__stdcall VARIANT_UserUnmarshal64(unsigned long *, unsigned char *, VARIANT *); } 
extern "C" { extern void __stdcall VARIANT_UserFree64(unsigned long *, VARIANT *); } 

extern "C" { extern HRESULT __stdcall IDispatch_Invoke_Proxy(IDispatch *, DISPID, const IID &, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *); } 
#line 5167
extern "C" { extern HRESULT __stdcall IDispatch_Invoke_Stub(IDispatch *, DISPID, const IID &, LCID, DWORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *, UINT, UINT *, VARIANTARG *); } 
#line 5181
extern "C" { extern HRESULT __stdcall IEnumVARIANT_Next_Proxy(IEnumVARIANT *, ULONG, VARIANT *, ULONG *); } 
#line 5188
extern "C" { extern HRESULT __stdcall IEnumVARIANT_Next_Stub(IEnumVARIANT *, ULONG, VARIANT *, ULONG *); } 
#line 5194
extern "C" { extern HRESULT __stdcall ITypeComp_Bind_Proxy(ITypeComp *, LPOLESTR, ULONG, WORD, ITypeInfo **, DESCKIND *, BINDPTR *); } 
#line 5204
extern "C" { extern HRESULT __stdcall ITypeComp_Bind_Stub(ITypeComp *, LPOLESTR, ULONG, WORD, ITypeInfo **, DESCKIND *, LPFUNCDESC *, LPVARDESC *, ITypeComp **, CLEANLOCALSTORAGE *); } 
#line 5216
extern "C" { extern HRESULT __stdcall ITypeComp_BindType_Proxy(ITypeComp *, LPOLESTR, ULONG, ITypeInfo **, ITypeComp **); } 
#line 5224
extern "C" { extern HRESULT __stdcall ITypeComp_BindType_Stub(ITypeComp *, LPOLESTR, ULONG, ITypeInfo **); } 
#line 5230
extern "C" { extern HRESULT __stdcall ITypeInfo_GetTypeAttr_Proxy(ITypeInfo *, TYPEATTR **); } 




extern "C" { extern HRESULT __stdcall ITypeInfo_GetTypeAttr_Stub(ITypeInfo *, LPTYPEATTR *, CLEANLOCALSTORAGE *); } 




extern "C" { extern HRESULT __stdcall ITypeInfo_GetFuncDesc_Proxy(ITypeInfo *, UINT, FUNCDESC **); } 
#line 5246
extern "C" { extern HRESULT __stdcall ITypeInfo_GetFuncDesc_Stub(ITypeInfo *, UINT, LPFUNCDESC *, CLEANLOCALSTORAGE *); } 
#line 5252
extern "C" { extern HRESULT __stdcall ITypeInfo_GetVarDesc_Proxy(ITypeInfo *, UINT, VARDESC **); } 
#line 5258
extern "C" { extern HRESULT __stdcall ITypeInfo_GetVarDesc_Stub(ITypeInfo *, UINT, LPVARDESC *, CLEANLOCALSTORAGE *); } 
#line 5264
extern "C" { extern HRESULT __stdcall ITypeInfo_GetNames_Proxy(ITypeInfo *, MEMBERID, BSTR *, UINT, UINT *); } 
#line 5272
extern "C" { extern HRESULT __stdcall ITypeInfo_GetNames_Stub(ITypeInfo *, MEMBERID, BSTR *, UINT, UINT *); } 
#line 5279
extern "C" { extern HRESULT __stdcall ITypeInfo_GetIDsOfNames_Proxy(ITypeInfo *, LPOLESTR *, UINT, MEMBERID *); } 
#line 5286
extern "C" { extern HRESULT __stdcall ITypeInfo_GetIDsOfNames_Stub(ITypeInfo *); } 


extern "C" { extern HRESULT __stdcall ITypeInfo_Invoke_Proxy(ITypeInfo *, PVOID, MEMBERID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *); } 
#line 5300
extern "C" { extern HRESULT __stdcall ITypeInfo_Invoke_Stub(ITypeInfo *); } 


extern "C" { extern HRESULT __stdcall ITypeInfo_GetDocumentation_Proxy(ITypeInfo *, MEMBERID, BSTR *, BSTR *, DWORD *, BSTR *); } 
#line 5312
extern "C" { extern HRESULT __stdcall ITypeInfo_GetDocumentation_Stub(ITypeInfo *, MEMBERID, DWORD, BSTR *, BSTR *, DWORD *, BSTR *); } 
#line 5321
extern "C" { extern HRESULT __stdcall ITypeInfo_GetDllEntry_Proxy(ITypeInfo *, MEMBERID, INVOKEKIND, BSTR *, BSTR *, WORD *); } 
#line 5330
extern "C" { extern HRESULT __stdcall ITypeInfo_GetDllEntry_Stub(ITypeInfo *, MEMBERID, INVOKEKIND, DWORD, BSTR *, BSTR *, WORD *); } 
#line 5339
extern "C" { extern HRESULT __stdcall ITypeInfo_AddressOfMember_Proxy(ITypeInfo *, MEMBERID, INVOKEKIND, PVOID *); } 
#line 5346
extern "C" { extern HRESULT __stdcall ITypeInfo_AddressOfMember_Stub(ITypeInfo *); } 


extern "C" { extern HRESULT __stdcall ITypeInfo_CreateInstance_Proxy(ITypeInfo *, IUnknown *, const IID &, PVOID *); } 
#line 5356
extern "C" { extern HRESULT __stdcall ITypeInfo_CreateInstance_Stub(ITypeInfo *, const IID &, IUnknown **); } 




extern "C" { extern HRESULT __stdcall ITypeInfo_GetContainingTypeLib_Proxy(ITypeInfo *, ITypeLib **, UINT *); } 
#line 5367
extern "C" { extern HRESULT __stdcall ITypeInfo_GetContainingTypeLib_Stub(ITypeInfo *, ITypeLib **, UINT *); } 




extern "C" { extern void __stdcall ITypeInfo_ReleaseTypeAttr_Proxy(ITypeInfo *, TYPEATTR *); } 




extern "C" { extern HRESULT __stdcall ITypeInfo_ReleaseTypeAttr_Stub(ITypeInfo *); } 


extern "C" { extern void __stdcall ITypeInfo_ReleaseFuncDesc_Proxy(ITypeInfo *, FUNCDESC *); } 




extern "C" { extern HRESULT __stdcall ITypeInfo_ReleaseFuncDesc_Stub(ITypeInfo *); } 


extern "C" { extern void __stdcall ITypeInfo_ReleaseVarDesc_Proxy(ITypeInfo *, VARDESC *); } 




extern "C" { extern HRESULT __stdcall ITypeInfo_ReleaseVarDesc_Stub(ITypeInfo *); } 


extern "C" { extern HRESULT __stdcall ITypeInfo2_GetDocumentation2_Proxy(ITypeInfo2 *, MEMBERID, LCID, BSTR *, DWORD *, BSTR *); } 
#line 5405
extern "C" { extern HRESULT __stdcall ITypeInfo2_GetDocumentation2_Stub(ITypeInfo2 *, MEMBERID, LCID, DWORD, BSTR *, DWORD *, BSTR *); } 
#line 5414
extern "C" { extern UINT __stdcall ITypeLib_GetTypeInfoCount_Proxy(ITypeLib *); } 



extern "C" { extern HRESULT __stdcall ITypeLib_GetTypeInfoCount_Stub(ITypeLib *, UINT *); } 



extern "C" { extern HRESULT __stdcall ITypeLib_GetLibAttr_Proxy(ITypeLib *, TLIBATTR **); } 




extern "C" { extern HRESULT __stdcall ITypeLib_GetLibAttr_Stub(ITypeLib *, LPTLIBATTR *, CLEANLOCALSTORAGE *); } 




extern "C" { extern HRESULT __stdcall ITypeLib_GetDocumentation_Proxy(ITypeLib *, INT, BSTR *, BSTR *, DWORD *, BSTR *); } 
#line 5441
extern "C" { extern HRESULT __stdcall ITypeLib_GetDocumentation_Stub(ITypeLib *, INT, DWORD, BSTR *, BSTR *, DWORD *, BSTR *); } 
#line 5450
extern "C" { extern HRESULT __stdcall ITypeLib_IsName_Proxy(ITypeLib *, LPOLESTR, ULONG, BOOL *); } 
#line 5457
extern "C" { extern HRESULT __stdcall ITypeLib_IsName_Stub(ITypeLib *, LPOLESTR, ULONG, BOOL *, BSTR *); } 
#line 5464
extern "C" { extern HRESULT __stdcall ITypeLib_FindName_Proxy(ITypeLib *, LPOLESTR, ULONG, ITypeInfo **, MEMBERID *, USHORT *); } 
#line 5473
extern "C" { extern HRESULT __stdcall ITypeLib_FindName_Stub(ITypeLib *, LPOLESTR, ULONG, ITypeInfo **, MEMBERID *, USHORT *, BSTR *); } 
#line 5482
extern "C" { extern void __stdcall ITypeLib_ReleaseTLibAttr_Proxy(ITypeLib *, TLIBATTR *); } 




extern "C" { extern HRESULT __stdcall ITypeLib_ReleaseTLibAttr_Stub(ITypeLib *); } 


extern "C" { extern HRESULT __stdcall ITypeLib2_GetLibStatistics_Proxy(ITypeLib2 *, ULONG *, ULONG *); } 
#line 5496
extern "C" { extern HRESULT __stdcall ITypeLib2_GetLibStatistics_Stub(ITypeLib2 *, ULONG *, ULONG *); } 




extern "C" { extern HRESULT __stdcall ITypeLib2_GetDocumentation2_Proxy(ITypeLib2 *, INT, LCID, BSTR *, DWORD *, BSTR *); } 
#line 5510
extern "C" { extern HRESULT __stdcall ITypeLib2_GetDocumentation2_Stub(ITypeLib2 *, INT, LCID, DWORD, BSTR *, DWORD *, BSTR *); } 
#line 5519
extern "C" { extern HRESULT __stdcall IPropertyBag_Read_Proxy(IPropertyBag *, LPCOLESTR, VARIANT *, IErrorLog *); } 
#line 5526
extern "C" { extern HRESULT __stdcall IPropertyBag_Read_Stub(IPropertyBag *, LPCOLESTR, VARIANT *, IErrorLog *, DWORD, IUnknown *); } 
#line 310 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
extern "C" { typedef 
#line 300
struct _xml_error { 

unsigned _nLine; 
BSTR _pchBuf; 
unsigned _cchBuf; 
unsigned _ich; 
BSTR _pszFound; 
BSTR _pszExpected; 
DWORD _reserved1; 
DWORD _reserved2; 
} XML_ERROR; }



extern "C" RPC_IF_HANDLE __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec; 
#line 363
extern "C" { typedef 
#line 349
enum tagDOMNodeType { 
NODE_INVALID, 
NODE_ELEMENT, 
NODE_ATTRIBUTE, 
NODE_TEXT, 
NODE_CDATA_SECTION, 
NODE_ENTITY_REFERENCE, 
NODE_ENTITY, 
NODE_PROCESSING_INSTRUCTION, 
NODE_COMMENT, 
NODE_DOCUMENT, 
NODE_DOCUMENT_TYPE, 
NODE_DOCUMENT_FRAGMENT, 
NODE_NOTATION
} DOMNodeType; }
#line 389
extern "C" { typedef 
#line 381
enum tagXMLEMEM_TYPE { 
XMLELEMTYPE_ELEMENT, 
XMLELEMTYPE_TEXT, 
XMLELEMTYPE_COMMENT, 
XMLELEMTYPE_DOCUMENT, 
XMLELEMTYPE_DTD, 
XMLELEMTYPE_PI, 
XMLELEMTYPE_OTHER
} XMLELEM_TYPE; }


extern "C" const IID LIBID_MSXML; 
#line 401
extern "C" const IID IID_IXMLDOMImplementation; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("2933bf8f-7b36-11d2-b20e-00c04f983e60")) IXMLDOMImplementation : public IDispatch { 


virtual HRESULT __stdcall hasFeature(BSTR, BSTR, VARIANT_BOOL *) = 0; 




}; }
#line 526 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
extern "C" const IID IID_IXMLDOMNode; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("2933bf80-7b36-11d2-b20e-00c04f983e60")) IXMLDOMNode : public IDispatch { 


virtual HRESULT __stdcall get_nodeName(BSTR *) = 0; 


virtual HRESULT __stdcall get_nodeValue(VARIANT *) = 0; 


virtual HRESULT __stdcall put_nodeValue(VARIANT) = 0; 


virtual HRESULT __stdcall get_nodeType(DOMNodeType *) = 0; 


virtual HRESULT __stdcall get_parentNode(struct IXMLDOMNode **) = 0; 


virtual HRESULT __stdcall get_childNodes(IXMLDOMNodeList **) = 0; 


virtual HRESULT __stdcall get_firstChild(struct IXMLDOMNode **) = 0; 


virtual HRESULT __stdcall get_lastChild(struct IXMLDOMNode **) = 0; 


virtual HRESULT __stdcall get_previousSibling(struct IXMLDOMNode **) = 0; 


virtual HRESULT __stdcall get_nextSibling(struct IXMLDOMNode **) = 0; 


virtual HRESULT __stdcall get_attributes(IXMLDOMNamedNodeMap **) = 0; 


virtual HRESULT __stdcall insertBefore(struct IXMLDOMNode *, VARIANT, struct IXMLDOMNode **) = 0; 




virtual HRESULT __stdcall replaceChild(struct IXMLDOMNode *, struct IXMLDOMNode *, struct IXMLDOMNode **) = 0; 




virtual HRESULT __stdcall removeChild(struct IXMLDOMNode *, struct IXMLDOMNode **) = 0; 



virtual HRESULT __stdcall appendChild(struct IXMLDOMNode *, struct IXMLDOMNode **) = 0; 



virtual HRESULT __stdcall hasChildNodes(VARIANT_BOOL *) = 0; 


virtual HRESULT __stdcall get_ownerDocument(IXMLDOMDocument **) = 0; 


virtual HRESULT __stdcall cloneNode(VARIANT_BOOL, struct IXMLDOMNode **) = 0; 



virtual HRESULT __stdcall get_nodeTypeString(BSTR *) = 0; 


virtual HRESULT __stdcall get_text(BSTR *) = 0; 


virtual HRESULT __stdcall put_text(BSTR) = 0; 


virtual HRESULT __stdcall get_specified(VARIANT_BOOL *) = 0; 


virtual HRESULT __stdcall get_definition(struct IXMLDOMNode **) = 0; 


virtual HRESULT __stdcall get_nodeTypedValue(VARIANT *) = 0; 


virtual HRESULT __stdcall put_nodeTypedValue(VARIANT) = 0; 


virtual HRESULT __stdcall get_dataType(VARIANT *) = 0; 


virtual HRESULT __stdcall put_dataType(BSTR) = 0; 


virtual HRESULT __stdcall get_xml(BSTR *) = 0; 


virtual HRESULT __stdcall transformNode(struct IXMLDOMNode *, BSTR *) = 0; 



virtual HRESULT __stdcall selectNodes(BSTR, IXMLDOMNodeList **) = 0; 



virtual HRESULT __stdcall selectSingleNode(BSTR, struct IXMLDOMNode **) = 0; 



virtual HRESULT __stdcall get_parsed(VARIANT_BOOL *) = 0; 


virtual HRESULT __stdcall get_namespaceURI(BSTR *) = 0; 


virtual HRESULT __stdcall get_prefix(BSTR *) = 0; 


virtual HRESULT __stdcall get_baseName(BSTR *) = 0; 


virtual HRESULT __stdcall transformNodeToObject(struct IXMLDOMNode *, VARIANT) = 0; 



}; }
#line 1019 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
extern "C" const IID IID_IXMLDOMDocumentFragment; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("3efaa413-272f-11d2-836f-0000f87a7782")) IXMLDOMDocumentFragment : public IXMLDOMNode { 


}; }
#line 1394 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
extern "C" const IID IID_IXMLDOMDocument; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("2933bf81-7b36-11d2-b20e-00c04f983e60")) IXMLDOMDocument : public IXMLDOMNode { 


virtual HRESULT __stdcall get_doctype(IXMLDOMDocumentType **) = 0; 


virtual HRESULT __stdcall get_implementation(IXMLDOMImplementation **) = 0; 


virtual HRESULT __stdcall get_documentElement(IXMLDOMElement **) = 0; 


virtual HRESULT __stdcall putref_documentElement(IXMLDOMElement *) = 0; 


virtual HRESULT __stdcall createElement(BSTR, IXMLDOMElement **) = 0; 



virtual HRESULT __stdcall createDocumentFragment(IXMLDOMDocumentFragment **) = 0; 


virtual HRESULT __stdcall createTextNode(BSTR, IXMLDOMText **) = 0; 



virtual HRESULT __stdcall createComment(BSTR, IXMLDOMComment **) = 0; 



virtual HRESULT __stdcall createCDATASection(BSTR, IXMLDOMCDATASection **) = 0; 



virtual HRESULT __stdcall createProcessingInstruction(BSTR, BSTR, IXMLDOMProcessingInstruction **) = 0; 




virtual HRESULT __stdcall createAttribute(BSTR, IXMLDOMAttribute **) = 0; 



virtual HRESULT __stdcall createEntityReference(BSTR, IXMLDOMEntityReference **) = 0; 



virtual HRESULT __stdcall getElementsByTagName(BSTR, IXMLDOMNodeList **) = 0; 



virtual HRESULT __stdcall createNode(VARIANT, BSTR, BSTR, IXMLDOMNode **) = 0; 
#line 1456
virtual HRESULT __stdcall nodeFromID(BSTR, IXMLDOMNode **) = 0; 



virtual HRESULT __stdcall load(VARIANT, VARIANT_BOOL *) = 0; 



virtual HRESULT __stdcall get_readyState(long *) = 0; 


virtual HRESULT __stdcall get_parseError(IXMLDOMParseError **) = 0; 


virtual HRESULT __stdcall get_url(BSTR *) = 0; 


virtual HRESULT __stdcall get_async(VARIANT_BOOL *) = 0; 


virtual HRESULT __stdcall put_async(VARIANT_BOOL) = 0; 


virtual HRESULT __stdcall abort() = 0; 

virtual HRESULT __stdcall loadXML(BSTR, VARIANT_BOOL *) = 0; 



virtual HRESULT __stdcall save(VARIANT) = 0; 


virtual HRESULT __stdcall get_validateOnParse(VARIANT_BOOL *) = 0; 


virtual HRESULT __stdcall put_validateOnParse(VARIANT_BOOL) = 0; 


virtual HRESULT __stdcall get_resolveExternals(VARIANT_BOOL *) = 0; 


virtual HRESULT __stdcall put_resolveExternals(VARIANT_BOOL) = 0; 


virtual HRESULT __stdcall get_preserveWhiteSpace(VARIANT_BOOL *) = 0; 


virtual HRESULT __stdcall put_preserveWhiteSpace(VARIANT_BOOL) = 0; 


virtual HRESULT __stdcall put_onreadystatechange(VARIANT) = 0; 


virtual HRESULT __stdcall put_ondataavailable(VARIANT) = 0; 


virtual HRESULT __stdcall put_ontransformnode(VARIANT) = 0; 


}; }
#line 2127 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
extern "C" const IID IID_IXMLDOMNodeList; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("2933bf82-7b36-11d2-b20e-00c04f983e60")) IXMLDOMNodeList : public IDispatch { 


virtual HRESULT __stdcall get_item(long, IXMLDOMNode **) = 0; 



virtual HRESULT __stdcall get_length(long *) = 0; 


virtual HRESULT __stdcall nextNode(IXMLDOMNode **) = 0; 


virtual HRESULT __stdcall reset() = 0; 

virtual HRESULT __stdcall get__newEnum(IUnknown **) = 0; 


}; }
#line 2288 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
extern "C" const IID IID_IXMLDOMNamedNodeMap; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("2933bf83-7b36-11d2-b20e-00c04f983e60")) IXMLDOMNamedNodeMap : public IDispatch { 


virtual HRESULT __stdcall getNamedItem(BSTR, IXMLDOMNode **) = 0; 



virtual HRESULT __stdcall setNamedItem(IXMLDOMNode *, IXMLDOMNode **) = 0; 



virtual HRESULT __stdcall removeNamedItem(BSTR, IXMLDOMNode **) = 0; 



virtual HRESULT __stdcall get_item(long, IXMLDOMNode **) = 0; 



virtual HRESULT __stdcall get_length(long *) = 0; 


virtual HRESULT __stdcall getQualifiedItem(BSTR, BSTR, IXMLDOMNode **) = 0; 




virtual HRESULT __stdcall removeQualifiedItem(BSTR, BSTR, IXMLDOMNode **) = 0; 




virtual HRESULT __stdcall nextNode(IXMLDOMNode **) = 0; 


virtual HRESULT __stdcall reset() = 0; 

virtual HRESULT __stdcall get__newEnum(IUnknown **) = 0; 


}; }
#line 2513 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
extern "C" const IID IID_IXMLDOMCharacterData; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("2933bf84-7b36-11d2-b20e-00c04f983e60")) IXMLDOMCharacterData : public IXMLDOMNode { 


virtual HRESULT __stdcall get_data(BSTR *) = 0; 


virtual HRESULT __stdcall put_data(BSTR) = 0; 


virtual HRESULT __stdcall get_length(long *) = 0; 


virtual HRESULT __stdcall substringData(long, long, BSTR *) = 0; 




virtual HRESULT __stdcall appendData(BSTR) = 0; 


virtual HRESULT __stdcall insertData(long, BSTR) = 0; 



virtual HRESULT __stdcall deleteData(long, long) = 0; 



virtual HRESULT __stdcall replaceData(long, long, BSTR) = 0; 




}; }
#line 2980 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
extern "C" const IID IID_IXMLDOMAttribute; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("2933bf85-7b36-11d2-b20e-00c04f983e60")) IXMLDOMAttribute : public IXMLDOMNode { 


virtual HRESULT __stdcall get_name(BSTR *) = 0; 


virtual HRESULT __stdcall get_value(VARIANT *) = 0; 


virtual HRESULT __stdcall put_value(VARIANT) = 0; 


}; }
#line 3385 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
extern "C" const IID IID_IXMLDOMElement; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("2933bf86-7b36-11d2-b20e-00c04f983e60")) IXMLDOMElement : public IXMLDOMNode { 


virtual HRESULT __stdcall get_tagName(BSTR *) = 0; 


virtual HRESULT __stdcall getAttribute(BSTR, VARIANT *) = 0; 



virtual HRESULT __stdcall setAttribute(BSTR, VARIANT) = 0; 



virtual HRESULT __stdcall removeAttribute(BSTR) = 0; 


virtual HRESULT __stdcall getAttributeNode(BSTR, IXMLDOMAttribute **) = 0; 



virtual HRESULT __stdcall setAttributeNode(IXMLDOMAttribute *, IXMLDOMAttribute **) = 0; 



virtual HRESULT __stdcall removeAttributeNode(IXMLDOMAttribute *, IXMLDOMAttribute **) = 0; 



virtual HRESULT __stdcall getElementsByTagName(BSTR, IXMLDOMNodeList **) = 0; 



virtual HRESULT __stdcall normalize() = 0; 

}; }
#line 3860 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
extern "C" const IID IID_IXMLDOMText; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("2933bf87-7b36-11d2-b20e-00c04f983e60")) IXMLDOMText : public IXMLDOMCharacterData { 


virtual HRESULT __stdcall splitText(long, struct IXMLDOMText **) = 0; 



}; }
#line 4310 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
extern "C" const IID IID_IXMLDOMComment; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("2933bf88-7b36-11d2-b20e-00c04f983e60")) IXMLDOMComment : public IXMLDOMCharacterData { 


}; }
#line 4748 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
extern "C" const IID IID_IXMLDOMProcessingInstruction; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("2933bf89-7b36-11d2-b20e-00c04f983e60")) IXMLDOMProcessingInstruction : public IXMLDOMNode { 


virtual HRESULT __stdcall get_target(BSTR *) = 0; 


virtual HRESULT __stdcall get_data(BSTR *) = 0; 


virtual HRESULT __stdcall put_data(BSTR) = 0; 


}; }
#line 5153 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
extern "C" const IID IID_IXMLDOMCDATASection; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("2933bf8a-7b36-11d2-b20e-00c04f983e60")) IXMLDOMCDATASection : public IXMLDOMText { 


}; }
#line 5600 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
extern "C" const IID IID_IXMLDOMDocumentType; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("2933bf8b-7b36-11d2-b20e-00c04f983e60")) IXMLDOMDocumentType : public IXMLDOMNode { 


virtual HRESULT __stdcall get_name(BSTR *) = 0; 


virtual HRESULT __stdcall get_entities(IXMLDOMNamedNodeMap **) = 0; 


virtual HRESULT __stdcall get_notations(IXMLDOMNamedNodeMap **) = 0; 


}; }
#line 6005 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
extern "C" const IID IID_IXMLDOMNotation; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("2933bf8c-7b36-11d2-b20e-00c04f983e60")) IXMLDOMNotation : public IXMLDOMNode { 


virtual HRESULT __stdcall get_publicId(VARIANT *) = 0; 


virtual HRESULT __stdcall get_systemId(VARIANT *) = 0; 


}; }
#line 6400 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
extern "C" const IID IID_IXMLDOMEntity; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("2933bf8d-7b36-11d2-b20e-00c04f983e60")) IXMLDOMEntity : public IXMLDOMNode { 


virtual HRESULT __stdcall get_publicId(VARIANT *) = 0; 


virtual HRESULT __stdcall get_systemId(VARIANT *) = 0; 


virtual HRESULT __stdcall get_notationName(BSTR *) = 0; 


}; }
#line 6805 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
extern "C" const IID IID_IXMLDOMEntityReference; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("2933bf8e-7b36-11d2-b20e-00c04f983e60")) IXMLDOMEntityReference : public IXMLDOMNode { 


}; }
#line 7180 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
extern "C" const IID IID_IXMLDOMParseError; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("3efaa426-272f-11d2-836f-0000f87a7782")) IXMLDOMParseError : public IDispatch { 


virtual HRESULT __stdcall get_errorCode(long *) = 0; 


virtual HRESULT __stdcall get_url(BSTR *) = 0; 


virtual HRESULT __stdcall get_reason(BSTR *) = 0; 


virtual HRESULT __stdcall get_srcText(BSTR *) = 0; 


virtual HRESULT __stdcall get_line(long *) = 0; 


virtual HRESULT __stdcall get_linepos(long *) = 0; 


virtual HRESULT __stdcall get_filepos(long *) = 0; 


}; }
#line 7361 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
extern "C" const IID IID_IXTLRuntime; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("3efaa425-272f-11d2-836f-0000f87a7782")) IXTLRuntime : public IXMLDOMNode { 


virtual HRESULT __stdcall uniqueID(IXMLDOMNode *, long *) = 0; 



virtual HRESULT __stdcall depth(IXMLDOMNode *, long *) = 0; 



virtual HRESULT __stdcall childNumber(IXMLDOMNode *, long *) = 0; 



virtual HRESULT __stdcall ancestorChildNumber(BSTR, IXMLDOMNode *, long *) = 0; 




virtual HRESULT __stdcall absoluteChildNumber(IXMLDOMNode *, long *) = 0; 



virtual HRESULT __stdcall formatIndex(long, BSTR, BSTR *) = 0; 




virtual HRESULT __stdcall formatNumber(double, BSTR, BSTR *) = 0; 




virtual HRESULT __stdcall formatDate(VARIANT, BSTR, VARIANT, BSTR *) = 0; 
#line 7406
virtual HRESULT __stdcall formatTime(VARIANT, BSTR, VARIANT, BSTR *) = 0; 
#line 7412
}; }
#line 7858 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
extern "C" const IID DIID_XMLDOMDocumentEvents; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("3efaa427-272f-11d2-836f-0000f87a7782")) XMLDOMDocumentEvents : public IDispatch { 

}; }
#line 7958 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
extern "C" const CLSID CLSID_DOMDocument; 




class DOMDocument; 
#line 7966 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
extern "C" const CLSID CLSID_DOMFreeThreadedDocument; 




class DOMFreeThreadedDocument; 
#line 7981 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
extern "C" const IID IID_IXMLHttpRequest; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("ed8c108d-4349-11d2-91a4-00c04f7969e8")) IXMLHttpRequest : public IDispatch { 


virtual HRESULT __stdcall open(BSTR, BSTR, VARIANT, VARIANT, VARIANT) = 0; 
#line 7996
virtual HRESULT __stdcall setRequestHeader(BSTR, BSTR) = 0; 



virtual HRESULT __stdcall getResponseHeader(BSTR, BSTR *) = 0; 



virtual HRESULT __stdcall getAllResponseHeaders(BSTR *) = 0; 


virtual HRESULT __stdcall send(VARIANT) = 0; 


virtual HRESULT __stdcall abort() = 0; 

virtual HRESULT __stdcall get_status(long *) = 0; 


virtual HRESULT __stdcall get_statusText(BSTR *) = 0; 


virtual HRESULT __stdcall get_responseXML(IDispatch **) = 0; 


virtual HRESULT __stdcall get_responseText(BSTR *) = 0; 


virtual HRESULT __stdcall get_responseBody(VARIANT *) = 0; 


virtual HRESULT __stdcall get_responseStream(VARIANT *) = 0; 


virtual HRESULT __stdcall get_readyState(long *) = 0; 


virtual HRESULT __stdcall put_onreadystatechange(IDispatch *) = 0; 


}; }
#line 8235 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
extern "C" const CLSID CLSID_XMLHTTPRequest; 




class XMLHTTPRequest; 
#line 8250 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
extern "C" const IID IID_IXMLDSOControl; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("310afa62-0575-11d2-9ca9-0060b0ec3d39")) IXMLDSOControl : public IDispatch { 


virtual HRESULT __stdcall get_XMLDocument(IXMLDOMDocument **) = 0; 


virtual HRESULT __stdcall put_XMLDocument(IXMLDOMDocument *) = 0; 


virtual HRESULT __stdcall get_JavaDSOCompatible(BOOL *) = 0; 


virtual HRESULT __stdcall put_JavaDSOCompatible(BOOL) = 0; 


virtual HRESULT __stdcall get_readyState(long *) = 0; 


}; }
#line 8404 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
extern "C" const CLSID CLSID_XMLDSOControl; 




class XMLDSOControl; 
#line 8419 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
extern "C" const IID IID_IXMLElementCollection; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("65725580-9b5d-11d0-9bfe-00c04fc99c8e")) IXMLElementCollection : public IDispatch { 


virtual HRESULT __stdcall put_length(long) = 0; 


virtual HRESULT __stdcall get_length(long *) = 0; 


virtual HRESULT __stdcall get__newEnum(IUnknown **) = 0; 


virtual HRESULT __stdcall item(VARIANT, VARIANT, IDispatch **) = 0; 




}; }
#line 8574 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
extern "C" const IID IID_IXMLDocument; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("f52e2b61-18a1-11d1-b105-00805f49916b")) IXMLDocument : public IDispatch { 


virtual HRESULT __stdcall get_root(IXMLElement **) = 0; 


virtual HRESULT __stdcall get_fileSize(BSTR *) = 0; 


virtual HRESULT __stdcall get_fileModifiedDate(BSTR *) = 0; 


virtual HRESULT __stdcall get_fileUpdatedDate(BSTR *) = 0; 


virtual HRESULT __stdcall get_URL(BSTR *) = 0; 


virtual HRESULT __stdcall put_URL(BSTR) = 0; 


virtual HRESULT __stdcall get_mimeType(BSTR *) = 0; 


virtual HRESULT __stdcall get_readyState(long *) = 0; 


virtual HRESULT __stdcall get_charset(BSTR *) = 0; 


virtual HRESULT __stdcall put_charset(BSTR) = 0; 


virtual HRESULT __stdcall get_version(BSTR *) = 0; 


virtual HRESULT __stdcall get_doctype(BSTR *) = 0; 


virtual HRESULT __stdcall get_dtdURL(BSTR *) = 0; 


virtual HRESULT __stdcall createElement(VARIANT, VARIANT, IXMLElement **) = 0; 




}; }
#line 8829 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
extern "C" const IID IID_IXMLDocument2; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("2b8de2fe-8d2d-11d1-b2fc-00c04fd915a9")) IXMLDocument2 : public IDispatch { 


virtual HRESULT __stdcall get_root(IXMLElement2 **) = 0; 


virtual HRESULT __stdcall get_fileSize(BSTR *) = 0; 


virtual HRESULT __stdcall get_fileModifiedDate(BSTR *) = 0; 


virtual HRESULT __stdcall get_fileUpdatedDate(BSTR *) = 0; 


virtual HRESULT __stdcall get_URL(BSTR *) = 0; 


virtual HRESULT __stdcall put_URL(BSTR) = 0; 


virtual HRESULT __stdcall get_mimeType(BSTR *) = 0; 


virtual HRESULT __stdcall get_readyState(long *) = 0; 


virtual HRESULT __stdcall get_charset(BSTR *) = 0; 


virtual HRESULT __stdcall put_charset(BSTR) = 0; 


virtual HRESULT __stdcall get_version(BSTR *) = 0; 


virtual HRESULT __stdcall get_doctype(BSTR *) = 0; 


virtual HRESULT __stdcall get_dtdURL(BSTR *) = 0; 


virtual HRESULT __stdcall createElement(VARIANT, VARIANT, IXMLElement2 **) = 0; 




virtual HRESULT __stdcall get_async(VARIANT_BOOL *) = 0; 


virtual HRESULT __stdcall put_async(VARIANT_BOOL) = 0; 


}; }
#line 9104 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
extern "C" const IID IID_IXMLElement; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("3f7f31ac-e15f-11d0-9c25-00c04fc99c8e")) IXMLElement : public IDispatch { 


virtual HRESULT __stdcall get_tagName(BSTR *) = 0; 


virtual HRESULT __stdcall put_tagName(BSTR) = 0; 


virtual HRESULT __stdcall get_parent(struct IXMLElement **) = 0; 


virtual HRESULT __stdcall setAttribute(BSTR, VARIANT) = 0; 



virtual HRESULT __stdcall getAttribute(BSTR, VARIANT *) = 0; 



virtual HRESULT __stdcall removeAttribute(BSTR) = 0; 


virtual HRESULT __stdcall get_children(IXMLElementCollection **) = 0; 


virtual HRESULT __stdcall get_type(long *) = 0; 


virtual HRESULT __stdcall get_text(BSTR *) = 0; 


virtual HRESULT __stdcall put_text(BSTR) = 0; 


virtual HRESULT __stdcall addChild(struct IXMLElement *, long, long) = 0; 




virtual HRESULT __stdcall removeChild(struct IXMLElement *) = 0; 


}; }
#line 9343 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
extern "C" const IID IID_IXMLElement2; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("2b8de2ff-8d2d-11d1-b2fc-00c04fd915a9")) IXMLElement2 : public IDispatch { 


virtual HRESULT __stdcall get_tagName(BSTR *) = 0; 


virtual HRESULT __stdcall put_tagName(BSTR) = 0; 


virtual HRESULT __stdcall get_parent(struct IXMLElement2 **) = 0; 


virtual HRESULT __stdcall setAttribute(BSTR, VARIANT) = 0; 



virtual HRESULT __stdcall getAttribute(BSTR, VARIANT *) = 0; 



virtual HRESULT __stdcall removeAttribute(BSTR) = 0; 


virtual HRESULT __stdcall get_children(IXMLElementCollection **) = 0; 


virtual HRESULT __stdcall get_type(long *) = 0; 


virtual HRESULT __stdcall get_text(BSTR *) = 0; 


virtual HRESULT __stdcall put_text(BSTR) = 0; 


virtual HRESULT __stdcall addChild(struct IXMLElement2 *, long, long) = 0; 




virtual HRESULT __stdcall removeChild(struct IXMLElement2 *) = 0; 


virtual HRESULT __stdcall get_attributes(IXMLElementCollection **) = 0; 


}; }
#line 9592 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
extern "C" const IID IID_IXMLAttribute; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("d4d4a0fc-3b73-11d1-b2b4-00c04fb92596")) IXMLAttribute : public IDispatch { 


virtual HRESULT __stdcall get_name(BSTR *) = 0; 


virtual HRESULT __stdcall get_value(BSTR *) = 0; 


}; }
#line 9723 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
extern "C" const IID IID_IXMLError; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("948c5ad3-c58d-11d0-9c0b-00c04fc99c8e")) IXMLError : public IUnknown { 


virtual HRESULT __stdcall GetErrorInfo(XML_ERROR *) = 0; 


}; }
#line 9795 "c:\\program files\\microsoft sdks\\windows\\v6.0a\\include\\msxml.h"
extern "C" const CLSID CLSID_XMLDocument; 




class XMLDocument; 
#line 352 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
#pragma comment(lib,"uuid.lib")
#line 369
extern "C" const IID CLSID_SBS_StdURLMoniker; 
extern "C" const IID CLSID_SBS_HttpProtocol; 
extern "C" const IID CLSID_SBS_FtpProtocol; 
extern "C" const IID CLSID_SBS_GopherProtocol; 
extern "C" const IID CLSID_SBS_HttpSProtocol; 
extern "C" const IID CLSID_SBS_FileProtocol; 
extern "C" const IID CLSID_SBS_MkProtocol; 
extern "C" const IID CLSID_SBS_UrlMkBindCtx; 
extern "C" const IID CLSID_SBS_SoftDistExt; 
extern "C" const IID CLSID_SBS_StdEncodingFilterFac; 
extern "C" const IID CLSID_SBS_DeCompMimeFilter; 
extern "C" const IID CLSID_SBS_CdlProtocol; 
extern "C" const IID CLSID_SBS_ClassInstallFilter; 
extern "C" const IID CLSID_SBS_InternetSecurityManager; 
extern "C" const IID CLSID_SBS_InternetZoneManager; 
#line 391
extern "C" const IID IID_IAsyncMoniker; 
extern "C" const IID CLSID_StdURLMoniker; 
extern "C" const IID CLSID_HttpProtocol; 
extern "C" const IID CLSID_FtpProtocol; 
extern "C" const IID CLSID_GopherProtocol; 
extern "C" const IID CLSID_HttpSProtocol; 
extern "C" const IID CLSID_FileProtocol; 
extern "C" const IID CLSID_MkProtocol; 
extern "C" const IID CLSID_StdURLProtocol; 
extern "C" const IID CLSID_UrlMkBindCtx; 
extern "C" const IID CLSID_StdEncodingFilterFac; 
extern "C" const IID CLSID_DeCompMimeFilter; 
extern "C" const IID CLSID_CdlProtocol; 
extern "C" const IID CLSID_ClassInstallFilter; 
extern "C" const IID IID_IAsyncBindCtx; 
#line 414
extern "C" HRESULT __stdcall CreateURLMoniker(LPMONIKER, LPCWSTR, LPMONIKER *); 
extern "C" HRESULT __stdcall CreateURLMonikerEx(LPMONIKER, LPCWSTR, LPMONIKER *, DWORD); 
extern "C" HRESULT __stdcall GetClassURL(LPCWSTR, CLSID *); 
extern "C" HRESULT __stdcall CreateAsyncBindCtx(DWORD, IBindStatusCallback *, IEnumFORMATETC *, IBindCtx **); 


extern "C" HRESULT __stdcall CreateURLMonikerEx2(LPMONIKER, IUri *, LPMONIKER *, DWORD); 
#line 422 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" HRESULT __stdcall CreateAsyncBindCtxEx(IBindCtx *, DWORD, IBindStatusCallback *, IEnumFORMATETC *, IBindCtx **, DWORD); 

extern "C" HRESULT __stdcall MkParseDisplayNameEx(IBindCtx *, LPCWSTR, ULONG *, LPMONIKER *); 

extern "C" HRESULT __stdcall RegisterBindStatusCallback(LPBC, IBindStatusCallback *, IBindStatusCallback **, DWORD); 

extern "C" HRESULT __stdcall RevokeBindStatusCallback(LPBC, IBindStatusCallback *); 
extern "C" HRESULT __stdcall GetClassFileOrMime(LPBC, LPCWSTR, LPVOID, DWORD, LPCWSTR, DWORD, CLSID *); 
extern "C" HRESULT __stdcall IsValidURL(LPBC, LPCWSTR, DWORD); 
extern "C" HRESULT __stdcall CoGetClassObjectFromURL(const IID &, LPCWSTR, DWORD, DWORD, LPCWSTR, LPBINDCTX, DWORD, LPVOID, const IID &, LPVOID *); 




extern "C" HRESULT __stdcall FaultInIEFeature(HWND, uCLSSPEC *, QUERYCONTEXT *, DWORD); 


extern "C" HRESULT __stdcall GetComponentIDFromCLSSPEC(uCLSSPEC *, LPSTR *); 
#line 450
extern "C" HRESULT __stdcall IsAsyncMoniker(IMoniker *); 
extern "C" HRESULT __stdcall CreateURLBinding(LPCWSTR, IBindCtx *, IBinding **); 

extern "C" HRESULT __stdcall RegisterMediaTypes(UINT, const LPCSTR *, CLIPFORMAT *); 
extern "C" HRESULT __stdcall FindMediaType(LPCSTR, CLIPFORMAT *); 
extern "C" HRESULT __stdcall CreateFormatEnumerator(UINT, FORMATETC *, IEnumFORMATETC **); 
extern "C" HRESULT __stdcall RegisterFormatEnumerator(LPBC, IEnumFORMATETC *, DWORD); 
extern "C" HRESULT __stdcall RevokeFormatEnumerator(LPBC, IEnumFORMATETC *); 
extern "C" HRESULT __stdcall RegisterMediaTypeClass(LPBC, UINT, const LPCSTR *, CLSID *, DWORD); 
extern "C" HRESULT __stdcall FindMediaTypeClass(LPBC, LPCSTR, CLSID *, DWORD); 
extern "C" HRESULT __stdcall UrlMkSetSessionOption(DWORD, LPVOID, DWORD, DWORD); 
extern "C" HRESULT __stdcall UrlMkGetSessionOption(DWORD, LPVOID, DWORD, DWORD *, DWORD); 
extern "C" HRESULT __stdcall FindMimeFromData(LPBC, LPCWSTR, LPVOID, DWORD, LPCWSTR, DWORD, LPWSTR *, DWORD); 
#line 477 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" HRESULT __stdcall ObtainUserAgentString(DWORD, LPSTR, DWORD *); 



extern "C" HRESULT __stdcall CompareSecurityIds(BYTE *, DWORD, BYTE *, DWORD, DWORD); 
extern "C" HRESULT __stdcall CompatFlagsFromClsid(CLSID *, LPDWORD, LPDWORD); 
#line 588 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec; 
#line 597
extern "C" { typedef IPersistMoniker *LPPERSISTMONIKER; }


extern "C" const IID IID_IPersistMoniker; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("79eac9c9-baf9-11ce-8c82-00aa004ba90b")) IPersistMoniker : public IUnknown { 


virtual HRESULT __stdcall GetClassID(CLSID *) = 0; 


virtual HRESULT __stdcall IsDirty() = 0; 

virtual HRESULT __stdcall Load(BOOL, IMoniker *, LPBC, DWORD) = 0; 
#line 619
virtual HRESULT __stdcall Save(IMoniker *, LPBC, BOOL) = 0; 




virtual HRESULT __stdcall SaveCompleted(IMoniker *, LPBC) = 0; 



virtual HRESULT __stdcall GetCurMoniker(IMoniker **) = 0; 


}; }
#line 740 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec; 
#line 749
extern "C" { typedef IMonikerProp *LPMONIKERPROP; }
#line 758
extern "C" { typedef 
#line 752
enum __MIDL_IMonikerProp_0001 { 
MIMETYPEPROP, 
USE_SRC_URL, 
CLASSIDPROP, 
TRUSTEDDOWNLOADPROP, 
POPUPLEVELPROP
} MONIKERPROPERTY; }


extern "C" const IID IID_IMonikerProp; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("a5ca5f7f-1847-4d87-9c5b-918509f7511d")) IMonikerProp : public IUnknown { 


virtual HRESULT __stdcall PutProperty(MONIKERPROPERTY, LPCWSTR) = 0; 



}; }
#line 843 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec; 
#line 852
extern "C" { typedef IBindProtocol *LPBINDPROTOCOL; }


extern "C" const IID IID_IBindProtocol; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("79eac9cd-baf9-11ce-8c82-00aa004ba90b")) IBindProtocol : public IUnknown { 


virtual HRESULT __stdcall CreateBinding(LPCWSTR, IBindCtx *, IBinding **) = 0; 




}; }
#line 939 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec; 
#line 948
extern "C" { typedef IBinding *LPBINDING; }


extern "C" const IID IID_IBinding; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("79eac9c0-baf9-11ce-8c82-00aa004ba90b")) IBinding : public IUnknown { 


virtual HRESULT __stdcall Abort() = 0; 

virtual HRESULT __stdcall Suspend() = 0; 

virtual HRESULT __stdcall Resume() = 0; 

virtual HRESULT __stdcall SetPriority(LONG) = 0; 


virtual HRESULT __stdcall GetPriority(LONG *) = 0; 


virtual HRESULT __stdcall GetBindResult(CLSID *, DWORD *, LPOLESTR *, DWORD *) = 0; 
#line 977
}; }
#line 1069 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" { extern HRESULT __stdcall IBinding_RemoteGetBindResult_Proxy(IBinding *, CLSID *, DWORD *, LPOLESTR *, DWORD); } 
#line 1077
extern "C" { extern void __stdcall IBinding_RemoteGetBindResult_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 1096 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec; 
#line 1105
extern "C" { typedef IBindStatusCallback *LPBINDSTATUSCALLBACK; }
#line 1113
extern "C" { typedef 
#line 1108
enum __MIDL_IBindStatusCallback_0001 { 
BINDVERB_GET, 
BINDVERB_POST, 
BINDVERB_PUT, 
BINDVERB_CUSTOM
} BINDVERB; }
#line 1119
extern "C" { typedef 
#line 1116
enum __MIDL_IBindStatusCallback_0002 { 
BINDINFOF_URLENCODESTGMEDDATA = 1, 
BINDINFOF_URLENCODEDEXTRAINFO
} BINDINFOF; }
#line 1147
extern "C" { typedef 
#line 1122
enum __MIDL_IBindStatusCallback_0003 { 
BINDF_ASYNCHRONOUS = 1, 
BINDF_ASYNCSTORAGE, 
BINDF_NOPROGRESSIVERENDERING = 4, 
BINDF_OFFLINEOPERATION = 8, 
BINDF_GETNEWESTVERSION = 16, 
BINDF_NOWRITECACHE = 32, 
BINDF_NEEDFILE = 64, 
BINDF_PULLDATA = 128, 
BINDF_IGNORESECURITYPROBLEM = 256, 
BINDF_RESYNCHRONIZE = 512, 
BINDF_HYPERLINK = 1024, 
BINDF_NO_UI = 2048, 
BINDF_SILENTOPERATION = 4096, 
BINDF_PRAGMA_NO_CACHE = 8192, 
BINDF_GETCLASSOBJECT = 16384, 
BINDF_RESERVED_1 = 32768, 
BINDF_FREE_THREADED = 65536, 
BINDF_DIRECT_READ = 131072, 
BINDF_FORMS_SUBMIT = 262144, 
BINDF_GETFROMCACHE_IF_NET_FAIL = 524288, 
BINDF_FROMURLMON = 1048576, 
BINDF_FWD_BACK = 2097152, 
BINDF_PREFERDEFAULTHANDLER = 4194304, 
BINDF_ENFORCERESTRICTED = 8388608
} BINDF; }
#line 1154
extern "C" { typedef 
#line 1150
enum __MIDL_IBindStatusCallback_0004 { 
URL_ENCODING_NONE, 
URL_ENCODING_ENABLE_UTF8 = 268435456, 
URL_ENCODING_DISABLE_UTF8 = 536870912
} URL_ENCODING; }
#line 1172
extern "C" { typedef 
#line 1156
struct _tagBINDINFO { 

ULONG cbSize; 
LPWSTR szExtraInfo; 
STGMEDIUM stgmedData; 
DWORD grfBindInfoF; 
DWORD dwBindVerb; 
LPWSTR szCustomVerb; 
DWORD cbstgmedData; 
DWORD dwOptions; 
DWORD dwOptionsFlags; 
DWORD dwCodePage; 
SECURITY_ATTRIBUTES securityAttributes; 
IID iid; 
IUnknown *pUnk; 
DWORD dwReserved; 
} BINDINFO; }
#line 1179
extern "C" { typedef 
#line 1174
struct _REMSECURITY_ATTRIBUTES { 

DWORD nLength; 
DWORD lpSecurityDescriptor; 
BOOL bInheritHandle; 
} REMSECURITY_ATTRIBUTES; }

extern "C" { typedef _REMSECURITY_ATTRIBUTES *PREMSECURITY_ATTRIBUTES; }

extern "C" { typedef _REMSECURITY_ATTRIBUTES *LPREMSECURITY_ATTRIBUTES; }
#line 1200
extern "C" { typedef 
#line 1185
struct _tagRemBINDINFO { 

ULONG cbSize; 
LPWSTR szExtraInfo; 
DWORD grfBindInfoF; 
DWORD dwBindVerb; 
LPWSTR szCustomVerb; 
DWORD cbstgmedData; 
DWORD dwOptions; 
DWORD dwOptionsFlags; 
DWORD dwCodePage; 
REMSECURITY_ATTRIBUTES securityAttributes; 
IID iid; 
IUnknown *pUnk; 
DWORD dwReserved; 
} RemBINDINFO; }
#line 1209
extern "C" { typedef 
#line 1202
struct tagRemFORMATETC { 

DWORD cfFormat; 
DWORD ptd; 
DWORD dwAspect; 
LONG lindex; 
DWORD tymed; 
} RemFORMATETC; }

extern "C" { typedef tagRemFORMATETC *LPREMFORMATETC; }
#line 1229
extern "C" { typedef 
#line 1214
enum __MIDL_IBindStatusCallback_0005 { 
BINDINFO_OPTIONS_WININETFLAG = 65536, 
BINDINFO_OPTIONS_ENABLE_UTF8 = 131072, 
BINDINFO_OPTIONS_DISABLE_UTF8 = 262144, 
BINDINFO_OPTIONS_USE_IE_ENCODING = 524288, 
BINDINFO_OPTIONS_BINDTOOBJECT = 1048576, 
BINDINFO_OPTIONS_SECURITYOPTOUT = 2097152, 
BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN = 4194304, 
BINDINFO_OPTIONS_USEBINDSTRINGCREDS = 8388608, 
BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS = 16777216, 
BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE = 33554432, 
BINDINFO_WPC_DOWNLOADBLOCKED = 134217728, 
BINDINFO_WPC_LOGGING_ENABLED = 268435456, 
BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS = 1073741824, 
BINDINFO_OPTIONS_SHDOCVW_NAVIGATE = (-2147483647-1)
} BINDINFO_OPTIONS; }
#line 1238
extern "C" { typedef 
#line 1232
enum __MIDL_IBindStatusCallback_0006 { 
BSCF_FIRSTDATANOTIFICATION = 1, 
BSCF_INTERMEDIATEDATANOTIFICATION, 
BSCF_LASTDATANOTIFICATION = 4, 
BSCF_DATAFULLYAVAILABLE = 8, 
BSCF_AVAILABLEDATASIZEUNKNOWN = 16
} BSCF; }
#line 1295
extern "C" { typedef 
#line 1241
enum tagBINDSTATUS { 
BINDSTATUS_FINDINGRESOURCE = 1, 
BINDSTATUS_CONNECTING, 
BINDSTATUS_REDIRECTING, 
BINDSTATUS_BEGINDOWNLOADDATA, 
BINDSTATUS_DOWNLOADINGDATA, 
BINDSTATUS_ENDDOWNLOADDATA, 
BINDSTATUS_BEGINDOWNLOADCOMPONENTS, 
BINDSTATUS_INSTALLINGCOMPONENTS, 
BINDSTATUS_ENDDOWNLOADCOMPONENTS, 
BINDSTATUS_USINGCACHEDCOPY, 
BINDSTATUS_SENDINGREQUEST, 
BINDSTATUS_CLASSIDAVAILABLE, 
BINDSTATUS_MIMETYPEAVAILABLE, 
BINDSTATUS_CACHEFILENAMEAVAILABLE, 
BINDSTATUS_BEGINSYNCOPERATION, 
BINDSTATUS_ENDSYNCOPERATION, 
BINDSTATUS_BEGINUPLOADDATA, 
BINDSTATUS_UPLOADINGDATA, 
BINDSTATUS_ENDUPLOADDATA, 
BINDSTATUS_PROTOCOLCLASSID, 
BINDSTATUS_ENCODING, 
BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE, 
BINDSTATUS_CLASSINSTALLLOCATION, 
BINDSTATUS_DECODING, 
BINDSTATUS_LOADINGMIMEHANDLER, 
BINDSTATUS_CONTENTDISPOSITIONATTACH, 
BINDSTATUS_FILTERREPORTMIMETYPE, 
BINDSTATUS_CLSIDCANINSTANTIATE, 
BINDSTATUS_IUNKNOWNAVAILABLE, 
BINDSTATUS_DIRECTBIND, 
BINDSTATUS_RAWMIMETYPE, 
BINDSTATUS_PROXYDETECTING, 
BINDSTATUS_ACCEPTRANGES, 
BINDSTATUS_COOKIE_SENT, 
BINDSTATUS_COMPACT_POLICY_RECEIVED, 
BINDSTATUS_COOKIE_SUPPRESSED, 
BINDSTATUS_COOKIE_STATE_UNKNOWN, 
BINDSTATUS_COOKIE_STATE_ACCEPT, 
BINDSTATUS_COOKIE_STATE_REJECT, 
BINDSTATUS_COOKIE_STATE_PROMPT, 
BINDSTATUS_COOKIE_STATE_LEASH, 
BINDSTATUS_COOKIE_STATE_DOWNGRADE, 
BINDSTATUS_POLICY_HREF, 
BINDSTATUS_P3P_HEADER, 
BINDSTATUS_SESSION_COOKIE_RECEIVED, 
BINDSTATUS_PERSISTENT_COOKIE_RECEIVED, 
BINDSTATUS_SESSION_COOKIES_ALLOWED, 
BINDSTATUS_CACHECONTROL, 
BINDSTATUS_CONTENTDISPOSITIONFILENAME, 
BINDSTATUS_MIMETEXTPLAINMISMATCH, 
BINDSTATUS_PUBLISHERAVAILABLE, 
BINDSTATUS_DISPLAYNAMEAVAILABLE, 
BINDSTATUS_SSLUX_NAVBLOCKED
} BINDSTATUS; }


extern "C" const IID IID_IBindStatusCallback; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("79eac9c1-baf9-11ce-8c82-00aa004ba90b")) IBindStatusCallback : public IUnknown { 


virtual HRESULT __stdcall OnStartBinding(DWORD, IBinding *) = 0; 



virtual HRESULT __stdcall GetPriority(LONG *) = 0; 


virtual HRESULT __stdcall OnLowResource(DWORD) = 0; 


virtual HRESULT __stdcall OnProgress(ULONG, ULONG, ULONG, LPCWSTR) = 0; 
#line 1322
virtual HRESULT __stdcall OnStopBinding(HRESULT, LPCWSTR) = 0; 



virtual HRESULT __stdcall GetBindInfo(DWORD *, BINDINFO *) = 0; 



virtual HRESULT __stdcall OnDataAvailable(DWORD, DWORD, FORMATETC *, STGMEDIUM *) = 0; 
#line 1336
virtual HRESULT __stdcall OnObjectAvailable(const IID &, IUnknown *) = 0; 



}; }
#line 1456 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" { extern HRESULT __stdcall IBindStatusCallback_RemoteGetBindInfo_Proxy(IBindStatusCallback *, DWORD *, RemBINDINFO *, RemSTGMEDIUM *); } 
#line 1463
extern "C" { extern void __stdcall IBindStatusCallback_RemoteGetBindInfo_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 1470
extern "C" { extern HRESULT __stdcall IBindStatusCallback_RemoteOnDataAvailable_Proxy(IBindStatusCallback *, DWORD, DWORD, RemFORMATETC *, RemSTGMEDIUM *); } 
#line 1478
extern "C" { extern void __stdcall IBindStatusCallback_RemoteOnDataAvailable_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 1497 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec; 
#line 1506
extern "C" { typedef IAuthenticate *LPAUTHENTICATION; }


extern "C" const IID IID_IAuthenticate; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("79eac9d0-baf9-11ce-8c82-00aa004ba90b")) IAuthenticate : public IUnknown { 


virtual HRESULT __stdcall Authenticate(HWND *, LPWSTR *, LPWSTR *) = 0; 




}; }
#line 1593 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec; 
#line 1602
extern "C" { typedef IHttpNegotiate *LPHTTPNEGOTIATE; }


extern "C" const IID IID_IHttpNegotiate; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("79eac9d2-baf9-11ce-8c82-00aa004ba90b")) IHttpNegotiate : public IUnknown { 


virtual HRESULT __stdcall BeginningTransaction(LPCWSTR, LPCWSTR, DWORD, LPWSTR *) = 0; 
#line 1619
virtual HRESULT __stdcall OnResponse(DWORD, LPCWSTR, LPCWSTR, LPWSTR *) = 0; 
#line 1625
}; }
#line 1707 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec; 
#line 1716
extern "C" { typedef IHttpNegotiate2 *LPHTTPNEGOTIATE2; }


extern "C" const IID IID_IHttpNegotiate2; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("4f9f9fcb-e0f4-48eb-b7ab-fa2ea9365cb4")) IHttpNegotiate2 : public IHttpNegotiate { 


virtual HRESULT __stdcall GetRootSecurityId(BYTE *, DWORD *, DWORD_PTR) = 0; 




}; }
#line 1824 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec; 
#line 1833
extern "C" { typedef IWinInetFileStream *LPWININETFILESTREAM; }


extern "C" const IID IID_IWinInetFileStream; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("f134c4b7-b1f8-4e75-b886-74b90943becb")) IWinInetFileStream : public IUnknown { 


virtual HRESULT __stdcall SetHandleForUnlock(DWORD_PTR, DWORD_PTR) = 0; 



virtual HRESULT __stdcall SetDeleteFile(DWORD_PTR) = 0; 


}; }
#line 1928 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec; 
#line 1937
extern "C" { typedef IWindowForBindingUI *LPWINDOWFORBINDINGUI; }


extern "C" const IID IID_IWindowForBindingUI; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("79eac9d5-bafa-11ce-8c82-00aa004ba90b")) IWindowForBindingUI : public IUnknown { 


virtual HRESULT __stdcall GetWindow(const GUID &, HWND *) = 0; 



}; }
#line 2022 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec; 
#line 2031
extern "C" { typedef ICodeInstall *LPCODEINSTALL; }
#line 2045
extern "C" { typedef 
#line 2034
enum __MIDL_ICodeInstall_0001 { 
CIP_DISK_FULL, 
CIP_ACCESS_DENIED, 
CIP_NEWER_VERSION_EXISTS, 
CIP_OLDER_VERSION_EXISTS, 
CIP_NAME_CONFLICT, 
CIP_TRUST_VERIFICATION_COMPONENT_MISSING, 
CIP_EXE_SELF_REGISTERATION_TIMEOUT, 
CIP_UNSAFE_TO_ABORT, 
CIP_NEED_REBOOT, 
CIP_NEED_REBOOT_UI_PERMISSION
} CIP_STATUS; }


extern "C" const IID IID_ICodeInstall; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("79eac9d1-baf9-11ce-8c82-00aa004ba90b")) ICodeInstall : public IWindowForBindingUI { 


virtual HRESULT __stdcall OnCodeInstallProblem(ULONG, LPCWSTR, LPCWSTR, DWORD) = 0; 
#line 2062
}; }
#line 2144 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec; 
#line 2178
extern "C" { typedef 
#line 2154
enum __MIDL_IUri_0001 { 
Uri_PROPERTY_ABSOLUTE_URI, 
Uri_PROPERTY_STRING_START = 0, 
Uri_PROPERTY_AUTHORITY, 
Uri_PROPERTY_DISPLAY_URI, 
Uri_PROPERTY_DOMAIN, 
Uri_PROPERTY_EXTENSION, 
Uri_PROPERTY_FRAGMENT, 
Uri_PROPERTY_HOST, 
Uri_PROPERTY_PASSWORD, 
Uri_PROPERTY_PATH, 
Uri_PROPERTY_PATH_AND_QUERY, 
Uri_PROPERTY_QUERY, 
Uri_PROPERTY_RAW_URI, 
Uri_PROPERTY_SCHEME_NAME, 
Uri_PROPERTY_USER_INFO, 
Uri_PROPERTY_USER_NAME, 
Uri_PROPERTY_STRING_LAST = 14, 
Uri_PROPERTY_HOST_TYPE, 
Uri_PROPERTY_DWORD_START = 15, 
Uri_PROPERTY_PORT, 
Uri_PROPERTY_SCHEME, 
Uri_PROPERTY_ZONE, 
Uri_PROPERTY_DWORD_LAST = 18
} Uri_PROPERTY; }
#line 2187
extern "C" { typedef 
#line 2181
enum __MIDL_IUri_0002 { 
Uri_HOST_UNKNOWN, 
Uri_HOST_DNS, 
Uri_HOST_IPV4, 
Uri_HOST_IPV6, 
Uri_HOST_IDN
} Uri_HOST_TYPE; }


extern "C" const IID IID_IUri; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("a39ee748-6a27-4817-a6f2-13914bef5890")) IUri : public IUnknown { 


virtual HRESULT __stdcall GetPropertyBSTR(Uri_PROPERTY, BSTR *, DWORD) = 0; 




virtual HRESULT __stdcall GetPropertyLength(Uri_PROPERTY, DWORD *, DWORD) = 0; 




virtual HRESULT __stdcall GetPropertyDWORD(Uri_PROPERTY, DWORD *, DWORD) = 0; 




virtual HRESULT __stdcall HasProperty(Uri_PROPERTY, BOOL *) = 0; 



virtual HRESULT __stdcall GetAbsoluteUri(BSTR *) = 0; 


virtual HRESULT __stdcall GetAuthority(BSTR *) = 0; 


virtual HRESULT __stdcall GetDisplayUri(BSTR *) = 0; 


virtual HRESULT __stdcall GetDomain(BSTR *) = 0; 


virtual HRESULT __stdcall GetExtension(BSTR *) = 0; 


virtual HRESULT __stdcall GetFragment(BSTR *) = 0; 


virtual HRESULT __stdcall GetHost(BSTR *) = 0; 


virtual HRESULT __stdcall GetPassword(BSTR *) = 0; 


virtual HRESULT __stdcall GetPath(BSTR *) = 0; 


virtual HRESULT __stdcall GetPathAndQuery(BSTR *) = 0; 


virtual HRESULT __stdcall GetQuery(BSTR *) = 0; 


virtual HRESULT __stdcall GetRawUri(BSTR *) = 0; 


virtual HRESULT __stdcall GetSchemeName(BSTR *) = 0; 


virtual HRESULT __stdcall GetUserInfo(BSTR *) = 0; 


virtual HRESULT __stdcall GetUserNameA(BSTR *) = 0; 


virtual HRESULT __stdcall GetHostType(DWORD *) = 0; 


virtual HRESULT __stdcall GetPort(DWORD *) = 0; 


virtual HRESULT __stdcall GetScheme(DWORD *) = 0; 


virtual HRESULT __stdcall GetZone(DWORD *) = 0; 


virtual HRESULT __stdcall GetProperties(LPDWORD) = 0; 


virtual HRESULT __stdcall IsEqual(struct IUri *, BOOL *) = 0; 



}; }
#line 2521 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" HRESULT __stdcall CreateUri(LPCWSTR, DWORD, DWORD_PTR, IUri **); 




extern "C" HRESULT __stdcall CreateUriWithFragment(LPCWSTR, LPCWSTR, DWORD, DWORD_PTR, IUri **); 
#line 2533
extern "C" HRESULT __stdcall CreateUriFromMultiByteString(LPCSTR, DWORD, DWORD, DWORD, DWORD_PTR, IUri **); 
#line 2604 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec; 
#line 2614
extern "C" const IID IID_IUriContainer; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("a158a630-ed6f-45fb-b987-f68676f57752")) IUriContainer : public IUnknown { 


virtual HRESULT __stdcall GetIUri(IUri **) = 0; 


}; }
#line 2694 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec; 
#line 2704
extern "C" const IID IID_IUriBuilder; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("4221b2e1-8955-46c0-bd5b-de9897565de7")) IUriBuilder : public IUnknown { 


virtual HRESULT __stdcall CreateUriSimple(DWORD, DWORD_PTR, IUri **) = 0; 
#line 2718
virtual HRESULT __stdcall CreateUri(DWORD, DWORD, DWORD_PTR, IUri **) = 0; 
#line 2725
virtual HRESULT __stdcall CreateUriWithFlags(DWORD, DWORD, DWORD, DWORD_PTR, IUri **) = 0; 
#line 2733
virtual HRESULT __stdcall GetIUri(IUri **) = 0; 



virtual HRESULT __stdcall SetIUri(IUri *) = 0; 



virtual HRESULT __stdcall GetFragment(DWORD *, LPCWSTR *) = 0; 
#line 2747
virtual HRESULT __stdcall GetHost(DWORD *, LPCWSTR *) = 0; 
#line 2753
virtual HRESULT __stdcall GetPassword(DWORD *, LPCWSTR *) = 0; 
#line 2759
virtual HRESULT __stdcall GetPath(DWORD *, LPCWSTR *) = 0; 
#line 2765
virtual HRESULT __stdcall GetPort(BOOL *, DWORD *) = 0; 
#line 2771
virtual HRESULT __stdcall GetQuery(DWORD *, LPCWSTR *) = 0; 
#line 2777
virtual HRESULT __stdcall GetSchemeName(DWORD *, LPCWSTR *) = 0; 
#line 2783
virtual HRESULT __stdcall GetUserNameA(DWORD *, LPCWSTR *) = 0; 
#line 2789
virtual HRESULT __stdcall SetFragment(LPCWSTR) = 0; 



virtual HRESULT __stdcall SetHost(LPCWSTR) = 0; 



virtual HRESULT __stdcall SetPassword(LPCWSTR) = 0; 



virtual HRESULT __stdcall SetPath(LPCWSTR) = 0; 



virtual HRESULT __stdcall SetPortA(BOOL, DWORD) = 0; 



virtual HRESULT __stdcall SetQuery(LPCWSTR) = 0; 



virtual HRESULT __stdcall SetSchemeName(LPCWSTR) = 0; 



virtual HRESULT __stdcall SetUserName(LPCWSTR) = 0; 



virtual HRESULT __stdcall RemoveProperties(DWORD) = 0; 


virtual HRESULT __stdcall HasBeenModified(BOOL *) = 0; 



}; }
#line 3097 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" const IID IID_IUriBuilderFactory; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("e982ce48-0b96-440c-bc37-0c869b27a29e")) IUriBuilderFactory : public IUnknown { 


virtual HRESULT __stdcall CreateIUriBuilder(DWORD, DWORD_PTR, IUriBuilder **) = 0; 
#line 3113
virtual HRESULT __stdcall CreateInitializedIUriBuilder(DWORD, DWORD_PTR, IUriBuilder **) = 0; 
#line 3121
}; }
#line 3202 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" HRESULT __stdcall CreateIUriBuilder(IUri *, DWORD, DWORD_PTR, IUriBuilder **); 
#line 3214 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec; 
#line 3223
extern "C" { typedef IWinInetInfo *LPWININETINFO; }


extern "C" const IID IID_IWinInetInfo; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("79eac9d6-bafa-11ce-8c82-00aa004ba90b")) IWinInetInfo : public IUnknown { 


virtual HRESULT __stdcall QueryOption(DWORD, LPVOID, DWORD *) = 0; 




}; }
#line 3298 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" { extern HRESULT __stdcall IWinInetInfo_RemoteQueryOption_Proxy(IWinInetInfo *, DWORD, BYTE *, DWORD *); } 
#line 3305
extern "C" { extern void __stdcall IWinInetInfo_RemoteQueryOption_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 3325 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0016_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0016_v0_0_s_ifspec; 
#line 3334
extern "C" { typedef IHttpSecurity *LPHTTPSECURITY; }


extern "C" const IID IID_IHttpSecurity; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("79eac9d7-bafa-11ce-8c82-00aa004ba90b")) IHttpSecurity : public IWindowForBindingUI { 


virtual HRESULT __stdcall OnSecurityProblem(DWORD) = 0; 


}; }
#line 3426 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0017_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0017_v0_0_s_ifspec; 
#line 3435
extern "C" { typedef IWinInetHttpInfo *LPWININETHTTPINFO; }


extern "C" const IID IID_IWinInetHttpInfo; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("79eac9d8-bafa-11ce-8c82-00aa004ba90b")) IWinInetHttpInfo : public IWinInetInfo { 


virtual HRESULT __stdcall QueryInfo(DWORD, LPVOID, DWORD *, DWORD *, DWORD *) = 0; 
#line 3453
}; }
#line 3524 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" { extern HRESULT __stdcall IWinInetHttpInfo_RemoteQueryInfo_Proxy(IWinInetHttpInfo *, DWORD, BYTE *, DWORD *, DWORD *, DWORD *); } 
#line 3533
extern "C" { extern void __stdcall IWinInetHttpInfo_RemoteQueryInfo_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 3553 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec; 
#line 3562
extern "C" { typedef IWinInetCacheHints *LPWININETCACHEHINTS; }


extern "C" const IID IID_IWinInetCacheHints; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("dd1ec3b3-8391-4fdb-a9e6-347c3caaa7dd")) IWinInetCacheHints : public IUnknown { 


virtual HRESULT __stdcall SetCacheExtension(LPCWSTR, LPVOID, DWORD *, DWORD *, DWORD *) = 0; 
#line 3580
}; }
#line 3655 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec; 
#line 3664
extern "C" { typedef IWinInetCacheHints2 *LPWININETCACHEHINTS2; }


extern "C" const IID IID_IWinInetCacheHints2; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("7857aeac-d31f-49bf-884e-dd46df36780a")) IWinInetCacheHints2 : public IWinInetCacheHints { 


virtual HRESULT __stdcall SetCacheExtension2(LPCWSTR, WCHAR *, DWORD *, DWORD *, DWORD *) = 0; 
#line 3682
}; }
#line 3768 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" const GUID SID_BindHost; 


extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec; 
#line 3780
extern "C" { typedef IBindHost *LPBINDHOST; }


extern "C" const IID IID_IBindHost; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("fc4801a1-2ba9-11cf-a229-00aa003d7352")) IBindHost : public IUnknown { 


virtual HRESULT __stdcall CreateMoniker(LPOLESTR, IBindCtx *, IMoniker **, DWORD) = 0; 
#line 3797
virtual HRESULT __stdcall MonikerBindToStorage(IMoniker *, IBindCtx *, IBindStatusCallback *, const IID &, void **) = 0; 
#line 3804
virtual HRESULT __stdcall MonikerBindToObject(IMoniker *, IBindCtx *, IBindStatusCallback *, const IID &, void **) = 0; 
#line 3811
}; }
#line 3893 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" { extern HRESULT __stdcall IBindHost_RemoteMonikerBindToStorage_Proxy(IBindHost *, IMoniker *, IBindCtx *, IBindStatusCallback *, const IID &, IUnknown **); } 
#line 3902
extern "C" { extern void __stdcall IBindHost_RemoteMonikerBindToStorage_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 3909
extern "C" { extern HRESULT __stdcall IBindHost_RemoteMonikerBindToObject_Proxy(IBindHost *, IMoniker *, IBindCtx *, IBindStatusCallback *, const IID &, IUnknown **); } 
#line 3918
extern "C" { extern void __stdcall IBindHost_RemoteMonikerBindToObject_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 3941 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
struct IBindStatusCallback; 
extern "C" HRESULT __stdcall HlinkSimpleNavigateToString(LPCWSTR, LPCWSTR, LPCWSTR, IUnknown *, IBindCtx *, IBindStatusCallback *, DWORD, DWORD); 
#line 3953
extern "C" HRESULT __stdcall HlinkSimpleNavigateToMoniker(IMoniker *, LPCWSTR, LPCWSTR, IUnknown *, IBindCtx *, IBindStatusCallback *, DWORD, DWORD); 
#line 3964
extern "C" HRESULT __stdcall URLOpenStreamA(LPUNKNOWN, LPCSTR, DWORD, LPBINDSTATUSCALLBACK); 
extern "C" HRESULT __stdcall URLOpenStreamW(LPUNKNOWN, LPCWSTR, DWORD, LPBINDSTATUSCALLBACK); 
extern "C" HRESULT __stdcall URLOpenPullStreamA(LPUNKNOWN, LPCSTR, DWORD, LPBINDSTATUSCALLBACK); 
extern "C" HRESULT __stdcall URLOpenPullStreamW(LPUNKNOWN, LPCWSTR, DWORD, LPBINDSTATUSCALLBACK); 
extern "C" HRESULT __stdcall URLDownloadToFileA(LPUNKNOWN, LPCSTR, LPCSTR, DWORD, LPBINDSTATUSCALLBACK); 
extern "C" HRESULT __stdcall URLDownloadToFileW(LPUNKNOWN, LPCWSTR, LPCWSTR, DWORD, LPBINDSTATUSCALLBACK); 
extern "C" HRESULT __stdcall URLDownloadToCacheFileA(LPUNKNOWN, LPCSTR, LPSTR, DWORD, DWORD, LPBINDSTATUSCALLBACK); 
extern "C" HRESULT __stdcall URLDownloadToCacheFileW(LPUNKNOWN, LPCWSTR, LPWSTR, DWORD, DWORD, LPBINDSTATUSCALLBACK); 
extern "C" HRESULT __stdcall URLOpenBlockingStreamA(LPUNKNOWN, LPCSTR, LPSTREAM *, DWORD, LPBINDSTATUSCALLBACK); 
extern "C" HRESULT __stdcall URLOpenBlockingStreamW(LPUNKNOWN, LPCWSTR, LPSTREAM *, DWORD, LPBINDSTATUSCALLBACK); 
#line 3990 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" HRESULT __stdcall HlinkGoBack(IUnknown *); 
extern "C" HRESULT __stdcall HlinkGoForward(IUnknown *); 
extern "C" HRESULT __stdcall HlinkNavigateString(IUnknown *, LPCWSTR); 
extern "C" HRESULT __stdcall HlinkNavigateMoniker(IUnknown *, IMoniker *); 
#line 4009
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec; 
#line 4018
extern "C" { typedef IInternet *LPIINTERNET; }


extern "C" const IID IID_IInternet; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("79eac9e0-baf9-11ce-8c82-00aa004ba90b")) IInternet : public IUnknown { 


}; }
#line 4091 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec; 
#line 4100
extern "C" { typedef IInternetBindInfo *LPIINTERNETBINDINFO; }
#line 4121
extern "C" { typedef 
#line 4103
enum tagBINDSTRING { 
BINDSTRING_HEADERS = 1, 
BINDSTRING_ACCEPT_MIMES, 
BINDSTRING_EXTRA_URL, 
BINDSTRING_LANGUAGE, 
BINDSTRING_USERNAME, 
BINDSTRING_PASSWORD, 
BINDSTRING_UA_PIXELS, 
BINDSTRING_UA_COLOR, 
BINDSTRING_OS, 
BINDSTRING_USER_AGENT, 
BINDSTRING_ACCEPT_ENCODINGS, 
BINDSTRING_POST_COOKIE, 
BINDSTRING_POST_DATA_MIME, 
BINDSTRING_URL, 
BINDSTRING_IID, 
BINDSTRING_FLAG_BIND_TO_OBJECT, 
BINDSTRING_PTR_BIND_CONTEXT
} BINDSTRING; }


extern "C" const IID IID_IInternetBindInfo; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("79eac9e1-baf9-11ce-8c82-00aa004ba90b")) IInternetBindInfo : public IUnknown { 


virtual HRESULT __stdcall GetBindInfo(DWORD *, BINDINFO *) = 0; 



virtual HRESULT __stdcall GetBindString(ULONG, LPOLESTR *, ULONG, ULONG *) = 0; 
#line 4142
}; }
#line 4222 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec; 
#line 4231
extern "C" { typedef IInternetProtocolRoot *LPIINTERNETPROTOCOLROOT; }
#line 4250
extern "C" { typedef 
#line 4234
enum _tagPI_FLAGS { 
PI_PARSE_URL = 1, 
PI_FILTER_MODE, 
PI_FORCE_ASYNC = 4, 
PI_USE_WORKERTHREAD = 8, 
PI_MIMEVERIFICATION = 16, 
PI_CLSIDLOOKUP = 32, 
PI_DATAPROGRESS = 64, 
PI_SYNCHRONOUS = 128, 
PI_APARTMENTTHREADED = 256, 
PI_CLASSINSTALL = 512, 
PI_PASSONBINDCTX = 8192, 
PI_NOMIMEHANDLER = 32768, 
PI_LOADAPPDIRECT = 16384, 
PD_FORCE_SWITCH = 65536, 
PI_PREFERDEFAULTHANDLER = 131072
} PI_FLAGS; }
#line 4258
extern "C" { typedef 
#line 4252
struct _tagPROTOCOLDATA { 

DWORD grfFlags; 
DWORD dwState; 
LPVOID pData; 
ULONG cbData; 
} PROTOCOLDATA; }
#line 4265
extern "C" { typedef 
#line 4260
struct _tagStartParam { 

IID iid; 
IBindCtx *pIBindCtx; 
IUnknown *pItf; 
} StartParam; }


extern "C" const IID IID_IInternetProtocolRoot; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("79eac9e3-baf9-11ce-8c82-00aa004ba90b")) IInternetProtocolRoot : public IUnknown { 


virtual HRESULT __stdcall Start(LPCWSTR, IInternetProtocolSink *, IInternetBindInfo *, DWORD, HANDLE_PTR) = 0; 
#line 4283
virtual HRESULT __stdcall Continue(PROTOCOLDATA *) = 0; 


virtual HRESULT __stdcall Abort(HRESULT, DWORD) = 0; 



virtual HRESULT __stdcall Terminate(DWORD) = 0; 


virtual HRESULT __stdcall Suspend() = 0; 

virtual HRESULT __stdcall Resume() = 0; 

}; }
#line 4404 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec; 
#line 4413
extern "C" { typedef IInternetProtocol *LPIINTERNETPROTOCOL; }


extern "C" const IID IID_IInternetProtocol; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("79eac9e4-baf9-11ce-8c82-00aa004ba90b")) IInternetProtocol : public IInternetProtocolRoot { 


virtual HRESULT __stdcall Read(void *, ULONG, ULONG *) = 0; 




virtual HRESULT __stdcall Seek(LARGE_INTEGER, DWORD, ULARGE_INTEGER *) = 0; 




virtual HRESULT __stdcall LockRequest(DWORD) = 0; 


virtual HRESULT __stdcall UnlockRequest() = 0; 

}; }
#line 4579 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec; 
#line 4589
extern "C" const IID IID_IInternetProtocolEx; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("c7a98e66-1010-492c-a1c8-c809e1f75905")) IInternetProtocolEx : public IInternetProtocol { 


virtual HRESULT __stdcall StartEx(IUri *, IInternetProtocolSink *, IInternetBindInfo *, DWORD, HANDLE_PTR) = 0; 
#line 4604
}; }
#line 4756 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec; 
#line 4765
extern "C" { typedef IInternetProtocolSink *LPIINTERNETPROTOCOLSINK; }


extern "C" const IID IID_IInternetProtocolSink; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("79eac9e5-baf9-11ce-8c82-00aa004ba90b")) IInternetProtocolSink : public IUnknown { 


virtual HRESULT __stdcall Switch(PROTOCOLDATA *) = 0; 


virtual HRESULT __stdcall ReportProgress(ULONG, LPCWSTR) = 0; 



virtual HRESULT __stdcall ReportData(DWORD, ULONG, ULONG) = 0; 




virtual HRESULT __stdcall ReportResult(HRESULT, DWORD, LPCWSTR) = 0; 




}; }
#line 4888 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec; 
#line 4897
extern "C" { typedef IInternetProtocolSinkStackable *LPIINTERNETPROTOCOLSINKStackable; }


extern "C" const IID IID_IInternetProtocolSinkStackable; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("79eac9f0-baf9-11ce-8c82-00aa004ba90b")) IInternetProtocolSinkStackable : public IUnknown { 


virtual HRESULT __stdcall SwitchSink(IInternetProtocolSink *) = 0; 


virtual HRESULT __stdcall CommitSwitch() = 0; 

virtual HRESULT __stdcall RollbackSwitch() = 0; 

}; }
#line 4996 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec; 
#line 5005
extern "C" { typedef IInternetSession *LPIINTERNETSESSION; }
#line 5011
extern "C" { typedef 
#line 5008
enum _tagOIBDG_FLAGS { 
OIBDG_APARTMENTTHREADED = 256, 
OIBDG_DATAONLY = 4096
} OIBDG_FLAGS; }


extern "C" const IID IID_IInternetSession; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("79eac9e7-baf9-11ce-8c82-00aa004ba90b")) IInternetSession : public IUnknown { 


virtual HRESULT __stdcall RegisterNameSpace(IClassFactory *, const IID &, LPCWSTR, ULONG, const LPCWSTR *, DWORD) = 0; 
#line 5030
virtual HRESULT __stdcall UnregisterNameSpace(IClassFactory *, LPCWSTR) = 0; 



virtual HRESULT __stdcall RegisterMimeFilter(IClassFactory *, const IID &, LPCWSTR) = 0; 




virtual HRESULT __stdcall UnregisterMimeFilter(IClassFactory *, LPCWSTR) = 0; 



virtual HRESULT __stdcall CreateBinding(LPBC, LPCWSTR, IUnknown *, IUnknown **, IInternetProtocol **, DWORD) = 0; 
#line 5051
virtual HRESULT __stdcall SetSessionOption(DWORD, LPVOID, DWORD, DWORD) = 0; 
#line 5057
virtual HRESULT __stdcall GetSessionOption(DWORD, LPVOID, DWORD *, DWORD) = 0; 
#line 5063
}; }
#line 5194 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec; 
#line 5203
extern "C" { typedef IInternetThreadSwitch *LPIINTERNETTHREADSWITCH; }


extern "C" const IID IID_IInternetThreadSwitch; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("79eac9e8-baf9-11ce-8c82-00aa004ba90b")) IInternetThreadSwitch : public IUnknown { 


virtual HRESULT __stdcall Prepare() = 0; 

virtual HRESULT __stdcall Continue() = 0; 

}; }
#line 5292 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec; 
#line 5301
extern "C" { typedef IInternetPriority *LPIINTERNETPRIORITY; }


extern "C" const IID IID_IInternetPriority; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("79eac9eb-baf9-11ce-8c82-00aa004ba90b")) IInternetPriority : public IUnknown { 


virtual HRESULT __stdcall SetPriority(LONG) = 0; 


virtual HRESULT __stdcall GetPriority(LONG *) = 0; 


}; }
#line 5394 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec; 
#line 5403
extern "C" { typedef IInternetProtocolInfo *LPIINTERNETPROTOCOLINFO; }
#line 5426
extern "C" { typedef 
#line 5406
enum _tagPARSEACTION { 
PARSE_CANONICALIZE = 1, 
PARSE_FRIENDLY, 
PARSE_SECURITY_URL, 
PARSE_ROOTDOCUMENT, 
PARSE_DOCUMENT, 
PARSE_ANCHOR, 
PARSE_ENCODE, 
PARSE_DECODE, 
PARSE_PATH_FROM_URL, 
PARSE_URL_FROM_PATH, 
PARSE_MIME, 
PARSE_SERVER, 
PARSE_SCHEMA, 
PARSE_SITE, 
PARSE_DOMAIN, 
PARSE_LOCATION, 
PARSE_SECURITY_DOMAIN, 
PARSE_ESCAPE, 
PARSE_UNESCAPE
} PARSEACTION; }
#line 5432
extern "C" { typedef 
#line 5429
enum _tagPSUACTION { 
PSU_DEFAULT = 1, 
PSU_SECURITY_URL_ONLY
} PSUACTION; }
#line 5451
extern "C" { typedef 
#line 5435
enum _tagQUERYOPTION { 
QUERY_EXPIRATION_DATE = 1, 
QUERY_TIME_OF_LAST_CHANGE, 
QUERY_CONTENT_ENCODING, 
QUERY_CONTENT_TYPE, 
QUERY_REFRESH, 
QUERY_RECOMBINE, 
QUERY_CAN_NAVIGATE, 
QUERY_USES_NETWORK, 
QUERY_IS_CACHED, 
QUERY_IS_INSTALLEDENTRY, 
QUERY_IS_CACHED_OR_MAPPED, 
QUERY_USES_CACHE, 
QUERY_IS_SECURE, 
QUERY_IS_SAFE, 
QUERY_USES_HISTORYFOLDER
} QUERYOPTION; }


extern "C" const IID IID_IInternetProtocolInfo; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("79eac9ec-baf9-11ce-8c82-00aa004ba90b")) IInternetProtocolInfo : public IUnknown { 


virtual HRESULT __stdcall ParseUrl(LPCWSTR, PARSEACTION, DWORD, LPWSTR, DWORD, DWORD *, DWORD) = 0; 
#line 5471
virtual HRESULT __stdcall CombineUrl(LPCWSTR, LPCWSTR, DWORD, LPWSTR, DWORD, DWORD *, DWORD) = 0; 
#line 5480
virtual HRESULT __stdcall CompareUrl(LPCWSTR, LPCWSTR, DWORD) = 0; 




virtual HRESULT __stdcall QueryInfo(LPCWSTR, QUERYOPTION, DWORD, LPVOID, DWORD, DWORD *, DWORD) = 0; 
#line 5494
}; }
#line 5640 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" HRESULT __stdcall CoInternetParseUrl(LPCWSTR, PARSEACTION, DWORD, LPWSTR, DWORD, DWORD *, DWORD); 
#line 5650
extern "C" HRESULT __stdcall CoInternetParseIUri(IUri *, PARSEACTION, DWORD, LPWSTR, DWORD, DWORD *, DWORD_PTR); 
#line 5660 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" HRESULT __stdcall CoInternetCombineUrl(LPCWSTR, LPCWSTR, DWORD, LPWSTR, DWORD, DWORD *, DWORD); 
#line 5670
extern "C" HRESULT __stdcall CoInternetCombineUrlEx(IUri *, LPCWSTR, DWORD, IUri **, DWORD_PTR); 
#line 5677
extern "C" HRESULT __stdcall CoInternetCombineIUri(IUri *, IUri *, DWORD, IUri **, DWORD_PTR); 
#line 5685 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" HRESULT __stdcall CoInternetCompareUrl(LPCWSTR, LPCWSTR, DWORD); 




extern "C" HRESULT __stdcall CoInternetGetProtocolFlags(LPCWSTR, DWORD *, DWORD); 




extern "C" HRESULT __stdcall CoInternetQueryInfo(LPCWSTR, QUERYOPTION, DWORD, LPVOID, DWORD, DWORD *, DWORD); 
#line 5704
extern "C" HRESULT __stdcall CoInternetGetSession(DWORD, IInternetSession **, DWORD); 




extern "C" HRESULT __stdcall CoInternetGetSecurityUrl(LPCWSTR, LPWSTR *, PSUACTION, DWORD); 
#line 5715
extern "C" HRESULT __stdcall AsyncInstallDistributionUnit(LPCWSTR, LPCWSTR, LPCWSTR, DWORD, DWORD, LPCWSTR, IBindCtx *, LPVOID, DWORD); 
#line 5727
extern "C" HRESULT __stdcall CoInternetGetSecurityUrlEx(IUri *, IUri **, PSUACTION, DWORD_PTR); 
#line 5769 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" { typedef 
#line 5739
enum _tagINTERNETFEATURELIST { 
FEATURE_OBJECT_CACHING, 
FEATURE_ZONE_ELEVATION, 
FEATURE_MIME_HANDLING, 
FEATURE_MIME_SNIFFING, 
FEATURE_WINDOW_RESTRICTIONS, 
FEATURE_WEBOC_POPUPMANAGEMENT, 
FEATURE_BEHAVIORS, 
FEATURE_DISABLE_MK_PROTOCOL, 
FEATURE_LOCALMACHINE_LOCKDOWN, 
FEATURE_SECURITYBAND, 
FEATURE_RESTRICT_ACTIVEXINSTALL, 
FEATURE_VALIDATE_NAVIGATE_URL, 
FEATURE_RESTRICT_FILEDOWNLOAD, 
FEATURE_ADDON_MANAGEMENT, 
FEATURE_PROTOCOL_LOCKDOWN, 
FEATURE_HTTP_USERNAME_PASSWORD_DISABLE, 
FEATURE_SAFE_BINDTOOBJECT, 
FEATURE_UNC_SAVEDFILECHECK, 
FEATURE_GET_URL_DOM_FILEPATH_UNENCODED, 
FEATURE_TABBED_BROWSING, 
FEATURE_SSLUX, 
FEATURE_DISABLE_NAVIGATION_SOUNDS, 
FEATURE_DISABLE_LEGACY_COMPRESSION, 
FEATURE_FORCE_ADDR_AND_STATUS, 
FEATURE_XMLHTTP, 
FEATURE_DISABLE_TELNET_PROTOCOL, 
FEATURE_FEEDS, 
FEATURE_BLOCK_INPUT_PROMPTS, 
FEATURE_ENTRY_COUNT
} INTERNETFEATURELIST; }
#line 5797 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" HRESULT __stdcall CoInternetSetFeatureEnabled(INTERNETFEATURELIST, DWORD, BOOL); 




extern "C" HRESULT __stdcall CoInternetIsFeatureEnabled(INTERNETFEATURELIST, DWORD); 



extern "C" HRESULT __stdcall CoInternetIsFeatureEnabledForUrl(INTERNETFEATURELIST, DWORD, LPCWSTR, IInternetSecurityManager *); 
#line 5812
extern "C" HRESULT __stdcall CoInternetIsFeatureEnabledForIUri(INTERNETFEATURELIST, DWORD, IUri *, IInternetSecurityManagerEx2 *); 
#line 5818
extern "C" HRESULT __stdcall CoInternetIsFeatureZoneElevationEnabled(LPCWSTR, LPCWSTR, IInternetSecurityManager *, DWORD); 
#line 5826 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" HRESULT __stdcall CopyStgMedium(const STGMEDIUM *, STGMEDIUM *); 

extern "C" HRESULT __stdcall CopyBindInfo(const BINDINFO *, BINDINFO *); 

extern "C" void __stdcall ReleaseBindInfo(BINDINFO *); 
#line 5854 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" HRESULT __stdcall CoInternetCreateSecurityManager(IServiceProvider *, IInternetSecurityManager **, DWORD); 

extern "C" HRESULT __stdcall CoInternetCreateZoneManager(IServiceProvider *, IInternetZoneManager **, DWORD); 



extern "C" const IID CLSID_InternetSecurityManager; 
extern "C" const IID CLSID_InternetZoneManager; 

extern "C" const IID CLSID_PersistentZoneIdentifier; 
#line 5882 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec; 
#line 5892
extern "C" const IID IID_IInternetSecurityMgrSite; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("79eac9ed-baf9-11ce-8c82-00aa004ba90b")) IInternetSecurityMgrSite : public IUnknown { 


virtual HRESULT __stdcall GetWindow(HWND *) = 0; 


virtual HRESULT __stdcall EnableModeless(BOOL) = 0; 


}; }
#line 5982 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec; 
#line 6026
extern "C" { typedef 
#line 6004
enum __MIDL_IInternetSecurityManager_0001 { 
PUAF_DEFAULT, 
PUAF_NOUI, 
PUAF_ISFILE, 
PUAF_WARN_IF_DENIED = 4, 
PUAF_FORCEUI_FOREGROUND = 8, 
PUAF_CHECK_TIFS = 16, 
PUAF_DONTCHECKBOXINDIALOG = 32, 
PUAF_TRUSTED = 64, 
PUAF_ACCEPT_WILDCARD_SCHEME = 128, 
PUAF_ENFORCERESTRICTED = 256, 
PUAF_NOSAVEDFILECHECK = 512, 
PUAF_REQUIRESAVEDFILECHECK = 1024, 
PUAF_DONT_USE_CACHE = 4096, 
PUAF_RESERVED1 = 8192, 
PUAF_RESERVED2 = 16384, 
PUAF_LMZ_UNLOCKED = 65536, 
PUAF_LMZ_LOCKED = 131072, 
PUAF_DEFAULTZONEPOL = 262144, 
PUAF_NPL_USE_LOCKED_IF_RESTRICTED = 524288, 
PUAF_NOUIIFLOCKED = 1048576, 
PUAF_DRAGPROTOCOLCHECK = 2097152
} PUAF; }
#line 6032
extern "C" { typedef 
#line 6029
enum __MIDL_IInternetSecurityManager_0002 { 
PUAFOUT_DEFAULT, 
PUAFOUT_ISLOCKZONEPOLICY
} PUAFOUT; }
#line 6044
extern "C" { typedef 
#line 6041
enum __MIDL_IInternetSecurityManager_0003 { 
SZM_CREATE, 
SZM_DELETE
} SZM_FLAGS; }
#line 6061
extern "C" const IID IID_IInternetSecurityManager; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("79eac9ee-baf9-11ce-8c82-00aa004ba90b")) IInternetSecurityManager : public IUnknown { 


virtual HRESULT __stdcall SetSecuritySite(IInternetSecurityMgrSite *) = 0; 


virtual HRESULT __stdcall GetSecuritySite(IInternetSecurityMgrSite **) = 0; 


virtual HRESULT __stdcall MapUrlToZone(LPCWSTR, DWORD *, DWORD) = 0; 




virtual HRESULT __stdcall GetSecurityId(LPCWSTR, BYTE *, DWORD *, DWORD_PTR) = 0; 
#line 6086
virtual HRESULT __stdcall ProcessUrlAction(LPCWSTR, DWORD, BYTE *, DWORD, BYTE *, DWORD, DWORD, DWORD) = 0; 
#line 6096
virtual HRESULT __stdcall QueryCustomPolicy(LPCWSTR, const GUID &, BYTE **, DWORD *, BYTE *, DWORD, DWORD) = 0; 
#line 6105
virtual HRESULT __stdcall SetZoneMapping(DWORD, LPCWSTR, DWORD) = 0; 




virtual HRESULT __stdcall GetZoneMappings(DWORD, IEnumString **, DWORD) = 0; 




}; }
#line 6256 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec; 
#line 6271
extern "C" const IID IID_IInternetSecurityManagerEx; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("f164edf1-cc7c-4f0d-9a94-34222625c393")) IInternetSecurityManagerEx : public IInternetSecurityManager { 


virtual HRESULT __stdcall ProcessUrlActionEx(LPCWSTR, DWORD, BYTE *, DWORD, BYTE *, DWORD, DWORD, DWORD, DWORD *) = 0; 
#line 6290
}; }
#line 6448 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec; 
#line 6458
extern "C" const IID IID_IInternetSecurityManagerEx2; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("f1e50292-a795-4117-8e09-2b560a72ac60")) IInternetSecurityManagerEx2 : public IInternetSecurityManagerEx { 


virtual HRESULT __stdcall MapUrlToZoneEx2(IUri *, DWORD *, DWORD, LPWSTR *, DWORD *) = 0; 
#line 6473
virtual HRESULT __stdcall ProcessUrlActionEx2(IUri *, DWORD, BYTE *, DWORD, BYTE *, DWORD, DWORD, DWORD_PTR, DWORD *) = 0; 
#line 6484
virtual HRESULT __stdcall GetSecurityIdEx2(IUri *, BYTE *, DWORD *, DWORD_PTR) = 0; 
#line 6490
virtual HRESULT __stdcall QueryCustomPolicyEx2(IUri *, const GUID &, BYTE **, DWORD *, BYTE *, DWORD, DWORD_PTR) = 0; 
#line 6499
}; }
#line 6705 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec; 
#line 6715
extern "C" const IID IID_IZoneIdentifier; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("cd45f185-1b21-48e2-967b-ead743a8914e")) IZoneIdentifier : public IUnknown { 


virtual HRESULT __stdcall GetId(DWORD *) = 0; 


virtual HRESULT __stdcall SetId(DWORD) = 0; 


virtual HRESULT __stdcall Remove() = 0; 

}; }
#line 6816 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec; 
#line 6826
extern "C" const IID IID_IInternetHostSecurityManager; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("3af280b6-cb3f-11d0-891e-00c04fb6bfc4")) IInternetHostSecurityManager : public IUnknown { 


virtual HRESULT __stdcall GetSecurityId(BYTE *, DWORD *, DWORD_PTR) = 0; 




virtual HRESULT __stdcall ProcessUrlAction(DWORD, BYTE *, DWORD, BYTE *, DWORD, DWORD, DWORD) = 0; 
#line 6848
virtual HRESULT __stdcall QueryCustomPolicy(const GUID &, BYTE **, DWORD *, BYTE *, DWORD, DWORD) = 0; 
#line 6856
}; }
#line 7152 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" const GUID GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED; 
#line 7158 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec; 
#line 7167
extern "C" { typedef IInternetZoneManager *LPURLZONEMANAGER; }
#line 7181
extern "C" { typedef 
#line 7170
enum tagURLZONE { 
URLZONE_INVALID = (-1), 
URLZONE_PREDEFINED_MIN, 
URLZONE_LOCAL_MACHINE = 0, 
URLZONE_INTRANET, 
URLZONE_TRUSTED, 
URLZONE_INTERNET, 
URLZONE_UNTRUSTED, 
URLZONE_PREDEFINED_MAX = 999, 
URLZONE_USER_MIN, 
URLZONE_USER_MAX = 10000
} URLZONE; }
#line 7195
extern "C" { typedef 
#line 7186
enum tagURLTEMPLATE { 
URLTEMPLATE_CUSTOM, 
URLTEMPLATE_PREDEFINED_MIN = 65536, 
URLTEMPLATE_LOW = 65536, 
URLTEMPLATE_MEDLOW = 66816, 
URLTEMPLATE_MEDIUM = 69632, 
URLTEMPLATE_MEDHIGH = 70912, 
URLTEMPLATE_HIGH = 73728, 
URLTEMPLATE_PREDEFINED_MAX = 131072
} URLTEMPLATE; }


enum __MIDL_IInternetZoneManager_0001 { 
MAX_ZONE_PATH = 260, 
MAX_ZONE_DESCRIPTION = 200
}; 
#line 7216
extern "C" { typedef 
#line 7203
enum __MIDL_IInternetZoneManager_0002 { 
ZAFLAGS_CUSTOM_EDIT = 1, 
ZAFLAGS_ADD_SITES, 
ZAFLAGS_REQUIRE_VERIFICATION = 4, 
ZAFLAGS_INCLUDE_PROXY_OVERRIDE = 8, 
ZAFLAGS_INCLUDE_INTRANET_SITES = 16, 
ZAFLAGS_NO_UI = 32, 
ZAFLAGS_SUPPORTS_VERIFICATION = 64, 
ZAFLAGS_UNC_AS_INTRANET = 128, 
ZAFLAGS_DETECT_INTRANET = 256, 
ZAFLAGS_USE_LOCKED_ZONES = 65536, 
ZAFLAGS_VERIFY_TEMPLATE_SETTINGS = 131072, 
ZAFLAGS_NO_CACHE = 262144
} ZAFLAGS; }
#line 7228
extern "C" { typedef 
#line 7218
struct _ZONEATTRIBUTES { 

ULONG cbSize; 
WCHAR szDisplayName[260]; 
WCHAR szDescription[200]; 
WCHAR szIconPath[260]; 
DWORD dwTemplateMinLevel; 
DWORD dwTemplateRecommended; 
DWORD dwTemplateCurrentLevel; 
DWORD dwFlags; 
} ZONEATTRIBUTES; }

extern "C" { typedef _ZONEATTRIBUTES *LPZONEATTRIBUTES; }
#line 7253
extern "C" { typedef 
#line 7249
enum _URLZONEREG { 
URLZONEREG_DEFAULT, 
URLZONEREG_HKLM, 
URLZONEREG_HKCU
} URLZONEREG; }
#line 7286
extern "C" const IID IID_IInternetZoneManager; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("79eac9ef-baf9-11ce-8c82-00aa004ba90b")) IInternetZoneManager : public IUnknown { 


virtual HRESULT __stdcall GetZoneAttributes(DWORD, ZONEATTRIBUTES *) = 0; 



virtual HRESULT __stdcall SetZoneAttributes(DWORD, ZONEATTRIBUTES *) = 0; 



virtual HRESULT __stdcall GetZoneCustomPolicy(DWORD, const GUID &, BYTE **, DWORD *, URLZONEREG) = 0; 
#line 7309
virtual HRESULT __stdcall SetZoneCustomPolicy(DWORD, const GUID &, BYTE *, DWORD, URLZONEREG) = 0; 
#line 7316
virtual HRESULT __stdcall GetZoneActionPolicy(DWORD, DWORD, BYTE *, DWORD, URLZONEREG) = 0; 
#line 7323
virtual HRESULT __stdcall SetZoneActionPolicy(DWORD, DWORD, BYTE *, DWORD, URLZONEREG) = 0; 
#line 7330
virtual HRESULT __stdcall PromptAction(DWORD, HWND, LPCWSTR, LPCWSTR, DWORD) = 0; 
#line 7337
virtual HRESULT __stdcall LogAction(DWORD, LPCWSTR, LPCWSTR, DWORD) = 0; 
#line 7343
virtual HRESULT __stdcall CreateZoneEnumerator(DWORD *, DWORD *, DWORD) = 0; 




virtual HRESULT __stdcall GetZoneAt(DWORD, DWORD, DWORD *) = 0; 




virtual HRESULT __stdcall DestroyZoneEnumerator(DWORD) = 0; 


virtual HRESULT __stdcall CopyTemplatePoliciesToZone(DWORD, DWORD, DWORD) = 0; 




}; }
#line 7539 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec; 
#line 7557
extern "C" const IID IID_IInternetZoneManagerEx; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("a4c23339-8e06-431e-9bf4-7e711c085648")) IInternetZoneManagerEx : public IInternetZoneManager { 


virtual HRESULT __stdcall GetZoneActionPolicyEx(DWORD, DWORD, BYTE *, DWORD, URLZONEREG, DWORD) = 0; 
#line 7573
virtual HRESULT __stdcall SetZoneActionPolicyEx(DWORD, DWORD, BYTE *, DWORD, URLZONEREG, DWORD) = 0; 
#line 7581
}; }
#line 7787 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec; 
#line 7800
extern "C" const IID IID_IInternetZoneManagerEx2; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("edc17559-dd5d-4846-8eef-8becba5a4abf")) IInternetZoneManagerEx2 : public IInternetZoneManagerEx { 


virtual HRESULT __stdcall GetZoneAttributesEx(DWORD, ZONEATTRIBUTES *, DWORD) = 0; 




virtual HRESULT __stdcall GetZoneSecurityState(DWORD, BOOL, LPDWORD, BOOL *) = 0; 
#line 7819
virtual HRESULT __stdcall GetIESecurityState(BOOL, LPDWORD, BOOL *, BOOL) = 0; 
#line 7825
virtual HRESULT __stdcall FixUnsecureSettings() = 0; 

}; }
#line 8062 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" const IID CLSID_SoftDistExt; 
#line 8085
extern "C" { typedef 
#line 8077
struct _tagCODEBASEHOLD { 

ULONG cbSize; 
LPWSTR szDistUnit; 
LPWSTR szCodeBase; 
DWORD dwVersionMS; 
DWORD dwVersionLS; 
DWORD dwStyle; 
} CODEBASEHOLD; }

extern "C" { typedef _tagCODEBASEHOLD *LPCODEBASEHOLD; }
#line 8104
extern "C" { typedef 
#line 8089
struct _tagSOFTDISTINFO { 

ULONG cbSize; 
DWORD dwFlags; 
DWORD dwAdState; 
LPWSTR szTitle; 
LPWSTR szAbstract; 
LPWSTR szHREF; 
DWORD dwInstalledVersionMS; 
DWORD dwInstalledVersionLS; 
DWORD dwUpdateVersionMS; 
DWORD dwUpdateVersionLS; 
DWORD dwAdvertisedVersionMS; 
DWORD dwAdvertisedVersionLS; 
DWORD dwReserved; 
} SOFTDISTINFO; }

extern "C" { typedef _tagSOFTDISTINFO *LPSOFTDISTINFO; }



extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec; 
#line 8120
extern "C" const IID IID_ISoftDistExt; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("b15b8dc1-c7e1-11d0-8680-00aa00bdcb71")) ISoftDistExt : public IUnknown { 


virtual HRESULT __stdcall ProcessSoftDist(LPCWSTR, IXMLElement *, LPSOFTDISTINFO) = 0; 




virtual HRESULT __stdcall GetFirstCodeBase(LPWSTR *, LPDWORD) = 0; 



virtual HRESULT __stdcall GetNextCodeBase(LPWSTR *, LPDWORD) = 0; 



virtual HRESULT __stdcall AsyncInstallDistributionUnit(IBindCtx *, LPVOID, DWORD, LPCODEBASEHOLD) = 0; 
#line 8147
}; }
#line 8239 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" HRESULT __stdcall GetSoftwareUpdateInfo(LPCWSTR, LPSOFTDISTINFO); 
extern "C" HRESULT __stdcall SetSoftwareUpdateAdvertisementState(LPCWSTR, DWORD, DWORD, DWORD); 
#line 8246 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec; 
#line 8255
extern "C" { typedef ICatalogFileInfo *LPCATALOGFILEINFO; }


extern "C" const IID IID_ICatalogFileInfo; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("711c7600-6b48-11d1-b403-00aa00b92af1")) ICatalogFileInfo : public IUnknown { 


virtual HRESULT __stdcall GetCatalogFile(LPSTR *) = 0; 


virtual HRESULT __stdcall GetJavaTrust(void **) = 0; 


}; }
#line 8348 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec; 
#line 8357
extern "C" { typedef IDataFilter *LPDATAFILTER; }


extern "C" const IID IID_IDataFilter; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("69d14c80-c18e-11d0-a9ce-006097942311")) IDataFilter : public IUnknown { 


virtual HRESULT __stdcall DoEncode(DWORD, LONG, BYTE *, LONG, BYTE *, LONG, LONG *, LONG *, DWORD) = 0; 
#line 8379
virtual HRESULT __stdcall DoDecode(DWORD, LONG, BYTE *, LONG, BYTE *, LONG, LONG *, LONG *, DWORD) = 0; 
#line 8390
virtual HRESULT __stdcall SetEncodingLevel(DWORD) = 0; 


}; }
#line 8497 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" { typedef 
#line 8490
struct _tagPROTOCOLFILTERDATA { 

DWORD cbSize; 
IInternetProtocolSink *pProtocolSink; 
IInternetProtocol *pProtocol; 
IUnknown *pUnk; 
DWORD dwFilterFlags; 
} PROTOCOLFILTERDATA; }



extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec; 
#line 8510
extern "C" { typedef IEncodingFilterFactory *LPENCODINGFILTERFACTORY; }
#line 8518
extern "C" { typedef 
#line 8512
struct _tagDATAINFO { 

ULONG ulTotalSize; 
ULONG ulavrPacketSize; 
ULONG ulConnectSpeed; 
ULONG ulProcessorSpeed; 
} DATAINFO; }


extern "C" const IID IID_IEncodingFilterFactory; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("70bdde00-c18e-11d0-a9ce-006097942311")) IEncodingFilterFactory : public IUnknown { 


virtual HRESULT __stdcall FindBestFilter(LPCWSTR, LPCWSTR, DATAINFO, IDataFilter **) = 0; 
#line 8535
virtual HRESULT __stdcall GetDefaultFilter(LPCWSTR, LPCWSTR, IDataFilter **) = 0; 




}; }
#line 8620 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" { extern BOOL __stdcall IsLoggingEnabledA(LPCSTR); } 
extern "C" { extern BOOL __stdcall IsLoggingEnabledW(LPCWSTR); } 
#line 8634 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" { typedef 
#line 8627
struct _tagHIT_LOGGING_INFO { 

DWORD dwStructSize; 
LPSTR lpszLoggedUrlName; 
SYSTEMTIME StartTime; 
SYSTEMTIME EndTime; 
LPSTR lpszExtendedInfo; 
} HIT_LOGGING_INFO; }

extern "C" { typedef _tagHIT_LOGGING_INFO *LPHIT_LOGGING_INFO; }

extern "C" { extern BOOL __stdcall WriteHitLogging(LPHIT_LOGGING_INFO); } 

extern "C" { struct CONFIRMSAFETY { 

CLSID clsid; 
IUnknown *pUnk; 
DWORD dwFlags; 
}; }
extern "C" const GUID GUID_CUSTOM_CONFIRMOBJECTSAFETY; 
#line 8652 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec; 
#line 8661
extern "C" { typedef IWrappedProtocol *LPIWRAPPEDPROTOCOL; }


extern "C" const IID IID_IWrappedProtocol; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("53c84785-8425-4dc5-971b-e58d9c19f9b6")) IWrappedProtocol : public IUnknown { 


virtual HRESULT __stdcall GetWrapperCode(LONG *, DWORD_PTR) = 0; 



}; }
#line 8744 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\urlmon.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec; 



extern "C" { extern unsigned long __stdcall BSTR_UserSize(unsigned long *, unsigned long, BSTR *); } 
extern "C" { extern unsigned char *__stdcall BSTR_UserMarshal(unsigned long *, unsigned char *, BSTR *); } 
extern "C" { extern unsigned char *__stdcall BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR *); } 
extern "C" { extern void __stdcall BSTR_UserFree(unsigned long *, BSTR *); } 

extern "C" { extern unsigned long __stdcall HWND_UserSize(unsigned long *, unsigned long, HWND *); } 
extern "C" { extern unsigned char *__stdcall HWND_UserMarshal(unsigned long *, unsigned char *, HWND *); } 
extern "C" { extern unsigned char *__stdcall HWND_UserUnmarshal(unsigned long *, unsigned char *, HWND *); } 
extern "C" { extern void __stdcall HWND_UserFree(unsigned long *, HWND *); } 

extern "C" { extern unsigned long __stdcall BSTR_UserSize64(unsigned long *, unsigned long, BSTR *); } 
extern "C" { extern unsigned char *__stdcall BSTR_UserMarshal64(unsigned long *, unsigned char *, BSTR *); } 
extern "C" { extern unsigned char *__stdcall BSTR_UserUnmarshal64(unsigned long *, unsigned char *, BSTR *); } 
extern "C" { extern void __stdcall BSTR_UserFree64(unsigned long *, BSTR *); } 

extern "C" { extern unsigned long __stdcall HWND_UserSize64(unsigned long *, unsigned long, HWND *); } 
extern "C" { extern unsigned char *__stdcall HWND_UserMarshal64(unsigned long *, unsigned char *, HWND *); } 
extern "C" { extern unsigned char *__stdcall HWND_UserUnmarshal64(unsigned long *, unsigned char *, HWND *); } 
extern "C" { extern void __stdcall HWND_UserFree64(unsigned long *, HWND *); } 

extern "C" { extern HRESULT __stdcall IBinding_GetBindResult_Proxy(IBinding *, CLSID *, DWORD *, LPOLESTR *, DWORD *); } 
#line 8777
extern "C" { extern HRESULT __stdcall IBinding_GetBindResult_Stub(IBinding *, CLSID *, DWORD *, LPOLESTR *, DWORD); } 
#line 8784
extern "C" { extern HRESULT __stdcall IBindStatusCallback_GetBindInfo_Proxy(IBindStatusCallback *, DWORD *, BINDINFO *); } 
#line 8790
extern "C" { extern HRESULT __stdcall IBindStatusCallback_GetBindInfo_Stub(IBindStatusCallback *, DWORD *, RemBINDINFO *, RemSTGMEDIUM *); } 
#line 8796
extern "C" { extern HRESULT __stdcall IBindStatusCallback_OnDataAvailable_Proxy(IBindStatusCallback *, DWORD, DWORD, FORMATETC *, STGMEDIUM *); } 
#line 8804
extern "C" { extern HRESULT __stdcall IBindStatusCallback_OnDataAvailable_Stub(IBindStatusCallback *, DWORD, DWORD, RemFORMATETC *, RemSTGMEDIUM *); } 
#line 8811
extern "C" { extern HRESULT __stdcall IWinInetInfo_QueryOption_Proxy(IWinInetInfo *, DWORD, LPVOID, DWORD *); } 
#line 8818
extern "C" { extern HRESULT __stdcall IWinInetInfo_QueryOption_Stub(IWinInetInfo *, DWORD, BYTE *, DWORD *); } 
#line 8824
extern "C" { extern HRESULT __stdcall IWinInetHttpInfo_QueryInfo_Proxy(IWinInetHttpInfo *, DWORD, LPVOID, DWORD *, DWORD *, DWORD *); } 
#line 8833
extern "C" { extern HRESULT __stdcall IWinInetHttpInfo_QueryInfo_Stub(IWinInetHttpInfo *, DWORD, BYTE *, DWORD *, DWORD *, DWORD *); } 
#line 8841
extern "C" { extern HRESULT __stdcall IBindHost_MonikerBindToStorage_Proxy(IBindHost *, IMoniker *, IBindCtx *, IBindStatusCallback *, const IID &, void **); } 
#line 8850
extern "C" { extern HRESULT __stdcall IBindHost_MonikerBindToStorage_Stub(IBindHost *, IMoniker *, IBindCtx *, IBindStatusCallback *, const IID &, IUnknown **); } 
#line 8858
extern "C" { extern HRESULT __stdcall IBindHost_MonikerBindToObject_Proxy(IBindHost *, IMoniker *, IBindCtx *, IBindStatusCallback *, const IID &, void **); } 
#line 8867
extern "C" { extern HRESULT __stdcall IBindHost_MonikerBindToObject_Stub(IBindHost *, IMoniker *, IBindCtx *, IBindStatusCallback *, const IID &, IUnknown **); } 
#line 17 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\propidl.h"
#pragma warning( disable: 4049 )
#line 53 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\propidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000138-0000-0000-c000-000000000046")) IPropertyStorage IPropertyStorage; 
#line 59 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\propidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("0000013a-0000-0000-c000-000000000046")) IPropertySetStorage IPropertySetStorage; 
#line 65 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\propidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("00000139-0000-0000-c000-000000000046")) IEnumSTATPROPSTG IEnumSTATPROPSTG; 
#line 71 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\propidl.h"
typedef struct __declspec( novtable ) __declspec(uuid("0000013b-0000-0000-c000-000000000046")) IEnumSTATPROPSETSTG IEnumSTATPROPSETSTG; 
#line 95 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\propidl.h"
#pragma warning(push)
#line 97 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\propidl.h"
#pragma warning(disable:4201)
#pragma warning(disable:4237)
#line 110 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\propidl.h"
extern "C" { typedef 
#line 106
struct tagVersionedStream { 

GUID guidVersion; 
IStream *pStream; 
} VERSIONEDSTREAM; }

extern "C" { typedef tagVersionedStream *LPVERSIONEDSTREAM; }
#line 138
extern "C" { typedef struct tagPROPVARIANT PROPVARIANT; }
#line 144 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\propidl.h"
extern "C" { typedef 
#line 140
struct tagCAC { 

ULONG cElems; 
CHAR *pElems; 
} CAC; }
#line 150
extern "C" { typedef 
#line 146
struct tagCAUB { 

ULONG cElems; 
UCHAR *pElems; 
} CAUB; }
#line 156
extern "C" { typedef 
#line 152
struct tagCAI { 

ULONG cElems; 
SHORT *pElems; 
} CAI; }
#line 162
extern "C" { typedef 
#line 158
struct tagCAUI { 

ULONG cElems; 
USHORT *pElems; 
} CAUI; }
#line 168
extern "C" { typedef 
#line 164
struct tagCAL { 

ULONG cElems; 
LONG *pElems; 
} CAL; }
#line 174
extern "C" { typedef 
#line 170
struct tagCAUL { 

ULONG cElems; 
ULONG *pElems; 
} CAUL; }
#line 180
extern "C" { typedef 
#line 176
struct tagCAFLT { 

ULONG cElems; 
FLOAT *pElems; 
} CAFLT; }
#line 186
extern "C" { typedef 
#line 182
struct tagCADBL { 

ULONG cElems; 
DOUBLE *pElems; 
} CADBL; }
#line 192
extern "C" { typedef 
#line 188
struct tagCACY { 

ULONG cElems; 
CY *pElems; 
} CACY; }
#line 198
extern "C" { typedef 
#line 194
struct tagCADATE { 

ULONG cElems; 
DATE *pElems; 
} CADATE; }
#line 204
extern "C" { typedef 
#line 200
struct tagCABSTR { 

ULONG cElems; 
BSTR *pElems; 
} CABSTR; }
#line 210
extern "C" { typedef 
#line 206
struct tagCABSTRBLOB { 

ULONG cElems; 
BSTRBLOB *pElems; 
} CABSTRBLOB; }
#line 216
extern "C" { typedef 
#line 212
struct tagCABOOL { 

ULONG cElems; 
VARIANT_BOOL *pElems; 
} CABOOL; }
#line 222
extern "C" { typedef 
#line 218
struct tagCASCODE { 

ULONG cElems; 
SCODE *pElems; 
} CASCODE; }
#line 228
extern "C" { typedef 
#line 224
struct tagCAPROPVARIANT { 

ULONG cElems; 
PROPVARIANT *pElems; 
} CAPROPVARIANT; }
#line 234
extern "C" { typedef 
#line 230
struct tagCAH { 

ULONG cElems; 
LARGE_INTEGER *pElems; 
} CAH; }
#line 240
extern "C" { typedef 
#line 236
struct tagCAUH { 

ULONG cElems; 
ULARGE_INTEGER *pElems; 
} CAUH; }
#line 246
extern "C" { typedef 
#line 242
struct tagCALPSTR { 

ULONG cElems; 
LPSTR *pElems; 
} CALPSTR; }
#line 252
extern "C" { typedef 
#line 248
struct tagCALPWSTR { 

ULONG cElems; 
LPWSTR *pElems; 
} CALPWSTR; }
#line 258
extern "C" { typedef 
#line 254
struct tagCAFILETIME { 

ULONG cElems; 
FILETIME *pElems; 
} CAFILETIME; }
#line 264
extern "C" { typedef 
#line 260
struct tagCACLIPDATA { 

ULONG cElems; 
CLIPDATA *pElems; 
} CACLIPDATA; }
#line 270
extern "C" { typedef 
#line 266
struct tagCACLSID { 

ULONG cElems; 
CLSID *pElems; 
} CACLSID; }
#line 282
extern "C" { typedef WORD PROPVAR_PAD1; }
extern "C" { typedef WORD PROPVAR_PAD2; }
extern "C" { typedef WORD PROPVAR_PAD3; }
#line 288 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\propidl.h"
extern "C" { struct tagPROPVARIANT { 
union { 
#line 292 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\propidl.h"
struct { 
VARTYPE vt; 
PROPVAR_PAD1 wReserved1; 
PROPVAR_PAD2 wReserved2; 
PROPVAR_PAD3 wReserved3; 

union { 

CHAR cVal; 
UCHAR bVal; 
SHORT iVal; 
USHORT uiVal; 
LONG lVal; 
ULONG ulVal; 
INT intVal; 
UINT uintVal; 
LARGE_INTEGER hVal; 
ULARGE_INTEGER uhVal; 
FLOAT fltVal; 
DOUBLE dblVal; 
VARIANT_BOOL boolVal; 

SCODE scode; 
CY cyVal; 
DATE date; 
FILETIME filetime; 
CLSID *puuid; 
CLIPDATA *pclipdata; 
BSTR bstrVal; 
BSTRBLOB bstrblobVal; 
BLOB blob; 
LPSTR pszVal; 
LPWSTR pwszVal; 
IUnknown *punkVal; 
IDispatch *pdispVal; 
IStream *pStream; 
IStorage *pStorage; 
LPVERSIONEDSTREAM pVersionedStream; 
LPSAFEARRAY parray; 
CAC cac; 
CAUB caub; 
CAI cai; 
CAUI caui; 
CAL cal; 
CAUL caul; 
CAH cah; 
CAUH cauh; 
CAFLT caflt; 
CADBL cadbl; 
CABOOL cabool; 
CASCODE cascode; 
CACY cacy; 
CADATE cadate; 
CAFILETIME cafiletime; 
CACLSID cauuid; 
CACLIPDATA caclipdata; 
CABSTR cabstr; 
CABSTRBLOB cabstrblob; 
CALPSTR calpstr; 
CALPWSTR calpwstr; 
CAPROPVARIANT capropvar; 
CHAR *pcVal; 
UCHAR *pbVal; 
SHORT *piVal; 
USHORT *puiVal; 
LONG *plVal; 
ULONG *pulVal; 
INT *pintVal; 
UINT *puintVal; 
FLOAT *pfltVal; 
DOUBLE *pdblVal; 
VARIANT_BOOL *pboolVal; 
DECIMAL *pdecVal; 
SCODE *pscode; 
CY *pcyVal; 
DATE *pdate; 
BSTR *pbstrVal; 
IUnknown **ppunkVal; 
IDispatch **ppdispVal; 
LPSAFEARRAY *pparray; 
PROPVARIANT *pvarVal; 
}; 
}; 

DECIMAL decVal; 
}; 
}; }
#line 389 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\propidl.h"
extern "C" { typedef tagPROPVARIANT *LPPROPVARIANT; }
#line 485 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\propidl.h"
enum PIDMSI_STATUS_VALUE { 
PIDMSI_STATUS_NORMAL, 
PIDMSI_STATUS_NEW, 
PIDMSI_STATUS_PRELIM, 
PIDMSI_STATUS_DRAFT, 
PIDMSI_STATUS_INPROGRESS, 
PIDMSI_STATUS_EDIT, 
PIDMSI_STATUS_REVIEW, 
PIDMSI_STATUS_PROOF, 
PIDMSI_STATUS_FINAL, 
PIDMSI_STATUS_OTHER = 32767
}; 
#line 512
extern "C" { typedef 
#line 503
struct tagPROPSPEC { 

ULONG ulKind; 

union { 
PROPID propid; 
LPOLESTR lpwstr; 

}; 
} PROPSPEC; }
#line 519
extern "C" { typedef 
#line 514
struct tagSTATPROPSTG { 

LPOLESTR lpwstrName; 
PROPID propid; 
VARTYPE vt; 
} STATPROPSTG; }
#line 535
extern "C" { typedef 
#line 526
struct tagSTATPROPSETSTG { 

FMTID fmtid; 
CLSID clsid; 
DWORD grfFlags; 
FILETIME mtime; 
FILETIME ctime; 
FILETIME atime; 
DWORD dwOSVersion; 
} STATPROPSETSTG; }



extern "C" RPC_IF_HANDLE __MIDL_itf_propidl_0000_0000_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_propidl_0000_0000_v0_0_s_ifspec; 
#line 549
extern "C" const IID IID_IPropertyStorage; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000138-0000-0000-c000-000000000046")) IPropertyStorage : public IUnknown { 


virtual HRESULT __stdcall ReadMultiple(ULONG, const PROPSPEC [], PROPVARIANT []) = 0; 




virtual HRESULT __stdcall WriteMultiple(ULONG, const PROPSPEC [], const PROPVARIANT [], PROPID) = 0; 
#line 568
virtual HRESULT __stdcall DeleteMultiple(ULONG, const PROPSPEC []) = 0; 



virtual HRESULT __stdcall ReadPropertyNames(ULONG, const PROPID [], LPOLESTR []) = 0; 




virtual HRESULT __stdcall WritePropertyNames(ULONG, const PROPID [], const LPOLESTR []) = 0; 




virtual HRESULT __stdcall DeletePropertyNames(ULONG, const PROPID []) = 0; 



virtual HRESULT __stdcall Commit(DWORD) = 0; 


virtual HRESULT __stdcall Revert() = 0; 

virtual HRESULT __stdcall Enum(IEnumSTATPROPSTG **) = 0; 


virtual HRESULT __stdcall SetTimes(const FILETIME *, const FILETIME *, const FILETIME *) = 0; 




virtual HRESULT __stdcall SetClass(const IID &) = 0; 


virtual HRESULT __stdcall Stat(STATPROPSETSTG *) = 0; 


}; }
#line 761 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\propidl.h"
extern "C" { typedef IPropertySetStorage *LPPROPERTYSETSTORAGE; }


extern "C" const IID IID_IPropertySetStorage; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("0000013a-0000-0000-c000-000000000046")) IPropertySetStorage : public IUnknown { 


virtual HRESULT __stdcall Create(const IID &, const CLSID *, DWORD, DWORD, IPropertyStorage **) = 0; 
#line 779
virtual HRESULT __stdcall Open(const IID &, DWORD, IPropertyStorage **) = 0; 




virtual HRESULT __stdcall Delete(const IID &) = 0; 


virtual HRESULT __stdcall Enum(IEnumSTATPROPSETSTG **) = 0; 


}; }
#line 884 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\propidl.h"
extern "C" { typedef IEnumSTATPROPSTG *LPENUMSTATPROPSTG; }


extern "C" const IID IID_IEnumSTATPROPSTG; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("00000139-0000-0000-c000-000000000046")) IEnumSTATPROPSTG : public IUnknown { 


virtual HRESULT __stdcall Next(ULONG, STATPROPSTG *, ULONG *) = 0; 




virtual HRESULT __stdcall Skip(ULONG) = 0; 


virtual HRESULT __stdcall Reset() = 0; 

virtual HRESULT __stdcall Clone(struct IEnumSTATPROPSTG **) = 0; 


}; }
#line 987 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\propidl.h"
extern "C" { extern HRESULT __stdcall IEnumSTATPROPSTG_RemoteNext_Proxy(IEnumSTATPROPSTG *, ULONG, STATPROPSTG *, ULONG *); } 
#line 994
extern "C" { extern void __stdcall IEnumSTATPROPSTG_RemoteNext_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 1011 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\propidl.h"
extern "C" { typedef IEnumSTATPROPSETSTG *LPENUMSTATPROPSETSTG; }


extern "C" const IID IID_IEnumSTATPROPSETSTG; 




extern "C" { struct __declspec( novtable ) __declspec(uuid("0000013b-0000-0000-c000-000000000046")) IEnumSTATPROPSETSTG : public IUnknown { 


virtual HRESULT __stdcall Next(ULONG, STATPROPSETSTG *, ULONG *) = 0; 




virtual HRESULT __stdcall Skip(ULONG) = 0; 


virtual HRESULT __stdcall Reset() = 0; 

virtual HRESULT __stdcall Clone(struct IEnumSTATPROPSETSTG **) = 0; 


}; }
#line 1114 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\propidl.h"
extern "C" { extern HRESULT __stdcall IEnumSTATPROPSETSTG_RemoteNext_Proxy(IEnumSTATPROPSETSTG *, ULONG, STATPROPSETSTG *, ULONG *); } 
#line 1121
extern "C" { extern void __stdcall IEnumSTATPROPSETSTG_RemoteNext_Stub(IRpcStubBuffer *, IRpcChannelBuffer *, PRPC_MESSAGE, DWORD *); } 
#line 1135 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\propidl.h"
extern "C" { typedef IPropertyStorage *LPPROPERTYSTORAGE; }

extern "C" __declspec( dllimport ) HRESULT __stdcall PropVariantCopy(PROPVARIANT *, const PROPVARIANT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall PropVariantClear(PROPVARIANT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall FreePropVariantArray(ULONG, PROPVARIANT *); 



extern "C" { inline void PropVariantInit(PROPVARIANT *pvar) 
{ 
memset(pvar, 0, sizeof(PROPVARIANT)); 
} } 
#line 1153 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\propidl.h"
extern "C" __declspec( dllimport ) HRESULT __stdcall StgCreatePropStg(IUnknown *, const IID &, const CLSID *, DWORD, DWORD, IPropertyStorage **); 
extern "C" __declspec( dllimport ) HRESULT __stdcall StgOpenPropStg(IUnknown *, const IID &, DWORD, DWORD, IPropertyStorage **); 
extern "C" __declspec( dllimport ) HRESULT __stdcall StgCreatePropSetStg(IStorage *, DWORD, IPropertySetStorage **); 


extern "C" __declspec( dllimport ) HRESULT __stdcall FmtIdToPropStgName(const FMTID *, LPOLESTR); 
extern "C" __declspec( dllimport ) HRESULT __stdcall PropStgNameToFmtId(const LPOLESTR, FMTID *); 
#line 1167 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\propidl.h"
extern "C" { typedef 
#line 1163
struct tagSERIALIZEDPROPERTYVALUE { 

DWORD dwType; 
BYTE rgb[1]; 
} SERIALIZEDPROPERTYVALUE; }
#line 1171 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\propidl.h"
extern "C" SERIALIZEDPROPERTYVALUE *__stdcall StgConvertVariantToProperty(const PROPVARIANT *, USHORT, SERIALIZEDPROPERTYVALUE *, ULONG *, PROPID, BOOLEAN, ULONG *); 
#line 1181
class PMemoryAllocator; 


extern "C" BOOLEAN __stdcall StgConvertPropertyToVariant(const SERIALIZEDPROPERTYVALUE *, USHORT, PROPVARIANT *, PMemoryAllocator *); 
#line 1191 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\propidl.h"
#pragma warning(pop)
#line 1198 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\propidl.h"
extern "C" RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec; 
extern "C" RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec; 



extern "C" { extern unsigned long __stdcall BSTR_UserSize(unsigned long *, unsigned long, BSTR *); } 
extern "C" { extern unsigned char *__stdcall BSTR_UserMarshal(unsigned long *, unsigned char *, BSTR *); } 
extern "C" { extern unsigned char *__stdcall BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR *); } 
extern "C" { extern void __stdcall BSTR_UserFree(unsigned long *, BSTR *); } 

extern "C" { extern unsigned long __stdcall LPSAFEARRAY_UserSize(unsigned long *, unsigned long, LPSAFEARRAY *); } 
extern "C" { extern unsigned char *__stdcall LPSAFEARRAY_UserMarshal(unsigned long *, unsigned char *, LPSAFEARRAY *); } 
extern "C" { extern unsigned char *__stdcall LPSAFEARRAY_UserUnmarshal(unsigned long *, unsigned char *, LPSAFEARRAY *); } 
extern "C" { extern void __stdcall LPSAFEARRAY_UserFree(unsigned long *, LPSAFEARRAY *); } 

extern "C" { extern unsigned long __stdcall BSTR_UserSize64(unsigned long *, unsigned long, BSTR *); } 
extern "C" { extern unsigned char *__stdcall BSTR_UserMarshal64(unsigned long *, unsigned char *, BSTR *); } 
extern "C" { extern unsigned char *__stdcall BSTR_UserUnmarshal64(unsigned long *, unsigned char *, BSTR *); } 
extern "C" { extern void __stdcall BSTR_UserFree64(unsigned long *, BSTR *); } 

extern "C" { extern unsigned long __stdcall LPSAFEARRAY_UserSize64(unsigned long *, unsigned long, LPSAFEARRAY *); } 
extern "C" { extern unsigned char *__stdcall LPSAFEARRAY_UserMarshal64(unsigned long *, unsigned char *, LPSAFEARRAY *); } 
extern "C" { extern unsigned char *__stdcall LPSAFEARRAY_UserUnmarshal64(unsigned long *, unsigned char *, LPSAFEARRAY *); } 
extern "C" { extern void __stdcall LPSAFEARRAY_UserFree64(unsigned long *, LPSAFEARRAY *); } 

extern "C" { extern HRESULT __stdcall IEnumSTATPROPSTG_Next_Proxy(IEnumSTATPROPSTG *, ULONG, STATPROPSTG *, ULONG *); } 
#line 1230
extern "C" { extern HRESULT __stdcall IEnumSTATPROPSTG_Next_Stub(IEnumSTATPROPSTG *, ULONG, STATPROPSTG *, ULONG *); } 
#line 1236
extern "C" { extern HRESULT __stdcall IEnumSTATPROPSETSTG_Next_Proxy(IEnumSTATPROPSETSTG *, ULONG, STATPROPSETSTG *, ULONG *); } 
#line 1243
extern "C" { extern HRESULT __stdcall IEnumSTATPROPSETSTG_Next_Stub(IEnumSTATPROPSETSTG *, ULONG, STATPROPSETSTG *, ULONG *); } 
#line 1003 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\objbase.h"
extern "C" __declspec( dllimport ) HRESULT __stdcall CreateStdProgressIndicator(HWND, LPCOLESTR, IBindStatusCallback *, IBindStatusCallback **); 
#line 27 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\poppack.h"
#pragma warning(disable:4103)
#line 24 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\pshpack8.h"
#pragma warning(disable:4103)
#line 29 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\poppack.h"
#pragma pack ( pop )
#line 26 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\pshpack8.h"
#pragma pack ( push, 8 )
#line 34 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\oleauto.h"
extern "C" const IID IID_StdOle; 
#line 64
extern "C" __declspec( dllimport ) BSTR __stdcall SysAllocString(const OLECHAR *); 
extern "C" __declspec( dllimport ) INT __stdcall SysReAllocString(BSTR *, const OLECHAR *); 
extern "C" __declspec( dllimport ) BSTR __stdcall SysAllocStringLen(const OLECHAR *, UINT); 
extern "C" __declspec( dllimport ) INT __stdcall SysReAllocStringLen(BSTR *, const OLECHAR *, unsigned); 
extern "C" __declspec( dllimport ) void __stdcall SysFreeString(BSTR); 
extern "C" __declspec( dllimport ) UINT __stdcall SysStringLen(BSTR); 


extern "C" __declspec( dllimport ) UINT __stdcall SysStringByteLen(BSTR); 
extern "C" __declspec( dllimport ) BSTR __stdcall SysAllocStringByteLen(LPCSTR, UINT); 
#line 80 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\oleauto.h"
extern "C" __declspec( dllimport ) INT __stdcall DosDateTimeToVariantTime(USHORT, USHORT, DOUBLE *); 

extern "C" __declspec( dllimport ) INT __stdcall VariantTimeToDosDateTime(DOUBLE, USHORT *, USHORT *); 


extern "C" __declspec( dllimport ) INT __stdcall SystemTimeToVariantTime(LPSYSTEMTIME, DOUBLE *); 
extern "C" __declspec( dllimport ) INT __stdcall VariantTimeToSystemTime(DOUBLE, LPSYSTEMTIME); 
#line 94 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\oleauto.h"
extern "C" __declspec( dllimport ) HRESULT __stdcall SafeArrayAllocDescriptor(UINT, SAFEARRAY **); 
extern "C" __declspec( dllimport ) HRESULT __stdcall SafeArrayAllocDescriptorEx(VARTYPE, UINT, SAFEARRAY **); 
extern "C" __declspec( dllimport ) HRESULT __stdcall SafeArrayAllocData(SAFEARRAY *); 
extern "C" __declspec( dllimport ) SAFEARRAY *__stdcall SafeArrayCreate(VARTYPE, UINT, SAFEARRAYBOUND *); 
extern "C" __declspec( dllimport ) SAFEARRAY *__stdcall SafeArrayCreateEx(VARTYPE, UINT, SAFEARRAYBOUND *, PVOID); 
extern "C" __declspec( dllimport ) HRESULT __stdcall SafeArrayCopyData(SAFEARRAY *, SAFEARRAY *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall SafeArrayDestroyDescriptor(SAFEARRAY *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall SafeArrayDestroyData(SAFEARRAY *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall SafeArrayDestroy(SAFEARRAY *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall SafeArrayRedim(SAFEARRAY *, SAFEARRAYBOUND *); 
extern "C" __declspec( dllimport ) UINT __stdcall SafeArrayGetDim(SAFEARRAY *); 
extern "C" __declspec( dllimport ) UINT __stdcall SafeArrayGetElemsize(SAFEARRAY *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall SafeArrayGetUBound(SAFEARRAY *, UINT, LONG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall SafeArrayGetLBound(SAFEARRAY *, UINT, LONG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall SafeArrayLock(SAFEARRAY *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall SafeArrayUnlock(SAFEARRAY *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall SafeArrayAccessData(SAFEARRAY *, void **); 
extern "C" __declspec( dllimport ) HRESULT __stdcall SafeArrayUnaccessData(SAFEARRAY *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall SafeArrayGetElement(SAFEARRAY *, LONG *, void *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall SafeArrayPutElement(SAFEARRAY *, LONG *, void *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall SafeArrayCopy(SAFEARRAY *, SAFEARRAY **); 
extern "C" __declspec( dllimport ) HRESULT __stdcall SafeArrayPtrOfIndex(SAFEARRAY *, LONG *, void **); 
extern "C" __declspec( dllimport ) HRESULT __stdcall SafeArraySetRecordInfo(SAFEARRAY *, IRecordInfo *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall SafeArrayGetRecordInfo(SAFEARRAY *, IRecordInfo **); 
extern "C" __declspec( dllimport ) HRESULT __stdcall SafeArraySetIID(SAFEARRAY *, const GUID &); 
extern "C" __declspec( dllimport ) HRESULT __stdcall SafeArrayGetIID(SAFEARRAY *, GUID *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall SafeArrayGetVartype(SAFEARRAY *, VARTYPE *); 
extern "C" __declspec( dllimport ) SAFEARRAY *__stdcall SafeArrayCreateVector(VARTYPE, LONG, ULONG); 
extern "C" __declspec( dllimport ) SAFEARRAY *__stdcall SafeArrayCreateVectorEx(VARTYPE, LONG, ULONG, PVOID); 
#line 128
extern "C" __declspec( dllimport ) void __stdcall VariantInit(VARIANTARG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VariantClear(VARIANTARG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VariantCopy(VARIANTARG *, const VARIANTARG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VariantCopyInd(VARIANT *, const VARIANTARG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VariantChangeType(VARIANTARG *, const VARIANTARG *, USHORT, VARTYPE); 

extern "C" __declspec( dllimport ) HRESULT __stdcall VariantChangeTypeEx(VARIANTARG *, const VARIANTARG *, LCID, USHORT, VARTYPE); 
#line 156
extern "C" __declspec( dllimport ) HRESULT __stdcall VectorFromBstr(BSTR, SAFEARRAY **); 
extern "C" __declspec( dllimport ) HRESULT __stdcall BstrFromVector(SAFEARRAY *, BSTR *); 
#line 227 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\oleauto.h"
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI1FromI2(SHORT, BYTE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI1FromI4(LONG, BYTE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI1FromI8(LONG64, BYTE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI1FromR4(FLOAT, BYTE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI1FromR8(DOUBLE, BYTE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI1FromCy(CY, BYTE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI1FromDate(DATE, BYTE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI1FromStr(LPCOLESTR, LCID, ULONG, BYTE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI1FromDisp(IDispatch *, LCID, BYTE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI1FromBool(VARIANT_BOOL, BYTE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI1FromI1(CHAR, BYTE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI1FromUI2(USHORT, BYTE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI1FromUI4(ULONG, BYTE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI1FromUI8(ULONG64, BYTE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI1FromDec(const DECIMAL *, BYTE *); 

extern "C" __declspec( dllimport ) HRESULT __stdcall VarI2FromUI1(BYTE, SHORT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI2FromI4(LONG, SHORT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI2FromI8(LONG64, SHORT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI2FromR4(FLOAT, SHORT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI2FromR8(DOUBLE, SHORT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI2FromCy(CY, SHORT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI2FromDate(DATE, SHORT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI2FromStr(LPCOLESTR, LCID, ULONG, SHORT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI2FromDisp(IDispatch *, LCID, SHORT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI2FromBool(VARIANT_BOOL, SHORT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI2FromI1(CHAR, SHORT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI2FromUI2(USHORT, SHORT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI2FromUI4(ULONG, SHORT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI2FromUI8(ULONG64, SHORT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI2FromDec(const DECIMAL *, SHORT *); 

extern "C" __declspec( dllimport ) HRESULT __stdcall VarI4FromUI1(BYTE, LONG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI4FromI2(SHORT, LONG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI4FromI8(LONG64, LONG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI4FromR4(FLOAT, LONG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI4FromR8(DOUBLE, LONG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI4FromCy(CY, LONG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI4FromDate(DATE, LONG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI4FromStr(LPCOLESTR, LCID, ULONG, LONG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI4FromDisp(IDispatch *, LCID, LONG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI4FromBool(VARIANT_BOOL, LONG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI4FromI1(CHAR, LONG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI4FromUI2(USHORT, LONG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI4FromUI4(ULONG, LONG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI4FromUI8(ULONG64, LONG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI4FromDec(const DECIMAL *, LONG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI4FromInt(INT, LONG *); 



extern "C" __declspec( dllimport ) HRESULT __stdcall VarI8FromUI1(BYTE, LONG64 *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI8FromI2(SHORT, LONG64 *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI8FromI4(LONG, LONG64 *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI8FromR4(FLOAT, LONG64 *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI8FromR8(DOUBLE, LONG64 *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI8FromCy(CY, LONG64 *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI8FromDate(DATE, LONG64 *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI8FromStr(LPCOLESTR, LCID, unsigned long, LONG64 *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI8FromDisp(IDispatch *, LCID, LONG64 *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI8FromBool(VARIANT_BOOL, LONG64 *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI8FromI1(CHAR, LONG64 *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI8FromUI2(USHORT, LONG64 *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI8FromUI4(ULONG, LONG64 *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI8FromUI8(ULONG64, LONG64 *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI8FromDec(const DECIMAL *, LONG64 *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI8FromInt(INT, LONG64 *); 
#line 299
extern "C" __declspec( dllimport ) HRESULT __stdcall VarR4FromUI1(BYTE, FLOAT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarR4FromI2(SHORT, FLOAT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarR4FromI4(LONG, FLOAT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarR4FromI8(LONG64, FLOAT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarR4FromR8(DOUBLE, FLOAT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarR4FromCy(CY, FLOAT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarR4FromDate(DATE, FLOAT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarR4FromStr(LPCOLESTR, LCID, ULONG, FLOAT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarR4FromDisp(IDispatch *, LCID, FLOAT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarR4FromBool(VARIANT_BOOL, FLOAT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarR4FromI1(CHAR, FLOAT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarR4FromUI2(USHORT, FLOAT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarR4FromUI4(ULONG, FLOAT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarR4FromUI8(ULONG64, FLOAT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarR4FromDec(const DECIMAL *, FLOAT *); 

extern "C" __declspec( dllimport ) HRESULT __stdcall VarR8FromUI1(BYTE, DOUBLE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarR8FromI2(SHORT, DOUBLE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarR8FromI4(LONG, DOUBLE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarR8FromI8(LONG64, DOUBLE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarR8FromR4(FLOAT, DOUBLE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarR8FromCy(CY, DOUBLE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarR8FromDate(DATE, DOUBLE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarR8FromStr(LPCOLESTR, LCID, ULONG, DOUBLE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarR8FromDisp(IDispatch *, LCID, DOUBLE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarR8FromBool(VARIANT_BOOL, DOUBLE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarR8FromI1(CHAR, DOUBLE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarR8FromUI2(USHORT, DOUBLE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarR8FromUI4(ULONG, DOUBLE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarR8FromUI8(ULONG64, DOUBLE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarR8FromDec(const DECIMAL *, DOUBLE *); 

extern "C" __declspec( dllimport ) HRESULT __stdcall VarDateFromUI1(BYTE, DATE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarDateFromI2(SHORT, DATE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarDateFromI4(LONG, DATE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarDateFromI8(LONG64, DATE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarDateFromR4(FLOAT, DATE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarDateFromR8(DOUBLE, DATE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarDateFromCy(CY, DATE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarDateFromStr(LPCOLESTR, LCID, ULONG, DATE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarDateFromDisp(IDispatch *, LCID, DATE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarDateFromBool(VARIANT_BOOL, DATE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarDateFromI1(CHAR, DATE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarDateFromUI2(USHORT, DATE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarDateFromUI4(ULONG, DATE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarDateFromUI8(ULONG64, DATE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarDateFromDec(const DECIMAL *, DATE *); 

extern "C" __declspec( dllimport ) HRESULT __stdcall VarCyFromUI1(BYTE, CY *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarCyFromI2(SHORT, CY *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarCyFromI4(LONG, CY *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarCyFromI8(LONG64, CY *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarCyFromR4(FLOAT, CY *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarCyFromR8(DOUBLE, CY *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarCyFromDate(DATE, CY *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarCyFromStr(LPCOLESTR, LCID, ULONG, CY *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarCyFromDisp(IDispatch *, LCID, CY *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarCyFromBool(VARIANT_BOOL, CY *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarCyFromI1(CHAR, CY *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarCyFromUI2(USHORT, CY *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarCyFromUI4(ULONG, CY *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarCyFromUI8(ULONG64, CY *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarCyFromDec(const DECIMAL *, CY *); 

extern "C" __declspec( dllimport ) HRESULT __stdcall VarBstrFromUI1(BYTE, LCID, ULONG, BSTR *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarBstrFromI2(SHORT, LCID, ULONG, BSTR *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarBstrFromI4(LONG, LCID, ULONG, BSTR *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarBstrFromI8(LONG64, LCID, unsigned long, BSTR *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarBstrFromR4(FLOAT, LCID, ULONG, BSTR *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarBstrFromR8(DOUBLE, LCID, ULONG, BSTR *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarBstrFromCy(CY, LCID, ULONG, BSTR *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarBstrFromDate(DATE, LCID, ULONG, BSTR *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarBstrFromDisp(IDispatch *, LCID, ULONG, BSTR *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarBstrFromBool(VARIANT_BOOL, LCID, ULONG, BSTR *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarBstrFromI1(CHAR, LCID, ULONG, BSTR *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarBstrFromUI2(USHORT, LCID, ULONG, BSTR *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarBstrFromUI4(ULONG, LCID, ULONG, BSTR *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarBstrFromUI8(ULONG64, LCID, unsigned long, BSTR *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarBstrFromDec(const DECIMAL *, LCID, ULONG, BSTR *); 

extern "C" __declspec( dllimport ) HRESULT __stdcall VarBoolFromUI1(BYTE, VARIANT_BOOL *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarBoolFromI2(SHORT, VARIANT_BOOL *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarBoolFromI4(LONG, VARIANT_BOOL *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarBoolFromI8(LONG64, VARIANT_BOOL *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarBoolFromR4(FLOAT, VARIANT_BOOL *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarBoolFromR8(DOUBLE, VARIANT_BOOL *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarBoolFromDate(DATE, VARIANT_BOOL *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarBoolFromCy(CY, VARIANT_BOOL *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarBoolFromStr(LPCOLESTR, LCID, ULONG, VARIANT_BOOL *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarBoolFromDisp(IDispatch *, LCID, VARIANT_BOOL *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarBoolFromI1(CHAR, VARIANT_BOOL *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarBoolFromUI2(USHORT, VARIANT_BOOL *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarBoolFromUI4(ULONG, VARIANT_BOOL *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarBoolFromUI8(ULONG64, VARIANT_BOOL *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarBoolFromDec(const DECIMAL *, VARIANT_BOOL *); 


extern "C" __declspec( dllimport ) HRESULT __stdcall VarI1FromUI1(BYTE, CHAR *); 
#line 402
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI1FromI2(SHORT, CHAR *); 
#line 408
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI1FromI4(LONG, CHAR *); 
#line 414
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI1FromI8(LONG64, CHAR *); 
#line 420
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI1FromR4(FLOAT, CHAR *); 
#line 426
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI1FromR8(DOUBLE, CHAR *); 
#line 432
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI1FromDate(DATE, CHAR *); 
#line 438
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI1FromCy(CY, CHAR *); 
#line 444
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI1FromStr(LPCOLESTR, LCID, ULONG, CHAR *); 
#line 452
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI1FromDisp(IDispatch *, LCID, CHAR *); 
#line 459
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI1FromBool(VARIANT_BOOL, CHAR *); 
#line 465
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI1FromUI2(USHORT, CHAR *); 
#line 471
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI1FromUI4(ULONG, CHAR *); 
#line 477
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI1FromUI8(ULONG64, CHAR *); 
#line 483
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI1FromDec(const DECIMAL *, CHAR *); 




extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI2FromUI1(BYTE, USHORT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI2FromI2(SHORT, USHORT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI2FromI4(LONG, USHORT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI2FromI8(LONG64, USHORT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI2FromR4(FLOAT, USHORT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI2FromR8(DOUBLE, USHORT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI2FromDate(DATE, USHORT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI2FromCy(CY, USHORT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI2FromStr(LPCOLESTR, LCID, ULONG, USHORT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI2FromDisp(IDispatch *, LCID, USHORT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI2FromBool(VARIANT_BOOL, USHORT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI2FromI1(CHAR, USHORT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI2FromUI4(ULONG, USHORT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI2FromUI8(ULONG64, USHORT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI2FromDec(const DECIMAL *, USHORT *); 

extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI4FromUI1(BYTE, ULONG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI4FromI2(SHORT, ULONG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI4FromI4(LONG, ULONG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI4FromI8(LONG64, ULONG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI4FromR4(FLOAT, ULONG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI4FromR8(DOUBLE, ULONG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI4FromDate(DATE, ULONG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI4FromCy(CY, ULONG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI4FromStr(LPCOLESTR, LCID, ULONG, ULONG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI4FromDisp(IDispatch *, LCID, ULONG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI4FromBool(VARIANT_BOOL, ULONG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI4FromI1(CHAR, ULONG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI4FromUI2(USHORT, ULONG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI4FromUI8(ULONG64, ULONG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI4FromDec(const DECIMAL *, ULONG *); 



extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI8FromUI1(BYTE, ULONG64 *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI8FromI2(SHORT, ULONG64 *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI8FromI4(LONG, ULONG64 *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI8FromI8(LONG64, ULONG64 *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI8FromR4(FLOAT, ULONG64 *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI8FromR8(DOUBLE, ULONG64 *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI8FromCy(CY, ULONG64 *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI8FromDate(DATE, ULONG64 *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI8FromStr(LPCOLESTR, LCID, unsigned long, ULONG64 *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI8FromDisp(IDispatch *, LCID, ULONG64 *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI8FromBool(VARIANT_BOOL, ULONG64 *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI8FromI1(CHAR, ULONG64 *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI8FromUI2(USHORT, ULONG64 *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI8FromUI4(ULONG, ULONG64 *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI8FromDec(const DECIMAL *, ULONG64 *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUI8FromInt(INT, ULONG64 *); 
#line 543
extern "C" __declspec( dllimport ) HRESULT __stdcall VarDecFromUI1(BYTE, DECIMAL *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarDecFromI2(SHORT, DECIMAL *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarDecFromI4(LONG, DECIMAL *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarDecFromI8(LONG64, DECIMAL *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarDecFromR4(FLOAT, DECIMAL *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarDecFromR8(DOUBLE, DECIMAL *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarDecFromDate(DATE, DECIMAL *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarDecFromCy(CY, DECIMAL *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarDecFromStr(LPCOLESTR, LCID, ULONG, DECIMAL *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarDecFromDisp(IDispatch *, LCID, DECIMAL *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarDecFromBool(VARIANT_BOOL, DECIMAL *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarDecFromI1(CHAR, DECIMAL *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarDecFromUI2(USHORT, DECIMAL *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarDecFromUI4(ULONG, DECIMAL *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarDecFromUI8(ULONG64, DECIMAL *); 




extern "C" __declspec( dllimport ) HRESULT __stdcall VarI4FromI8(LONG64, LONG *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarI4FromUI8(ULONG64, LONG *); 
#line 650
typedef 
#line 643
struct NUMPARSE { 
INT cDig; 
ULONG dwInFlags; 
ULONG dwOutFlags; 
INT cchUsed; 
INT nBaseShift; 
INT nPwr10; 
} NUMPARSE; 
#line 690
extern "C" __declspec( dllimport ) HRESULT __stdcall VarParseNumFromStr(LPCOLESTR, LCID, ULONG, NUMPARSE *, BYTE *); 


extern "C" __declspec( dllimport ) HRESULT __stdcall VarNumFromParseNum(NUMPARSE *, BYTE *, ULONG, VARIANT *); 
#line 700
extern "C" HRESULT __stdcall VarAdd(LPVARIANT, LPVARIANT, LPVARIANT); 
extern "C" HRESULT __stdcall VarAnd(LPVARIANT, LPVARIANT, LPVARIANT); 
extern "C" HRESULT __stdcall VarCat(LPVARIANT, LPVARIANT, LPVARIANT); 
extern "C" HRESULT __stdcall VarDiv(LPVARIANT, LPVARIANT, LPVARIANT); 
extern "C" HRESULT __stdcall VarEqv(LPVARIANT, LPVARIANT, LPVARIANT); 
extern "C" HRESULT __stdcall VarIdiv(LPVARIANT, LPVARIANT, LPVARIANT); 
extern "C" HRESULT __stdcall VarImp(LPVARIANT, LPVARIANT, LPVARIANT); 
extern "C" HRESULT __stdcall VarMod(LPVARIANT, LPVARIANT, LPVARIANT); 
extern "C" HRESULT __stdcall VarMul(LPVARIANT, LPVARIANT, LPVARIANT); 
extern "C" HRESULT __stdcall VarOr(LPVARIANT, LPVARIANT, LPVARIANT); 
extern "C" HRESULT __stdcall VarPow(LPVARIANT, LPVARIANT, LPVARIANT); 
extern "C" HRESULT __stdcall VarSub(LPVARIANT, LPVARIANT, LPVARIANT); 
extern "C" HRESULT __stdcall VarXor(LPVARIANT, LPVARIANT, LPVARIANT); 

extern "C" HRESULT __stdcall VarAbs(LPVARIANT, LPVARIANT); 
extern "C" HRESULT __stdcall VarFix(LPVARIANT, LPVARIANT); 
extern "C" HRESULT __stdcall VarInt(LPVARIANT, LPVARIANT); 
extern "C" HRESULT __stdcall VarNeg(LPVARIANT, LPVARIANT); 
extern "C" HRESULT __stdcall VarNot(LPVARIANT, LPVARIANT); 

extern "C" HRESULT __stdcall VarRound(LPVARIANT, int, LPVARIANT); 


extern "C" HRESULT __stdcall VarCmp(LPVARIANT, LPVARIANT, LCID, ULONG); 
#line 733 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\oleauto.h"
__inline HRESULT __stdcall VarCmp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LCID lcid) { 
return VarCmp(pvarLeft, pvarRight, lcid, 0); 
} 
#line 742 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\oleauto.h"
extern "C" HRESULT __stdcall VarDecAdd(LPDECIMAL, LPDECIMAL, LPDECIMAL); 
extern "C" HRESULT __stdcall VarDecDiv(LPDECIMAL, LPDECIMAL, LPDECIMAL); 
extern "C" HRESULT __stdcall VarDecMul(LPDECIMAL, LPDECIMAL, LPDECIMAL); 
extern "C" HRESULT __stdcall VarDecSub(LPDECIMAL, LPDECIMAL, LPDECIMAL); 

extern "C" HRESULT __stdcall VarDecAbs(LPDECIMAL, LPDECIMAL); 
extern "C" HRESULT __stdcall VarDecFix(LPDECIMAL, LPDECIMAL); 
extern "C" HRESULT __stdcall VarDecInt(LPDECIMAL, LPDECIMAL); 
extern "C" HRESULT __stdcall VarDecNeg(LPDECIMAL, LPDECIMAL); 

extern "C" HRESULT __stdcall VarDecRound(LPDECIMAL, int, LPDECIMAL); 

extern "C" HRESULT __stdcall VarDecCmp(LPDECIMAL, LPDECIMAL); 
extern "C" HRESULT __stdcall VarDecCmpR8(LPDECIMAL, double); 




extern "C" HRESULT __stdcall VarCyAdd(CY, CY, LPCY); 
extern "C" HRESULT __stdcall VarCyMul(CY, CY, LPCY); 
extern "C" HRESULT __stdcall VarCyMulI4(CY, long, LPCY); 
extern "C" HRESULT __stdcall VarCyMulI8(CY, LONG64, LPCY); 
extern "C" HRESULT __stdcall VarCySub(CY, CY, LPCY); 

extern "C" HRESULT __stdcall VarCyAbs(CY, LPCY); 
extern "C" HRESULT __stdcall VarCyFix(CY, LPCY); 
extern "C" HRESULT __stdcall VarCyInt(CY, LPCY); 
extern "C" HRESULT __stdcall VarCyNeg(CY, LPCY); 

extern "C" HRESULT __stdcall VarCyRound(CY, int, LPCY); 

extern "C" HRESULT __stdcall VarCyCmp(CY, CY); 
extern "C" HRESULT __stdcall VarCyCmpR8(CY, double); 




extern "C" HRESULT __stdcall VarBstrCat(BSTR, BSTR, LPBSTR); 
extern "C" HRESULT __stdcall VarBstrCmp(BSTR, BSTR, LCID, ULONG); 
extern "C" HRESULT __stdcall VarR8Pow(double, double, double *); 
extern "C" HRESULT __stdcall VarR4CmpR8(float, double); 
extern "C" HRESULT __stdcall VarR8Round(double, int, double *); 
#line 813
typedef 
#line 810
struct UDATE { 
SYSTEMTIME st; 
USHORT wDayOfYear; 
} UDATE; 
#line 819
extern "C" __declspec( dllimport ) HRESULT __stdcall VarDateFromUdate(UDATE *, ULONG, DATE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarDateFromUdateEx(UDATE *, LCID, ULONG, DATE *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall VarUdateFromDate(DATE, ULONG, UDATE *); 




extern "C" __declspec( dllimport ) HRESULT __stdcall GetAltMonthNames(LCID, LPOLESTR **); 
#line 832
extern "C" __declspec( dllimport ) HRESULT __stdcall VarFormat(LPVARIANT, LPOLESTR, int, int, ULONG, BSTR *); 
#line 841
extern "C" __declspec( dllimport ) HRESULT __stdcall VarFormatDateTime(LPVARIANT, int, ULONG, BSTR *); 
#line 848
extern "C" __declspec( dllimport ) HRESULT __stdcall VarFormatNumber(LPVARIANT, int, int, int, int, ULONG, BSTR *); 
#line 858
extern "C" __declspec( dllimport ) HRESULT __stdcall VarFormatPercent(LPVARIANT, int, int, int, int, ULONG, BSTR *); 
#line 868
extern "C" __declspec( dllimport ) HRESULT __stdcall VarFormatCurrency(LPVARIANT, int, int, int, int, ULONG, BSTR *); 
#line 878
extern "C" __declspec( dllimport ) HRESULT __stdcall VarWeekdayName(int, int, int, ULONG, BSTR *); 
#line 886
extern "C" __declspec( dllimport ) HRESULT __stdcall VarMonthName(int, int, ULONG, BSTR *); 
#line 893
extern "C" __declspec( dllimport ) HRESULT __stdcall VarFormatFromTokens(LPVARIANT, LPOLESTR, LPBYTE, ULONG, BSTR *, LCID); 
#line 902
extern "C" __declspec( dllimport ) HRESULT __stdcall VarTokenizeFormatString(LPOLESTR, LPBYTE, int, int, int, LCID, int *); 
#line 916
extern "C" { typedef ITypeLib *LPTYPELIB; }
#line 924
extern "C" { typedef LONG DISPID; }
extern "C" { typedef DISPID MEMBERID; }
#line 937
extern "C" { typedef ITypeInfo *LPTYPEINFO; }
#line 944
extern "C" { typedef ITypeComp *LPTYPECOMP; }
#line 951
extern "C" { typedef ICreateTypeLib *LPCREATETYPELIB; }

extern "C" { typedef ICreateTypeInfo *LPCREATETYPEINFO; }
#line 962
extern "C" __declspec( dllimport ) ULONG __stdcall LHashValOfNameSysA(SYSKIND, LCID, LPCSTR); 
#line 967 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\oleauto.h"
extern "C" __declspec( dllimport ) ULONG __stdcall LHashValOfNameSys(SYSKIND, LCID, const OLECHAR *); 
#line 980
extern "C" __declspec( dllimport ) HRESULT __stdcall LoadTypeLib(LPCOLESTR, ITypeLib **); 
#line 989
typedef 
#line 984
enum tagREGKIND { 

REGKIND_DEFAULT, 
REGKIND_REGISTER, 
REGKIND_NONE
} REGKIND; 
#line 998
extern "C" __declspec( dllimport ) HRESULT __stdcall LoadTypeLibEx(LPCOLESTR, REGKIND, ITypeLib **); 




extern "C" __declspec( dllimport ) HRESULT __stdcall LoadRegTypeLib(const GUID &, WORD, WORD, LCID, ITypeLib **); 




extern "C" __declspec( dllimport ) HRESULT __stdcall QueryPathOfRegTypeLib(const GUID &, USHORT, USHORT, LCID, LPBSTR); 




extern "C" __declspec( dllimport ) HRESULT __stdcall RegisterTypeLib(ITypeLib *, LPCOLESTR, LPCOLESTR); 
#line 1019
extern "C" __declspec( dllimport ) HRESULT __stdcall UnRegisterTypeLib(const GUID &, WORD, WORD, LCID, SYSKIND); 




extern "C" __declspec( dllimport ) HRESULT __stdcall RegisterTypeLibForUser(ITypeLib *, OLECHAR *, OLECHAR *); 




extern "C" __declspec( dllimport ) HRESULT __stdcall UnRegisterTypeLibForUser(const GUID &, WORD, WORD, LCID, SYSKIND); 
#line 1036
extern "C" __declspec( dllimport ) HRESULT __stdcall CreateTypeLib(SYSKIND, LPCOLESTR, ICreateTypeLib **); 


extern "C" __declspec( dllimport ) HRESULT __stdcall CreateTypeLib2(SYSKIND, LPCOLESTR, ICreateTypeLib2 **); 
#line 1047
extern "C" { typedef IDispatch *LPDISPATCH; }




typedef 
#line 1049
struct tagPARAMDATA { 
OLECHAR *szName; 
VARTYPE vt; 
} PARAMDATA; typedef tagPARAMDATA *LPPARAMDATA; 
#line 1063
typedef 
#line 1054
struct tagMETHODDATA { 
OLECHAR *szName; 
PARAMDATA *ppdata; 
DISPID dispid; 
UINT iMeth; 
CALLCONV cc; 
UINT cArgs; 
WORD wFlags; 
VARTYPE vtReturn; 
} METHODDATA; typedef tagMETHODDATA *LPMETHODDATA; 




typedef 
#line 1065
struct tagINTERFACEDATA { 
METHODDATA *pmethdata; 
UINT cMembers; 
} INTERFACEDATA; typedef tagINTERFACEDATA *LPINTERFACEDATA; 
#line 1075
extern "C" __declspec( dllimport ) HRESULT __stdcall DispGetParam(DISPPARAMS *, UINT, VARTYPE, VARIANT *, UINT *); 
#line 1085
extern "C" __declspec( dllimport ) HRESULT __stdcall DispGetIDsOfNames(ITypeInfo *, OLECHAR **, UINT, DISPID *); 




extern "C" __declspec( dllimport ) HRESULT __stdcall DispInvoke(void *, ITypeInfo *, DISPID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *); 
#line 1096
extern "C" __declspec( dllimport ) HRESULT __stdcall CreateDispTypeInfo(INTERFACEDATA *, LCID, ITypeInfo **); 
#line 1102
extern "C" __declspec( dllimport ) HRESULT __stdcall CreateStdDispatch(IUnknown *, void *, ITypeInfo *, IUnknown **); 
#line 1108
extern "C" __declspec( dllimport ) HRESULT __stdcall DispCallFunc(void *, ULONG_PTR, CALLCONV, VARTYPE, UINT, VARTYPE *, VARIANTARG **, VARIANT *); 
#line 1121
extern "C" __declspec( dllimport ) HRESULT __stdcall RegisterActiveObject(IUnknown *, const IID &, DWORD, DWORD *); 


extern "C" __declspec( dllimport ) HRESULT __stdcall RevokeActiveObject(DWORD, void *); 

extern "C" __declspec( dllimport ) HRESULT __stdcall GetActiveObject(const IID &, void *, IUnknown **); 
#line 1133
extern "C" __declspec( dllimport ) HRESULT __stdcall SetErrorInfo(ULONG, IErrorInfo *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall GetErrorInfo(ULONG, IErrorInfo **); 
extern "C" __declspec( dllimport ) HRESULT __stdcall CreateErrorInfo(ICreateErrorInfo **); 
#line 1141
extern "C" __declspec( dllimport ) HRESULT __stdcall GetRecordInfoFromTypeInfo(ITypeInfo *, IRecordInfo **); 


extern "C" __declspec( dllimport ) HRESULT __stdcall GetRecordInfoFromGuids(const GUID &, ULONG, ULONG, LCID, const GUID &, IRecordInfo **); 
#line 1152
extern "C" __declspec( dllimport ) ULONG __stdcall OaBuildVersion(); 

extern "C" __declspec( dllimport ) void __stdcall ClearCustData(LPCUSTDATA); 
#line 27 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack ( pop )
#line 118 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\ole2.h"
extern "C" __declspec( dllimport ) HRESULT __stdcall CreateDataAdviseHolder(LPDATAADVISEHOLDER *); 
#line 127 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\ole2.h"
extern "C" __declspec( dllimport ) DWORD __stdcall OleBuildVersion(); 


extern "C" __declspec( dllimport ) HRESULT __stdcall ReadClassStg(LPSTORAGE, CLSID *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall WriteClassStg(LPSTORAGE, const IID &); 
extern "C" __declspec( dllimport ) HRESULT __stdcall ReadClassStm(LPSTREAM, CLSID *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall WriteClassStm(LPSTREAM, const IID &); 
extern "C" __declspec( dllimport ) HRESULT __stdcall WriteFmtUserTypeStg(LPSTORAGE, CLIPFORMAT, LPOLESTR); 
extern "C" __declspec( dllimport ) HRESULT __stdcall ReadFmtUserTypeStg(LPSTORAGE, CLIPFORMAT *, LPOLESTR *); 




extern "C" __declspec( dllimport ) HRESULT __stdcall OleInitialize(LPVOID); 
extern "C" __declspec( dllimport ) void __stdcall OleUninitialize(); 
#line 147
extern "C" __declspec( dllimport ) HRESULT __stdcall OleQueryLinkFromData(LPDATAOBJECT); 
extern "C" __declspec( dllimport ) HRESULT __stdcall OleQueryCreateFromData(LPDATAOBJECT); 




extern "C" __declspec( dllimport ) HRESULT __stdcall OleCreate(const IID &, const IID &, DWORD, LPFORMATETC, LPOLECLIENTSITE, LPSTORAGE, LPVOID *); 



extern "C" __declspec( dllimport ) HRESULT __stdcall OleCreateEx(const IID &, const IID &, DWORD, DWORD, ULONG, DWORD *, LPFORMATETC, IAdviseSink *, DWORD *, LPOLECLIENTSITE, LPSTORAGE, LPVOID *); 
#line 163
extern "C" __declspec( dllimport ) HRESULT __stdcall OleCreateFromData(LPDATAOBJECT, const IID &, DWORD, LPFORMATETC, LPOLECLIENTSITE, LPSTORAGE, LPVOID *); 




extern "C" __declspec( dllimport ) HRESULT __stdcall OleCreateFromDataEx(LPDATAOBJECT, const IID &, DWORD, DWORD, ULONG, DWORD *, LPFORMATETC, IAdviseSink *, DWORD *, LPOLECLIENTSITE, LPSTORAGE, LPVOID *); 
#line 174
extern "C" __declspec( dllimport ) HRESULT __stdcall OleCreateLinkFromData(LPDATAOBJECT, const IID &, DWORD, LPFORMATETC, LPOLECLIENTSITE, LPSTORAGE, LPVOID *); 




extern "C" __declspec( dllimport ) HRESULT __stdcall OleCreateLinkFromDataEx(LPDATAOBJECT, const IID &, DWORD, DWORD, ULONG, DWORD *, LPFORMATETC, IAdviseSink *, DWORD *, LPOLECLIENTSITE, LPSTORAGE, LPVOID *); 
#line 185
extern "C" __declspec( dllimport ) HRESULT __stdcall OleCreateStaticFromData(LPDATAOBJECT, const IID &, DWORD, LPFORMATETC, LPOLECLIENTSITE, LPSTORAGE, LPVOID *); 
#line 191
extern "C" __declspec( dllimport ) HRESULT __stdcall OleCreateLink(LPMONIKER, const IID &, DWORD, LPFORMATETC, LPOLECLIENTSITE, LPSTORAGE, LPVOID *); 



extern "C" __declspec( dllimport ) HRESULT __stdcall OleCreateLinkEx(LPMONIKER, const IID &, DWORD, DWORD, ULONG, DWORD *, LPFORMATETC, IAdviseSink *, DWORD *, LPOLECLIENTSITE, LPSTORAGE, LPVOID *); 
#line 201
extern "C" __declspec( dllimport ) HRESULT __stdcall OleCreateLinkToFile(LPCOLESTR, const IID &, DWORD, LPFORMATETC, LPOLECLIENTSITE, LPSTORAGE, LPVOID *); 



extern "C" __declspec( dllimport ) HRESULT __stdcall OleCreateLinkToFileEx(LPCOLESTR, const IID &, DWORD, DWORD, ULONG, DWORD *, LPFORMATETC, IAdviseSink *, DWORD *, LPOLECLIENTSITE, LPSTORAGE, LPVOID *); 
#line 211
extern "C" __declspec( dllimport ) HRESULT __stdcall OleCreateFromFile(const IID &, LPCOLESTR, const IID &, DWORD, LPFORMATETC, LPOLECLIENTSITE, LPSTORAGE, LPVOID *); 



extern "C" __declspec( dllimport ) HRESULT __stdcall OleCreateFromFileEx(const IID &, LPCOLESTR, const IID &, DWORD, DWORD, ULONG, DWORD *, LPFORMATETC, IAdviseSink *, DWORD *, LPOLECLIENTSITE, LPSTORAGE, LPVOID *); 
#line 221
extern "C" __declspec( dllimport ) HRESULT __stdcall OleLoad(LPSTORAGE, const IID &, LPOLECLIENTSITE, LPVOID *); 


extern "C" __declspec( dllimport ) HRESULT __stdcall OleSave(LPPERSISTSTORAGE, LPSTORAGE, BOOL); 

extern "C" __declspec( dllimport ) HRESULT __stdcall OleLoadFromStream(LPSTREAM, const IID &, LPVOID *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall OleSaveToStream(LPPERSISTSTREAM, LPSTREAM); 


extern "C" __declspec( dllimport ) HRESULT __stdcall OleSetContainedObject(LPUNKNOWN, BOOL); 
extern "C" __declspec( dllimport ) HRESULT __stdcall OleNoteObjectVisible(LPUNKNOWN, BOOL); 




extern "C" __declspec( dllimport ) HRESULT __stdcall RegisterDragDrop(HWND, LPDROPTARGET); 
extern "C" __declspec( dllimport ) HRESULT __stdcall RevokeDragDrop(HWND); 
extern "C" __declspec( dllimport ) HRESULT __stdcall DoDragDrop(LPDATAOBJECT, LPDROPSOURCE, DWORD, LPDWORD); 




extern "C" __declspec( dllimport ) HRESULT __stdcall OleSetClipboard(LPDATAOBJECT); 
extern "C" __declspec( dllimport ) HRESULT __stdcall OleGetClipboard(LPDATAOBJECT *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall OleFlushClipboard(); 
extern "C" __declspec( dllimport ) HRESULT __stdcall OleIsCurrentClipboard(LPDATAOBJECT); 




extern "C" __declspec( dllimport ) HOLEMENU __stdcall OleCreateMenuDescriptor(HMENU, LPOLEMENUGROUPWIDTHS); 

extern "C" __declspec( dllimport ) HRESULT __stdcall OleSetMenuDescriptor(HOLEMENU, HWND, HWND, LPOLEINPLACEFRAME, LPOLEINPLACEACTIVEOBJECT); 



extern "C" __declspec( dllimport ) HRESULT __stdcall OleDestroyMenuDescriptor(HOLEMENU); 

extern "C" __declspec( dllimport ) HRESULT __stdcall OleTranslateAccelerator(LPOLEINPLACEFRAME, LPOLEINPLACEFRAMEINFO, LPMSG); 




extern "C" __declspec( dllimport ) HANDLE __stdcall OleDuplicateData(HANDLE, CLIPFORMAT, UINT); 


extern "C" __declspec( dllimport ) HRESULT __stdcall OleDraw(LPUNKNOWN, DWORD, HDC, LPCRECT); 


extern "C" __declspec( dllimport ) HRESULT __stdcall OleRun(LPUNKNOWN); 
extern "C" __declspec( dllimport ) BOOL __stdcall OleIsRunning(LPOLEOBJECT); 
extern "C" __declspec( dllimport ) HRESULT __stdcall OleLockRunning(LPUNKNOWN, BOOL, BOOL); 
extern "C" __declspec( dllimport ) void __stdcall ReleaseStgMedium(LPSTGMEDIUM); 
extern "C" __declspec( dllimport ) HRESULT __stdcall CreateOleAdviseHolder(LPOLEADVISEHOLDER *); 

extern "C" __declspec( dllimport ) HRESULT __stdcall OleCreateDefaultHandler(const IID &, LPUNKNOWN, const IID &, LPVOID *); 


extern "C" __declspec( dllimport ) HRESULT __stdcall OleCreateEmbeddingHelper(const IID &, LPUNKNOWN, DWORD, LPCLASSFACTORY, const IID &, LPVOID *); 



extern "C" __declspec( dllimport ) BOOL __stdcall IsAccelerator(HACCEL, int, LPMSG, WORD *); 



extern "C" __declspec( dllimport ) HGLOBAL __stdcall OleGetIconOfFile(LPOLESTR, BOOL); 

extern "C" __declspec( dllimport ) HGLOBAL __stdcall OleGetIconOfClass(const IID &, LPOLESTR, BOOL); 


extern "C" __declspec( dllimport ) HGLOBAL __stdcall OleMetafilePictFromIconAndLabel(HICON, LPOLESTR, LPOLESTR, UINT); 
#line 299
extern "C" __declspec( dllimport ) HRESULT __stdcall OleRegGetUserType(const IID &, DWORD, LPOLESTR *); 


extern "C" __declspec( dllimport ) HRESULT __stdcall OleRegGetMiscStatus(const IID &, DWORD, DWORD *); 


extern "C" __declspec( dllimport ) HRESULT __stdcall OleRegEnumFormatEtc(const IID &, DWORD, LPENUMFORMATETC *); 


extern "C" __declspec( dllimport ) HRESULT __stdcall OleRegEnumVerbs(const IID &, LPENUMOLEVERB *); 
#line 335
typedef struct _OLESTREAM *LPOLESTREAM; 
#line 341
typedef 
#line 337
struct _OLESTREAMVTBL { 

DWORD (__stdcall *Get)(LPOLESTREAM, void *, DWORD); 
DWORD (__stdcall *Put)(LPOLESTREAM, const void *, DWORD); 
} OLESTREAMVTBL; 
typedef OLESTREAMVTBL *LPOLESTREAMVTBL; 




typedef 
#line 344
struct _OLESTREAM { 

LPOLESTREAMVTBL lpstbl; 
} OLESTREAM; 


extern "C" __declspec( dllimport ) HRESULT __stdcall OleConvertOLESTREAMToIStorage(LPOLESTREAM, LPSTORAGE, const DVTARGETDEVICE *); 




extern "C" __declspec( dllimport ) HRESULT __stdcall OleConvertIStorageToOLESTREAM(LPSTORAGE, LPOLESTREAM); 
#line 361
extern "C" __declspec( dllimport ) HRESULT __stdcall GetHGlobalFromILockBytes(LPLOCKBYTES, HGLOBAL *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall CreateILockBytesOnHGlobal(HGLOBAL, BOOL, LPLOCKBYTES *); 


extern "C" __declspec( dllimport ) HRESULT __stdcall GetHGlobalFromStream(LPSTREAM, HGLOBAL *); 
extern "C" __declspec( dllimport ) HRESULT __stdcall CreateStreamOnHGlobal(HGLOBAL, BOOL, LPSTREAM *); 
#line 372
extern "C" __declspec( dllimport ) HRESULT __stdcall OleDoAutoConvert(LPSTORAGE, LPCLSID); 
extern "C" __declspec( dllimport ) HRESULT __stdcall OleGetAutoConvert(const IID &, LPCLSID); 
extern "C" __declspec( dllimport ) HRESULT __stdcall OleSetAutoConvert(const IID &, const IID &); 
extern "C" __declspec( dllimport ) HRESULT __stdcall GetConvertStg(LPSTORAGE); 
extern "C" __declspec( dllimport ) HRESULT __stdcall SetConvertStg(LPSTORAGE, BOOL); 


extern "C" __declspec( dllimport ) HRESULT __stdcall OleConvertIStorageToOLESTREAMEx(LPSTORAGE, CLIPFORMAT, LONG, LONG, DWORD, LPSTGMEDIUM, LPOLESTREAM); 
#line 389
extern "C" __declspec( dllimport ) HRESULT __stdcall OleConvertOLESTREAMToIStorageEx(LPOLESTREAM, LPSTORAGE, CLIPFORMAT *, LONG *, LONG *, DWORD *, LPSTGMEDIUM); 
#line 27 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack ( pop )
#line 23 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\commdlg.h"
extern "C" const GUID IID_IPrintDialogCallback; 
#line 30
extern "C" const GUID IID_IPrintDialogServices; 
#line 24 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\pshpack1.h"
#pragma warning(disable:4103)

#pragma pack ( push, 1 )
#line 93 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\commdlg.h"
extern "C" { typedef UINT_PTR (__stdcall *LPOFNHOOKPROC)(HWND, UINT, WPARAM, LPARAM); }
#line 130 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\commdlg.h"
extern "C" { typedef 
#line 109
struct tagOFN_NT4A { 
DWORD lStructSize; 
HWND hwndOwner; 
HINSTANCE hInstance; 
LPCSTR lpstrFilter; 
LPSTR lpstrCustomFilter; 
DWORD nMaxCustFilter; 
DWORD nFilterIndex; 
LPSTR lpstrFile; 
DWORD nMaxFile; 
LPSTR lpstrFileTitle; 
DWORD nMaxFileTitle; 
LPCSTR lpstrInitialDir; 
LPCSTR lpstrTitle; 
DWORD Flags; 
WORD nFileOffset; 
WORD nFileExtension; 
LPCSTR lpstrDefExt; 
LPARAM lCustData; 
LPOFNHOOKPROC lpfnHook; 
LPCSTR lpTemplateName; 
} OPENFILENAME_NT4A; }extern "C" { typedef tagOFN_NT4A *LPOPENFILENAME_NT4A; }
#line 152
extern "C" { typedef 
#line 131
struct tagOFN_NT4W { 
DWORD lStructSize; 
HWND hwndOwner; 
HINSTANCE hInstance; 
LPCWSTR lpstrFilter; 
LPWSTR lpstrCustomFilter; 
DWORD nMaxCustFilter; 
DWORD nFilterIndex; 
LPWSTR lpstrFile; 
DWORD nMaxFile; 
LPWSTR lpstrFileTitle; 
DWORD nMaxFileTitle; 
LPCWSTR lpstrInitialDir; 
LPCWSTR lpstrTitle; 
DWORD Flags; 
WORD nFileOffset; 
WORD nFileExtension; 
LPCWSTR lpstrDefExt; 
LPARAM lCustData; 
LPOFNHOOKPROC lpfnHook; 
LPCWSTR lpTemplateName; 
} OPENFILENAME_NT4W; }extern "C" { typedef tagOFN_NT4W *LPOPENFILENAME_NT4W; }




extern "C" { typedef OPENFILENAME_NT4A OPENFILENAME_NT4; }
extern "C" { typedef LPOPENFILENAME_NT4A LPOPENFILENAME_NT4; }
#line 191 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\commdlg.h"
extern "C" { typedef 
#line 161 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\commdlg.h"
struct tagOFNA { 
DWORD lStructSize; 
HWND hwndOwner; 
HINSTANCE hInstance; 
LPCSTR lpstrFilter; 
LPSTR lpstrCustomFilter; 
DWORD nMaxCustFilter; 
DWORD nFilterIndex; 
LPSTR lpstrFile; 
DWORD nMaxFile; 
LPSTR lpstrFileTitle; 
DWORD nMaxFileTitle; 
LPCSTR lpstrInitialDir; 
LPCSTR lpstrTitle; 
DWORD Flags; 
WORD nFileOffset; 
WORD nFileExtension; 
LPCSTR lpstrDefExt; 
LPARAM lCustData; 
LPOFNHOOKPROC lpfnHook; 
LPCSTR lpTemplateName; 
#line 187
void *pvReserved; 
DWORD dwReserved; 
DWORD FlagsEx; 
#line 191 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\commdlg.h"
} OPENFILENAMEA; }extern "C" { typedef tagOFNA *LPOPENFILENAMEA; }
#line 222 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\commdlg.h"
extern "C" { typedef 
#line 192 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\commdlg.h"
struct tagOFNW { 
DWORD lStructSize; 
HWND hwndOwner; 
HINSTANCE hInstance; 
LPCWSTR lpstrFilter; 
LPWSTR lpstrCustomFilter; 
DWORD nMaxCustFilter; 
DWORD nFilterIndex; 
LPWSTR lpstrFile; 
DWORD nMaxFile; 
LPWSTR lpstrFileTitle; 
DWORD nMaxFileTitle; 
LPCWSTR lpstrInitialDir; 
LPCWSTR lpstrTitle; 
DWORD Flags; 
WORD nFileOffset; 
WORD nFileExtension; 
LPCWSTR lpstrDefExt; 
LPARAM lCustData; 
LPOFNHOOKPROC lpfnHook; 
LPCWSTR lpTemplateName; 
#line 218
void *pvReserved; 
DWORD dwReserved; 
DWORD FlagsEx; 
#line 222 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\commdlg.h"
} OPENFILENAMEW; }extern "C" { typedef tagOFNW *LPOPENFILENAMEW; }




extern "C" { typedef OPENFILENAMEA OPENFILENAME; }
extern "C" { typedef LPOPENFILENAMEA LPOPENFILENAME; }
#line 242 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\commdlg.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetOpenFileNameA(LPOPENFILENAMEA); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetOpenFileNameW(LPOPENFILENAMEW); } 
#line 249 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\commdlg.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetSaveFileNameA(LPOPENFILENAMEA); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetSaveFileNameW(LPOPENFILENAMEW); } 
#line 258 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\commdlg.h"
extern "C" { extern __declspec( dllimport ) short __stdcall GetFileTitleA(LPCSTR, LPSTR, WORD); } 
extern "C" { extern __declspec( dllimport ) short __stdcall GetFileTitleW(LPCWSTR, LPWSTR, WORD); } 
#line 318 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\commdlg.h"
extern "C" { typedef UINT_PTR (__stdcall *LPCCHOOKPROC)(HWND, UINT, WPARAM, LPARAM); }
#line 327
extern "C" { typedef 
#line 322
struct _OFNOTIFYA { 

NMHDR hdr; 
LPOPENFILENAMEA lpOFN; 
LPSTR pszFile; 
} OFNOTIFYA; }extern "C" { typedef _OFNOTIFYA *LPOFNOTIFYA; }
#line 334
extern "C" { typedef 
#line 329
struct _OFNOTIFYW { 

NMHDR hdr; 
LPOPENFILENAMEW lpOFN; 
LPWSTR pszFile; 
} OFNOTIFYW; }extern "C" { typedef _OFNOTIFYW *LPOFNOTIFYW; }




extern "C" { typedef OFNOTIFYA OFNOTIFY; }
extern "C" { typedef LPOFNOTIFYA LPOFNOTIFY; }
#line 351 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\commdlg.h"
extern "C" { typedef 
#line 345
struct _OFNOTIFYEXA { 

NMHDR hdr; 
LPOPENFILENAMEA lpOFN; 
LPVOID psf; 
LPVOID pidl; 
} OFNOTIFYEXA; }extern "C" { typedef _OFNOTIFYEXA *LPOFNOTIFYEXA; }
#line 359
extern "C" { typedef 
#line 353
struct _OFNOTIFYEXW { 

NMHDR hdr; 
LPOPENFILENAMEW lpOFN; 
LPVOID psf; 
LPVOID pidl; 
} OFNOTIFYEXW; }extern "C" { typedef _OFNOTIFYEXW *LPOFNOTIFYEXW; }




extern "C" { typedef OFNOTIFYEXA OFNOTIFYEX; }
extern "C" { typedef LPOFNOTIFYEXA LPOFNOTIFYEX; }
#line 472 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\commdlg.h"
extern "C" { typedef 
#line 462
struct tagCHOOSECOLORA { 
DWORD lStructSize; 
HWND hwndOwner; 
HWND hInstance; 
COLORREF rgbResult; 
COLORREF *lpCustColors; 
DWORD Flags; 
LPARAM lCustData; 
LPCCHOOKPROC lpfnHook; 
LPCSTR lpTemplateName; 
} CHOOSECOLORA; }extern "C" { typedef tagCHOOSECOLORA *LPCHOOSECOLORA; }
#line 483
extern "C" { typedef 
#line 473
struct tagCHOOSECOLORW { 
DWORD lStructSize; 
HWND hwndOwner; 
HWND hInstance; 
COLORREF rgbResult; 
COLORREF *lpCustColors; 
DWORD Flags; 
LPARAM lCustData; 
LPCCHOOKPROC lpfnHook; 
LPCWSTR lpTemplateName; 
} CHOOSECOLORW; }extern "C" { typedef tagCHOOSECOLORW *LPCHOOSECOLORW; }




extern "C" { typedef CHOOSECOLORA CHOOSECOLOR; }
extern "C" { typedef LPCHOOSECOLORA LPCHOOSECOLOR; }
#line 525 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\commdlg.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ChooseColorA(LPCHOOSECOLORA); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ChooseColorW(LPCHOOSECOLORW); } 
#line 545 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\commdlg.h"
extern "C" { typedef UINT_PTR (__stdcall *LPFRHOOKPROC)(HWND, UINT, WPARAM, LPARAM); }
#line 560
extern "C" { typedef 
#line 547
struct tagFINDREPLACEA { 
DWORD lStructSize; 
HWND hwndOwner; 
HINSTANCE hInstance; 

DWORD Flags; 
LPSTR lpstrFindWhat; 
LPSTR lpstrReplaceWith; 
WORD wFindWhatLen; 
WORD wReplaceWithLen; 
LPARAM lCustData; 
LPFRHOOKPROC lpfnHook; 
LPCSTR lpTemplateName; 
} FINDREPLACEA; }extern "C" { typedef tagFINDREPLACEA *LPFINDREPLACEA; }
#line 574
extern "C" { typedef 
#line 561
struct tagFINDREPLACEW { 
DWORD lStructSize; 
HWND hwndOwner; 
HINSTANCE hInstance; 

DWORD Flags; 
LPWSTR lpstrFindWhat; 
LPWSTR lpstrReplaceWith; 
WORD wFindWhatLen; 
WORD wReplaceWithLen; 
LPARAM lCustData; 
LPFRHOOKPROC lpfnHook; 
LPCWSTR lpTemplateName; 
} FINDREPLACEW; }extern "C" { typedef tagFINDREPLACEW *LPFINDREPLACEW; }




extern "C" { typedef FINDREPLACEA FINDREPLACE; }
extern "C" { typedef LPFINDREPLACEA LPFINDREPLACE; }
#line 607 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\commdlg.h"
extern "C" { extern __declspec( dllimport ) HWND __stdcall FindTextA(LPFINDREPLACEA); } 
extern "C" { extern __declspec( dllimport ) HWND __stdcall FindTextW(LPFINDREPLACEW); } 
#line 615 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\commdlg.h"
extern "C" { extern __declspec( dllimport ) HWND __stdcall ReplaceTextA(LPFINDREPLACEA); } 
extern "C" { extern __declspec( dllimport ) HWND __stdcall ReplaceTextW(LPFINDREPLACEW); } 
#line 632 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\commdlg.h"
extern "C" { typedef UINT_PTR (__stdcall *LPCFHOOKPROC)(HWND, UINT, WPARAM, LPARAM); }
#line 656
extern "C" { typedef 
#line 634
struct tagCHOOSEFONTA { 
DWORD lStructSize; 
HWND hwndOwner; 
HDC hDC; 
LPLOGFONTA lpLogFont; 
INT iPointSize; 
DWORD Flags; 
COLORREF rgbColors; 
LPARAM lCustData; 
LPCFHOOKPROC lpfnHook; 
LPCSTR lpTemplateName; 
HINSTANCE hInstance; 

LPSTR lpszStyle; 

WORD nFontType; 


WORD ___MISSING_ALIGNMENT__; 
INT nSizeMin; 
INT nSizeMax; 

} CHOOSEFONTA; }
#line 679
extern "C" { typedef 
#line 657
struct tagCHOOSEFONTW { 
DWORD lStructSize; 
HWND hwndOwner; 
HDC hDC; 
LPLOGFONTW lpLogFont; 
INT iPointSize; 
DWORD Flags; 
COLORREF rgbColors; 
LPARAM lCustData; 
LPCFHOOKPROC lpfnHook; 
LPCWSTR lpTemplateName; 
HINSTANCE hInstance; 

LPWSTR lpszStyle; 

WORD nFontType; 


WORD ___MISSING_ALIGNMENT__; 
INT nSizeMin; 
INT nSizeMax; 

} CHOOSEFONTW; }



extern "C" { typedef CHOOSEFONTA CHOOSEFONT; }
#line 685 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\commdlg.h"
extern "C" { typedef CHOOSEFONTA *LPCHOOSEFONTA; }
extern "C" { typedef CHOOSEFONTW *LPCHOOSEFONTW; }



extern "C" { typedef LPCHOOSEFONTA LPCHOOSEFONT; }
#line 692 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\commdlg.h"
extern "C" { typedef const CHOOSEFONTA *PCCHOOSEFONTA; }
extern "C" { typedef const CHOOSEFONTW *PCCHOOSEFONTW; }




extern "C" { typedef CHOOSEFONTA CHOOSEFONT; }
extern "C" { typedef PCCHOOSEFONTA PCCHOOSEFONT; }
#line 702 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\commdlg.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ChooseFontA(LPCHOOSEFONTA); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ChooseFontW(LPCHOOSEFONTW); } 
#line 814 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\commdlg.h"
extern "C" { typedef UINT_PTR (__stdcall *LPPRINTHOOKPROC)(HWND, UINT, WPARAM, LPARAM); }
extern "C" { typedef UINT_PTR (__stdcall *LPSETUPHOOKPROC)(HWND, UINT, WPARAM, LPARAM); }
#line 837
extern "C" { typedef 
#line 817
struct tagPDA { 
DWORD lStructSize; 
HWND hwndOwner; 
HGLOBAL hDevMode; 
HGLOBAL hDevNames; 
HDC hDC; 
DWORD Flags; 
WORD nFromPage; 
WORD nToPage; 
WORD nMinPage; 
WORD nMaxPage; 
WORD nCopies; 
HINSTANCE hInstance; 
LPARAM lCustData; 
LPPRINTHOOKPROC lpfnPrintHook; 
LPSETUPHOOKPROC lpfnSetupHook; 
LPCSTR lpPrintTemplateName; 
LPCSTR lpSetupTemplateName; 
HGLOBAL hPrintTemplate; 
HGLOBAL hSetupTemplate; 
} PRINTDLGA; }extern "C" { typedef tagPDA *LPPRINTDLGA; }
#line 858
extern "C" { typedef 
#line 838
struct tagPDW { 
DWORD lStructSize; 
HWND hwndOwner; 
HGLOBAL hDevMode; 
HGLOBAL hDevNames; 
HDC hDC; 
DWORD Flags; 
WORD nFromPage; 
WORD nToPage; 
WORD nMinPage; 
WORD nMaxPage; 
WORD nCopies; 
HINSTANCE hInstance; 
LPARAM lCustData; 
LPPRINTHOOKPROC lpfnPrintHook; 
LPSETUPHOOKPROC lpfnSetupHook; 
LPCWSTR lpPrintTemplateName; 
LPCWSTR lpSetupTemplateName; 
HGLOBAL hPrintTemplate; 
HGLOBAL hSetupTemplate; 
} PRINTDLGW; }extern "C" { typedef tagPDW *LPPRINTDLGW; }




extern "C" { typedef PRINTDLGA PRINTDLG; }
extern "C" { typedef LPPRINTDLGA LPPRINTDLG; }
#line 867 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\commdlg.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PrintDlgA(LPPRINTDLGA); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PrintDlgW(LPPRINTDLGW); } 
#line 912 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\commdlg.h"
extern "C" { struct __declspec( novtable ) __declspec(uuid("5852a2c3-6530-11d1-b6a3-0000f8757bf9")) IPrintDialogCallback : public IUnknown { 


virtual __declspec( nothrow ) HRESULT __stdcall QueryInterface(const IID &, LPVOID *) = 0; 
virtual __declspec( nothrow ) ULONG __stdcall AddRef() = 0; 
virtual __declspec( nothrow ) ULONG __stdcall Release() = 0; 


virtual __declspec( nothrow ) HRESULT __stdcall InitDone() = 0; 
virtual __declspec( nothrow ) HRESULT __stdcall SelectionChange() = 0; 
virtual __declspec( nothrow ) HRESULT __stdcall HandleMessage(HWND, UINT, WPARAM, LPARAM, LRESULT *) = 0; 
}; }
#line 944
extern "C" { struct __declspec( novtable ) __declspec(uuid("509aaeda-5639-11d1-b6a1-0000f8757bf9")) IPrintDialogServices : public IUnknown { 


virtual __declspec( nothrow ) HRESULT __stdcall QueryInterface(const IID &, LPVOID *) = 0; 
virtual __declspec( nothrow ) ULONG __stdcall AddRef() = 0; 
virtual __declspec( nothrow ) ULONG __stdcall Release() = 0; 


virtual __declspec( nothrow ) HRESULT __stdcall GetCurrentDevMode(LPDEVMODE, UINT *) = 0; 
virtual __declspec( nothrow ) HRESULT __stdcall GetCurrentPrinterName(LPWSTR, UINT *) = 0; 
virtual __declspec( nothrow ) HRESULT __stdcall GetCurrentPortName(LPWSTR, UINT *) = 0; 
}; }
#line 964
extern "C" { typedef 
#line 961
struct tagPRINTPAGERANGE { 
DWORD nFromPage; 
DWORD nToPage; 
} PRINTPAGERANGE; }
extern "C" { typedef PRINTPAGERANGE *LPPRINTPAGERANGE; }
extern "C" { typedef const PRINTPAGERANGE *PCPRINTPAGERANGE; }
#line 994
extern "C" { typedef 
#line 972
struct tagPDEXA { 
DWORD lStructSize; 
HWND hwndOwner; 
HGLOBAL hDevMode; 
HGLOBAL hDevNames; 
HDC hDC; 
DWORD Flags; 
DWORD Flags2; 
DWORD ExclusionFlags; 
DWORD nPageRanges; 
DWORD nMaxPageRanges; 
LPPRINTPAGERANGE lpPageRanges; 
DWORD nMinPage; 
DWORD nMaxPage; 
DWORD nCopies; 
HINSTANCE hInstance; 
LPCSTR lpPrintTemplateName; 
LPUNKNOWN lpCallback; 
DWORD nPropertyPages; 
HPROPSHEETPAGE *lphPropertyPages; 
DWORD nStartPage; 
DWORD dwResultAction; 
} PRINTDLGEXA; }extern "C" { typedef tagPDEXA *LPPRINTDLGEXA; }
#line 1020
extern "C" { typedef 
#line 998
struct tagPDEXW { 
DWORD lStructSize; 
HWND hwndOwner; 
HGLOBAL hDevMode; 
HGLOBAL hDevNames; 
HDC hDC; 
DWORD Flags; 
DWORD Flags2; 
DWORD ExclusionFlags; 
DWORD nPageRanges; 
DWORD nMaxPageRanges; 
LPPRINTPAGERANGE lpPageRanges; 
DWORD nMinPage; 
DWORD nMaxPage; 
DWORD nCopies; 
HINSTANCE hInstance; 
LPCWSTR lpPrintTemplateName; 
LPUNKNOWN lpCallback; 
DWORD nPropertyPages; 
HPROPSHEETPAGE *lphPropertyPages; 
DWORD nStartPage; 
DWORD dwResultAction; 
} PRINTDLGEXW; }extern "C" { typedef tagPDEXW *LPPRINTDLGEXW; }




extern "C" { typedef PRINTDLGEXA PRINTDLGEX; }
extern "C" { typedef LPPRINTDLGEXA LPPRINTDLGEX; }
#line 1031 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\commdlg.h"
extern "C" { extern __declspec( dllimport ) HRESULT __stdcall PrintDlgExA(LPPRINTDLGEXA); } 
extern "C" { extern __declspec( dllimport ) HRESULT __stdcall PrintDlgExW(LPPRINTDLGEXW); } 
#line 1109 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\commdlg.h"
extern "C" { typedef 
#line 1104
struct tagDEVNAMES { 
WORD wDriverOffset; 
WORD wDeviceOffset; 
WORD wOutputOffset; 
WORD wDefault; 
} DEVNAMES; }
extern "C" { typedef DEVNAMES *LPDEVNAMES; }
extern "C" { typedef const DEVNAMES *PCDEVNAMES; }




extern "C" { extern __declspec( dllimport ) DWORD __stdcall CommDlgExtendedError(); } 
#line 1127
extern "C" { typedef UINT_PTR (__stdcall *LPPAGEPAINTHOOK)(HWND, UINT, WPARAM, LPARAM); }
extern "C" { typedef UINT_PTR (__stdcall *LPPAGESETUPHOOK)(HWND, UINT, WPARAM, LPARAM); }
#line 1146
extern "C" { typedef 
#line 1130
struct tagPSDA { 

DWORD lStructSize; 
HWND hwndOwner; 
HGLOBAL hDevMode; 
HGLOBAL hDevNames; 
DWORD Flags; 
POINT ptPaperSize; 
RECT rtMinMargin; 
RECT rtMargin; 
HINSTANCE hInstance; 
LPARAM lCustData; 
LPPAGESETUPHOOK lpfnPageSetupHook; 
LPPAGEPAINTHOOK lpfnPagePaintHook; 
LPCSTR lpPageSetupTemplateName; 
HGLOBAL hPageSetupTemplate; 
} PAGESETUPDLGA; }extern "C" { typedef tagPSDA *LPPAGESETUPDLGA; }
#line 1163
extern "C" { typedef 
#line 1147
struct tagPSDW { 

DWORD lStructSize; 
HWND hwndOwner; 
HGLOBAL hDevMode; 
HGLOBAL hDevNames; 
DWORD Flags; 
POINT ptPaperSize; 
RECT rtMinMargin; 
RECT rtMargin; 
HINSTANCE hInstance; 
LPARAM lCustData; 
LPPAGESETUPHOOK lpfnPageSetupHook; 
LPPAGEPAINTHOOK lpfnPagePaintHook; 
LPCWSTR lpPageSetupTemplateName; 
HGLOBAL hPageSetupTemplate; 
} PAGESETUPDLGW; }extern "C" { typedef tagPSDW *LPPAGESETUPDLGW; }




extern "C" { typedef PAGESETUPDLGA PAGESETUPDLG; }
extern "C" { typedef LPPAGESETUPDLGA LPPAGESETUPDLG; }
#line 1172 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\commdlg.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PageSetupDlgA(LPPAGESETUPDLGA); } 
extern "C" { extern __declspec( dllimport ) BOOL __stdcall PageSetupDlgW(LPPAGESETUPDLGW); } 
#line 27 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\poppack.h"
#pragma warning(disable:4103)

#pragma pack ( pop )
#line 102 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\stralign.h"
extern "C" { static __inline __declspec(deprecated) PUWSTR ua_wcscpy(PUWSTR 
Destination, PCUWSTR 
Source) 

{ 
#pragma warning(push)
#pragma warning(disable:4995)
#pragma warning(disable:4996)
return wcscpy(Destination, Source); 
#pragma warning(pop)
} } 
#line 291 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsvc.h"
extern "C" { typedef 
#line 289
struct _SERVICE_DESCRIPTIONA { 
LPSTR lpDescription; 
} SERVICE_DESCRIPTIONA; }extern "C" { typedef _SERVICE_DESCRIPTIONA *LPSERVICE_DESCRIPTIONA; }
#line 297
extern "C" { typedef 
#line 295
struct _SERVICE_DESCRIPTIONW { 
LPWSTR lpDescription; 
} SERVICE_DESCRIPTIONW; }extern "C" { typedef _SERVICE_DESCRIPTIONW *LPSERVICE_DESCRIPTIONW; }




extern "C" { typedef SERVICE_DESCRIPTIONA SERVICE_DESCRIPTION; }
extern "C" { typedef LPSERVICE_DESCRIPTIONA LPSERVICE_DESCRIPTION; }
#line 314 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsvc.h"
extern "C" { typedef 
#line 309
enum _SC_ACTION_TYPE { 
SC_ACTION_NONE, 
SC_ACTION_RESTART, 
SC_ACTION_REBOOT, 
SC_ACTION_RUN_COMMAND
} SC_ACTION_TYPE; }




extern "C" { typedef 
#line 316
struct _SC_ACTION { 
SC_ACTION_TYPE Type; 
DWORD Delay; 
} SC_ACTION; }extern "C" { typedef _SC_ACTION *LPSC_ACTION; }
#line 333
extern "C" { typedef 
#line 321
struct _SERVICE_FAILURE_ACTIONSA { 
DWORD dwResetPeriod; 
LPSTR lpRebootMsg; 
LPSTR lpCommand; 



DWORD cActions; 



SC_ACTION *lpsaActions; 
} SERVICE_FAILURE_ACTIONSA; }extern "C" { typedef _SERVICE_FAILURE_ACTIONSA *LPSERVICE_FAILURE_ACTIONSA; }
#line 346
extern "C" { typedef 
#line 334
struct _SERVICE_FAILURE_ACTIONSW { 
DWORD dwResetPeriod; 
LPWSTR lpRebootMsg; 
LPWSTR lpCommand; 



DWORD cActions; 



SC_ACTION *lpsaActions; 
} SERVICE_FAILURE_ACTIONSW; }extern "C" { typedef _SERVICE_FAILURE_ACTIONSW *LPSERVICE_FAILURE_ACTIONSW; }




extern "C" { typedef SERVICE_FAILURE_ACTIONSA SERVICE_FAILURE_ACTIONS; }
extern "C" { typedef LPSERVICE_FAILURE_ACTIONSA LPSERVICE_FAILURE_ACTIONS; }
#line 360 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsvc.h"
extern "C" { typedef 
#line 358
struct _SERVICE_DELAYED_AUTO_START_INFO { 
BOOL fDelayedAutostart; 
} SERVICE_DELAYED_AUTO_START_INFO; }extern "C" { typedef _SERVICE_DELAYED_AUTO_START_INFO *LPSERVICE_DELAYED_AUTO_START_INFO; }
#line 367
extern "C" { typedef 
#line 365
struct _SERVICE_FAILURE_ACTIONS_FLAG { 
BOOL fFailureActionsOnNonCrashFailures; 
} SERVICE_FAILURE_ACTIONS_FLAG; }extern "C" { typedef _SERVICE_FAILURE_ACTIONS_FLAG *LPSERVICE_FAILURE_ACTIONS_FLAG; }
#line 374
extern "C" { typedef 
#line 372
struct _SERVICE_SID_INFO { 
DWORD dwServiceSidType; 
} SERVICE_SID_INFO; }extern "C" { typedef _SERVICE_SID_INFO *LPSERVICE_SID_INFO; }
#line 381
extern "C" { typedef 
#line 379
struct _SERVICE_REQUIRED_PRIVILEGES_INFOA { 
LPSTR pmszRequiredPrivileges; 
} SERVICE_REQUIRED_PRIVILEGES_INFOA; }extern "C" { typedef _SERVICE_REQUIRED_PRIVILEGES_INFOA *LPSERVICE_REQUIRED_PRIVILEGES_INFOA; }
#line 387
extern "C" { typedef 
#line 385
struct _SERVICE_REQUIRED_PRIVILEGES_INFOW { 
LPWSTR pmszRequiredPrivileges; 
} SERVICE_REQUIRED_PRIVILEGES_INFOW; }extern "C" { typedef _SERVICE_REQUIRED_PRIVILEGES_INFOW *LPSERVICE_REQUIRED_PRIVILEGES_INFOW; }




extern "C" { typedef SERVICE_REQUIRED_PRIVILEGES_INFOA SERVICE_REQUIRED_PRIVILEGES_INFO; }
extern "C" { typedef LPSERVICE_REQUIRED_PRIVILEGES_INFOA LPSERVICE_REQUIRED_PRIVILEGES_INFO; }
#line 401 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsvc.h"
extern "C" { typedef 
#line 399
struct _SERVICE_PRESHUTDOWN_INFO { 
DWORD dwPreshutdownTimeout; 
} SERVICE_PRESHUTDOWN_INFO; }extern "C" { typedef _SERVICE_PRESHUTDOWN_INFO *LPSERVICE_PRESHUTDOWN_INFO; }
#line 407
extern "C" { struct SC_HANDLE__ { int unused; }; }extern "C" { typedef SC_HANDLE__ *SC_HANDLE; }
extern "C" { typedef SC_HANDLE *LPSC_HANDLE; }

extern "C" { struct SERVICE_STATUS_HANDLE__ { int unused; }; }extern "C" { typedef SERVICE_STATUS_HANDLE__ *SERVICE_STATUS_HANDLE; }
#line 418
extern "C" { typedef 
#line 416
enum _SC_STATUS_TYPE { 
SC_STATUS_PROCESS_INFO
} SC_STATUS_TYPE; }
#line 425
extern "C" { typedef 
#line 423
enum _SC_ENUM_TYPE { 
SC_ENUM_PROCESS_INFO
} SC_ENUM_TYPE; }
#line 440
extern "C" { typedef 
#line 432
struct _SERVICE_STATUS { 
DWORD dwServiceType; 
DWORD dwCurrentState; 
DWORD dwControlsAccepted; 
DWORD dwWin32ExitCode; 
DWORD dwServiceSpecificExitCode; 
DWORD dwCheckPoint; 
DWORD dwWaitHint; 
} SERVICE_STATUS; }extern "C" { typedef _SERVICE_STATUS *LPSERVICE_STATUS; }
#line 452
extern "C" { typedef 
#line 442
struct _SERVICE_STATUS_PROCESS { 
DWORD dwServiceType; 
DWORD dwCurrentState; 
DWORD dwControlsAccepted; 
DWORD dwWin32ExitCode; 
DWORD dwServiceSpecificExitCode; 
DWORD dwCheckPoint; 
DWORD dwWaitHint; 
DWORD dwProcessId; 
DWORD dwServiceFlags; 
} SERVICE_STATUS_PROCESS; }extern "C" { typedef _SERVICE_STATUS_PROCESS *LPSERVICE_STATUS_PROCESS; }
#line 463
extern "C" { typedef 
#line 459
struct _ENUM_SERVICE_STATUSA { 
LPSTR lpServiceName; 
LPSTR lpDisplayName; 
SERVICE_STATUS ServiceStatus; 
} ENUM_SERVICE_STATUSA; }extern "C" { typedef _ENUM_SERVICE_STATUSA *LPENUM_SERVICE_STATUSA; }




extern "C" { typedef 
#line 464
struct _ENUM_SERVICE_STATUSW { 
LPWSTR lpServiceName; 
LPWSTR lpDisplayName; 
SERVICE_STATUS ServiceStatus; 
} ENUM_SERVICE_STATUSW; }extern "C" { typedef _ENUM_SERVICE_STATUSW *LPENUM_SERVICE_STATUSW; }




extern "C" { typedef ENUM_SERVICE_STATUSA ENUM_SERVICE_STATUS; }
extern "C" { typedef LPENUM_SERVICE_STATUSA LPENUM_SERVICE_STATUS; }
#line 481 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsvc.h"
extern "C" { typedef 
#line 477
struct _ENUM_SERVICE_STATUS_PROCESSA { 
LPSTR lpServiceName; 
LPSTR lpDisplayName; 
SERVICE_STATUS_PROCESS ServiceStatusProcess; 
} ENUM_SERVICE_STATUS_PROCESSA; }extern "C" { typedef _ENUM_SERVICE_STATUS_PROCESSA *LPENUM_SERVICE_STATUS_PROCESSA; }




extern "C" { typedef 
#line 482
struct _ENUM_SERVICE_STATUS_PROCESSW { 
LPWSTR lpServiceName; 
LPWSTR lpDisplayName; 
SERVICE_STATUS_PROCESS ServiceStatusProcess; 
} ENUM_SERVICE_STATUS_PROCESSW; }extern "C" { typedef _ENUM_SERVICE_STATUS_PROCESSW *LPENUM_SERVICE_STATUS_PROCESSW; }




extern "C" { typedef ENUM_SERVICE_STATUS_PROCESSA ENUM_SERVICE_STATUS_PROCESS; }
extern "C" { typedef LPENUM_SERVICE_STATUS_PROCESSA LPENUM_SERVICE_STATUS_PROCESS; }
#line 499 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsvc.h"
extern "C" { typedef LPVOID SC_LOCK; }
#line 505
extern "C" { typedef 
#line 501
struct _QUERY_SERVICE_LOCK_STATUSA { 
DWORD fIsLocked; 
LPSTR lpLockOwner; 
DWORD dwLockDuration; 
} QUERY_SERVICE_LOCK_STATUSA; }extern "C" { typedef _QUERY_SERVICE_LOCK_STATUSA *LPQUERY_SERVICE_LOCK_STATUSA; }




extern "C" { typedef 
#line 506
struct _QUERY_SERVICE_LOCK_STATUSW { 
DWORD fIsLocked; 
LPWSTR lpLockOwner; 
DWORD dwLockDuration; 
} QUERY_SERVICE_LOCK_STATUSW; }extern "C" { typedef _QUERY_SERVICE_LOCK_STATUSW *LPQUERY_SERVICE_LOCK_STATUSW; }




extern "C" { typedef QUERY_SERVICE_LOCK_STATUSA QUERY_SERVICE_LOCK_STATUS; }
extern "C" { typedef LPQUERY_SERVICE_LOCK_STATUSA LPQUERY_SERVICE_LOCK_STATUS; }
#line 535 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsvc.h"
extern "C" { typedef 
#line 525
struct _QUERY_SERVICE_CONFIGA { 
DWORD dwServiceType; 
DWORD dwStartType; 
DWORD dwErrorControl; 
LPSTR lpBinaryPathName; 
LPSTR lpLoadOrderGroup; 
DWORD dwTagId; 
LPSTR lpDependencies; 
LPSTR lpServiceStartName; 
LPSTR lpDisplayName; 
} QUERY_SERVICE_CONFIGA; }extern "C" { typedef _QUERY_SERVICE_CONFIGA *LPQUERY_SERVICE_CONFIGA; }
#line 546
extern "C" { typedef 
#line 536
struct _QUERY_SERVICE_CONFIGW { 
DWORD dwServiceType; 
DWORD dwStartType; 
DWORD dwErrorControl; 
LPWSTR lpBinaryPathName; 
LPWSTR lpLoadOrderGroup; 
DWORD dwTagId; 
LPWSTR lpDependencies; 
LPWSTR lpServiceStartName; 
LPWSTR lpDisplayName; 
} QUERY_SERVICE_CONFIGW; }extern "C" { typedef _QUERY_SERVICE_CONFIGW *LPQUERY_SERVICE_CONFIGW; }




extern "C" { typedef QUERY_SERVICE_CONFIGA QUERY_SERVICE_CONFIG; }
extern "C" { typedef LPQUERY_SERVICE_CONFIGA LPQUERY_SERVICE_CONFIG; }
#line 561 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsvc.h"
extern "C" { typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONW)(DWORD, LPWSTR *); }




extern "C" { typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONA)(DWORD, LPSTR *); }
#line 585 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsvc.h"
extern "C" { typedef 
#line 582
struct _SERVICE_TABLE_ENTRYA { 
LPSTR lpServiceName; 
LPSERVICE_MAIN_FUNCTIONA lpServiceProc; 
} SERVICE_TABLE_ENTRYA; }extern "C" { typedef _SERVICE_TABLE_ENTRYA *LPSERVICE_TABLE_ENTRYA; }



extern "C" { typedef 
#line 586
struct _SERVICE_TABLE_ENTRYW { 
LPWSTR lpServiceName; 
LPSERVICE_MAIN_FUNCTIONW lpServiceProc; 
} SERVICE_TABLE_ENTRYW; }extern "C" { typedef _SERVICE_TABLE_ENTRYW *LPSERVICE_TABLE_ENTRYW; }




extern "C" { typedef SERVICE_TABLE_ENTRYA SERVICE_TABLE_ENTRY; }
extern "C" { typedef LPSERVICE_TABLE_ENTRYA LPSERVICE_TABLE_ENTRY; }
#line 602 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsvc.h"
extern "C" { typedef void (__stdcall *LPHANDLER_FUNCTION)(DWORD); }



extern "C" { typedef DWORD (__stdcall *LPHANDLER_FUNCTION_EX)(DWORD, DWORD, LPVOID, LPVOID); }
#line 618
extern "C" { typedef void (__stdcall *PFN_SC_NOTIFY_CALLBACK)(PVOID); }
#line 631
extern "C" { typedef 
#line 625
struct _SERVICE_NOTIFY_1 { 
DWORD dwVersion; 
PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback; 
PVOID pContext; 
DWORD dwNotificationStatus; 
SERVICE_STATUS_PROCESS ServiceStatus; 
} SERVICE_NOTIFY_1; }extern "C" { typedef _SERVICE_NOTIFY_1 *PSERVICE_NOTIFY_1; }
#line 641
extern "C" { typedef 
#line 633
struct _SERVICE_NOTIFY_2A { 
DWORD dwVersion; 
PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback; 
PVOID pContext; 
DWORD dwNotificationStatus; 
SERVICE_STATUS_PROCESS ServiceStatus; 
DWORD dwNotificationTriggered; 
LPSTR pszServiceNames; 
} SERVICE_NOTIFY_2A; }extern "C" { typedef _SERVICE_NOTIFY_2A *PSERVICE_NOTIFY_2A; }
#line 650
extern "C" { typedef 
#line 642
struct _SERVICE_NOTIFY_2W { 
DWORD dwVersion; 
PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback; 
PVOID pContext; 
DWORD dwNotificationStatus; 
SERVICE_STATUS_PROCESS ServiceStatus; 
DWORD dwNotificationTriggered; 
LPWSTR pszServiceNames; 
} SERVICE_NOTIFY_2W; }extern "C" { typedef _SERVICE_NOTIFY_2W *PSERVICE_NOTIFY_2W; }




extern "C" { typedef SERVICE_NOTIFY_2A SERVICE_NOTIFY_2; }
extern "C" { typedef PSERVICE_NOTIFY_2A PSERVICE_NOTIFY_2; }
#line 659 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsvc.h"
extern "C" { typedef SERVICE_NOTIFY_2A SERVICE_NOTIFYA; }extern "C" { typedef SERVICE_NOTIFY_2A *PSERVICE_NOTIFYA; }
extern "C" { typedef SERVICE_NOTIFY_2W SERVICE_NOTIFYW; }extern "C" { typedef SERVICE_NOTIFY_2W *PSERVICE_NOTIFYW; }




extern "C" { typedef SERVICE_NOTIFYA SERVICE_NOTIFY; }
extern "C" { typedef PSERVICE_NOTIFYA PSERVICE_NOTIFY; }
#line 676 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsvc.h"
extern "C" { typedef 
#line 672
struct _SERVICE_CONTROL_STATUS_REASON_PARAMSA { 
DWORD dwReason; 
LPSTR pszComment; 
SERVICE_STATUS_PROCESS ServiceStatus; 
} SERVICE_CONTROL_STATUS_REASON_PARAMSA; }extern "C" { typedef _SERVICE_CONTROL_STATUS_REASON_PARAMSA *PSERVICE_CONTROL_STATUS_REASON_PARAMSA; }
#line 684
extern "C" { typedef 
#line 680
struct _SERVICE_CONTROL_STATUS_REASON_PARAMSW { 
DWORD dwReason; 
LPWSTR pszComment; 
SERVICE_STATUS_PROCESS ServiceStatus; 
} SERVICE_CONTROL_STATUS_REASON_PARAMSW; }extern "C" { typedef _SERVICE_CONTROL_STATUS_REASON_PARAMSW *PSERVICE_CONTROL_STATUS_REASON_PARAMSW; }




extern "C" { typedef SERVICE_CONTROL_STATUS_REASON_PARAMSA SERVICE_CONTROL_STATUS_REASON_PARAMS; }
extern "C" { typedef PSERVICE_CONTROL_STATUS_REASON_PARAMSA PSERVICE_CONTROL_STATUS_REASON_PARAMS; }
#line 701 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsvc.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ChangeServiceConfigA(SC_HANDLE, DWORD, DWORD, DWORD, LPCSTR, LPCSTR, LPDWORD, LPCSTR, LPCSTR, LPCSTR, LPCSTR); } 
#line 717
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ChangeServiceConfigW(SC_HANDLE, DWORD, DWORD, DWORD, LPCWSTR, LPCWSTR, LPDWORD, LPCWSTR, LPCWSTR, LPCWSTR, LPCWSTR); } 
#line 739 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsvc.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ChangeServiceConfig2A(SC_HANDLE, DWORD, LPVOID); } 
#line 747
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ChangeServiceConfig2W(SC_HANDLE, DWORD, LPVOID); } 
#line 761 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsvc.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall CloseServiceHandle(SC_HANDLE); } 
#line 768
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ControlService(SC_HANDLE, DWORD, LPSERVICE_STATUS); } 
#line 778
extern "C" { extern __declspec( dllimport ) SC_HANDLE __stdcall CreateServiceA(SC_HANDLE, LPCSTR, LPCSTR, DWORD, DWORD, DWORD, DWORD, LPCSTR, LPCSTR, LPDWORD, LPCSTR, LPCSTR, LPCSTR); } 
#line 797
extern "C" { extern __declspec( dllimport ) SC_HANDLE __stdcall CreateServiceW(SC_HANDLE, LPCWSTR, LPCWSTR, DWORD, DWORD, DWORD, DWORD, LPCWSTR, LPCWSTR, LPDWORD, LPCWSTR, LPCWSTR, LPCWSTR); } 
#line 821 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsvc.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall DeleteService(SC_HANDLE); } 
#line 829
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumDependentServicesA(SC_HANDLE, DWORD, LPENUM_SERVICE_STATUSA, DWORD, LPDWORD, LPDWORD); } 
#line 842
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumDependentServicesW(SC_HANDLE, DWORD, LPENUM_SERVICE_STATUSW, DWORD, LPDWORD, LPDWORD); } 
#line 861 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsvc.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumServicesStatusA(SC_HANDLE, DWORD, DWORD, LPENUM_SERVICE_STATUSA, DWORD, LPDWORD, LPDWORD, LPDWORD); } 
#line 876
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumServicesStatusW(SC_HANDLE, DWORD, DWORD, LPENUM_SERVICE_STATUSW, DWORD, LPDWORD, LPDWORD, LPDWORD); } 
#line 897 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsvc.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumServicesStatusExA(SC_HANDLE, SC_ENUM_TYPE, DWORD, DWORD, LPBYTE, DWORD, LPDWORD, LPDWORD, LPDWORD, LPCSTR); } 
#line 914
extern "C" { extern __declspec( dllimport ) BOOL __stdcall EnumServicesStatusExW(SC_HANDLE, SC_ENUM_TYPE, DWORD, DWORD, LPBYTE, DWORD, LPDWORD, LPDWORD, LPDWORD, LPCWSTR); } 
#line 937 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsvc.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetServiceKeyNameA(SC_HANDLE, LPCSTR, LPSTR, LPDWORD); } 
#line 948
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetServiceKeyNameW(SC_HANDLE, LPCWSTR, LPWSTR, LPDWORD); } 
#line 965 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsvc.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetServiceDisplayNameA(SC_HANDLE, LPCSTR, LPSTR, LPDWORD); } 
#line 976
extern "C" { extern __declspec( dllimport ) BOOL __stdcall GetServiceDisplayNameW(SC_HANDLE, LPCWSTR, LPWSTR, LPDWORD); } 
#line 992 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsvc.h"
extern "C" { extern __declspec( dllimport ) SC_LOCK __stdcall LockServiceDatabase(SC_HANDLE); } 
#line 999
extern "C" { extern __declspec( dllimport ) BOOL __stdcall NotifyBootConfigStatus(BOOL); } 
#line 1007
extern "C" { extern __declspec( dllimport ) SC_HANDLE __stdcall OpenSCManagerA(LPCSTR, LPCSTR, DWORD); } 
#line 1016
extern "C" { extern __declspec( dllimport ) SC_HANDLE __stdcall OpenSCManagerW(LPCWSTR, LPCWSTR, DWORD); } 
#line 1031 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsvc.h"
extern "C" { extern __declspec( dllimport ) SC_HANDLE __stdcall OpenServiceA(SC_HANDLE, LPCSTR, DWORD); } 
#line 1040
extern "C" { extern __declspec( dllimport ) SC_HANDLE __stdcall OpenServiceW(SC_HANDLE, LPCWSTR, DWORD); } 
#line 1055 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsvc.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall QueryServiceConfigA(SC_HANDLE, LPQUERY_SERVICE_CONFIGA, DWORD, LPDWORD); } 
#line 1066
extern "C" { extern __declspec( dllimport ) BOOL __stdcall QueryServiceConfigW(SC_HANDLE, LPQUERY_SERVICE_CONFIGW, DWORD, LPDWORD); } 
#line 1083 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsvc.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall QueryServiceConfig2A(SC_HANDLE, DWORD, LPBYTE, DWORD, LPDWORD); } 
#line 1095
extern "C" { extern __declspec( dllimport ) BOOL __stdcall QueryServiceConfig2W(SC_HANDLE, DWORD, LPBYTE, DWORD, LPDWORD); } 
#line 1113 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsvc.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall QueryServiceLockStatusA(SC_HANDLE, LPQUERY_SERVICE_LOCK_STATUSA, DWORD, LPDWORD); } 
#line 1124
extern "C" { extern __declspec( dllimport ) BOOL __stdcall QueryServiceLockStatusW(SC_HANDLE, LPQUERY_SERVICE_LOCK_STATUSW, DWORD, LPDWORD); } 
#line 1141 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsvc.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall QueryServiceObjectSecurity(SC_HANDLE, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR, DWORD, LPDWORD); } 
#line 1154
extern "C" { extern __declspec( dllimport ) BOOL __stdcall QueryServiceStatus(SC_HANDLE, LPSERVICE_STATUS); } 
#line 1163
extern "C" { extern __declspec( dllimport ) BOOL __stdcall QueryServiceStatusEx(SC_HANDLE, SC_STATUS_TYPE, LPBYTE, DWORD, LPDWORD); } 
#line 1176
extern "C" { extern __declspec( dllimport ) SERVICE_STATUS_HANDLE __stdcall RegisterServiceCtrlHandlerA(LPCSTR, LPHANDLER_FUNCTION); } 
#line 1185
extern "C" { extern __declspec( dllimport ) SERVICE_STATUS_HANDLE __stdcall RegisterServiceCtrlHandlerW(LPCWSTR, LPHANDLER_FUNCTION); } 
#line 1200 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsvc.h"
extern "C" { extern __declspec( dllimport ) SERVICE_STATUS_HANDLE __stdcall RegisterServiceCtrlHandlerExA(LPCSTR, LPHANDLER_FUNCTION_EX, LPVOID); } 
#line 1210
extern "C" { extern __declspec( dllimport ) SERVICE_STATUS_HANDLE __stdcall RegisterServiceCtrlHandlerExW(LPCWSTR, LPHANDLER_FUNCTION_EX, LPVOID); } 
#line 1225 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsvc.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetServiceObjectSecurity(SC_HANDLE, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR); } 
#line 1234
extern "C" { extern __declspec( dllimport ) BOOL __stdcall SetServiceStatus(SERVICE_STATUS_HANDLE, LPSERVICE_STATUS); } 
#line 1242
extern "C" { extern __declspec( dllimport ) BOOL __stdcall StartServiceCtrlDispatcherA(const SERVICE_TABLE_ENTRYA *); } 
#line 1248
extern "C" { extern __declspec( dllimport ) BOOL __stdcall StartServiceCtrlDispatcherW(const SERVICE_TABLE_ENTRYW *); } 
#line 1261 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsvc.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall StartServiceA(SC_HANDLE, DWORD, LPCSTR *); } 
#line 1270
extern "C" { extern __declspec( dllimport ) BOOL __stdcall StartServiceW(SC_HANDLE, DWORD, LPCWSTR *); } 
#line 1285 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsvc.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall UnlockServiceDatabase(SC_LOCK); } 
#line 1292
extern "C" { extern __declspec( dllimport ) DWORD __stdcall NotifyServiceStatusChangeA(SC_HANDLE, DWORD, PSERVICE_NOTIFYA); } 
#line 1300
extern "C" { extern __declspec( dllimport ) DWORD __stdcall NotifyServiceStatusChangeW(SC_HANDLE, DWORD, PSERVICE_NOTIFYW); } 
#line 1314 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\winsvc.h"
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ControlServiceExA(SC_HANDLE, DWORD, DWORD, PVOID); } 
#line 1323
extern "C" { extern __declspec( dllimport ) BOOL __stdcall ControlServiceExW(SC_HANDLE, DWORD, DWORD, PVOID); } 
#line 43 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\mcx.h"
typedef 
#line 16
struct _MODEMDEVCAPS { 
DWORD dwActualSize; 
DWORD dwRequiredSize; 
DWORD dwDevSpecificOffset; 
DWORD dwDevSpecificSize; 


DWORD dwModemProviderVersion; 
DWORD dwModemManufacturerOffset; 
DWORD dwModemManufacturerSize; 
DWORD dwModemModelOffset; 
DWORD dwModemModelSize; 
DWORD dwModemVersionOffset; 
DWORD dwModemVersionSize; 


DWORD dwDialOptions; 
DWORD dwCallSetupFailTimer; 
DWORD dwInactivityTimeout; 
DWORD dwSpeakerVolume; 
DWORD dwSpeakerMode; 
DWORD dwModemOptions; 
DWORD dwMaxDTERate; 
DWORD dwMaxDCERate; 


BYTE abVariablePortion[1]; 
} MODEMDEVCAPS; typedef _MODEMDEVCAPS *PMODEMDEVCAPS; typedef _MODEMDEVCAPS *LPMODEMDEVCAPS; 
#line 64
typedef 
#line 45
struct _MODEMSETTINGS { 
DWORD dwActualSize; 
DWORD dwRequiredSize; 
DWORD dwDevSpecificOffset; 
DWORD dwDevSpecificSize; 


DWORD dwCallSetupFailTimer; 
DWORD dwInactivityTimeout; 
DWORD dwSpeakerVolume; 
DWORD dwSpeakerMode; 
DWORD dwPreferredModemOptions; 


DWORD dwNegotiatedModemOptions; 
DWORD dwNegotiatedDCERate; 


BYTE abVariablePortion[1]; 
} MODEMSETTINGS; typedef _MODEMSETTINGS *PMODEMSETTINGS; typedef _MODEMSETTINGS *LPMODEMSETTINGS; 
#line 20 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\imm.h"
extern "C" { struct HIMC__ { int unused; }; }extern "C" { typedef HIMC__ *HIMC; }
extern "C" { struct HIMCC__ { int unused; }; }extern "C" { typedef HIMCC__ *HIMCC; }
#line 27 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\imm.h"
extern "C" { typedef HKL *LPHKL; }
extern "C" { typedef UINT *LPUINT; }
#line 34
extern "C" { typedef 
#line 30
struct tagCOMPOSITIONFORM { 
DWORD dwStyle; 
POINT ptCurrentPos; 
RECT rcArea; 
} COMPOSITIONFORM; }extern "C" { typedef tagCOMPOSITIONFORM *PCOMPOSITIONFORM; }extern "C" { typedef tagCOMPOSITIONFORM *NPCOMPOSITIONFORM; }extern "C" { typedef tagCOMPOSITIONFORM *LPCOMPOSITIONFORM; }
#line 42
extern "C" { typedef 
#line 37
struct tagCANDIDATEFORM { 
DWORD dwIndex; 
DWORD dwStyle; 
POINT ptCurrentPos; 
RECT rcArea; 
} CANDIDATEFORM; }extern "C" { typedef tagCANDIDATEFORM *PCANDIDATEFORM; }extern "C" { typedef tagCANDIDATEFORM *NPCANDIDATEFORM; }extern "C" { typedef tagCANDIDATEFORM *LPCANDIDATEFORM; }
#line 53
extern "C" { typedef 
#line 45
struct tagCANDIDATELIST { 
DWORD dwSize; 
DWORD dwStyle; 
DWORD dwCount; 
DWORD dwSelection; 
DWORD dwPageStart; 
DWORD dwPageSize; 
DWORD dwOffset[1]; 
} CANDIDATELIST; }extern "C" { typedef tagCANDIDATELIST *PCANDIDATELIST; }extern "C" { typedef tagCANDIDATELIST *NPCANDIDATELIST; }extern "C" { typedef tagCANDIDATELIST *LPCANDIDATELIST; }




extern "C" { typedef 
#line 55
struct tagREGISTERWORDA { 
LPSTR lpReading; 
LPSTR lpWord; 
} REGISTERWORDA; }extern "C" { typedef tagREGISTERWORDA *PREGISTERWORDA; }extern "C" { typedef tagREGISTERWORDA *NPREGISTERWORDA; }extern "C" { typedef tagREGISTERWORDA *LPREGISTERWORDA; }



extern "C" { typedef 
#line 59
struct tagREGISTERWORDW { 
LPWSTR lpReading; 
LPWSTR lpWord; 
} REGISTERWORDW; }extern "C" { typedef tagREGISTERWORDW *PREGISTERWORDW; }extern "C" { typedef tagREGISTERWORDW *NPREGISTERWORDW; }extern "C" { typedef tagREGISTERWORDW *LPREGISTERWORDW; }
#line 69
extern "C" { typedef REGISTERWORDA REGISTERWORD; }
extern "C" { typedef PREGISTERWORDA PREGISTERWORD; }
extern "C" { typedef NPREGISTERWORDA NPREGISTERWORD; }
extern "C" { typedef LPREGISTERWORDA LPREGISTERWORD; }
#line 86 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\imm.h"
extern "C" { typedef 
#line 77
struct tagRECONVERTSTRING { 
DWORD dwSize; 
DWORD dwVersion; 
DWORD dwStrLen; 
DWORD dwStrOffset; 
DWORD dwCompStrLen; 
DWORD dwCompStrOffset; 
DWORD dwTargetStrLen; 
DWORD dwTargetStrOffset; 
} RECONVERTSTRING; }extern "C" { typedef tagRECONVERTSTRING *PRECONVERTSTRING; }extern "C" { typedef tagRECONVERTSTRING *NPRECONVERTSTRING; }extern "C" { typedef tagRECONVERTSTRING *LPRECONVERTSTRING; }
#line 95 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\imm.h"
extern "C" { typedef 
#line 92
struct tagSTYLEBUFA { 
DWORD dwStyle; 
CHAR szDescription[32]; 
} STYLEBUFA; }extern "C" { typedef tagSTYLEBUFA *PSTYLEBUFA; }extern "C" { typedef tagSTYLEBUFA *NPSTYLEBUFA; }extern "C" { typedef tagSTYLEBUFA *LPSTYLEBUFA; }



extern "C" { typedef 
#line 96
struct tagSTYLEBUFW { 
DWORD dwStyle; 
WCHAR szDescription[32]; 
} STYLEBUFW; }extern "C" { typedef tagSTYLEBUFW *PSTYLEBUFW; }extern "C" { typedef tagSTYLEBUFW *NPSTYLEBUFW; }extern "C" { typedef tagSTYLEBUFW *LPSTYLEBUFW; }
#line 106
extern "C" { typedef STYLEBUFA STYLEBUF; }
extern "C" { typedef PSTYLEBUFA PSTYLEBUF; }
extern "C" { typedef NPSTYLEBUFA NPSTYLEBUF; }
extern "C" { typedef LPSTYLEBUFA LPSTYLEBUF; }
#line 127 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\imm.h"
extern "C" { typedef 
#line 117
struct tagIMEMENUITEMINFOA { 
UINT cbSize; 
UINT fType; 
UINT fState; 
UINT wID; 
HBITMAP hbmpChecked; 
HBITMAP hbmpUnchecked; 
DWORD dwItemData; 
CHAR szString[80]; 
HBITMAP hbmpItem; 
} IMEMENUITEMINFOA; }extern "C" { typedef tagIMEMENUITEMINFOA *PIMEMENUITEMINFOA; }extern "C" { typedef tagIMEMENUITEMINFOA *NPIMEMENUITEMINFOA; }extern "C" { typedef tagIMEMENUITEMINFOA *LPIMEMENUITEMINFOA; }
#line 138
extern "C" { typedef 
#line 128
struct tagIMEMENUITEMINFOW { 
UINT cbSize; 
UINT fType; 
UINT fState; 
UINT wID; 
HBITMAP hbmpChecked; 
HBITMAP hbmpUnchecked; 
DWORD dwItemData; 
WCHAR szString[80]; 
HBITMAP hbmpItem; 
} IMEMENUITEMINFOW; }extern "C" { typedef tagIMEMENUITEMINFOW *PIMEMENUITEMINFOW; }extern "C" { typedef tagIMEMENUITEMINFOW *NPIMEMENUITEMINFOW; }extern "C" { typedef tagIMEMENUITEMINFOW *LPIMEMENUITEMINFOW; }
#line 145
extern "C" { typedef IMEMENUITEMINFOA IMEMENUITEMINFO; }
extern "C" { typedef PIMEMENUITEMINFOA PIMEMENUITEMINFO; }
extern "C" { typedef NPIMEMENUITEMINFOA NPIMEMENUITEMINFO; }
extern "C" { typedef LPIMEMENUITEMINFOA LPIMEMENUITEMINFO; }
#line 157 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\imm.h"
extern "C" { typedef 
#line 151
struct tagIMECHARPOSITION { 
DWORD dwSize; 
DWORD dwCharPos; 
POINT pt; 
UINT cLineHeight; 
RECT rcDocument; 
} IMECHARPOSITION; }extern "C" { typedef tagIMECHARPOSITION *PIMECHARPOSITION; }extern "C" { typedef tagIMECHARPOSITION *NPIMECHARPOSITION; }extern "C" { typedef tagIMECHARPOSITION *LPIMECHARPOSITION; }

extern "C" { typedef BOOL (__stdcall *IMCENUMPROC)(HIMC, LPARAM); }
#line 167 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\imm.h"
extern "C" { extern HKL __stdcall ImmInstallIMEA(LPCSTR, LPCSTR); } 
extern "C" { extern HKL __stdcall ImmInstallIMEW(LPCWSTR, LPCWSTR); } 
#line 175 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\imm.h"
extern "C" { extern HWND __stdcall ImmGetDefaultIMEWnd(HWND); } 

extern "C" { extern UINT __stdcall ImmGetDescriptionA(HKL, LPSTR, UINT); } 
extern "C" { extern UINT __stdcall ImmGetDescriptionW(HKL, LPWSTR, UINT); } 
#line 185 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\imm.h"
extern "C" { extern UINT __stdcall ImmGetIMEFileNameA(HKL, LPSTR, UINT); } 
extern "C" { extern UINT __stdcall ImmGetIMEFileNameW(HKL, LPWSTR, UINT); } 
#line 193 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\imm.h"
extern "C" { extern DWORD __stdcall ImmGetProperty(HKL, DWORD); } 

extern "C" { extern BOOL __stdcall ImmIsIME(HKL); } 

extern "C" { extern BOOL __stdcall ImmSimulateHotKey(HWND, DWORD); } 

extern "C" { extern HIMC __stdcall ImmCreateContext(); } 
extern "C" { extern BOOL __stdcall ImmDestroyContext(HIMC); } 
extern "C" { extern HIMC __stdcall ImmGetContext(HWND); } 
extern "C" { extern BOOL __stdcall ImmReleaseContext(HWND, HIMC); } 
extern "C" { extern HIMC __stdcall ImmAssociateContext(HWND, HIMC); } 

extern "C" { extern BOOL __stdcall ImmAssociateContextEx(HWND, HIMC, DWORD); } 
#line 208 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\imm.h"
extern "C" { extern LONG __stdcall ImmGetCompositionStringA(HIMC, DWORD, LPVOID, DWORD); } 
extern "C" { extern LONG __stdcall ImmGetCompositionStringW(HIMC, DWORD, LPVOID, DWORD); } 
#line 216 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\imm.h"
extern "C" { extern BOOL __stdcall ImmSetCompositionStringA(HIMC, DWORD, LPVOID, DWORD, LPVOID, DWORD); } 
extern "C" { extern BOOL __stdcall ImmSetCompositionStringW(HIMC, DWORD, LPVOID, DWORD, LPVOID, DWORD); } 
#line 224 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\imm.h"
extern "C" { extern DWORD __stdcall ImmGetCandidateListCountA(HIMC, LPDWORD); } 
extern "C" { extern DWORD __stdcall ImmGetCandidateListCountW(HIMC, LPDWORD); } 
#line 232 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\imm.h"
extern "C" { extern DWORD __stdcall ImmGetCandidateListA(HIMC, DWORD, LPCANDIDATELIST, DWORD); } 
extern "C" { extern DWORD __stdcall ImmGetCandidateListW(HIMC, DWORD, LPCANDIDATELIST, DWORD); } 
#line 240 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\imm.h"
extern "C" { extern DWORD __stdcall ImmGetGuideLineA(HIMC, DWORD, LPSTR, DWORD); } 
extern "C" { extern DWORD __stdcall ImmGetGuideLineW(HIMC, DWORD, LPWSTR, DWORD); } 
#line 248 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\imm.h"
extern "C" { extern BOOL __stdcall ImmGetConversionStatus(HIMC, LPDWORD, LPDWORD); } 
extern "C" { extern BOOL __stdcall ImmSetConversionStatus(HIMC, DWORD, DWORD); } 
extern "C" { extern BOOL __stdcall ImmGetOpenStatus(HIMC); } 
extern "C" { extern BOOL __stdcall ImmSetOpenStatus(HIMC, BOOL); } 


extern "C" { extern BOOL __stdcall ImmGetCompositionFontA(HIMC, LPLOGFONTA); } 
extern "C" { extern BOOL __stdcall ImmGetCompositionFontW(HIMC, LPLOGFONTW); } 
#line 262 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\imm.h"
extern "C" { extern BOOL __stdcall ImmSetCompositionFontA(HIMC, LPLOGFONTA); } 
extern "C" { extern BOOL __stdcall ImmSetCompositionFontW(HIMC, LPLOGFONTW); } 
#line 271 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\imm.h"
extern "C" { extern BOOL __stdcall ImmConfigureIMEA(HKL, HWND, DWORD, LPVOID); } 
extern "C" { extern BOOL __stdcall ImmConfigureIMEW(HKL, HWND, DWORD, LPVOID); } 
#line 279 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\imm.h"
extern "C" { extern LRESULT __stdcall ImmEscapeA(HKL, HIMC, UINT, LPVOID); } 
extern "C" { extern LRESULT __stdcall ImmEscapeW(HKL, HIMC, UINT, LPVOID); } 
#line 287 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\imm.h"
extern "C" { extern DWORD __stdcall ImmGetConversionListA(HKL, HIMC, LPCSTR, LPCANDIDATELIST, DWORD, UINT); } 
extern "C" { extern DWORD __stdcall ImmGetConversionListW(HKL, HIMC, LPCWSTR, LPCANDIDATELIST, DWORD, UINT); } 
#line 295 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\imm.h"
extern "C" { extern BOOL __stdcall ImmNotifyIME(HIMC, DWORD, DWORD, DWORD); } 

extern "C" { extern BOOL __stdcall ImmGetStatusWindowPos(HIMC, LPPOINT); } 
extern "C" { extern BOOL __stdcall ImmSetStatusWindowPos(HIMC, LPPOINT); } 
extern "C" { extern BOOL __stdcall ImmGetCompositionWindow(HIMC, LPCOMPOSITIONFORM); } 
extern "C" { extern BOOL __stdcall ImmSetCompositionWindow(HIMC, LPCOMPOSITIONFORM); } 
extern "C" { extern BOOL __stdcall ImmGetCandidateWindow(HIMC, DWORD, LPCANDIDATEFORM); } 
extern "C" { extern BOOL __stdcall ImmSetCandidateWindow(HIMC, LPCANDIDATEFORM); } 

extern "C" { extern BOOL __stdcall ImmIsUIMessageA(HWND, UINT, WPARAM, LPARAM); } 
extern "C" { extern BOOL __stdcall ImmIsUIMessageW(HWND, UINT, WPARAM, LPARAM); } 
#line 313 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\imm.h"
extern "C" { extern UINT __stdcall ImmGetVirtualKey(HWND); } 

extern "C" { typedef int (__stdcall *REGISTERWORDENUMPROCA)(LPCSTR, DWORD, LPCSTR, LPVOID); }
extern "C" { typedef int (__stdcall *REGISTERWORDENUMPROCW)(LPCWSTR, DWORD, LPCWSTR, LPVOID); }
#line 323 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\imm.h"
extern "C" { extern BOOL __stdcall ImmRegisterWordA(HKL, LPCSTR, DWORD, LPCSTR); } 
extern "C" { extern BOOL __stdcall ImmRegisterWordW(HKL, LPCWSTR, DWORD, LPCWSTR); } 
#line 331 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\imm.h"
extern "C" { extern BOOL __stdcall ImmUnregisterWordA(HKL, LPCSTR, DWORD, LPCSTR); } 
extern "C" { extern BOOL __stdcall ImmUnregisterWordW(HKL, LPCWSTR, DWORD, LPCWSTR); } 
#line 339 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\imm.h"
extern "C" { extern UINT __stdcall ImmGetRegisterWordStyleA(HKL, UINT, LPSTYLEBUFA); } 
extern "C" { extern UINT __stdcall ImmGetRegisterWordStyleW(HKL, UINT, LPSTYLEBUFW); } 
#line 347 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\imm.h"
extern "C" { extern UINT __stdcall ImmEnumRegisterWordA(HKL, REGISTERWORDENUMPROCA, LPCSTR, DWORD, LPCSTR, LPVOID); } 
extern "C" { extern UINT __stdcall ImmEnumRegisterWordW(HKL, REGISTERWORDENUMPROCW, LPCWSTR, DWORD, LPCWSTR, LPVOID); } 
#line 356 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\imm.h"
extern "C" { extern BOOL __stdcall ImmDisableIME(DWORD); } 
extern "C" { extern BOOL __stdcall ImmEnumInputContext(DWORD, IMCENUMPROC, LPARAM); } 
extern "C" { extern DWORD __stdcall ImmGetImeMenuItemsA(HIMC, DWORD, DWORD, LPIMEMENUITEMINFOA, LPIMEMENUITEMINFOA, DWORD); } 
extern "C" { extern DWORD __stdcall ImmGetImeMenuItemsW(HIMC, DWORD, DWORD, LPIMEMENUITEMINFOW, LPIMEMENUITEMINFOW, DWORD); } 
#line 366 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\imm.h"
extern "C" { extern BOOL __stdcall ImmDisableTextFrameService(DWORD); } 
#line 238 "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include\\Windows.h"
#pragma warning(pop)
#line 11 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\deque"
#pragma warning(push,3)
#line 10
#pragma pack ( push, 8 )
#line 14 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\deque"
namespace std { 
#line 22
template < class _Ty,
 class _Ax = allocator < _Ty > >
 class deque;


template < class _Ty, class _Alloc, bool _Secure_validation >
 class _Deque_const_iterator




  : public _Ranit < _Ty, typename _Alloc :: difference_type,
   typename _Alloc :: const_pointer, typename _Alloc :: const_reference >

 {
public :

 enum { _EEN_HID = 0 };

 typedef _Deque_const_iterator < _Ty, _Alloc, _Secure_validation > _Myt;
 typedef deque < _Ty, _Alloc > _Mydeque;




 typedef _Container_base _Mydequebase;


 typedef random_access_iterator_tag iterator_category;
 typedef _Ty value_type;
 typedef typename _Alloc :: difference_type difference_type;
 typedef typename _Alloc :: const_pointer pointer;
 typedef typename _Alloc :: const_reference reference;

 typedef typename _Alloc :: size_type size_type;


 typedef typename _Secure_validation_helper < _Secure_validation > :: _Checked_iterator_category _Checked_iterator_category;
 typedef typename _If < _Secure_validation,
  _Deque_const_iterator < _Ty, _Alloc, false >,
  _Unchanged_checked_iterator_base_type_tag > :: _Result _Checked_iterator_base_type;

 friend _Deque_const_iterator < _Ty, _Alloc, false >;
 friend _Deque_const_iterator < _Ty, _Alloc, true >;

 _Deque_const_iterator < _Ty, _Alloc, false > _Checked_iterator_base ( ) const
 {
  _Deque_const_iterator < _Ty, _Alloc, false > _Base ( this -> _Myoff, this -> _Getmycont ( ) );
  return _Base;
 }

 void _Checked_iterator_assign_from_base ( _Deque_const_iterator < _Ty, _Alloc, false > _Base )
 {
  { if ( ! ( this -> _Same_container ( _Base ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); } __pragma(warning(push)) __pragma(warning(disable : 4548)) do { __noop ( this -> _Same_container ( _Base ) ); } while ( ( 0, 0 ) __pragma(warning(pop)) ); };
  this -> _Myoff = _Base . _Myoff;
 }










































  _Deque_const_iterator ( )
   {
   _Myoff = 0;
   }

  _Deque_const_iterator ( size_type _Off, const _Mydequebase * _Pdeque )
   {
   { __pragma(warning(push)); __pragma(warning(disable: 4127)); if ( _Secure_validation ) { { if ( ! ( _Pdeque != 0 && ( ( _Mydeque * ) _Pdeque ) -> _Myoff <= _Off && _Off <= ( ( ( _Mydeque * ) _Pdeque ) -> _Myoff + ( ( _Mydeque * ) _Pdeque ) -> _Mysize ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); } __pragma(warning(push)) __pragma(warning(disable : 4548)) do { __noop ( _Pdeque != 0 && ( ( _Mydeque * ) _Pdeque ) -> _Myoff <= _Off && _Off <= ( ( ( _Mydeque * ) _Pdeque ) -> _Myoff + ( ( _Mydeque * ) _Pdeque ) -> _Mysize ) ); } while ( ( 0, 0 ) __pragma(warning(pop)) ); } } __pragma(warning(pop)); };


   this -> _Set_container ( _Pdeque );
   _Myoff = _Off;
   }

  reference operator * ( ) const
   {
   size_type _Block = _Myoff / ( sizeof ( _Ty ) <= 1 ? 16 : sizeof ( _Ty ) <= 2 ? 8 : sizeof ( _Ty ) <= 4 ? 4 : sizeof ( _Ty ) <= 8 ? 2 : 1 );
   size_type _Off = _Myoff & ( ( sizeof ( _Ty ) <= 1 ? 16 : sizeof ( _Ty ) <= 2 ? 8 : sizeof ( _Ty ) <= 4 ? 4 : sizeof ( _Ty ) <= 8 ? 2 : 1 ) - 1 );
   { if ( ! ( this -> _Has_container ( ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); } __pragma(warning(push)) __pragma(warning(disable : 4548)) do { __noop ( this -> _Has_container ( ) ); } while ( ( 0, 0 ) __pragma(warning(pop)) ); };
   { if ( ! ( _Myoff < ( ( _Mydeque * ) ( this -> _Getmycont ( ) ) ) -> _Myoff + ( ( _Mydeque * ) ( this -> _Getmycont ( ) ) ) -> _Mysize ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); } __pragma(warning(push)) __pragma(warning(disable : 4548)) do { __noop ( _Myoff < ( ( _Mydeque * ) ( this -> _Getmycont ( ) ) ) -> _Myoff + ( ( _Mydeque * ) ( this -> _Getmycont ( ) ) ) -> _Mysize ); } while ( ( 0, 0 ) __pragma(warning(pop)) ); };
   if ( static_cast < const _Mydeque * > ( this -> _Getmycont ( ) ) -> _Mapsize <= _Block )
    _Block -= static_cast < const _Mydeque * > ( this -> _Getmycont ( ) ) -> _Mapsize;
   return ( ( static_cast < const _Mydeque * > ( this -> _Getmycont ( ) ) -> _Map ) [ _Block ] [ _Off ] );
   }


 pointer operator -> ( ) const
  {
  return ( & * * this );
  }

 _Myt & operator ++ ( )
  {
  { __pragma(warning(push)); __pragma(warning(disable: 4127)); if ( _Secure_validation ) { { if ( ! ( this -> _Has_container ( ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); } __pragma(warning(push)) __pragma(warning(disable : 4548)) do { __noop ( this -> _Has_container ( ) ); } while ( ( 0, 0 ) __pragma(warning(pop)) ); } } __pragma(warning(pop)); };
  { __pragma(warning(push)); __pragma(warning(disable: 4127)); if ( _Secure_validation ) { { if ( ! ( _Myoff < ( ( _Mydeque * ) ( this -> _Getmycont ( ) ) ) -> _Myoff + ( ( _Mydeque * ) ( this -> _Getmycont ( ) ) ) -> _Mysize ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); } __pragma(warning(push)) __pragma(warning(disable : 4548)) do { __noop ( _Myoff < ( ( _Mydeque * ) ( this -> _Getmycont ( ) ) ) -> _Myoff + ( ( _Mydeque * ) ( this -> _Getmycont ( ) ) ) -> _Mysize ); } while ( ( 0, 0 ) __pragma(warning(pop)) ); } } __pragma(warning(pop)); };








  ++ _Myoff;
  return ( * this );
  }

 _Myt operator ++ ( int )
  {
  _Myt _Tmp = * this;
  ++ * this;
  return ( _Tmp );
  }

 _Myt & operator -- ( )
  {
  { __pragma(warning(push)); __pragma(warning(disable: 4127)); if ( _Secure_validation ) { { if ( ! ( this -> _Has_container ( ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); } __pragma(warning(push)) __pragma(warning(disable : 4548)) do { __noop ( this -> _Has_container ( ) ); } while ( ( 0, 0 ) __pragma(warning(pop)) ); } } __pragma(warning(pop)); };
  { __pragma(warning(push)); __pragma(warning(disable: 4127)); if ( _Secure_validation ) { { if ( ! ( _Myoff > ( ( _Mydeque * ) ( this -> _Getmycont ( ) ) ) -> _Myoff ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); } __pragma(warning(push)) __pragma(warning(disable : 4548)) do { __noop ( _Myoff > ( ( _Mydeque * ) ( this -> _Getmycont ( ) ) ) -> _Myoff ); } while ( ( 0, 0 ) __pragma(warning(pop)) ); } } __pragma(warning(pop)); };







  -- _Myoff;
  return ( * this );
  }

 _Myt operator -- ( int )
  {
  _Myt _Tmp = * this;
  -- * this;
  return ( _Tmp );
  }

 _Myt & operator += ( difference_type _Off )
  {
  { __pragma(warning(push)); __pragma(warning(disable: 4127)); if ( _Secure_validation ) { { if ( ! ( this -> _Has_container ( ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); } __pragma(warning(push)) __pragma(warning(disable : 4548)) do { __noop ( this -> _Has_container ( ) ); } while ( ( 0, 0 ) __pragma(warning(pop)) ); } } __pragma(warning(pop)); };
  { __pragma(warning(push)); __pragma(warning(disable: 4127)); if ( _Secure_validation ) { { if ( ! ( _Myoff + _Off <= ( ( _Mydeque * ) ( this -> _Getmycont ( ) ) ) -> _Myoff + ( ( _Mydeque * ) ( this -> _Getmycont ( ) ) ) -> _Mysize && _Myoff + _Off >= ( ( _Mydeque * ) ( this -> _Getmycont ( ) ) ) -> _Myoff ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); } __pragma(warning(push)) __pragma(warning(disable : 4548)) do { __noop ( _Myoff + _Off <= ( ( _Mydeque * ) ( this -> _Getmycont ( ) ) ) -> _Myoff + ( ( _Mydeque * ) ( this -> _Getmycont ( ) ) ) -> _Mysize && _Myoff + _Off >= ( ( _Mydeque * ) ( this -> _Getmycont ( ) ) ) -> _Myoff ); } while ( ( 0, 0 ) __pragma(warning(pop)) ); } } __pragma(warning(pop)); };

  _Myoff += _Off;
  return ( * this );
  }

 _Myt operator + ( difference_type _Off ) const
  {
  _Myt _Tmp = * this;
  return ( _Tmp += _Off );
  }

 _Myt & operator -= ( difference_type _Off )
  {
  return ( * this += - _Off );
  }

 _Myt operator - ( difference_type _Off ) const
  {
  _Myt _Tmp = * this;
  return ( _Tmp -= _Off );
  }

 difference_type operator - ( const _Myt & _Right ) const
  {




  { __pragma(warning(push)); __pragma(warning(disable: 4127)); if ( _Secure_validation ) { { if ( ! ( this -> _Has_container ( ) && this -> _Same_container ( _Right ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); } __pragma(warning(push)) __pragma(warning(disable : 4548)) do { __noop ( this -> _Has_container ( ) && this -> _Same_container ( _Right ) ); } while ( ( 0, 0 ) __pragma(warning(pop)) ); } } __pragma(warning(pop)); };


  return ( _Right . _Myoff <= _Myoff ? _Myoff - _Right . _Myoff
   : - ( difference_type ) ( _Right . _Myoff - _Myoff ) );
  }

 reference operator [ ] ( difference_type _Off ) const
  {
  return ( * ( * this + _Off ) );
  }

 bool operator == ( const _Myt & _Right ) const
  {







  { __pragma(warning(push)); __pragma(warning(disable: 4127)); if ( _Secure_validation ) { { if ( ! ( this -> _Has_container ( ) && this -> _Same_container ( _Right ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); } __pragma(warning(push)) __pragma(warning(disable : 4548)) do { __noop ( this -> _Has_container ( ) && this -> _Same_container ( _Right ) ); } while ( ( 0, 0 ) __pragma(warning(pop)) ); } } __pragma(warning(pop)); };
  return ( _Myoff == _Right . _Myoff );
  }






 bool operator != ( const _Myt & _Right ) const
  {
  return ( ! ( * this == _Right ) );
  }

 bool operator < ( const _Myt & _Right ) const
  {







  { __pragma(warning(push)); __pragma(warning(disable: 4127)); if ( _Secure_validation ) { { if ( ! ( this -> _Has_container ( ) && this -> _Same_container ( _Right ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); } __pragma(warning(push)) __pragma(warning(disable : 4548)) do { __noop ( this -> _Has_container ( ) && this -> _Same_container ( _Right ) ); } while ( ( 0, 0 ) __pragma(warning(pop)) ); } } __pragma(warning(pop)); };
  return ( _Myoff < _Right . _Myoff );
  }






 bool operator > ( const _Myt & _Right ) const
  {
  return ( _Right < * this );
  }

 bool operator <= ( const _Myt & _Right ) const
  {
  return ( ! ( _Right < * this ) );
  }

 bool operator >= ( const _Myt & _Right ) const
  {
  return ( ! ( * this < _Right ) );
  }

 static void _Xlen ( )
  {
  throw length_error ( "deque<T> too long" );
  }

 static void _Xinvarg ( )
  {
  throw invalid_argument ( "invalid deque <T> argument" );
  }

 static void _Xran ( )
  {
  throw out_of_range ( "invalid deque <T> subscript" );
  }












 size_type _Myoff;
 };
#line 327 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\deque"
template < class _Ty, class _Alloc, bool _Secure_validation >
 inline
 _Deque_const_iterator < _Ty, _Alloc, _Secure_validation > operator + (
  typename _Deque_const_iterator < _Ty, _Alloc, _Secure_validation > :: difference_type _Off,
  _Deque_const_iterator < _Ty, _Alloc, _Secure_validation > _Next )
 {
 return ( _Next += _Off );
 }


template < class _Ty, class _Alloc, bool _Secure_validation >
 class _Deque_iterator
  : public _Deque_const_iterator < _Ty, _Alloc, _Secure_validation >
  {
public :
 typedef _Deque_iterator < _Ty, _Alloc, _Secure_validation > _Myt;
 typedef _Deque_const_iterator < _Ty, _Alloc, _Secure_validation > _Mybase;
 typedef deque < _Ty, _Alloc > _Mydeque;

 typedef random_access_iterator_tag iterator_category;
 typedef _Ty value_type;
 typedef typename _Alloc :: difference_type difference_type;
 typedef typename _Alloc :: pointer pointer;
 typedef typename _Alloc :: reference reference;

 typedef typename _Alloc :: size_type size_type;


 typedef typename _If < _Secure_validation,
  _Deque_iterator < _Ty, _Alloc, false >,
  _Unchanged_checked_iterator_base_type_tag > :: _Result _Checked_iterator_base_type;

 friend _Deque_iterator < _Ty, _Alloc, false >;
 friend _Deque_iterator < _Ty, _Alloc, true >;

 _Deque_iterator < _Ty, _Alloc, false > _Checked_iterator_base ( ) const
 {
  _Deque_iterator < _Ty, _Alloc, false > _Base ( this -> _Myoff, this -> _Getmycont ( ) );
  return _Base;
 }

 void _Checked_iterator_assign_from_base ( _Deque_iterator < _Ty, _Alloc, false > _Base )
 {
  { if ( ! ( this -> _Same_container ( _Base ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); } __pragma(warning(push)) __pragma(warning(disable : 4548)) do { __noop ( this -> _Same_container ( _Base ) ); } while ( ( 0, 0 ) __pragma(warning(pop)) ); };
  this -> _Myoff = _Base . _Myoff;
 }


 _Deque_iterator ( )
  {
  }

 _Deque_iterator ( size_type _Off, const _Mybase :: _Mydequebase * _Pdeque )
  : _Mybase ( _Off, _Pdeque )
  {
  }

 reference operator * ( ) const
  {
  return ( ( reference ) * * ( _Mybase * ) this );
  }

 pointer operator -> ( ) const
  {
  return ( & * * this );
  }

 _Myt & operator ++ ( )
  {
  ++ * ( _Mybase * ) this;
  return ( * this );
  }

 _Myt operator ++ ( int )
  {
  _Myt _Tmp = * this;
  ++ * this;
  return ( _Tmp );
  }

 _Myt & operator -- ( )
  {
  -- * ( _Mybase * ) this;
  return ( * this );
  }

 _Myt operator -- ( int )
  {
  _Myt _Tmp = * this;
  -- * this;
  return ( _Tmp );
  }

 _Myt & operator += ( difference_type _Off )
  {
  * ( _Mybase * ) this += _Off;
  return ( * this );
  }

 _Myt operator + ( difference_type _Off ) const
  {
  _Myt _Tmp = * this;
  return ( _Tmp += _Off );
  }

 _Myt & operator -= ( difference_type _Off )
  {
  return ( * this += - _Off );
  }

 _Myt operator - ( difference_type _Off ) const
  {
  _Myt _Tmp = * this;
  return ( _Tmp -= _Off );
  }

 difference_type operator - ( const _Mybase & _Right ) const
  {
  return ( * ( _Mybase * ) this - _Right );
  }

 reference operator [ ] ( difference_type _Off ) const
  {
  return ( * ( * this + _Off ) );
  }
 };
#line 454 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\deque"
template < class _Ty, class _Alloc, bool _Secure_validation >
 inline
 _Deque_iterator < _Ty, _Alloc, _Secure_validation > operator + (
  typename _Deque_iterator < _Ty, _Alloc, _Secure_validation > :: difference_type _Off,
  _Deque_iterator < _Ty, _Alloc, _Secure_validation > _Next )
 {
 return ( _Next += _Off );
 }
#line 470 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\deque"
template < class _Ty,
 class _Alloc >
 class _Deque_map
  : public _Container_base_aux_alloc_real < _Alloc >
 {
protected :
 _Deque_map ( _Alloc _Al )
  : _Container_base_aux_alloc_real < _Alloc > ( _Al ), _Almap ( _Al )
  {
  }

 typedef typename _Alloc :: template rebind < _Ty > :: other _Ty_alloc;
 typedef typename _Ty_alloc :: pointer _Tptr;

 typedef typename _Alloc :: template rebind < _Tptr > :: other
  _Tptr_alloc;
 typedef typename _Tptr_alloc :: pointer _Mptr;

 _Tptr_alloc _Almap;
 };


template < class _Ty,
 class _Alloc >
 class _Deque_val
  : public _Deque_map < _Ty, _Alloc >
 {
protected :
 _Deque_val ( _Alloc _Al = _Alloc ( ) )
  : _Deque_map < _Ty, _Alloc > ( _Al ), _Alval ( _Al )
  {
  }

 typedef _Deque_map < _Ty, _Alloc > _Mybase;
 typedef typename _Alloc :: template rebind < _Ty > :: other _Alty;

 _Alty _Alval;
 };


template < class _Ty,
 class _Ax >
 class deque
  : public _Deque_val < _Ty, _Ax >
 {
public :


 static const int _EEM_DS = ( sizeof ( _Ty ) <= 1 ? 16 : sizeof ( _Ty ) <= 2 ? 8 : sizeof ( _Ty ) <= 4 ? 4 : sizeof ( _Ty ) <= 8 ? 2 : 1 );
 enum { _EEN_DS = ( sizeof ( _Ty ) <= 1 ? 16 : sizeof ( _Ty ) <= 2 ? 8 : sizeof ( _Ty ) <= 4 ? 4 : sizeof ( _Ty ) <= 8 ? 2 : 1 ) };

 typedef deque < _Ty, _Ax > _Myt;
 typedef _Deque_val < _Ty, _Ax > _Mybase;
 typedef typename _Mybase :: _Alty _Alloc;
 typedef _Alloc allocator_type;
 typedef typename _Mybase :: _Tptr_alloc _Tptr_alloc;
 typedef typename _Alloc :: size_type size_type;
 typedef typename _Alloc :: difference_type _Dift;
 typedef _Dift difference_type;
 typedef typename _Alloc :: pointer _Tptr;
 typedef typename _Alloc :: const_pointer _Ctptr;
 typedef _Tptr pointer;
 typedef _Ctptr const_pointer;
 typedef typename _Mybase :: _Mptr _Mapptr;
 typedef typename _Alloc :: reference _Reft;
 typedef _Reft reference;
 typedef typename _Alloc :: const_reference const_reference;
 typedef typename _Alloc :: value_type value_type;

 typedef _Deque_iterator < _Ty, _Alloc, true > iterator;
 typedef _Deque_const_iterator < _Ty, _Alloc, true > const_iterator;


 friend class _Deque_const_iterator < _Ty, _Alloc, false >;

 friend class _Deque_const_iterator < _Ty, _Alloc, true >;


 typedef std :: reverse_iterator < iterator > reverse_iterator;
 typedef std :: reverse_iterator < const_iterator > const_reverse_iterator;

 deque ( )
  : _Mybase ( ), _Map ( 0 ),
   _Mapsize ( 0 ), _Myoff ( 0 ), _Mysize ( 0 )
  {
  }

 explicit deque ( const _Alloc & _Al )
  : _Mybase ( _Al ), _Map ( 0 ),
   _Mapsize ( 0 ), _Myoff ( 0 ), _Mysize ( 0 )
  {
  }

 explicit deque ( size_type _Count )
  : _Mybase ( ), _Map ( 0 ),
   _Mapsize ( 0 ), _Myoff ( 0 ), _Mysize ( 0 )
  {
  _Construct_n ( _Count, _Ty ( ) );
  }

 deque ( size_type _Count, const _Ty & _Val )
  : _Mybase ( ), _Map ( 0 ),
   _Mapsize ( 0 ), _Myoff ( 0 ), _Mysize ( 0 )
  {
  _Construct_n ( _Count, _Val );
  }

 deque ( size_type _Count, const _Ty & _Val, const _Alloc & _Al )
  : _Mybase ( _Al ), _Map ( 0 ),
   _Mapsize ( 0 ), _Myoff ( 0 ), _Mysize ( 0 )
  {
  _Construct_n ( _Count, _Val );
  }

 deque ( const _Myt & _Right )
  : _Mybase ( _Right . _Alval ), _Map ( 0 ),
   _Mapsize ( 0 ), _Myoff ( 0 ), _Mysize ( 0 )
  {
  try {
  insert ( begin ( ), _Right . begin ( ), _Right . end ( ) );
  } catch ( ... ) {
  _Tidy ( );
  throw;
  }
  }

 template < class _It >
  deque ( _It _First, _It _Last )
  : _Mybase ( ), _Map ( 0 ),
   _Mapsize ( 0 ), _Myoff ( 0 ), _Mysize ( 0 )
  {
  _Construct ( _First, _Last, _Iter_cat ( _First ) );
  }

 template < class _It >
  deque ( _It _First, _It _Last, const _Alloc & _Al )
  : _Mybase ( _Al ), _Map ( 0 ),
   _Mapsize ( 0 ), _Myoff ( 0 ), _Mysize ( 0 )
  {
  _Construct ( _First, _Last, _Iter_cat ( _First ) );
  }

 template < class _It >
  void _Construct ( _It _Count, _It _Val, _Int_iterator_tag )
  {
  _Construct_n ( ( size_type ) _Count, ( _Ty ) _Val );
  }

 template < class _It >
  void _Construct ( _It _First, _It _Last, input_iterator_tag )
  {
  try {
  insert ( begin ( ), _First, _Last );
  } catch ( ... ) {
  _Tidy ( );
  throw;
  }
  }

 void _Construct_n ( size_type _Count, const _Ty & _Val )
  {
  try {
  _Insert_n ( begin ( ), _Count, _Val );
  } catch ( ... ) {
  _Tidy ( );
  throw;
  }
  }

 ~ deque ( )
  {
  _Tidy ( );
  }

 _Myt & operator = ( const _Myt & _Right )
  {
  if ( this == & _Right )
   ;
  else if ( _Right . _Mysize == 0 )
   clear ( );
  else if ( _Right . _Mysize <= _Mysize )
   {
   iterator _Mid = std :: copy ( _Right . begin ( ), _Right . end ( ), begin ( ) );
   erase ( _Mid, end ( ) );
   }
  else
   {
   const_iterator _Mid = _Right . begin ( ) + _Mysize;
   std :: copy ( _Right . begin ( ), _Mid, begin ( ) );
   insert ( end ( ), _Mid, _Right . end ( ) );
   }
  return ( * this );
  }

 iterator begin ( )
  {
  return ( iterator ( _Myoff, this ) );
  }

 const_iterator begin ( ) const
  {
  return ( const_iterator ( _Myoff, this ) );
  }

 iterator end ( )
  {
  return ( iterator ( _Myoff + _Mysize, this ) );
  }

 const_iterator end ( ) const
  {
  return ( const_iterator ( _Myoff + _Mysize, this ) );
  }

 iterator _Make_iter ( const_iterator _Where ) const
  {
  return ( iterator ( _Where . _Myoff, this ) );
  }

 reverse_iterator rbegin ( )
  {
  return ( reverse_iterator ( end ( ) ) );
  }

 const_reverse_iterator rbegin ( ) const
  {
  return ( const_reverse_iterator ( end ( ) ) );
  }

 reverse_iterator rend ( )
  {
  return ( reverse_iterator ( begin ( ) ) );
  }

 const_reverse_iterator rend ( ) const
  {
  return ( const_reverse_iterator ( begin ( ) ) );
  }

 void resize ( size_type _Newsize )
  {
  resize ( _Newsize, _Ty ( ) );
  }

 void resize ( size_type _Newsize, _Ty _Val )
  {
  if ( _Mysize < _Newsize )
   _Insert_n ( end ( ), _Newsize - _Mysize, _Val );
  else if ( _Newsize < _Mysize )
   erase ( begin ( ) + _Newsize, end ( ) );
  }

 size_type size ( ) const
  {
  return ( _Mysize );
  }

 size_type max_size ( ) const
  {
  return ( this -> _Alval . max_size ( ) );
  }

 bool empty ( ) const
  {
  return ( _Mysize == 0 );
  }

 allocator_type get_allocator ( ) const
  {
  return ( this -> _Alval );
  }

 const_reference at ( size_type _Pos ) const
  {
  if ( _Mysize <= _Pos )
   _Xran ( );
  return ( * ( begin ( ) + _Pos ) );
  }

 reference at ( size_type _Pos )
  {
  if ( _Mysize <= _Pos )
   _Xran ( );
  return ( * ( begin ( ) + _Pos ) );
  }

 const_reference operator [ ] ( size_type _Pos ) const
  {






  return ( * ( begin ( ) + _Pos ) );
  }

 reference operator [ ] ( size_type _Pos )
  {






  return ( * ( begin ( ) + _Pos ) );
  }

 reference front ( )
  {
  return ( * begin ( ) );
  }

 const_reference front ( ) const
  {
  return ( * begin ( ) );
  }

 reference back ( )
  {
  return ( * ( end ( ) - 1 ) );
  }

 const_reference back ( ) const
  {
  return ( * ( end ( ) - 1 ) );
  }

 void push_front ( const _Ty & _Val )
  {





  if ( _Myoff % ( sizeof ( _Ty ) <= 1 ? 16 : sizeof ( _Ty ) <= 2 ? 8 : sizeof ( _Ty ) <= 4 ? 4 : sizeof ( _Ty ) <= 8 ? 2 : 1 ) == 0
   && _Mapsize <= ( _Mysize + ( sizeof ( _Ty ) <= 1 ? 16 : sizeof ( _Ty ) <= 2 ? 8 : sizeof ( _Ty ) <= 4 ? 4 : sizeof ( _Ty ) <= 8 ? 2 : 1 ) ) / ( sizeof ( _Ty ) <= 1 ? 16 : sizeof ( _Ty ) <= 2 ? 8 : sizeof ( _Ty ) <= 4 ? 4 : sizeof ( _Ty ) <= 8 ? 2 : 1 ) )
   _Growmap ( 1 );
  size_type _Newoff = _Myoff != 0 ? _Myoff
   : _Mapsize * ( sizeof ( _Ty ) <= 1 ? 16 : sizeof ( _Ty ) <= 2 ? 8 : sizeof ( _Ty ) <= 4 ? 4 : sizeof ( _Ty ) <= 8 ? 2 : 1 );
  size_type _Block = -- _Newoff / ( sizeof ( _Ty ) <= 1 ? 16 : sizeof ( _Ty ) <= 2 ? 8 : sizeof ( _Ty ) <= 4 ? 4 : sizeof ( _Ty ) <= 8 ? 2 : 1 );
  if ( _Map [ _Block ] == 0 )
   _Map [ _Block ] = this -> _Alval . allocate ( ( sizeof ( _Ty ) <= 1 ? 16 : sizeof ( _Ty ) <= 2 ? 8 : sizeof ( _Ty ) <= 4 ? 4 : sizeof ( _Ty ) <= 8 ? 2 : 1 ) );
  this -> _Alval . construct ( _Map [ _Block ] + _Newoff % ( sizeof ( _Ty ) <= 1 ? 16 : sizeof ( _Ty ) <= 2 ? 8 : sizeof ( _Ty ) <= 4 ? 4 : sizeof ( _Ty ) <= 8 ? 2 : 1 ), _Val );
  _Myoff = _Newoff;
  ++ _Mysize;
  }

 void pop_front ( )
  {









  if ( ! empty ( ) )
   {


   size_type _Block = _Myoff / ( sizeof ( _Ty ) <= 1 ? 16 : sizeof ( _Ty ) <= 2 ? 8 : sizeof ( _Ty ) <= 4 ? 4 : sizeof ( _Ty ) <= 8 ? 2 : 1 );
   this -> _Alval . destroy ( _Map [ _Block ] + _Myoff % ( sizeof ( _Ty ) <= 1 ? 16 : sizeof ( _Ty ) <= 2 ? 8 : sizeof ( _Ty ) <= 4 ? 4 : sizeof ( _Ty ) <= 8 ? 2 : 1 ) );
   if ( _Mapsize * ( sizeof ( _Ty ) <= 1 ? 16 : sizeof ( _Ty ) <= 2 ? 8 : sizeof ( _Ty ) <= 4 ? 4 : sizeof ( _Ty ) <= 8 ? 2 : 1 ) <= ++ _Myoff )
    _Myoff = 0;
   if ( -- _Mysize == 0 )
    _Myoff = 0;
   }
   }

 void push_back ( const _Ty & _Val )
  {





  if ( ( _Myoff + _Mysize ) % ( sizeof ( _Ty ) <= 1 ? 16 : sizeof ( _Ty ) <= 2 ? 8 : sizeof ( _Ty ) <= 4 ? 4 : sizeof ( _Ty ) <= 8 ? 2 : 1 ) == 0
   && _Mapsize <= ( _Mysize + ( sizeof ( _Ty ) <= 1 ? 16 : sizeof ( _Ty ) <= 2 ? 8 : sizeof ( _Ty ) <= 4 ? 4 : sizeof ( _Ty ) <= 8 ? 2 : 1 ) ) / ( sizeof ( _Ty ) <= 1 ? 16 : sizeof ( _Ty ) <= 2 ? 8 : sizeof ( _Ty ) <= 4 ? 4 : sizeof ( _Ty ) <= 8 ? 2 : 1 ) )
   _Growmap ( 1 );
  size_type _Newoff = _Myoff + _Mysize;
  size_type _Block = _Newoff / ( sizeof ( _Ty ) <= 1 ? 16 : sizeof ( _Ty ) <= 2 ? 8 : sizeof ( _Ty ) <= 4 ? 4 : sizeof ( _Ty ) <= 8 ? 2 : 1 );
  if ( _Mapsize <= _Block )
   _Block -= _Mapsize;
  if ( _Map [ _Block ] == 0 )
   _Map [ _Block ] = this -> _Alval . allocate ( ( sizeof ( _Ty ) <= 1 ? 16 : sizeof ( _Ty ) <= 2 ? 8 : sizeof ( _Ty ) <= 4 ? 4 : sizeof ( _Ty ) <= 8 ? 2 : 1 ) );
  this -> _Alval . construct ( _Map [ _Block ] + _Newoff % ( sizeof ( _Ty ) <= 1 ? 16 : sizeof ( _Ty ) <= 2 ? 8 : sizeof ( _Ty ) <= 4 ? 4 : sizeof ( _Ty ) <= 8 ? 2 : 1 ), _Val );
  ++ _Mysize;
  }

 void pop_back ( )
  {









  if ( ! empty ( ) )
   {


   size_type _Newoff = _Mysize + _Myoff - 1;
   size_type _Block = _Newoff / ( sizeof ( _Ty ) <= 1 ? 16 : sizeof ( _Ty ) <= 2 ? 8 : sizeof ( _Ty ) <= 4 ? 4 : sizeof ( _Ty ) <= 8 ? 2 : 1 );
   if ( _Mapsize <= _Block )
    _Block -= _Mapsize;
   this -> _Alval . destroy ( _Map [ _Block ] + _Newoff % ( sizeof ( _Ty ) <= 1 ? 16 : sizeof ( _Ty ) <= 2 ? 8 : sizeof ( _Ty ) <= 4 ? 4 : sizeof ( _Ty ) <= 8 ? 2 : 1 ) );
   if ( -- _Mysize == 0 )
    _Myoff = 0;
   }
   }

 template < class _It >
  void assign ( _It _First, _It _Last )
  {
  _Assign ( _First, _Last, _Iter_cat ( _First ) );
  }

 template < class _It >
  void _Assign ( _It _Count, _It _Val, _Int_iterator_tag )
  {
  _Assign_n ( ( size_type ) _Count, ( _Ty ) _Val );
  }

 template < class _It >
  void _Assign ( _It _First, _It _Last, input_iterator_tag )
  {
  erase ( begin ( ), end ( ) );
  insert ( begin ( ), _First, _Last );
  }

 void assign ( size_type _Count, const _Ty & _Val )
  {
  _Assign_n ( _Count, _Val );
  }

 iterator insert ( const_iterator _Where, const _Ty & _Val )
  {
  if ( _Where == begin ( ) )
   {
   push_front ( _Val );
   return ( begin ( ) );
   }
  else if ( _Where == end ( ) )
   {
   push_back ( _Val );
   return ( end ( ) - 1 );
   }
  else
   {
   iterator _Mid;
   size_type _Off = _Where - begin ( );
   _Ty _Tmp = _Val;






   if ( _Off < _Mysize / 2 )
    {
    push_front ( front ( ) );
    _Mid = begin ( ) + _Off;
    std :: copy ( begin ( ) + 2, _Mid + 1, begin ( ) + 1 );
    }
   else
    {
    push_back ( back ( ) );
    _Mid = begin ( ) + _Off;
    std :: copy_backward ( _Mid, end ( ) - 2, end ( ) - 1 );
    }

   * _Mid = _Tmp;
   return ( _Make_iter ( _Mid ) );
   }
  }

 void insert ( const_iterator _Where, size_type _Count, const _Ty & _Val )
  {
  _Insert_n ( _Where, _Count, _Val );
  }

 template < class _It >
  void insert ( const_iterator _Where, _It _First, _It _Last )
  {
  _Insert ( _Where, _First, _Last, _Iter_cat ( _First ) );
  }

 template < class _It >
  void _Insert ( const_iterator _Where, _It _Count, _It _Val,
   _Int_iterator_tag )
  {
  _Insert_n ( _Where, ( size_type ) _Count, ( _Ty ) _Val );
  }

 template < class _It >
  void _Insert ( const_iterator _Where,
   _It _First, _It _Last, input_iterator_tag )
  {
  size_type _Off = _Where - begin ( );







  size_type _Rem = _Mysize - _Off;
  size_type _Oldsize = _Mysize;

  if ( _First == _Last )
   ;
  else if ( _Off < _Rem )
   {
   try {
   for (; _First != _Last; ++ _First )
    push_front ( ( value_type ) * _First );

   } catch ( ... ) {
   for (; _Oldsize < _Mysize; )
    pop_front ( );
   throw;
   }

   size_type _Num = _Mysize - _Oldsize;

   if ( 0 < _Off )
    {
    _Reverse ( _Num, _Num + _Off );
    _Reverse ( 0, _Num + _Off );
    }
   else
    _Reverse ( 0, _Num );
   }
  else
   {
   try {
   for (; _First != _Last; ++ _First )
    push_back ( ( value_type ) * _First );

   } catch ( ... ) {
   for (; _Oldsize < _Mysize; )
    pop_back ( );
   throw;
   }

   if ( _Off < _Oldsize )
    {
    _Reverse ( _Off, _Oldsize );
    _Reverse ( _Oldsize, _Mysize );
    _Reverse ( _Off, _Mysize );
    }
   }
  }

 void _Reverse ( size_type _First, size_type _Last )
  {
  iterator _Start = begin ( );
  for (; _First != _Last && _First != -- _Last; ++ _First )
   :: std :: _Swap_adl ( _Start [ _First ], _Start [ _Last ] );
  }

 iterator erase ( const_iterator _Where )
  {
  return ( erase ( _Where, _Where + 1 ) );
  }

 iterator erase ( const_iterator _First_arg,
  const_iterator _Last_arg )
  {
  iterator _First = _Make_iter ( _First_arg );
  iterator _Last = _Make_iter ( _Last_arg );












  size_type _Off = _First - begin ( );
  size_type _Count = _Last - _First;


  if ( _Off < ( size_type ) ( end ( ) - _Last ) )
   {
   std :: copy_backward ( begin ( ), _First, _Last );
   for (; 0 < _Count; -- _Count )
    pop_front ( );
   }
  else
   {
   std :: copy ( _Last, end ( ), _First );
   for (; 0 < _Count; -- _Count )
    pop_back ( );
   }






  return ( begin ( ) + _Off );
  }

 void clear ( )
  {
  _Tidy ( );
  }

 void swap ( _Myt & _Right )
  {
  if ( this == & _Right )
   ;
  else if ( this -> _Alval == _Right . _Alval )
   {





   this -> _Swap_aux ( _Right );

   :: std :: _Swap_adl ( _Map, _Right . _Map );
   :: std :: swap ( _Mapsize, _Right . _Mapsize );
   :: std :: swap ( _Myoff, _Right . _Myoff );
   :: std :: swap ( _Mysize, _Right . _Mysize );
   }
  else
   {
   this -> _Swap_aux ( _Right );

   _Myt _Ts = * this;

   * this = _Right;
   _Right = _Ts;
   }
  }



protected :
 void _Assign_n ( size_type _Count, const _Ty & _Val )
  {
  _Ty _Tmp = _Val;
  erase ( begin ( ), end ( ) );
  _Insert_n ( begin ( ), _Count, _Tmp );
  }

 void _Insert_n ( const_iterator _Where,
  size_type _Count, const _Ty & _Val )
  {
  iterator _Mid;
  size_type _Num;
  size_type _Off = _Where - begin ( );
  size_type _Rem = _Mysize - _Off;
  size_type _Oldsize = _Mysize;






  if ( _Off < _Rem )
   {
   try {
   if ( _Off < _Count )
    {
    for ( _Num = _Count - _Off; 0 < _Num; -- _Num )
     push_front ( _Val );
    for ( _Num = _Off; 0 < _Num; -- _Num )
     push_front ( begin ( ) [ _Count - 1 ] );

    _Mid = begin ( ) + _Count;
    std :: fill ( _Mid, _Mid + _Off,
     _Val );
    }
   else
    {
    for ( _Num = _Count; 0 < _Num; -- _Num )
     push_front ( begin ( ) [ _Count - 1 ] );

    _Mid = begin ( ) + _Count;
    _Ty _Tmp = _Val;
    std :: copy ( _Mid + _Count, _Mid + _Off,
     _Mid );
    std :: fill ( begin ( ) + _Off, _Mid + _Off,
     _Tmp );
    }
   } catch ( ... ) {
   for (; _Oldsize < _Mysize; )
    pop_front ( );
   throw;
   }
   }
  else
   {
   try {
   if ( _Rem < _Count )
    {
    for ( _Num = _Count - _Rem; 0 < _Num; -- _Num )
     push_back ( _Val );
    for ( _Num = 0; _Num < _Rem; ++ _Num )
     push_back ( begin ( ) [ _Off + _Num ] );

    _Mid = begin ( ) + _Off;
    std :: fill ( _Mid, _Mid + _Rem,
     _Val );
    }
   else
    {
    for ( _Num = 0; _Num < _Count; ++ _Num )
     push_back ( begin ( ) [ _Off + _Rem
      - _Count + _Num ] );

    _Mid = begin ( ) + _Off;
    _Ty _Tmp = _Val;
    std :: copy_backward ( _Mid, _Mid + _Rem - _Count,
     _Mid + _Rem );
    std :: fill ( _Mid, _Mid + _Count,
     _Tmp );
    }
   } catch ( ... ) {
   for (; _Oldsize < _Mysize; )
    pop_back ( );
   throw;
   }
   }
  }

 static void _Xlen ( )
  {
  throw length_error ( "deque<T> too long" );
  }

 static void _Xinvarg ( )
  {
  throw invalid_argument ( "invalid deque <T> argument" );
  }

 static void _Xran ( )
  {
  throw out_of_range ( "invalid deque <T> subscript" );
  }

 void _Growmap ( size_type _Count )
  {
  if ( max_size ( ) / ( sizeof ( _Ty ) <= 1 ? 16 : sizeof ( _Ty ) <= 2 ? 8 : sizeof ( _Ty ) <= 4 ? 4 : sizeof ( _Ty ) <= 8 ? 2 : 1 ) - _Mapsize < _Count )
   _Xlen ( );

  size_type _Inc = _Mapsize / 2;
  if ( _Inc < 8 )
   _Inc = 8;
  if ( _Count < _Inc && _Mapsize <= max_size ( ) / ( sizeof ( _Ty ) <= 1 ? 16 : sizeof ( _Ty ) <= 2 ? 8 : sizeof ( _Ty ) <= 4 ? 4 : sizeof ( _Ty ) <= 8 ? 2 : 1 ) - _Inc )
   _Count = _Inc;
  size_type _Myboff = _Myoff / ( sizeof ( _Ty ) <= 1 ? 16 : sizeof ( _Ty ) <= 2 ? 8 : sizeof ( _Ty ) <= 4 ? 4 : sizeof ( _Ty ) <= 8 ? 2 : 1 );
  _Mapptr _Newmap = this -> _Almap . allocate ( _Mapsize + _Count );
  _Mapptr _Myptr = _Newmap + _Myboff;

  _Myptr = :: stdext :: unchecked_uninitialized_copy ( _Map + _Myboff,
   _Map + _Mapsize, _Myptr, this -> _Almap );
  if ( _Myboff <= _Count )
   {
   _Myptr = :: stdext :: unchecked_uninitialized_copy ( _Map,
    _Map + _Myboff, _Myptr, this -> _Almap );
   :: stdext :: unchecked_uninitialized_fill_n ( _Myptr, _Count - _Myboff,
    ( _Tptr ) 0, this -> _Almap );
   :: stdext :: unchecked_uninitialized_fill_n ( _Newmap, _Myboff,
    ( _Tptr ) 0, this -> _Almap );
   }
  else
   {
   :: stdext :: unchecked_uninitialized_copy ( _Map,
    _Map + _Count, _Myptr, this -> _Almap );
   _Myptr = :: stdext :: unchecked_uninitialized_copy ( _Map + _Count,
    _Map + _Myboff, _Newmap, this -> _Almap );
   :: stdext :: unchecked_uninitialized_fill_n ( _Myptr, _Count,
    ( _Tptr ) 0, this -> _Almap );
   }

  _Destroy_range ( _Map + _Myboff, _Map + _Mapsize, this -> _Almap );
  if ( _Map )
   this -> _Almap . deallocate ( _Map, _Mapsize );

  _Map = _Newmap;
  _Mapsize += _Count;
  }

 void _Tidy ( )
  {
  while ( ! empty ( ) )
   pop_back ( );
  for ( size_type _Count = _Mapsize; 0 < _Count; )
   {
   if ( * ( _Map + -- _Count ) != 0 )
    this -> _Alval . deallocate ( * ( _Map + _Count ), ( sizeof ( _Ty ) <= 1 ? 16 : sizeof ( _Ty ) <= 2 ? 8 : sizeof ( _Ty ) <= 4 ? 4 : sizeof ( _Ty ) <= 8 ? 2 : 1 ) );
   this -> _Almap . destroy ( _Map + _Count );
   }

  if ( _Map )
   this -> _Almap . deallocate ( _Map, _Mapsize );
  _Mapsize = 0;
  _Map = 0;
  }
























 _Mapptr _Map;
 size_type _Mapsize;
 size_type _Myoff;
 size_type _Mysize;
 };
#line 1314 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\deque"
template<class _Ty, class _Ax> 
#pragma pack(8)
#line 1315
class _Move_operation_category< deque< _Ty, _Ax> >  { 


public: typedef _Swap_move_tag _Move_cat; 
}; 
#pragma pack()


template < class _Ty,
 class _Alloc > inline
 void swap ( deque < _Ty, _Alloc > & _Left, deque < _Ty, _Alloc > & _Right )
 {
 _Left . swap ( _Right );
 }

template < class _Ty,
 class _Alloc > inline
 bool operator == ( const deque < _Ty, _Alloc > & _Left,
  const deque < _Ty, _Alloc > & _Right )
 {
 return ( _Left . size ( ) == _Right . size ( )
  && equal ( _Left . begin ( ), _Left . end ( ), _Right . begin ( ) ) );
 }

template < class _Ty,
 class _Alloc > inline
 bool operator != ( const deque < _Ty, _Alloc > & _Left,
  const deque < _Ty, _Alloc > & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }

template < class _Ty,
 class _Alloc > inline
 bool operator < ( const deque < _Ty, _Alloc > & _Left,
  const deque < _Ty, _Alloc > & _Right )
 {
 return ( lexicographical_compare ( _Left . begin ( ), _Left . end ( ),
  _Right . begin ( ), _Right . end ( ) ) );
 }

template < class _Ty,
 class _Alloc > inline
 bool operator <= ( const deque < _Ty, _Alloc > & _Left,
  const deque < _Ty, _Alloc > & _Right )
 {
 return ( ! ( _Right < _Left ) );
 }

template < class _Ty,
 class _Alloc > inline
 bool operator > ( const deque < _Ty, _Alloc > & _Left,
  const deque < _Ty, _Alloc > & _Right )
 {
 return ( _Right < _Left );
 }

template < class _Ty,
 class _Alloc > inline
 bool operator >= ( const deque < _Ty, _Alloc > & _Left,
  const deque < _Ty, _Alloc > & _Right )
 {
 return ( ! ( _Left < _Right ) );
 }
}

#pragma warning(default:4284)
#line 1388 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\deque"
#pragma warning(pop)
#line 13 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\queue"
#pragma warning(push,3)
#line 1389 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\deque"
#pragma pack ( pop )
#line 12 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\queue"
#pragma pack ( push, 8 )
#line 15 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\queue"
namespace std { 


template < class _Ty,
 class _Container = deque < _Ty > >
 class queue
 {
public :
 typedef _Container container_type;
 typedef typename _Container :: value_type value_type;
 typedef typename _Container :: size_type size_type;
 typedef typename _Container :: reference reference;
 typedef typename _Container :: const_reference const_reference;

 queue ( )
  : c ( )
  {
  }

 explicit queue ( const _Container & _Cont )
  : c ( _Cont )
  {
  }

 bool empty ( ) const
  {
  return ( c . empty ( ) );
  }

 size_type size ( ) const
  {
  return ( c . size ( ) );
  }

 reference front ( )
  {
  return ( c . front ( ) );
  }

 const_reference front ( ) const
  {
  return ( c . front ( ) );
  }

 reference back ( )
  {
  return ( c . back ( ) );
  }

 const_reference back ( ) const
  {
  return ( c . back ( ) );
  }

 void push ( const value_type & _Val )
  {
  c . push_back ( _Val );
  }

 void pop ( )
  {
  c . pop_front ( );
  }

 const _Container & _Get_container ( ) const
  {
  return ( c );
  }

protected :
 _Container c;
 };


template < class _Ty,
 class _Container > inline
 bool operator == ( const queue < _Ty, _Container > & _Left,
  const queue < _Ty, _Container > & _Right )
 {
 return ( _Left . _Get_container ( ) == _Right . _Get_container ( ) );
 }

template < class _Ty,
 class _Container > inline
 bool operator != ( const queue < _Ty, _Container > & _Left,
  const queue < _Ty, _Container > & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }

template < class _Ty,
 class _Container > inline
 bool operator < ( const queue < _Ty, _Container > & _Left,
  const queue < _Ty, _Container > & _Right )
 {
 return ( _Left . _Get_container ( ) < _Right . _Get_container ( ) );
 }

template < class _Ty,
 class _Container > inline
 bool operator > ( const queue < _Ty, _Container > & _Left,
  const queue < _Ty, _Container > & _Right )
 {
 return ( _Right < _Left );
 }

template < class _Ty,
 class _Container > inline
 bool operator <= ( const queue < _Ty, _Container > & _Left,
  const queue < _Ty, _Container > & _Right )
 {
 return ( ! ( _Right < _Left ) );
 }

template < class _Ty,
 class _Container > inline
 bool operator >= ( const queue < _Ty, _Container > & _Left,
  const queue < _Ty, _Container > & _Right )
 {
 return ( ! ( _Left < _Right ) );
 }


template < class _Ty,
 class _Container = vector < _Ty >,
 class _Pr = less < typename _Container :: value_type > >
 class priority_queue
 {
public :
 typedef _Container container_type;
 typedef typename _Container :: value_type value_type;
 typedef typename _Container :: size_type size_type;
 typedef typename _Container :: reference reference;
 typedef typename _Container :: const_reference const_reference;

 priority_queue ( )
  : c ( ), comp ( )
  {
  }

 explicit priority_queue ( const _Pr & _Pred )
  : c ( ), comp ( _Pred )
  {
  }

 priority_queue ( const _Pr & _Pred, const _Container & _Cont )
  : c ( _Cont ), comp ( _Pred )
  {
  make_heap ( c . begin ( ), c . end ( ), comp );
  }

 template < class _Iter >
  priority_queue ( _Iter _First, _Iter _Last )
  : c ( _First, _Last ), comp ( )
  {
  make_heap ( c . begin ( ), c . end ( ), comp );
  }

 template < class _Iter >
  priority_queue ( _Iter _First, _Iter _Last, const _Pr & _Pred )
  : c ( _First, _Last ), comp ( _Pred )
  {
  make_heap ( c . begin ( ), c . end ( ), comp );
  }

 template < class _Iter >
  priority_queue ( _Iter _First, _Iter _Last, const _Pr & _Pred,
   const _Container & _Cont )
  : c ( _Cont ), comp ( _Pred )
  {
  c . insert ( c . end ( ), _First, _Last );
  make_heap ( c . begin ( ), c . end ( ), comp );
  }

 bool empty ( ) const
  {
  return ( c . empty ( ) );
  }

 size_type size ( ) const
  {
  return ( c . size ( ) );
  }

 const_reference top ( ) const
  {
  return ( c . front ( ) );
  }

 reference top ( )
  {
  return ( c . front ( ) );
  }

 void push ( const value_type & _Pred )
  {
  c . push_back ( _Pred );
  push_heap ( c . begin ( ), c . end ( ), comp );
  }

 void pop ( )
  {
  pop_heap ( c . begin ( ), c . end ( ), comp );
  c . pop_back ( );
  }

protected :
 _Container c;
 _Pr comp;
 };
}

#pragma warning(pop)
#line 12 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xtree"
#pragma warning(push,3)
#pragma warning(disable:4127)
#line 228 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\queue"
#pragma pack ( pop )
#line 11 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xtree"
#pragma pack ( push, 8 )
#line 16 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xtree"
namespace std { 


template < class _Traits >
 class _Tree_nod
  : public _Traits
 {
protected :
 struct _Node;
 friend struct _Node;
 typedef _Node * _Nodeptr;

 typedef typename _Traits :: allocator_type allocator_type;
 typedef typename _Traits :: key_compare key_compare;
 typedef typename _Traits :: value_type value_type;

 struct _Node
  {
  _Node ( _Nodeptr _Larg, _Nodeptr _Parg, _Nodeptr _Rarg,
   const value_type & _Val, char _Carg )
   : _Left ( _Larg ), _Parent ( _Parg ), _Right ( _Rarg ),
    _Myval ( _Val ), _Color ( _Carg ), _Isnil ( false )
   {
   }

  _Nodeptr _Left;
  _Nodeptr _Parent;
  _Nodeptr _Right;
  value_type _Myval;
  char _Color;
  char _Isnil;
  };

 _Tree_nod ( const key_compare & _Parg,
  allocator_type _Al )
  : _Traits ( _Parg, _Al ), _Alnod ( _Al )
  {
  }

 typename allocator_type :: template rebind < _Node > :: other
  _Alnod;
 };


template < class _Traits >
 class _Tree_ptr
  : public _Tree_nod < _Traits >
 {



protected :

 typedef _Tree_nod < _Traits > _Mybase;
 typedef typename _Mybase :: _Node _Node;
 typedef typename _Mybase :: _Nodeptr _Nodeptr;
 typedef typename _Traits :: allocator_type allocator_type;
 typedef typename _Traits :: key_compare key_compare;

 _Tree_ptr ( const key_compare & _Parg,
  allocator_type _Al )
  : _Tree_nod < _Traits > ( _Parg, _Al ), _Alptr ( _Al )
  {
  }

 typename allocator_type :: template rebind < _Nodeptr > :: other
  _Alptr;
 };
#line 86 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xtree"
template < class _Traits >
 class _Tree_val
  : public _Tree_ptr < _Traits >
 {
protected :
 typedef typename _Traits :: allocator_type allocator_type;
 typedef typename _Traits :: key_compare key_compare;

 _Tree_val ( const key_compare & _Parg,
  allocator_type _Al )
  : _Tree_ptr < _Traits > ( _Parg, _Al ), _Alval ( _Al )
  {
  }

 allocator_type _Alval;
 };


template < class _Traits >
 class _Tree
  : public _Tree_val < _Traits >
 {
public :
 typedef _Tree < _Traits > _Myt;
 typedef _Tree_val < _Traits > _Mybase;
 typedef typename _Traits :: key_type key_type;
 typedef typename _Traits :: key_compare key_compare;
 typedef typename _Traits :: value_compare value_compare;
 typedef typename _Traits :: value_type value_type;
 typedef typename _Traits :: allocator_type allocator_type;






 typedef typename allocator_type :: pointer _ITptr;
 typedef typename allocator_type :: reference _IReft;


protected :

 typedef typename _Mybase :: _Node _Node;
 typedef typename _Mybase :: _Nodeptr _Nodeptr;

 typedef typename allocator_type :: template rebind < _Nodeptr > :: other
  _Nodeptr_alloc;
 typedef typename _Nodeptr_alloc :: reference _Nodepref;

 typedef typename allocator_type :: template rebind < key_type > :: other
  _Key_alloc;
 typedef typename _Key_alloc :: const_reference _Keyref;

 typedef typename allocator_type :: template rebind < char > :: other
  _Char_alloc;
 typedef typename _Char_alloc :: reference _Charref;


 typedef typename allocator_type :: reference _Vref;

 enum _Redbl
  {
  _Red, _Black };

 static _Charref _Color ( _Nodeptr _Pnode )
  {
  return ( ( _Charref ) ( * _Pnode ) . _Color );
  }

 static _Charref _Isnil ( _Nodeptr _Pnode )
  {
  return ( ( _Charref ) ( * _Pnode ) . _Isnil );
  }

 static _Keyref _Key ( _Nodeptr _Pnode )
  {
  return ( _Mybase :: _Kfn ( _Myval ( _Pnode ) ) );
  }

 static _Nodepref _Left ( _Nodeptr _Pnode )
  {
  return ( ( _Nodepref ) ( * _Pnode ) . _Left );
  }

 static _Nodepref _Parent ( _Nodeptr _Pnode )
  {
  return ( ( _Nodepref ) ( * _Pnode ) . _Parent );
  }

 static _Nodepref _Right ( _Nodeptr _Pnode )
  {
  return ( ( _Nodepref ) ( * _Pnode ) . _Right );
  }

 static _Vref _Myval ( _Nodeptr _Pnode )
  {
  return ( ( _Vref ) ( * _Pnode ) . _Myval );
  }

public :
 typedef typename allocator_type :: size_type size_type;
 typedef typename allocator_type :: difference_type _Dift;
 typedef _Dift difference_type;
 typedef typename allocator_type :: pointer _Tptr;
 typedef typename allocator_type :: const_pointer _Ctptr;
 typedef typename allocator_type :: reference _Reft;
 typedef _Tptr pointer;
 typedef _Ctptr const_pointer;
 typedef _Reft reference;
 typedef typename allocator_type :: const_reference const_reference;


 class const_iterator;
 friend class const_iterator;

 class const_iterator
  : public _Bidit < value_type, _Dift, _Ctptr, const_reference >
 {
 public :
  friend class _Tree < _Traits >;
  typedef bidirectional_iterator_tag iterator_category;
  typedef _Dift difference_type;
  typedef _Ctptr pointer;
  typedef const_reference reference;


  typedef _Range_checked_iterator_tag _Checked_iterator_category;


  const_iterator ( )
   : _Ptr ( 0 )
   {
   }













  const_iterator ( _Nodeptr _Pnode, const _Myt * _Plist )
   : _Ptr ( _Pnode )
   {
   { if ( ! ( _Plist != 0 ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); } __pragma(warning(push)) __pragma(warning(disable : 4548)) do { __noop ( _Plist != 0 ); } while ( ( 0, 0 ) __pragma(warning(pop)) ); };
   this -> _Set_container ( _Plist );
   }










  const_reference operator * ( ) const
   {










   { if ( ! ( this -> _Has_container ( ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); } __pragma(warning(push)) __pragma(warning(disable : 4548)) do { __noop ( this -> _Has_container ( ) ); } while ( ( 0, 0 ) __pragma(warning(pop)) ); };
   { if ( ! ( _Ptr != ( ( _Myt * ) ( this -> _Getmycont ( ) ) ) -> _Myhead ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); } __pragma(warning(push)) __pragma(warning(disable : 4548)) do { __noop ( _Ptr != ( ( _Myt * ) ( this -> _Getmycont ( ) ) ) -> _Myhead ); } while ( ( 0, 0 ) __pragma(warning(pop)) ); };


   return ( _Myval ( _Ptr ) );
   }

  _Ctptr operator -> ( ) const
   {
   return ( & * * this );
   }

  const_iterator & operator ++ ( )
   {
   _Inc ( );
   return ( * this );
   }

  const_iterator operator ++ ( int )
   {
   const_iterator _Tmp = * this;
   ++ * this;
   return ( _Tmp );
   }

  const_iterator & operator -- ( )
   {
   _Dec ( );
   return ( * this );
   }

  const_iterator operator -- ( int )
   {
   const_iterator _Tmp = * this;
   -- * this;
   return ( _Tmp );
   }

  bool operator == ( const const_iterator & _Right ) const
   {








   { if ( ! ( this -> _Has_container ( ) && this -> _Same_container ( _Right ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); } __pragma(warning(push)) __pragma(warning(disable : 4548)) do { __noop ( this -> _Has_container ( ) && this -> _Same_container ( _Right ) ); } while ( ( 0, 0 ) __pragma(warning(pop)) ); };


   return ( _Ptr == _Right . _Ptr );
   }

  bool operator != ( const const_iterator & _Right ) const
   {
   return ( ! ( * this == _Right ) );
   }

  void _Dec ( )
   {









   { if ( ! ( this -> _Has_container ( ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); } __pragma(warning(push)) __pragma(warning(disable : 4548)) do { __noop ( this -> _Has_container ( ) ); } while ( ( 0, 0 ) __pragma(warning(pop)) ); };


   if ( _Isnil ( _Ptr ) )
   {
    _Ptr = _Right ( _Ptr );
       if ( _Isnil ( _Ptr ) )






    {
        { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); };
    }



   }
   else if ( ! _Isnil ( _Left ( _Ptr ) ) )
    _Ptr = _Max ( _Left ( _Ptr ) );
   else
    {
    _Nodeptr _Pnode;
    while ( ! _Isnil ( _Pnode = _Parent ( _Ptr ) )
     && _Ptr == _Left ( _Pnode ) )
     _Ptr = _Pnode;
    if ( _Isnil ( _Ptr ) )






     {
     { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); };
     }



    else
     _Ptr = _Pnode;
    }
   }

  void _Inc ( )
   {










   { if ( ! ( this -> _Has_container ( ) ) ) { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); } __pragma(warning(push)) __pragma(warning(disable : 4548)) do { __noop ( this -> _Has_container ( ) ); } while ( ( 0, 0 ) __pragma(warning(pop)) ); };
   if ( _Isnil ( _Ptr ) )
    {
    { ( ( void ) 0 ); :: _invalid_parameter_noinfo ( ); };

    }


   else if ( ! _Isnil ( _Right ( _Ptr ) ) )
    _Ptr = _Min ( _Right ( _Ptr ) );
   else
    {
    _Nodeptr _Pnode;
    while ( ! _Isnil ( _Pnode = _Parent ( _Ptr ) )
     && _Ptr == _Right ( _Pnode ) )
     _Ptr = _Pnode;
    _Ptr = _Pnode;
    }
   }

  _Nodeptr _Mynode ( ) const
   {
   return ( _Ptr );
   }




 protected :

  _Nodeptr _Ptr;
  };


 class iterator;
 friend class iterator;

 class iterator
  : public const_iterator
 {
 public :
  typedef bidirectional_iterator_tag iterator_category;
  typedef _Dift difference_type;
  typedef _ITptr pointer;
  typedef _IReft reference;

  iterator ( )
   {
   }












  iterator ( _Nodeptr _Pnode, const _Myt * _Plist )
   : const_iterator ( _Pnode, _Plist )
   {
   }










  reference operator * ( ) const
   {
   return ( ( reference ) * * ( const_iterator * ) this );
   }

  pointer operator -> ( ) const
   {
   return ( & * * this );
   }

  iterator & operator ++ ( )
   {
   ++ ( * ( const_iterator * ) this );
   return ( * this );
   }

  iterator operator ++ ( int )
   {
   iterator _Tmp = * this;
   ++ * this;
   return ( _Tmp );
   }

  iterator & operator -- ( )
   {
   -- ( * ( const_iterator * ) this );
   return ( * this );
   }

  iterator operator -- ( int )
   {
   iterator _Tmp = * this;
   -- * this;
   return ( _Tmp );
   }
  };

 typedef std :: reverse_iterator < iterator > reverse_iterator;
 typedef std :: reverse_iterator < const_iterator > const_reverse_iterator;
 typedef pair < iterator, bool > _Pairib;
 typedef pair < iterator, iterator > _Pairii;
 typedef pair < const_iterator, const_iterator > _Paircc;

 explicit _Tree ( const key_compare & _Parg,
  const allocator_type & _Al )
  : _Mybase ( _Parg, _Al )
  {
  _Init ( );
  }

 _Tree ( const value_type * _First, const value_type * _Last,
  const key_compare & _Parg, const allocator_type & _Al )
  : _Mybase ( _Parg, _Al )
  {
  _Init ( );
  try {
  insert ( _First, _Last );
  } catch ( ... ) {
  _Tidy ( );
  throw;
  }
  }

 _Tree ( const _Myt & _Right )
  : _Mybase ( _Right . key_comp ( ), _Right . get_allocator ( ) )
  {
  _Init ( );
  try {
  _Copy ( _Right );
  } catch ( ... ) {
  _Tidy ( );
  throw;
  }
  }

 ~ _Tree ( )
  {
  _Tidy ( );
  }

 _Myt & operator = ( const _Myt & _Right )
  {
  if ( this != & _Right )
   {
   erase ( begin ( ), end ( ) );
   this -> comp = _Right . comp;
   _Copy ( _Right );
   }
  return ( * this );
  }

 iterator begin ( )
  {
  return ( iterator ( _Lmost ( ), this ) );
  }

 const_iterator begin ( ) const
  {
  return ( const_iterator ( _Lmost ( ), this ) );
  }

 iterator end ( )
  {
  return ( iterator ( _Myhead, this ) );
  }

 const_iterator end ( ) const
  {
  return ( const_iterator ( _Myhead, this ) );
  }

 iterator _Make_iter ( const_iterator _Where ) const
  {
  return ( iterator ( iterator ( _Where . _Ptr, this ) ) );
  }

 reverse_iterator rbegin ( )
  {
  return ( reverse_iterator ( end ( ) ) );
  }

 const_reverse_iterator rbegin ( ) const
  {
  return ( const_reverse_iterator ( end ( ) ) );
  }

 reverse_iterator rend ( )
  {
  return ( reverse_iterator ( begin ( ) ) );
  }

 const_reverse_iterator rend ( ) const
  {
  return ( const_reverse_iterator ( begin ( ) ) );
  }

 size_type size ( ) const
  {
  return ( _Mysize );
  }

 size_type max_size ( ) const
  {
  return ( this -> _Alval . max_size ( ) );
  }

 bool empty ( ) const
  {
  return ( size ( ) == 0 );
  }

 allocator_type get_allocator ( ) const
  {
  return ( this -> _Alval );
  }

 key_compare key_comp ( ) const
  {
  return ( this -> comp );
  }

 value_compare value_comp ( ) const
  {
  return ( value_compare ( key_comp ( ) ) );
  }

 _Pairib insert ( const value_type & _Val )
  {
  _Nodeptr _Trynode = _Root ( );
  _Nodeptr _Wherenode = _Myhead;
  bool _Addleft = true;
  while ( ! _Isnil ( _Trynode ) )
   {
   _Wherenode = _Trynode;
   _Addleft = this -> comp ( this -> _Kfn ( _Val ), _Key ( _Trynode ) );

   _Trynode = _Addleft ? _Left ( _Trynode ) : _Right ( _Trynode );
   }

  if ( this -> _Multi )
   return ( _Pairib ( _Insert ( _Addleft, _Wherenode, _Val ), true ) );
  else
   {
   iterator _Where = iterator ( _Wherenode, this );
   if ( ! _Addleft )
    ;
   else if ( _Where == begin ( ) )
    return ( _Pairib ( _Insert ( true, _Wherenode, _Val ), true ) );
   else
    -- _Where;

   if ( this -> comp ( _Key ( _Where . _Mynode ( ) ), this -> _Kfn ( _Val ) ) )

    return ( _Pairib ( _Insert ( _Addleft, _Wherenode, _Val ), true ) );
   else
    return ( _Pairib ( _Where, false ) );
   }
  }

 iterator insert ( const_iterator _Where,
  const value_type & _Val )
  {






  const_iterator _Next;

  if ( size ( ) == 0 )
   return ( _Insert ( true, _Myhead, _Val ) );
  else if ( this -> _Multi )
   {
   if ( _Where == begin ( ) )
    {
    if ( ! this -> comp ( _Key ( _Where . _Mynode ( ) ), this -> _Kfn ( _Val ) ) )

     return ( _Insert ( true, _Where . _Mynode ( ), _Val ) );
    }
   else if ( _Where == end ( ) )
    {
    if ( ! this -> comp ( this -> _Kfn ( _Val ), _Key ( _Rmost ( ) ) ) )

     return ( _Insert ( false, _Rmost ( ), _Val ) );
    }
   else if ( ! this -> comp ( _Key ( _Where . _Mynode ( ) ), this -> _Kfn ( _Val ) )

    && ! this -> comp ( this -> _Kfn ( _Val ), _Key ( ( -- ( _Next = _Where ) ) . _Mynode ( ) ) ) )

    {
    if ( _Isnil ( _Right ( _Next . _Mynode ( ) ) ) )
     return ( _Insert ( false, _Next . _Mynode ( ), _Val ) );
    else
     return ( _Insert ( true, _Where . _Mynode ( ), _Val ) );
    }
   else if ( ! this -> comp ( this -> _Kfn ( _Val ), _Key ( _Where . _Mynode ( ) ) )

    && ( ++ ( _Next = _Where ) == end ( )
     || ! this -> comp ( _Key ( _Next . _Mynode ( ) ), this -> _Kfn ( _Val ) ) ) )

    {
    if ( _Isnil ( _Right ( _Where . _Mynode ( ) ) ) )
     return ( _Insert ( false, _Where . _Mynode ( ), _Val ) );
    else
     return ( _Insert ( true, _Next . _Mynode ( ), _Val ) );
    }
   }
  else
   {
   if ( _Where == begin ( ) )
    {
    if ( this -> comp ( this -> _Kfn ( _Val ), _Key ( _Where . _Mynode ( ) ) ) )

     return ( _Insert ( true, _Where . _Mynode ( ), _Val ) );
    }
   else if ( _Where == end ( ) )
    {
    if ( this -> comp ( _Key ( _Rmost ( ) ), this -> _Kfn ( _Val ) ) )

     return ( _Insert ( false, _Rmost ( ), _Val ) );
    }
   else if ( this -> comp ( this -> _Kfn ( _Val ), _Key ( _Where . _Mynode ( ) ) )

    && this -> comp ( _Key ( ( -- ( _Next = _Where ) ) . _Mynode ( ) ), this -> _Kfn ( _Val ) ) )

    {
    if ( _Isnil ( _Right ( _Next . _Mynode ( ) ) ) )
     return ( _Insert ( false, _Next . _Mynode ( ), _Val ) );
    else
     return ( _Insert ( true, _Where . _Mynode ( ), _Val ) );
    }
   else if ( this -> comp ( _Key ( _Where . _Mynode ( ) ), this -> _Kfn ( _Val ) )

    && ( ++ ( _Next = _Where ) == end ( )
     || this -> comp ( this -> _Kfn ( _Val ), _Key ( _Next . _Mynode ( ) ) ) ) )

    {
    if ( _Isnil ( _Right ( _Where . _Mynode ( ) ) ) )
     return ( _Insert ( false, _Where . _Mynode ( ), _Val ) );
    else
     return ( _Insert ( true, _Next . _Mynode ( ), _Val ) );
    }
   }

  return ( insert ( _Val ) . first );
  }

 template < class _Iter >
  void insert ( _Iter _First, _Iter _Last )
  {





  for (; _First != _Last; ++ _First )
   insert ( * _First );
  }

 iterator erase ( const_iterator _Where )
  {









  if ( _Isnil ( _Where . _Mynode ( ) ) )
   throw out_of_range ( "invalid map/set<T> iterator" );
  _Nodeptr _Erasednode = _Where . _Mynode ( );
  ++ _Where;


  _Nodeptr _Fixnode;
  _Nodeptr _Fixnodeparent;
  _Nodeptr _Pnode = _Erasednode;

  if ( _Isnil ( _Left ( _Pnode ) ) )
   _Fixnode = _Right ( _Pnode );
  else if ( _Isnil ( _Right ( _Pnode ) ) )
   _Fixnode = _Left ( _Pnode );
  else
   {
   _Pnode = _Where . _Mynode ( );
   _Fixnode = _Right ( _Pnode );
   }

  if ( _Pnode == _Erasednode )
   {
   _Fixnodeparent = _Parent ( _Erasednode );
   if ( ! _Isnil ( _Fixnode ) )
    _Parent ( _Fixnode ) = _Fixnodeparent;

   if ( _Root ( ) == _Erasednode )
    _Root ( ) = _Fixnode;
   else if ( _Left ( _Fixnodeparent ) == _Erasednode )
    _Left ( _Fixnodeparent ) = _Fixnode;
   else
    _Right ( _Fixnodeparent ) = _Fixnode;

   if ( _Lmost ( ) == _Erasednode )
    _Lmost ( ) = _Isnil ( _Fixnode )
     ? _Fixnodeparent
     : _Min ( _Fixnode );

   if ( _Rmost ( ) == _Erasednode )
    _Rmost ( ) = _Isnil ( _Fixnode )
     ? _Fixnodeparent
     : _Max ( _Fixnode );
   }
  else
   {
   _Parent ( _Left ( _Erasednode ) ) = _Pnode;
   _Left ( _Pnode ) = _Left ( _Erasednode );

   if ( _Pnode == _Right ( _Erasednode ) )
    _Fixnodeparent = _Pnode;
   else
    {
    _Fixnodeparent = _Parent ( _Pnode );
    if ( ! _Isnil ( _Fixnode ) )
     _Parent ( _Fixnode ) = _Fixnodeparent;
    _Left ( _Fixnodeparent ) = _Fixnode;
    _Right ( _Pnode ) = _Right ( _Erasednode );
    _Parent ( _Right ( _Erasednode ) ) = _Pnode;
    }

   if ( _Root ( ) == _Erasednode )
    _Root ( ) = _Pnode;
   else if ( _Left ( _Parent ( _Erasednode ) ) == _Erasednode )
    _Left ( _Parent ( _Erasednode ) ) = _Pnode;
   else
    _Right ( _Parent ( _Erasednode ) ) = _Pnode;

   _Parent ( _Pnode ) = _Parent ( _Erasednode );
   :: std :: swap ( _Color ( _Pnode ), _Color ( _Erasednode ) );
   }

  if ( _Color ( _Erasednode ) == _Black )
   {
   for (; _Fixnode != _Root ( ) && _Color ( _Fixnode ) == _Black;
    _Fixnodeparent = _Parent ( _Fixnode ) )
    if ( _Fixnode == _Left ( _Fixnodeparent ) )
     {
     _Pnode = _Right ( _Fixnodeparent );
     if ( _Color ( _Pnode ) == _Red )
      {
      _Color ( _Pnode ) = _Black;
      _Color ( _Fixnodeparent ) = _Red;
      _Lrotate ( _Fixnodeparent );
      _Pnode = _Right ( _Fixnodeparent );
      }

     if ( _Isnil ( _Pnode ) )
      _Fixnode = _Fixnodeparent;
     else if ( _Color ( _Left ( _Pnode ) ) == _Black
      && _Color ( _Right ( _Pnode ) ) == _Black )
      {
      _Color ( _Pnode ) = _Red;
      _Fixnode = _Fixnodeparent;
      }
     else
      {
      if ( _Color ( _Right ( _Pnode ) ) == _Black )
       {
       _Color ( _Left ( _Pnode ) ) = _Black;
       _Color ( _Pnode ) = _Red;
       _Rrotate ( _Pnode );
       _Pnode = _Right ( _Fixnodeparent );
       }

      _Color ( _Pnode ) = _Color ( _Fixnodeparent );
      _Color ( _Fixnodeparent ) = _Black;
      _Color ( _Right ( _Pnode ) ) = _Black;
      _Lrotate ( _Fixnodeparent );
      break;
      }
     }
    else
     {
     _Pnode = _Left ( _Fixnodeparent );
     if ( _Color ( _Pnode ) == _Red )
      {
      _Color ( _Pnode ) = _Black;
      _Color ( _Fixnodeparent ) = _Red;
      _Rrotate ( _Fixnodeparent );
      _Pnode = _Left ( _Fixnodeparent );
      }
     if ( _Isnil ( _Pnode ) )
      _Fixnode = _Fixnodeparent;
     else if ( _Color ( _Right ( _Pnode ) ) == _Black
      && _Color ( _Left ( _Pnode ) ) == _Black )
      {
      _Color ( _Pnode ) = _Red;
      _Fixnode = _Fixnodeparent;
      }
     else
      {
      if ( _Color ( _Left ( _Pnode ) ) == _Black )
       {
       _Color ( _Right ( _Pnode ) ) = _Black;
       _Color ( _Pnode ) = _Red;
       _Lrotate ( _Pnode );
       _Pnode = _Left ( _Fixnodeparent );
       }

      _Color ( _Pnode ) = _Color ( _Fixnodeparent );
      _Color ( _Fixnodeparent ) = _Black;
      _Color ( _Left ( _Pnode ) ) = _Black;
      _Rrotate ( _Fixnodeparent );
      break;
      }
     }

   _Color ( _Fixnode ) = _Black;
   }

  this -> _Alnod . destroy ( _Erasednode );
  this -> _Alnod . deallocate ( _Erasednode, 1 );

  if ( 0 < _Mysize )
   -- _Mysize;

  return ( _Make_iter ( _Where ) );
  }

 iterator erase ( const_iterator _First, const_iterator _Last )
  {
  if ( _First == begin ( ) && _Last == end ( ) )
   {
   clear ( );
   return ( begin ( ) );
   }
  else
   {
   while ( _First != _Last )
    erase ( _First ++ );
   return ( _Make_iter ( _First ) );
   }
  }

 size_type erase ( const key_type & _Keyval )
  {
  _Pairii _Where = equal_range ( _Keyval );
  size_type _Num = 0;
  _Distance ( _Where . first, _Where . second, _Num );
  erase ( _Where . first, _Where . second );
  return ( _Num );
  }

 void erase ( const key_type * _First, const key_type * _Last )
  {
  ;
  while ( _First != _Last )
   erase ( * _First ++ );
  }

 void clear ( )
  {





  _Erase ( _Root ( ) );
  _Root ( ) = _Myhead, _Mysize = 0;
  _Lmost ( ) = _Myhead, _Rmost ( ) = _Myhead;
  }

 iterator find ( const key_type & _Keyval )
  {
  iterator _Where = lower_bound ( _Keyval );
  return ( _Where == end ( )
   || this -> comp ( _Keyval, _Key ( _Where . _Mynode ( ) ) )

     ? end ( ) : _Where );
  }

 const_iterator find ( const key_type & _Keyval ) const
  {
  const_iterator _Where = lower_bound ( _Keyval );
  return ( _Where == end ( )
   || this -> comp ( _Keyval, _Key ( _Where . _Mynode ( ) ) )

     ? end ( ) : _Where );
  }

 size_type count ( const key_type & _Keyval ) const
  {
  _Paircc _Ans = equal_range ( _Keyval );
  size_type _Num = 0;
  _Distance ( _Ans . first, _Ans . second, _Num );
  return ( _Num );
  }

 iterator lower_bound ( const key_type & _Keyval )
  {
  return ( iterator ( _Lbound ( _Keyval ), this ) );
  }

 const_iterator lower_bound ( const key_type & _Keyval ) const
  {
  return ( const_iterator ( _Lbound ( _Keyval ), this ) );
  }

 iterator upper_bound ( const key_type & _Keyval )
  {
  return ( iterator ( _Ubound ( _Keyval ), this ) );
  }

 const_iterator upper_bound ( const key_type & _Keyval ) const
  {
  return ( const_iterator ( _Ubound ( _Keyval ), this ) );
  }

 _Pairii equal_range ( const key_type & _Keyval )
  {
  return ( _Eqrange ( _Keyval ) );
  }

 _Paircc equal_range ( const key_type & _Keyval ) const
  {
  return ( _Eqrange ( _Keyval ) );
  }

 void swap ( _Myt & _Right )
  {
  if ( this == & _Right )
   ;
  else if ( get_allocator ( ) == _Right . get_allocator ( ) )
   {





   this -> _Swap_aux ( _Right );

   :: std :: _Swap_adl ( this -> comp, _Right . comp );
   :: std :: swap ( _Myhead, _Right . _Myhead );
   :: std :: swap ( _Mysize, _Right . _Mysize );
   }
  else
   {
   this -> _Swap_aux ( _Right );

   _Myt _Tmp = * this;

   * this = _Right;
   _Right = _Tmp;
   }
  }

protected :
 void _Copy ( const _Myt & _Right )
  {
  _Root ( ) = _Copy ( _Right . _Root ( ), _Myhead );
  _Mysize = _Right . size ( );
  if ( ! _Isnil ( _Root ( ) ) )
   {
   _Lmost ( ) = _Min ( _Root ( ) );
   _Rmost ( ) = _Max ( _Root ( ) );
   }
  else
   _Lmost ( ) = _Myhead, _Rmost ( ) = _Myhead;
  }

 _Nodeptr _Copy ( _Nodeptr _Rootnode, _Nodeptr _Wherenode )
  {
  _Nodeptr _Newroot = _Myhead;

  if ( ! _Isnil ( _Rootnode ) )
   {
   _Nodeptr _Pnode = _Buynode ( _Myhead, _Wherenode, _Myhead,
    _Myval ( _Rootnode ), _Color ( _Rootnode ) );
   if ( _Isnil ( _Newroot ) )
    _Newroot = _Pnode;

   try {
   _Left ( _Pnode ) = _Copy ( _Left ( _Rootnode ), _Pnode );
   _Right ( _Pnode ) = _Copy ( _Right ( _Rootnode ), _Pnode );
   } catch ( ... ) {
   _Erase ( _Newroot );
   throw;
   }
   }

  return ( _Newroot );
  }

 _Paircc _Eqrange ( const key_type & _Keyval ) const
  {
  _Nodeptr _Pnode = _Root ( );
  _Nodeptr _Lonode = _Myhead;
  _Nodeptr _Hinode = _Myhead;

  while ( ! _Isnil ( _Pnode ) )
   if ( this -> comp ( _Key ( _Pnode ), _Keyval ) )
    _Pnode = _Right ( _Pnode );
   else
    {
    if ( _Isnil ( _Hinode )
      && this -> comp ( _Keyval, _Key ( _Pnode ) ) )
     _Hinode = _Pnode;
    _Lonode = _Pnode;
    _Pnode = _Left ( _Pnode );
    }

  _Pnode = _Isnil ( _Hinode ) ? _Root ( )
   : _Left ( _Hinode );
  while ( ! _Isnil ( _Pnode ) )
   if ( this -> comp ( _Keyval, _Key ( _Pnode ) ) )
    {
    _Hinode = _Pnode;
    _Pnode = _Left ( _Pnode );
    }
   else
    _Pnode = _Right ( _Pnode );

  const_iterator _First = const_iterator ( _Lonode, this );
  const_iterator _Last = const_iterator ( _Hinode, this );
  return ( _Paircc ( _First, _Last ) );
  }

 _Pairii _Eqrange ( const key_type & _Keyval )
  {
  _Nodeptr _Pnode = _Root ( );
  _Nodeptr _Lonode = _Myhead;
  _Nodeptr _Hinode = _Myhead;

  while ( ! _Isnil ( _Pnode ) )
   if ( this -> comp ( _Key ( _Pnode ), _Keyval ) )
    _Pnode = _Right ( _Pnode );
   else
    {
    if ( _Isnil ( _Hinode )
      && this -> comp ( _Keyval, _Key ( _Pnode ) ) )
     _Hinode = _Pnode;
    _Lonode = _Pnode;
    _Pnode = _Left ( _Pnode );
    }

  _Pnode = _Isnil ( _Hinode ) ? _Root ( )
   : _Left ( _Hinode );
  while ( ! _Isnil ( _Pnode ) )
   if ( this -> comp ( _Keyval, _Key ( _Pnode ) ) )
    {
    _Hinode = _Pnode;
    _Pnode = _Left ( _Pnode );
    }
   else
    _Pnode = _Right ( _Pnode );

  iterator _First = iterator ( _Lonode, this );
  iterator _Last = iterator ( _Hinode, this );
  return ( _Pairii ( _First, _Last ) );
  }

 void _Erase ( _Nodeptr _Rootnode )
  {
  for ( _Nodeptr _Pnode = _Rootnode; ! _Isnil ( _Pnode ); _Rootnode = _Pnode )
   {
   _Erase ( _Right ( _Pnode ) );
   _Pnode = _Left ( _Pnode );
   this -> _Alnod . destroy ( _Rootnode );
   this -> _Alnod . deallocate ( _Rootnode, 1 );
   }
  }

 void _Init ( )
  {
  _Myhead = _Buynode ( );
  _Isnil ( _Myhead ) = true;
  _Root ( ) = _Myhead;
  _Lmost ( ) = _Myhead, _Rmost ( ) = _Myhead;
  _Mysize = 0;
  }

 iterator _Insert ( bool _Addleft, _Nodeptr _Wherenode,
  const value_type & _Val )
  {
  if ( max_size ( ) - 1 <= _Mysize )
   throw length_error ( "map/set<T> too long" );
  _Nodeptr _Newnode = _Buynode ( _Myhead, _Wherenode, _Myhead,
   _Val, _Red );

  ++ _Mysize;
  if ( _Wherenode == _Myhead )
   {
   _Root ( ) = _Newnode;
   _Lmost ( ) = _Newnode, _Rmost ( ) = _Newnode;
   }
  else if ( _Addleft )
   {
   _Left ( _Wherenode ) = _Newnode;
   if ( _Wherenode == _Lmost ( ) )
    _Lmost ( ) = _Newnode;
   }
  else
   {
   _Right ( _Wherenode ) = _Newnode;
   if ( _Wherenode == _Rmost ( ) )
    _Rmost ( ) = _Newnode;
   }

  for ( _Nodeptr _Pnode = _Newnode; _Color ( _Parent ( _Pnode ) ) == _Red; )
   if ( _Parent ( _Pnode ) == _Left ( _Parent ( _Parent ( _Pnode ) ) ) )
    {
    _Wherenode = _Right ( _Parent ( _Parent ( _Pnode ) ) );
    if ( _Color ( _Wherenode ) == _Red )
     {
     _Color ( _Parent ( _Pnode ) ) = _Black;
     _Color ( _Wherenode ) = _Black;
     _Color ( _Parent ( _Parent ( _Pnode ) ) ) = _Red;
     _Pnode = _Parent ( _Parent ( _Pnode ) );
     }
    else
     {
     if ( _Pnode == _Right ( _Parent ( _Pnode ) ) )
      {
      _Pnode = _Parent ( _Pnode );
      _Lrotate ( _Pnode );
      }
     _Color ( _Parent ( _Pnode ) ) = _Black;
     _Color ( _Parent ( _Parent ( _Pnode ) ) ) = _Red;
     _Rrotate ( _Parent ( _Parent ( _Pnode ) ) );
     }
    }
   else
    {
    _Wherenode = _Left ( _Parent ( _Parent ( _Pnode ) ) );
    if ( _Color ( _Wherenode ) == _Red )
     {
     _Color ( _Parent ( _Pnode ) ) = _Black;
     _Color ( _Wherenode ) = _Black;
     _Color ( _Parent ( _Parent ( _Pnode ) ) ) = _Red;
     _Pnode = _Parent ( _Parent ( _Pnode ) );
     }
    else
     {
     if ( _Pnode == _Left ( _Parent ( _Pnode ) ) )
      {
      _Pnode = _Parent ( _Pnode );
      _Rrotate ( _Pnode );
      }
     _Color ( _Parent ( _Pnode ) ) = _Black;
     _Color ( _Parent ( _Parent ( _Pnode ) ) ) = _Red;
     _Lrotate ( _Parent ( _Parent ( _Pnode ) ) );
     }
    }

  _Color ( _Root ( ) ) = _Black;
  return ( iterator ( _Newnode, this ) );
  }

 _Nodeptr _Lbound ( const key_type & _Keyval ) const
  {
  _Nodeptr _Pnode = _Root ( );
  _Nodeptr _Wherenode = _Myhead;

  while ( ! _Isnil ( _Pnode ) )
   if ( this -> comp ( _Key ( _Pnode ), _Keyval ) )
    _Pnode = _Right ( _Pnode );
   else
    {
    _Wherenode = _Pnode;
    _Pnode = _Left ( _Pnode );
    }

  return ( _Wherenode );
  }

 _Nodeptr & _Lmost ( ) const
  {
  return ( _Left ( _Myhead ) );
  }

 void _Lrotate ( _Nodeptr _Wherenode )
  {
  _Nodeptr _Pnode = _Right ( _Wherenode );
  _Right ( _Wherenode ) = _Left ( _Pnode );

  if ( ! _Isnil ( _Left ( _Pnode ) ) )
   _Parent ( _Left ( _Pnode ) ) = _Wherenode;
  _Parent ( _Pnode ) = _Parent ( _Wherenode );

  if ( _Wherenode == _Root ( ) )
   _Root ( ) = _Pnode;
  else if ( _Wherenode == _Left ( _Parent ( _Wherenode ) ) )
   _Left ( _Parent ( _Wherenode ) ) = _Pnode;
  else
   _Right ( _Parent ( _Wherenode ) ) = _Pnode;

  _Left ( _Pnode ) = _Wherenode;
  _Parent ( _Wherenode ) = _Pnode;
  }

 static _Nodeptr _Max ( _Nodeptr _Pnode )
  {
  while ( ! _Isnil ( _Right ( _Pnode ) ) )
   _Pnode = _Right ( _Pnode );
  return ( _Pnode );
  }

 static _Nodeptr _Min ( _Nodeptr _Pnode )
  {
  while ( ! _Isnil ( _Left ( _Pnode ) ) )
   _Pnode = _Left ( _Pnode );
  return ( _Pnode );
  }

 _Nodeptr & _Rmost ( ) const
  {
  return ( _Right ( _Myhead ) );
  }

 _Nodeptr & _Root ( ) const
  {
  return ( _Parent ( _Myhead ) );
  }

 void _Rrotate ( _Nodeptr _Wherenode )
  {
  _Nodeptr _Pnode = _Left ( _Wherenode );
  _Left ( _Wherenode ) = _Right ( _Pnode );

  if ( ! _Isnil ( _Right ( _Pnode ) ) )
   _Parent ( _Right ( _Pnode ) ) = _Wherenode;
  _Parent ( _Pnode ) = _Parent ( _Wherenode );

  if ( _Wherenode == _Root ( ) )
   _Root ( ) = _Pnode;
  else if ( _Wherenode == _Right ( _Parent ( _Wherenode ) ) )
   _Right ( _Parent ( _Wherenode ) ) = _Pnode;
  else
   _Left ( _Parent ( _Wherenode ) ) = _Pnode;

  _Right ( _Pnode ) = _Wherenode;
  _Parent ( _Wherenode ) = _Pnode;
  }

 _Nodeptr _Ubound ( const key_type & _Keyval ) const
  {
  _Nodeptr _Pnode = _Root ( );
  _Nodeptr _Wherenode = _Myhead;

  while ( ! _Isnil ( _Pnode ) )
   if ( this -> comp ( _Keyval, _Key ( _Pnode ) ) )
    {
    _Wherenode = _Pnode;
    _Pnode = _Left ( _Pnode );
    }
   else
    _Pnode = _Right ( _Pnode );

  return ( _Wherenode );
  }


















 _Nodeptr _Buynode ( )
  {
  _Nodeptr _Wherenode = this -> _Alnod . allocate ( 1 );
  int _Linkcnt = 0;

  try {
  this -> _Alptr . construct ( & _Left ( _Wherenode ), 0 );
  ++ _Linkcnt;
  this -> _Alptr . construct ( & _Parent ( _Wherenode ), 0 );
  ++ _Linkcnt;
  this -> _Alptr . construct ( & _Right ( _Wherenode ), 0 );
  } catch ( ... ) {
  if ( 1 < _Linkcnt )
   this -> _Alptr . destroy ( & _Parent ( _Wherenode ) );
  if ( 0 < _Linkcnt )
   this -> _Alptr . destroy ( & _Left ( _Wherenode ) );
  this -> _Alnod . deallocate ( _Wherenode, 1 );
  throw;
  }
  _Color ( _Wherenode ) = _Black;
  _Isnil ( _Wherenode ) = false;
  return ( _Wherenode );
  }

 _Nodeptr _Buynode ( _Nodeptr _Larg, _Nodeptr _Parg,
  _Nodeptr _Rarg, const value_type & _Val, char _Carg )
  {
  _Nodeptr _Wherenode = this -> _Alnod . allocate ( 1 );
  try {
  new ( _Wherenode ) _Node ( _Larg, _Parg, _Rarg, _Val, _Carg );
  } catch ( ... ) {
  this -> _Alnod . deallocate ( _Wherenode, 1 );
  throw;
  }
  return ( _Wherenode );
  }

 void _Tidy ( )
  {
  erase ( begin ( ), end ( ) );
  this -> _Alptr . destroy ( & _Left ( _Myhead ) );
  this -> _Alptr . destroy ( & _Parent ( _Myhead ) );
  this -> _Alptr . destroy ( & _Right ( _Myhead ) );
  this -> _Alnod . deallocate ( _Myhead, 1 );
  _Myhead = 0, _Mysize = 0;
  }

 static void _Xran ( )
  {
  throw out_of_range ( "invalid map/set<T> iterator" );
  }

 static void _Xinvarg ( )
  {
  throw invalid_argument ( "invalid map/set<T> argument" );
  }

 _Nodeptr _Myhead;
 size_type _Mysize;
 };
#line 1444 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xtree"
template<class _Traits> 
class _Move_operation_category< _Tree< _Traits> >  { 


public: typedef _Swap_move_tag _Move_cat; 
}; 


template < class _Traits > inline
 bool operator == ( const _Tree < _Traits > & _Left, const _Tree < _Traits > & _Right )
 {
 return ( _Left . size ( ) == _Right . size ( )
  && equal ( _Left . begin ( ), _Left . end ( ), _Right . begin ( ) ) );
 }

template < class _Traits > inline
 bool operator != ( const _Tree < _Traits > & _Left, const _Tree < _Traits > & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }

template < class _Traits > inline
 bool operator < ( const _Tree < _Traits > & _Left, const _Tree < _Traits > & _Right )
 {
 return ( lexicographical_compare ( _Left . begin ( ), _Left . end ( ),
  _Right . begin ( ), _Right . end ( ) ) );
 }

template < class _Traits > inline
 bool operator > ( const _Tree < _Traits > & _Left, const _Tree < _Traits > & _Right )
 {
 return ( _Right < _Left );
 }

template < class _Traits > inline
 bool operator <= ( const _Tree < _Traits > & _Left, const _Tree < _Traits > & _Right )
 {
 return ( ! ( _Right < _Left ) );
 }

template < class _Traits > inline
 bool operator >= ( const _Tree < _Traits > & _Left, const _Tree < _Traits > & _Right )
 {
 return ( ! ( _Left < _Right ) );
 }
}


#pragma warning(default:4127)
#pragma warning(pop)
#line 10 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\set"
#pragma warning(push,3)
#line 1494 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\xtree"
#pragma pack ( pop )
#line 9 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\set"
#pragma pack ( push, 8 )
#line 12 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\set"
namespace std { 


template < class _Kty,
 class _Pr,
 class _Alloc,
 bool _Mfl >
 class _Tset_traits
  : public _Container_base_aux_alloc_real < _Alloc >
 {
public :
 typedef _Kty key_type;
 typedef _Kty value_type;
 typedef _Pr key_compare;
 typedef typename _Alloc :: template rebind < value_type > :: other
  allocator_type;

 typedef typename allocator_type :: const_pointer _ITptr;
 typedef typename allocator_type :: const_reference _IReft;

 enum
  {
  _Multi = _Mfl };

 _Tset_traits ( _Pr _Parg, _Alloc _Al )
  : _Container_base_aux_alloc_real < _Alloc > ( _Al ), comp ( _Parg )
  {
  }

 typedef key_compare value_compare;

 static const _Kty & _Kfn ( const value_type & _Val )
  {
  return ( _Val );
  }

 _Pr comp;
 };


template < class _Kty,
 class _Pr = less < _Kty >,
 class _Alloc = allocator < _Kty > >
 class set
  : public _Tree < _Tset_traits < _Kty, _Pr, _Alloc, false > >
 {
public :
 typedef set < _Kty, _Pr, _Alloc > _Myt;
 typedef _Tree < _Tset_traits < _Kty, _Pr, _Alloc, false > > _Mybase;
 typedef _Kty key_type;
 typedef _Pr key_compare;
 typedef typename _Mybase :: value_compare value_compare;
 typedef typename _Mybase :: allocator_type allocator_type;
 typedef typename _Mybase :: size_type size_type;
 typedef typename _Mybase :: difference_type difference_type;
 typedef typename _Mybase :: pointer pointer;
 typedef typename _Mybase :: const_pointer const_pointer;
 typedef typename _Mybase :: reference reference;
 typedef typename _Mybase :: const_reference const_reference;
 typedef typename _Mybase :: iterator iterator;
 typedef typename _Mybase :: const_iterator const_iterator;
 typedef typename _Mybase :: reverse_iterator reverse_iterator;
 typedef typename _Mybase :: const_reverse_iterator
  const_reverse_iterator;
 typedef typename _Mybase :: value_type value_type;

 set ( )
  : _Mybase ( key_compare ( ), allocator_type ( ) )
  {
  }

 explicit set ( const key_compare & _Pred )
  : _Mybase ( _Pred, allocator_type ( ) )
  {
  }

 set ( const key_compare & _Pred, const allocator_type & _Al )
  : _Mybase ( _Pred, _Al )
  {
  }

 template < class _Iter >
  set ( _Iter _First, _Iter _Last )
  : _Mybase ( key_compare ( ), allocator_type ( ) )
  {
  ;
  for (; _First != _Last; ++ _First )
   this -> insert ( * _First );
  }

 template < class _Iter >
  set ( _Iter _First, _Iter _Last,
   const key_compare & _Pred )
  : _Mybase ( _Pred, allocator_type ( ) )
  {
  ;
  for (; _First != _Last; ++ _First )
   this -> insert ( * _First );
  }

 template < class _Iter >
  set ( _Iter _First, _Iter _Last,
   const key_compare & _Pred, const allocator_type & _Al )
  : _Mybase ( _Pred, _Al )
  {
  ;
  for (; _First != _Last; ++ _First )
   this -> insert ( * _First );
  }




















 };
#line 144 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\set"
template<class _Kty, class _Pr, class _Alloc> 
class _Move_operation_category< set< _Kty, _Pr, _Alloc> >  { 


public: typedef _Swap_move_tag _Move_cat; 
}; 

template < class _Kty,
 class _Pr,
 class _Alloc > inline
 void swap ( set < _Kty, _Pr, _Alloc > & _Left,
  set < _Kty, _Pr, _Alloc > & _Right )
 {
 _Left . swap ( _Right );
 }


template < class _Kty,
 class _Pr = less < _Kty >,
 class _Alloc = allocator < _Kty > >
 class multiset
  : public _Tree < _Tset_traits < _Kty, _Pr, _Alloc, true > >
 {
public :
 typedef multiset < _Kty, _Pr, _Alloc > _Myt;
 typedef _Tree < _Tset_traits < _Kty, _Pr, _Alloc, true > > _Mybase;
 typedef _Kty key_type;
 typedef _Pr key_compare;
 typedef typename _Mybase :: value_compare value_compare;
 typedef typename _Mybase :: allocator_type allocator_type;
 typedef typename _Mybase :: size_type size_type;
 typedef typename _Mybase :: difference_type difference_type;
 typedef typename _Mybase :: pointer pointer;
 typedef typename _Mybase :: const_pointer const_pointer;
 typedef typename _Mybase :: reference reference;
 typedef typename _Mybase :: const_reference const_reference;
 typedef typename _Mybase :: iterator iterator;
 typedef typename _Mybase :: const_iterator const_iterator;
 typedef typename _Mybase :: reverse_iterator reverse_iterator;
 typedef typename _Mybase :: const_reverse_iterator
  const_reverse_iterator;
 typedef typename _Mybase :: value_type value_type;

 multiset ( )
  : _Mybase ( key_compare ( ), allocator_type ( ) )
  {
  }

 explicit multiset ( const key_compare & _Pred )
  : _Mybase ( _Pred, allocator_type ( ) )
  {
  }

 multiset ( const key_compare & _Pred, const allocator_type & _Al )
  : _Mybase ( _Pred, _Al )
  {
  }

 template < class _Iter >
  multiset ( _Iter _First, _Iter _Last )
  : _Mybase ( key_compare ( ), allocator_type ( ) )
  {
  ;
  for (; _First != _Last; ++ _First )
   this -> insert ( * _First );
  }

 template < class _Iter >
  multiset ( _Iter _First, _Iter _Last,
   const key_compare & _Pred )
  : _Mybase ( _Pred, allocator_type ( ) )
  {
  ;
  for (; _First != _Last; ++ _First )
   this -> insert ( * _First );
  }

 template < class _Iter >
  multiset ( _Iter _First, _Iter _Last,
   const key_compare & _Pred, const allocator_type & _Al )
  : _Mybase ( _Pred, _Al )
  {
  ;
  for (; _First != _Last; ++ _First )
   this -> insert ( * _First );
  }


















 iterator insert ( const value_type & _Val )
  {
  return ( _Mybase :: insert ( _Val ) . first );
  }

 iterator insert ( const_iterator _Where, const value_type & _Val )
  {
  return ( _Mybase :: insert ( _Where, _Val ) );
  }

 template < class _Iter >
  void insert ( _Iter _First, _Iter _Last )
  {





  for (; _First != _Last; ++ _First )
   this -> insert ( * _First );
  }
 };
#line 272 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\set"
template<class _Kty, class _Pr, class _Alloc> 
class _Move_operation_category< multiset< _Kty, _Pr, _Alloc> >  { 


public: typedef _Swap_move_tag _Move_cat; 
}; 

template < class _Kty,
 class _Pr,
 class _Alloc > inline
 void swap ( multiset < _Kty, _Pr, _Alloc > & _Left,
  multiset < _Kty, _Pr, _Alloc > & _Right )
 {
 _Left . swap ( _Right );
 }
#line 293 "c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\INCLUDE\\set"
}

#pragma warning(pop)
#pragma pack ( pop )
#line 28 "d:\\lab2\\fim\\meshfim_cuda_partition_color_square_modifiedb_modifieddatastucture_globalco\\meshfim_cuda\\meshFIM.h"
using namespace std;

enum LabelType { FarPoint, ActivePoint, MaskPoint, SeedPoint, StopPoint, AlivePoint, ToBeAlivePoint}; 


class meshFIM { 




public: typedef int index; 
#line 44
void MeshReader(char *); 



void SetSeedPoint(std::vector< int, std::allocator< int> >  SeedPoints) 
{ 
((this->m_SeedPoints) = SeedPoints); 

auto std::vector< int, std::allocator< int> >  nb; 

if (this->m_meshPtr) 
{ 
(*(this->m_meshPtr)).InitializeAttributes(this->m_SeedPoints); 
#line 75
}  
} 

void SetMesh(TriMesh *mesh) 
{ 
(this->m_meshPtr) = mesh; 

orient(this->m_meshPtr); 


if (!((*(this->m_meshPtr)).normals).empty()) { ((*(this->m_meshPtr)).normals).clear(); }  
(*(this->m_meshPtr)).need_normals(); 
if (!((*(this->m_meshPtr)).adjacentfaces).empty()) { ((*(this->m_meshPtr)).adjacentfaces).clear(); }  
(*(this->m_meshPtr)).need_adjacentfaces(); 
if (!((*(this->m_meshPtr)).across_edge).empty()) { ((*(this->m_meshPtr)).across_edge).clear(); }  
(*(this->m_meshPtr)).need_across_edge(); 
if (!((*(this->m_meshPtr)).tstrips).empty()) { ((*(this->m_meshPtr)).tstrips).clear(); }  
(*(this->m_meshPtr)).need_tstrips(); 


if (1 == 2) 
{ 
(*(this->m_meshPtr)).need_curvatures(); 

}  
if (1 == 3) 
{ 
(*(this->m_meshPtr)).need_noise(); 

}  
(*(this->m_meshPtr)).need_speed(); 

(*(this->m_meshPtr)).need_faceedges(); 
if ((this->m_SeedPoints).empty()) 
{ 
(*(this->m_meshPtr)).InitializeAttributes(); 
} else 

{ 
(*(this->m_meshPtr)).InitializeAttributes(this->m_SeedPoints); 


}  




} 

void InitializeLabels(int numBlock) 
{ 
if (!(this->m_meshPtr)) 
{ 
((std::cout << ("Label-vector size unknown, please set the mesh first...")) << (std::endl)); 
} else 

{ 

auto int nv = (((*(this->m_meshPtr)).vertices).size()); 
if ((this->m_VertLabel).size() != nv) { (this->m_VertLabel).resize(nv); }  
if ((this->m_BlockLabel).size() != numBlock) { (this->m_BlockLabel).resize(numBlock); }  

for (int l = 0; l < nv; l++) 
{ 
(this->m_VertLabel)[(l)] = LabelType::FarPoint; 
}  

for (int l = 0; l < numBlock; l++) 
{ 
(this->m_BlockLabel)[(l)] = LabelType::FarPoint; 
}  


if (!(this->m_SeedPoints).empty()) 
{ 
for (int s = 0; s < (this->m_SeedPoints).size(); s++) 
{ 
(this->m_BlockLabel)[((this->m_PartitionLabel)[((this->m_SeedPoints)[(s)])])] = LabelType::ActivePoint; 
(this->m_VertLabel)[((this->m_SeedPoints)[(s)])] = LabelType::SeedPoint; 
(this->m_ActiveBlocks).insert((this->m_ActiveBlocks).end(), (this->m_PartitionLabel)[((this->m_SeedPoints)[(s)])]); 
}  
} else { 

((cout << ("Initialize seed points before labels!!!")) << (std::endl)); }  
#line 182
}  
} 
#line 225
void SetStopDistance(float d) 
{ 
(this->m_StopDistance) = d; 

} 


void GenerateData(int); 



void GraphPartition_METIS(char *, int); 
void GraphPartition_METIS2(int &, int); 
void GraphPartition_Square(int, int, int, int); 

void GraphColoring(); 
void PartitionFaces(int); 
#line 247
meshFIM() { 
(this->m_meshPtr) = (0); 
} 
~meshFIM() { } 




TriMesh *m_meshPtr; 
std::vector< std::set< int, std::less< int> , std::allocator< int> > , std::allocator< std::set< int, std::less< int> , std::allocator< int> > > >  m_BlockNbPts; 
std::vector< std::set< int, std::less< int> , std::allocator< int> > , std::allocator< std::set< int, std::less< int> , std::allocator< int> > > >  m_BlockNeighbor; 
std::vector< int, std::allocator< int> >  m_BlockSizes; 
std::vector< int, std::allocator< int> >  m_BlockPoints; 
std::vector< int, std::allocator< int> >  m_ColorLabel; 
int m_numColor; 
std::vector< Color, std::allocator< Color> >  m_faceColors; 
std::vector< std::vector< int, std::allocator< int> > , std::allocator< std::vector< int, std::allocator< int> > > >  m_PartitionFaces; 
std::vector< std::vector< int, std::allocator< int> > , std::allocator< std::vector< int, std::allocator< int> > > >  m_PartitionVerts; 
std::vector< std::vector< int, std::allocator< int> > , std::allocator< std::vector< int, std::allocator< int> > > >  m_PartitionNbFaces; 
std::vector< std::vector< TriMesh::Face, std::allocator< TriMesh::Face> > , std::allocator< std::vector< TriMesh::Face, std::allocator< TriMesh::Face> > > >  m_PartitionVirtualFaces; 
int m_maxNumTotalFaces; 
int m_maxNumVert; 
int m_maxNumVertMapping; 
std::vector< int, std::allocator< int> >  m_PartitionLabel; 



protected: std::set< int, std::less< int> , std::allocator< int> >  m_ActiveBlocks; 
std::vector< int, std::allocator< int> >  m_SeedPoints; 
std::vector< LabelType, std::allocator< LabelType> >  m_VertLabel; 
std::vector< LabelType, std::allocator< LabelType> >  m_BlockLabel; 


float m_StopDistance; 



}; 
#line 37 "C:/ProgramData/NVIDIA Corporation/NVIDIA CUDA SDK/common/inc\\cutil.h"
#pragma warning( disable : 4996 )
#line 64 "C:/ProgramData/NVIDIA Corporation/NVIDIA CUDA SDK/common/inc\\cutil.h"
enum CUTBoolean { 

CUTFalse, 
CUTTrue
}; 
#line 76
extern "C" { extern __declspec( dllimport ) void __stdcall cutFree(void *); } 
#line 94
extern "C" { extern __declspec( dllimport ) void __stdcall cutCheckBankAccess(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned, const char *, const int, const char *, const int); } 
#line 107
extern "C" { extern __declspec( dllimport ) char *__stdcall cutFindFilePath(const char *, const char *); } 
#line 122
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutReadFilef(const char *, float **, unsigned *, bool = false); } 
#line 138
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutReadFiled(const char *, double **, unsigned *, bool = false); } 
#line 154
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutReadFilei(const char *, int **, unsigned *, bool = false); } 
#line 169
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutReadFileui(const char *, unsigned **, unsigned *, bool = false); } 
#line 185
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutReadFileb(const char *, char **, unsigned *, bool = false); } 
#line 201
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutReadFileub(const char *, unsigned char **, unsigned *, bool = false); } 
#line 215
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutWriteFilef(const char *, const float *, unsigned, const float, bool = false); } 
#line 229
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutWriteFiled(const char *, const float *, unsigned, const double, bool = false); } 
#line 241
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutWriteFilei(const char *, const int *, unsigned, bool = false); } 
#line 253
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutWriteFileui(const char *, const unsigned *, unsigned, bool = false); } 
#line 265
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutWriteFileb(const char *, const char *, unsigned, bool = false); } 
#line 277
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutWriteFileub(const char *, const unsigned char *, unsigned, bool = false); } 
#line 293
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutLoadPGMub(const char *, unsigned char **, unsigned *, unsigned *); } 
#line 306
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutLoadPPMub(const char *, unsigned char **, unsigned *, unsigned *); } 
#line 320
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutLoadPPM4ub(const char *, unsigned char **, unsigned *, unsigned *); } 
#line 336
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutLoadPGMi(const char *, unsigned **, unsigned *, unsigned *); } 
#line 352
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutLoadPGMs(const char *, unsigned short **, unsigned *, unsigned *); } 
#line 367
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutLoadPGMf(const char *, float **, unsigned *, unsigned *); } 
#line 379
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutSavePGMub(const char *, unsigned char *, unsigned, unsigned); } 
#line 391
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutSavePPMub(const char *, unsigned char *, unsigned, unsigned); } 
#line 404
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutSavePPM4ub(const char *, unsigned char *, unsigned, unsigned); } 
#line 416
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutSavePGMi(const char *, unsigned *, unsigned, unsigned); } 
#line 428
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutSavePGMs(const char *, unsigned short *, unsigned, unsigned); } 
#line 440
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutSavePGMf(const char *, float *, unsigned, unsigned); } 
#line 461
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutCheckCmdLineFlag(const int, const char **, const char *); } 
#line 475
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutGetCmdLineArgumenti(const int, const char **, const char *, int *); } 
#line 489
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutGetCmdLineArgumentf(const int, const char **, const char *, float *); } 
#line 503
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutGetCmdLineArgumentstr(const int, const char **, const char *, char **); } 
#line 518
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutGetCmdLineArgumentListstr(const int, const char **, const char *, char **, unsigned *); } 
#line 532
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutCheckCondition(int, const char *, const int); } 
#line 544
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutComparef(const float *, const float *, const unsigned); } 
#line 557
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutComparei(const int *, const int *, const unsigned); } 
#line 570
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutCompareub(const unsigned char *, const unsigned char *, const unsigned); } 
#line 584
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutCompareube(const unsigned char *, const unsigned char *, const unsigned, const float); } 
#line 598
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutComparefe(const float *, const float *, const unsigned, const float); } 
#line 613
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutCompareL2fe(const float *, const float *, const unsigned, const float); } 
#line 627
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutComparePPM(const char *, const char *, const float, bool = false); } 
#line 640
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutCreateTimer(unsigned *); } 
#line 649
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutDeleteTimer(unsigned); } 
#line 657
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutStartTimer(const unsigned); } 
#line 665
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutStopTimer(const unsigned); } 
#line 673
extern "C" { extern __declspec( dllimport ) CUTBoolean __stdcall cutResetTimer(const unsigned); } 
#line 682
extern "C" { extern __declspec( dllimport ) float __stdcall cutGetTimerValue(const unsigned); } 
#line 693
extern "C" { extern __declspec( dllimport ) float __stdcall cutGetAverageTimerValue(const unsigned); } 
#line 26 "d:\\lab2\\fim\\meshfim_cuda_partition_color_square_modifiedb_modifieddatastucture_globalco\\meshfim_cuda\\CUDADefines.h"
typedef unsigned uint; 
typedef unsigned char uchar; 
#line 25 "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu"
extern void run_reduction__entry(int *, int *, int *, int, int *); 
extern void FIMCuda__entry(float *, float *, int *, int *, float *, float *, float *, float *, int *, int *, int *, int, int, int, float); 
extern void run_check_neighbor__entry(float *, float *, int *, int *, float *, float *, float *, float *, int *, int *, int *, int, int, int, int, int); 
#line 41 "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu"
bool InitCUDA() 
{ 
auto int count = 0; 
auto int i = 0; 

cudaGetDeviceCount(&count); 
if (count == 0) { 
fprintf(__iob_func() + 2, "There is no device.\n"); 
return false; 
}  

for (i = 0; i < count; i++) { 
auto cudaDeviceProp prop; 
if ((cudaGetDeviceProperties(&prop, i)) == (cudaSuccess)) { 
if ((prop.major) >= 1) { 
break; 
}  
}  
}  
if (i == count) { 
fprintf(__iob_func() + 2, "There is no device supporting CUDA.\n"); 
return false; 
}  
cudaSetDevice(i); 

printf("CUDA initialized.\n"); 
return true; 
} 
#line 74 "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu"
void meshFIM::GraphPartition_METIS(char *partfilename, int numBlock) 
{ 
auto int numVert = (((*(this->m_meshPtr)).vertices).size()); 

(this->m_PartitionLabel).resize(numVert); 
auto FILE *partFile = fopen(partfilename, "r+"); 
if (partFile == (0)) 
{ 
printf("NO part file found!!!!\n"); 
exit(1); 
}  


auto int tmp; 

for (int i = 0; i < numVert; i++) 
{ 
fscanf(partFile, "%d", (&(this->m_PartitionLabel)[(i)])); 


}  

srand((unsigned)time(0)); 




(this->m_BlockSizes).resize(numBlock); 


for (int i = 0; i < numBlock; i++) { 
(this->m_BlockSizes)[(i)] = (0); }  

auto float r; auto float g; auto float b; 



auto std::vector< Color, std::allocator< Color> >  colors; 
colors.resize(numBlock); 
for (int i = 0; i < numBlock; i++) 
{ 
r = rand() / ((double)32767); 
g = rand() / ((double)32767); 
b = rand() / ((double)32767); 
colors[(i)] = Color(r, g, b); 
}  
((*(this->m_meshPtr)).colors).resize(numVert); 
(this->m_PartitionVerts).resize(numBlock); 

for (int i = 0; i < numVert; i++) 
{ 
(this->m_PartitionVerts)[((this->m_PartitionLabel)[(i)])].push_back(i); 


(this->m_BlockSizes)[((this->m_PartitionLabel)[(i)])]++; 
((*(this->m_meshPtr)).colors)[(i)] = colors[((this->m_PartitionLabel)[(i)])]; 

}  

(this->m_maxNumVert) = 0; 

for (int i = 0; i < numBlock; i++) 
{ 

(this->m_maxNumVert) = ((this->m_maxNumVert) > ((this->m_BlockSizes)[(i)])) ? (this->m_maxNumVert) : ((this->m_BlockSizes)[(i)]); 
}  
#line 145
} 

void meshFIM::GraphPartition_METIS2(int &numBlock, int maxNumBlockVerts) 
{ 

auto FILE *outf; 

outf = fopen("tmp.mesh", "w+"); 
if (outf == (0)) 
{ 
printf("Cannot open mesh file to write!!!!\n"); 
exit(1); 
}  
auto int sz = (((*(this->m_meshPtr)).faces).size()); 
fprintf(outf, "%d 1\n", sz); 

for (int i = 0; i < sz; i++) { 
fprintf(outf, "%d %d %d\n", (((*(this->m_meshPtr)).faces)[(i)].v)[0] + 1, (((*(this->m_meshPtr)).faces)[(i)].v)[1] + 1, (((*(this->m_meshPtr)).faces)[(i)].v)[2] + 1); }  
fclose(outf); 

auto int numVert = (((*(this->m_meshPtr)).vertices).size()); 

(this->m_PartitionLabel).resize(numVert); 

auto char outputFileName[512]; 



auto char cmd[512]; 

if ((numBlock) == 0) 
{ 
numBlock = numVert / maxNumBlockVerts; 


do { 
numBlock++; 

(this->m_BlockSizes).resize(numBlock); 
for (int i = 0; i < (numBlock); i++) 
{ 
(this->m_BlockSizes)[(i)] = (0); 
}  

sprintf(cmd, "partnmesh.exe tmp.mesh %d", numBlock); 


system(cmd); 



sprintf(outputFileName, "tmp.mesh.npart.%d", numBlock); 


auto FILE *partFile = fopen(outputFileName, "r+"); 
if (partFile == (0)) 
{ 
printf("NO part file found!!!!\n"); 
exit(1); 
}  


auto int tmp; 

for (int i = 0; i < numVert; i++) 
{ 
fscanf(partFile, "%d", (&(this->m_PartitionLabel)[(i)])); 


}  

for (int i = 0; i < numVert; i++) 
{ 


(this->m_BlockSizes)[((this->m_PartitionLabel)[(i)])]++; 

}  
(this->m_maxNumVert) = 0; 

for (int i = 0; i < (numBlock); i++) 
{ 

(this->m_maxNumVert) = ((this->m_maxNumVert) > ((this->m_BlockSizes)[(i)])) ? (this->m_maxNumVert) : ((this->m_BlockSizes)[(i)]); 
}  

fclose(partFile); 


sprintf(outputFileName, "tmp.mesh.npart.%d", numBlock); 
unlink(outputFileName); 
sprintf(outputFileName, "tmp.mesh.epart.%d", numBlock); 
unlink(outputFileName); 

} while ((this->m_maxNumVert) != maxNumBlockVerts); 
} else 

{ 
(this->m_BlockSizes).resize(numBlock); 
for (int i = 0; i < (numBlock); i++) 
{ 
(this->m_BlockSizes)[(i)] = (0); 
}  

sprintf(cmd, "partnmesh.exe tmp.mesh %d", numBlock); 


system(cmd); 



sprintf(outputFileName, "tmp.mesh.npart.%d", numBlock); 


auto FILE *partFile = fopen(outputFileName, "r+"); 
if (partFile == (0)) 
{ 
printf("NO part file found!!!!\n"); 
exit(1); 
}  


auto int tmp; 

for (int i = 0; i < numVert; i++) 
{ 
fscanf(partFile, "%d", (&(this->m_PartitionLabel)[(i)])); 


}  

for (int i = 0; i < numVert; i++) 
{ 


(this->m_BlockSizes)[((this->m_PartitionLabel)[(i)])]++; 

}  
(this->m_maxNumVert) = 0; 

for (int i = 0; i < (numBlock); i++) 
{ 

(this->m_maxNumVert) = ((this->m_maxNumVert) > ((this->m_BlockSizes)[(i)])) ? (this->m_maxNumVert) : ((this->m_BlockSizes)[(i)]); 
}  

printf("max num vert is : %d\n", this->m_maxNumVert); 
fclose(partFile); 


sprintf(outputFileName, "tmp.mesh.npart.%d", numBlock); 
unlink(outputFileName); 
sprintf(outputFileName, "tmp.mesh.epart.%d", numBlock); 
unlink(outputFileName); 

}  




srand((unsigned)time(0)); 

printf("numBlock is : %d\n", numBlock); 
#line 318
auto float r; auto float g; auto float b; 



auto std::vector< Color, std::allocator< Color> >  colors; 
colors.resize(numBlock); 
for (int i = 0; i < (numBlock); i++) 
{ 
r = rand() / ((double)32767); 
g = rand() / ((double)32767); 
b = rand() / ((double)32767); 
colors[(i)] = Color(r, g, b); 
}  
((*(this->m_meshPtr)).colors).resize(numVert); 
(this->m_PartitionVerts).resize(numBlock); 

for (int i = 0; i < numVert; i++) 
{ 
(this->m_PartitionVerts)[((this->m_PartitionLabel)[(i)])].push_back(i); 
((*(this->m_meshPtr)).colors)[(i)] = colors[((this->m_PartitionLabel)[(i)])]; 

}  

unlink("tmp.mesh"); 
#line 351
} 

void meshFIM::GraphPartition_Square(int squareLength, int squareWidth, int blockLength, int blockWidth) 
{ 
auto int numVert = (((*(this->m_meshPtr)).vertices).size()); 

(this->m_PartitionLabel).resize(numVert); 




auto int numBlockLength = (squareLength / blockLength); 
auto int numBlockWidth = (squareWidth / blockWidth); 
auto int numBlock = (numBlockLength * numBlockWidth); 



for (int i = 0; i < squareWidth; i++) { 
for (int j = 0; j < squareLength; j++) 
{ 
(this->m_PartitionLabel)[(i * squareLength + j)] = (i / blockWidth) * numBlockLength + j / blockLength; 
}  }  

(this->m_BlockSizes).resize(numBlock); 


for (int i = 0; i < numBlock; i++) { 
(this->m_BlockSizes)[(i)] = (0); }  

auto float r; auto float g; auto float b; 



auto std::vector< Color, std::allocator< Color> >  colors; 
colors.resize(numBlock); 
for (int i = 0; i < numBlock; i++) 
{ 
r = rand() / ((double)32767); 
g = rand() / ((double)32767); 
b = rand() / ((double)32767); 
colors[(i)] = Color(r, g, b); 
}  
((*(this->m_meshPtr)).colors).resize(numVert); 
(this->m_PartitionVerts).resize(numBlock); 

for (int i = 0; i < numVert; i++) 
{ 
(this->m_PartitionVerts)[((this->m_PartitionLabel)[(i)])].push_back(i); 


(this->m_BlockSizes)[((this->m_PartitionLabel)[(i)])]++; 
((*(this->m_meshPtr)).colors)[(i)] = colors[((this->m_PartitionLabel)[(i)])]; 

}  

(this->m_maxNumVert) = 0; 

for (int i = 0; i < numBlock; i++) 
{ 

(this->m_maxNumVert) = ((this->m_maxNumVert) > ((this->m_BlockSizes)[(i)])) ? (this->m_maxNumVert) : ((this->m_BlockSizes)[(i)]); 
}  
printf("final number of blocks: %d\n", numBlock); 
#line 419
} 

void meshFIM::PartitionFaces(int numBlock) 
{ 

(this->m_PartitionFaces).resize(numBlock); 
(this->m_PartitionNbFaces).resize(numBlock); 

auto int numFaces = (((*(this->m_meshPtr)).faces).size()); 
auto TriMesh::Face f; 
auto int labelv0; 
auto int labelv1; 
auto int labelv2; 
auto std::vector< TriMesh::Face, std::allocator< TriMesh::Face> >  virtualfaces; 
auto std::vector< int, std::allocator< int> >  virtualFaceCnt; 

virtualFaceCnt.resize(numBlock); 
(this->m_PartitionVirtualFaces).resize(numBlock); 

for (int i = 0; i < numBlock; i++) { 
virtualFaceCnt[(i)] = (0); }  

(this->m_BlockNeighbor).resize(numBlock); 

for (int i = 0; i < numFaces; i++) 
{ 
f = ((*(this->m_meshPtr)).faces)[(i)]; 
auto int vfCnt = (((*(this->m_meshPtr)).faceVirtualFaces)[(i)].size()); 

for (int k = 0; k < 3; k++) 
{ 
if (!(*(this->m_meshPtr)).IsNonObtuse(f[k], f)) 
{ 
virtualFaceCnt[((this->m_PartitionLabel)[(f[k])])] += vfCnt; 
(this->m_PartitionVirtualFaces)[((this->m_PartitionLabel)[(f[k])])].insert((this->m_PartitionVirtualFaces)[((this->m_PartitionLabel)[(f[k])])].end(), ((*(this->m_meshPtr)).faceVirtualFaces)[(i)].begin(), ((*(this->m_meshPtr)).faceVirtualFaces)[(i)].end()); 
}  

}  
#line 462
labelv0 = (this->m_PartitionLabel)[(f[0])]; 
labelv1 = (this->m_PartitionLabel)[(f[1])]; 
labelv2 = (this->m_PartitionLabel)[(f[2])]; 

if ((labelv0 == labelv1) && (labelv1 == labelv2)) 
{ 
(this->m_PartitionFaces)[(labelv0)].push_back(i); 

} else { 
if ((labelv0 == labelv1) && (labelv1 != labelv2)) 
{ 
(this->m_PartitionNbFaces)[(labelv0)].push_back(i); 
(this->m_PartitionNbFaces)[(labelv2)].push_back(i); 

(this->m_BlockNeighbor)[(labelv0)].insert((this->m_BlockNeighbor)[(labelv0)].end(), labelv2); 
(this->m_BlockNeighbor)[(labelv2)].insert((this->m_BlockNeighbor)[(labelv2)].end(), labelv0); 
#line 485
} else { 
if ((labelv0 != labelv1) && (labelv1 == labelv2)) 
{ 
(this->m_PartitionNbFaces)[(labelv0)].push_back(i); 
(this->m_PartitionNbFaces)[(labelv2)].push_back(i); 

(this->m_BlockNeighbor)[(labelv0)].insert((this->m_BlockNeighbor)[(labelv0)].end(), labelv2); 
(this->m_BlockNeighbor)[(labelv2)].insert((this->m_BlockNeighbor)[(labelv2)].end(), labelv0); 
#line 498
} else { 

if ((labelv0 == labelv2) && (labelv1 != labelv2)) 
{ 
(this->m_PartitionNbFaces)[(labelv0)].push_back(i); 
(this->m_PartitionNbFaces)[(labelv1)].push_back(i); 

(this->m_BlockNeighbor)[(labelv0)].insert((this->m_BlockNeighbor)[(labelv0)].end(), labelv1); 
(this->m_BlockNeighbor)[(labelv1)].insert((this->m_BlockNeighbor)[(labelv1)].end(), labelv0); 




} else 


{ 
(this->m_PartitionNbFaces)[(labelv0)].push_back(i); 
(this->m_PartitionNbFaces)[(labelv1)].push_back(i); 
(this->m_PartitionNbFaces)[(labelv2)].push_back(i); 

(this->m_BlockNeighbor)[(labelv0)].insert((this->m_BlockNeighbor)[(labelv0)].end(), labelv2); 
(this->m_BlockNeighbor)[(labelv2)].insert((this->m_BlockNeighbor)[(labelv2)].end(), labelv0); 
(this->m_BlockNeighbor)[(labelv0)].insert((this->m_BlockNeighbor)[(labelv0)].end(), labelv1); 
(this->m_BlockNeighbor)[(labelv1)].insert((this->m_BlockNeighbor)[(labelv1)].end(), labelv0); 
(this->m_BlockNeighbor)[(labelv1)].insert((this->m_BlockNeighbor)[(labelv1)].end(), labelv2); 
(this->m_BlockNeighbor)[(labelv2)].insert((this->m_BlockNeighbor)[(labelv2)].end(), labelv1); 
#line 531
}  }  }  }  

}  

auto std::vector< int, std::allocator< int> >  PartitionToltalFaces; 
PartitionToltalFaces.resize(numBlock); 
(this->m_maxNumTotalFaces) = 0; 
for (int j = 0; j < numBlock; j++) 
{ 


PartitionToltalFaces[(j)] = ((this->m_PartitionFaces)[(j)].size() + (this->m_PartitionNbFaces)[(j)].size()) + virtualFaceCnt[(j)]; 
(this->m_maxNumTotalFaces) = ((PartitionToltalFaces[(j)]) > (this->m_maxNumTotalFaces)) ? (PartitionToltalFaces[(j)]) : (this->m_maxNumTotalFaces); 
}  
} 




void meshFIM::GenerateData(int numBlock) 
{ 

auto int numVert = (((*(this->m_meshPtr)).vertices).size()); 
auto int numFaces = (((*(this->m_meshPtr)).faces).size()); 
#line 560
if (!InitCUDA()) { 
exit(1); 
}  

auto float *d_Vertices = (0); 
auto float *d_vertT = (0); 

auto index *d_ActiveList = (0); 

auto int *d_BlockLabel = (0); 
auto int *d_Neighbors; 

auto int *d_con; 

auto int *d_con_forComputaion; 
auto int *d_blockCon; 
auto int *d_blockSizes; 
auto float *d_triMem; 
auto float *d_edgeMem0; 
auto float *d_edgeMem1; 
auto float *d_edgeMem2; 
auto float *d_speed; 
auto float *d_triMemOut; 
auto float *d_triMem_forComputation; 
auto int *d_vertMem; 

auto int *d_BlockSizes; 
auto int *d_out; 



auto float *h_Vertices = (0); 
auto float *h_vertT = (0); 

auto index *h_ActiveList = (0); 

auto int *h_BlockLabel = (0); 
auto int *h_Neighbors; 

auto float *h_triMem; 
auto float *h_edgeMem0; 
auto float *h_edgeMem1; 
auto float *h_edgeMem2; 
auto float *h_speed; 
auto int *h_vertMem; 
auto int *h_blockCon; 

auto int *h_BlockSizes; 
#line 619
h_BlockLabel = (int *)malloc(sizeof(int) * numBlock); 



h_edgeMem0 = (float *)malloc((sizeof(float) * this->m_maxNumTotalFaces) * numBlock); 
h_edgeMem1 = (float *)malloc((sizeof(float) * this->m_maxNumTotalFaces) * numBlock); 
h_edgeMem2 = (float *)malloc((sizeof(float) * this->m_maxNumTotalFaces) * numBlock); 
h_speed = (float *)malloc((sizeof(float) * this->m_maxNumTotalFaces) * numBlock); 


h_triMem = (float *)malloc(((sizeof(float) * (3)) * this->m_maxNumTotalFaces) * numBlock); 
h_vertMem = (int *)malloc(((sizeof(int) * (6)) * this->m_maxNumVert) * numBlock); 
h_BlockSizes = (int *)malloc(sizeof(int) * numBlock); 

h_blockCon = (int *)malloc(sizeof(int) * numBlock); 
#line 641
{ auto cudaError err = cudaMalloc((void **)(&d_con), (sizeof(int) * numBlock) * (64)); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 641, cudaGetErrorString(err)); exit(1); }  } ; ; 

{ auto cudaError err = cudaMalloc((void **)(&d_con_forComputaion), (sizeof(int) * numBlock) * (64)); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 643, cudaGetErrorString(err)); exit(1); }  } ; ; 

{ auto cudaError err = cudaMalloc((void **)(&d_blockCon), sizeof(int) * numBlock); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 645, cudaGetErrorString(err)); exit(1); }  } ; ; 

{ auto cudaError err = cudaMalloc((void **)(&d_triMem), ((sizeof(float) * (3)) * this->m_maxNumTotalFaces) * numBlock); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 647, cudaGetErrorString(err)); exit(1); }  } ; ; 
{ auto cudaError err = cudaMalloc((void **)(&d_triMemOut), ((sizeof(float) * (3)) * this->m_maxNumTotalFaces) * numBlock); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 648, cudaGetErrorString(err)); exit(1); }  } ; ; 
{ auto cudaError err = cudaMalloc((void **)(&d_edgeMem0), (sizeof(float) * this->m_maxNumTotalFaces) * numBlock); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 649, cudaGetErrorString(err)); exit(1); }  } ; ; 
{ auto cudaError err = cudaMalloc((void **)(&d_edgeMem1), (sizeof(float) * this->m_maxNumTotalFaces) * numBlock); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 650, cudaGetErrorString(err)); exit(1); }  } ; ; 
{ auto cudaError err = cudaMalloc((void **)(&d_edgeMem2), (sizeof(float) * this->m_maxNumTotalFaces) * numBlock); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 651, cudaGetErrorString(err)); exit(1); }  } ; ; 

{ auto cudaError err = cudaMalloc((void **)(&d_speed), (sizeof(float) * this->m_maxNumTotalFaces) * numBlock); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 653, cudaGetErrorString(err)); exit(1); }  } ; ; 



{ auto cudaError err = cudaMalloc((void **)(&d_vertMem), ((sizeof(int) * (6)) * this->m_maxNumVert) * numBlock); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 657, cudaGetErrorString(err)); exit(1); }  } ; ; 

{ auto cudaError err = cudaMalloc((void **)(&d_BlockSizes), sizeof(int) * numBlock); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 659, cudaGetErrorString(err)); exit(1); }  } ; ; 
#line 675
auto std::vector< std::vector< int, std::allocator< int> > , std::allocator< std::vector< int, std::allocator< int> > > >  blockVertMapping; 
blockVertMapping.resize(numVert); 


for (int i = 0; i < numBlock; i++) 
{ 
auto int blockIdx = ((i * this->m_maxNumTotalFaces) * 3); 
auto int numPF = ((this->m_PartitionFaces)[(i)].size()); 
for (int j = 0; j < numPF; j++) 
{ 
#line 691
(h_edgeMem0[i * this->m_maxNumTotalFaces + j]) = (((*(this->m_meshPtr)).faces)[((this->m_PartitionFaces)[(i)][(j)])].edgeLens)[0]; 
(h_edgeMem1[i * this->m_maxNumTotalFaces + j]) = (((*(this->m_meshPtr)).faces)[((this->m_PartitionFaces)[(i)][(j)])].edgeLens)[1]; 
(h_edgeMem2[i * this->m_maxNumTotalFaces + j]) = (((*(this->m_meshPtr)).faces)[((this->m_PartitionFaces)[(i)][(j)])].edgeLens)[2]; 


(h_triMem[(blockIdx + j * 3) + 0]) = ((10000000.0)); 
(h_triMem[(blockIdx + j * 3) + 1]) = ((10000000.0)); 
(h_triMem[(blockIdx + j * 3) + 2]) = ((10000000.0)); 

(h_speed[i * this->m_maxNumTotalFaces + j]) = ((*(this->m_meshPtr)).faces)[((this->m_PartitionFaces)[(i)][(j)])].speedInv; 



blockVertMapping[(((*(this->m_meshPtr)).faces)[((this->m_PartitionFaces)[(i)][(j)])][0])].push_back(((blockIdx + j * 3) + 0)); 
blockVertMapping[(((*(this->m_meshPtr)).faces)[((this->m_PartitionFaces)[(i)][(j)])][1])].push_back(((blockIdx + j * 3) + 1)); 
blockVertMapping[(((*(this->m_meshPtr)).faces)[((this->m_PartitionFaces)[(i)][(j)])][2])].push_back(((blockIdx + j * 3) + 2)); 
}  

}  

for (int i = 0; i < numBlock; i++) 
{ 

(h_blockCon[i]) = 1; 

(h_BlockLabel[i]) = (this->m_BlockLabel)[(i)]; 
(h_BlockSizes[i]) = (this->m_BlockSizes)[(i)]; 
auto int blockIdx = ((i * this->m_maxNumTotalFaces) * 3); 
auto int vertIdx = ((i * 6) * this->m_maxNumVert); 

auto int tmpVert[3]; 

auto int numPF = ((this->m_PartitionFaces)[(i)].size()); 
auto int numPNF = ((this->m_PartitionNbFaces)[(i)].size()); 
auto int numPVF = ((this->m_PartitionVirtualFaces)[(i)].size()); 

auto int k = 0; 
auto int l = 0; 

for (int j = numPF; j < (this->m_maxNumTotalFaces); j++) 
{ 



if (j < (numPF + numPNF)) 
{ 
(h_edgeMem0[i * this->m_maxNumTotalFaces + j]) = (((*(this->m_meshPtr)).faces)[((this->m_PartitionNbFaces)[(i)][(k)])].edgeLens)[0]; 
(h_edgeMem1[i * this->m_maxNumTotalFaces + j]) = (((*(this->m_meshPtr)).faces)[((this->m_PartitionNbFaces)[(i)][(k)])].edgeLens)[1]; 
(h_edgeMem2[i * this->m_maxNumTotalFaces + j]) = (((*(this->m_meshPtr)).faces)[((this->m_PartitionNbFaces)[(i)][(k)])].edgeLens)[2]; 


(h_triMem[(blockIdx + j * 3) + 0]) = ((10000000.0)); 
(h_triMem[(blockIdx + j * 3) + 1]) = ((10000000.0)); 
(h_triMem[(blockIdx + j * 3) + 2]) = ((10000000.0)); 
(h_speed[i * this->m_maxNumTotalFaces + j]) = ((*(this->m_meshPtr)).faces)[((this->m_PartitionNbFaces)[(i)][(k)])].speedInv; 


blockVertMapping[(((*(this->m_meshPtr)).faces)[((this->m_PartitionNbFaces)[(i)][(k)])][0])].push_back(((blockIdx + j * 3) + 0)); 
blockVertMapping[(((*(this->m_meshPtr)).faces)[((this->m_PartitionNbFaces)[(i)][(k)])][1])].push_back(((blockIdx + j * 3) + 1)); 
blockVertMapping[(((*(this->m_meshPtr)).faces)[((this->m_PartitionNbFaces)[(i)][(k)])][2])].push_back(((blockIdx + j * 3) + 2)); 



k++; 

} else { 


if (j < ((numPF + numPNF) + numPVF)) 
{ 
(h_edgeMem0[i * this->m_maxNumTotalFaces + j]) = ((this->m_PartitionVirtualFaces)[(i)][(l)].edgeLens)[0]; 
(h_edgeMem1[i * this->m_maxNumTotalFaces + j]) = ((this->m_PartitionVirtualFaces)[(i)][(l)].edgeLens)[1]; 
(h_edgeMem2[i * this->m_maxNumTotalFaces + j]) = ((this->m_PartitionVirtualFaces)[(i)][(l)].edgeLens)[2]; 


(h_triMem[(blockIdx + j * 3) + 0]) = ((10000000.0)); 
(h_triMem[(blockIdx + j * 3) + 1]) = ((10000000.0)); 
(h_triMem[(blockIdx + j * 3) + 2]) = ((10000000.0)); 
(h_speed[i * this->m_maxNumTotalFaces + j]) = (this->m_PartitionVirtualFaces)[(i)][(l)].speedInv; 



blockVertMapping[((this->m_PartitionVirtualFaces)[(i)][(l)][0])].push_back(((blockIdx + j * 3) + 0)); 
blockVertMapping[((this->m_PartitionVirtualFaces)[(i)][(l)][1])].push_back(((blockIdx + j * 3) + 1)); 
blockVertMapping[((this->m_PartitionVirtualFaces)[(i)][(l)][2])].push_back(((blockIdx + j * 3) + 2)); 

l++; 


} else 

{ 

(h_triMem[(blockIdx + j * 3) + 0]) = ((10000000.0)); 
(h_triMem[(blockIdx + j * 3) + 1]) = ((10000000.0)); 
(h_triMem[(blockIdx + j * 3) + 2]) = ((10000000.0)); 
#line 792
}  }  
}  
#line 799
}  
#line 806
(this->m_maxNumVertMapping) = 0; 
for (int i = 0; i < numVert; i++) 
{ 
auto int blockIndex = ((this->m_PartitionLabel)[(i)]); 
auto int tmp = (blockVertMapping[(i)][(0)]); 
auto int maxi = (((blockIndex + 1) * this->m_maxNumTotalFaces) * 3); 
auto int mini = ((blockIndex * this->m_maxNumTotalFaces) * 3); 
if ((tmp < mini) || (tmp >= maxi)) 
{ 
for (int j = 0; j < blockVertMapping[(i)].size(); j++) { 
if (((blockVertMapping[(i)][(j)]) >= mini) && ((blockVertMapping[(i)][(j)]) < maxi)) 
{ 
auto int swaptmp = tmp; 
blockVertMapping[(i)][(0)] = blockVertMapping[(i)][(j)]; 
blockVertMapping[(i)][(j)] = swaptmp; 
break; 

}  }  
}  
(this->m_maxNumVertMapping) = ((this->m_maxNumVertMapping) > blockVertMapping[(i)].size()) ? (this->m_maxNumVertMapping) : blockVertMapping[(i)].size(); 
}  


for (int i = 0; i < numVert; i++) 
{ 
auto int blockIndex = ((this->m_PartitionLabel)[(i)]); 
auto int tmp = (blockVertMapping[(i)][(0)]); 
auto int maxi = (((blockIndex + 1) * this->m_maxNumTotalFaces) * 3); 
auto int mini = ((blockIndex * this->m_maxNumTotalFaces) * 3); 
if ((tmp < mini) || (tmp >= maxi)) 
{ 
printf("beyond"); 
}  
}  



auto std::vector< std::vector< int, std::allocator< int> > , std::allocator< std::vector< int, std::allocator< int> > > >  blockVertMappingInside; 
auto std::vector< std::vector< int, std::allocator< int> > , std::allocator< std::vector< int, std::allocator< int> > > >  blockVertMappingOutside; 

blockVertMappingInside.resize(numVert); 
blockVertMappingOutside.resize(numVert); 

for (int i = 0; i < numBlock; i++) 
{ 
auto int triIdx = ((i * 3) * this->m_maxNumTotalFaces); 

for (int m = 0; m < (this->m_PartitionVerts)[(i)].size(); m++) 
{ 

auto std::vector< int, std::allocator< int> >  tmp = blockVertMapping[((this->m_PartitionVerts)[(i)][(m)])]; 


for (int n = 0; n < tmp.size(); n++) 
{ 
if (((tmp[(n)]) >= (triIdx + 0)) && ((tmp[(n)]) < (triIdx + this->m_maxNumTotalFaces * 3))) { 
blockVertMappingInside[((this->m_PartitionVerts)[(i)][(m)])].push_back(tmp[(n)]); } else 

{ 
blockVertMappingOutside[((this->m_PartitionVerts)[(i)][(m)])].push_back(tmp[(n)]); 

}  



}  

}  
}  

auto int maxVertMappingInside = 0; 
auto int maxVertMappingOutside = 0; 
for (int i = 0; i < numVert; i++) 
{ 
maxVertMappingInside = (maxVertMappingInside > blockVertMappingInside[(i)].size()) ? (maxVertMappingInside) : blockVertMappingInside[(i)].size(); 
maxVertMappingOutside = (maxVertMappingInside > blockVertMappingOutside[(i)].size()) ? (maxVertMappingInside) : blockVertMappingOutside[(i)].size(); 
}  

printf("maxVertMappingInside is: %d\n", maxVertMappingInside); 
printf("maxVertMappingOutside is: %d\n", maxVertMappingOutside); 


for (int i = 0; i < numBlock; i++) 
{ 
auto int vertIdx = ((i * 6) * this->m_maxNumVert); 

for (int m = 0; m < (this->m_PartitionVerts)[(i)].size(); m++) 
{ 

auto int tmpsize = (blockVertMappingInside[((this->m_PartitionVerts)[(i)][(m)])].size()); 

auto int n = 0; 
for (; n < tmpsize; n++) { 
(h_vertMem[(vertIdx + m * 6) + n]) = blockVertMappingInside[((this->m_PartitionVerts)[(i)][(m)])][(n)]; }  
for (; n < 6; n++) { 

(h_vertMem[(vertIdx + m * 6) + n]) = (-1) + (i * this->m_maxNumTotalFaces) * 3; }  

}  

for (int m = ((this->m_PartitionVerts)[(i)].size() * (6)); m < (this->m_maxNumVert * 6); m++) 
{ 

(h_vertMem[vertIdx + m]) = (-1) + (i * this->m_maxNumTotalFaces) * 3; 
}  
}  


auto int *h_vertMemOutside = ((int *)malloc(((this->m_maxNumVert * numBlock) * 6) * sizeof(int))); 
auto int *d_vertMemOutside; 
{ auto cudaError err = cudaMalloc((void **)(&d_vertMemOutside), ((this->m_maxNumVert * numBlock) * 6) * sizeof(int)); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 916, cudaGetErrorString(err)); exit(1); }  } ; ; 

for (int i = 0; i < numBlock; i++) 
{ 
auto int vertIdx = ((i * 6) * this->m_maxNumVert); 

for (int m = 0; m < (this->m_PartitionVerts)[(i)].size(); m++) 
{ 

auto int tmpsize = (blockVertMappingOutside[((this->m_PartitionVerts)[(i)][(m)])].size()); 

auto int n = 0; 
for (; n < tmpsize; n++) { 
(h_vertMemOutside[(vertIdx + m * 6) + n]) = blockVertMappingOutside[((this->m_PartitionVerts)[(i)][(m)])][(n)]; }  
for (; n < 6; n++) { 
(h_vertMemOutside[(vertIdx + m * 6) + n]) = (-1); }  

}  

for (int m = ((this->m_PartitionVerts)[(i)].size() * (6)); m < (this->m_maxNumVert * 6); m++) 
{ 
(h_vertMemOutside[vertIdx + m]) = (-1); 
}  
}  
#line 954
h_ActiveList = (index *)malloc(sizeof(int) * numBlock); 
{ auto cudaError err = cudaMalloc((void **)(&d_ActiveList), sizeof(int) * numBlock); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 955, cudaGetErrorString(err)); exit(1); }  } ; ; 
#line 977
auto float oldT1; auto float newT1; auto float oldT2; auto float newT2; 
auto index tmpIndex1; auto index tmpIndex2; 
auto std::vector< int, std::allocator< int> >  nb; 


auto int GridSize; 


auto int numActive; 




for (int i = 0; i < numBlock; i++) 
{ 

(h_blockCon[i]) = 1; 

(h_BlockLabel[i]) = (this->m_BlockLabel)[(i)]; 
(h_BlockSizes[i]) = (this->m_BlockSizes)[(i)]; 
}  



for (int i = 0; i < (this->m_SeedPoints).size(); i++) 
{ 
auto int seed = ((this->m_SeedPoints)[(i)]); 
auto int seedBelongToBlock = ((this->m_PartitionLabel)[(seed)]); 
(h_blockCon[seedBelongToBlock]) = 0; 

for (int j = 0; j < blockVertMapping[(seed)].size(); j++) 
{ 
(h_triMem[blockVertMapping[(seed)][(j)]]) = ((0.0)); 

}  


}  



auto std::vector< float, std::allocator< float> >  vec_triMem; 
auto std::vector< int, std::allocator< int> >  vec_vertMem; 
auto std::vector< int, std::allocator< int> >  vec_vertMemOutside; 

vec_triMem.resize((3 * this->m_maxNumTotalFaces) * numBlock); 
vec_vertMem.resize((6 * this->m_maxNumVert) * numBlock); 
vec_vertMemOutside.resize((6 * this->m_maxNumVert) * numBlock); 
for (int i = 0; i < ((3 * this->m_maxNumTotalFaces) * numBlock); i++) { 
vec_triMem[(i)] = h_triMem[i]; }  

for (int i = 0; i < ((6 * this->m_maxNumVert) * numBlock); i++) { 
vec_vertMem[(i)] = h_vertMem[i]; }  


for (int i = 0; i < ((6 * this->m_maxNumVert) * numBlock); i++) { 
vec_vertMemOutside[(i)] = h_vertMemOutside[i]; }  


{ auto cudaError err = cudaMemcpy(d_triMem, h_triMem, ((sizeof(float) * this->m_maxNumTotalFaces) * numBlock) * (3), cudaMemcpyHostToDevice); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1036, cudaGetErrorString(err)); exit(1); }  } ; ; 

numActive = (this->m_ActiveBlocks).size(); 


auto std::set< int, std::less< int> , std::allocator< int> > ::iterator activeiter = (this->m_ActiveBlocks).begin(); 
for (int i = 0; (activeiter != (this->m_ActiveBlocks).end()); activeiter++) { 
(h_ActiveList[i++]) = (*activeiter); }  



{ auto cudaError err = cudaMemcpy(d_triMem, h_triMem, ((sizeof(float) * this->m_maxNumTotalFaces) * numBlock) * (3), cudaMemcpyHostToDevice); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1047, cudaGetErrorString(err)); exit(1); }  } ; ; 
{ auto cudaError err = cudaMemcpy(d_triMemOut, h_triMem, ((sizeof(float) * this->m_maxNumTotalFaces) * numBlock) * (3), cudaMemcpyHostToDevice); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1048, cudaGetErrorString(err)); exit(1); }  } ; ; 
{ auto cudaError err = cudaMemcpy(d_edgeMem0, h_edgeMem0, (sizeof(float) * this->m_maxNumTotalFaces) * numBlock, cudaMemcpyHostToDevice); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1049, cudaGetErrorString(err)); exit(1); }  } ; ; 
{ auto cudaError err = cudaMemcpy(d_edgeMem1, h_edgeMem1, (sizeof(float) * this->m_maxNumTotalFaces) * numBlock, cudaMemcpyHostToDevice); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1050, cudaGetErrorString(err)); exit(1); }  } ; ; 
{ auto cudaError err = cudaMemcpy(d_edgeMem2, h_edgeMem2, (sizeof(float) * this->m_maxNumTotalFaces) * numBlock, cudaMemcpyHostToDevice); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1051, cudaGetErrorString(err)); exit(1); }  } ; ; 

{ auto cudaError err = cudaMemcpy(d_speed, h_speed, (sizeof(float) * this->m_maxNumTotalFaces) * numBlock, cudaMemcpyHostToDevice); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1053, cudaGetErrorString(err)); exit(1); }  } ; ; 

{ auto cudaError err = cudaMemcpy(d_vertMem, h_vertMem, ((sizeof(int) * this->m_maxNumVert) * numBlock) * (6), cudaMemcpyHostToDevice); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1055, cudaGetErrorString(err)); exit(1); }  } ; ; 
{ auto cudaError err = cudaMemcpy(d_vertMemOutside, h_vertMemOutside, ((sizeof(int) * this->m_maxNumVert) * numBlock) * (6), cudaMemcpyHostToDevice); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1056, cudaGetErrorString(err)); exit(1); }  } ; ; 
{ auto cudaError err = cudaMemcpy(d_BlockSizes, h_BlockSizes, sizeof(int) * numBlock, cudaMemcpyHostToDevice); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1057, cudaGetErrorString(err)); exit(1); }  } ; ; 
{ auto cudaError err = cudaMemcpy(d_blockCon, h_blockCon, sizeof(int) * numBlock, cudaMemcpyHostToDevice); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1058, cudaGetErrorString(err)); exit(1); }  } ; ; 


printf("max number of triangles per block: %d\n", this->m_maxNumTotalFaces); 
auto int nTotalIter = 0; 


auto unsigned timer = (0); 
auto unsigned timerTotal = (0); 
if ((CUTTrue) != (cutCreateTimer(&timer))) { fprintf(__iob_func() + 2, "Cut error in file \'%s\' in line %i.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1067); exit(1); }  ; 
if ((CUTTrue) != (cutCreateTimer(&timerTotal))) { fprintf(__iob_func() + 2, "Cut error in file \'%s\' in line %i.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1068); exit(1); }  ; 
if ((CUTTrue) != (cutStartTimer(timerTotal))) { fprintf(__iob_func() + 2, "Cut error in file \'%s\' in line %i.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1069); exit(1); }  ; 




auto int totalIterationNumber = 0; 


while (numActive > 0) 
{ 




nTotalIter++; 

totalIterationNumber += numActive; 


auto dim3 dimGrid(numActive, 1); 
auto dim3 dimBlock(this->m_maxNumTotalFaces, 1); 


{ auto cudaError err = cudaMemcpy(d_ActiveList, h_ActiveList, sizeof(int) * numBlock, cudaMemcpyHostToDevice); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1092, cudaGetErrorString(err)); exit(1); }  } ; ; 

cudaConfigureCall(dimGrid, dimBlock, (this->m_maxNumTotalFaces * 3) * sizeof(float) + (this->m_maxNumVert * 6) * sizeof(short)) ? ((void)0) : FIMCuda__entry(d_triMem, d_triMemOut, d_vertMem, d_vertMemOutside, d_edgeMem0, d_edgeMem1, d_edgeMem2, d_speed, d_BlockSizes, d_con, d_ActiveList, numActive, this->m_maxNumTotalFaces, this->m_maxNumVert, this->m_StopDistance); 
{ auto cudaError_t err = cudaGetLastError(); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error: %s in file \'%s\' in line %i : %s.\n", "Kernel execution failed", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1095, cudaGetErrorString(err)); exit(1); }  } ; 
#line 1133
dimBlock = dim3(64 / 2, 1); 
cudaConfigureCall(dimGrid, dimBlock) ? ((void)0) : run_reduction__entry(d_con, d_blockCon, d_ActiveList, numActive, d_BlockSizes); 
{ auto cudaError_t err = cudaGetLastError(); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error: %s in file \'%s\' in line %i : %s.\n", "Kernel execution failed", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1135, cudaGetErrorString(err)); exit(1); }  } ; 
#line 1156
{ auto cudaError err = cudaMemcpy(h_blockCon, d_blockCon, numBlock * sizeof(int), cudaMemcpyDeviceToHost); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1156, cudaGetErrorString(err)); exit(1); }  } ; ; 
#line 1162
auto int nOldActiveBlock = numActive; 
#line 1171
for (uint i = (0); i < nOldActiveBlock; i++) 
{ 

auto uint currBlkIdx = (h_ActiveList[i]); 

if (h_blockCon[currBlkIdx]) 
{ 

auto std::set< int, std::less< int> , std::allocator< int> >  nb = (this->m_BlockNeighbor)[currBlkIdx]; 

auto std::set< int, std::less< int> , std::allocator< int> > ::iterator iter; 
for (iter = nb.begin(); (iter != nb.end()); iter++) 
{ 
auto int currIdx = ((*iter)); 

if ((h_BlockLabel[currIdx]) == 0) 
{ 
(h_BlockLabel[currIdx]) = 1; 
(h_ActiveList[numActive++]) = currIdx; 

}  
}  
}  



}  
#line 1216
{ auto cudaError err = cudaMemcpy(d_ActiveList, h_ActiveList, numActive * sizeof(int), cudaMemcpyHostToDevice); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1216, cudaGetErrorString(err)); exit(1); }  } ; ; 
#line 1226
dimGrid = dim3(numActive, 1); 
dimBlock = dim3(this->m_maxNumTotalFaces, 1); 


cudaConfigureCall(dimGrid, dimBlock, (this->m_maxNumTotalFaces * 3) * sizeof(float) + (this->m_maxNumVert * 6) * sizeof(short)) ? ((void)0) : run_check_neighbor__entry(d_triMemOut, d_triMem, d_vertMem, d_vertMemOutside, d_edgeMem0, d_edgeMem1, d_edgeMem2, d_speed, d_BlockSizes, d_con, d_ActiveList, nOldActiveBlock, this->m_maxNumTotalFaces, this->m_maxNumVert, numActive, this->m_StopDistance); 
{ auto cudaError_t err = cudaGetLastError(); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error: %s in file \'%s\' in line %i : %s.\n", "Kernel execution failed", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1231, cudaGetErrorString(err)); exit(1); }  } ; 
#line 1247
dimGrid = dim3(numActive, 1); 
dimBlock = dim3(64 / 2, 1); 
#line 1254
cudaConfigureCall(dimGrid, dimBlock) ? ((void)0) : run_reduction__entry(d_con, d_blockCon, d_ActiveList, numActive, d_BlockSizes); 
{ auto cudaError_t err = cudaGetLastError(); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error: %s in file \'%s\' in line %i : %s.\n", "Kernel execution failed", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1255, cudaGetErrorString(err)); exit(1); }  } ; 
#line 1276
numActive = 0; 


{ auto cudaError err = cudaMemcpy(h_blockCon, d_blockCon, numBlock * sizeof(int), cudaMemcpyDeviceToHost); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1279, cudaGetErrorString(err)); exit(1); }  } ; ; 
for (uint i = (0); i < numBlock; i++) 
{ 
if (!(h_blockCon[i])) 
{ 
(h_BlockLabel[i]) = 1; 
(h_ActiveList[numActive++]) = i; 


} else { 
(h_BlockLabel[i]) = 0; }  
}  
#line 1297
}  


{ auto cudaError err = cudaThreadSynchronize(); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1300, cudaGetErrorString(err)); exit(1); }  } ; ; 
#line 1309
if ((CUTTrue) != (cutStopTimer(timerTotal))) { fprintf(__iob_func() + 2, "Cut error in file \'%s\' in line %i.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1309); exit(1); }  ; 
#line 1317
{ auto cudaError err = cudaMemcpy(h_triMem, d_triMem, ((sizeof(float) * this->m_maxNumTotalFaces) * numBlock) * (3), cudaMemcpyDeviceToHost); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1317, cudaGetErrorString(err)); exit(1); }  } ; ; 
#line 1329
{ auto cudaError_t err = cudaGetLastError(); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error: %s in file \'%s\' in line %i : %s.\n", "Kernel execution failed\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1329, cudaGetErrorString(err)); exit(1); }  } ; 


printf("Total Processing time: %f (ms)\n", cutGetTimerValue(timerTotal)); 
if ((CUTTrue) != (cutDeleteTimer(timerTotal))) { fprintf(__iob_func() + 2, "Cut error in file \'%s\' in line %i.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1333); exit(1); }  ; 
if ((CUTTrue) != (cutDeleteTimer(timer))) { fprintf(__iob_func() + 2, "Cut error in file \'%s\' in line %i.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1334); exit(1); }  ; 

printf("The iteration number: %d\n", nTotalIter); 
printf("The total iteration number: %d\n", totalIterationNumber); 
printf("The total localsolver calls per vertex: %f\n", (((totalIterationNumber * this->m_maxNumTotalFaces) * (6 + 1)) * (3.0)) / (float)numVert); 

vec_triMem.resize((this->m_maxNumTotalFaces * numBlock) * 3); 
auto float maxVertT = (0); 
for (int i = 0; i < (this->m_maxNumTotalFaces * numBlock); i++) 
{ 


vec_triMem[(3 * i + 0)] = h_triMem[i * 3 + 0]; 
vec_triMem[(3 * i + 1)] = h_triMem[i * 3 + 1]; 
vec_triMem[(3 * i + 2)] = h_triMem[i * 3 + 2]; 

if ((h_triMem[i * 3 + 0]) >= (10000000.0)) { 
vec_triMem[(3 * i + 0)] = (-2); }  
if ((h_triMem[i * 3 + 1]) >= (10000000.0)) { 
vec_triMem[(3 * i + 1)] = (-2); }  
if ((h_triMem[i * 3 + 2]) >= (10000000.0)) { 
vec_triMem[(3 * i + 2)] = (-2); }  


maxVertT = (maxVertT > (((vec_triMem[(3 * i + 2)]) > (((vec_triMem[(3 * i + 1)]) > (vec_triMem[(3 * i + 0)])) ? (vec_triMem[(3 * i + 1)]) : (vec_triMem[(3 * i + 0)]))) ? (vec_triMem[(3 * i + 2)]) : (((vec_triMem[(3 * i + 1)]) > (vec_triMem[(3 * i + 0)])) ? (vec_triMem[(3 * i + 1)]) : (vec_triMem[(3 * i + 0)])))) ? maxVertT : (((vec_triMem[(3 * i + 2)]) > (((vec_triMem[(3 * i + 1)]) > (vec_triMem[(3 * i + 0)])) ? (vec_triMem[(3 * i + 1)]) : (vec_triMem[(3 * i + 0)]))) ? (vec_triMem[(3 * i + 2)]) : (((vec_triMem[(3 * i + 1)]) > (vec_triMem[(3 * i + 0)])) ? (vec_triMem[(3 * i + 1)]) : (vec_triMem[(3 * i + 0)]))); 

}  

auto int vertIndex = 0; 

for (int i = 0; i < numVert; i++) 
{ 

((*(this->m_meshPtr)).vertT)[(i)] = h_triMem[blockVertMapping[(i)][(0)]]; 
if ((((*(this->m_meshPtr)).vertT)[(i)]) == maxVertT) { 
vertIndex = i; }  


}  


printf("The maximun vertT is: %f, the vert index is: %d \n", maxVertT, vertIndex); 
#line 1387
{ auto cudaError err = cudaFree(d_ActiveList); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1387, cudaGetErrorString(err)); exit(1); }  } ; ; 
{ auto cudaError err = cudaFree(d_triMem); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1388, cudaGetErrorString(err)); exit(1); }  } ; ; 
{ auto cudaError err = cudaFree(d_vertMem); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1389, cudaGetErrorString(err)); exit(1); }  } ; ; 
{ auto cudaError err = cudaFree(d_edgeMem0); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1390, cudaGetErrorString(err)); exit(1); }  } ; ; 
{ auto cudaError err = cudaFree(d_edgeMem1); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1391, cudaGetErrorString(err)); exit(1); }  } ; ; 
{ auto cudaError err = cudaFree(d_edgeMem2); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1392, cudaGetErrorString(err)); exit(1); }  } ; ; 

{ auto cudaError err = cudaFree(d_speed); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1394, cudaGetErrorString(err)); exit(1); }  } ; ; 

{ auto cudaError err = cudaFree(d_con); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1396, cudaGetErrorString(err)); exit(1); }  } ; ; 

{ auto cudaError err = cudaFree(d_blockCon); if ((cudaSuccess) != err) { fprintf(__iob_func() + 2, "Cuda error in file \'%s\' in line %i : %s.\n", "d:/Lab2/FIM/meshFIM_CUDA_partition_color_square_ModifiedB_modifiedDatastucture_globalCo/meshFIM_CUDA//meshFIM.cu", 1398, cudaGetErrorString(err)); exit(1); }  } ; ; 
#line 1405
free(h_ActiveList); 

free(h_edgeMem0); 
free(h_edgeMem1); 
free(h_edgeMem2); 

free(h_speed); 

free(h_triMem); 
free(h_vertMem); 

free(h_BlockLabel); 
free(h_blockCon); 
free(h_BlockSizes); 
#line 1424
} 

#include "meshFIM.cudafe1.stub.c"
